// The Module object: Our interface to the outside world. We import
// and export values on it, and do the work to get that through
// closure compiler if necessary. There are various ways Module can be used:
// 1. Not defined. We create it here
// 2. A function parameter, function(Module) { ..generated code.. }
// 3. pre-run appended it, var Module = {}; ..generated code..
// 4. External script tag defines var Module.
// We need to do an eval in order to handle the closure compiler
// case, where this code here is minified but Module was defined
// elsewhere (e.g. case 4 above). We also need to check if Module
// already exists (e.g. case 3 above).
// Note that if you want to run closure, and also to use Module
// after the generated code, you will need to define   var Module = {};
// before the code. Then that object will be used in the code, and you
// can continue to use Module afterwards as well.
var Module;
if (!Module) Module = (typeof Module !== 'undefined' ? Module : null) || {};

// Sometimes an existing Module object exists with properties
// meant to overwrite the default module functionality. Here
// we collect those properties and reapply _after_ we configure
// the current environment's defaults to avoid having to be so
// defensive during initialization.
var moduleOverrides = {};
for (var key in Module) {
  if (Module.hasOwnProperty(key)) {
    moduleOverrides[key] = Module[key];
  }
}

// The environment setup code below is customized to use Module.
// *** Environment setup code ***
var ENVIRONMENT_IS_WEB = false;
var ENVIRONMENT_IS_WORKER = false;
var ENVIRONMENT_IS_NODE = false;
var ENVIRONMENT_IS_SHELL = false;

// Three configurations we can be running in:
// 1) We could be the application main() thread running in the main JS UI thread. (ENVIRONMENT_IS_WORKER == false and ENVIRONMENT_IS_PTHREAD == false)
// 2) We could be the application main() thread proxied to worker. (with Emscripten -s PROXY_TO_WORKER=1) (ENVIRONMENT_IS_WORKER == true, ENVIRONMENT_IS_PTHREAD == false)
// 3) We could be an application pthread running in a worker. (ENVIRONMENT_IS_WORKER == true and ENVIRONMENT_IS_PTHREAD == true)

if (Module['ENVIRONMENT']) {
  if (Module['ENVIRONMENT'] === 'WEB') {
    ENVIRONMENT_IS_WEB = true;
  } else if (Module['ENVIRONMENT'] === 'WORKER') {
    ENVIRONMENT_IS_WORKER = true;
  } else if (Module['ENVIRONMENT'] === 'NODE') {
    ENVIRONMENT_IS_NODE = true;
  } else if (Module['ENVIRONMENT'] === 'SHELL') {
    ENVIRONMENT_IS_SHELL = true;
  } else {
    throw new Error('The provided Module[\'ENVIRONMENT\'] value is not valid. It must be one of: WEB|WORKER|NODE|SHELL.');
  }
} else {
  ENVIRONMENT_IS_WEB = typeof window === 'object';
  ENVIRONMENT_IS_WORKER = typeof importScripts === 'function';
  ENVIRONMENT_IS_NODE = typeof process === 'object' && typeof require === 'function' && !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_WORKER;
  ENVIRONMENT_IS_SHELL = !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_NODE && !ENVIRONMENT_IS_WORKER;
}


if (ENVIRONMENT_IS_NODE) {
  // Expose functionality in the same simple way that the shells work
  // Note that we pollute the global namespace here, otherwise we break in node
  if (!Module['print']) Module['print'] = console.log;
  if (!Module['printErr']) Module['printErr'] = console.warn;

  var nodeFS;
  var nodePath;

  Module['read'] = function shell_read(filename, binary) {
    if (!nodeFS) nodeFS = require('fs');
    if (!nodePath) nodePath = require('path');
    filename = nodePath['normalize'](filename);
    var ret = nodeFS['readFileSync'](filename);
    return binary ? ret : ret.toString();
  };

  Module['readBinary'] = function readBinary(filename) {
    var ret = Module['read'](filename, true);
    if (!ret.buffer) {
      ret = new Uint8Array(ret);
    }
    assert(ret.buffer);
    return ret;
  };

  Module['load'] = function load(f) {
    globalEval(read(f));
  };

  if (!Module['thisProgram']) {
    if (process['argv'].length > 1) {
      Module['thisProgram'] = process['argv'][1].replace(/\\/g, '/');
    } else {
      Module['thisProgram'] = 'unknown-program';
    }
  }

  Module['arguments'] = process['argv'].slice(2);

  if (typeof module !== 'undefined') {
    module['exports'] = Module;
  }

  process['on']('uncaughtException', function(ex) {
    // suppress ExitStatus exceptions from showing an error
    if (!(ex instanceof ExitStatus)) {
      throw ex;
    }
  });

  Module['inspect'] = function () { return '[Emscripten Module object]'; };
}
else if (ENVIRONMENT_IS_SHELL) {
  if (!Module['print']) Module['print'] = print;
  if (typeof printErr != 'undefined') Module['printErr'] = printErr; // not present in v8 or older sm

  if (typeof read != 'undefined') {
    Module['read'] = read;
  } else {
    Module['read'] = function shell_read() { throw 'no read() available' };
  }

  Module['readBinary'] = function readBinary(f) {
    if (typeof readbuffer === 'function') {
      return new Uint8Array(readbuffer(f));
    }
    var data = read(f, 'binary');
    assert(typeof data === 'object');
    return data;
  };

  if (typeof scriptArgs != 'undefined') {
    Module['arguments'] = scriptArgs;
  } else if (typeof arguments != 'undefined') {
    Module['arguments'] = arguments;
  }

  if (typeof quit === 'function') {
    Module['quit'] = function(status, toThrow) {
      quit(status);
    }
  }

}
else if (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER) {
  Module['read'] = function shell_read(url) {
    var xhr = new XMLHttpRequest();
    xhr.open('GET', url, false);
    xhr.send(null);
    return xhr.responseText;
  };

  if (ENVIRONMENT_IS_WORKER) {
    Module['readBinary'] = function readBinary(url) {
      var xhr = new XMLHttpRequest();
      xhr.open('GET', url, false);
      xhr.responseType = 'arraybuffer';
      xhr.send(null);
      return xhr.response;
    };
  }

  Module['readAsync'] = function readAsync(url, onload, onerror) {
    var xhr = new XMLHttpRequest();
    xhr.open('GET', url, true);
    xhr.responseType = 'arraybuffer';
    xhr.onload = function xhr_onload() {
      if (xhr.status == 200 || (xhr.status == 0 && xhr.response)) { // file URLs can return 0
        onload(xhr.response);
      } else {
        onerror();
      }
    };
    xhr.onerror = onerror;
    xhr.send(null);
  };

  if (typeof arguments != 'undefined') {
    Module['arguments'] = arguments;
  }

  if (typeof console !== 'undefined') {
    if (!Module['print']) Module['print'] = function shell_print(x) {
      console.log(x);
    };
    if (!Module['printErr']) Module['printErr'] = function shell_printErr(x) {
      console.warn(x);
    };
  } else {
    // Probably a worker, and without console.log. We can do very little here...
    var TRY_USE_DUMP = false;
    if (!Module['print']) Module['print'] = (TRY_USE_DUMP && (typeof(dump) !== "undefined") ? (function(x) {
      dump(x);
    }) : (function(x) {
      // self.postMessage(x); // enable this if you want stdout to be sent as messages
    }));
  }

  if (ENVIRONMENT_IS_WORKER) {
    Module['load'] = importScripts;
  }

  if (typeof Module['setWindowTitle'] === 'undefined') {
    Module['setWindowTitle'] = function(title) { document.title = title };
  }
}
else {
  // Unreachable because SHELL is dependant on the others
  throw 'Unknown runtime environment. Where are we?';
}

function globalEval(x) {
  eval.call(null, x);
}
if (!Module['load'] && Module['read']) {
  Module['load'] = function load(f) {
    globalEval(Module['read'](f));
  };
}
if (!Module['print']) {
  Module['print'] = function(){};
}
if (!Module['printErr']) {
  Module['printErr'] = Module['print'];
}
if (!Module['arguments']) {
  Module['arguments'] = [];
}
if (!Module['thisProgram']) {
  Module['thisProgram'] = './this.program';
}
if (!Module['quit']) {
  Module['quit'] = function(status, toThrow) {
    throw toThrow;
  }
}

// *** Environment setup code ***

// Closure helpers
Module.print = Module['print'];
Module.printErr = Module['printErr'];

// Callbacks
Module['preRun'] = [];
Module['postRun'] = [];

// Merge back in the overrides
for (var key in moduleOverrides) {
  if (moduleOverrides.hasOwnProperty(key)) {
    Module[key] = moduleOverrides[key];
  }
}
// Free the object hierarchy contained in the overrides, this lets the GC
// reclaim data used e.g. in memoryInitializerRequest, which is a large typed array.
moduleOverrides = undefined;



// {{PREAMBLE_ADDITIONS}}

// === Preamble library stuff ===

// Documentation for the public APIs defined in this file must be updated in:
//    site/source/docs/api_reference/preamble.js.rst
// A prebuilt local version of the documentation is available at:
//    site/build/text/docs/api_reference/preamble.js.txt
// You can also build docs locally as HTML or other formats in site/
// An online HTML version (which may be of a different version of Emscripten)
//    is up at http://kripken.github.io/emscripten-site/docs/api_reference/preamble.js.html

//========================================
// Runtime code shared with compiler
//========================================

var Runtime = {
  setTempRet0: function (value) {
    tempRet0 = value;
    return value;
  },
  getTempRet0: function () {
    return tempRet0;
  },
  stackSave: function () {
    return STACKTOP;
  },
  stackRestore: function (stackTop) {
    STACKTOP = stackTop;
  },
  getNativeTypeSize: function (type) {
    switch (type) {
      case 'i1': case 'i8': return 1;
      case 'i16': return 2;
      case 'i32': return 4;
      case 'i64': return 8;
      case 'float': return 4;
      case 'double': return 8;
      default: {
        if (type[type.length-1] === '*') {
          return Runtime.QUANTUM_SIZE; // A pointer
        } else if (type[0] === 'i') {
          var bits = parseInt(type.substr(1));
          assert(bits % 8 === 0);
          return bits/8;
        } else {
          return 0;
        }
      }
    }
  },
  getNativeFieldSize: function (type) {
    return Math.max(Runtime.getNativeTypeSize(type), Runtime.QUANTUM_SIZE);
  },
  STACK_ALIGN: 16,
  prepVararg: function (ptr, type) {
    if (type === 'double' || type === 'i64') {
      // move so the load is aligned
      if (ptr & 7) {
        assert((ptr & 7) === 4);
        ptr += 4;
      }
    } else {
      assert((ptr & 3) === 0);
    }
    return ptr;
  },
  getAlignSize: function (type, size, vararg) {
    // we align i64s and doubles on 64-bit boundaries, unlike x86
    if (!vararg && (type == 'i64' || type == 'double')) return 8;
    if (!type) return Math.min(size, 8); // align structures internally to 64 bits
    return Math.min(size || (type ? Runtime.getNativeFieldSize(type) : 0), Runtime.QUANTUM_SIZE);
  },
  dynCall: function (sig, ptr, args) {
    if (args && args.length) {
      assert(args.length == sig.length-1);
      assert(('dynCall_' + sig) in Module, 'bad function pointer type - no table for sig \'' + sig + '\'');
      return Module['dynCall_' + sig].apply(null, [ptr].concat(args));
    } else {
      assert(sig.length == 1);
      assert(('dynCall_' + sig) in Module, 'bad function pointer type - no table for sig \'' + sig + '\'');
      return Module['dynCall_' + sig].call(null, ptr);
    }
  },
  functionPointers: [],
  addFunction: function (func) {
    for (var i = 0; i < Runtime.functionPointers.length; i++) {
      if (!Runtime.functionPointers[i]) {
        Runtime.functionPointers[i] = func;
        return 2*(1 + i);
      }
    }
    throw 'Finished up all reserved function pointers. Use a higher value for RESERVED_FUNCTION_POINTERS.';
  },
  removeFunction: function (index) {
    Runtime.functionPointers[(index-2)/2] = null;
  },
  warnOnce: function (text) {
    if (!Runtime.warnOnce.shown) Runtime.warnOnce.shown = {};
    if (!Runtime.warnOnce.shown[text]) {
      Runtime.warnOnce.shown[text] = 1;
      Module.printErr(text);
    }
  },
  funcWrappers: {},
  getFuncWrapper: function (func, sig) {
    assert(sig);
    if (!Runtime.funcWrappers[sig]) {
      Runtime.funcWrappers[sig] = {};
    }
    var sigCache = Runtime.funcWrappers[sig];
    if (!sigCache[func]) {
      // optimize away arguments usage in common cases
      if (sig.length === 1) {
        sigCache[func] = function dynCall_wrapper() {
          return Runtime.dynCall(sig, func);
        };
      } else if (sig.length === 2) {
        sigCache[func] = function dynCall_wrapper(arg) {
          return Runtime.dynCall(sig, func, [arg]);
        };
      } else {
        // general case
        sigCache[func] = function dynCall_wrapper() {
          return Runtime.dynCall(sig, func, Array.prototype.slice.call(arguments));
        };
      }
    }
    return sigCache[func];
  },
  getCompilerSetting: function (name) {
    throw 'You must build with -s RETAIN_COMPILER_SETTINGS=1 for Runtime.getCompilerSetting or emscripten_get_compiler_setting to work';
  },
  stackAlloc: function (size) { var ret = STACKTOP;STACKTOP = (STACKTOP + size)|0;STACKTOP = (((STACKTOP)+15)&-16);(assert((((STACKTOP|0) < (STACK_MAX|0))|0))|0); return ret; },
  staticAlloc: function (size) { var ret = STATICTOP;STATICTOP = (STATICTOP + (assert(!staticSealed),size))|0;STATICTOP = (((STATICTOP)+15)&-16); return ret; },
  dynamicAlloc: function (size) { assert(DYNAMICTOP_PTR);var ret = HEAP32[DYNAMICTOP_PTR>>2];var end = (((ret + size + 15)|0) & -16);HEAP32[DYNAMICTOP_PTR>>2] = end;if (end >= TOTAL_MEMORY) {var success = enlargeMemory();if (!success) {HEAP32[DYNAMICTOP_PTR>>2] = ret;return 0;}}return ret;},
  alignMemory: function (size,quantum) { var ret = size = Math.ceil((size)/(quantum ? quantum : 16))*(quantum ? quantum : 16); return ret; },
  makeBigInt: function (low,high,unsigned) { var ret = (unsigned ? ((+((low>>>0)))+((+((high>>>0)))*4294967296.0)) : ((+((low>>>0)))+((+((high|0)))*4294967296.0))); return ret; },
  GLOBAL_BASE: 8,
  QUANTUM_SIZE: 4,
  __dummy__: 0
}



Module["Runtime"] = Runtime;



//========================================
// Runtime essentials
//========================================

var ABORT = 0; // whether we are quitting the application. no code should run after this. set in exit() and abort()
var EXITSTATUS = 0;

/** @type {function(*, string=)} */
function assert(condition, text) {
  if (!condition) {
    abort('Assertion failed: ' + text);
  }
}

var globalScope = this;

// Returns the C function with a specified identifier (for C++, you need to do manual name mangling)
function getCFunc(ident) {
  var func = Module['_' + ident]; // closure exported function
  if (!func) {
    try { func = eval('_' + ident); } catch(e) {}
  }
  assert(func, 'Cannot call unknown function ' + ident + ' (perhaps LLVM optimizations or closure removed it?)');
  return func;
}

var cwrap, ccall;
(function(){
  var JSfuncs = {
    // Helpers for cwrap -- it can't refer to Runtime directly because it might
    // be renamed by closure, instead it calls JSfuncs['stackSave'].body to find
    // out what the minified function name is.
    'stackSave': function() {
      Runtime.stackSave()
    },
    'stackRestore': function() {
      Runtime.stackRestore()
    },
    // type conversion from js to c
    'arrayToC' : function(arr) {
      var ret = Runtime.stackAlloc(arr.length);
      writeArrayToMemory(arr, ret);
      return ret;
    },
    'stringToC' : function(str) {
      var ret = 0;
      if (str !== null && str !== undefined && str !== 0) { // null string
        // at most 4 bytes per UTF-8 code point, +1 for the trailing '\0'
        var len = (str.length << 2) + 1;
        ret = Runtime.stackAlloc(len);
        stringToUTF8(str, ret, len);
      }
      return ret;
    }
  };
  // For fast lookup of conversion functions
  var toC = {'string' : JSfuncs['stringToC'], 'array' : JSfuncs['arrayToC']};

  // C calling interface.
  ccall = function ccallFunc(ident, returnType, argTypes, args, opts) {
    var func = getCFunc(ident);
    var cArgs = [];
    var stack = 0;
    assert(returnType !== 'array', 'Return type should not be "array".');
    if (args) {
      for (var i = 0; i < args.length; i++) {
        var converter = toC[argTypes[i]];
        if (converter) {
          if (stack === 0) stack = Runtime.stackSave();
          cArgs[i] = converter(args[i]);
        } else {
          cArgs[i] = args[i];
        }
      }
    }
    var ret = func.apply(null, cArgs);
    if ((!opts || !opts.async) && typeof EmterpreterAsync === 'object') {
      assert(!EmterpreterAsync.state, 'cannot start async op with normal JS calling ccall');
    }
    if (opts && opts.async) assert(!returnType, 'async ccalls cannot return values');
    if (returnType === 'string') ret = Pointer_stringify(ret);
    if (stack !== 0) {
      if (opts && opts.async) {
        EmterpreterAsync.asyncFinalizers.push(function() {
          Runtime.stackRestore(stack);
        });
        return;
      }
      Runtime.stackRestore(stack);
    }
    return ret;
  }

  var sourceRegex = /^function\s*[a-zA-Z$_0-9]*\s*\(([^)]*)\)\s*{\s*([^*]*?)[\s;]*(?:return\s*(.*?)[;\s]*)?}$/;
  function parseJSFunc(jsfunc) {
    // Match the body and the return value of a javascript function source
    var parsed = jsfunc.toString().match(sourceRegex).slice(1);
    return {arguments : parsed[0], body : parsed[1], returnValue: parsed[2]}
  }

  // sources of useful functions. we create this lazily as it can trigger a source decompression on this entire file
  var JSsource = null;
  function ensureJSsource() {
    if (!JSsource) {
      JSsource = {};
      for (var fun in JSfuncs) {
        if (JSfuncs.hasOwnProperty(fun)) {
          // Elements of toCsource are arrays of three items:
          // the code, and the return value
          JSsource[fun] = parseJSFunc(JSfuncs[fun]);
        }
      }
    }
  }

  cwrap = function cwrap(ident, returnType, argTypes) {
    argTypes = argTypes || [];
    var cfunc = getCFunc(ident);
    // When the function takes numbers and returns a number, we can just return
    // the original function
    var numericArgs = argTypes.every(function(type){ return type === 'number'});
    var numericRet = (returnType !== 'string');
    if ( numericRet && numericArgs) {
      return cfunc;
    }
    // Creation of the arguments list (["$1","$2",...,"$nargs"])
    var argNames = argTypes.map(function(x,i){return '$'+i});
    var funcstr = "(function(" + argNames.join(',') + ") {";
    var nargs = argTypes.length;
    if (!numericArgs) {
      // Generate the code needed to convert the arguments from javascript
      // values to pointers
      ensureJSsource();
      funcstr += 'var stack = ' + JSsource['stackSave'].body + ';';
      for (var i = 0; i < nargs; i++) {
        var arg = argNames[i], type = argTypes[i];
        if (type === 'number') continue;
        var convertCode = JSsource[type + 'ToC']; // [code, return]
        funcstr += 'var ' + convertCode.arguments + ' = ' + arg + ';';
        funcstr += convertCode.body + ';';
        funcstr += arg + '=(' + convertCode.returnValue + ');';
      }
    }

    // When the code is compressed, the name of cfunc is not literally 'cfunc' anymore
    var cfuncname = parseJSFunc(function(){return cfunc}).returnValue;
    // Call the function
    funcstr += 'var ret = ' + cfuncname + '(' + argNames.join(',') + ');';
    if (!numericRet) { // Return type can only by 'string' or 'number'
      // Convert the result to a string
      var strgfy = parseJSFunc(function(){return Pointer_stringify}).returnValue;
      funcstr += 'ret = ' + strgfy + '(ret);';
    }
    funcstr += "if (typeof EmterpreterAsync === 'object') { assert(!EmterpreterAsync.state, 'cannot start async op with normal JS calling cwrap') }";
    if (!numericArgs) {
      // If we had a stack, restore it
      ensureJSsource();
      funcstr += JSsource['stackRestore'].body.replace('()', '(stack)') + ';';
    }
    funcstr += 'return ret})';
    return eval(funcstr);
  };
})();
Module["ccall"] = ccall;
Module["cwrap"] = cwrap;

/** @type {function(number, number, string, boolean=)} */
function setValue(ptr, value, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': HEAP8[((ptr)>>0)]=value; break;
      case 'i8': HEAP8[((ptr)>>0)]=value; break;
      case 'i16': HEAP16[((ptr)>>1)]=value; break;
      case 'i32': HEAP32[((ptr)>>2)]=value; break;
      case 'i64': (tempI64 = [value>>>0,(tempDouble=value,(+(Math_abs(tempDouble))) >= 1.0 ? (tempDouble > 0.0 ? ((Math_min((+(Math_floor((tempDouble)/4294967296.0))), 4294967295.0))|0)>>>0 : (~~((+(Math_ceil((tempDouble - +(((~~(tempDouble)))>>>0))/4294967296.0)))))>>>0) : 0)],HEAP32[((ptr)>>2)]=tempI64[0],HEAP32[(((ptr)+(4))>>2)]=tempI64[1]); break;
      case 'float': HEAPF32[((ptr)>>2)]=value; break;
      case 'double': HEAPF64[((ptr)>>3)]=value; break;
      default: abort('invalid type for setValue: ' + type);
    }
}
Module["setValue"] = setValue;

/** @type {function(number, string, boolean=)} */
function getValue(ptr, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': return HEAP8[((ptr)>>0)];
      case 'i8': return HEAP8[((ptr)>>0)];
      case 'i16': return HEAP16[((ptr)>>1)];
      case 'i32': return HEAP32[((ptr)>>2)];
      case 'i64': return HEAP32[((ptr)>>2)];
      case 'float': return HEAPF32[((ptr)>>2)];
      case 'double': return HEAPF64[((ptr)>>3)];
      default: abort('invalid type for setValue: ' + type);
    }
  return null;
}
Module["getValue"] = getValue;

var ALLOC_NORMAL = 0; // Tries to use _malloc()
var ALLOC_STACK = 1; // Lives for the duration of the current function call
var ALLOC_STATIC = 2; // Cannot be freed
var ALLOC_DYNAMIC = 3; // Cannot be freed except through sbrk
var ALLOC_NONE = 4; // Do not allocate
Module["ALLOC_NORMAL"] = ALLOC_NORMAL;
Module["ALLOC_STACK"] = ALLOC_STACK;
Module["ALLOC_STATIC"] = ALLOC_STATIC;
Module["ALLOC_DYNAMIC"] = ALLOC_DYNAMIC;
Module["ALLOC_NONE"] = ALLOC_NONE;

// allocate(): This is for internal use. You can use it yourself as well, but the interface
//             is a little tricky (see docs right below). The reason is that it is optimized
//             for multiple syntaxes to save space in generated code. So you should
//             normally not use allocate(), and instead allocate memory using _malloc(),
//             initialize it with setValue(), and so forth.
// @slab: An array of data, or a number. If a number, then the size of the block to allocate,
//        in *bytes* (note that this is sometimes confusing: the next parameter does not
//        affect this!)
// @types: Either an array of types, one for each byte (or 0 if no type at that position),
//         or a single type which is used for the entire block. This only matters if there
//         is initial data - if @slab is a number, then this does not matter at all and is
//         ignored.
// @allocator: How to allocate memory, see ALLOC_*
/** @type {function((TypedArray|Array<number>|number), string, number, number=)} */
function allocate(slab, types, allocator, ptr) {
  var zeroinit, size;
  if (typeof slab === 'number') {
    zeroinit = true;
    size = slab;
  } else {
    zeroinit = false;
    size = slab.length;
  }

  var singleType = typeof types === 'string' ? types : null;

  var ret;
  if (allocator == ALLOC_NONE) {
    ret = ptr;
  } else {
    ret = [typeof _malloc === 'function' ? _malloc : Runtime.staticAlloc, Runtime.stackAlloc, Runtime.staticAlloc, Runtime.dynamicAlloc][allocator === undefined ? ALLOC_STATIC : allocator](Math.max(size, singleType ? 1 : types.length));
  }

  if (zeroinit) {
    var ptr = ret, stop;
    assert((ret & 3) == 0);
    stop = ret + (size & ~3);
    for (; ptr < stop; ptr += 4) {
      HEAP32[((ptr)>>2)]=0;
    }
    stop = ret + size;
    while (ptr < stop) {
      HEAP8[((ptr++)>>0)]=0;
    }
    return ret;
  }

  if (singleType === 'i8') {
    if (slab.subarray || slab.slice) {
      HEAPU8.set(/** @type {!Uint8Array} */ (slab), ret);
    } else {
      HEAPU8.set(new Uint8Array(slab), ret);
    }
    return ret;
  }

  var i = 0, type, typeSize, previousType;
  while (i < size) {
    var curr = slab[i];

    if (typeof curr === 'function') {
      curr = Runtime.getFunctionIndex(curr);
    }

    type = singleType || types[i];
    if (type === 0) {
      i++;
      continue;
    }
    assert(type, 'Must know what type to store in allocate!');

    if (type == 'i64') type = 'i32'; // special case: we have one i32 here, and one i32 later

    setValue(ret+i, curr, type);

    // no need to look up size unless type changes, so cache it
    if (previousType !== type) {
      typeSize = Runtime.getNativeTypeSize(type);
      previousType = type;
    }
    i += typeSize;
  }

  return ret;
}
Module["allocate"] = allocate;

// Allocate memory during any stage of startup - static memory early on, dynamic memory later, malloc when ready
function getMemory(size) {
  if (!staticSealed) return Runtime.staticAlloc(size);
  if (!runtimeInitialized) return Runtime.dynamicAlloc(size);
  return _malloc(size);
}
Module["getMemory"] = getMemory;

/** @type {function(number, number=)} */
function Pointer_stringify(ptr, length) {
  if (length === 0 || !ptr) return '';
  // TODO: use TextDecoder
  // Find the length, and check for UTF while doing so
  var hasUtf = 0;
  var t;
  var i = 0;
  while (1) {
    assert(ptr + i < TOTAL_MEMORY);
    t = HEAPU8[(((ptr)+(i))>>0)];
    hasUtf |= t;
    if (t == 0 && !length) break;
    i++;
    if (length && i == length) break;
  }
  if (!length) length = i;

  var ret = '';

  if (hasUtf < 128) {
    var MAX_CHUNK = 1024; // split up into chunks, because .apply on a huge string can overflow the stack
    var curr;
    while (length > 0) {
      curr = String.fromCharCode.apply(String, HEAPU8.subarray(ptr, ptr + Math.min(length, MAX_CHUNK)));
      ret = ret ? ret + curr : curr;
      ptr += MAX_CHUNK;
      length -= MAX_CHUNK;
    }
    return ret;
  }
  return Module['UTF8ToString'](ptr);
}
Module["Pointer_stringify"] = Pointer_stringify;

// Given a pointer 'ptr' to a null-terminated ASCII-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

function AsciiToString(ptr) {
  var str = '';
  while (1) {
    var ch = HEAP8[((ptr++)>>0)];
    if (!ch) return str;
    str += String.fromCharCode(ch);
  }
}
Module["AsciiToString"] = AsciiToString;

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in ASCII form. The copy will require at most str.length+1 bytes of space in the HEAP.

function stringToAscii(str, outPtr) {
  return writeAsciiToMemory(str, outPtr, false);
}
Module["stringToAscii"] = stringToAscii;

// Given a pointer 'ptr' to a null-terminated UTF8-encoded string in the given array that contains uint8 values, returns
// a copy of that string as a Javascript String object.

var UTF8Decoder = typeof TextDecoder !== 'undefined' ? new TextDecoder('utf8') : undefined;
function UTF8ArrayToString(u8Array, idx) {
  var endPtr = idx;
  // TextDecoder needs to know the byte length in advance, it doesn't stop on null terminator by itself.
  // Also, use the length info to avoid running tiny strings through TextDecoder, since .subarray() allocates garbage.
  while (u8Array[endPtr]) ++endPtr;

  if (endPtr - idx > 16 && u8Array.subarray && UTF8Decoder) {
    return UTF8Decoder.decode(u8Array.subarray(idx, endPtr));
  } else {
    var u0, u1, u2, u3, u4, u5;

    var str = '';
    while (1) {
      // For UTF8 byte structure, see http://en.wikipedia.org/wiki/UTF-8#Description and https://www.ietf.org/rfc/rfc2279.txt and https://tools.ietf.org/html/rfc3629
      u0 = u8Array[idx++];
      if (!u0) return str;
      if (!(u0 & 0x80)) { str += String.fromCharCode(u0); continue; }
      u1 = u8Array[idx++] & 63;
      if ((u0 & 0xE0) == 0xC0) { str += String.fromCharCode(((u0 & 31) << 6) | u1); continue; }
      u2 = u8Array[idx++] & 63;
      if ((u0 & 0xF0) == 0xE0) {
        u0 = ((u0 & 15) << 12) | (u1 << 6) | u2;
      } else {
        u3 = u8Array[idx++] & 63;
        if ((u0 & 0xF8) == 0xF0) {
          u0 = ((u0 & 7) << 18) | (u1 << 12) | (u2 << 6) | u3;
        } else {
          u4 = u8Array[idx++] & 63;
          if ((u0 & 0xFC) == 0xF8) {
            u0 = ((u0 & 3) << 24) | (u1 << 18) | (u2 << 12) | (u3 << 6) | u4;
          } else {
            u5 = u8Array[idx++] & 63;
            u0 = ((u0 & 1) << 30) | (u1 << 24) | (u2 << 18) | (u3 << 12) | (u4 << 6) | u5;
          }
        }
      }
      if (u0 < 0x10000) {
        str += String.fromCharCode(u0);
      } else {
        var ch = u0 - 0x10000;
        str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));
      }
    }
  }
}
Module["UTF8ArrayToString"] = UTF8ArrayToString;

// Given a pointer 'ptr' to a null-terminated UTF8-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

function UTF8ToString(ptr) {
  return UTF8ArrayToString(HEAPU8,ptr);
}
Module["UTF8ToString"] = UTF8ToString;

// Copies the given Javascript String object 'str' to the given byte array at address 'outIdx',
// encoded in UTF8 form and null-terminated. The copy will require at most str.length*4+1 bytes of space in the HEAP.
// Use the function lengthBytesUTF8 to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outU8Array: the array to copy to. Each index in this array is assumed to be one 8-byte element.
//   outIdx: The starting offset in the array to begin the copying.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null
//                    terminator, i.e. if maxBytesToWrite=1, only the null terminator will be written and nothing else.
//                    maxBytesToWrite=0 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF8Array(str, outU8Array, outIdx, maxBytesToWrite) {
  if (!(maxBytesToWrite > 0)) // Parameter maxBytesToWrite is not optional. Negative values, 0, null, undefined and false each don't write out any bytes.
    return 0;

  var startIdx = outIdx;
  var endIdx = outIdx + maxBytesToWrite - 1; // -1 for string null terminator.
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! So decode UTF16->UTF32->UTF8.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    // For UTF8 byte structure, see http://en.wikipedia.org/wiki/UTF-8#Description and https://www.ietf.org/rfc/rfc2279.txt and https://tools.ietf.org/html/rfc3629
    var u = str.charCodeAt(i); // possibly a lead surrogate
    if (u >= 0xD800 && u <= 0xDFFF) u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);
    if (u <= 0x7F) {
      if (outIdx >= endIdx) break;
      outU8Array[outIdx++] = u;
    } else if (u <= 0x7FF) {
      if (outIdx + 1 >= endIdx) break;
      outU8Array[outIdx++] = 0xC0 | (u >> 6);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else if (u <= 0xFFFF) {
      if (outIdx + 2 >= endIdx) break;
      outU8Array[outIdx++] = 0xE0 | (u >> 12);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else if (u <= 0x1FFFFF) {
      if (outIdx + 3 >= endIdx) break;
      outU8Array[outIdx++] = 0xF0 | (u >> 18);
      outU8Array[outIdx++] = 0x80 | ((u >> 12) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else if (u <= 0x3FFFFFF) {
      if (outIdx + 4 >= endIdx) break;
      outU8Array[outIdx++] = 0xF8 | (u >> 24);
      outU8Array[outIdx++] = 0x80 | ((u >> 18) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 12) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else {
      if (outIdx + 5 >= endIdx) break;
      outU8Array[outIdx++] = 0xFC | (u >> 30);
      outU8Array[outIdx++] = 0x80 | ((u >> 24) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 18) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 12) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    }
  }
  // Null-terminate the pointer to the buffer.
  outU8Array[outIdx] = 0;
  return outIdx - startIdx;
}
Module["stringToUTF8Array"] = stringToUTF8Array;

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF8 form. The copy will require at most str.length*4+1 bytes of space in the HEAP.
// Use the function lengthBytesUTF8 to compute the exact number of bytes (excluding null terminator) that this function will write.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF8(str, outPtr, maxBytesToWrite) {
  assert(typeof maxBytesToWrite == 'number', 'stringToUTF8(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');
  return stringToUTF8Array(str, HEAPU8,outPtr, maxBytesToWrite);
}
Module["stringToUTF8"] = stringToUTF8;

// Returns the number of bytes the given Javascript string takes if encoded as a UTF8 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF8(str) {
  var len = 0;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! So decode UTF16->UTF32->UTF8.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var u = str.charCodeAt(i); // possibly a lead surrogate
    if (u >= 0xD800 && u <= 0xDFFF) u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);
    if (u <= 0x7F) {
      ++len;
    } else if (u <= 0x7FF) {
      len += 2;
    } else if (u <= 0xFFFF) {
      len += 3;
    } else if (u <= 0x1FFFFF) {
      len += 4;
    } else if (u <= 0x3FFFFFF) {
      len += 5;
    } else {
      len += 6;
    }
  }
  return len;
}
Module["lengthBytesUTF8"] = lengthBytesUTF8;

// Given a pointer 'ptr' to a null-terminated UTF16LE-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

var UTF16Decoder = typeof TextDecoder !== 'undefined' ? new TextDecoder('utf-16le') : undefined;
function UTF16ToString(ptr) {
  assert(ptr % 2 == 0, 'Pointer passed to UTF16ToString must be aligned to two bytes!');
  var endPtr = ptr;
  // TextDecoder needs to know the byte length in advance, it doesn't stop on null terminator by itself.
  // Also, use the length info to avoid running tiny strings through TextDecoder, since .subarray() allocates garbage.
  var idx = endPtr >> 1;
  while (HEAP16[idx]) ++idx;
  endPtr = idx << 1;

  if (endPtr - ptr > 32 && UTF16Decoder) {
    return UTF16Decoder.decode(HEAPU8.subarray(ptr, endPtr));
  } else {
    var i = 0;

    var str = '';
    while (1) {
      var codeUnit = HEAP16[(((ptr)+(i*2))>>1)];
      if (codeUnit == 0) return str;
      ++i;
      // fromCharCode constructs a character from a UTF-16 code unit, so we can pass the UTF16 string right through.
      str += String.fromCharCode(codeUnit);
    }
  }
}


// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF16 form. The copy will require at most str.length*4+2 bytes of space in the HEAP.
// Use the function lengthBytesUTF16() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outPtr: Byte address in Emscripten HEAP where to write the string to.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null
//                    terminator, i.e. if maxBytesToWrite=2, only the null terminator will be written and nothing else.
//                    maxBytesToWrite<2 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF16(str, outPtr, maxBytesToWrite) {
  assert(outPtr % 2 == 0, 'Pointer passed to stringToUTF16 must be aligned to two bytes!');
  assert(typeof maxBytesToWrite == 'number', 'stringToUTF16(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');
  // Backwards compatibility: if max bytes is not specified, assume unsafe unbounded write is allowed.
  if (maxBytesToWrite === undefined) {
    maxBytesToWrite = 0x7FFFFFFF;
  }
  if (maxBytesToWrite < 2) return 0;
  maxBytesToWrite -= 2; // Null terminator.
  var startPtr = outPtr;
  var numCharsToWrite = (maxBytesToWrite < str.length*2) ? (maxBytesToWrite / 2) : str.length;
  for (var i = 0; i < numCharsToWrite; ++i) {
    // charCodeAt returns a UTF-16 encoded code unit, so it can be directly written to the HEAP.
    var codeUnit = str.charCodeAt(i); // possibly a lead surrogate
    HEAP16[((outPtr)>>1)]=codeUnit;
    outPtr += 2;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP16[((outPtr)>>1)]=0;
  return outPtr - startPtr;
}


// Returns the number of bytes the given Javascript string takes if encoded as a UTF16 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF16(str) {
  return str.length*2;
}


function UTF32ToString(ptr) {
  assert(ptr % 4 == 0, 'Pointer passed to UTF32ToString must be aligned to four bytes!');
  var i = 0;

  var str = '';
  while (1) {
    var utf32 = HEAP32[(((ptr)+(i*4))>>2)];
    if (utf32 == 0)
      return str;
    ++i;
    // Gotcha: fromCharCode constructs a character from a UTF-16 encoded code (pair), not from a Unicode code point! So encode the code point to UTF-16 for constructing.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    if (utf32 >= 0x10000) {
      var ch = utf32 - 0x10000;
      str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));
    } else {
      str += String.fromCharCode(utf32);
    }
  }
}


// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF32 form. The copy will require at most str.length*4+4 bytes of space in the HEAP.
// Use the function lengthBytesUTF32() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outPtr: Byte address in Emscripten HEAP where to write the string to.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null
//                    terminator, i.e. if maxBytesToWrite=4, only the null terminator will be written and nothing else.
//                    maxBytesToWrite<4 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF32(str, outPtr, maxBytesToWrite) {
  assert(outPtr % 4 == 0, 'Pointer passed to stringToUTF32 must be aligned to four bytes!');
  assert(typeof maxBytesToWrite == 'number', 'stringToUTF32(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');
  // Backwards compatibility: if max bytes is not specified, assume unsafe unbounded write is allowed.
  if (maxBytesToWrite === undefined) {
    maxBytesToWrite = 0x7FFFFFFF;
  }
  if (maxBytesToWrite < 4) return 0;
  var startPtr = outPtr;
  var endPtr = startPtr + maxBytesToWrite - 4;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var codeUnit = str.charCodeAt(i); // possibly a lead surrogate
    if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) {
      var trailSurrogate = str.charCodeAt(++i);
      codeUnit = 0x10000 + ((codeUnit & 0x3FF) << 10) | (trailSurrogate & 0x3FF);
    }
    HEAP32[((outPtr)>>2)]=codeUnit;
    outPtr += 4;
    if (outPtr + 4 > endPtr) break;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP32[((outPtr)>>2)]=0;
  return outPtr - startPtr;
}


// Returns the number of bytes the given Javascript string takes if encoded as a UTF16 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF32(str) {
  var len = 0;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var codeUnit = str.charCodeAt(i);
    if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) ++i; // possibly a lead surrogate, so skip over the tail surrogate.
    len += 4;
  }

  return len;
}


function demangle(func) {
  var __cxa_demangle_func = Module['___cxa_demangle'] || Module['__cxa_demangle'];
  if (__cxa_demangle_func) {
    try {
      var s =
        func.substr(1);
      var len = lengthBytesUTF8(s)+1;
      var buf = _malloc(len);
      stringToUTF8(s, buf, len);
      var status = _malloc(4);
      var ret = __cxa_demangle_func(buf, 0, 0, status);
      if (getValue(status, 'i32') === 0 && ret) {
        return Pointer_stringify(ret);
      }
      // otherwise, libcxxabi failed
    } catch(e) {
      // ignore problems here
    } finally {
      if (buf) _free(buf);
      if (status) _free(status);
      if (ret) _free(ret);
    }
    // failure when using libcxxabi, don't demangle
    return func;
  }
  Runtime.warnOnce('warning: build with  -s DEMANGLE_SUPPORT=1  to link in libcxxabi demangling');
  return func;
}

function demangleAll(text) {
  var regex =
    /__Z[\w\d_]+/g;
  return text.replace(regex,
    function(x) {
      var y = demangle(x);
      return x === y ? x : (x + ' [' + y + ']');
    });
}

function jsStackTrace() {
  var err = new Error();
  if (!err.stack) {
    // IE10+ special cases: It does have callstack info, but it is only populated if an Error object is thrown,
    // so try that as a special-case.
    try {
      throw new Error(0);
    } catch(e) {
      err = e;
    }
    if (!err.stack) {
      return '(no stack trace available)';
    }
  }
  return err.stack.toString();
}

function stackTrace() {
  var js = jsStackTrace();
  if (Module['extraStackTrace']) js += '\n' + Module['extraStackTrace']();
  return demangleAll(js);
}
Module["stackTrace"] = stackTrace;

// Memory management

var PAGE_SIZE = 16384;
var WASM_PAGE_SIZE = 65536;
var ASMJS_PAGE_SIZE = 16777216;
var MIN_TOTAL_MEMORY = 16777216;

function alignUp(x, multiple) {
  if (x % multiple > 0) {
    x += multiple - (x % multiple);
  }
  return x;
}

var HEAP,
/** @type {ArrayBuffer} */
  buffer,
/** @type {Int8Array} */
  HEAP8,
/** @type {Uint8Array} */
  HEAPU8,
/** @type {Int16Array} */
  HEAP16,
/** @type {Uint16Array} */
  HEAPU16,
/** @type {Int32Array} */
  HEAP32,
/** @type {Uint32Array} */
  HEAPU32,
/** @type {Float32Array} */
  HEAPF32,
/** @type {Float64Array} */
  HEAPF64;

function updateGlobalBuffer(buf) {
  Module['buffer'] = buffer = buf;
}

function updateGlobalBufferViews() {
  Module['HEAP8'] = HEAP8 = new Int8Array(buffer);
  Module['HEAP16'] = HEAP16 = new Int16Array(buffer);
  Module['HEAP32'] = HEAP32 = new Int32Array(buffer);
  Module['HEAPU8'] = HEAPU8 = new Uint8Array(buffer);
  Module['HEAPU16'] = HEAPU16 = new Uint16Array(buffer);
  Module['HEAPU32'] = HEAPU32 = new Uint32Array(buffer);
  Module['HEAPF32'] = HEAPF32 = new Float32Array(buffer);
  Module['HEAPF64'] = HEAPF64 = new Float64Array(buffer);
}

var STATIC_BASE, STATICTOP, staticSealed; // static area
var STACK_BASE, STACKTOP, STACK_MAX; // stack area
var DYNAMIC_BASE, DYNAMICTOP_PTR; // dynamic area handled by sbrk

  STATIC_BASE = STATICTOP = STACK_BASE = STACKTOP = STACK_MAX = DYNAMIC_BASE = DYNAMICTOP_PTR = 0;
  staticSealed = false;


// Initializes the stack cookie. Called at the startup of main and at the startup of each thread in pthreads mode.
function writeStackCookie() {
  assert((STACK_MAX & 3) == 0);
  HEAPU32[(STACK_MAX >> 2)-1] = 0x02135467;
  HEAPU32[(STACK_MAX >> 2)-2] = 0x89BACDFE;
}

function checkStackCookie() {
  if (HEAPU32[(STACK_MAX >> 2)-1] != 0x02135467 || HEAPU32[(STACK_MAX >> 2)-2] != 0x89BACDFE) {
    abort('Stack overflow! Stack cookie has been overwritten, expected hex dwords 0x89BACDFE and 0x02135467, but received 0x' + HEAPU32[(STACK_MAX >> 2)-2].toString(16) + ' ' + HEAPU32[(STACK_MAX >> 2)-1].toString(16));
  }
  // Also test the global address 0 for integrity. This check is not compatible with SAFE_SPLIT_MEMORY though, since that mode already tests all address 0 accesses on its own.
  if (HEAP32[0] !== 0x63736d65 /* 'emsc' */) throw 'Runtime error: The application has corrupted its heap memory area (address zero)!';
}

function abortStackOverflow(allocSize) {
  abort('Stack overflow! Attempted to allocate ' + allocSize + ' bytes on the stack, but stack has only ' + (STACK_MAX - Module['asm'].stackSave() + allocSize) + ' bytes available!');
}

function abortOnCannotGrowMemory() {
  abort('Cannot enlarge memory arrays. Either (1) compile with  -s TOTAL_MEMORY=X  with X higher than the current value ' + TOTAL_MEMORY + ', (2) compile with  -s ALLOW_MEMORY_GROWTH=1  which allows increasing the size at runtime but prevents some optimizations, (3) set Module.TOTAL_MEMORY to a higher value before the program runs, or (4) if you want malloc to return NULL (0) instead of this abort, compile with  -s ABORTING_MALLOC=0 ');
}


function enlargeMemory() {
  abortOnCannotGrowMemory();
}


var TOTAL_STACK = Module['TOTAL_STACK'] || 5242880;
var TOTAL_MEMORY = Module['TOTAL_MEMORY'] || 16777216;
if (TOTAL_MEMORY < TOTAL_STACK) Module.printErr('TOTAL_MEMORY should be larger than TOTAL_STACK, was ' + TOTAL_MEMORY + '! (TOTAL_STACK=' + TOTAL_STACK + ')');

// Initialize the runtime's memory
// check for full engine support (use string 'subarray' to avoid closure compiler confusion)
assert(typeof Int32Array !== 'undefined' && typeof Float64Array !== 'undefined' && Int32Array.prototype.subarray !== undefined && Int32Array.prototype.set !== undefined,
       'JS engine does not provide full typed array support');



// Use a provided buffer, if there is one, or else allocate a new one
if (Module['buffer']) {
  buffer = Module['buffer'];
  assert(buffer.byteLength === TOTAL_MEMORY, 'provided buffer should be ' + TOTAL_MEMORY + ' bytes, but it is ' + buffer.byteLength);
} else {
  // Use a WebAssembly memory where available
  {
    buffer = new ArrayBuffer(TOTAL_MEMORY);
  }
  assert(buffer.byteLength === TOTAL_MEMORY);
}
updateGlobalBufferViews();


function getTotalMemory() {
  return TOTAL_MEMORY;
}

// Endianness check (note: assumes compiler arch was little-endian)
  HEAP32[0] = 0x63736d65; /* 'emsc' */
HEAP16[1] = 0x6373;
if (HEAPU8[2] !== 0x73 || HEAPU8[3] !== 0x63) throw 'Runtime error: expected the system to be little-endian!';

Module['HEAP'] = HEAP;
Module['buffer'] = buffer;
Module['HEAP8'] = HEAP8;
Module['HEAP16'] = HEAP16;
Module['HEAP32'] = HEAP32;
Module['HEAPU8'] = HEAPU8;
Module['HEAPU16'] = HEAPU16;
Module['HEAPU32'] = HEAPU32;
Module['HEAPF32'] = HEAPF32;
Module['HEAPF64'] = HEAPF64;

function callRuntimeCallbacks(callbacks) {
  while(callbacks.length > 0) {
    var callback = callbacks.shift();
    if (typeof callback == 'function') {
      callback();
      continue;
    }
    var func = callback.func;
    if (typeof func === 'number') {
      if (callback.arg === undefined) {
        Module['dynCall_v'](func);
      } else {
        Module['dynCall_vi'](func, callback.arg);
      }
    } else {
      func(callback.arg === undefined ? null : callback.arg);
    }
  }
}

var __ATPRERUN__  = []; // functions called before the runtime is initialized
var __ATINIT__    = []; // functions called during startup
var __ATMAIN__    = []; // functions called when main() is to be run
var __ATEXIT__    = []; // functions called during shutdown
var __ATPOSTRUN__ = []; // functions called after the runtime has exited

var runtimeInitialized = false;
var runtimeExited = false;


function preRun() {
  // compatibility - merge in anything from Module['preRun'] at this time
  if (Module['preRun']) {
    if (typeof Module['preRun'] == 'function') Module['preRun'] = [Module['preRun']];
    while (Module['preRun'].length) {
      addOnPreRun(Module['preRun'].shift());
    }
  }
  callRuntimeCallbacks(__ATPRERUN__);
}

function ensureInitRuntime() {
  checkStackCookie();
  if (runtimeInitialized) return;
  runtimeInitialized = true;
  callRuntimeCallbacks(__ATINIT__);
}

function preMain() {
  checkStackCookie();
  callRuntimeCallbacks(__ATMAIN__);
}

function exitRuntime() {
  checkStackCookie();
  callRuntimeCallbacks(__ATEXIT__);
  runtimeExited = true;
}

function postRun() {
  checkStackCookie();
  // compatibility - merge in anything from Module['postRun'] at this time
  if (Module['postRun']) {
    if (typeof Module['postRun'] == 'function') Module['postRun'] = [Module['postRun']];
    while (Module['postRun'].length) {
      addOnPostRun(Module['postRun'].shift());
    }
  }
  callRuntimeCallbacks(__ATPOSTRUN__);
}

function addOnPreRun(cb) {
  __ATPRERUN__.unshift(cb);
}
Module["addOnPreRun"] = addOnPreRun;

function addOnInit(cb) {
  __ATINIT__.unshift(cb);
}
Module["addOnInit"] = addOnInit;

function addOnPreMain(cb) {
  __ATMAIN__.unshift(cb);
}
Module["addOnPreMain"] = addOnPreMain;

function addOnExit(cb) {
  __ATEXIT__.unshift(cb);
}
Module["addOnExit"] = addOnExit;

function addOnPostRun(cb) {
  __ATPOSTRUN__.unshift(cb);
}
Module["addOnPostRun"] = addOnPostRun;

// Tools

/** @type {function(string, boolean=, number=)} */
function intArrayFromString(stringy, dontAddNull, length) {
  var len = length > 0 ? length : lengthBytesUTF8(stringy)+1;
  var u8array = new Array(len);
  var numBytesWritten = stringToUTF8Array(stringy, u8array, 0, u8array.length);
  if (dontAddNull) u8array.length = numBytesWritten;
  return u8array;
}
Module["intArrayFromString"] = intArrayFromString;

function intArrayToString(array) {
  var ret = [];
  for (var i = 0; i < array.length; i++) {
    var chr = array[i];
    if (chr > 0xFF) {
      assert(false, 'Character code ' + chr + ' (' + String.fromCharCode(chr) + ')  at offset ' + i + ' not in 0x00-0xFF.');
      chr &= 0xFF;
    }
    ret.push(String.fromCharCode(chr));
  }
  return ret.join('');
}
Module["intArrayToString"] = intArrayToString;

// Deprecated: This function should not be called because it is unsafe and does not provide
// a maximum length limit of how many bytes it is allowed to write. Prefer calling the
// function stringToUTF8Array() instead, which takes in a maximum length that can be used
// to be secure from out of bounds writes.
/** @deprecated */
function writeStringToMemory(string, buffer, dontAddNull) {
  Runtime.warnOnce('writeStringToMemory is deprecated and should not be called! Use stringToUTF8() instead!');

  var /** @type {number} */ lastChar, /** @type {number} */ end;
  if (dontAddNull) {
    // stringToUTF8Array always appends null. If we don't want to do that, remember the
    // character that existed at the location where the null will be placed, and restore
    // that after the write (below).
    end = buffer + lengthBytesUTF8(string);
    lastChar = HEAP8[end];
  }
  stringToUTF8(string, buffer, Infinity);
  if (dontAddNull) HEAP8[end] = lastChar; // Restore the value under the null character.
}
Module["writeStringToMemory"] = writeStringToMemory;

function writeArrayToMemory(array, buffer) {
  assert(array.length >= 0, 'writeArrayToMemory array must have a length (should be an array or typed array)')
  HEAP8.set(array, buffer);
}
Module["writeArrayToMemory"] = writeArrayToMemory;

function writeAsciiToMemory(str, buffer, dontAddNull) {
  for (var i = 0; i < str.length; ++i) {
    assert(str.charCodeAt(i) === str.charCodeAt(i)&0xff);
    HEAP8[((buffer++)>>0)]=str.charCodeAt(i);
  }
  // Null-terminate the pointer to the HEAP.
  if (!dontAddNull) HEAP8[((buffer)>>0)]=0;
}
Module["writeAsciiToMemory"] = writeAsciiToMemory;

function unSign(value, bits, ignore) {
  if (value >= 0) {
    return value;
  }
  return bits <= 32 ? 2*Math.abs(1 << (bits-1)) + value // Need some trickery, since if bits == 32, we are right at the limit of the bits JS uses in bitshifts
                    : Math.pow(2, bits)         + value;
}
function reSign(value, bits, ignore) {
  if (value <= 0) {
    return value;
  }
  var half = bits <= 32 ? Math.abs(1 << (bits-1)) // abs is needed if bits == 32
                        : Math.pow(2, bits-1);
  if (value >= half && (bits <= 32 || value > half)) { // for huge values, we can hit the precision limit and always get true here. so don't do that
                                                       // but, in general there is no perfect solution here. With 64-bit ints, we get rounding and errors
                                                       // TODO: In i64 mode 1, resign the two parts separately and safely
    value = -2*half + value; // Cannot bitshift half, as it may be at the limit of the bits JS uses in bitshifts
  }
  return value;
}


// check for imul support, and also for correctness ( https://bugs.webkit.org/show_bug.cgi?id=126345 )
if (!Math['imul'] || Math['imul'](0xffffffff, 5) !== -5) Math['imul'] = function imul(a, b) {
  var ah  = a >>> 16;
  var al = a & 0xffff;
  var bh  = b >>> 16;
  var bl = b & 0xffff;
  return (al*bl + ((ah*bl + al*bh) << 16))|0;
};
Math.imul = Math['imul'];


if (!Math['clz32']) Math['clz32'] = function(x) {
  x = x >>> 0;
  for (var i = 0; i < 32; i++) {
    if (x & (1 << (31 - i))) return i;
  }
  return 32;
};
Math.clz32 = Math['clz32']

if (!Math['trunc']) Math['trunc'] = function(x) {
  return x < 0 ? Math.ceil(x) : Math.floor(x);
};
Math.trunc = Math['trunc'];

var Math_abs = Math.abs;
var Math_cos = Math.cos;
var Math_sin = Math.sin;
var Math_tan = Math.tan;
var Math_acos = Math.acos;
var Math_asin = Math.asin;
var Math_atan = Math.atan;
var Math_atan2 = Math.atan2;
var Math_exp = Math.exp;
var Math_log = Math.log;
var Math_sqrt = Math.sqrt;
var Math_ceil = Math.ceil;
var Math_floor = Math.floor;
var Math_pow = Math.pow;
var Math_imul = Math.imul;
var Math_fround = Math.fround;
var Math_round = Math.round;
var Math_min = Math.min;
var Math_clz32 = Math.clz32;
var Math_trunc = Math.trunc;

// A counter of dependencies for calling run(). If we need to
// do asynchronous work before running, increment this and
// decrement it. Incrementing must happen in a place like
// PRE_RUN_ADDITIONS (used by emcc to add file preloading).
// Note that you can add dependencies in preRun, even though
// it happens right before run - run will be postponed until
// the dependencies are met.
var runDependencies = 0;
var runDependencyWatcher = null;
var dependenciesFulfilled = null; // overridden to take different actions when all run dependencies are fulfilled
var runDependencyTracking = {};

function getUniqueRunDependency(id) {
  var orig = id;
  while (1) {
    if (!runDependencyTracking[id]) return id;
    id = orig + Math.random();
  }
  return id;
}

function addRunDependency(id) {
  runDependencies++;
  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }
  if (id) {
    assert(!runDependencyTracking[id]);
    runDependencyTracking[id] = 1;
    if (runDependencyWatcher === null && typeof setInterval !== 'undefined') {
      // Check for missing dependencies every few seconds
      runDependencyWatcher = setInterval(function() {
        if (ABORT) {
          clearInterval(runDependencyWatcher);
          runDependencyWatcher = null;
          return;
        }
        var shown = false;
        for (var dep in runDependencyTracking) {
          if (!shown) {
            shown = true;
            Module.printErr('still waiting on run dependencies:');
          }
          Module.printErr('dependency: ' + dep);
        }
        if (shown) {
          Module.printErr('(end of list)');
        }
      }, 10000);
    }
  } else {
    Module.printErr('warning: run dependency added without ID');
  }
}
Module["addRunDependency"] = addRunDependency;

function removeRunDependency(id) {
  runDependencies--;
  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }
  if (id) {
    assert(runDependencyTracking[id]);
    delete runDependencyTracking[id];
  } else {
    Module.printErr('warning: run dependency removed without ID');
  }
  if (runDependencies == 0) {
    if (runDependencyWatcher !== null) {
      clearInterval(runDependencyWatcher);
      runDependencyWatcher = null;
    }
    if (dependenciesFulfilled) {
      var callback = dependenciesFulfilled;
      dependenciesFulfilled = null;
      callback(); // can add another dependenciesFulfilled
    }
  }
}
Module["removeRunDependency"] = removeRunDependency;

Module["preloadedImages"] = {}; // maps url to image data
Module["preloadedAudios"] = {}; // maps url to audio data



var memoryInitializer = null;






// === Body ===

var ASM_CONSTS = [];




STATIC_BASE = Runtime.GLOBAL_BASE;

STATICTOP = STATIC_BASE + 23088;
/* global initializers */  __ATINIT__.push({ func: function() { __GLOBAL__sub_I_client_cpp() } }, { func: function() { __GLOBAL__sub_I_bind_cpp() } });


/* memory initializer */ allocate([0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,16,2,0,0,18,0,0,0,19,0,0,0,252,255,255,255,252,255,255,255,16,2,0,0,20,0,0,0,21,0,0,0,0,0,0,0,0,0,0,0,76,37,0,0,123,41,0,0,64,0,0,0,0,0,0,0,40,2,0,0,8,0,0,0,9,0,0,0,56,0,0,0,248,255,255,255,40,2,0,0,10,0,0,0,11,0,0,0,192,255,255,255,192,255,255,255,40,2,0,0,12,0,0,0,13,0,0,0,0,0,0,0,64,0,0,0,0,0,0,0,248,1,0,0,14,0,0,0,15,0,0,0,192,255,255,255,192,255,255,255,248,1,0,0,16,0,0,0,17,0,0,0,56,0,0,0,0,0,0,0,16,2,0,0,18,0,0,0,19,0,0,0,200,255,255,255,200,255,255,255,16,2,0,0,20,0,0,0,21,0,0,0,116,37,0,0,60,42,0,0,40,2,0,0,0,0,0,0,116,37,0,0,129,42,0,0,240,1,0,0,0,0,0,0,76,37,0,0,213,42,0,0,28,38,0,0,222,42,0,0,0,0,0,0,248,0,0,0,28,38,0,0,232,42,0,0,1,0,0,0,248,0,0,0,76,37,0,0,58,43,0,0,56,38,0,0,251,42,0,0,0,0,0,0,1,0,0,0,32,1,0,0,0,0,0,0,76,37,0,0,143,46,0,0,76,37,0,0,174,46,0,0,76,37,0,0,205,46,0,0,76,37,0,0,236,46,0,0,76,37,0,0,11,47,0,0,76,37,0,0,42,47,0,0,76,37,0,0,73,47,0,0,76,37,0,0,104,47,0,0,76,37,0,0,135,47,0,0,76,37,0,0,166,47,0,0,76,37,0,0,197,47,0,0,76,37,0,0,228,47,0,0,76,37,0,0,3,48,0,0,56,38,0,0,22,48,0,0,0,0,0,0,1,0,0,0,32,1,0,0,0,0,0,0,56,38,0,0,85,48,0,0,0,0,0,0,1,0,0,0,32,1,0,0,0,0,0,0,116,37,0,0,174,59,0,0,232,1,0,0,0,0,0,0,76,37,0,0,156,59,0,0,76,37,0,0,216,59,0,0,56,38,0,0,9,60,0,0,0,0,0,0,1,0,0,0,216,1,0,0,3,244,255,255,56,38,0,0,56,60,0,0,0,0,0,0,1,0,0,0,216,1,0,0,3,244,255,255,56,38,0,0,103,60,0,0,3,0,0,0,2,0,0,0,248,1,0,0,2,0,0,0,16,2,0,0,2,8,0,0,12,0,0,0,0,0,0,0,248,1,0,0,14,0,0,0,15,0,0,0,244,255,255,255,244,255,255,255,248,1,0,0,16,0,0,0,17,0,0,0,116,37,0,0,196,60,0,0,16,7,0,0,0,0,0,0,116,37,0,0,226,60,0,0,0,7,0,0,0,0,0,0,116,37,0,0,12,61,0,0,160,2,0,0,0,0,0,0,116,37,0,0,32,61,0,0,240,6,0,0,0,0,0,0,116,37,0,0,54,61,0,0,160,2,0,0,0,0,0,0,56,38,0,0,112,61,0,0,0,0,0,0,2,0,0,0,160,2,0,0,2,0,0,0,224,2,0,0,0,0,0,0,56,38,0,0,180,61,0,0,0,0,0,0,1,0,0,0,248,2,0,0,0,0,0,0,76,37,0,0,202,61,0,0,56,38,0,0,227,61,0,0,0,0,0,0,2,0,0,0,160,2,0,0,2,0,0,0,32,3,0,0,0,0,0,0,56,38,0,0,39,62,0,0,0,0,0,0,1,0,0,0,248,2,0,0,0,0,0,0,56,38,0,0,80,62,0,0,0,0,0,0,2,0,0,0,160,2,0,0,2,0,0,0,88,3,0,0,0,0,0,0,56,38,0,0,148,62,0,0,0,0,0,0,1,0,0,0,112,3,0,0,0,0,0,0,76,37,0,0,170,62,0,0,56,38,0,0,195,62,0,0,0,0,0,0,2,0,0,0,160,2,0,0,2,0,0,0,152,3,0,0,0,0,0,0,56,38,0,0,7,63,0,0,0,0,0,0,1,0,0,0,112,3,0,0,0,0,0,0,56,38,0,0,93,64,0,0,0,0,0,0,3,0,0,0,160,2,0,0,2,0,0,0,216,3,0,0,2,0,0,0,224,3,0,0,0,8,0,0,76,37,0,0,196,64,0,0,76,37,0,0,162,64,0,0,56,38,0,0,215,64,0,0,0,0,0,0,3,0,0,0,160,2,0,0,2,0,0,0,216,3,0,0,2,0,0,0,16,4,0,0,0,8,0,0,76,37,0,0,28,65,0,0,56,38,0,0,62,65,0,0,0,0,0,0,2,0,0,0,160,2,0,0,2,0,0,0,56,4,0,0,0,8,0,0,76,37,0,0,131,65,0,0,56,38,0,0,173,65,0,0,0,0,0,0,2,0,0,0,160,2,0,0,2,0,0,0,56,4,0,0,0,8,0,0,56,38,0,0,242,65,0,0,0,0,0,0,2,0,0,0,160,2,0,0,2,0,0,0,128,4,0,0,2,0,0,0,76,37,0,0,14,66,0,0,56,38,0,0,35,66,0,0,0,0,0,0,2,0,0,0,160,2,0,0,2,0,0,0,128,4,0,0,2,0,0,0,56,38,0,0,63,66,0,0,0,0,0,0,2,0,0,0,160,2,0,0,2,0,0,0,128,4,0,0,2,0,0,0,56,38,0,0,91,66,0,0,0,0,0,0,2,0,0,0,160,2,0,0,2,0,0,0,128,4,0,0,2,0,0,0,56,38,0,0,150,66,0,0,0,0,0,0,2,0,0,0,160,2,0,0,2,0,0,0,8,5,0,0,0,0,0,0,76,37,0,0,220,66,0,0,56,38,0,0,0,67,0,0,0,0,0,0,2,0,0,0,160,2,0,0,2,0,0,0,48,5,0,0,0,0,0,0,76,37,0,0,70,67,0,0,56,38,0,0,101,67,0,0,0,0,0,0,2,0,0,0,160,2,0,0,2,0,0,0,88,5,0,0,0,0,0,0,76,37,0,0,171,67,0,0,56,38,0,0,196,67,0,0,0,0,0,0,2,0,0,0,160,2,0,0,2,0,0,0,128,5,0,0,0,0,0,0,76,37,0,0,10,68,0,0,56,38,0,0,35,68,0,0,0,0,0,0,2,0,0,0,160,2,0,0,2,0,0,0,168,5,0,0,2,0,0,0,76,37,0,0,56,68,0,0,56,38,0,0,207,68,0,0,0,0,0,0,2,0,0,0,160,2,0,0,2,0,0,0,168,5,0,0,2,0,0,0,116,37,0,0,80,68,0,0,224,5,0,0,0,0,0,0,56,38,0,0,115,68,0,0,0,0,0,0,2,0,0,0,160,2,0,0,2,0,0,0,0,6,0,0,2,0,0,0,76,37,0,0,150,68,0,0,116,37,0,0,173,68,0,0,224,5,0,0,0,0,0,0,56,38,0,0,228,68,0,0,0,0,0,0,2,0,0,0,160,2,0,0,2,0,0,0,0,6,0,0,2,0,0,0,56,38,0,0,6,69,0,0,0,0,0,0,2,0,0,0,160,2,0,0,2,0,0,0,0,6,0,0,2,0,0,0,56,38,0,0,40,69,0,0,0,0,0,0,2,0,0,0,160,2,0,0,2,0,0,0,0,6,0,0,2,0,0,0,116,37,0,0,75,69,0,0,160,2,0,0,0,0,0,0,56,38,0,0,97,69,0,0,0,0,0,0,2,0,0,0,160,2,0,0,2,0,0,0,168,6,0,0,2,0,0,0,76,37,0,0,115,69,0,0,56,38,0,0,136,69,0,0,0,0,0,0,2,0,0,0,160,2,0,0,2,0,0,0,168,6,0,0,2,0,0,0,116,37,0,0,165,69,0,0,160,2,0,0,0,0,0,0,116,37,0,0,186,69,0,0,160,2,0,0,0,0,0,0,76,37,0,0,214,69,0,0,76,37,0,0,252,69,0,0,116,37,0,0,21,70,0,0,128,7,0,0,0,0,0,0,116,37,0,0,44,70,0,0,248,6,0,0,0,0,0,0,76,37,0,0,215,70,0,0,116,37,0,0,55,71,0,0,56,7,0,0,0,0,0,0,116,37,0,0,228,70,0,0,72,7,0,0,0,0,0,0,76,37,0,0,5,71,0,0,116,37,0,0,18,71,0,0,40,7,0,0,0,0,0,0,116,37,0,0,90,72,0,0,32,7,0,0,0,0,0,0,116,37,0,0,103,72,0,0,32,7,0,0,0,0,0,0,116,37,0,0,119,72,0,0,32,7,0,0,0,0,0,0,116,37,0,0,137,72,0,0,112,7,0,0,0,0,0,0,116,37,0,0,168,72,0,0,32,7,0,0,0,0,0,0,116,37,0,0,216,72,0,0,56,7,0,0,0,0,0,0,116,37,0,0,180,72,0,0,176,7,0,0,0,0,0,0,116,37,0,0,250,72,0,0,56,7,0,0,0,0,0,0,0,38,0,0,34,73,0,0,0,38,0,0,36,73,0,0,0,38,0,0,39,73,0,0,0,38,0,0,41,73,0,0,0,38,0,0,43,73,0,0,0,38,0,0,45,73,0,0,0,38,0,0,47,73,0,0,0,38,0,0,49,73,0,0,0,38,0,0,51,73,0,0,0,38,0,0,53,73,0,0,0,38,0,0,78,62,0,0,0,38,0,0,55,73,0,0,0,38,0,0,57,73,0,0,0,38,0,0,59,73,0,0,116,37,0,0,61,73,0,0,40,7,0,0,0,0,0,0,0,0,0,0,64,0,0,0,1,0,0,0,64,0,0,0,0,0,0,0,216,0,0,0,2,0,0,0,3,0,0,0,56,0,0,0,248,255,255,255,216,0,0,0,4,0,0,0,5,0,0,0,192,255,255,255,192,255,255,255,216,0,0,0,6,0,0,0,7,0,0,0,120,8,0,0,84,0,0,0,148,0,0,0,168,0,0,0,188,0,0,0,208,0,0,0,124,0,0,0,104,0,0,0,160,8,0,0,140,8,0,0,0,0,0,0,232,0,0,0,22,0,0,0,23,0,0,0,24,0,0,0,25,0,0,0,26,0,0,0,27,0,0,0,28,0,0,0,29,0,0,0,30,0,0,0,31,0,0,0,32,0,0,0,33,0,0,0,34,0,0,0,35,0,0,0,0,1,0,0,32,8,0,0,40,1,0,0,224,7,0,0,0,1,0,0,40,1,0,0,248,0,0,0,40,1,0,0,76,9,0,0,20,0,0,0,67,46,85,84,70,45,56,0,0,0,0,0,0,0,0,0,0,0,0,0,222,18,4,149,0,0,0,0,255,255,255,255,255,255,255,255,255,255,255,255,48,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,192,3,0,0,192,4,0,0,192,5,0,0,192,6,0,0,192,7,0,0,192,8,0,0,192,9,0,0,192,10,0,0,192,11,0,0,192,12,0,0,192,13,0,0,192,14,0,0,192,15,0,0,192,16,0,0,192,17,0,0,192,18,0,0,192,19,0,0,192,20,0,0,192,21,0,0,192,22,0,0,192,23,0,0,192,24,0,0,192,25,0,0,192,26,0,0,192,27,0,0,192,28,0,0,192,29,0,0,192,30,0,0,192,31,0,0,192,0,0,0,179,1,0,0,195,2,0,0,195,3,0,0,195,4,0,0,195,5,0,0,195,6,0,0,195,7,0,0,195,8,0,0,195,9,0,0,195,10,0,0,195,11,0,0,195,12,0,0,195,13,0,0,211,14,0,0,195,15,0,0,195,0,0,12,187,1,0,12,195,2,0,12,195,3,0,12,195,4,0,12,211,72,10,0,0,5,0,0,0,0,0,0,0,0,0,0,0,36,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,37,0,0,0,38,0,0,0,18,86,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,48,76,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,0,0,0,0,0,0,0,0,0,0,36,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,39,0,0,0,38,0,0,0,26,86,0,0,0,4,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,10,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,184,11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,40,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,88,39,0,0,188,14,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0,5,0,0,0,6,0,0,0,7,0,0,0,8,0,0,0,9,0,0,0,10,0,0,0,11,0,0,0,12,0,0,0,13,0,0,0,14,0,0,0,15,0,0,0,16,0,0,0,17,0,0,0,18,0,0,0,19,0,0,0,20,0,0,0,21,0,0,0,22,0,0,0,23,0,0,0,24,0,0,0,25,0,0,0,26,0,0,0,27,0,0,0,28,0,0,0,29,0,0,0,30,0,0,0,31,0,0,0,32,0,0,0,33,0,0,0,34,0,0,0,35,0,0,0,36,0,0,0,37,0,0,0,38,0,0,0,39,0,0,0,40,0,0,0,41,0,0,0,42,0,0,0,43,0,0,0,44,0,0,0,45,0,0,0,46,0,0,0,47,0,0,0,48,0,0,0,49,0,0,0,50,0,0,0,51,0,0,0,52,0,0,0,53,0,0,0,54,0,0,0,55,0,0,0,56,0,0,0,57,0,0,0,58,0,0,0,59,0,0,0,60,0,0,0,61,0,0,0,62,0,0,0,63,0,0,0,64,0,0,0,97,0,0,0,98,0,0,0,99,0,0,0,100,0,0,0,101,0,0,0,102,0,0,0,103,0,0,0,104,0,0,0,105,0,0,0,106,0,0,0,107,0,0,0,108,0,0,0,109,0,0,0,110,0,0,0,111,0,0,0,112,0,0,0,113,0,0,0,114,0,0,0,115,0,0,0,116,0,0,0,117,0,0,0,118,0,0,0,119,0,0,0,120,0,0,0,121,0,0,0,122,0,0,0,91,0,0,0,92,0,0,0,93,0,0,0,94,0,0,0,95,0,0,0,96,0,0,0,97,0,0,0,98,0,0,0,99,0,0,0,100,0,0,0,101,0,0,0,102,0,0,0,103,0,0,0,104,0,0,0,105,0,0,0,106,0,0,0,107,0,0,0,108,0,0,0,109,0,0,0,110,0,0,0,111,0,0,0,112,0,0,0,113,0,0,0,114,0,0,0,115,0,0,0,116,0,0,0,117,0,0,0,118,0,0,0,119,0,0,0,120,0,0,0,121,0,0,0,122,0,0,0,123,0,0,0,124,0,0,0,125,0,0,0,126,0,0,0,127,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,192,20,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0,5,0,0,0,6,0,0,0,7,0,0,0,8,0,0,0,9,0,0,0,10,0,0,0,11,0,0,0,12,0,0,0,13,0,0,0,14,0,0,0,15,0,0,0,16,0,0,0,17,0,0,0,18,0,0,0,19,0,0,0,20,0,0,0,21,0,0,0,22,0,0,0,23,0,0,0,24,0,0,0,25,0,0,0,26,0,0,0,27,0,0,0,28,0,0,0,29,0,0,0,30,0,0,0,31,0,0,0,32,0,0,0,33,0,0,0,34,0,0,0,35,0,0,0,36,0,0,0,37,0,0,0,38,0,0,0,39,0,0,0,40,0,0,0,41,0,0,0,42,0,0,0,43,0,0,0,44,0,0,0,45,0,0,0,46,0,0,0,47,0,0,0,48,0,0,0,49,0,0,0,50,0,0,0,51,0,0,0,52,0,0,0,53,0,0,0,54,0,0,0,55,0,0,0,56,0,0,0,57,0,0,0,58,0,0,0,59,0,0,0,60,0,0,0,61,0,0,0,62,0,0,0,63,0,0,0,64,0,0,0,65,0,0,0,66,0,0,0,67,0,0,0,68,0,0,0,69,0,0,0,70,0,0,0,71,0,0,0,72,0,0,0,73,0,0,0,74,0,0,0,75,0,0,0,76,0,0,0,77,0,0,0,78,0,0,0,79,0,0,0,80,0,0,0,81,0,0,0,82,0,0,0,83,0,0,0,84,0,0,0,85,0,0,0,86,0,0,0,87,0,0,0,88,0,0,0,89,0,0,0,90,0,0,0,91,0,0,0,92,0,0,0,93,0,0,0,94,0,0,0,95,0,0,0,96,0,0,0,65,0,0,0,66,0,0,0,67,0,0,0,68,0,0,0,69,0,0,0,70,0,0,0,71,0,0,0,72,0,0,0,73,0,0,0,74,0,0,0,75,0,0,0,76,0,0,0,77,0,0,0,78,0,0,0,79,0,0,0,80,0,0,0,81,0,0,0,82,0,0,0,83,0,0,0,84,0,0,0,85,0,0,0,86,0,0,0,87,0,0,0,88,0,0,0,89,0,0,0,90,0,0,0,123,0,0,0,124,0,0,0,125,0,0,0,126,0,0,0,127,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,10,0,0,0,100,0,0,0,232,3,0,0,16,39,0,0,160,134,1,0,64,66,15,0,128,150,152,0,0,225,245,5,95,112,137,0,255,9,47,15,0,0,0,0,216,1,0,0,41,0,0,0,42,0,0,0,0,0,0,0,232,1,0,0,43,0,0,0,44,0,0,0,0,0,0,0,240,1,0,0,45,0,0,0,46,0,0,0,24,0,0,0,25,0,0,0,47,0,0,0,48,0,0,0,28,0,0,0,29,0,0,0,30,0,0,0,49,0,0,0,32,0,0,0,50,0,0,0,34,0,0,0,51,0,0,0,8,0,0,0,0,0,0,0,248,1,0,0,14,0,0,0,15,0,0,0,248,255,255,255,248,255,255,255,248,1,0,0,16,0,0,0,17,0,0,0,84,25,0,0,104,25,0,0,28,0,0,0,48,0,0,0,12,0,0,0,0,0,0,0,40,2,0,0,8,0,0,0,9,0,0,0,4,0,0,0,248,255,255,255,40,2,0,0,10,0,0,0,11,0,0,0,244,255,255,255,244,255,255,255,40,2,0,0,12,0,0,0,13,0,0,0,140,25,0,0,84,2,0,0,104,2,0,0,28,0,0,0,48,0,0,0,180,25,0,0,160,25,0,0,0,0,0,0,112,2,0,0,52,0,0,0,53,0,0,0,54,0,0,0,55,0,0,0,56,0,0,0,57,0,0,0,58,0,0,0,0,0,0,0,128,2,0,0,59,0,0,0,60,0,0,0,61,0,0,0,224,25,0,0,0,0,0,0,144,2,0,0,62,0,0,0,63,0,0,0,64,0,0,0,65,0,0,0,66,0,0,0,67,0,0,0,0,0,0,0,176,2,0,0,68,0,0,0,69,0,0,0,64,0,0,0,70,0,0,0,71,0,0,0,72,0,0,0,0,0,0,0,192,2,0,0,73,0,0,0,74,0,0,0,64,0,0,0,75,0,0,0,76,0,0,0,77,0,0,0,78,0,0,0,79,0,0,0,80,0,0,0,81,0,0,0,82,0,0,0,83,0,0,0,84,0,0,0,85,0,0,0,0,0,0,0,0,3,0,0,86,0,0,0,87,0,0,0,64,0,0,0,88,0,0,0,89,0,0,0,90,0,0,0,91,0,0,0,92,0,0,0,93,0,0,0,94,0,0,0,95,0,0,0,96,0,0,0,97,0,0,0,98,0,0,0,0,0,0,0,56,3,0,0,99,0,0,0,100,0,0,0,64,0,0,0,101,0,0,0,102,0,0,0,103,0,0,0,104,0,0,0,105,0,0,0,106,0,0,0,107,0,0,0,108,0,0,0,0,0,0,0,120,3,0,0,109,0,0,0,110,0,0,0,64,0,0,0,111,0,0,0,112,0,0,0,113,0,0,0,114,0,0,0,115,0,0,0,116,0,0,0,117,0,0,0,118,0,0,0,0,0,0,0,176,3,0,0,119,0,0,0,120,0,0,0,64,0,0,0,121,0,0,0,122,0,0,0,123,0,0,0,124,0,0,0,125,0,0,0,126,0,0,0,127,0,0,0,248,255,255,255,176,3,0,0,128,0,0,0,129,0,0,0,130,0,0,0,131,0,0,0,132,0,0,0,133,0,0,0,134,0,0,0,0,0,0,0,232,3,0,0,135,0,0,0,136,0,0,0,64,0,0,0,137,0,0,0,138,0,0,0,139,0,0,0,140,0,0,0,141,0,0,0,142,0,0,0,143,0,0,0,248,255,255,255,232,3,0,0,144,0,0,0,145,0,0,0,146,0,0,0,147,0,0,0,148,0,0,0,149,0,0,0,150,0,0,0,37,0,0,0,72,0,0,0,58,0,0,0,37,0,0,0,77,0,0,0,58,0,0,0,37,0,0,0,83,0,0,0,0,0,0,0,37,0,0,0,109,0,0,0,47,0,0,0,37,0,0,0,100,0,0,0,47,0,0,0,37,0,0,0,121,0,0,0,0,0,0,0,37,0,0,0,73,0,0,0,58,0,0,0,37,0,0,0,77,0,0,0,58,0,0,0,37,0,0,0,83,0,0,0,32,0,0,0,37,0,0,0,112,0,0,0,0,0,0,0,37,0,0,0,97,0,0,0,32,0,0,0,37,0,0,0,98,0,0,0,32,0,0,0,37,0,0,0,100,0,0,0,32,0,0,0,37,0,0,0,72,0,0,0,58,0,0,0,37,0,0,0,77,0,0,0,58,0,0,0,37,0,0,0,83,0,0,0,32,0,0,0,37,0,0,0,89,0,0,0,0,0,0,0,65,0,0,0,77,0,0,0,0,0,0,0,80,0,0,0,77,0,0,0,0,0,0,0,74,0,0,0,97,0,0,0,110,0,0,0,117,0,0,0,97,0,0,0,114,0,0,0,121,0,0,0,0,0,0,0,70,0,0,0,101,0,0,0,98,0,0,0,114,0,0,0,117,0,0,0,97,0,0,0,114,0,0,0,121,0,0,0,0,0,0,0,77,0,0,0,97,0,0,0,114,0,0,0,99,0,0,0,104,0,0,0,0,0,0,0,65,0,0,0,112,0,0,0,114,0,0,0,105,0,0,0,108,0,0,0,0,0,0,0,77,0,0,0,97,0,0,0,121,0,0,0,0,0,0,0,74,0,0,0,117,0,0,0,110,0,0,0,101,0,0,0,0,0,0,0,74,0,0,0,117,0,0,0,108,0,0,0,121,0,0,0,0,0,0,0,65,0,0,0,117,0,0,0,103,0,0,0,117,0,0,0,115,0,0,0,116,0,0,0,0,0,0,0,83,0,0,0,101,0,0,0,112,0,0,0,116,0,0,0,101,0,0,0,109,0,0,0,98,0,0,0,101,0,0,0,114,0,0,0,0,0,0,0,79,0,0,0,99,0,0,0,116,0,0,0,111,0,0,0,98,0,0,0,101,0,0,0,114,0,0,0,0,0,0,0,78,0,0,0,111,0,0,0,118,0,0,0,101,0,0,0,109,0,0,0,98,0,0,0,101,0,0,0,114,0,0,0,0,0,0,0,68,0,0,0,101,0,0,0,99,0,0,0,101,0,0,0,109,0,0,0,98,0,0,0,101,0,0,0,114,0,0,0,0,0,0,0,74,0,0,0,97,0,0,0,110,0,0,0,0,0,0,0,70,0,0,0,101,0,0,0,98,0,0,0,0,0,0,0,77,0,0,0,97,0,0,0,114,0,0,0,0,0,0,0,65,0,0,0,112,0,0,0,114,0,0,0,0,0,0,0,74,0,0,0,117,0,0,0,110,0,0,0,0,0,0,0,74,0,0,0,117,0,0,0,108,0,0,0,0,0,0,0,65,0,0,0,117,0,0,0,103,0,0,0,0,0,0,0,83,0,0,0,101,0,0,0,112,0,0,0,0,0,0,0,79,0,0,0,99,0,0,0,116,0,0,0,0,0,0,0,78,0,0,0,111,0,0,0,118,0,0,0,0,0,0,0,68,0,0,0,101,0,0,0,99,0,0,0,0,0,0,0,83,0,0,0,117,0,0,0,110,0,0,0,100,0,0,0,97,0,0,0,121,0,0,0,0,0,0,0,77,0,0,0,111,0,0,0,110,0,0,0,100,0,0,0,97,0,0,0,121,0,0,0,0,0,0,0,84,0,0,0,117,0,0,0,101,0,0,0,115,0,0,0,100,0,0,0,97,0,0,0,121,0,0,0,0,0,0,0,87,0,0,0,101,0,0,0,100,0,0,0,110,0,0,0,101,0,0,0,115,0,0,0,100,0,0,0,97,0,0,0,121,0,0,0,0,0,0,0,84,0,0,0,104,0,0,0,117,0,0,0,114,0,0,0,115,0,0,0,100,0,0,0,97,0,0,0,121,0,0,0,0,0,0,0,70,0,0,0,114,0,0,0,105,0,0,0,100,0,0,0,97,0,0,0,121,0,0,0,0,0,0,0,83,0,0,0,97,0,0,0,116,0,0,0,117,0,0,0,114,0,0,0,100,0,0,0,97,0,0,0,121,0,0,0,0,0,0,0,83,0,0,0,117,0,0,0,110,0,0,0,0,0,0,0,77,0,0,0,111,0,0,0,110,0,0,0,0,0,0,0,84,0,0,0,117,0,0,0,101,0,0,0,0,0,0,0,87,0,0,0,101,0,0,0,100,0,0,0,0,0,0,0,84,0,0,0,104,0,0,0,117,0,0,0,0,0,0,0,70,0,0,0,114,0,0,0,105,0,0,0,0,0,0,0,83,0,0,0,97,0,0,0,116,0,0,0,0,0,0,0,37,0,0,0,109,0,0,0,47,0,0,0,37,0,0,0,100,0,0,0,47,0,0,0,37,0,0,0,121,0,0,0,37,0,0,0,89,0,0,0,45,0,0,0,37,0,0,0,109,0,0,0,45,0,0,0,37,0,0,0,100,0,0,0,37,0,0,0,73,0,0,0,58,0,0,0,37,0,0,0,77,0,0,0,58,0,0,0,37,0,0,0,83,0,0,0,32,0,0,0,37,0,0,0,112,0,0,0,37,0,0,0,72,0,0,0,58,0,0,0,37,0,0,0,77,0,0,0,37,0,0,0,72,0,0,0,58,0,0,0,37,0,0,0,77,0,0,0,58,0,0,0,37,0,0,0,83,0,0,0,37,0,0,0,72,0,0,0,58,0,0,0,37,0,0,0,77,0,0,0,58,0,0,0,37,0,0,0,83,0,0,0,0,0,0,0,24,4,0,0,151,0,0,0,152,0,0,0,64,0,0,0,153,0,0,0,0,0,0,0,64,4,0,0,154,0,0,0,155,0,0,0,64,0,0,0,156,0,0,0,0,0,0,0,96,4,0,0,157,0,0,0,158,0,0,0,64,0,0,0,159,0,0,0,160,0,0,0,161,0,0,0,162,0,0,0,163,0,0,0,164,0,0,0,165,0,0,0,166,0,0,0,167,0,0,0,0,0,0,0,136,4,0,0,168,0,0,0,169,0,0,0,64,0,0,0,170,0,0,0,171,0,0,0,172,0,0,0,173,0,0,0,174,0,0,0,175,0,0,0,176,0,0,0,177,0,0,0,178,0,0,0,0,0,0,0,168,4,0,0,179,0,0,0,180,0,0,0,64,0,0,0,181,0,0,0,182,0,0,0,183,0,0,0,184,0,0,0,185,0,0,0,186,0,0,0,187,0,0,0,188,0,0,0,189,0,0,0,0,0,0,0,200,4,0,0,190,0,0,0,191,0,0,0,64,0,0,0,192,0,0,0,193,0,0,0,194,0,0,0,195,0,0,0,196,0,0,0,197,0,0,0,198,0,0,0,199,0,0,0,200,0,0,0,0,0,0,0,232,4,0,0,201,0,0,0,202,0,0,0,64,0,0,0,203,0,0,0,204,0,0,0,0,0,0,0,16,5,0,0,205,0,0,0,206,0,0,0,64,0,0,0,207,0,0,0,208,0,0,0,0,0,0,0,56,5,0,0,209,0,0,0,210,0,0,0,64,0,0,0,211,0,0,0,212,0,0,0,0,0,0,0,96,5,0,0,213,0,0,0,214,0,0,0,64,0,0,0,215,0,0,0,216,0,0,0,0,0,0,0,136,5,0,0,217,0,0,0,218,0,0,0,64,0,0,0,219,0,0,0,220,0,0,0,221,0,0,0,0,0,0,0,176,5,0,0,222,0,0,0,223,0,0,0,64,0,0,0,224,0,0,0,225,0,0,0,226,0,0,0,0,0,0,0,8,6,0,0,227,0,0,0,228,0,0,0,64,0,0,0,229,0,0,0,230,0,0,0,231,0,0,0,232,0,0,0,233,0,0,0,234,0,0,0,235,0,0,0,0,0,0,0,208,5,0,0,227,0,0,0,236,0,0,0,64,0,0,0,229,0,0,0,230,0,0,0,231,0,0,0,232,0,0,0,233,0,0,0,234,0,0,0,235,0,0,0,0,0,0,0,56,6,0,0,237,0,0,0,238,0,0,0,64,0,0,0,239,0,0,0,240,0,0,0,241,0,0,0,242,0,0,0,243,0,0,0,244,0,0,0,245,0,0,0,0,0,0,0,120,6,0,0,246,0,0,0,247,0,0,0,64,0,0,0,0,0,0,0,136,6,0,0,248,0,0,0,249,0,0,0,64,0,0,0,250,0,0,0,251,0,0,0,252,0,0,0,253,0,0,0,254,0,0,0,255,0,0,0,0,1,0,0,1,1,0,0,0,0,0,0,208,6,0,0,2,1,0,0,3,1,0,0,64,0,0,0,4,1,0,0,5,1,0,0,6,1,0,0,7,1,0,0,8,1,0,0,0,0,0,0,224,6,0,0,9,1,0,0,10,1,0,0,64,0,0,0,11,1,0,0,12,1,0,0,13,1,0,0,14,1,0,0,15,1,0,0,102,0,0,0,97,0,0,0,108,0,0,0,115,0,0,0,101,0,0,0,0,0,0,0,116,0,0,0,114,0,0,0,117,0,0,0,101,0,0,0,0,0,0,0,0,0,0,0,160,2,0,0,227,0,0,0,16,1,0,0,64,0,0,0,0,0,0,0,176,6,0,0,227,0,0,0,17,1,0,0,64,0,0,0,18,1,0,0,19,1,0,0,20,1,0,0,21,1,0,0,22,1,0,0,23,1,0,0,24,1,0,0,25,1,0,0,26,1,0,0,27,1,0,0,28,1,0,0,29,1,0,0,0,0,0,0,24,6,0,0,227,0,0,0,30,1,0,0,64,0,0,0,31,1,0,0,32,1,0,0,33,1,0,0,34,1,0,0,35,1,0,0,36,1,0,0,37,1,0,0,0,0,0,0,88,6,0,0,227,0,0,0,38,1,0,0,64,0,0,0,39,1,0,0,40,1,0,0,41,1,0,0,42,1,0,0,43,1,0,0,44,1,0,0,45,1,0,0,0,0,0,0,224,5,0,0,227,0,0,0,46,1,0,0,64,0,0,0,229,0,0,0,230,0,0,0,231,0,0,0,232,0,0,0,233,0,0,0,234,0,0,0,235,0,0,0,0,0,0,0,224,3,0,0,128,0,0,0,129,0,0,0,130,0,0,0,131,0,0,0,132,0,0,0,133,0,0,0,134,0,0,0,0,0,0,0,16,4,0,0,144,0,0,0,145,0,0,0,146,0,0,0,147,0,0,0,148,0,0,0,149,0,0,0,150,0,0,0,0,0,0,0,0,7,0,0,47,1,0,0,48,1,0,0,61,0,0,0,49,1,0,0,206,70,0,0,0,0,0,0,40,7,0,0,50,1,0,0,51,1,0,0,52,1,0,0,53,1,0,0,54,1,0,0,55,1,0,0,56,1,0,0,57,1,0,0,0,0,0,0,80,7,0,0,50,1,0,0,58,1,0,0,52,1,0,0,53,1,0,0,54,1,0,0,59,1,0,0,60,1,0,0,61,1,0,0,0,0,0,0,96,7,0,0,62,1,0,0,63,1,0,0,64,1,0,0,0,0,0,0,112,7,0,0,65,1,0,0,66,1,0,0,67,1,0,0,0,0,0,0,128,7,0,0,68,1,0,0,69,1,0,0,61,0,0,0,0,0,0,0,144,7,0,0,65,1,0,0,70,1,0,0,67,1,0,0,0,0,0,0,160,7,0,0,71,1,0,0,72,1,0,0,73,1,0,0,0,0,0,0,208,7,0,0,50,1,0,0,74,1,0,0,52,1,0,0,53,1,0,0,75,1,0,0,0,0,0,0,192,7,0,0,50,1,0,0,76,1,0,0,52,1,0,0,53,1,0,0,77,1,0,0,0,0,0,0,80,8,0,0,50,1,0,0,78,1,0,0,52,1,0,0,53,1,0,0,54,1,0,0,79,1,0,0,80,1,0,0,81,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,2,0,2,0,2,0,2,0,2,0,2,0,2,0,2,0,3,32,2,32,2,32,2,32,2,32,2,0,2,0,2,0,2,0,2,0,2,0,2,0,2,0,2,0,2,0,2,0,2,0,2,0,2,0,2,0,2,0,2,0,2,0,1,96,4,192,4,192,4,192,4,192,4,192,4,192,4,192,4,192,4,192,4,192,4,192,4,192,4,192,4,192,4,192,8,216,8,216,8,216,8,216,8,216,8,216,8,216,8,216,8,216,8,216,4,192,4,192,4,192,4,192,4,192,4,192,4,192,8,213,8,213,8,213,8,213,8,213,8,213,8,197,8,197,8,197,8,197,8,197,8,197,8,197,8,197,8,197,8,197,8,197,8,197,8,197,8,197,8,197,8,197,8,197], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE);
/* memory initializer */ allocatei8", ALLOC_NONE, Runtime.GLOBAL_BASE+10240);





/* no memory initializer */
var tempDoublePtr = STATICTOP; STATICTOP += 16;

assert(tempDoublePtr % 8 == 0);

function copyTempFloat(ptr) { // functions, because inlining this code increases code size too much

  HEAP8[tempDoublePtr] = HEAP8[ptr];

  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];

  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];

  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];

}

function copyTempDouble(ptr) {

  HEAP8[tempDoublePtr] = HEAP8[ptr];

  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];

  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];

  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];

  HEAP8[tempDoublePtr+4] = HEAP8[ptr+4];

  HEAP8[tempDoublePtr+5] = HEAP8[ptr+5];

  HEAP8[tempDoublePtr+6] = HEAP8[ptr+6];

  HEAP8[tempDoublePtr+7] = HEAP8[ptr+7];

}

// {{PRE_LIBRARY}}


  
  function _atexit(func, arg) {
      __ATEXIT__.unshift({ func: func, arg: arg });
    }function ___cxa_atexit() {
  return _atexit.apply(null, arguments)
  }

   
  Module["_i64Subtract"] = _i64Subtract;

  
  
  
  function embind_init_charCodes() {
      var codes = new Array(256);
      for (var i = 0; i < 256; ++i) {
          codes[i] = String.fromCharCode(i);
      }
      embind_charCodes = codes;
    }var embind_charCodes=undefined;function readLatin1String(ptr) {
      var ret = "";
      var c = ptr;
      while (HEAPU8[c]) {
          ret += embind_charCodes[HEAPU8[c++]];
      }
      return ret;
    }
  
  
  var awaitingDependencies={};
  
  var registeredTypes={};
  
  var typeDependencies={};
  
  
  
  
  
  
  var char_0=48;
  
  var char_9=57;function makeLegalFunctionName(name) {
      if (undefined === name) {
          return '_unknown';
      }
      name = name.replace(/[^a-zA-Z0-9_]/g, '$');
      var f = name.charCodeAt(0);
      if (f >= char_0 && f <= char_9) {
          return '_' + name;
      } else {
          return name;
      }
    }function createNamedFunction(name, body) {
      name = makeLegalFunctionName(name);
      /*jshint evil:true*/
      return new Function(
          "body",
          "return function " + name + "() {\n" +
          "    \"use strict\";" +
          "    return body.apply(this, arguments);\n" +
          "};\n"
      )(body);
    }function extendError(baseErrorType, errorName) {
      var errorClass = createNamedFunction(errorName, function(message) {
          this.name = errorName;
          this.message = message;
  
          var stack = (new Error(message)).stack;
          if (stack !== undefined) {
              this.stack = this.toString() + '\n' +
                  stack.replace(/^Error(:[^\n]*)?\n/, '');
          }
      });
      errorClass.prototype = Object.create(baseErrorType.prototype);
      errorClass.prototype.constructor = errorClass;
      errorClass.prototype.toString = function() {
          if (this.message === undefined) {
              return this.name;
          } else {
              return this.name + ': ' + this.message;
          }
      };
  
      return errorClass;
    }var BindingError=undefined;function throwBindingError(message) {
      throw new BindingError(message);
    }
  
  
  
  var InternalError=undefined;function throwInternalError(message) {
      throw new InternalError(message);
    }function whenDependentTypesAreResolved(myTypes, dependentTypes, getTypeConverters) {
      myTypes.forEach(function(type) {
          typeDependencies[type] = dependentTypes;
      });
  
      function onComplete(typeConverters) {
          var myTypeConverters = getTypeConverters(typeConverters);
          if (myTypeConverters.length !== myTypes.length) {
              throwInternalError('Mismatched type converter count');
          }
          for (var i = 0; i < myTypes.length; ++i) {
              registerType(myTypes[i], myTypeConverters[i]);
          }
      }
  
      var typeConverters = new Array(dependentTypes.length);
      var unregisteredTypes = [];
      var registered = 0;
      dependentTypes.forEach(function(dt, i) {
          if (registeredTypes.hasOwnProperty(dt)) {
              typeConverters[i] = registeredTypes[dt];
          } else {
              unregisteredTypes.push(dt);
              if (!awaitingDependencies.hasOwnProperty(dt)) {
                  awaitingDependencies[dt] = [];
              }
              awaitingDependencies[dt].push(function() {
                  typeConverters[i] = registeredTypes[dt];
                  ++registered;
                  if (registered === unregisteredTypes.length) {
                      onComplete(typeConverters);
                  }
              });
          }
      });
      if (0 === unregisteredTypes.length) {
          onComplete(typeConverters);
      }
    }function registerType(rawType, registeredInstance, options) {
      options = options || {};
  
      if (!('argPackAdvance' in registeredInstance)) {
          throw new TypeError('registerType registeredInstance requires argPackAdvance');
      }
  
      var name = registeredInstance.name;
      if (!rawType) {
          throwBindingError('type "' + name + '" must have a positive integer typeid pointer');
      }
      if (registeredTypes.hasOwnProperty(rawType)) {
          if (options.ignoreDuplicateRegistrations) {
              return;
          } else {
              throwBindingError("Cannot register type '" + name + "' twice");
          }
      }
  
      registeredTypes[rawType] = registeredInstance;
      delete typeDependencies[rawType];
  
      if (awaitingDependencies.hasOwnProperty(rawType)) {
          var callbacks = awaitingDependencies[rawType];
          delete awaitingDependencies[rawType];
          callbacks.forEach(function(cb) {
              cb();
          });
      }
    }function __embind_register_memory_view(rawType, dataTypeIndex, name) {
      var typeMapping = [
          Int8Array,
          Uint8Array,
          Int16Array,
          Uint16Array,
          Int32Array,
          Uint32Array,
          Float32Array,
          Float64Array,
      ];
  
      var TA = typeMapping[dataTypeIndex];
  
      function decodeMemoryView(handle) {
          handle = handle >> 2;
          var heap = HEAPU32;
          var size = heap[handle]; // in elements
          var data = heap[handle + 1]; // byte offset into emscripten heap
          return new TA(heap['buffer'], data, size);
      }
  
      name = readLatin1String(name);
      registerType(rawType, {
          name: name,
          'fromWireType': decodeMemoryView,
          'argPackAdvance': 8,
          'readValueFromPointer': decodeMemoryView,
      }, {
          ignoreDuplicateRegistrations: true,
      });
    }

   
  Module["_i64Add"] = _i64Add;

  function __embind_register_void(rawType, name) {
      name = readLatin1String(name);
      registerType(rawType, {
          isVoid: true, // void return values can be optimized out sometimes
          name: name,
          'argPackAdvance': 0,
          'fromWireType': function() {
              return undefined;
          },
          'toWireType': function(destructors, o) {
              // TODO: assert if anything else is given?
              return undefined;
          },
      });
    }

  
  function __ZSt18uncaught_exceptionv() { // std::uncaught_exception()
      return !!__ZSt18uncaught_exceptionv.uncaught_exception;
    }
  
  
  
  var EXCEPTIONS={last:0,caught:[],infos:{},deAdjust:function (adjusted) {
        if (!adjusted || EXCEPTIONS.infos[adjusted]) return adjusted;
        for (var ptr in EXCEPTIONS.infos) {
          var info = EXCEPTIONS.infos[ptr];
          if (info.adjusted === adjusted) {
            return ptr;
          }
        }
        return adjusted;
      },addRef:function (ptr) {
        if (!ptr) return;
        var info = EXCEPTIONS.infos[ptr];
        info.refcount++;
      },decRef:function (ptr) {
        if (!ptr) return;
        var info = EXCEPTIONS.infos[ptr];
        assert(info.refcount > 0);
        info.refcount--;
        // A rethrown exception can reach refcount 0; it must not be discarded
        // Its next handler will clear the rethrown flag and addRef it, prior to
        // final decRef and destruction here
        if (info.refcount === 0 && !info.rethrown) {
          if (info.destructor) {
            Module['dynCall_vi'](info.destructor, ptr);
          }
          delete EXCEPTIONS.infos[ptr];
          ___cxa_free_exception(ptr);
        }
      },clearRef:function (ptr) {
        if (!ptr) return;
        var info = EXCEPTIONS.infos[ptr];
        info.refcount = 0;
      }};
  function ___resumeException(ptr) {
      if (!EXCEPTIONS.last) { EXCEPTIONS.last = ptr; }
      throw ptr;
    }function ___cxa_find_matching_catch() {
      var thrown = EXCEPTIONS.last;
      if (!thrown) {
        // just pass through the null ptr
        return ((Runtime.setTempRet0(0),0)|0);
      }
      var info = EXCEPTIONS.infos[thrown];
      var throwntype = info.type;
      if (!throwntype) {
        // just pass through the thrown ptr
        return ((Runtime.setTempRet0(0),thrown)|0);
      }
      var typeArray = Array.prototype.slice.call(arguments);
  
      var pointer = Module['___cxa_is_pointer_type'](throwntype);
      // can_catch receives a **, add indirection
      if (!___cxa_find_matching_catch.buffer) ___cxa_find_matching_catch.buffer = _malloc(4);
      HEAP32[((___cxa_find_matching_catch.buffer)>>2)]=thrown;
      thrown = ___cxa_find_matching_catch.buffer;
      // The different catch blocks are denoted by different types.
      // Due to inheritance, those types may not precisely match the
      // type of the thrown object. Find one which matches, and
      // return the type of the catch block which should be called.
      for (var i = 0; i < typeArray.length; i++) {
        if (typeArray[i] && Module['___cxa_can_catch'](typeArray[i], throwntype, thrown)) {
          thrown = HEAP32[((thrown)>>2)]; // undo indirection
          info.adjusted = thrown;
          return ((Runtime.setTempRet0(typeArray[i]),thrown)|0);
        }
      }
      // Shouldn't happen unless we have bogus data in typeArray
      // or encounter a type for which emscripten doesn't have suitable
      // typeinfo defined. Best-efforts match just in case.
      thrown = HEAP32[((thrown)>>2)]; // undo indirection
      return ((Runtime.setTempRet0(throwntype),thrown)|0);
    }function ___cxa_throw(ptr, type, destructor) {
      EXCEPTIONS.infos[ptr] = {
        ptr: ptr,
        adjusted: ptr,
        type: type,
        destructor: destructor,
        refcount: 0,
        caught: false,
        rethrown: false
      };
      EXCEPTIONS.last = ptr;
      if (!("uncaught_exception" in __ZSt18uncaught_exceptionv)) {
        __ZSt18uncaught_exceptionv.uncaught_exception = 1;
      } else {
        __ZSt18uncaught_exceptionv.uncaught_exception++;
      }
      throw ptr;
    }

   
  Module["_memset"] = _memset;

  
  function getShiftFromSize(size) {
      switch (size) {
          case 1: return 0;
          case 2: return 1;
          case 4: return 2;
          case 8: return 3;
          default:
              throw new TypeError('Unknown type size: ' + size);
      }
    }function __embind_register_bool(rawType, name, size, trueValue, falseValue) {
      var shift = getShiftFromSize(size);
  
      name = readLatin1String(name);
      registerType(rawType, {
          name: name,
          'fromWireType': function(wt) {
              // ambiguous emscripten ABI: sometimes return values are
              // true or false, and sometimes integers (0 or 1)
              return !!wt;
          },
          'toWireType': function(destructors, o) {
              return o ? trueValue : falseValue;
          },
          'argPackAdvance': 8,
          'readValueFromPointer': function(pointer) {
              // TODO: if heap is fixed (like in asm.js) this could be executed outside
              var heap;
              if (size === 1) {
                  heap = HEAP8;
              } else if (size === 2) {
                  heap = HEAP16;
              } else if (size === 4) {
                  heap = HEAP32;
              } else {
                  throw new TypeError("Unknown boolean type size: " + name);
              }
              return this['fromWireType'](heap[pointer >> shift]);
          },
          destructorFunction: null, // This type does not need a destructor
      });
    }

   
  Module["_pthread_mutex_lock"] = _pthread_mutex_lock;

  
  
  function __isLeapYear(year) {
        return year%4 === 0 && (year%100 !== 0 || year%400 === 0);
    }
  
  function __arraySum(array, index) {
      var sum = 0;
      for (var i = 0; i <= index; sum += array[i++]);
      return sum;
    }
  
  
  var __MONTH_DAYS_LEAP=[31,29,31,30,31,30,31,31,30,31,30,31];
  
  var __MONTH_DAYS_REGULAR=[31,28,31,30,31,30,31,31,30,31,30,31];function __addDays(date, days) {
      var newDate = new Date(date.getTime());
      while(days > 0) {
        var leap = __isLeapYear(newDate.getFullYear());
        var currentMonth = newDate.getMonth();
        var daysInCurrentMonth = (leap ? __MONTH_DAYS_LEAP : __MONTH_DAYS_REGULAR)[currentMonth];
  
        if (days > daysInCurrentMonth-newDate.getDate()) {
          // we spill over to next month
          days -= (daysInCurrentMonth-newDate.getDate()+1);
          newDate.setDate(1);
          if (currentMonth < 11) {
            newDate.setMonth(currentMonth+1)
          } else {
            newDate.setMonth(0);
            newDate.setFullYear(newDate.getFullYear()+1);
          }
        } else {
          // we stay in current month 
          newDate.setDate(newDate.getDate()+days);
          return newDate;
        }
      }
  
      return newDate;
    }function _strftime(s, maxsize, format, tm) {
      // size_t strftime(char *restrict s, size_t maxsize, const char *restrict format, const struct tm *restrict timeptr);
      // http://pubs.opengroup.org/onlinepubs/009695399/functions/strftime.html
  
      var tm_zone = HEAP32[(((tm)+(40))>>2)];
  
      var date = {
        tm_sec: HEAP32[((tm)>>2)],
        tm_min: HEAP32[(((tm)+(4))>>2)],
        tm_hour: HEAP32[(((tm)+(8))>>2)],
        tm_mday: HEAP32[(((tm)+(12))>>2)],
        tm_mon: HEAP32[(((tm)+(16))>>2)],
        tm_year: HEAP32[(((tm)+(20))>>2)],
        tm_wday: HEAP32[(((tm)+(24))>>2)],
        tm_yday: HEAP32[(((tm)+(28))>>2)],
        tm_isdst: HEAP32[(((tm)+(32))>>2)],
        tm_gmtoff: HEAP32[(((tm)+(36))>>2)],
        tm_zone: tm_zone ? Pointer_stringify(tm_zone) : ''
      };
  
      var pattern = Pointer_stringify(format);
  
      // expand format
      var EXPANSION_RULES_1 = {
        '%c': '%a %b %d %H:%M:%S %Y',     // Replaced by the locale's appropriate date and time representation - e.g., Mon Aug  3 14:02:01 2013
        '%D': '%m/%d/%y',                 // Equivalent to %m / %d / %y
        '%F': '%Y-%m-%d',                 // Equivalent to %Y - %m - %d
        '%h': '%b',                       // Equivalent to %b
        '%r': '%I:%M:%S %p',              // Replaced by the time in a.m. and p.m. notation
        '%R': '%H:%M',                    // Replaced by the time in 24-hour notation
        '%T': '%H:%M:%S',                 // Replaced by the time
        '%x': '%m/%d/%y',                 // Replaced by the locale's appropriate date representation
        '%X': '%H:%M:%S'                  // Replaced by the locale's appropriate date representation
      };
      for (var rule in EXPANSION_RULES_1) {
        pattern = pattern.replace(new RegExp(rule, 'g'), EXPANSION_RULES_1[rule]);
      }
  
      var WEEKDAYS = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];
      var MONTHS = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];
  
      function leadingSomething(value, digits, character) {
        var str = typeof value === 'number' ? value.toString() : (value || '');
        while (str.length < digits) {
          str = character[0]+str;
        }
        return str;
      };
  
      function leadingNulls(value, digits) {
        return leadingSomething(value, digits, '0');
      };
  
      function compareByDay(date1, date2) {
        function sgn(value) {
          return value < 0 ? -1 : (value > 0 ? 1 : 0);
        };
  
        var compare;
        if ((compare = sgn(date1.getFullYear()-date2.getFullYear())) === 0) {
          if ((compare = sgn(date1.getMonth()-date2.getMonth())) === 0) {
            compare = sgn(date1.getDate()-date2.getDate());
          }
        }
        return compare;
      };
  
      function getFirstWeekStartDate(janFourth) {
          switch (janFourth.getDay()) {
            case 0: // Sunday
              return new Date(janFourth.getFullYear()-1, 11, 29);
            case 1: // Monday
              return janFourth;
            case 2: // Tuesday
              return new Date(janFourth.getFullYear(), 0, 3);
            case 3: // Wednesday
              return new Date(janFourth.getFullYear(), 0, 2);
            case 4: // Thursday
              return new Date(janFourth.getFullYear(), 0, 1);
            case 5: // Friday
              return new Date(janFourth.getFullYear()-1, 11, 31);
            case 6: // Saturday
              return new Date(janFourth.getFullYear()-1, 11, 30);
          }
      };
  
      function getWeekBasedYear(date) {
          var thisDate = __addDays(new Date(date.tm_year+1900, 0, 1), date.tm_yday);
  
          var janFourthThisYear = new Date(thisDate.getFullYear(), 0, 4);
          var janFourthNextYear = new Date(thisDate.getFullYear()+1, 0, 4);
  
          var firstWeekStartThisYear = getFirstWeekStartDate(janFourthThisYear);
          var firstWeekStartNextYear = getFirstWeekStartDate(janFourthNextYear);
  
          if (compareByDay(firstWeekStartThisYear, thisDate) <= 0) {
            // this date is after the start of the first week of this year
            if (compareByDay(firstWeekStartNextYear, thisDate) <= 0) {
              return thisDate.getFullYear()+1;
            } else {
              return thisDate.getFullYear();
            }
          } else { 
            return thisDate.getFullYear()-1;
          }
      };
  
      var EXPANSION_RULES_2 = {
        '%a': function(date) {
          return WEEKDAYS[date.tm_wday].substring(0,3);
        },
        '%A': function(date) {
          return WEEKDAYS[date.tm_wday];
        },
        '%b': function(date) {
          return MONTHS[date.tm_mon].substring(0,3);
        },
        '%B': function(date) {
          return MONTHS[date.tm_mon];
        },
        '%C': function(date) {
          var year = date.tm_year+1900;
          return leadingNulls((year/100)|0,2);
        },
        '%d': function(date) {
          return leadingNulls(date.tm_mday, 2);
        },
        '%e': function(date) {
          return leadingSomething(date.tm_mday, 2, ' ');
        },
        '%g': function(date) {
          // %g, %G, and %V give values according to the ISO 8601:2000 standard week-based year. 
          // In this system, weeks begin on a Monday and week 1 of the year is the week that includes 
          // January 4th, which is also the week that includes the first Thursday of the year, and 
          // is also the first week that contains at least four days in the year. 
          // If the first Monday of January is the 2nd, 3rd, or 4th, the preceding days are part of 
          // the last week of the preceding year; thus, for Saturday 2nd January 1999, 
          // %G is replaced by 1998 and %V is replaced by 53. If December 29th, 30th, 
          // or 31st is a Monday, it and any following days are part of week 1 of the following year. 
          // Thus, for Tuesday 30th December 1997, %G is replaced by 1998 and %V is replaced by 01.
          
          return getWeekBasedYear(date).toString().substring(2);
        },
        '%G': function(date) {
          return getWeekBasedYear(date);
        },
        '%H': function(date) {
          return leadingNulls(date.tm_hour, 2);
        },
        '%I': function(date) {
          var twelveHour = date.tm_hour;
          if (twelveHour == 0) twelveHour = 12;
          else if (twelveHour > 12) twelveHour -= 12;
          return leadingNulls(twelveHour, 2);
        },
        '%j': function(date) {
          // Day of the year (001-366)
          return leadingNulls(date.tm_mday+__arraySum(__isLeapYear(date.tm_year+1900) ? __MONTH_DAYS_LEAP : __MONTH_DAYS_REGULAR, date.tm_mon-1), 3);
        },
        '%m': function(date) {
          return leadingNulls(date.tm_mon+1, 2);
        },
        '%M': function(date) {
          return leadingNulls(date.tm_min, 2);
        },
        '%n': function() {
          return '\n';
        },
        '%p': function(date) {
          if (date.tm_hour >= 0 && date.tm_hour < 12) {
            return 'AM';
          } else {
            return 'PM';
          }
        },
        '%S': function(date) {
          return leadingNulls(date.tm_sec, 2);
        },
        '%t': function() {
          return '\t';
        },
        '%u': function(date) {
          var day = new Date(date.tm_year+1900, date.tm_mon+1, date.tm_mday, 0, 0, 0, 0);
          return day.getDay() || 7;
        },
        '%U': function(date) {
          // Replaced by the week number of the year as a decimal number [00,53]. 
          // The first Sunday of January is the first day of week 1; 
          // days in the new year before this are in week 0. [ tm_year, tm_wday, tm_yday]
          var janFirst = new Date(date.tm_year+1900, 0, 1);
          var firstSunday = janFirst.getDay() === 0 ? janFirst : __addDays(janFirst, 7-janFirst.getDay());
          var endDate = new Date(date.tm_year+1900, date.tm_mon, date.tm_mday);
          
          // is target date after the first Sunday?
          if (compareByDay(firstSunday, endDate) < 0) {
            // calculate difference in days between first Sunday and endDate
            var februaryFirstUntilEndMonth = __arraySum(__isLeapYear(endDate.getFullYear()) ? __MONTH_DAYS_LEAP : __MONTH_DAYS_REGULAR, endDate.getMonth()-1)-31;
            var firstSundayUntilEndJanuary = 31-firstSunday.getDate();
            var days = firstSundayUntilEndJanuary+februaryFirstUntilEndMonth+endDate.getDate();
            return leadingNulls(Math.ceil(days/7), 2);
          }
  
          return compareByDay(firstSunday, janFirst) === 0 ? '01': '00';
        },
        '%V': function(date) {
          // Replaced by the week number of the year (Monday as the first day of the week) 
          // as a decimal number [01,53]. If the week containing 1 January has four 
          // or more days in the new year, then it is considered week 1. 
          // Otherwise, it is the last week of the previous year, and the next week is week 1. 
          // Both January 4th and the first Thursday of January are always in week 1. [ tm_year, tm_wday, tm_yday]
          var janFourthThisYear = new Date(date.tm_year+1900, 0, 4);
          var janFourthNextYear = new Date(date.tm_year+1901, 0, 4);
  
          var firstWeekStartThisYear = getFirstWeekStartDate(janFourthThisYear);
          var firstWeekStartNextYear = getFirstWeekStartDate(janFourthNextYear);
  
          var endDate = __addDays(new Date(date.tm_year+1900, 0, 1), date.tm_yday);
  
          if (compareByDay(endDate, firstWeekStartThisYear) < 0) {
            // if given date is before this years first week, then it belongs to the 53rd week of last year
            return '53';
          } 
  
          if (compareByDay(firstWeekStartNextYear, endDate) <= 0) {
            // if given date is after next years first week, then it belongs to the 01th week of next year
            return '01';
          }
  
          // given date is in between CW 01..53 of this calendar year
          var daysDifference;
          if (firstWeekStartThisYear.getFullYear() < date.tm_year+1900) {
            // first CW of this year starts last year
            daysDifference = date.tm_yday+32-firstWeekStartThisYear.getDate()
          } else {
            // first CW of this year starts this year
            daysDifference = date.tm_yday+1-firstWeekStartThisYear.getDate();
          }
          return leadingNulls(Math.ceil(daysDifference/7), 2);
        },
        '%w': function(date) {
          var day = new Date(date.tm_year+1900, date.tm_mon+1, date.tm_mday, 0, 0, 0, 0);
          return day.getDay();
        },
        '%W': function(date) {
          // Replaced by the week number of the year as a decimal number [00,53]. 
          // The first Monday of January is the first day of week 1; 
          // days in the new year before this are in week 0. [ tm_year, tm_wday, tm_yday]
          var janFirst = new Date(date.tm_year, 0, 1);
          var firstMonday = janFirst.getDay() === 1 ? janFirst : __addDays(janFirst, janFirst.getDay() === 0 ? 1 : 7-janFirst.getDay()+1);
          var endDate = new Date(date.tm_year+1900, date.tm_mon, date.tm_mday);
  
          // is target date after the first Monday?
          if (compareByDay(firstMonday, endDate) < 0) {
            var februaryFirstUntilEndMonth = __arraySum(__isLeapYear(endDate.getFullYear()) ? __MONTH_DAYS_LEAP : __MONTH_DAYS_REGULAR, endDate.getMonth()-1)-31;
            var firstMondayUntilEndJanuary = 31-firstMonday.getDate();
            var days = firstMondayUntilEndJanuary+februaryFirstUntilEndMonth+endDate.getDate();
            return leadingNulls(Math.ceil(days/7), 2);
          }
          return compareByDay(firstMonday, janFirst) === 0 ? '01': '00';
        },
        '%y': function(date) {
          // Replaced by the last two digits of the year as a decimal number [00,99]. [ tm_year]
          return (date.tm_year+1900).toString().substring(2);
        },
        '%Y': function(date) {
          // Replaced by the year as a decimal number (for example, 1997). [ tm_year]
          return date.tm_year+1900;
        },
        '%z': function(date) {
          // Replaced by the offset from UTC in the ISO 8601:2000 standard format ( +hhmm or -hhmm ).
          // For example, "-0430" means 4 hours 30 minutes behind UTC (west of Greenwich).
          var off = date.tm_gmtoff;
          var ahead = off >= 0;
          off = Math.abs(off) / 60;
          // convert from minutes into hhmm format (which means 60 minutes = 100 units)
          off = (off / 60)*100 + (off % 60);
          return (ahead ? '+' : '-') + String("0000" + off).slice(-4);
        },
        '%Z': function(date) {
          return date.tm_zone;
        },
        '%%': function() {
          return '%';
        }
      };
      for (var rule in EXPANSION_RULES_2) {
        if (pattern.indexOf(rule) >= 0) {
          pattern = pattern.replace(new RegExp(rule, 'g'), EXPANSION_RULES_2[rule](date));
        }
      }
  
      var bytes = intArrayFromString(pattern, false);
      if (bytes.length > maxsize) {
        return 0;
      } 
  
      writeArrayToMemory(bytes, s);
      return bytes.length-1;
    }function _strftime_l(s, maxsize, format, tm) {
      return _strftime(s, maxsize, format, tm); // no locale support yet
    }

  function _abort() {
      Module['abort']();
    }

  
  function requireFunction(signature, rawFunction) {
      signature = readLatin1String(signature);
  
      function makeDynCaller(dynCall) {
          var args = [];
          for (var i = 1; i < signature.length; ++i) {
              args.push('a' + i);
          }
  
          var name = 'dynCall_' + signature + '_' + rawFunction;
          var body = 'return function ' + name + '(' + args.join(', ') + ') {\n';
          body    += '    return dynCall(rawFunction' + (args.length ? ', ' : '') + args.join(', ') + ');\n';
          body    += '};\n';
  
          return (new Function('dynCall', 'rawFunction', body))(dynCall, rawFunction);
      }
  
      var fp;
      if (Module['FUNCTION_TABLE_' + signature] !== undefined) {
          fp = Module['FUNCTION_TABLE_' + signature][rawFunction];
      } else if (typeof FUNCTION_TABLE !== "undefined") {
          fp = FUNCTION_TABLE[rawFunction];
      } else {
          // asm.js does not give direct access to the function tables,
          // and thus we must go through the dynCall interface which allows
          // calling into a signature's function table by pointer value.
          //
          // https://github.com/dherman/asm.js/issues/83
          //
          // This has three main penalties:
          // - dynCall is another function call in the path from JavaScript to C++.
          // - JITs may not predict through the function table indirection at runtime.
          var dc = Module["asm"]['dynCall_' + signature];
          if (dc === undefined) {
              // We will always enter this branch if the signature
              // contains 'f' and PRECISE_F32 is not enabled.
              //
              // Try again, replacing 'f' with 'd'.
              dc = Module["asm"]['dynCall_' + signature.replace(/f/g, 'd')];
              if (dc === undefined) {
                  throwBindingError("No dynCall invoker for signature: " + signature);
              }
          }
          fp = makeDynCaller(dc);
      }
  
      if (typeof fp !== "function") {
          throwBindingError("unknown function pointer with signature " + signature + ": " + rawFunction);
      }
      return fp;
    }
  
  function runDestructors(destructors) {
      while (destructors.length) {
          var ptr = destructors.pop();
          var del = destructors.pop();
          del(ptr);
      }
    }
  
  
  var UnboundTypeError=undefined;
  
  
  function _free() {
  }
  Module["_free"] = _free;function getTypeName(type) {
      var ptr = ___getTypeName(type);
      var rv = readLatin1String(ptr);
      _free(ptr);
      return rv;
    }function throwUnboundTypeError(message, types) {
      var unboundTypes = [];
      var seen = {};
      function visit(type) {
          if (seen[type]) {
              return;
          }
          if (registeredTypes[type]) {
              return;
          }
          if (typeDependencies[type]) {
              typeDependencies[type].forEach(visit);
              return;
          }
          unboundTypes.push(type);
          seen[type] = true;
      }
      types.forEach(visit);
  
      throw new UnboundTypeError(message + ': ' + unboundTypes.map(getTypeName).join([', ']));
    }
  
  
  function upcastPointer(ptr, ptrClass, desiredClass) {
      while (ptrClass !== desiredClass) {
          if (!ptrClass.upcast) {
              throwBindingError("Expected null or instance of " + desiredClass.name + ", got an instance of " + ptrClass.name);
          }
          ptr = ptrClass.upcast(ptr);
          ptrClass = ptrClass.baseClass;
      }
      return ptr;
    }function validateThis(this_, classType, humanName) {
      if (!(this_ instanceof Object)) {
          throwBindingError(humanName + ' with invalid "this": ' + this_);
      }
      if (!(this_ instanceof classType.registeredClass.constructor)) {
          throwBindingError(humanName + ' incompatible with "this" of type ' + this_.constructor.name);
      }
      if (!this_.$$.ptr) {
          throwBindingError('cannot call emscripten binding method ' + humanName + ' on deleted object');
      }
  
      // todo: kill this
      return upcastPointer(
          this_.$$.ptr,
          this_.$$.ptrType.registeredClass,
          classType.registeredClass);
    }function __embind_register_class_property(
      classType,
      fieldName,
      getterReturnType,
      getterSignature,
      getter,
      getterContext,
      setterArgumentType,
      setterSignature,
      setter,
      setterContext
    ) {
      fieldName = readLatin1String(fieldName);
      getter = requireFunction(getterSignature, getter);
  
      whenDependentTypesAreResolved([], [classType], function(classType) {
          classType = classType[0];
          var humanName = classType.name + '.' + fieldName;
          var desc = {
              get: function() {
                  throwUnboundTypeError('Cannot access ' + humanName + ' due to unbound types', [getterReturnType, setterArgumentType]);
              },
              enumerable: true,
              configurable: true
          };
          if (setter) {
              desc.set = function() {
                  throwUnboundTypeError('Cannot access ' + humanName + ' due to unbound types', [getterReturnType, setterArgumentType]);
              };
          } else {
              desc.set = function(v) {
                  throwBindingError(humanName + ' is a read-only property');
              };
          }
  
          Object.defineProperty(classType.registeredClass.instancePrototype, fieldName, desc);
  
          whenDependentTypesAreResolved(
              [],
              (setter ? [getterReturnType, setterArgumentType] : [getterReturnType]),
          function(types) {
              var getterReturnType = types[0];
              var desc = {
                  get: function() {
                      var ptr = validateThis(this, classType, humanName + ' getter');
                      return getterReturnType['fromWireType'](getter(getterContext, ptr));
                  },
                  enumerable: true
              };
  
              if (setter) {
                  setter = requireFunction(setterSignature, setter);
                  var setterArgumentType = types[1];
                  desc.set = function(v) {
                      var ptr = validateThis(this, classType, humanName + ' setter');
                      var destructors = [];
                      setter(setterContext, ptr, setterArgumentType['toWireType'](destructors, v));
                      runDestructors(destructors);
                  };
              }
  
              Object.defineProperty(classType.registeredClass.instancePrototype, fieldName, desc);
              return [];
          });
  
          return [];
      });
    }

  
  function _malloc(bytes) {
      /* Over-allocate to make sure it is byte-aligned by 8.
       * This will leak memory, but this is only the dummy
       * implementation (replaced by dlmalloc normally) so
       * not an issue.
       */
      var ptr = Runtime.dynamicAlloc(bytes + 8);
      return (ptr+8) & 0xFFFFFFF8;
    }
  Module["_malloc"] = _malloc;
  
  function simpleReadValueFromPointer(pointer) {
      return this['fromWireType'](HEAPU32[pointer >> 2]);
    }function __embind_register_std_string(rawType, name) {
      name = readLatin1String(name);
      registerType(rawType, {
          name: name,
          'fromWireType': function(value) {
              var length = HEAPU32[value >> 2];
              var a = new Array(length);
              for (var i = 0; i < length; ++i) {
                  a[i] = String.fromCharCode(HEAPU8[value + 4 + i]);
              }
              _free(value);
              return a.join('');
          },
          'toWireType': function(destructors, value) {
              if (value instanceof ArrayBuffer) {
                  value = new Uint8Array(value);
              }
  
              function getTAElement(ta, index) {
                  return ta[index];
              }
              function getStringElement(string, index) {
                  return string.charCodeAt(index);
              }
              var getElement;
              if (value instanceof Uint8Array) {
                  getElement = getTAElement;
              } else if (value instanceof Uint8ClampedArray) {
                  getElement = getTAElement;
              } else if (value instanceof Int8Array) {
                  getElement = getTAElement;
              } else if (typeof value === 'string') {
                  getElement = getStringElement;
              } else {
                  throwBindingError('Cannot pass non-string to std::string');
              }
  
              // assumes 4-byte alignment
              var length = value.length;
              var ptr = _malloc(4 + length);
              HEAPU32[ptr >> 2] = length;
              for (var i = 0; i < length; ++i) {
                  var charCode = getElement(value, i);
                  if (charCode > 255) {
                      _free(ptr);
                      throwBindingError('String has UTF-16 code units that do not fit in 8 bits');
                  }
                  HEAPU8[ptr + 4 + i] = charCode;
              }
              if (destructors !== null) {
                  destructors.push(_free, ptr);
              }
              return ptr;
          },
          'argPackAdvance': 8,
          'readValueFromPointer': simpleReadValueFromPointer,
          destructorFunction: function(ptr) { _free(ptr); },
      });
    }

  function ___cxa_free_exception(ptr) {
      try {
        return _free(ptr);
      } catch(e) { // XXX FIXME
        Module.printErr('exception during cxa_free_exception: ' + e);
      }
    }

  function _pthread_once(ptr, func) {
      if (!_pthread_once.seen) _pthread_once.seen = {};
      if (ptr in _pthread_once.seen) return;
      Module['dynCall_v'](func);
      _pthread_once.seen[ptr] = 1;
    }

  
  
  
  function ClassHandle_isAliasOf(other) {
      if (!(this instanceof ClassHandle)) {
          return false;
      }
      if (!(other instanceof ClassHandle)) {
          return false;
      }
  
      var leftClass = this.$$.ptrType.registeredClass;
      var left = this.$$.ptr;
      var rightClass = other.$$.ptrType.registeredClass;
      var right = other.$$.ptr;
  
      while (leftClass.baseClass) {
          left = leftClass.upcast(left);
          leftClass = leftClass.baseClass;
      }
  
      while (rightClass.baseClass) {
          right = rightClass.upcast(right);
          rightClass = rightClass.baseClass;
      }
  
      return leftClass === rightClass && left === right;
    }
  
  
  function shallowCopyInternalPointer(o) {
      return {
          count: o.count,
          deleteScheduled: o.deleteScheduled,
          preservePointerOnDelete: o.preservePointerOnDelete,
          ptr: o.ptr,
          ptrType: o.ptrType,
          smartPtr: o.smartPtr,
          smartPtrType: o.smartPtrType,
      };
    }
  
  function throwInstanceAlreadyDeleted(obj) {
      function getInstanceTypeName(handle) {
        return handle.$$.ptrType.registeredClass.name;
      }
      throwBindingError(getInstanceTypeName(obj) + ' instance already deleted');
    }function ClassHandle_clone() {
      if (!this.$$.ptr) {
          throwInstanceAlreadyDeleted(this);
      }
  
      if (this.$$.preservePointerOnDelete) {
          this.$$.count.value += 1;
          return this;
      } else {
          var clone = Object.create(Object.getPrototypeOf(this), {
              $$: {
                  value: shallowCopyInternalPointer(this.$$),
              }
          });
  
          clone.$$.count.value += 1;
          clone.$$.deleteScheduled = false;
          return clone;
      }
    }
  
  
  function runDestructor(handle) {
      var $$ = handle.$$;
      if ($$.smartPtr) {
          $$.smartPtrType.rawDestructor($$.smartPtr);
      } else {
          $$.ptrType.registeredClass.rawDestructor($$.ptr);
      }
    }function ClassHandle_delete() {
      if (!this.$$.ptr) {
          throwInstanceAlreadyDeleted(this);
      }
  
      if (this.$$.deleteScheduled && !this.$$.preservePointerOnDelete) {
          throwBindingError('Object already scheduled for deletion');
      }
  
      this.$$.count.value -= 1;
      var toDelete = 0 === this.$$.count.value;
      if (toDelete) {
          runDestructor(this);
      }
      if (!this.$$.preservePointerOnDelete) {
          this.$$.smartPtr = undefined;
          this.$$.ptr = undefined;
      }
    }
  
  function ClassHandle_isDeleted() {
      return !this.$$.ptr;
    }
  
  
  var delayFunction=undefined;
  
  var deletionQueue=[];
  
  function flushPendingDeletes() {
      while (deletionQueue.length) {
          var obj = deletionQueue.pop();
          obj.$$.deleteScheduled = false;
          obj['delete']();
      }
    }function ClassHandle_deleteLater() {
      if (!this.$$.ptr) {
          throwInstanceAlreadyDeleted(this);
      }
      if (this.$$.deleteScheduled && !this.$$.preservePointerOnDelete) {
          throwBindingError('Object already scheduled for deletion');
      }
      deletionQueue.push(this);
      if (deletionQueue.length === 1 && delayFunction) {
          delayFunction(flushPendingDeletes);
      }
      this.$$.deleteScheduled = true;
      return this;
    }function init_ClassHandle() {
      ClassHandle.prototype['isAliasOf'] = ClassHandle_isAliasOf;
      ClassHandle.prototype['clone'] = ClassHandle_clone;
      ClassHandle.prototype['delete'] = ClassHandle_delete;
      ClassHandle.prototype['isDeleted'] = ClassHandle_isDeleted;
      ClassHandle.prototype['deleteLater'] = ClassHandle_deleteLater;
    }function ClassHandle() {
    }
  
  var registeredPointers={};
  
  
  function ensureOverloadTable(proto, methodName, humanName) {
      if (undefined === proto[methodName].overloadTable) {
          var prevFunc = proto[methodName];
          // Inject an overload resolver function that routes to the appropriate overload based on the number of arguments.
          proto[methodName] = function() {
              // TODO This check can be removed in -O3 level "unsafe" optimizations.
              if (!proto[methodName].overloadTable.hasOwnProperty(arguments.length)) {
                  throwBindingError("Function '" + humanName + "' called with an invalid number of arguments (" + arguments.length + ") - expects one of (" + proto[methodName].overloadTable + ")!");
              }
              return proto[methodName].overloadTable[arguments.length].apply(this, arguments);
          };
          // Move the previous function into the overload table.
          proto[methodName].overloadTable = [];
          proto[methodName].overloadTable[prevFunc.argCount] = prevFunc;
      }
    }function exposePublicSymbol(name, value, numArguments) {
      if (Module.hasOwnProperty(name)) {
          if (undefined === numArguments || (undefined !== Module[name].overloadTable && undefined !== Module[name].overloadTable[numArguments])) {
              throwBindingError("Cannot register public name '" + name + "' twice");
          }
  
          // We are exposing a function with the same name as an existing function. Create an overload table and a function selector
          // that routes between the two.
          ensureOverloadTable(Module, name, name);
          if (Module.hasOwnProperty(numArguments)) {
              throwBindingError("Cannot register multiple overloads of a function with the same number of arguments (" + numArguments + ")!");
          }
          // Add the new function into the overload table.
          Module[name].overloadTable[numArguments] = value;
      }
      else {
          Module[name] = value;
          if (undefined !== numArguments) {
              Module[name].numArguments = numArguments;
          }
      }
    }
  
  function RegisteredClass(
      name,
      constructor,
      instancePrototype,
      rawDestructor,
      baseClass,
      getActualType,
      upcast,
      downcast
    ) {
      this.name = name;
      this.constructor = constructor;
      this.instancePrototype = instancePrototype;
      this.rawDestructor = rawDestructor;
      this.baseClass = baseClass;
      this.getActualType = getActualType;
      this.upcast = upcast;
      this.downcast = downcast;
      this.pureVirtualFunctions = [];
    }
  
  
  function constNoSmartPtrRawPointerToWireType(destructors, handle) {
      if (handle === null) {
          if (this.isReference) {
              throwBindingError('null is not a valid ' + this.name);
          }
          return 0;
      }
  
      if (!handle.$$) {
          throwBindingError('Cannot pass "' + _embind_repr(handle) + '" as a ' + this.name);
      }
      if (!handle.$$.ptr) {
          throwBindingError('Cannot pass deleted object as a pointer of type ' + this.name);
      }
      var handleClass = handle.$$.ptrType.registeredClass;
      var ptr = upcastPointer(handle.$$.ptr, handleClass, this.registeredClass);
      return ptr;
    }
  
  function genericPointerToWireType(destructors, handle) {
      if (handle === null) {
          if (this.isReference) {
              throwBindingError('null is not a valid ' + this.name);
          }
  
          if (this.isSmartPointer) {
              var ptr = this.rawConstructor();
              if (destructors !== null) {
                  destructors.push(this.rawDestructor, ptr);
              }
              return ptr;
          } else {
              return 0;
          }
      }
  
      if (!handle.$$) {
          throwBindingError('Cannot pass "' + _embind_repr(handle) + '" as a ' + this.name);
      }
      if (!handle.$$.ptr) {
          throwBindingError('Cannot pass deleted object as a pointer of type ' + this.name);
      }
      if (!this.isConst && handle.$$.ptrType.isConst) {
          throwBindingError('Cannot convert argument of type ' + (handle.$$.smartPtrType ? handle.$$.smartPtrType.name : handle.$$.ptrType.name) + ' to parameter type ' + this.name);
      }
      var handleClass = handle.$$.ptrType.registeredClass;
      var ptr = upcastPointer(handle.$$.ptr, handleClass, this.registeredClass);
  
      if (this.isSmartPointer) {
          // TODO: this is not strictly true
          // We could support BY_EMVAL conversions from raw pointers to smart pointers
          // because the smart pointer can hold a reference to the handle
          if (undefined === handle.$$.smartPtr) {
              throwBindingError('Passing raw pointer to smart pointer is illegal');
          }
  
          switch (this.sharingPolicy) {
              case 0: // NONE
                  // no upcasting
                  if (handle.$$.smartPtrType === this) {
                      ptr = handle.$$.smartPtr;
                  } else {
                      throwBindingError('Cannot convert argument of type ' + (handle.$$.smartPtrType ? handle.$$.smartPtrType.name : handle.$$.ptrType.name) + ' to parameter type ' + this.name);
                  }
                  break;
  
              case 1: // INTRUSIVE
                  ptr = handle.$$.smartPtr;
                  break;
  
              case 2: // BY_EMVAL
                  if (handle.$$.smartPtrType === this) {
                      ptr = handle.$$.smartPtr;
                  } else {
                      var clonedHandle = handle['clone']();
                      ptr = this.rawShare(
                          ptr,
                          __emval_register(function() {
                              clonedHandle['delete']();
                          })
                      );
                      if (destructors !== null) {
                          destructors.push(this.rawDestructor, ptr);
                      }
                  }
                  break;
  
              default:
                  throwBindingError('Unsupporting sharing policy');
          }
      }
      return ptr;
    }
  
  function nonConstNoSmartPtrRawPointerToWireType(destructors, handle) {
      if (handle === null) {
          if (this.isReference) {
              throwBindingError('null is not a valid ' + this.name);
          }
          return 0;
      }
  
      if (!handle.$$) {
          throwBindingError('Cannot pass "' + _embind_repr(handle) + '" as a ' + this.name);
      }
      if (!handle.$$.ptr) {
          throwBindingError('Cannot pass deleted object as a pointer of type ' + this.name);
      }
      if (handle.$$.ptrType.isConst) {
          throwBindingError('Cannot convert argument of type ' + handle.$$.ptrType.name + ' to parameter type ' + this.name);
      }
      var handleClass = handle.$$.ptrType.registeredClass;
      var ptr = upcastPointer(handle.$$.ptr, handleClass, this.registeredClass);
      return ptr;
    }
  
  
  function RegisteredPointer_getPointee(ptr) {
      if (this.rawGetPointee) {
          ptr = this.rawGetPointee(ptr);
      }
      return ptr;
    }
  
  function RegisteredPointer_destructor(ptr) {
      if (this.rawDestructor) {
          this.rawDestructor(ptr);
      }
    }
  
  function RegisteredPointer_deleteObject(handle) {
      if (handle !== null) {
          handle['delete']();
      }
    }
  
  
  function downcastPointer(ptr, ptrClass, desiredClass) {
      if (ptrClass === desiredClass) {
          return ptr;
      }
      if (undefined === desiredClass.baseClass) {
          return null; // no conversion
      }
  
      var rv = downcastPointer(ptr, ptrClass, desiredClass.baseClass);
      if (rv === null) {
          return null;
      }
      return desiredClass.downcast(rv);
    }
  
  
  
  
  function getInheritedInstanceCount() {
      return Object.keys(registeredInstances).length;
    }
  
  function getLiveInheritedInstances() {
      var rv = [];
      for (var k in registeredInstances) {
          if (registeredInstances.hasOwnProperty(k)) {
              rv.push(registeredInstances[k]);
          }
      }
      return rv;
    }
  
  function setDelayFunction(fn) {
      delayFunction = fn;
      if (deletionQueue.length && delayFunction) {
          delayFunction(flushPendingDeletes);
      }
    }function init_embind() {
      Module['getInheritedInstanceCount'] = getInheritedInstanceCount;
      Module['getLiveInheritedInstances'] = getLiveInheritedInstances;
      Module['flushPendingDeletes'] = flushPendingDeletes;
      Module['setDelayFunction'] = setDelayFunction;
    }var registeredInstances={};
  
  function getBasestPointer(class_, ptr) {
      if (ptr === undefined) {
          throwBindingError('ptr should not be undefined');
      }
      while (class_.baseClass) {
          ptr = class_.upcast(ptr);
          class_ = class_.baseClass;
      }
      return ptr;
    }function getInheritedInstance(class_, ptr) {
      ptr = getBasestPointer(class_, ptr);
      return registeredInstances[ptr];
    }
  
  function makeClassHandle(prototype, record) {
      if (!record.ptrType || !record.ptr) {
          throwInternalError('makeClassHandle requires ptr and ptrType');
      }
      var hasSmartPtrType = !!record.smartPtrType;
      var hasSmartPtr = !!record.smartPtr;
      if (hasSmartPtrType !== hasSmartPtr) {
          throwInternalError('Both smartPtrType and smartPtr must be specified');
      }
      record.count = { value: 1 };
      return Object.create(prototype, {
          $$: {
              value: record,
          },
      });
    }function RegisteredPointer_fromWireType(ptr) {
      // ptr is a raw pointer (or a raw smartpointer)
  
      // rawPointer is a maybe-null raw pointer
      var rawPointer = this.getPointee(ptr);
      if (!rawPointer) {
          this.destructor(ptr);
          return null;
      }
  
      var registeredInstance = getInheritedInstance(this.registeredClass, rawPointer);
      if (undefined !== registeredInstance) {
          // JS object has been neutered, time to repopulate it
          if (0 === registeredInstance.$$.count.value) {
              registeredInstance.$$.ptr = rawPointer;
              registeredInstance.$$.smartPtr = ptr;
              return registeredInstance['clone']();
          } else {
              // else, just increment reference count on existing object
              // it already has a reference to the smart pointer
              var rv = registeredInstance['clone']();
              this.destructor(ptr);
              return rv;
          }
      }
  
      function makeDefaultHandle() {
          if (this.isSmartPointer) {
              return makeClassHandle(this.registeredClass.instancePrototype, {
                  ptrType: this.pointeeType,
                  ptr: rawPointer,
                  smartPtrType: this,
                  smartPtr: ptr,
              });
          } else {
              return makeClassHandle(this.registeredClass.instancePrototype, {
                  ptrType: this,
                  ptr: ptr,
              });
          }
      }
  
      var actualType = this.registeredClass.getActualType(rawPointer);
      var registeredPointerRecord = registeredPointers[actualType];
      if (!registeredPointerRecord) {
          return makeDefaultHandle.call(this);
      }
  
      var toType;
      if (this.isConst) {
          toType = registeredPointerRecord.constPointerType;
      } else {
          toType = registeredPointerRecord.pointerType;
      }
      var dp = downcastPointer(
          rawPointer,
          this.registeredClass,
          toType.registeredClass);
      if (dp === null) {
          return makeDefaultHandle.call(this);
      }
      if (this.isSmartPointer) {
          return makeClassHandle(toType.registeredClass.instancePrototype, {
              ptrType: toType,
              ptr: dp,
              smartPtrType: this,
              smartPtr: ptr,
          });
      } else {
          return makeClassHandle(toType.registeredClass.instancePrototype, {
              ptrType: toType,
              ptr: dp,
          });
      }
    }function init_RegisteredPointer() {
      RegisteredPointer.prototype.getPointee = RegisteredPointer_getPointee;
      RegisteredPointer.prototype.destructor = RegisteredPointer_destructor;
      RegisteredPointer.prototype['argPackAdvance'] = 8;
      RegisteredPointer.prototype['readValueFromPointer'] = simpleReadValueFromPointer;
      RegisteredPointer.prototype['deleteObject'] = RegisteredPointer_deleteObject;
      RegisteredPointer.prototype['fromWireType'] = RegisteredPointer_fromWireType;
    }function RegisteredPointer(
      name,
      registeredClass,
      isReference,
      isConst,
  
      // smart pointer properties
      isSmartPointer,
      pointeeType,
      sharingPolicy,
      rawGetPointee,
      rawConstructor,
      rawShare,
      rawDestructor
    ) {
      this.name = name;
      this.registeredClass = registeredClass;
      this.isReference = isReference;
      this.isConst = isConst;
  
      // smart pointer properties
      this.isSmartPointer = isSmartPointer;
      this.pointeeType = pointeeType;
      this.sharingPolicy = sharingPolicy;
      this.rawGetPointee = rawGetPointee;
      this.rawConstructor = rawConstructor;
      this.rawShare = rawShare;
      this.rawDestructor = rawDestructor;
  
      if (!isSmartPointer && registeredClass.baseClass === undefined) {
          if (isConst) {
              this['toWireType'] = constNoSmartPtrRawPointerToWireType;
              this.destructorFunction = null;
          } else {
              this['toWireType'] = nonConstNoSmartPtrRawPointerToWireType;
              this.destructorFunction = null;
          }
      } else {
          this['toWireType'] = genericPointerToWireType;
          // Here we must leave this.destructorFunction undefined, since whether genericPointerToWireType returns
          // a pointer that needs to be freed up is runtime-dependent, and cannot be evaluated at registration time.
          // TODO: Create an alternative mechanism that allows removing the use of var destructors = []; array in
          //       craftInvokerFunction altogether.
      }
    }
  
  function replacePublicSymbol(name, value, numArguments) {
      if (!Module.hasOwnProperty(name)) {
          throwInternalError('Replacing nonexistant public symbol');
      }
      // If there's an overload table for this symbol, replace the symbol in the overload table instead.
      if (undefined !== Module[name].overloadTable && undefined !== numArguments) {
          Module[name].overloadTable[numArguments] = value;
      }
      else {
          Module[name] = value;
          Module[name].argCount = numArguments;
      }
    }function __embind_register_class(
      rawType,
      rawPointerType,
      rawConstPointerType,
      baseClassRawType,
      getActualTypeSignature,
      getActualType,
      upcastSignature,
      upcast,
      downcastSignature,
      downcast,
      name,
      destructorSignature,
      rawDestructor
    ) {
      name = readLatin1String(name);
      getActualType = requireFunction(getActualTypeSignature, getActualType);
      if (upcast) {
          upcast = requireFunction(upcastSignature, upcast);
      }
      if (downcast) {
          downcast = requireFunction(downcastSignature, downcast);
      }
      rawDestructor = requireFunction(destructorSignature, rawDestructor);
      var legalFunctionName = makeLegalFunctionName(name);
  
      exposePublicSymbol(legalFunctionName, function() {
          // this code cannot run if baseClassRawType is zero
          throwUnboundTypeError('Cannot construct ' + name + ' due to unbound types', [baseClassRawType]);
      });
  
      whenDependentTypesAreResolved(
          [rawType, rawPointerType, rawConstPointerType],
          baseClassRawType ? [baseClassRawType] : [],
          function(base) {
              base = base[0];
  
              var baseClass;
              var basePrototype;
              if (baseClassRawType) {
                  baseClass = base.registeredClass;
                  basePrototype = baseClass.instancePrototype;
              } else {
                  basePrototype = ClassHandle.prototype;
              }
  
              var constructor = createNamedFunction(legalFunctionName, function() {
                  if (Object.getPrototypeOf(this) !== instancePrototype) {
                      throw new BindingError("Use 'new' to construct " + name);
                  }
                  if (undefined === registeredClass.constructor_body) {
                      throw new BindingError(name + " has no accessible constructor");
                  }
                  var body = registeredClass.constructor_body[arguments.length];
                  if (undefined === body) {
                      throw new BindingError("Tried to invoke ctor of " + name + " with invalid number of parameters (" + arguments.length + ") - expected (" + Object.keys(registeredClass.constructor_body).toString() + ") parameters instead!");
                  }
                  return body.apply(this, arguments);
              });
  
              var instancePrototype = Object.create(basePrototype, {
                  constructor: { value: constructor },
              });
  
              constructor.prototype = instancePrototype;
  
              var registeredClass = new RegisteredClass(
                  name,
                  constructor,
                  instancePrototype,
                  rawDestructor,
                  baseClass,
                  getActualType,
                  upcast,
                  downcast);
  
              var referenceConverter = new RegisteredPointer(
                  name,
                  registeredClass,
                  true,
                  false,
                  false);
  
              var pointerConverter = new RegisteredPointer(
                  name + '*',
                  registeredClass,
                  false,
                  false,
                  false);
  
              var constPointerConverter = new RegisteredPointer(
                  name + ' const*',
                  registeredClass,
                  false,
                  true,
                  false);
  
              registeredPointers[rawType] = {
                  pointerType: pointerConverter,
                  constPointerType: constPointerConverter
              };
  
              replacePublicSymbol(legalFunctionName, constructor);
  
              return [referenceConverter, pointerConverter, constPointerConverter];
          }
      );
    }

  function ___lock() {}

  function ___unlock() {}

  function ___cxa_end_catch() {
      // Clear state flag.
      Module['setThrew'](0);
      // Call destructor if one is registered then clear it.
      var ptr = EXCEPTIONS.caught.pop();
      if (ptr) {
        EXCEPTIONS.decRef(EXCEPTIONS.deAdjust(ptr));
        EXCEPTIONS.last = 0; // XXX in decRef?
      }
    }

  
  var PTHREAD_SPECIFIC={};function _pthread_getspecific(key) {
      return PTHREAD_SPECIFIC[key] || 0;
    }

  
  var PTHREAD_SPECIFIC_NEXT_KEY=1;
  
  var ERRNO_CODES={EPERM:1,ENOENT:2,ESRCH:3,EINTR:4,EIO:5,ENXIO:6,E2BIG:7,ENOEXEC:8,EBADF:9,ECHILD:10,EAGAIN:11,EWOULDBLOCK:11,ENOMEM:12,EACCES:13,EFAULT:14,ENOTBLK:15,EBUSY:16,EEXIST:17,EXDEV:18,ENODEV:19,ENOTDIR:20,EISDIR:21,EINVAL:22,ENFILE:23,EMFILE:24,ENOTTY:25,ETXTBSY:26,EFBIG:27,ENOSPC:28,ESPIPE:29,EROFS:30,EMLINK:31,EPIPE:32,EDOM:33,ERANGE:34,ENOMSG:42,EIDRM:43,ECHRNG:44,EL2NSYNC:45,EL3HLT:46,EL3RST:47,ELNRNG:48,EUNATCH:49,ENOCSI:50,EL2HLT:51,EDEADLK:35,ENOLCK:37,EBADE:52,EBADR:53,EXFULL:54,ENOANO:55,EBADRQC:56,EBADSLT:57,EDEADLOCK:35,EBFONT:59,ENOSTR:60,ENODATA:61,ETIME:62,ENOSR:63,ENONET:64,ENOPKG:65,EREMOTE:66,ENOLINK:67,EADV:68,ESRMNT:69,ECOMM:70,EPROTO:71,EMULTIHOP:72,EDOTDOT:73,EBADMSG:74,ENOTUNIQ:76,EBADFD:77,EREMCHG:78,ELIBACC:79,ELIBBAD:80,ELIBSCN:81,ELIBMAX:82,ELIBEXEC:83,ENOSYS:38,ENOTEMPTY:39,ENAMETOOLONG:36,ELOOP:40,EOPNOTSUPP:95,EPFNOSUPPORT:96,ECONNRESET:104,ENOBUFS:105,EAFNOSUPPORT:97,EPROTOTYPE:91,ENOTSOCK:88,ENOPROTOOPT:92,ESHUTDOWN:108,ECONNREFUSED:111,EADDRINUSE:98,ECONNABORTED:103,ENETUNREACH:101,ENETDOWN:100,ETIMEDOUT:110,EHOSTDOWN:112,EHOSTUNREACH:113,EINPROGRESS:115,EALREADY:114,EDESTADDRREQ:89,EMSGSIZE:90,EPROTONOSUPPORT:93,ESOCKTNOSUPPORT:94,EADDRNOTAVAIL:99,ENETRESET:102,EISCONN:106,ENOTCONN:107,ETOOMANYREFS:109,EUSERS:87,EDQUOT:122,ESTALE:116,ENOTSUP:95,ENOMEDIUM:123,EILSEQ:84,EOVERFLOW:75,ECANCELED:125,ENOTRECOVERABLE:131,EOWNERDEAD:130,ESTRPIPE:86};function _pthread_key_create(key, destructor) {
      if (key == 0) {
        return ERRNO_CODES.EINVAL;
      }
      HEAP32[((key)>>2)]=PTHREAD_SPECIFIC_NEXT_KEY;
      // values start at 0
      PTHREAD_SPECIFIC[PTHREAD_SPECIFIC_NEXT_KEY] = 0;
      PTHREAD_SPECIFIC_NEXT_KEY++;
      return 0;
    }

  
  function _embind_repr(v) {
      if (v === null) {
          return 'null';
      }
      var t = typeof v;
      if (t === 'object' || t === 'array' || t === 'function') {
          return v.toString();
      } else {
          return '' + v;
      }
    }
  
  function integerReadValueFromPointer(name, shift, signed) {
      // integers are quite common, so generate very specialized functions
      switch (shift) {
          case 0: return signed ?
              function readS8FromPointer(pointer) { return HEAP8[pointer]; } :
              function readU8FromPointer(pointer) { return HEAPU8[pointer]; };
          case 1: return signed ?
              function readS16FromPointer(pointer) { return HEAP16[pointer >> 1]; } :
              function readU16FromPointer(pointer) { return HEAPU16[pointer >> 1]; };
          case 2: return signed ?
              function readS32FromPointer(pointer) { return HEAP32[pointer >> 2]; } :
              function readU32FromPointer(pointer) { return HEAPU32[pointer >> 2]; };
          default:
              throw new TypeError("Unknown integer type: " + name);
      }
    }function __embind_register_integer(primitiveType, name, size, minRange, maxRange) {
      name = readLatin1String(name);
      if (maxRange === -1) { // LLVM doesn't have signed and unsigned 32-bit types, so u32 literals come out as 'i32 -1'. Always treat those as max u32.
          maxRange = 4294967295;
      }
  
      var shift = getShiftFromSize(size);
      
      var fromWireType = function(value) {
          return value;
      };
      
      if (minRange === 0) {
          var bitshift = 32 - 8*size;
          fromWireType = function(value) {
              return (value << bitshift) >>> bitshift;
          };
      }
  
      registerType(primitiveType, {
          name: name,
          'fromWireType': fromWireType,
          'toWireType': function(destructors, value) {
              // todo: Here we have an opportunity for -O3 level "unsafe" optimizations: we could
              // avoid the following two if()s and assume value is of proper type.
              if (typeof value !== "number" && typeof value !== "boolean") {
                  throw new TypeError('Cannot convert "' + _embind_repr(value) + '" to ' + this.name);
              }
              if (value < minRange || value > maxRange) {
                  throw new TypeError('Passing a number "' + _embind_repr(value) + '" from JS side to C/C++ side to an argument of type "' + name + '", which is outside the valid range [' + minRange + ', ' + maxRange + ']!');
              }
              return value | 0;
          },
          'argPackAdvance': 8,
          'readValueFromPointer': integerReadValueFromPointer(name, shift, minRange !== 0),
          destructorFunction: null, // This type does not need a destructor
      });
    }

  
  
  var emval_free_list=[];
  
  var emval_handle_array=[{},{value:undefined},{value:null},{value:true},{value:false}];function __emval_decref(handle) {
      if (handle > 4 && 0 === --emval_handle_array[handle].refcount) {
          emval_handle_array[handle] = undefined;
          emval_free_list.push(handle);
      }
    }
  
  
  
  function count_emval_handles() {
      var count = 0;
      for (var i = 5; i < emval_handle_array.length; ++i) {
          if (emval_handle_array[i] !== undefined) {
              ++count;
          }
      }
      return count;
    }
  
  function get_first_emval() {
      for (var i = 5; i < emval_handle_array.length; ++i) {
          if (emval_handle_array[i] !== undefined) {
              return emval_handle_array[i];
          }
      }
      return null;
    }function init_emval() {
      Module['count_emval_handles'] = count_emval_handles;
      Module['get_first_emval'] = get_first_emval;
    }function __emval_register(value) {
  
      switch(value){
        case undefined :{ return 1; }
        case null :{ return 2; }
        case true :{ return 3; }
        case false :{ return 4; }
        default:{
          var handle = emval_free_list.length ?
              emval_free_list.pop() :
              emval_handle_array.length;
  
          emval_handle_array[handle] = {refcount: 1, value: value};
          return handle;
          }
        }
    }function __embind_register_emval(rawType, name) {
      name = readLatin1String(name);
      registerType(rawType, {
          name: name,
          'fromWireType': function(handle) {
              var rv = emval_handle_array[handle].value;
              __emval_decref(handle);
              return rv;
          },
          'toWireType': function(destructors, value) {
              return __emval_register(value);
          },
          'argPackAdvance': 8,
          'readValueFromPointer': simpleReadValueFromPointer,
          destructorFunction: null, // This type does not need a destructor
  
          // TODO: do we need a deleteObject here?  write a test where
          // emval is passed into JS via an interface
      });
    }

  function _pthread_setspecific(key, value) {
      if (!(key in PTHREAD_SPECIFIC)) {
        return ERRNO_CODES.EINVAL;
      }
      PTHREAD_SPECIFIC[key] = value;
      return 0;
    }

  
  
  
  var ERRNO_MESSAGES={0:"Success",1:"Not super-user",2:"No such file or directory",3:"No such process",4:"Interrupted system call",5:"I/O error",6:"No such device or address",7:"Arg list too long",8:"Exec format error",9:"Bad file number",10:"No children",11:"No more processes",12:"Not enough core",13:"Permission denied",14:"Bad address",15:"Block device required",16:"Mount device busy",17:"File exists",18:"Cross-device link",19:"No such device",20:"Not a directory",21:"Is a directory",22:"Invalid argument",23:"Too many open files in system",24:"Too many open files",25:"Not a typewriter",26:"Text file busy",27:"File too large",28:"No space left on device",29:"Illegal seek",30:"Read only file system",31:"Too many links",32:"Broken pipe",33:"Math arg out of domain of func",34:"Math result not representable",35:"File locking deadlock error",36:"File or path name too long",37:"No record locks available",38:"Function not implemented",39:"Directory not empty",40:"Too many symbolic links",42:"No message of desired type",43:"Identifier removed",44:"Channel number out of range",45:"Level 2 not synchronized",46:"Level 3 halted",47:"Level 3 reset",48:"Link number out of range",49:"Protocol driver not attached",50:"No CSI structure available",51:"Level 2 halted",52:"Invalid exchange",53:"Invalid request descriptor",54:"Exchange full",55:"No anode",56:"Invalid request code",57:"Invalid slot",59:"Bad font file fmt",60:"Device not a stream",61:"No data (for no delay io)",62:"Timer expired",63:"Out of streams resources",64:"Machine is not on the network",65:"Package not installed",66:"The object is remote",67:"The link has been severed",68:"Advertise error",69:"Srmount error",70:"Communication error on send",71:"Protocol error",72:"Multihop attempted",73:"Cross mount point (not really error)",74:"Trying to read unreadable message",75:"Value too large for defined data type",76:"Given log. name not unique",77:"f.d. invalid for this operation",78:"Remote address changed",79:"Can   access a needed shared lib",80:"Accessing a corrupted shared lib",81:".lib section in a.out corrupted",82:"Attempting to link in too many libs",83:"Attempting to exec a shared library",84:"Illegal byte sequence",86:"Streams pipe error",87:"Too many users",88:"Socket operation on non-socket",89:"Destination address required",90:"Message too long",91:"Protocol wrong type for socket",92:"Protocol not available",93:"Unknown protocol",94:"Socket type not supported",95:"Not supported",96:"Protocol family not supported",97:"Address family not supported by protocol family",98:"Address already in use",99:"Address not available",100:"Network interface is not configured",101:"Network is unreachable",102:"Connection reset by network",103:"Connection aborted",104:"Connection reset by peer",105:"No buffer space available",106:"Socket is already connected",107:"Socket is not connected",108:"Can't send after socket shutdown",109:"Too many references",110:"Connection timed out",111:"Connection refused",112:"Host is down",113:"Host is unreachable",114:"Socket already connected",115:"Connection already in progress",116:"Stale file handle",122:"Quota exceeded",123:"No medium (in tape drive)",125:"Operation canceled",130:"Previous owner died",131:"State not recoverable"};
  
  function ___setErrNo(value) {
      if (Module['___errno_location']) HEAP32[((Module['___errno_location']())>>2)]=value;
      else Module.printErr('failed to set errno from JS');
      return value;
    }
  
  var PATH={splitPath:function (filename) {
        var splitPathRe = /^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/;
        return splitPathRe.exec(filename).slice(1);
      },normalizeArray:function (parts, allowAboveRoot) {
        // if the path tries to go above the root, `up` ends up > 0
        var up = 0;
        for (var i = parts.length - 1; i >= 0; i--) {
          var last = parts[i];
          if (last === '.') {
            parts.splice(i, 1);
          } else if (last === '..') {
            parts.splice(i, 1);
            up++;
          } else if (up) {
            parts.splice(i, 1);
            up--;
          }
        }
        // if the path is allowed to go above the root, restore leading ..s
        if (allowAboveRoot) {
          for (; up--; up) {
            parts.unshift('..');
          }
        }
        return parts;
      },normalize:function (path) {
        var isAbsolute = path.charAt(0) === '/',
            trailingSlash = path.substr(-1) === '/';
        // Normalize the path
        path = PATH.normalizeArray(path.split('/').filter(function(p) {
          return !!p;
        }), !isAbsolute).join('/');
        if (!path && !isAbsolute) {
          path = '.';
        }
        if (path && trailingSlash) {
          path += '/';
        }
        return (isAbsolute ? '/' : '') + path;
      },dirname:function (path) {
        var result = PATH.splitPath(path),
            root = result[0],
            dir = result[1];
        if (!root && !dir) {
          // No dirname whatsoever
          return '.';
        }
        if (dir) {
          // It has a dirname, strip trailing slash
          dir = dir.substr(0, dir.length - 1);
        }
        return root + dir;
      },basename:function (path) {
        // EMSCRIPTEN return '/'' for '/', not an empty string
        if (path === '/') return '/';
        var lastSlash = path.lastIndexOf('/');
        if (lastSlash === -1) return path;
        return path.substr(lastSlash+1);
      },extname:function (path) {
        return PATH.splitPath(path)[3];
      },join:function () {
        var paths = Array.prototype.slice.call(arguments, 0);
        return PATH.normalize(paths.join('/'));
      },join2:function (l, r) {
        return PATH.normalize(l + '/' + r);
      },resolve:function () {
        var resolvedPath = '',
          resolvedAbsolute = false;
        for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {
          var path = (i >= 0) ? arguments[i] : FS.cwd();
          // Skip empty and invalid entries
          if (typeof path !== 'string') {
            throw new TypeError('Arguments to path.resolve must be strings');
          } else if (!path) {
            return ''; // an invalid portion invalidates the whole thing
          }
          resolvedPath = path + '/' + resolvedPath;
          resolvedAbsolute = path.charAt(0) === '/';
        }
        // At this point the path should be resolved to a full absolute path, but
        // handle relative paths to be safe (might happen when process.cwd() fails)
        resolvedPath = PATH.normalizeArray(resolvedPath.split('/').filter(function(p) {
          return !!p;
        }), !resolvedAbsolute).join('/');
        return ((resolvedAbsolute ? '/' : '') + resolvedPath) || '.';
      },relative:function (from, to) {
        from = PATH.resolve(from).substr(1);
        to = PATH.resolve(to).substr(1);
        function trim(arr) {
          var start = 0;
          for (; start < arr.length; start++) {
            if (arr[start] !== '') break;
          }
          var end = arr.length - 1;
          for (; end >= 0; end--) {
            if (arr[end] !== '') break;
          }
          if (start > end) return [];
          return arr.slice(start, end - start + 1);
        }
        var fromParts = trim(from.split('/'));
        var toParts = trim(to.split('/'));
        var length = Math.min(fromParts.length, toParts.length);
        var samePartsLength = length;
        for (var i = 0; i < length; i++) {
          if (fromParts[i] !== toParts[i]) {
            samePartsLength = i;
            break;
          }
        }
        var outputParts = [];
        for (var i = samePartsLength; i < fromParts.length; i++) {
          outputParts.push('..');
        }
        outputParts = outputParts.concat(toParts.slice(samePartsLength));
        return outputParts.join('/');
      }};
  
  var TTY={ttys:[],init:function () {
        // https://github.com/kripken/emscripten/pull/1555
        // if (ENVIRONMENT_IS_NODE) {
        //   // currently, FS.init does not distinguish if process.stdin is a file or TTY
        //   // device, it always assumes it's a TTY device. because of this, we're forcing
        //   // process.stdin to UTF8 encoding to at least make stdin reading compatible
        //   // with text files until FS.init can be refactored.
        //   process['stdin']['setEncoding']('utf8');
        // }
      },shutdown:function () {
        // https://github.com/kripken/emscripten/pull/1555
        // if (ENVIRONMENT_IS_NODE) {
        //   // inolen: any idea as to why node -e 'process.stdin.read()' wouldn't exit immediately (with process.stdin being a tty)?
        //   // isaacs: because now it's reading from the stream, you've expressed interest in it, so that read() kicks off a _read() which creates a ReadReq operation
        //   // inolen: I thought read() in that case was a synchronous operation that just grabbed some amount of buffered data if it exists?
        //   // isaacs: it is. but it also triggers a _read() call, which calls readStart() on the handle
        //   // isaacs: do process.stdin.pause() and i'd think it'd probably close the pending call
        //   process['stdin']['pause']();
        // }
      },register:function (dev, ops) {
        TTY.ttys[dev] = { input: [], output: [], ops: ops };
        FS.registerDevice(dev, TTY.stream_ops);
      },stream_ops:{open:function (stream) {
          var tty = TTY.ttys[stream.node.rdev];
          if (!tty) {
            throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
          }
          stream.tty = tty;
          stream.seekable = false;
        },close:function (stream) {
          // flush any pending line data
          stream.tty.ops.flush(stream.tty);
        },flush:function (stream) {
          stream.tty.ops.flush(stream.tty);
        },read:function (stream, buffer, offset, length, pos /* ignored */) {
          if (!stream.tty || !stream.tty.ops.get_char) {
            throw new FS.ErrnoError(ERRNO_CODES.ENXIO);
          }
          var bytesRead = 0;
          for (var i = 0; i < length; i++) {
            var result;
            try {
              result = stream.tty.ops.get_char(stream.tty);
            } catch (e) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
            if (result === undefined && bytesRead === 0) {
              throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
            }
            if (result === null || result === undefined) break;
            bytesRead++;
            buffer[offset+i] = result;
          }
          if (bytesRead) {
            stream.node.timestamp = Date.now();
          }
          return bytesRead;
        },write:function (stream, buffer, offset, length, pos) {
          if (!stream.tty || !stream.tty.ops.put_char) {
            throw new FS.ErrnoError(ERRNO_CODES.ENXIO);
          }
          for (var i = 0; i < length; i++) {
            try {
              stream.tty.ops.put_char(stream.tty, buffer[offset+i]);
            } catch (e) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
          }
          if (length) {
            stream.node.timestamp = Date.now();
          }
          return i;
        }},default_tty_ops:{get_char:function (tty) {
          if (!tty.input.length) {
            var result = null;
            if (ENVIRONMENT_IS_NODE) {
              // we will read data by chunks of BUFSIZE
              var BUFSIZE = 256;
              var buf = new Buffer(BUFSIZE);
              var bytesRead = 0;
  
              var isPosixPlatform = (process.platform != 'win32'); // Node doesn't offer a direct check, so test by exclusion
  
              var fd = process.stdin.fd;
              if (isPosixPlatform) {
                // Linux and Mac cannot use process.stdin.fd (which isn't set up as sync)
                var usingDevice = false;
                try {
                  fd = fs.openSync('/dev/stdin', 'r');
                  usingDevice = true;
                } catch (e) {}
              }
  
              try {
                bytesRead = fs.readSync(fd, buf, 0, BUFSIZE, null);
              } catch(e) {
                // Cross-platform differences: on Windows, reading EOF throws an exception, but on other OSes,
                // reading EOF returns 0. Uniformize behavior by treating the EOF exception to return 0.
                if (e.toString().indexOf('EOF') != -1) bytesRead = 0;
                else throw e;
              }
  
              if (usingDevice) { fs.closeSync(fd); }
              if (bytesRead > 0) {
                result = buf.slice(0, bytesRead).toString('utf-8');
              } else {
                result = null;
              }
  
            } else if (typeof window != 'undefined' &&
              typeof window.prompt == 'function') {
              // Browser.
              result = window.prompt('Input: ');  // returns null on cancel
              if (result !== null) {
                result += '\n';
              }
            } else if (typeof readline == 'function') {
              // Command line.
              result = readline();
              if (result !== null) {
                result += '\n';
              }
            }
            if (!result) {
              return null;
            }
            tty.input = intArrayFromString(result, true);
          }
          return tty.input.shift();
        },put_char:function (tty, val) {
          if (val === null || val === 10) {
            Module['print'](UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          } else {
            if (val != 0) tty.output.push(val); // val == 0 would cut text output off in the middle.
          }
        },flush:function (tty) {
          if (tty.output && tty.output.length > 0) {
            Module['print'](UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          }
        }},default_tty1_ops:{put_char:function (tty, val) {
          if (val === null || val === 10) {
            Module['printErr'](UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          } else {
            if (val != 0) tty.output.push(val);
          }
        },flush:function (tty) {
          if (tty.output && tty.output.length > 0) {
            Module['printErr'](UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          }
        }}};
  
  var MEMFS={ops_table:null,mount:function (mount) {
        return MEMFS.createNode(null, '/', 16384 | 511 /* 0777 */, 0);
      },createNode:function (parent, name, mode, dev) {
        if (FS.isBlkdev(mode) || FS.isFIFO(mode)) {
          // no supported
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (!MEMFS.ops_table) {
          MEMFS.ops_table = {
            dir: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr,
                lookup: MEMFS.node_ops.lookup,
                mknod: MEMFS.node_ops.mknod,
                rename: MEMFS.node_ops.rename,
                unlink: MEMFS.node_ops.unlink,
                rmdir: MEMFS.node_ops.rmdir,
                readdir: MEMFS.node_ops.readdir,
                symlink: MEMFS.node_ops.symlink
              },
              stream: {
                llseek: MEMFS.stream_ops.llseek
              }
            },
            file: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr
              },
              stream: {
                llseek: MEMFS.stream_ops.llseek,
                read: MEMFS.stream_ops.read,
                write: MEMFS.stream_ops.write,
                allocate: MEMFS.stream_ops.allocate,
                mmap: MEMFS.stream_ops.mmap,
                msync: MEMFS.stream_ops.msync
              }
            },
            link: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr,
                readlink: MEMFS.node_ops.readlink
              },
              stream: {}
            },
            chrdev: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr
              },
              stream: FS.chrdev_stream_ops
            }
          };
        }
        var node = FS.createNode(parent, name, mode, dev);
        if (FS.isDir(node.mode)) {
          node.node_ops = MEMFS.ops_table.dir.node;
          node.stream_ops = MEMFS.ops_table.dir.stream;
          node.contents = {};
        } else if (FS.isFile(node.mode)) {
          node.node_ops = MEMFS.ops_table.file.node;
          node.stream_ops = MEMFS.ops_table.file.stream;
          node.usedBytes = 0; // The actual number of bytes used in the typed array, as opposed to contents.length which gives the whole capacity.
          // When the byte data of the file is populated, this will point to either a typed array, or a normal JS array. Typed arrays are preferred
          // for performance, and used by default. However, typed arrays are not resizable like normal JS arrays are, so there is a small disk size
          // penalty involved for appending file writes that continuously grow a file similar to std::vector capacity vs used -scheme.
          node.contents = null; 
        } else if (FS.isLink(node.mode)) {
          node.node_ops = MEMFS.ops_table.link.node;
          node.stream_ops = MEMFS.ops_table.link.stream;
        } else if (FS.isChrdev(node.mode)) {
          node.node_ops = MEMFS.ops_table.chrdev.node;
          node.stream_ops = MEMFS.ops_table.chrdev.stream;
        }
        node.timestamp = Date.now();
        // add the new node to the parent
        if (parent) {
          parent.contents[name] = node;
        }
        return node;
      },getFileDataAsRegularArray:function (node) {
        if (node.contents && node.contents.subarray) {
          var arr = [];
          for (var i = 0; i < node.usedBytes; ++i) arr.push(node.contents[i]);
          return arr; // Returns a copy of the original data.
        }
        return node.contents; // No-op, the file contents are already in a JS array. Return as-is.
      },getFileDataAsTypedArray:function (node) {
        if (!node.contents) return new Uint8Array;
        if (node.contents.subarray) return node.contents.subarray(0, node.usedBytes); // Make sure to not return excess unused bytes.
        return new Uint8Array(node.contents);
      },expandFileStorage:function (node, newCapacity) {
        // If we are asked to expand the size of a file that already exists, revert to using a standard JS array to store the file
        // instead of a typed array. This makes resizing the array more flexible because we can just .push() elements at the back to
        // increase the size.
        if (node.contents && node.contents.subarray && newCapacity > node.contents.length) {
          node.contents = MEMFS.getFileDataAsRegularArray(node);
          node.usedBytes = node.contents.length; // We might be writing to a lazy-loaded file which had overridden this property, so force-reset it.
        }
  
        if (!node.contents || node.contents.subarray) { // Keep using a typed array if creating a new storage, or if old one was a typed array as well.
          var prevCapacity = node.contents ? node.contents.length : 0;
          if (prevCapacity >= newCapacity) return; // No need to expand, the storage was already large enough.
          // Don't expand strictly to the given requested limit if it's only a very small increase, but instead geometrically grow capacity.
          // For small filesizes (<1MB), perform size*2 geometric increase, but for large sizes, do a much more conservative size*1.125 increase to
          // avoid overshooting the allocation cap by a very large margin.
          var CAPACITY_DOUBLING_MAX = 1024 * 1024;
          newCapacity = Math.max(newCapacity, (prevCapacity * (prevCapacity < CAPACITY_DOUBLING_MAX ? 2.0 : 1.125)) | 0);
          if (prevCapacity != 0) newCapacity = Math.max(newCapacity, 256); // At minimum allocate 256b for each file when expanding.
          var oldContents = node.contents;
          node.contents = new Uint8Array(newCapacity); // Allocate new storage.
          if (node.usedBytes > 0) node.contents.set(oldContents.subarray(0, node.usedBytes), 0); // Copy old data over to the new storage.
          return;
        }
        // Not using a typed array to back the file storage. Use a standard JS array instead.
        if (!node.contents && newCapacity > 0) node.contents = [];
        while (node.contents.length < newCapacity) node.contents.push(0);
      },resizeFileStorage:function (node, newSize) {
        if (node.usedBytes == newSize) return;
        if (newSize == 0) {
          node.contents = null; // Fully decommit when requesting a resize to zero.
          node.usedBytes = 0;
          return;
        }
        if (!node.contents || node.contents.subarray) { // Resize a typed array if that is being used as the backing store.
          var oldContents = node.contents;
          node.contents = new Uint8Array(new ArrayBuffer(newSize)); // Allocate new storage.
          if (oldContents) {
            node.contents.set(oldContents.subarray(0, Math.min(newSize, node.usedBytes))); // Copy old data over to the new storage.
          }
          node.usedBytes = newSize;
          return;
        }
        // Backing with a JS array.
        if (!node.contents) node.contents = [];
        if (node.contents.length > newSize) node.contents.length = newSize;
        else while (node.contents.length < newSize) node.contents.push(0);
        node.usedBytes = newSize;
      },node_ops:{getattr:function (node) {
          var attr = {};
          // device numbers reuse inode numbers.
          attr.dev = FS.isChrdev(node.mode) ? node.id : 1;
          attr.ino = node.id;
          attr.mode = node.mode;
          attr.nlink = 1;
          attr.uid = 0;
          attr.gid = 0;
          attr.rdev = node.rdev;
          if (FS.isDir(node.mode)) {
            attr.size = 4096;
          } else if (FS.isFile(node.mode)) {
            attr.size = node.usedBytes;
          } else if (FS.isLink(node.mode)) {
            attr.size = node.link.length;
          } else {
            attr.size = 0;
          }
          attr.atime = new Date(node.timestamp);
          attr.mtime = new Date(node.timestamp);
          attr.ctime = new Date(node.timestamp);
          // NOTE: In our implementation, st_blocks = Math.ceil(st_size/st_blksize),
          //       but this is not required by the standard.
          attr.blksize = 4096;
          attr.blocks = Math.ceil(attr.size / attr.blksize);
          return attr;
        },setattr:function (node, attr) {
          if (attr.mode !== undefined) {
            node.mode = attr.mode;
          }
          if (attr.timestamp !== undefined) {
            node.timestamp = attr.timestamp;
          }
          if (attr.size !== undefined) {
            MEMFS.resizeFileStorage(node, attr.size);
          }
        },lookup:function (parent, name) {
          throw FS.genericErrors[ERRNO_CODES.ENOENT];
        },mknod:function (parent, name, mode, dev) {
          return MEMFS.createNode(parent, name, mode, dev);
        },rename:function (old_node, new_dir, new_name) {
          // if we're overwriting a directory at new_name, make sure it's empty.
          if (FS.isDir(old_node.mode)) {
            var new_node;
            try {
              new_node = FS.lookupNode(new_dir, new_name);
            } catch (e) {
            }
            if (new_node) {
              for (var i in new_node.contents) {
                throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
              }
            }
          }
          // do the internal rewiring
          delete old_node.parent.contents[old_node.name];
          old_node.name = new_name;
          new_dir.contents[new_name] = old_node;
          old_node.parent = new_dir;
        },unlink:function (parent, name) {
          delete parent.contents[name];
        },rmdir:function (parent, name) {
          var node = FS.lookupNode(parent, name);
          for (var i in node.contents) {
            throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
          }
          delete parent.contents[name];
        },readdir:function (node) {
          var entries = ['.', '..']
          for (var key in node.contents) {
            if (!node.contents.hasOwnProperty(key)) {
              continue;
            }
            entries.push(key);
          }
          return entries;
        },symlink:function (parent, newname, oldpath) {
          var node = MEMFS.createNode(parent, newname, 511 /* 0777 */ | 40960, 0);
          node.link = oldpath;
          return node;
        },readlink:function (node) {
          if (!FS.isLink(node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          return node.link;
        }},stream_ops:{read:function (stream, buffer, offset, length, position) {
          var contents = stream.node.contents;
          if (position >= stream.node.usedBytes) return 0;
          var size = Math.min(stream.node.usedBytes - position, length);
          assert(size >= 0);
          if (size > 8 && contents.subarray) { // non-trivial, and typed array
            buffer.set(contents.subarray(position, position + size), offset);
          } else {
            for (var i = 0; i < size; i++) buffer[offset + i] = contents[position + i];
          }
          return size;
        },write:function (stream, buffer, offset, length, position, canOwn) {
          if (!length) return 0;
          var node = stream.node;
          node.timestamp = Date.now();
  
          if (buffer.subarray && (!node.contents || node.contents.subarray)) { // This write is from a typed array to a typed array?
            if (canOwn) {
              assert(position === 0, 'canOwn must imply no weird position inside the file');
              node.contents = buffer.subarray(offset, offset + length);
              node.usedBytes = length;
              return length;
            } else if (node.usedBytes === 0 && position === 0) { // If this is a simple first write to an empty file, do a fast set since we don't need to care about old data.
              node.contents = new Uint8Array(buffer.subarray(offset, offset + length));
              node.usedBytes = length;
              return length;
            } else if (position + length <= node.usedBytes) { // Writing to an already allocated and used subrange of the file?
              node.contents.set(buffer.subarray(offset, offset + length), position);
              return length;
            }
          }
  
          // Appending to an existing file and we need to reallocate, or source data did not come as a typed array.
          MEMFS.expandFileStorage(node, position+length);
          if (node.contents.subarray && buffer.subarray) node.contents.set(buffer.subarray(offset, offset + length), position); // Use typed array write if available.
          else {
            for (var i = 0; i < length; i++) {
             node.contents[position + i] = buffer[offset + i]; // Or fall back to manual write if not.
            }
          }
          node.usedBytes = Math.max(node.usedBytes, position+length);
          return length;
        },llseek:function (stream, offset, whence) {
          var position = offset;
          if (whence === 1) {  // SEEK_CUR.
            position += stream.position;
          } else if (whence === 2) {  // SEEK_END.
            if (FS.isFile(stream.node.mode)) {
              position += stream.node.usedBytes;
            }
          }
          if (position < 0) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          return position;
        },allocate:function (stream, offset, length) {
          MEMFS.expandFileStorage(stream.node, offset + length);
          stream.node.usedBytes = Math.max(stream.node.usedBytes, offset + length);
        },mmap:function (stream, buffer, offset, length, position, prot, flags) {
          if (!FS.isFile(stream.node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
          }
          var ptr;
          var allocated;
          var contents = stream.node.contents;
          // Only make a new copy when MAP_PRIVATE is specified.
          if ( !(flags & 2) &&
                (contents.buffer === buffer || contents.buffer === buffer.buffer) ) {
            // We can't emulate MAP_SHARED when the file is not backed by the buffer
            // we're mapping to (e.g. the HEAP buffer).
            allocated = false;
            ptr = contents.byteOffset;
          } else {
            // Try to avoid unnecessary slices.
            if (position > 0 || position + length < stream.node.usedBytes) {
              if (contents.subarray) {
                contents = contents.subarray(position, position + length);
              } else {
                contents = Array.prototype.slice.call(contents, position, position + length);
              }
            }
            allocated = true;
            ptr = _malloc(length);
            if (!ptr) {
              throw new FS.ErrnoError(ERRNO_CODES.ENOMEM);
            }
            buffer.set(contents, ptr);
          }
          return { ptr: ptr, allocated: allocated };
        },msync:function (stream, buffer, offset, length, mmapFlags) {
          if (!FS.isFile(stream.node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
          }
          if (mmapFlags & 2) {
            // MAP_PRIVATE calls need not to be synced back to underlying fs
            return 0;
          }
  
          var bytesWritten = MEMFS.stream_ops.write(stream, buffer, 0, length, offset, false);
          // should we check if bytesWritten and length are the same?
          return 0;
        }}};
  
  var IDBFS={dbs:{},indexedDB:function () {
        if (typeof indexedDB !== 'undefined') return indexedDB;
        var ret = null;
        if (typeof window === 'object') ret = window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB;
        assert(ret, 'IDBFS used, but indexedDB not supported');
        return ret;
      },DB_VERSION:21,DB_STORE_NAME:"FILE_DATA",mount:function (mount) {
        // reuse all of the core MEMFS functionality
        return MEMFS.mount.apply(null, arguments);
      },syncfs:function (mount, populate, callback) {
        IDBFS.getLocalSet(mount, function(err, local) {
          if (err) return callback(err);
  
          IDBFS.getRemoteSet(mount, function(err, remote) {
            if (err) return callback(err);
  
            var src = populate ? remote : local;
            var dst = populate ? local : remote;
  
            IDBFS.reconcile(src, dst, callback);
          });
        });
      },getDB:function (name, callback) {
        // check the cache first
        var db = IDBFS.dbs[name];
        if (db) {
          return callback(null, db);
        }
  
        var req;
        try {
          req = IDBFS.indexedDB().open(name, IDBFS.DB_VERSION);
        } catch (e) {
          return callback(e);
        }
        if (!req) {
          return callback("Unable to connect to IndexedDB");
        }
        req.onupgradeneeded = function(e) {
          var db = e.target.result;
          var transaction = e.target.transaction;
  
          var fileStore;
  
          if (db.objectStoreNames.contains(IDBFS.DB_STORE_NAME)) {
            fileStore = transaction.objectStore(IDBFS.DB_STORE_NAME);
          } else {
            fileStore = db.createObjectStore(IDBFS.DB_STORE_NAME);
          }
  
          if (!fileStore.indexNames.contains('timestamp')) {
            fileStore.createIndex('timestamp', 'timestamp', { unique: false });
          }
        };
        req.onsuccess = function() {
          db = req.result;
  
          // add to the cache
          IDBFS.dbs[name] = db;
          callback(null, db);
        };
        req.onerror = function(e) {
          callback(this.error);
          e.preventDefault();
        };
      },getLocalSet:function (mount, callback) {
        var entries = {};
  
        function isRealDir(p) {
          return p !== '.' && p !== '..';
        };
        function toAbsolute(root) {
          return function(p) {
            return PATH.join2(root, p);
          }
        };
  
        var check = FS.readdir(mount.mountpoint).filter(isRealDir).map(toAbsolute(mount.mountpoint));
  
        while (check.length) {
          var path = check.pop();
          var stat;
  
          try {
            stat = FS.stat(path);
          } catch (e) {
            return callback(e);
          }
  
          if (FS.isDir(stat.mode)) {
            check.push.apply(check, FS.readdir(path).filter(isRealDir).map(toAbsolute(path)));
          }
  
          entries[path] = { timestamp: stat.mtime };
        }
  
        return callback(null, { type: 'local', entries: entries });
      },getRemoteSet:function (mount, callback) {
        var entries = {};
  
        IDBFS.getDB(mount.mountpoint, function(err, db) {
          if (err) return callback(err);
  
          var transaction = db.transaction([IDBFS.DB_STORE_NAME], 'readonly');
          transaction.onerror = function(e) {
            callback(this.error);
            e.preventDefault();
          };
  
          var store = transaction.objectStore(IDBFS.DB_STORE_NAME);
          var index = store.index('timestamp');
  
          index.openKeyCursor().onsuccess = function(event) {
            var cursor = event.target.result;
  
            if (!cursor) {
              return callback(null, { type: 'remote', db: db, entries: entries });
            }
  
            entries[cursor.primaryKey] = { timestamp: cursor.key };
  
            cursor.continue();
          };
        });
      },loadLocalEntry:function (path, callback) {
        var stat, node;
  
        try {
          var lookup = FS.lookupPath(path);
          node = lookup.node;
          stat = FS.stat(path);
        } catch (e) {
          return callback(e);
        }
  
        if (FS.isDir(stat.mode)) {
          return callback(null, { timestamp: stat.mtime, mode: stat.mode });
        } else if (FS.isFile(stat.mode)) {
          // Performance consideration: storing a normal JavaScript array to a IndexedDB is much slower than storing a typed array.
          // Therefore always convert the file contents to a typed array first before writing the data to IndexedDB.
          node.contents = MEMFS.getFileDataAsTypedArray(node);
          return callback(null, { timestamp: stat.mtime, mode: stat.mode, contents: node.contents });
        } else {
          return callback(new Error('node type not supported'));
        }
      },storeLocalEntry:function (path, entry, callback) {
        try {
          if (FS.isDir(entry.mode)) {
            FS.mkdir(path, entry.mode);
          } else if (FS.isFile(entry.mode)) {
            FS.writeFile(path, entry.contents, { encoding: 'binary', canOwn: true });
          } else {
            return callback(new Error('node type not supported'));
          }
  
          FS.chmod(path, entry.mode);
          FS.utime(path, entry.timestamp, entry.timestamp);
        } catch (e) {
          return callback(e);
        }
  
        callback(null);
      },removeLocalEntry:function (path, callback) {
        try {
          var lookup = FS.lookupPath(path);
          var stat = FS.stat(path);
  
          if (FS.isDir(stat.mode)) {
            FS.rmdir(path);
          } else if (FS.isFile(stat.mode)) {
            FS.unlink(path);
          }
        } catch (e) {
          return callback(e);
        }
  
        callback(null);
      },loadRemoteEntry:function (store, path, callback) {
        var req = store.get(path);
        req.onsuccess = function(event) { callback(null, event.target.result); };
        req.onerror = function(e) {
          callback(this.error);
          e.preventDefault();
        };
      },storeRemoteEntry:function (store, path, entry, callback) {
        var req = store.put(entry, path);
        req.onsuccess = function() { callback(null); };
        req.onerror = function(e) {
          callback(this.error);
          e.preventDefault();
        };
      },removeRemoteEntry:function (store, path, callback) {
        var req = store.delete(path);
        req.onsuccess = function() { callback(null); };
        req.onerror = function(e) {
          callback(this.error);
          e.preventDefault();
        };
      },reconcile:function (src, dst, callback) {
        var total = 0;
  
        var create = [];
        Object.keys(src.entries).forEach(function (key) {
          var e = src.entries[key];
          var e2 = dst.entries[key];
          if (!e2 || e.timestamp > e2.timestamp) {
            create.push(key);
            total++;
          }
        });
  
        var remove = [];
        Object.keys(dst.entries).forEach(function (key) {
          var e = dst.entries[key];
          var e2 = src.entries[key];
          if (!e2) {
            remove.push(key);
            total++;
          }
        });
  
        if (!total) {
          return callback(null);
        }
  
        var errored = false;
        var completed = 0;
        var db = src.type === 'remote' ? src.db : dst.db;
        var transaction = db.transaction([IDBFS.DB_STORE_NAME], 'readwrite');
        var store = transaction.objectStore(IDBFS.DB_STORE_NAME);
  
        function done(err) {
          if (err) {
            if (!done.errored) {
              done.errored = true;
              return callback(err);
            }
            return;
          }
          if (++completed >= total) {
            return callback(null);
          }
        };
  
        transaction.onerror = function(e) {
          done(this.error);
          e.preventDefault();
        };
  
        // sort paths in ascending order so directory entries are created
        // before the files inside them
        create.sort().forEach(function (path) {
          if (dst.type === 'local') {
            IDBFS.loadRemoteEntry(store, path, function (err, entry) {
              if (err) return done(err);
              IDBFS.storeLocalEntry(path, entry, done);
            });
          } else {
            IDBFS.loadLocalEntry(path, function (err, entry) {
              if (err) return done(err);
              IDBFS.storeRemoteEntry(store, path, entry, done);
            });
          }
        });
  
        // sort paths in descending order so files are deleted before their
        // parent directories
        remove.sort().reverse().forEach(function(path) {
          if (dst.type === 'local') {
            IDBFS.removeLocalEntry(path, done);
          } else {
            IDBFS.removeRemoteEntry(store, path, done);
          }
        });
      }};
  
  var NODEFS={isWindows:false,staticInit:function () {
        NODEFS.isWindows = !!process.platform.match(/^win/);
      },mount:function (mount) {
        assert(ENVIRONMENT_IS_NODE);
        return NODEFS.createNode(null, '/', NODEFS.getMode(mount.opts.root), 0);
      },createNode:function (parent, name, mode, dev) {
        if (!FS.isDir(mode) && !FS.isFile(mode) && !FS.isLink(mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var node = FS.createNode(parent, name, mode);
        node.node_ops = NODEFS.node_ops;
        node.stream_ops = NODEFS.stream_ops;
        return node;
      },getMode:function (path) {
        var stat;
        try {
          stat = fs.lstatSync(path);
          if (NODEFS.isWindows) {
            // On Windows, directories return permission bits 'rw-rw-rw-', even though they have 'rwxrwxrwx', so
            // propagate write bits to execute bits.
            stat.mode = stat.mode | ((stat.mode & 146) >> 1);
          }
        } catch (e) {
          if (!e.code) throw e;
          throw new FS.ErrnoError(ERRNO_CODES[e.code]);
        }
        return stat.mode;
      },realPath:function (node) {
        var parts = [];
        while (node.parent !== node) {
          parts.push(node.name);
          node = node.parent;
        }
        parts.push(node.mount.opts.root);
        parts.reverse();
        return PATH.join.apply(null, parts);
      },flagsToPermissionStringMap:{0:"r",1:"r+",2:"r+",64:"r",65:"r+",66:"r+",129:"rx+",193:"rx+",514:"w+",577:"w",578:"w+",705:"wx",706:"wx+",1024:"a",1025:"a",1026:"a+",1089:"a",1090:"a+",1153:"ax",1154:"ax+",1217:"ax",1218:"ax+",4096:"rs",4098:"rs+"},flagsToPermissionString:function (flags) {
        flags &= ~0x200000 /*O_PATH*/; // Ignore this flag from musl, otherwise node.js fails to open the file.
        flags &= ~0x800 /*O_NONBLOCK*/; // Ignore this flag from musl, otherwise node.js fails to open the file.
        flags &= ~0x8000 /*O_LARGEFILE*/; // Ignore this flag from musl, otherwise node.js fails to open the file.
        flags &= ~0x80000 /*O_CLOEXEC*/; // Some applications may pass it; it makes no sense for a single process.
        if (flags in NODEFS.flagsToPermissionStringMap) {
          return NODEFS.flagsToPermissionStringMap[flags];
        } else {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
      },node_ops:{getattr:function (node) {
          var path = NODEFS.realPath(node);
          var stat;
          try {
            stat = fs.lstatSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          // node.js v0.10.20 doesn't report blksize and blocks on Windows. Fake them with default blksize of 4096.
          // See http://support.microsoft.com/kb/140365
          if (NODEFS.isWindows && !stat.blksize) {
            stat.blksize = 4096;
          }
          if (NODEFS.isWindows && !stat.blocks) {
            stat.blocks = (stat.size+stat.blksize-1)/stat.blksize|0;
          }
          return {
            dev: stat.dev,
            ino: stat.ino,
            mode: stat.mode,
            nlink: stat.nlink,
            uid: stat.uid,
            gid: stat.gid,
            rdev: stat.rdev,
            size: stat.size,
            atime: stat.atime,
            mtime: stat.mtime,
            ctime: stat.ctime,
            blksize: stat.blksize,
            blocks: stat.blocks
          };
        },setattr:function (node, attr) {
          var path = NODEFS.realPath(node);
          try {
            if (attr.mode !== undefined) {
              fs.chmodSync(path, attr.mode);
              // update the common node structure mode as well
              node.mode = attr.mode;
            }
            if (attr.timestamp !== undefined) {
              var date = new Date(attr.timestamp);
              fs.utimesSync(path, date, date);
            }
            if (attr.size !== undefined) {
              fs.truncateSync(path, attr.size);
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },lookup:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          var mode = NODEFS.getMode(path);
          return NODEFS.createNode(parent, name, mode);
        },mknod:function (parent, name, mode, dev) {
          var node = NODEFS.createNode(parent, name, mode, dev);
          // create the backing node for this in the fs root as well
          var path = NODEFS.realPath(node);
          try {
            if (FS.isDir(node.mode)) {
              fs.mkdirSync(path, node.mode);
            } else {
              fs.writeFileSync(path, '', { mode: node.mode });
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          return node;
        },rename:function (oldNode, newDir, newName) {
          var oldPath = NODEFS.realPath(oldNode);
          var newPath = PATH.join2(NODEFS.realPath(newDir), newName);
          try {
            fs.renameSync(oldPath, newPath);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },unlink:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          try {
            fs.unlinkSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },rmdir:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          try {
            fs.rmdirSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },readdir:function (node) {
          var path = NODEFS.realPath(node);
          try {
            return fs.readdirSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },symlink:function (parent, newName, oldPath) {
          var newPath = PATH.join2(NODEFS.realPath(parent), newName);
          try {
            fs.symlinkSync(oldPath, newPath);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },readlink:function (node) {
          var path = NODEFS.realPath(node);
          try {
            path = fs.readlinkSync(path);
            path = NODEJS_PATH.relative(NODEJS_PATH.resolve(node.mount.opts.root), path);
            return path;
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        }},stream_ops:{open:function (stream) {
          var path = NODEFS.realPath(stream.node);
          try {
            if (FS.isFile(stream.node.mode)) {
              stream.nfd = fs.openSync(path, NODEFS.flagsToPermissionString(stream.flags));
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },close:function (stream) {
          try {
            if (FS.isFile(stream.node.mode) && stream.nfd) {
              fs.closeSync(stream.nfd);
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },read:function (stream, buffer, offset, length, position) {
          if (length === 0) return 0; // node errors on 0 length reads
          // FIXME this is terrible.
          var nbuffer = new Buffer(length);
          var res;
          try {
            res = fs.readSync(stream.nfd, nbuffer, 0, length, position);
          } catch (e) {
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          if (res > 0) {
            for (var i = 0; i < res; i++) {
              buffer[offset + i] = nbuffer[i];
            }
          }
          return res;
        },write:function (stream, buffer, offset, length, position) {
          // FIXME this is terrible.
          var nbuffer = new Buffer(buffer.subarray(offset, offset + length));
          var res;
          try {
            res = fs.writeSync(stream.nfd, nbuffer, 0, length, position);
          } catch (e) {
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          return res;
        },llseek:function (stream, offset, whence) {
          var position = offset;
          if (whence === 1) {  // SEEK_CUR.
            position += stream.position;
          } else if (whence === 2) {  // SEEK_END.
            if (FS.isFile(stream.node.mode)) {
              try {
                var stat = fs.fstatSync(stream.nfd);
                position += stat.size;
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES[e.code]);
              }
            }
          }
  
          if (position < 0) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
  
          return position;
        }}};
  
  var WORKERFS={DIR_MODE:16895,FILE_MODE:33279,reader:null,mount:function (mount) {
        assert(ENVIRONMENT_IS_WORKER);
        if (!WORKERFS.reader) WORKERFS.reader = new FileReaderSync();
        var root = WORKERFS.createNode(null, '/', WORKERFS.DIR_MODE, 0);
        var createdParents = {};
        function ensureParent(path) {
          // return the parent node, creating subdirs as necessary
          var parts = path.split('/');
          var parent = root;
          for (var i = 0; i < parts.length-1; i++) {
            var curr = parts.slice(0, i+1).join('/');
            // Issue 4254: Using curr as a node name will prevent the node
            // from being found in FS.nameTable when FS.open is called on
            // a path which holds a child of this node,
            // given that all FS functions assume node names
            // are just their corresponding parts within their given path,
            // rather than incremental aggregates which include their parent's
            // directories.
            if (!createdParents[curr]) {
              createdParents[curr] = WORKERFS.createNode(parent, parts[i], WORKERFS.DIR_MODE, 0);
            }
            parent = createdParents[curr];
          }
          return parent;
        }
        function base(path) {
          var parts = path.split('/');
          return parts[parts.length-1];
        }
        // We also accept FileList here, by using Array.prototype
        Array.prototype.forEach.call(mount.opts["files"] || [], function(file) {
          WORKERFS.createNode(ensureParent(file.name), base(file.name), WORKERFS.FILE_MODE, 0, file, file.lastModifiedDate);
        });
        (mount.opts["blobs"] || []).forEach(function(obj) {
          WORKERFS.createNode(ensureParent(obj["name"]), base(obj["name"]), WORKERFS.FILE_MODE, 0, obj["data"]);
        });
        (mount.opts["packages"] || []).forEach(function(pack) {
          pack['metadata'].files.forEach(function(file) {
            var name = file.filename.substr(1); // remove initial slash
            WORKERFS.createNode(ensureParent(name), base(name), WORKERFS.FILE_MODE, 0, pack['blob'].slice(file.start, file.end));
          });
        });
        return root;
      },createNode:function (parent, name, mode, dev, contents, mtime) {
        var node = FS.createNode(parent, name, mode);
        node.mode = mode;
        node.node_ops = WORKERFS.node_ops;
        node.stream_ops = WORKERFS.stream_ops;
        node.timestamp = (mtime || new Date).getTime();
        assert(WORKERFS.FILE_MODE !== WORKERFS.DIR_MODE);
        if (mode === WORKERFS.FILE_MODE) {
          node.size = contents.size;
          node.contents = contents;
        } else {
          node.size = 4096;
          node.contents = {};
        }
        if (parent) {
          parent.contents[name] = node;
        }
        return node;
      },node_ops:{getattr:function (node) {
          return {
            dev: 1,
            ino: undefined,
            mode: node.mode,
            nlink: 1,
            uid: 0,
            gid: 0,
            rdev: undefined,
            size: node.size,
            atime: new Date(node.timestamp),
            mtime: new Date(node.timestamp),
            ctime: new Date(node.timestamp),
            blksize: 4096,
            blocks: Math.ceil(node.size / 4096),
          };
        },setattr:function (node, attr) {
          if (attr.mode !== undefined) {
            node.mode = attr.mode;
          }
          if (attr.timestamp !== undefined) {
            node.timestamp = attr.timestamp;
          }
        },lookup:function (parent, name) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        },mknod:function (parent, name, mode, dev) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        },rename:function (oldNode, newDir, newName) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        },unlink:function (parent, name) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        },rmdir:function (parent, name) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        },readdir:function (node) {
          var entries = ['.', '..'];
          for (var key in node.contents) {
            if (!node.contents.hasOwnProperty(key)) {
              continue;
            }
            entries.push(key);
          }
          return entries;
        },symlink:function (parent, newName, oldPath) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        },readlink:function (node) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }},stream_ops:{read:function (stream, buffer, offset, length, position) {
          if (position >= stream.node.size) return 0;
          var chunk = stream.node.contents.slice(position, position + length);
          var ab = WORKERFS.reader.readAsArrayBuffer(chunk);
          buffer.set(new Uint8Array(ab), offset);
          return chunk.size;
        },write:function (stream, buffer, offset, length, position) {
          throw new FS.ErrnoError(ERRNO_CODES.EIO);
        },llseek:function (stream, offset, whence) {
          var position = offset;
          if (whence === 1) {  // SEEK_CUR.
            position += stream.position;
          } else if (whence === 2) {  // SEEK_END.
            if (FS.isFile(stream.node.mode)) {
              position += stream.node.size;
            }
          }
          if (position < 0) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          return position;
        }}};
  
  var _stdin=STATICTOP; STATICTOP += 16;;
  
  var _stdout=STATICTOP; STATICTOP += 16;;
  
  var _stderr=STATICTOP; STATICTOP += 16;;var FS={root:null,mounts:[],devices:[null],streams:[],nextInode:1,nameTable:null,currentPath:"/",initialized:false,ignorePermissions:true,trackingDelegate:{},tracking:{openFlags:{READ:1,WRITE:2}},ErrnoError:null,genericErrors:{},filesystems:null,syncFSRequests:0,handleFSError:function (e) {
        if (!(e instanceof FS.ErrnoError)) throw e + ' : ' + stackTrace();
        return ___setErrNo(e.errno);
      },lookupPath:function (path, opts) {
        path = PATH.resolve(FS.cwd(), path);
        opts = opts || {};
  
        if (!path) return { path: '', node: null };
  
        var defaults = {
          follow_mount: true,
          recurse_count: 0
        };
        for (var key in defaults) {
          if (opts[key] === undefined) {
            opts[key] = defaults[key];
          }
        }
  
        if (opts.recurse_count > 8) {  // max recursive lookup of 8
          throw new FS.ErrnoError(ERRNO_CODES.ELOOP);
        }
  
        // split the path
        var parts = PATH.normalizeArray(path.split('/').filter(function(p) {
          return !!p;
        }), false);
  
        // start at the root
        var current = FS.root;
        var current_path = '/';
  
        for (var i = 0; i < parts.length; i++) {
          var islast = (i === parts.length-1);
          if (islast && opts.parent) {
            // stop resolving
            break;
          }
  
          current = FS.lookupNode(current, parts[i]);
          current_path = PATH.join2(current_path, parts[i]);
  
          // jump to the mount's root node if this is a mountpoint
          if (FS.isMountpoint(current)) {
            if (!islast || (islast && opts.follow_mount)) {
              current = current.mounted.root;
            }
          }
  
          // by default, lookupPath will not follow a symlink if it is the final path component.
          // setting opts.follow = true will override this behavior.
          if (!islast || opts.follow) {
            var count = 0;
            while (FS.isLink(current.mode)) {
              var link = FS.readlink(current_path);
              current_path = PATH.resolve(PATH.dirname(current_path), link);
  
              var lookup = FS.lookupPath(current_path, { recurse_count: opts.recurse_count });
              current = lookup.node;
  
              if (count++ > 40) {  // limit max consecutive symlinks to 40 (SYMLOOP_MAX).
                throw new FS.ErrnoError(ERRNO_CODES.ELOOP);
              }
            }
          }
        }
  
        return { path: current_path, node: current };
      },getPath:function (node) {
        var path;
        while (true) {
          if (FS.isRoot(node)) {
            var mount = node.mount.mountpoint;
            if (!path) return mount;
            return mount[mount.length-1] !== '/' ? mount + '/' + path : mount + path;
          }
          path = path ? node.name + '/' + path : node.name;
          node = node.parent;
        }
      },hashName:function (parentid, name) {
        var hash = 0;
  
  
        for (var i = 0; i < name.length; i++) {
          hash = ((hash << 5) - hash + name.charCodeAt(i)) | 0;
        }
        return ((parentid + hash) >>> 0) % FS.nameTable.length;
      },hashAddNode:function (node) {
        var hash = FS.hashName(node.parent.id, node.name);
        node.name_next = FS.nameTable[hash];
        FS.nameTable[hash] = node;
      },hashRemoveNode:function (node) {
        var hash = FS.hashName(node.parent.id, node.name);
        if (FS.nameTable[hash] === node) {
          FS.nameTable[hash] = node.name_next;
        } else {
          var current = FS.nameTable[hash];
          while (current) {
            if (current.name_next === node) {
              current.name_next = node.name_next;
              break;
            }
            current = current.name_next;
          }
        }
      },lookupNode:function (parent, name) {
        var err = FS.mayLookup(parent);
        if (err) {
          throw new FS.ErrnoError(err, parent);
        }
        var hash = FS.hashName(parent.id, name);
        for (var node = FS.nameTable[hash]; node; node = node.name_next) {
          var nodeName = node.name;
          if (node.parent.id === parent.id && nodeName === name) {
            return node;
          }
        }
        // if we failed to find it in the cache, call into the VFS
        return FS.lookup(parent, name);
      },createNode:function (parent, name, mode, rdev) {
        if (!FS.FSNode) {
          FS.FSNode = function(parent, name, mode, rdev) {
            if (!parent) {
              parent = this;  // root node sets parent to itself
            }
            this.parent = parent;
            this.mount = parent.mount;
            this.mounted = null;
            this.id = FS.nextInode++;
            this.name = name;
            this.mode = mode;
            this.node_ops = {};
            this.stream_ops = {};
            this.rdev = rdev;
          };
  
          FS.FSNode.prototype = {};
  
          // compatibility
          var readMode = 292 | 73;
          var writeMode = 146;
  
          // NOTE we must use Object.defineProperties instead of individual calls to
          // Object.defineProperty in order to make closure compiler happy
          Object.defineProperties(FS.FSNode.prototype, {
            read: {
              get: function() { return (this.mode & readMode) === readMode; },
              set: function(val) { val ? this.mode |= readMode : this.mode &= ~readMode; }
            },
            write: {
              get: function() { return (this.mode & writeMode) === writeMode; },
              set: function(val) { val ? this.mode |= writeMode : this.mode &= ~writeMode; }
            },
            isFolder: {
              get: function() { return FS.isDir(this.mode); }
            },
            isDevice: {
              get: function() { return FS.isChrdev(this.mode); }
            }
          });
        }
  
        var node = new FS.FSNode(parent, name, mode, rdev);
  
        FS.hashAddNode(node);
  
        return node;
      },destroyNode:function (node) {
        FS.hashRemoveNode(node);
      },isRoot:function (node) {
        return node === node.parent;
      },isMountpoint:function (node) {
        return !!node.mounted;
      },isFile:function (mode) {
        return (mode & 61440) === 32768;
      },isDir:function (mode) {
        return (mode & 61440) === 16384;
      },isLink:function (mode) {
        return (mode & 61440) === 40960;
      },isChrdev:function (mode) {
        return (mode & 61440) === 8192;
      },isBlkdev:function (mode) {
        return (mode & 61440) === 24576;
      },isFIFO:function (mode) {
        return (mode & 61440) === 4096;
      },isSocket:function (mode) {
        return (mode & 49152) === 49152;
      },flagModes:{"r":0,"rs":1052672,"r+":2,"w":577,"wx":705,"xw":705,"w+":578,"wx+":706,"xw+":706,"a":1089,"ax":1217,"xa":1217,"a+":1090,"ax+":1218,"xa+":1218},modeStringToFlags:function (str) {
        var flags = FS.flagModes[str];
        if (typeof flags === 'undefined') {
          throw new Error('Unknown file open mode: ' + str);
        }
        return flags;
      },flagsToPermissionString:function (flag) {
        var perms = ['r', 'w', 'rw'][flag & 3];
        if ((flag & 512)) {
          perms += 'w';
        }
        return perms;
      },nodePermissions:function (node, perms) {
        if (FS.ignorePermissions) {
          return 0;
        }
        // return 0 if any user, group or owner bits are set.
        if (perms.indexOf('r') !== -1 && !(node.mode & 292)) {
          return ERRNO_CODES.EACCES;
        } else if (perms.indexOf('w') !== -1 && !(node.mode & 146)) {
          return ERRNO_CODES.EACCES;
        } else if (perms.indexOf('x') !== -1 && !(node.mode & 73)) {
          return ERRNO_CODES.EACCES;
        }
        return 0;
      },mayLookup:function (dir) {
        var err = FS.nodePermissions(dir, 'x');
        if (err) return err;
        if (!dir.node_ops.lookup) return ERRNO_CODES.EACCES;
        return 0;
      },mayCreate:function (dir, name) {
        try {
          var node = FS.lookupNode(dir, name);
          return ERRNO_CODES.EEXIST;
        } catch (e) {
        }
        return FS.nodePermissions(dir, 'wx');
      },mayDelete:function (dir, name, isdir) {
        var node;
        try {
          node = FS.lookupNode(dir, name);
        } catch (e) {
          return e.errno;
        }
        var err = FS.nodePermissions(dir, 'wx');
        if (err) {
          return err;
        }
        if (isdir) {
          if (!FS.isDir(node.mode)) {
            return ERRNO_CODES.ENOTDIR;
          }
          if (FS.isRoot(node) || FS.getPath(node) === FS.cwd()) {
            return ERRNO_CODES.EBUSY;
          }
        } else {
          if (FS.isDir(node.mode)) {
            return ERRNO_CODES.EISDIR;
          }
        }
        return 0;
      },mayOpen:function (node, flags) {
        if (!node) {
          return ERRNO_CODES.ENOENT;
        }
        if (FS.isLink(node.mode)) {
          return ERRNO_CODES.ELOOP;
        } else if (FS.isDir(node.mode)) {
          if (FS.flagsToPermissionString(flags) !== 'r' || // opening for write
              (flags & 512)) { // TODO: check for O_SEARCH? (== search for dir only)
            return ERRNO_CODES.EISDIR;
          }
        }
        return FS.nodePermissions(node, FS.flagsToPermissionString(flags));
      },MAX_OPEN_FDS:4096,nextfd:function (fd_start, fd_end) {
        fd_start = fd_start || 0;
        fd_end = fd_end || FS.MAX_OPEN_FDS;
        for (var fd = fd_start; fd <= fd_end; fd++) {
          if (!FS.streams[fd]) {
            return fd;
          }
        }
        throw new FS.ErrnoError(ERRNO_CODES.EMFILE);
      },getStream:function (fd) {
        return FS.streams[fd];
      },createStream:function (stream, fd_start, fd_end) {
        if (!FS.FSStream) {
          FS.FSStream = function(){};
          FS.FSStream.prototype = {};
          // compatibility
          Object.defineProperties(FS.FSStream.prototype, {
            object: {
              get: function() { return this.node; },
              set: function(val) { this.node = val; }
            },
            isRead: {
              get: function() { return (this.flags & 2097155) !== 1; }
            },
            isWrite: {
              get: function() { return (this.flags & 2097155) !== 0; }
            },
            isAppend: {
              get: function() { return (this.flags & 1024); }
            }
          });
        }
        // clone it, so we can return an instance of FSStream
        var newStream = new FS.FSStream();
        for (var p in stream) {
          newStream[p] = stream[p];
        }
        stream = newStream;
        var fd = FS.nextfd(fd_start, fd_end);
        stream.fd = fd;
        FS.streams[fd] = stream;
        return stream;
      },closeStream:function (fd) {
        FS.streams[fd] = null;
      },chrdev_stream_ops:{open:function (stream) {
          var device = FS.getDevice(stream.node.rdev);
          // override node's stream ops with the device's
          stream.stream_ops = device.stream_ops;
          // forward the open call
          if (stream.stream_ops.open) {
            stream.stream_ops.open(stream);
          }
        },llseek:function () {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }},major:function (dev) {
        return ((dev) >> 8);
      },minor:function (dev) {
        return ((dev) & 0xff);
      },makedev:function (ma, mi) {
        return ((ma) << 8 | (mi));
      },registerDevice:function (dev, ops) {
        FS.devices[dev] = { stream_ops: ops };
      },getDevice:function (dev) {
        return FS.devices[dev];
      },getMounts:function (mount) {
        var mounts = [];
        var check = [mount];
  
        while (check.length) {
          var m = check.pop();
  
          mounts.push(m);
  
          check.push.apply(check, m.mounts);
        }
  
        return mounts;
      },syncfs:function (populate, callback) {
        if (typeof(populate) === 'function') {
          callback = populate;
          populate = false;
        }
  
        FS.syncFSRequests++;
  
        if (FS.syncFSRequests > 1) {
          console.log('warning: ' + FS.syncFSRequests + ' FS.syncfs operations in flight at once, probably just doing extra work');
        }
  
        var mounts = FS.getMounts(FS.root.mount);
        var completed = 0;
  
        function doCallback(err) {
          assert(FS.syncFSRequests > 0);
          FS.syncFSRequests--;
          return callback(err);
        }
  
        function done(err) {
          if (err) {
            if (!done.errored) {
              done.errored = true;
              return doCallback(err);
            }
            return;
          }
          if (++completed >= mounts.length) {
            doCallback(null);
          }
        };
  
        // sync all mounts
        mounts.forEach(function (mount) {
          if (!mount.type.syncfs) {
            return done(null);
          }
          mount.type.syncfs(mount, populate, done);
        });
      },mount:function (type, opts, mountpoint) {
        var root = mountpoint === '/';
        var pseudo = !mountpoint;
        var node;
  
        if (root && FS.root) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        } else if (!root && !pseudo) {
          var lookup = FS.lookupPath(mountpoint, { follow_mount: false });
  
          mountpoint = lookup.path;  // use the absolute path
          node = lookup.node;
  
          if (FS.isMountpoint(node)) {
            throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
          }
  
          if (!FS.isDir(node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
          }
        }
  
        var mount = {
          type: type,
          opts: opts,
          mountpoint: mountpoint,
          mounts: []
        };
  
        // create a root node for the fs
        var mountRoot = type.mount(mount);
        mountRoot.mount = mount;
        mount.root = mountRoot;
  
        if (root) {
          FS.root = mountRoot;
        } else if (node) {
          // set as a mountpoint
          node.mounted = mount;
  
          // add the new mount to the current mount's children
          if (node.mount) {
            node.mount.mounts.push(mount);
          }
        }
  
        return mountRoot;
      },unmount:function (mountpoint) {
        var lookup = FS.lookupPath(mountpoint, { follow_mount: false });
  
        if (!FS.isMountpoint(lookup.node)) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
  
        // destroy the nodes for this mount, and all its child mounts
        var node = lookup.node;
        var mount = node.mounted;
        var mounts = FS.getMounts(mount);
  
        Object.keys(FS.nameTable).forEach(function (hash) {
          var current = FS.nameTable[hash];
  
          while (current) {
            var next = current.name_next;
  
            if (mounts.indexOf(current.mount) !== -1) {
              FS.destroyNode(current);
            }
  
            current = next;
          }
        });
  
        // no longer a mountpoint
        node.mounted = null;
  
        // remove this mount from the child mounts
        var idx = node.mount.mounts.indexOf(mount);
        assert(idx !== -1);
        node.mount.mounts.splice(idx, 1);
      },lookup:function (parent, name) {
        return parent.node_ops.lookup(parent, name);
      },mknod:function (path, mode, dev) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        if (!name || name === '.' || name === '..') {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var err = FS.mayCreate(parent, name);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.mknod) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return parent.node_ops.mknod(parent, name, mode, dev);
      },create:function (path, mode) {
        mode = mode !== undefined ? mode : 438 /* 0666 */;
        mode &= 4095;
        mode |= 32768;
        return FS.mknod(path, mode, 0);
      },mkdir:function (path, mode) {
        mode = mode !== undefined ? mode : 511 /* 0777 */;
        mode &= 511 | 512;
        mode |= 16384;
        return FS.mknod(path, mode, 0);
      },mkdirTree:function (path, mode) {
        var dirs = path.split('/');
        var d = '';
        for (var i = 0; i < dirs.length; ++i) {
          if (!dirs[i]) continue;
          d += '/' + dirs[i];
          try {
            FS.mkdir(d, mode);
          } catch(e) {
            if (e.errno != ERRNO_CODES.EEXIST) throw e;
          }
        }
      },mkdev:function (path, mode, dev) {
        if (typeof(dev) === 'undefined') {
          dev = mode;
          mode = 438 /* 0666 */;
        }
        mode |= 8192;
        return FS.mknod(path, mode, dev);
      },symlink:function (oldpath, newpath) {
        if (!PATH.resolve(oldpath)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        var lookup = FS.lookupPath(newpath, { parent: true });
        var parent = lookup.node;
        if (!parent) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        var newname = PATH.basename(newpath);
        var err = FS.mayCreate(parent, newname);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.symlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return parent.node_ops.symlink(parent, newname, oldpath);
      },rename:function (old_path, new_path) {
        var old_dirname = PATH.dirname(old_path);
        var new_dirname = PATH.dirname(new_path);
        var old_name = PATH.basename(old_path);
        var new_name = PATH.basename(new_path);
        // parents must exist
        var lookup, old_dir, new_dir;
        try {
          lookup = FS.lookupPath(old_path, { parent: true });
          old_dir = lookup.node;
          lookup = FS.lookupPath(new_path, { parent: true });
          new_dir = lookup.node;
        } catch (e) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        if (!old_dir || !new_dir) throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        // need to be part of the same mount
        if (old_dir.mount !== new_dir.mount) {
          throw new FS.ErrnoError(ERRNO_CODES.EXDEV);
        }
        // source must exist
        var old_node = FS.lookupNode(old_dir, old_name);
        // old path should not be an ancestor of the new path
        var relative = PATH.relative(old_path, new_dirname);
        if (relative.charAt(0) !== '.') {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        // new path should not be an ancestor of the old path
        relative = PATH.relative(new_path, old_dirname);
        if (relative.charAt(0) !== '.') {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
        }
        // see if the new path already exists
        var new_node;
        try {
          new_node = FS.lookupNode(new_dir, new_name);
        } catch (e) {
          // not fatal
        }
        // early out if nothing needs to change
        if (old_node === new_node) {
          return;
        }
        // we'll need to delete the old entry
        var isdir = FS.isDir(old_node.mode);
        var err = FS.mayDelete(old_dir, old_name, isdir);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        // need delete permissions if we'll be overwriting.
        // need create permissions if new doesn't already exist.
        err = new_node ?
          FS.mayDelete(new_dir, new_name, isdir) :
          FS.mayCreate(new_dir, new_name);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!old_dir.node_ops.rename) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(old_node) || (new_node && FS.isMountpoint(new_node))) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        // if we are going to change the parent, check write permissions
        if (new_dir !== old_dir) {
          err = FS.nodePermissions(old_dir, 'w');
          if (err) {
            throw new FS.ErrnoError(err);
          }
        }
        try {
          if (FS.trackingDelegate['willMovePath']) {
            FS.trackingDelegate['willMovePath'](old_path, new_path);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['willMovePath']('"+old_path+"', '"+new_path+"') threw an exception: " + e.message);
        }
        // remove the node from the lookup hash
        FS.hashRemoveNode(old_node);
        // do the underlying fs rename
        try {
          old_dir.node_ops.rename(old_node, new_dir, new_name);
        } catch (e) {
          throw e;
        } finally {
          // add the node back to the hash (in case node_ops.rename
          // changed its name)
          FS.hashAddNode(old_node);
        }
        try {
          if (FS.trackingDelegate['onMovePath']) FS.trackingDelegate['onMovePath'](old_path, new_path);
        } catch(e) {
          console.log("FS.trackingDelegate['onMovePath']('"+old_path+"', '"+new_path+"') threw an exception: " + e.message);
        }
      },rmdir:function (path) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        var node = FS.lookupNode(parent, name);
        var err = FS.mayDelete(parent, name, true);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.rmdir) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(node)) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        try {
          if (FS.trackingDelegate['willDeletePath']) {
            FS.trackingDelegate['willDeletePath'](path);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['willDeletePath']('"+path+"') threw an exception: " + e.message);
        }
        parent.node_ops.rmdir(parent, name);
        FS.destroyNode(node);
        try {
          if (FS.trackingDelegate['onDeletePath']) FS.trackingDelegate['onDeletePath'](path);
        } catch(e) {
          console.log("FS.trackingDelegate['onDeletePath']('"+path+"') threw an exception: " + e.message);
        }
      },readdir:function (path) {
        var lookup = FS.lookupPath(path, { follow: true });
        var node = lookup.node;
        if (!node.node_ops.readdir) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
        }
        return node.node_ops.readdir(node);
      },unlink:function (path) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        var node = FS.lookupNode(parent, name);
        var err = FS.mayDelete(parent, name, false);
        if (err) {
          // According to POSIX, we should map EISDIR to EPERM, but
          // we instead do what Linux does (and we must, as we use
          // the musl linux libc).
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.unlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(node)) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        try {
          if (FS.trackingDelegate['willDeletePath']) {
            FS.trackingDelegate['willDeletePath'](path);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['willDeletePath']('"+path+"') threw an exception: " + e.message);
        }
        parent.node_ops.unlink(parent, name);
        FS.destroyNode(node);
        try {
          if (FS.trackingDelegate['onDeletePath']) FS.trackingDelegate['onDeletePath'](path);
        } catch(e) {
          console.log("FS.trackingDelegate['onDeletePath']('"+path+"') threw an exception: " + e.message);
        }
      },readlink:function (path) {
        var lookup = FS.lookupPath(path);
        var link = lookup.node;
        if (!link) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        if (!link.node_ops.readlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        return PATH.resolve(FS.getPath(link.parent), link.node_ops.readlink(link));
      },stat:function (path, dontFollow) {
        var lookup = FS.lookupPath(path, { follow: !dontFollow });
        var node = lookup.node;
        if (!node) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        if (!node.node_ops.getattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return node.node_ops.getattr(node);
      },lstat:function (path) {
        return FS.stat(path, true);
      },chmod:function (path, mode, dontFollow) {
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: !dontFollow });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        node.node_ops.setattr(node, {
          mode: (mode & 4095) | (node.mode & ~4095),
          timestamp: Date.now()
        });
      },lchmod:function (path, mode) {
        FS.chmod(path, mode, true);
      },fchmod:function (fd, mode) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        FS.chmod(stream.node, mode);
      },chown:function (path, uid, gid, dontFollow) {
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: !dontFollow });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        node.node_ops.setattr(node, {
          timestamp: Date.now()
          // we ignore the uid / gid for now
        });
      },lchown:function (path, uid, gid) {
        FS.chown(path, uid, gid, true);
      },fchown:function (fd, uid, gid) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        FS.chown(stream.node, uid, gid);
      },truncate:function (path, len) {
        if (len < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: true });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isDir(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!FS.isFile(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var err = FS.nodePermissions(node, 'w');
        if (err) {
          throw new FS.ErrnoError(err);
        }
        node.node_ops.setattr(node, {
          size: len,
          timestamp: Date.now()
        });
      },ftruncate:function (fd, len) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        FS.truncate(stream.node, len);
      },utime:function (path, atime, mtime) {
        var lookup = FS.lookupPath(path, { follow: true });
        var node = lookup.node;
        node.node_ops.setattr(node, {
          timestamp: Math.max(atime, mtime)
        });
      },open:function (path, flags, mode, fd_start, fd_end) {
        if (path === "") {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        flags = typeof flags === 'string' ? FS.modeStringToFlags(flags) : flags;
        mode = typeof mode === 'undefined' ? 438 /* 0666 */ : mode;
        if ((flags & 64)) {
          mode = (mode & 4095) | 32768;
        } else {
          mode = 0;
        }
        var node;
        if (typeof path === 'object') {
          node = path;
        } else {
          path = PATH.normalize(path);
          try {
            var lookup = FS.lookupPath(path, {
              follow: !(flags & 131072)
            });
            node = lookup.node;
          } catch (e) {
            // ignore
          }
        }
        // perhaps we need to create the node
        var created = false;
        if ((flags & 64)) {
          if (node) {
            // if O_CREAT and O_EXCL are set, error out if the node already exists
            if ((flags & 128)) {
              throw new FS.ErrnoError(ERRNO_CODES.EEXIST);
            }
          } else {
            // node doesn't exist, try to create it
            node = FS.mknod(path, mode, 0);
            created = true;
          }
        }
        if (!node) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        // can't truncate a device
        if (FS.isChrdev(node.mode)) {
          flags &= ~512;
        }
        // if asked only for a directory, then this must be one
        if ((flags & 65536) && !FS.isDir(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
        }
        // check permissions, if this is not a file we just created now (it is ok to
        // create and write to a file with read-only permissions; it is read-only
        // for later use)
        if (!created) {
          var err = FS.mayOpen(node, flags);
          if (err) {
            throw new FS.ErrnoError(err);
          }
        }
        // do truncation if necessary
        if ((flags & 512)) {
          FS.truncate(node, 0);
        }
        // we've already handled these, don't pass down to the underlying vfs
        flags &= ~(128 | 512);
  
        // register the stream with the filesystem
        var stream = FS.createStream({
          node: node,
          path: FS.getPath(node),  // we want the absolute path to the node
          flags: flags,
          seekable: true,
          position: 0,
          stream_ops: node.stream_ops,
          // used by the file family libc calls (fopen, fwrite, ferror, etc.)
          ungotten: [],
          error: false
        }, fd_start, fd_end);
        // call the new stream's open function
        if (stream.stream_ops.open) {
          stream.stream_ops.open(stream);
        }
        if (Module['logReadFiles'] && !(flags & 1)) {
          if (!FS.readFiles) FS.readFiles = {};
          if (!(path in FS.readFiles)) {
            FS.readFiles[path] = 1;
            Module['printErr']('read file: ' + path);
          }
        }
        try {
          if (FS.trackingDelegate['onOpenFile']) {
            var trackingFlags = 0;
            if ((flags & 2097155) !== 1) {
              trackingFlags |= FS.tracking.openFlags.READ;
            }
            if ((flags & 2097155) !== 0) {
              trackingFlags |= FS.tracking.openFlags.WRITE;
            }
            FS.trackingDelegate['onOpenFile'](path, trackingFlags);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['onOpenFile']('"+path+"', flags) threw an exception: " + e.message);
        }
        return stream;
      },close:function (stream) {
        if (stream.getdents) stream.getdents = null; // free readdir state
        try {
          if (stream.stream_ops.close) {
            stream.stream_ops.close(stream);
          }
        } catch (e) {
          throw e;
        } finally {
          FS.closeStream(stream.fd);
        }
      },llseek:function (stream, offset, whence) {
        if (!stream.seekable || !stream.stream_ops.llseek) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        stream.position = stream.stream_ops.llseek(stream, offset, whence);
        stream.ungotten = [];
        return stream.position;
      },read:function (stream, buffer, offset, length, position) {
        if (length < 0 || position < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if ((stream.flags & 2097155) === 1) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!stream.stream_ops.read) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var seeking = true;
        if (typeof position === 'undefined') {
          position = stream.position;
          seeking = false;
        } else if (!stream.seekable) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        var bytesRead = stream.stream_ops.read(stream, buffer, offset, length, position);
        if (!seeking) stream.position += bytesRead;
        return bytesRead;
      },write:function (stream, buffer, offset, length, position, canOwn) {
        if (length < 0 || position < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!stream.stream_ops.write) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if (stream.flags & 1024) {
          // seek to the end before writing in append mode
          FS.llseek(stream, 0, 2);
        }
        var seeking = true;
        if (typeof position === 'undefined') {
          position = stream.position;
          seeking = false;
        } else if (!stream.seekable) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        var bytesWritten = stream.stream_ops.write(stream, buffer, offset, length, position, canOwn);
        if (!seeking) stream.position += bytesWritten;
        try {
          if (stream.path && FS.trackingDelegate['onWriteToFile']) FS.trackingDelegate['onWriteToFile'](stream.path);
        } catch(e) {
          console.log("FS.trackingDelegate['onWriteToFile']('"+path+"') threw an exception: " + e.message);
        }
        return bytesWritten;
      },allocate:function (stream, offset, length) {
        if (offset < 0 || length <= 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (!FS.isFile(stream.node.mode) && !FS.isDir(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
        }
        if (!stream.stream_ops.allocate) {
          throw new FS.ErrnoError(ERRNO_CODES.EOPNOTSUPP);
        }
        stream.stream_ops.allocate(stream, offset, length);
      },mmap:function (stream, buffer, offset, length, position, prot, flags) {
        // TODO if PROT is PROT_WRITE, make sure we have write access
        if ((stream.flags & 2097155) === 1) {
          throw new FS.ErrnoError(ERRNO_CODES.EACCES);
        }
        if (!stream.stream_ops.mmap) {
          throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
        }
        return stream.stream_ops.mmap(stream, buffer, offset, length, position, prot, flags);
      },msync:function (stream, buffer, offset, length, mmapFlags) {
        if (!stream || !stream.stream_ops.msync) {
          return 0;
        }
        return stream.stream_ops.msync(stream, buffer, offset, length, mmapFlags);
      },munmap:function (stream) {
        return 0;
      },ioctl:function (stream, cmd, arg) {
        if (!stream.stream_ops.ioctl) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTTY);
        }
        return stream.stream_ops.ioctl(stream, cmd, arg);
      },readFile:function (path, opts) {
        opts = opts || {};
        opts.flags = opts.flags || 'r';
        opts.encoding = opts.encoding || 'binary';
        if (opts.encoding !== 'utf8' && opts.encoding !== 'binary') {
          throw new Error('Invalid encoding type "' + opts.encoding + '"');
        }
        var ret;
        var stream = FS.open(path, opts.flags);
        var stat = FS.stat(path);
        var length = stat.size;
        var buf = new Uint8Array(length);
        FS.read(stream, buf, 0, length, 0);
        if (opts.encoding === 'utf8') {
          ret = UTF8ArrayToString(buf, 0);
        } else if (opts.encoding === 'binary') {
          ret = buf;
        }
        FS.close(stream);
        return ret;
      },writeFile:function (path, data, opts) {
        opts = opts || {};
        opts.flags = opts.flags || 'w';
        opts.encoding = opts.encoding || 'utf8';
        if (opts.encoding !== 'utf8' && opts.encoding !== 'binary') {
          throw new Error('Invalid encoding type "' + opts.encoding + '"');
        }
        var stream = FS.open(path, opts.flags, opts.mode);
        if (opts.encoding === 'utf8') {
          var buf = new Uint8Array(lengthBytesUTF8(data)+1);
          var actualNumBytes = stringToUTF8Array(data, buf, 0, buf.length);
          FS.write(stream, buf, 0, actualNumBytes, 0, opts.canOwn);
        } else if (opts.encoding === 'binary') {
          FS.write(stream, data, 0, data.length, 0, opts.canOwn);
        }
        FS.close(stream);
      },cwd:function () {
        return FS.currentPath;
      },chdir:function (path) {
        var lookup = FS.lookupPath(path, { follow: true });
        if (lookup.node === null) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        if (!FS.isDir(lookup.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
        }
        var err = FS.nodePermissions(lookup.node, 'x');
        if (err) {
          throw new FS.ErrnoError(err);
        }
        FS.currentPath = lookup.path;
      },createDefaultDirectories:function () {
        FS.mkdir('/tmp');
        FS.mkdir('/home');
        FS.mkdir('/home/web_user');
      },createDefaultDevices:function () {
        // create /dev
        FS.mkdir('/dev');
        // setup /dev/null
        FS.registerDevice(FS.makedev(1, 3), {
          read: function() { return 0; },
          write: function(stream, buffer, offset, length, pos) { return length; }
        });
        FS.mkdev('/dev/null', FS.makedev(1, 3));
        // setup /dev/tty and /dev/tty1
        // stderr needs to print output using Module['printErr']
        // so we register a second tty just for it.
        TTY.register(FS.makedev(5, 0), TTY.default_tty_ops);
        TTY.register(FS.makedev(6, 0), TTY.default_tty1_ops);
        FS.mkdev('/dev/tty', FS.makedev(5, 0));
        FS.mkdev('/dev/tty1', FS.makedev(6, 0));
        // setup /dev/[u]random
        var random_device;
        if (typeof crypto !== 'undefined') {
          // for modern web browsers
          var randomBuffer = new Uint8Array(1);
          random_device = function() { crypto.getRandomValues(randomBuffer); return randomBuffer[0]; };
        } else if (ENVIRONMENT_IS_NODE) {
          // for nodejs
          random_device = function() { return require('crypto').randomBytes(1)[0]; };
        } else {
          // default for ES5 platforms
          random_device = function() { return (Math.random()*256)|0; };
        }
        FS.createDevice('/dev', 'random', random_device);
        FS.createDevice('/dev', 'urandom', random_device);
        // we're not going to emulate the actual shm device,
        // just create the tmp dirs that reside in it commonly
        FS.mkdir('/dev/shm');
        FS.mkdir('/dev/shm/tmp');
      },createSpecialDirectories:function () {
        // create /proc/self/fd which allows /proc/self/fd/6 => readlink gives the name of the stream for fd 6 (see test_unistd_ttyname)
        FS.mkdir('/proc');
        FS.mkdir('/proc/self');
        FS.mkdir('/proc/self/fd');
        FS.mount({
          mount: function() {
            var node = FS.createNode('/proc/self', 'fd', 16384 | 511 /* 0777 */, 73);
            node.node_ops = {
              lookup: function(parent, name) {
                var fd = +name;
                var stream = FS.getStream(fd);
                if (!stream) throw new FS.ErrnoError(ERRNO_CODES.EBADF);
                var ret = {
                  parent: null,
                  mount: { mountpoint: 'fake' },
                  node_ops: { readlink: function() { return stream.path } }
                };
                ret.parent = ret; // make it look like a simple root node
                return ret;
              }
            };
            return node;
          }
        }, {}, '/proc/self/fd');
      },createStandardStreams:function () {
        // TODO deprecate the old functionality of a single
        // input / output callback and that utilizes FS.createDevice
        // and instead require a unique set of stream ops
  
        // by default, we symlink the standard streams to the
        // default tty devices. however, if the standard streams
        // have been overwritten we create a unique device for
        // them instead.
        if (Module['stdin']) {
          FS.createDevice('/dev', 'stdin', Module['stdin']);
        } else {
          FS.symlink('/dev/tty', '/dev/stdin');
        }
        if (Module['stdout']) {
          FS.createDevice('/dev', 'stdout', null, Module['stdout']);
        } else {
          FS.symlink('/dev/tty', '/dev/stdout');
        }
        if (Module['stderr']) {
          FS.createDevice('/dev', 'stderr', null, Module['stderr']);
        } else {
          FS.symlink('/dev/tty1', '/dev/stderr');
        }
  
        // open default streams for the stdin, stdout and stderr devices
        var stdin = FS.open('/dev/stdin', 'r');
        assert(stdin.fd === 0, 'invalid handle for stdin (' + stdin.fd + ')');
  
        var stdout = FS.open('/dev/stdout', 'w');
        assert(stdout.fd === 1, 'invalid handle for stdout (' + stdout.fd + ')');
  
        var stderr = FS.open('/dev/stderr', 'w');
        assert(stderr.fd === 2, 'invalid handle for stderr (' + stderr.fd + ')');
      },ensureErrnoError:function () {
        if (FS.ErrnoError) return;
        FS.ErrnoError = function ErrnoError(errno, node) {
          //Module.printErr(stackTrace()); // useful for debugging
          this.node = node;
          this.setErrno = function(errno) {
            this.errno = errno;
            for (var key in ERRNO_CODES) {
              if (ERRNO_CODES[key] === errno) {
                this.code = key;
                break;
              }
            }
          };
          this.setErrno(errno);
          this.message = ERRNO_MESSAGES[errno];
          if (this.stack) this.stack = demangleAll(this.stack);
        };
        FS.ErrnoError.prototype = new Error();
        FS.ErrnoError.prototype.constructor = FS.ErrnoError;
        // Some errors may happen quite a bit, to avoid overhead we reuse them (and suffer a lack of stack info)
        [ERRNO_CODES.ENOENT].forEach(function(code) {
          FS.genericErrors[code] = new FS.ErrnoError(code);
          FS.genericErrors[code].stack = '<generic error, no stack>';
        });
      },staticInit:function () {
        FS.ensureErrnoError();
  
        FS.nameTable = new Array(4096);
  
        FS.mount(MEMFS, {}, '/');
  
        FS.createDefaultDirectories();
        FS.createDefaultDevices();
        FS.createSpecialDirectories();
  
        FS.filesystems = {
          'MEMFS': MEMFS,
          'IDBFS': IDBFS,
          'NODEFS': NODEFS,
          'WORKERFS': WORKERFS,
        };
      },init:function (input, output, error) {
        assert(!FS.init.initialized, 'FS.init was previously called. If you want to initialize later with custom parameters, remove any earlier calls (note that one is automatically added to the generated code)');
        FS.init.initialized = true;
  
        FS.ensureErrnoError();
  
        // Allow Module.stdin etc. to provide defaults, if none explicitly passed to us here
        Module['stdin'] = input || Module['stdin'];
        Module['stdout'] = output || Module['stdout'];
        Module['stderr'] = error || Module['stderr'];
  
        FS.createStandardStreams();
      },quit:function () {
        FS.init.initialized = false;
        // force-flush all streams, so we get musl std streams printed out
        var fflush = Module['_fflush'];
        if (fflush) fflush(0);
        // close all of our streams
        for (var i = 0; i < FS.streams.length; i++) {
          var stream = FS.streams[i];
          if (!stream) {
            continue;
          }
          FS.close(stream);
        }
      },getMode:function (canRead, canWrite) {
        var mode = 0;
        if (canRead) mode |= 292 | 73;
        if (canWrite) mode |= 146;
        return mode;
      },joinPath:function (parts, forceRelative) {
        var path = PATH.join.apply(null, parts);
        if (forceRelative && path[0] == '/') path = path.substr(1);
        return path;
      },absolutePath:function (relative, base) {
        return PATH.resolve(base, relative);
      },standardizePath:function (path) {
        return PATH.normalize(path);
      },findObject:function (path, dontResolveLastLink) {
        var ret = FS.analyzePath(path, dontResolveLastLink);
        if (ret.exists) {
          return ret.object;
        } else {
          ___setErrNo(ret.error);
          return null;
        }
      },analyzePath:function (path, dontResolveLastLink) {
        // operate from within the context of the symlink's target
        try {
          var lookup = FS.lookupPath(path, { follow: !dontResolveLastLink });
          path = lookup.path;
        } catch (e) {
        }
        var ret = {
          isRoot: false, exists: false, error: 0, name: null, path: null, object: null,
          parentExists: false, parentPath: null, parentObject: null
        };
        try {
          var lookup = FS.lookupPath(path, { parent: true });
          ret.parentExists = true;
          ret.parentPath = lookup.path;
          ret.parentObject = lookup.node;
          ret.name = PATH.basename(path);
          lookup = FS.lookupPath(path, { follow: !dontResolveLastLink });
          ret.exists = true;
          ret.path = lookup.path;
          ret.object = lookup.node;
          ret.name = lookup.node.name;
          ret.isRoot = lookup.path === '/';
        } catch (e) {
          ret.error = e.errno;
        };
        return ret;
      },createFolder:function (parent, name, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(canRead, canWrite);
        return FS.mkdir(path, mode);
      },createPath:function (parent, path, canRead, canWrite) {
        parent = typeof parent === 'string' ? parent : FS.getPath(parent);
        var parts = path.split('/').reverse();
        while (parts.length) {
          var part = parts.pop();
          if (!part) continue;
          var current = PATH.join2(parent, part);
          try {
            FS.mkdir(current);
          } catch (e) {
            // ignore EEXIST
          }
          parent = current;
        }
        return current;
      },createFile:function (parent, name, properties, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(canRead, canWrite);
        return FS.create(path, mode);
      },createDataFile:function (parent, name, data, canRead, canWrite, canOwn) {
        var path = name ? PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name) : parent;
        var mode = FS.getMode(canRead, canWrite);
        var node = FS.create(path, mode);
        if (data) {
          if (typeof data === 'string') {
            var arr = new Array(data.length);
            for (var i = 0, len = data.length; i < len; ++i) arr[i] = data.charCodeAt(i);
            data = arr;
          }
          // make sure we can write to the file
          FS.chmod(node, mode | 146);
          var stream = FS.open(node, 'w');
          FS.write(stream, data, 0, data.length, 0, canOwn);
          FS.close(stream);
          FS.chmod(node, mode);
        }
        return node;
      },createDevice:function (parent, name, input, output) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(!!input, !!output);
        if (!FS.createDevice.major) FS.createDevice.major = 64;
        var dev = FS.makedev(FS.createDevice.major++, 0);
        // Create a fake device that a set of stream ops to emulate
        // the old behavior.
        FS.registerDevice(dev, {
          open: function(stream) {
            stream.seekable = false;
          },
          close: function(stream) {
            // flush any pending line data
            if (output && output.buffer && output.buffer.length) {
              output(10);
            }
          },
          read: function(stream, buffer, offset, length, pos /* ignored */) {
            var bytesRead = 0;
            for (var i = 0; i < length; i++) {
              var result;
              try {
                result = input();
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES.EIO);
              }
              if (result === undefined && bytesRead === 0) {
                throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
              }
              if (result === null || result === undefined) break;
              bytesRead++;
              buffer[offset+i] = result;
            }
            if (bytesRead) {
              stream.node.timestamp = Date.now();
            }
            return bytesRead;
          },
          write: function(stream, buffer, offset, length, pos) {
            for (var i = 0; i < length; i++) {
              try {
                output(buffer[offset+i]);
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES.EIO);
              }
            }
            if (length) {
              stream.node.timestamp = Date.now();
            }
            return i;
          }
        });
        return FS.mkdev(path, mode, dev);
      },createLink:function (parent, name, target, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        return FS.symlink(target, path);
      },forceLoadFile:function (obj) {
        if (obj.isDevice || obj.isFolder || obj.link || obj.contents) return true;
        var success = true;
        if (typeof XMLHttpRequest !== 'undefined') {
          throw new Error("Lazy loading should have been performed (contents set) in createLazyFile, but it was not. Lazy loading only works in web workers. Use --embed-file or --preload-file in emcc on the main thread.");
        } else if (Module['read']) {
          // Command-line.
          try {
            // WARNING: Can't read binary files in V8's d8 or tracemonkey's js, as
            //          read() will try to parse UTF8.
            obj.contents = intArrayFromString(Module['read'](obj.url), true);
            obj.usedBytes = obj.contents.length;
          } catch (e) {
            success = false;
          }
        } else {
          throw new Error('Cannot load without read() or XMLHttpRequest.');
        }
        if (!success) ___setErrNo(ERRNO_CODES.EIO);
        return success;
      },createLazyFile:function (parent, name, url, canRead, canWrite) {
        // Lazy chunked Uint8Array (implements get and length from Uint8Array). Actual getting is abstracted away for eventual reuse.
        function LazyUint8Array() {
          this.lengthKnown = false;
          this.chunks = []; // Loaded chunks. Index is the chunk number
        }
        LazyUint8Array.prototype.get = function LazyUint8Array_get(idx) {
          if (idx > this.length-1 || idx < 0) {
            return undefined;
          }
          var chunkOffset = idx % this.chunkSize;
          var chunkNum = (idx / this.chunkSize)|0;
          return this.getter(chunkNum)[chunkOffset];
        }
        LazyUint8Array.prototype.setDataGetter = function LazyUint8Array_setDataGetter(getter) {
          this.getter = getter;
        }
        LazyUint8Array.prototype.cacheLength = function LazyUint8Array_cacheLength() {
          // Find length
          var xhr = new XMLHttpRequest();
          xhr.open('HEAD', url, false);
          xhr.send(null);
          if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
          var datalength = Number(xhr.getResponseHeader("Content-length"));
          var header;
          var hasByteServing = (header = xhr.getResponseHeader("Accept-Ranges")) && header === "bytes";
          var usesGzip = (header = xhr.getResponseHeader("Content-Encoding")) && header === "gzip";
  
          var chunkSize = 1024*1024; // Chunk size in bytes
  
          if (!hasByteServing) chunkSize = datalength;
  
          // Function to get a range from the remote URL.
          var doXHR = (function(from, to) {
            if (from > to) throw new Error("invalid range (" + from + ", " + to + ") or no bytes requested!");
            if (to > datalength-1) throw new Error("only " + datalength + " bytes available! programmer error!");
  
            // TODO: Use mozResponseArrayBuffer, responseStream, etc. if available.
            var xhr = new XMLHttpRequest();
            xhr.open('GET', url, false);
            if (datalength !== chunkSize) xhr.setRequestHeader("Range", "bytes=" + from + "-" + to);
  
            // Some hints to the browser that we want binary data.
            if (typeof Uint8Array != 'undefined') xhr.responseType = 'arraybuffer';
            if (xhr.overrideMimeType) {
              xhr.overrideMimeType('text/plain; charset=x-user-defined');
            }
  
            xhr.send(null);
            if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
            if (xhr.response !== undefined) {
              return new Uint8Array(xhr.response || []);
            } else {
              return intArrayFromString(xhr.responseText || '', true);
            }
          });
          var lazyArray = this;
          lazyArray.setDataGetter(function(chunkNum) {
            var start = chunkNum * chunkSize;
            var end = (chunkNum+1) * chunkSize - 1; // including this byte
            end = Math.min(end, datalength-1); // if datalength-1 is selected, this is the last block
            if (typeof(lazyArray.chunks[chunkNum]) === "undefined") {
              lazyArray.chunks[chunkNum] = doXHR(start, end);
            }
            if (typeof(lazyArray.chunks[chunkNum]) === "undefined") throw new Error("doXHR failed!");
            return lazyArray.chunks[chunkNum];
          });
  
          if (usesGzip || !datalength) {
            // if the server uses gzip or doesn't supply the length, we have to download the whole file to get the (uncompressed) length
            chunkSize = datalength = 1; // this will force getter(0)/doXHR do download the whole file
            datalength = this.getter(0).length;
            chunkSize = datalength;
            console.log("LazyFiles on gzip forces download of the whole file when length is accessed");
          }
  
          this._length = datalength;
          this._chunkSize = chunkSize;
          this.lengthKnown = true;
        }
        if (typeof XMLHttpRequest !== 'undefined') {
          if (!ENVIRONMENT_IS_WORKER) throw 'Cannot do synchronous binary XHRs outside webworkers in modern browsers. Use --embed-file or --preload-file in emcc';
          var lazyArray = new LazyUint8Array();
          Object.defineProperties(lazyArray, {
            length: {
              get: function() {
                if(!this.lengthKnown) {
                  this.cacheLength();
                }
                return this._length;
              }
            },
            chunkSize: {
              get: function() {
                if(!this.lengthKnown) {
                  this.cacheLength();
                }
                return this._chunkSize;
              }
            }
          });
  
          var properties = { isDevice: false, contents: lazyArray };
        } else {
          var properties = { isDevice: false, url: url };
        }
  
        var node = FS.createFile(parent, name, properties, canRead, canWrite);
        // This is a total hack, but I want to get this lazy file code out of the
        // core of MEMFS. If we want to keep this lazy file concept I feel it should
        // be its own thin LAZYFS proxying calls to MEMFS.
        if (properties.contents) {
          node.contents = properties.contents;
        } else if (properties.url) {
          node.contents = null;
          node.url = properties.url;
        }
        // Add a function that defers querying the file size until it is asked the first time.
        Object.defineProperties(node, {
          usedBytes: {
            get: function() { return this.contents.length; }
          }
        });
        // override each stream op with one that tries to force load the lazy file first
        var stream_ops = {};
        var keys = Object.keys(node.stream_ops);
        keys.forEach(function(key) {
          var fn = node.stream_ops[key];
          stream_ops[key] = function forceLoadLazyFile() {
            if (!FS.forceLoadFile(node)) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
            return fn.apply(null, arguments);
          };
        });
        // use a custom read function
        stream_ops.read = function stream_ops_read(stream, buffer, offset, length, position) {
          if (!FS.forceLoadFile(node)) {
            throw new FS.ErrnoError(ERRNO_CODES.EIO);
          }
          var contents = stream.node.contents;
          if (position >= contents.length)
            return 0;
          var size = Math.min(contents.length - position, length);
          assert(size >= 0);
          if (contents.slice) { // normal array
            for (var i = 0; i < size; i++) {
              buffer[offset + i] = contents[position + i];
            }
          } else {
            for (var i = 0; i < size; i++) { // LazyUint8Array from sync binary XHR
              buffer[offset + i] = contents.get(position + i);
            }
          }
          return size;
        };
        node.stream_ops = stream_ops;
        return node;
      },createPreloadedFile:function (parent, name, url, canRead, canWrite, onload, onerror, dontCreateFile, canOwn, preFinish) {
        Browser.init(); // XXX perhaps this method should move onto Browser?
        // TODO we should allow people to just pass in a complete filename instead
        // of parent and name being that we just join them anyways
        var fullname = name ? PATH.resolve(PATH.join2(parent, name)) : parent;
        var dep = getUniqueRunDependency('cp ' + fullname); // might have several active requests for the same fullname
        function processData(byteArray) {
          function finish(byteArray) {
            if (preFinish) preFinish();
            if (!dontCreateFile) {
              FS.createDataFile(parent, name, byteArray, canRead, canWrite, canOwn);
            }
            if (onload) onload();
            removeRunDependency(dep);
          }
          var handled = false;
          Module['preloadPlugins'].forEach(function(plugin) {
            if (handled) return;
            if (plugin['canHandle'](fullname)) {
              plugin['handle'](byteArray, fullname, finish, function() {
                if (onerror) onerror();
                removeRunDependency(dep);
              });
              handled = true;
            }
          });
          if (!handled) finish(byteArray);
        }
        addRunDependency(dep);
        if (typeof url == 'string') {
          Browser.asyncLoad(url, function(byteArray) {
            processData(byteArray);
          }, onerror);
        } else {
          processData(url);
        }
      },indexedDB:function () {
        return window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB;
      },DB_NAME:function () {
        return 'EM_FS_' + window.location.pathname;
      },DB_VERSION:20,DB_STORE_NAME:"FILE_DATA",saveFilesToDB:function (paths, onload, onerror) {
        onload = onload || function(){};
        onerror = onerror || function(){};
        var indexedDB = FS.indexedDB();
        try {
          var openRequest = indexedDB.open(FS.DB_NAME(), FS.DB_VERSION);
        } catch (e) {
          return onerror(e);
        }
        openRequest.onupgradeneeded = function openRequest_onupgradeneeded() {
          console.log('creating db');
          var db = openRequest.result;
          db.createObjectStore(FS.DB_STORE_NAME);
        };
        openRequest.onsuccess = function openRequest_onsuccess() {
          var db = openRequest.result;
          var transaction = db.transaction([FS.DB_STORE_NAME], 'readwrite');
          var files = transaction.objectStore(FS.DB_STORE_NAME);
          var ok = 0, fail = 0, total = paths.length;
          function finish() {
            if (fail == 0) onload(); else onerror();
          }
          paths.forEach(function(path) {
            var putRequest = files.put(FS.analyzePath(path).object.contents, path);
            putRequest.onsuccess = function putRequest_onsuccess() { ok++; if (ok + fail == total) finish() };
            putRequest.onerror = function putRequest_onerror() { fail++; if (ok + fail == total) finish() };
          });
          transaction.onerror = onerror;
        };
        openRequest.onerror = onerror;
      },loadFilesFromDB:function (paths, onload, onerror) {
        onload = onload || function(){};
        onerror = onerror || function(){};
        var indexedDB = FS.indexedDB();
        try {
          var openRequest = indexedDB.open(FS.DB_NAME(), FS.DB_VERSION);
        } catch (e) {
          return onerror(e);
        }
        openRequest.onupgradeneeded = onerror; // no database to load from
        openRequest.onsuccess = function openRequest_onsuccess() {
          var db = openRequest.result;
          try {
            var transaction = db.transaction([FS.DB_STORE_NAME], 'readonly');
          } catch(e) {
            onerror(e);
            return;
          }
          var files = transaction.objectStore(FS.DB_STORE_NAME);
          var ok = 0, fail = 0, total = paths.length;
          function finish() {
            if (fail == 0) onload(); else onerror();
          }
          paths.forEach(function(path) {
            var getRequest = files.get(path);
            getRequest.onsuccess = function getRequest_onsuccess() {
              if (FS.analyzePath(path).exists) {
                FS.unlink(path);
              }
              FS.createDataFile(PATH.dirname(path), PATH.basename(path), getRequest.result, true, true, true);
              ok++;
              if (ok + fail == total) finish();
            };
            getRequest.onerror = function getRequest_onerror() { fail++; if (ok + fail == total) finish() };
          });
          transaction.onerror = onerror;
        };
        openRequest.onerror = onerror;
      }};var SYSCALLS={DEFAULT_POLLMASK:5,mappings:{},umask:511,calculateAt:function (dirfd, path) {
        if (path[0] !== '/') {
          // relative path
          var dir;
          if (dirfd === -100) {
            dir = FS.cwd();
          } else {
            var dirstream = FS.getStream(dirfd);
            if (!dirstream) throw new FS.ErrnoError(ERRNO_CODES.EBADF);
            dir = dirstream.path;
          }
          path = PATH.join2(dir, path);
        }
        return path;
      },doStat:function (func, path, buf) {
        try {
          var stat = func(path);
        } catch (e) {
          if (e && e.node && PATH.normalize(path) !== PATH.normalize(FS.getPath(e.node))) {
            // an error occurred while trying to look up the path; we should just report ENOTDIR
            return -ERRNO_CODES.ENOTDIR;
          }
          throw e;
        }
        HEAP32[((buf)>>2)]=stat.dev;
        HEAP32[(((buf)+(4))>>2)]=0;
        HEAP32[(((buf)+(8))>>2)]=stat.ino;
        HEAP32[(((buf)+(12))>>2)]=stat.mode;
        HEAP32[(((buf)+(16))>>2)]=stat.nlink;
        HEAP32[(((buf)+(20))>>2)]=stat.uid;
        HEAP32[(((buf)+(24))>>2)]=stat.gid;
        HEAP32[(((buf)+(28))>>2)]=stat.rdev;
        HEAP32[(((buf)+(32))>>2)]=0;
        HEAP32[(((buf)+(36))>>2)]=stat.size;
        HEAP32[(((buf)+(40))>>2)]=4096;
        HEAP32[(((buf)+(44))>>2)]=stat.blocks;
        HEAP32[(((buf)+(48))>>2)]=(stat.atime.getTime() / 1000)|0;
        HEAP32[(((buf)+(52))>>2)]=0;
        HEAP32[(((buf)+(56))>>2)]=(stat.mtime.getTime() / 1000)|0;
        HEAP32[(((buf)+(60))>>2)]=0;
        HEAP32[(((buf)+(64))>>2)]=(stat.ctime.getTime() / 1000)|0;
        HEAP32[(((buf)+(68))>>2)]=0;
        HEAP32[(((buf)+(72))>>2)]=stat.ino;
        return 0;
      },doMsync:function (addr, stream, len, flags) {
        var buffer = new Uint8Array(HEAPU8.subarray(addr, addr + len));
        FS.msync(stream, buffer, 0, len, flags);
      },doMkdir:function (path, mode) {
        // remove a trailing slash, if one - /a/b/ has basename of '', but
        // we want to create b in the context of this function
        path = PATH.normalize(path);
        if (path[path.length-1] === '/') path = path.substr(0, path.length-1);
        FS.mkdir(path, mode, 0);
        return 0;
      },doMknod:function (path, mode, dev) {
        // we don't want this in the JS API as it uses mknod to create all nodes.
        switch (mode & 61440) {
          case 32768:
          case 8192:
          case 24576:
          case 4096:
          case 49152:
            break;
          default: return -ERRNO_CODES.EINVAL;
        }
        FS.mknod(path, mode, dev);
        return 0;
      },doReadlink:function (path, buf, bufsize) {
        if (bufsize <= 0) return -ERRNO_CODES.EINVAL;
        var ret = FS.readlink(path);
  
        var len = Math.min(bufsize, lengthBytesUTF8(ret));
        var endChar = HEAP8[buf+len];
        stringToUTF8(ret, buf, bufsize+1);
        // readlink is one of the rare functions that write out a C string, but does never append a null to the output buffer(!)
        // stringToUTF8() always appends a null byte, so restore the character under the null byte after the write.
        HEAP8[buf+len] = endChar;
  
        return len;
      },doAccess:function (path, amode) {
        if (amode & ~7) {
          // need a valid mode
          return -ERRNO_CODES.EINVAL;
        }
        var node;
        var lookup = FS.lookupPath(path, { follow: true });
        node = lookup.node;
        var perms = '';
        if (amode & 4) perms += 'r';
        if (amode & 2) perms += 'w';
        if (amode & 1) perms += 'x';
        if (perms /* otherwise, they've just passed F_OK */ && FS.nodePermissions(node, perms)) {
          return -ERRNO_CODES.EACCES;
        }
        return 0;
      },doDup:function (path, flags, suggestFD) {
        var suggest = FS.getStream(suggestFD);
        if (suggest) FS.close(suggest);
        return FS.open(path, flags, 0, suggestFD, suggestFD).fd;
      },doReadv:function (stream, iov, iovcnt, offset) {
        var ret = 0;
        for (var i = 0; i < iovcnt; i++) {
          var ptr = HEAP32[(((iov)+(i*8))>>2)];
          var len = HEAP32[(((iov)+(i*8 + 4))>>2)];
          var curr = FS.read(stream, HEAP8,ptr, len, offset);
          if (curr < 0) return -1;
          ret += curr;
          if (curr < len) break; // nothing more to read
        }
        return ret;
      },doWritev:function (stream, iov, iovcnt, offset) {
        var ret = 0;
        for (var i = 0; i < iovcnt; i++) {
          var ptr = HEAP32[(((iov)+(i*8))>>2)];
          var len = HEAP32[(((iov)+(i*8 + 4))>>2)];
          var curr = FS.write(stream, HEAP8,ptr, len, offset);
          if (curr < 0) return -1;
          ret += curr;
        }
        return ret;
      },varargs:0,get:function (varargs) {
        SYSCALLS.varargs += 4;
        var ret = HEAP32[(((SYSCALLS.varargs)-(4))>>2)];
        return ret;
      },getStr:function () {
        var ret = Pointer_stringify(SYSCALLS.get());
        return ret;
      },getStreamFromFD:function () {
        var stream = FS.getStream(SYSCALLS.get());
        if (!stream) throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        return stream;
      },getSocketFromFD:function () {
        var socket = SOCKFS.getSocket(SYSCALLS.get());
        if (!socket) throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        return socket;
      },getSocketAddress:function (allowNull) {
        var addrp = SYSCALLS.get(), addrlen = SYSCALLS.get();
        if (allowNull && addrp === 0) return null;
        var info = __read_sockaddr(addrp, addrlen);
        if (info.errno) throw new FS.ErrnoError(info.errno);
        info.addr = DNS.lookup_addr(info.addr) || info.addr;
        return info;
      },get64:function () {
        var low = SYSCALLS.get(), high = SYSCALLS.get();
        if (low >= 0) assert(high === 0);
        else assert(high === -1);
        return low;
      },getZero:function () {
        assert(SYSCALLS.get() === 0);
      }};function ___syscall91(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // munmap
      var addr = SYSCALLS.get(), len = SYSCALLS.get();
      // TODO: support unmmap'ing parts of allocations
      var info = SYSCALLS.mappings[addr];
      if (!info) return 0;
      if (len === info.len) {
        var stream = FS.getStream(info.fd);
        SYSCALLS.doMsync(addr, stream, len, info.flags)
        FS.munmap(stream);
        SYSCALLS.mappings[addr] = null;
        if (info.allocated) {
          _free(info.malloc);
        }
      }
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___cxa_allocate_exception(size) {
      return _malloc(size);
    }

  function ___syscall54(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // ioctl
      var stream = SYSCALLS.getStreamFromFD(), op = SYSCALLS.get();
      switch (op) {
        case 21505: {
          if (!stream.tty) return -ERRNO_CODES.ENOTTY;
          return 0;
        }
        case 21506: {
          if (!stream.tty) return -ERRNO_CODES.ENOTTY;
          return 0; // no-op, not actually adjusting terminal settings
        }
        case 21519: {
          if (!stream.tty) return -ERRNO_CODES.ENOTTY;
          var argp = SYSCALLS.get();
          HEAP32[((argp)>>2)]=0;
          return 0;
        }
        case 21520: {
          if (!stream.tty) return -ERRNO_CODES.ENOTTY;
          return -ERRNO_CODES.EINVAL; // not supported
        }
        case 21531: {
          var argp = SYSCALLS.get();
          return FS.ioctl(stream, op, argp);
        }
        case 21523: {
          // TODO: in theory we should write to the winsize struct that gets
          // passed in, but for now musl doesn't read anything on it
          if (!stream.tty) return -ERRNO_CODES.ENOTTY;
          return 0;
        }
        default: abort('bad ioctl syscall ' + op);
      }
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

   
  Module["_bitshift64Lshr"] = _bitshift64Lshr;

  
  function heap32VectorToArray(count, firstElement) {
      var array = [];
      for (var i = 0; i < count; i++) {
          array.push(HEAP32[(firstElement >> 2) + i]);
      }
      return array;
    }function __embind_register_class_constructor(
      rawClassType,
      argCount,
      rawArgTypesAddr,
      invokerSignature,
      invoker,
      rawConstructor
    ) {
      var rawArgTypes = heap32VectorToArray(argCount, rawArgTypesAddr);
      invoker = requireFunction(invokerSignature, invoker);
  
      whenDependentTypesAreResolved([], [rawClassType], function(classType) {
          classType = classType[0];
          var humanName = 'constructor ' + classType.name;
  
          if (undefined === classType.registeredClass.constructor_body) {
              classType.registeredClass.constructor_body = [];
          }
          if (undefined !== classType.registeredClass.constructor_body[argCount - 1]) {
              throw new BindingError("Cannot register multiple constructors with identical number of parameters (" + (argCount-1) + ") for class '" + classType.name + "'! Overload resolution is currently only performed using the parameter count, not actual type info!");
          }
          classType.registeredClass.constructor_body[argCount - 1] = function unboundTypeHandler() {
              throwUnboundTypeError('Cannot construct ' + classType.name + ' due to unbound types', rawArgTypes);
          };
  
          whenDependentTypesAreResolved([], rawArgTypes, function(argTypes) {
              classType.registeredClass.constructor_body[argCount - 1] = function constructor_body() {
                  if (arguments.length !== argCount - 1) {
                      throwBindingError(humanName + ' called with ' + arguments.length + ' arguments, expected ' + (argCount-1));
                  }
                  var destructors = [];
                  var args = new Array(argCount);
                  args[0] = rawConstructor;
                  for (var i = 1; i < argCount; ++i) {
                      args[i] = argTypes[i]['toWireType'](destructors, arguments[i - 1]);
                  }
  
                  var ptr = invoker.apply(null, args);
                  runDestructors(destructors);
  
                  return argTypes[0]['fromWireType'](ptr);
              };
              return [];
          });
          return [];
      });
    }


  
  function floatReadValueFromPointer(name, shift) {
      switch (shift) {
          case 2: return function(pointer) {
              return this['fromWireType'](HEAPF32[pointer >> 2]);
          };
          case 3: return function(pointer) {
              return this['fromWireType'](HEAPF64[pointer >> 3]);
          };
          default:
              throw new TypeError("Unknown float type: " + name);
      }
    }function __embind_register_float(rawType, name, size) {
      var shift = getShiftFromSize(size);
      name = readLatin1String(name);
      registerType(rawType, {
          name: name,
          'fromWireType': function(value) {
              return value;
          },
          'toWireType': function(destructors, value) {
              // todo: Here we have an opportunity for -O3 level "unsafe" optimizations: we could
              // avoid the following if() and assume value is of proper type.
              if (typeof value !== "number" && typeof value !== "boolean") {
                  throw new TypeError('Cannot convert "' + _embind_repr(value) + '" to ' + this.name);
              }
              return value;
          },
          'argPackAdvance': 8,
          'readValueFromPointer': floatReadValueFromPointer(name, shift),
          destructorFunction: null, // This type does not need a destructor
      });
    }

   
  Module["_pthread_cond_broadcast"] = _pthread_cond_broadcast;

  
  
  
  
  var _environ=STATICTOP; STATICTOP += 16;;var ___environ=_environ;function ___buildEnvironment(env) {
      // WARNING: Arbitrary limit!
      var MAX_ENV_VALUES = 64;
      var TOTAL_ENV_SIZE = 1024;
  
      // Statically allocate memory for the environment.
      var poolPtr;
      var envPtr;
      if (!___buildEnvironment.called) {
        ___buildEnvironment.called = true;
        // Set default values. Use string keys for Closure Compiler compatibility.
        ENV['USER'] = ENV['LOGNAME'] = 'web_user';
        ENV['PATH'] = '/';
        ENV['PWD'] = '/';
        ENV['HOME'] = '/home/web_user';
        ENV['LANG'] = 'C';
        ENV['_'] = Module['thisProgram'];
        // Allocate memory.
        poolPtr = allocate(TOTAL_ENV_SIZE, 'i8', ALLOC_STATIC);
        envPtr = allocate(MAX_ENV_VALUES * 4,
                          'i8*', ALLOC_STATIC);
        HEAP32[((envPtr)>>2)]=poolPtr;
        HEAP32[((_environ)>>2)]=envPtr;
      } else {
        envPtr = HEAP32[((_environ)>>2)];
        poolPtr = HEAP32[((envPtr)>>2)];
      }
  
      // Collect key=value lines.
      var strings = [];
      var totalSize = 0;
      for (var key in env) {
        if (typeof env[key] === 'string') {
          var line = key + '=' + env[key];
          strings.push(line);
          totalSize += line.length;
        }
      }
      if (totalSize > TOTAL_ENV_SIZE) {
        throw new Error('Environment size exceeded TOTAL_ENV_SIZE!');
      }
  
      // Make new.
      var ptrSize = 4;
      for (var i = 0; i < strings.length; i++) {
        var line = strings[i];
        writeAsciiToMemory(line, poolPtr);
        HEAP32[(((envPtr)+(i * ptrSize))>>2)]=poolPtr;
        poolPtr += line.length + 1;
      }
      HEAP32[(((envPtr)+(strings.length * ptrSize))>>2)]=0;
    }var ENV={};function _getenv(name) {
      // char *getenv(const char *name);
      // http://pubs.opengroup.org/onlinepubs/009695399/functions/getenv.html
      if (name === 0) return 0;
      name = Pointer_stringify(name);
      if (!ENV.hasOwnProperty(name)) return 0;
  
      if (_getenv.ret) _free(_getenv.ret);
      _getenv.ret = allocate(intArrayFromString(ENV[name]), 'i8', ALLOC_NORMAL);
      return _getenv.ret;
    }

  function ___map_file(pathname, size) {
      ___setErrNo(ERRNO_CODES.EPERM);
      return -1;
    }

  function ___cxa_find_matching_catch_2() {
          return ___cxa_find_matching_catch.apply(null, arguments);
        }

  function ___cxa_find_matching_catch_3() {
          return ___cxa_find_matching_catch.apply(null, arguments);
        }

  function ___cxa_begin_catch(ptr) {
      var info = EXCEPTIONS.infos[ptr];
      if (info && !info.caught) {
        info.caught = true;
        __ZSt18uncaught_exceptionv.uncaught_exception--;
      }
      if (info) info.rethrown = false;
      EXCEPTIONS.caught.push(ptr);
      EXCEPTIONS.addRef(EXCEPTIONS.deAdjust(ptr));
      return ptr;
    }

  function _llvm_eh_typeid_for(type) {
      return type;
    }

  
  function _emscripten_memcpy_big(dest, src, num) {
      HEAPU8.set(HEAPU8.subarray(src, src+num), dest);
      return dest;
    } 
  Module["_memcpy"] = _memcpy;

  function ___syscall6(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // close
      var stream = SYSCALLS.getStreamFromFD();
      FS.close(stream);
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  
  
  var cttz_i8 = allocate([8,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,6,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,7,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,6,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0], "i8", ALLOC_STATIC); 
  Module["_llvm_cttz_i32"] = _llvm_cttz_i32; 
  Module["___udivmoddi4"] = ___udivmoddi4; 
  Module["___udivdi3"] = ___udivdi3;

  
   
  Module["___muldsi3"] = ___muldsi3; 
  Module["___muldi3"] = ___muldi3;

   
  Module["_sbrk"] = _sbrk;

   
  Module["_bitshift64Shl"] = _bitshift64Shl;

  function __embind_register_std_wstring(rawType, charSize, name) {
      // nb. do not cache HEAPU16 and HEAPU32, they may be destroyed by enlargeMemory().
      name = readLatin1String(name);
      var getHeap, shift;
      if (charSize === 2) {
          getHeap = function() { return HEAPU16; };
          shift = 1;
      } else if (charSize === 4) {
          getHeap = function() { return HEAPU32; };
          shift = 2;
      }
      registerType(rawType, {
          name: name,
          'fromWireType': function(value) {
              var HEAP = getHeap();
              var length = HEAPU32[value >> 2];
              var a = new Array(length);
              var start = (value + 4) >> shift;
              for (var i = 0; i < length; ++i) {
                  a[i] = String.fromCharCode(HEAP[start + i]);
              }
              _free(value);
              return a.join('');
          },
          'toWireType': function(destructors, value) {
              // assumes 4-byte alignment
              var HEAP = getHeap();
              var length = value.length;
              var ptr = _malloc(4 + length * charSize);
              HEAPU32[ptr >> 2] = length;
              var start = (ptr + 4) >> shift;
              for (var i = 0; i < length; ++i) {
                  HEAP[start + i] = value.charCodeAt(i);
              }
              if (destructors !== null) {
                  destructors.push(_free, ptr);
              }
              return ptr;
          },
          'argPackAdvance': 8,
          'readValueFromPointer': simpleReadValueFromPointer,
          destructorFunction: function(ptr) { _free(ptr); },
      });
    }

   
  Module["_memmove"] = _memmove;

  
  var SOCKFS={mount:function (mount) {
        // If Module['websocket'] has already been defined (e.g. for configuring
        // the subprotocol/url) use that, if not initialise it to a new object.
        Module['websocket'] = (Module['websocket'] && 
                               ('object' === typeof Module['websocket'])) ? Module['websocket'] : {};
  
        // Add the Event registration mechanism to the exported websocket configuration
        // object so we can register network callbacks from native JavaScript too.
        // For more documentation see system/include/emscripten/emscripten.h
        Module['websocket']._callbacks = {};
        Module['websocket']['on'] = function(event, callback) {
  	    if ('function' === typeof callback) {
  		  this._callbacks[event] = callback;
          }
  	    return this;
        };
  
        Module['websocket'].emit = function(event, param) {
  	    if ('function' === typeof this._callbacks[event]) {
  		  this._callbacks[event].call(this, param);
          }
        };
  
        // If debug is enabled register simple default logging callbacks for each Event.
  
        return FS.createNode(null, '/', 16384 | 511 /* 0777 */, 0);
      },createSocket:function (family, type, protocol) {
        var streaming = type == 1;
        if (protocol) {
          assert(streaming == (protocol == 6)); // if SOCK_STREAM, must be tcp
        }
  
        // create our internal socket structure
        var sock = {
          family: family,
          type: type,
          protocol: protocol,
          server: null,
          error: null, // Used in getsockopt for SOL_SOCKET/SO_ERROR test
          peers: {},
          pending: [],
          recv_queue: [],
          sock_ops: SOCKFS.websocket_sock_ops
        };
  
        // create the filesystem node to store the socket structure
        var name = SOCKFS.nextname();
        var node = FS.createNode(SOCKFS.root, name, 49152, 0);
        node.sock = sock;
  
        // and the wrapping stream that enables library functions such
        // as read and write to indirectly interact with the socket
        var stream = FS.createStream({
          path: name,
          node: node,
          flags: FS.modeStringToFlags('r+'),
          seekable: false,
          stream_ops: SOCKFS.stream_ops
        });
  
        // map the new stream to the socket structure (sockets have a 1:1
        // relationship with a stream)
        sock.stream = stream;
  
        return sock;
      },getSocket:function (fd) {
        var stream = FS.getStream(fd);
        if (!stream || !FS.isSocket(stream.node.mode)) {
          return null;
        }
        return stream.node.sock;
      },stream_ops:{poll:function (stream) {
          var sock = stream.node.sock;
          return sock.sock_ops.poll(sock);
        },ioctl:function (stream, request, varargs) {
          var sock = stream.node.sock;
          return sock.sock_ops.ioctl(sock, request, varargs);
        },read:function (stream, buffer, offset, length, position /* ignored */) {
          var sock = stream.node.sock;
          var msg = sock.sock_ops.recvmsg(sock, length);
          if (!msg) {
            // socket is closed
            return 0;
          }
          buffer.set(msg.buffer, offset);
          return msg.buffer.length;
        },write:function (stream, buffer, offset, length, position /* ignored */) {
          var sock = stream.node.sock;
          return sock.sock_ops.sendmsg(sock, buffer, offset, length);
        },close:function (stream) {
          var sock = stream.node.sock;
          sock.sock_ops.close(sock);
        }},nextname:function () {
        if (!SOCKFS.nextname.current) {
          SOCKFS.nextname.current = 0;
        }
        return 'socket[' + (SOCKFS.nextname.current++) + ']';
      },websocket_sock_ops:{createPeer:function (sock, addr, port) {
          var ws;
  
          if (typeof addr === 'object') {
            ws = addr;
            addr = null;
            port = null;
          }
  
          if (ws) {
            // for sockets that've already connected (e.g. we're the server)
            // we can inspect the _socket property for the address
            if (ws._socket) {
              addr = ws._socket.remoteAddress;
              port = ws._socket.remotePort;
            }
            // if we're just now initializing a connection to the remote,
            // inspect the url property
            else {
              var result = /ws[s]?:\/\/([^:]+):(\d+)/.exec(ws.url);
              if (!result) {
                throw new Error('WebSocket URL must be in the format ws(s)://address:port');
              }
              addr = result[1];
              port = parseInt(result[2], 10);
            }
          } else {
            // create the actual websocket object and connect
            try {
              // runtimeConfig gets set to true if WebSocket runtime configuration is available.
              var runtimeConfig = (Module['websocket'] && ('object' === typeof Module['websocket']));
  
              // The default value is 'ws://' the replace is needed because the compiler replaces '//' comments with '#'
              // comments without checking context, so we'd end up with ws:#, the replace swaps the '#' for '//' again.
              var url = 'ws:#'.replace('#', '//');
  
              if (runtimeConfig) {
                if ('string' === typeof Module['websocket']['url']) {
                  url = Module['websocket']['url']; // Fetch runtime WebSocket URL config.
                }
              }
  
              if (url === 'ws://' || url === 'wss://') { // Is the supplied URL config just a prefix, if so complete it.
                var parts = addr.split('/');
                url = url + parts[0] + ":" + port + "/" + parts.slice(1).join('/');
              }
  
              // Make the WebSocket subprotocol (Sec-WebSocket-Protocol) default to binary if no configuration is set.
              var subProtocols = 'binary'; // The default value is 'binary'
  
              if (runtimeConfig) {
                if ('string' === typeof Module['websocket']['subprotocol']) {
                  subProtocols = Module['websocket']['subprotocol']; // Fetch runtime WebSocket subprotocol config.
                }
              }
  
              // The regex trims the string (removes spaces at the beginning and end, then splits the string by
              // <any space>,<any space> into an Array. Whitespace removal is important for Websockify and ws.
              subProtocols = subProtocols.replace(/^ +| +$/g,"").split(/ *, */);
  
              // The node ws library API for specifying optional subprotocol is slightly different than the browser's.
              var opts = ENVIRONMENT_IS_NODE ? {'protocol': subProtocols.toString()} : subProtocols;
  
              // If node we use the ws library.
              var WebSocketConstructor;
              if (ENVIRONMENT_IS_NODE) {
                WebSocketConstructor = require('ws');
              } else if (ENVIRONMENT_IS_WEB) {
                WebSocketConstructor = window['WebSocket'];
              } else {
                WebSocketConstructor = WebSocket;
              }
              ws = new WebSocketConstructor(url, opts);
              ws.binaryType = 'arraybuffer';
            } catch (e) {
              throw new FS.ErrnoError(ERRNO_CODES.EHOSTUNREACH);
            }
          }
  
  
          var peer = {
            addr: addr,
            port: port,
            socket: ws,
            dgram_send_queue: []
          };
  
          SOCKFS.websocket_sock_ops.addPeer(sock, peer);
          SOCKFS.websocket_sock_ops.handlePeerEvents(sock, peer);
  
          // if this is a bound dgram socket, send the port number first to allow
          // us to override the ephemeral port reported to us by remotePort on the
          // remote end.
          if (sock.type === 2 && typeof sock.sport !== 'undefined') {
            peer.dgram_send_queue.push(new Uint8Array([
                255, 255, 255, 255,
                'p'.charCodeAt(0), 'o'.charCodeAt(0), 'r'.charCodeAt(0), 't'.charCodeAt(0),
                ((sock.sport & 0xff00) >> 8) , (sock.sport & 0xff)
            ]));
          }
  
          return peer;
        },getPeer:function (sock, addr, port) {
          return sock.peers[addr + ':' + port];
        },addPeer:function (sock, peer) {
          sock.peers[peer.addr + ':' + peer.port] = peer;
        },removePeer:function (sock, peer) {
          delete sock.peers[peer.addr + ':' + peer.port];
        },handlePeerEvents:function (sock, peer) {
          var first = true;
  
          var handleOpen = function () {
  
            Module['websocket'].emit('open', sock.stream.fd);
  
            try {
              var queued = peer.dgram_send_queue.shift();
              while (queued) {
                peer.socket.send(queued);
                queued = peer.dgram_send_queue.shift();
              }
            } catch (e) {
              // not much we can do here in the way of proper error handling as we've already
              // lied and said this data was sent. shut it down.
              peer.socket.close();
            }
          };
  
          function handleMessage(data) {
            assert(typeof data !== 'string' && data.byteLength !== undefined);  // must receive an ArrayBuffer
  
            // An empty ArrayBuffer will emit a pseudo disconnect event
            // as recv/recvmsg will return zero which indicates that a socket
            // has performed a shutdown although the connection has not been disconnected yet.
            if (data.byteLength == 0) {
              return;
            }
            data = new Uint8Array(data);  // make a typed array view on the array buffer
  
  
            // if this is the port message, override the peer's port with it
            var wasfirst = first;
            first = false;
            if (wasfirst &&
                data.length === 10 &&
                data[0] === 255 && data[1] === 255 && data[2] === 255 && data[3] === 255 &&
                data[4] === 'p'.charCodeAt(0) && data[5] === 'o'.charCodeAt(0) && data[6] === 'r'.charCodeAt(0) && data[7] === 't'.charCodeAt(0)) {
              // update the peer's port and it's key in the peer map
              var newport = ((data[8] << 8) | data[9]);
              SOCKFS.websocket_sock_ops.removePeer(sock, peer);
              peer.port = newport;
              SOCKFS.websocket_sock_ops.addPeer(sock, peer);
              return;
            }
  
            sock.recv_queue.push({ addr: peer.addr, port: peer.port, data: data });
            Module['websocket'].emit('message', sock.stream.fd);
          };
  
          if (ENVIRONMENT_IS_NODE) {
            peer.socket.on('open', handleOpen);
            peer.socket.on('message', function(data, flags) {
              if (!flags.binary) {
                return;
              }
              handleMessage((new Uint8Array(data)).buffer);  // copy from node Buffer -> ArrayBuffer
            });
            peer.socket.on('close', function() {
              Module['websocket'].emit('close', sock.stream.fd);
            });
            peer.socket.on('error', function(error) {
              // Although the ws library may pass errors that may be more descriptive than
              // ECONNREFUSED they are not necessarily the expected error code e.g. 
              // ENOTFOUND on getaddrinfo seems to be node.js specific, so using ECONNREFUSED
              // is still probably the most useful thing to do.
              sock.error = ERRNO_CODES.ECONNREFUSED; // Used in getsockopt for SOL_SOCKET/SO_ERROR test.
              Module['websocket'].emit('error', [sock.stream.fd, sock.error, 'ECONNREFUSED: Connection refused']);
              // don't throw
            });
          } else {
            peer.socket.onopen = handleOpen;
            peer.socket.onclose = function() {
              Module['websocket'].emit('close', sock.stream.fd);
            };
            peer.socket.onmessage = function peer_socket_onmessage(event) {
              handleMessage(event.data);
            };
            peer.socket.onerror = function(error) {
              // The WebSocket spec only allows a 'simple event' to be thrown on error,
              // so we only really know as much as ECONNREFUSED.
              sock.error = ERRNO_CODES.ECONNREFUSED; // Used in getsockopt for SOL_SOCKET/SO_ERROR test.
              Module['websocket'].emit('error', [sock.stream.fd, sock.error, 'ECONNREFUSED: Connection refused']);
            };
          }
        },poll:function (sock) {
          if (sock.type === 1 && sock.server) {
            // listen sockets should only say they're available for reading
            // if there are pending clients.
            return sock.pending.length ? (64 | 1) : 0;
          }
  
          var mask = 0;
          var dest = sock.type === 1 ?  // we only care about the socket state for connection-based sockets
            SOCKFS.websocket_sock_ops.getPeer(sock, sock.daddr, sock.dport) :
            null;
  
          if (sock.recv_queue.length ||
              !dest ||  // connection-less sockets are always ready to read
              (dest && dest.socket.readyState === dest.socket.CLOSING) ||
              (dest && dest.socket.readyState === dest.socket.CLOSED)) {  // let recv return 0 once closed
            mask |= (64 | 1);
          }
  
          if (!dest ||  // connection-less sockets are always ready to write
              (dest && dest.socket.readyState === dest.socket.OPEN)) {
            mask |= 4;
          }
  
          if ((dest && dest.socket.readyState === dest.socket.CLOSING) ||
              (dest && dest.socket.readyState === dest.socket.CLOSED)) {
            mask |= 16;
          }
  
          return mask;
        },ioctl:function (sock, request, arg) {
          switch (request) {
            case 21531:
              var bytes = 0;
              if (sock.recv_queue.length) {
                bytes = sock.recv_queue[0].data.length;
              }
              HEAP32[((arg)>>2)]=bytes;
              return 0;
            default:
              return ERRNO_CODES.EINVAL;
          }
        },close:function (sock) {
          // if we've spawned a listen server, close it
          if (sock.server) {
            try {
              sock.server.close();
            } catch (e) {
            }
            sock.server = null;
          }
          // close any peer connections
          var peers = Object.keys(sock.peers);
          for (var i = 0; i < peers.length; i++) {
            var peer = sock.peers[peers[i]];
            try {
              peer.socket.close();
            } catch (e) {
            }
            SOCKFS.websocket_sock_ops.removePeer(sock, peer);
          }
          return 0;
        },bind:function (sock, addr, port) {
          if (typeof sock.saddr !== 'undefined' || typeof sock.sport !== 'undefined') {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);  // already bound
          }
          sock.saddr = addr;
          sock.sport = port;
          // in order to emulate dgram sockets, we need to launch a listen server when
          // binding on a connection-less socket
          // note: this is only required on the server side
          if (sock.type === 2) {
            // close the existing server if it exists
            if (sock.server) {
              sock.server.close();
              sock.server = null;
            }
            // swallow error operation not supported error that occurs when binding in the
            // browser where this isn't supported
            try {
              sock.sock_ops.listen(sock, 0);
            } catch (e) {
              if (!(e instanceof FS.ErrnoError)) throw e;
              if (e.errno !== ERRNO_CODES.EOPNOTSUPP) throw e;
            }
          }
        },connect:function (sock, addr, port) {
          if (sock.server) {
            throw new FS.ErrnoError(ERRNO_CODES.EOPNOTSUPP);
          }
  
          // TODO autobind
          // if (!sock.addr && sock.type == 2) {
          // }
  
          // early out if we're already connected / in the middle of connecting
          if (typeof sock.daddr !== 'undefined' && typeof sock.dport !== 'undefined') {
            var dest = SOCKFS.websocket_sock_ops.getPeer(sock, sock.daddr, sock.dport);
            if (dest) {
              if (dest.socket.readyState === dest.socket.CONNECTING) {
                throw new FS.ErrnoError(ERRNO_CODES.EALREADY);
              } else {
                throw new FS.ErrnoError(ERRNO_CODES.EISCONN);
              }
            }
          }
  
          // add the socket to our peer list and set our
          // destination address / port to match
          var peer = SOCKFS.websocket_sock_ops.createPeer(sock, addr, port);
          sock.daddr = peer.addr;
          sock.dport = peer.port;
  
          // always "fail" in non-blocking mode
          throw new FS.ErrnoError(ERRNO_CODES.EINPROGRESS);
        },listen:function (sock, backlog) {
          if (!ENVIRONMENT_IS_NODE) {
            throw new FS.ErrnoError(ERRNO_CODES.EOPNOTSUPP);
          }
          if (sock.server) {
             throw new FS.ErrnoError(ERRNO_CODES.EINVAL);  // already listening
          }
          var WebSocketServer = require('ws').Server;
          var host = sock.saddr;
          sock.server = new WebSocketServer({
            host: host,
            port: sock.sport
            // TODO support backlog
          });
          Module['websocket'].emit('listen', sock.stream.fd); // Send Event with listen fd.
  
          sock.server.on('connection', function(ws) {
            if (sock.type === 1) {
              var newsock = SOCKFS.createSocket(sock.family, sock.type, sock.protocol);
  
              // create a peer on the new socket
              var peer = SOCKFS.websocket_sock_ops.createPeer(newsock, ws);
              newsock.daddr = peer.addr;
              newsock.dport = peer.port;
  
              // push to queue for accept to pick up
              sock.pending.push(newsock);
              Module['websocket'].emit('connection', newsock.stream.fd);
            } else {
              // create a peer on the listen socket so calling sendto
              // with the listen socket and an address will resolve
              // to the correct client
              SOCKFS.websocket_sock_ops.createPeer(sock, ws);
              Module['websocket'].emit('connection', sock.stream.fd);
            }
          });
          sock.server.on('closed', function() {
            Module['websocket'].emit('close', sock.stream.fd);
            sock.server = null;
          });
          sock.server.on('error', function(error) {
            // Although the ws library may pass errors that may be more descriptive than
            // ECONNREFUSED they are not necessarily the expected error code e.g. 
            // ENOTFOUND on getaddrinfo seems to be node.js specific, so using EHOSTUNREACH
            // is still probably the most useful thing to do. This error shouldn't
            // occur in a well written app as errors should get trapped in the compiled
            // app's own getaddrinfo call.
            sock.error = ERRNO_CODES.EHOSTUNREACH; // Used in getsockopt for SOL_SOCKET/SO_ERROR test.
            Module['websocket'].emit('error', [sock.stream.fd, sock.error, 'EHOSTUNREACH: Host is unreachable']);
            // don't throw
          });
        },accept:function (listensock) {
          if (!listensock.server) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          var newsock = listensock.pending.shift();
          newsock.stream.flags = listensock.stream.flags;
          return newsock;
        },getname:function (sock, peer) {
          var addr, port;
          if (peer) {
            if (sock.daddr === undefined || sock.dport === undefined) {
              throw new FS.ErrnoError(ERRNO_CODES.ENOTCONN);
            }
            addr = sock.daddr;
            port = sock.dport;
          } else {
            // TODO saddr and sport will be set for bind()'d UDP sockets, but what
            // should we be returning for TCP sockets that've been connect()'d?
            addr = sock.saddr || 0;
            port = sock.sport || 0;
          }
          return { addr: addr, port: port };
        },sendmsg:function (sock, buffer, offset, length, addr, port) {
          if (sock.type === 2) {
            // connection-less sockets will honor the message address,
            // and otherwise fall back to the bound destination address
            if (addr === undefined || port === undefined) {
              addr = sock.daddr;
              port = sock.dport;
            }
            // if there was no address to fall back to, error out
            if (addr === undefined || port === undefined) {
              throw new FS.ErrnoError(ERRNO_CODES.EDESTADDRREQ);
            }
          } else {
            // connection-based sockets will only use the bound
            addr = sock.daddr;
            port = sock.dport;
          }
  
          // find the peer for the destination address
          var dest = SOCKFS.websocket_sock_ops.getPeer(sock, addr, port);
  
          // early out if not connected with a connection-based socket
          if (sock.type === 1) {
            if (!dest || dest.socket.readyState === dest.socket.CLOSING || dest.socket.readyState === dest.socket.CLOSED) {
              throw new FS.ErrnoError(ERRNO_CODES.ENOTCONN);
            } else if (dest.socket.readyState === dest.socket.CONNECTING) {
              throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
            }
          }
  
          // create a copy of the incoming data to send, as the WebSocket API
          // doesn't work entirely with an ArrayBufferView, it'll just send
          // the entire underlying buffer
          var data;
          if (buffer instanceof Array || buffer instanceof ArrayBuffer) {
            data = buffer.slice(offset, offset + length);
          } else {  // ArrayBufferView
            data = buffer.buffer.slice(buffer.byteOffset + offset, buffer.byteOffset + offset + length);
          }
  
          // if we're emulating a connection-less dgram socket and don't have
          // a cached connection, queue the buffer to send upon connect and
          // lie, saying the data was sent now.
          if (sock.type === 2) {
            if (!dest || dest.socket.readyState !== dest.socket.OPEN) {
              // if we're not connected, open a new connection
              if (!dest || dest.socket.readyState === dest.socket.CLOSING || dest.socket.readyState === dest.socket.CLOSED) {
                dest = SOCKFS.websocket_sock_ops.createPeer(sock, addr, port);
              }
              dest.dgram_send_queue.push(data);
              return length;
            }
          }
  
          try {
            // send the actual data
            dest.socket.send(data);
            return length;
          } catch (e) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
        },recvmsg:function (sock, length) {
          // http://pubs.opengroup.org/onlinepubs/7908799/xns/recvmsg.html
          if (sock.type === 1 && sock.server) {
            // tcp servers should not be recv()'ing on the listen socket
            throw new FS.ErrnoError(ERRNO_CODES.ENOTCONN);
          }
  
          var queued = sock.recv_queue.shift();
          if (!queued) {
            if (sock.type === 1) {
              var dest = SOCKFS.websocket_sock_ops.getPeer(sock, sock.daddr, sock.dport);
  
              if (!dest) {
                // if we have a destination address but are not connected, error out
                throw new FS.ErrnoError(ERRNO_CODES.ENOTCONN);
              }
              else if (dest.socket.readyState === dest.socket.CLOSING || dest.socket.readyState === dest.socket.CLOSED) {
                // return null if the socket has closed
                return null;
              }
              else {
                // else, our socket is in a valid state but truly has nothing available
                throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
              }
            } else {
              throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
            }
          }
  
          // queued.data will be an ArrayBuffer if it's unadulterated, but if it's
          // requeued TCP data it'll be an ArrayBufferView
          var queuedLength = queued.data.byteLength || queued.data.length;
          var queuedOffset = queued.data.byteOffset || 0;
          var queuedBuffer = queued.data.buffer || queued.data;
          var bytesRead = Math.min(length, queuedLength);
          var res = {
            buffer: new Uint8Array(queuedBuffer, queuedOffset, bytesRead),
            addr: queued.addr,
            port: queued.port
          };
  
  
          // push back any unread data for TCP connections
          if (sock.type === 1 && bytesRead < queuedLength) {
            var bytesRemaining = queuedLength - bytesRead;
            queued.data = new Uint8Array(queuedBuffer, queuedOffset + bytesRead, bytesRemaining);
            sock.recv_queue.unshift(queued);
          }
  
          return res;
        }}};
  
  
  function __inet_pton4_raw(str) {
      var b = str.split('.');
      for (var i = 0; i < 4; i++) {
        var tmp = Number(b[i]);
        if (isNaN(tmp)) return null;
        b[i] = tmp;
      }
      return (b[0] | (b[1] << 8) | (b[2] << 16) | (b[3] << 24)) >>> 0;
    }
  
  
  var _htons=undefined;
  Module["_htons"] = _htons;function __inet_pton6_raw(str) {
      var words;
      var w, offset, z, i;
      /* http://home.deds.nl/~aeron/regex/ */
      var valid6regx = /^((?=.*::)(?!.*::.+::)(::)?([\dA-F]{1,4}:(:|\b)|){5}|([\dA-F]{1,4}:){6})((([\dA-F]{1,4}((?!\3)::|:\b|$))|(?!\2\3)){2}|(((2[0-4]|1\d|[1-9])?\d|25[0-5])\.?\b){4})$/i
      var parts = [];
      if (!valid6regx.test(str)) {
        return null;
      }
      if (str === "::") {
        return [0, 0, 0, 0, 0, 0, 0, 0];
      }
      // Z placeholder to keep track of zeros when splitting the string on ":"
      if (str.indexOf("::") === 0) {
        str = str.replace("::", "Z:"); // leading zeros case
      } else {
        str = str.replace("::", ":Z:");
      }
  
      if (str.indexOf(".") > 0) {
        // parse IPv4 embedded stress
        str = str.replace(new RegExp('[.]', 'g'), ":");
        words = str.split(":");
        words[words.length-4] = parseInt(words[words.length-4]) + parseInt(words[words.length-3])*256;
        words[words.length-3] = parseInt(words[words.length-2]) + parseInt(words[words.length-1])*256;
        words = words.slice(0, words.length-2);
      } else {
        words = str.split(":");
      }
  
      offset = 0; z = 0;
      for (w=0; w < words.length; w++) {
        if (typeof words[w] === 'string') {
          if (words[w] === 'Z') {
            // compressed zeros - write appropriate number of zero words
            for (z = 0; z < (8 - words.length+1); z++) {
              parts[w+z] = 0;
            }
            offset = z-1;
          } else {
            // parse hex to field to 16-bit value and write it in network byte-order
            parts[w+offset] = _htons(parseInt(words[w],16));
          }
        } else {
          // parsed IPv4 words
          parts[w+offset] = words[w];
        }
      }
      return [
        (parts[1] << 16) | parts[0],
        (parts[3] << 16) | parts[2],
        (parts[5] << 16) | parts[4],
        (parts[7] << 16) | parts[6]
      ];
    }var DNS={address_map:{id:1,addrs:{},names:{}},lookup_name:function (name) {
        // If the name is already a valid ipv4 / ipv6 address, don't generate a fake one.
        var res = __inet_pton4_raw(name);
        if (res !== null) {
          return name;
        }
        res = __inet_pton6_raw(name);
        if (res !== null) {
          return name;
        }
  
        // See if this name is already mapped.
        var addr;
  
        if (DNS.address_map.addrs[name]) {
          addr = DNS.address_map.addrs[name];
        } else {
          var id = DNS.address_map.id++;
          assert(id < 65535, 'exceeded max address mappings of 65535');
  
          addr = '172.29.' + (id & 0xff) + '.' + (id & 0xff00);
  
          DNS.address_map.names[addr] = name;
          DNS.address_map.addrs[name] = addr;
        }
  
        return addr;
      },lookup_addr:function (addr) {
        if (DNS.address_map.names[addr]) {
          return DNS.address_map.names[addr];
        }
  
        return null;
      }};
  
  
  var Sockets={BUFFER_SIZE:10240,MAX_BUFFER_SIZE:10485760,nextFd:1,fds:{},nextport:1,maxport:65535,peer:null,connections:{},portmap:{},localAddr:4261412874,addrPool:[33554442,50331658,67108874,83886090,100663306,117440522,134217738,150994954,167772170,184549386,201326602,218103818,234881034]};
  
  function __inet_ntop4_raw(addr) {
      return (addr & 0xff) + '.' + ((addr >> 8) & 0xff) + '.' + ((addr >> 16) & 0xff) + '.' + ((addr >> 24) & 0xff)
    }
  
  function __inet_ntop6_raw(ints) {
      //  ref:  http://www.ietf.org/rfc/rfc2373.txt - section 2.5.4
      //  Format for IPv4 compatible and mapped  128-bit IPv6 Addresses
      //  128-bits are split into eight 16-bit words
      //  stored in network byte order (big-endian)
      //  |                80 bits               | 16 |      32 bits        |
      //  +-----------------------------------------------------------------+
      //  |               10 bytes               |  2 |      4 bytes        |
      //  +--------------------------------------+--------------------------+
      //  +               5 words                |  1 |      2 words        |
      //  +--------------------------------------+--------------------------+
      //  |0000..............................0000|0000|    IPv4 ADDRESS     | (compatible)
      //  +--------------------------------------+----+---------------------+
      //  |0000..............................0000|FFFF|    IPv4 ADDRESS     | (mapped)
      //  +--------------------------------------+----+---------------------+
      var str = "";
      var word = 0;
      var longest = 0;
      var lastzero = 0;
      var zstart = 0;
      var len = 0;
      var i = 0;
      var parts = [
        ints[0] & 0xffff,
        (ints[0] >> 16),
        ints[1] & 0xffff,
        (ints[1] >> 16),
        ints[2] & 0xffff,
        (ints[2] >> 16),
        ints[3] & 0xffff,
        (ints[3] >> 16)
      ];
  
      // Handle IPv4-compatible, IPv4-mapped, loopback and any/unspecified addresses
  
      var hasipv4 = true;
      var v4part = "";
      // check if the 10 high-order bytes are all zeros (first 5 words)
      for (i = 0; i < 5; i++) {
        if (parts[i] !== 0) { hasipv4 = false; break; }
      }
  
      if (hasipv4) {
        // low-order 32-bits store an IPv4 address (bytes 13 to 16) (last 2 words)
        v4part = __inet_ntop4_raw(parts[6] | (parts[7] << 16));
        // IPv4-mapped IPv6 address if 16-bit value (bytes 11 and 12) == 0xFFFF (6th word)
        if (parts[5] === -1) {
          str = "::ffff:";
          str += v4part;
          return str;
        }
        // IPv4-compatible IPv6 address if 16-bit value (bytes 11 and 12) == 0x0000 (6th word)
        if (parts[5] === 0) {
          str = "::";
          //special case IPv6 addresses
          if(v4part === "0.0.0.0") v4part = ""; // any/unspecified address
          if(v4part === "0.0.0.1") v4part = "1";// loopback address
          str += v4part;
          return str;
        }
      }
  
      // Handle all other IPv6 addresses
  
      // first run to find the longest contiguous zero words
      for (word = 0; word < 8; word++) {
        if (parts[word] === 0) {
          if (word - lastzero > 1) {
            len = 0;
          }
          lastzero = word;
          len++;
        }
        if (len > longest) {
          longest = len;
          zstart = word - longest + 1;
        }
      }
  
      for (word = 0; word < 8; word++) {
        if (longest > 1) {
          // compress contiguous zeros - to produce "::"
          if (parts[word] === 0 && word >= zstart && word < (zstart + longest) ) {
            if (word === zstart) {
              str += ":";
              if (zstart === 0) str += ":"; //leading zeros case
            }
            continue;
          }
        }
        // converts 16-bit words from big-endian to little-endian before converting to hex string
        str += Number(_ntohs(parts[word] & 0xffff)).toString(16);
        str += word < 7 ? ":" : "";
      }
      return str;
    }function __read_sockaddr(sa, salen) {
      // family / port offsets are common to both sockaddr_in and sockaddr_in6
      var family = HEAP16[((sa)>>1)];
      var port = _ntohs(HEAP16[(((sa)+(2))>>1)]);
      var addr;
  
      switch (family) {
        case 2:
          if (salen !== 16) {
            return { errno: ERRNO_CODES.EINVAL };
          }
          addr = HEAP32[(((sa)+(4))>>2)];
          addr = __inet_ntop4_raw(addr);
          break;
        case 10:
          if (salen !== 28) {
            return { errno: ERRNO_CODES.EINVAL };
          }
          addr = [
            HEAP32[(((sa)+(8))>>2)],
            HEAP32[(((sa)+(12))>>2)],
            HEAP32[(((sa)+(16))>>2)],
            HEAP32[(((sa)+(20))>>2)]
          ];
          addr = __inet_ntop6_raw(addr);
          break;
        default:
          return { errno: ERRNO_CODES.EAFNOSUPPORT };
      }
  
      return { family: family, addr: addr, port: port };
    }
  
  function __write_sockaddr(sa, family, addr, port) {
      switch (family) {
        case 2:
          addr = __inet_pton4_raw(addr);
          HEAP16[((sa)>>1)]=family;
          HEAP32[(((sa)+(4))>>2)]=addr;
          HEAP16[(((sa)+(2))>>1)]=_htons(port);
          break;
        case 10:
          addr = __inet_pton6_raw(addr);
          HEAP32[((sa)>>2)]=family;
          HEAP32[(((sa)+(8))>>2)]=addr[0];
          HEAP32[(((sa)+(12))>>2)]=addr[1];
          HEAP32[(((sa)+(16))>>2)]=addr[2];
          HEAP32[(((sa)+(20))>>2)]=addr[3];
          HEAP16[(((sa)+(2))>>1)]=_htons(port);
          HEAP32[(((sa)+(4))>>2)]=0;
          HEAP32[(((sa)+(24))>>2)]=0;
          break;
        default:
          return { errno: ERRNO_CODES.EAFNOSUPPORT };
      }
      // kind of lame, but let's match _read_sockaddr's interface
      return {};
    }function ___syscall102(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // socketcall
      var call = SYSCALLS.get(), socketvararg = SYSCALLS.get();
      // socketcalls pass the rest of the arguments in a struct
      SYSCALLS.varargs = socketvararg;
      switch (call) {
        case 1: { // socket
          var domain = SYSCALLS.get(), type = SYSCALLS.get(), protocol = SYSCALLS.get();
          var sock = SOCKFS.createSocket(domain, type, protocol);
          assert(sock.stream.fd < 64); // XXX ? select() assumes socket fd values are in 0..63
          return sock.stream.fd;
        }
        case 2: { // bind
          var sock = SYSCALLS.getSocketFromFD(), info = SYSCALLS.getSocketAddress();
          sock.sock_ops.bind(sock, info.addr, info.port);
          return 0;
        }
        case 3: { // connect
          var sock = SYSCALLS.getSocketFromFD(), info = SYSCALLS.getSocketAddress();
          sock.sock_ops.connect(sock, info.addr, info.port);
          return 0;
        }
        case 4: { // listen
          var sock = SYSCALLS.getSocketFromFD(), backlog = SYSCALLS.get();
          sock.sock_ops.listen(sock, backlog);
          return 0;
        }
        case 5: { // accept
          var sock = SYSCALLS.getSocketFromFD(), addr = SYSCALLS.get(), addrlen = SYSCALLS.get();
          var newsock = sock.sock_ops.accept(sock);
          if (addr) {
            var res = __write_sockaddr(addr, newsock.family, DNS.lookup_name(newsock.daddr), newsock.dport);
            assert(!res.errno);
          }
          return newsock.stream.fd;
        }
        case 6: { // getsockname
          var sock = SYSCALLS.getSocketFromFD(), addr = SYSCALLS.get(), addrlen = SYSCALLS.get();
          // TODO: sock.saddr should never be undefined, see TODO in websocket_sock_ops.getname
          var res = __write_sockaddr(addr, sock.family, DNS.lookup_name(sock.saddr || '0.0.0.0'), sock.sport);
          assert(!res.errno);
          return 0;
        }
        case 7: { // getpeername
          var sock = SYSCALLS.getSocketFromFD(), addr = SYSCALLS.get(), addrlen = SYSCALLS.get();
          if (!sock.daddr) {
            return -ERRNO_CODES.ENOTCONN; // The socket is not connected.
          }
          var res = __write_sockaddr(addr, sock.family, DNS.lookup_name(sock.daddr), sock.dport);
          assert(!res.errno);
          return 0;
        }
        case 11: { // sendto
          var sock = SYSCALLS.getSocketFromFD(), message = SYSCALLS.get(), length = SYSCALLS.get(), flags = SYSCALLS.get(), dest = SYSCALLS.getSocketAddress(true);
          if (!dest) {
            // send, no address provided
            return FS.write(sock.stream, HEAP8,message, length);
          } else {
            // sendto an address
            return sock.sock_ops.sendmsg(sock, HEAP8,message, length, dest.addr, dest.port);
          }
        }
        case 12: { // recvfrom
          var sock = SYSCALLS.getSocketFromFD(), buf = SYSCALLS.get(), len = SYSCALLS.get(), flags = SYSCALLS.get(), addr = SYSCALLS.get(), addrlen = SYSCALLS.get();
          var msg = sock.sock_ops.recvmsg(sock, len);
          if (!msg) return 0; // socket is closed
          if (addr) {
            var res = __write_sockaddr(addr, sock.family, DNS.lookup_name(msg.addr), msg.port);
            assert(!res.errno);
          }
          HEAPU8.set(msg.buffer, buf);
          return msg.buffer.byteLength;
        }
        case 14: { // setsockopt
          return -ERRNO_CODES.ENOPROTOOPT; // The option is unknown at the level indicated.
        }
        case 15: { // getsockopt
          var sock = SYSCALLS.getSocketFromFD(), level = SYSCALLS.get(), optname = SYSCALLS.get(), optval = SYSCALLS.get(), optlen = SYSCALLS.get();
          // Minimal getsockopt aimed at resolving https://github.com/kripken/emscripten/issues/2211
          // so only supports SOL_SOCKET with SO_ERROR.
          if (level === 1) {
            if (optname === 4) {
              HEAP32[((optval)>>2)]=sock.error;
              HEAP32[((optlen)>>2)]=4;
              sock.error = null; // Clear the error (The SO_ERROR option obtains and then clears this field).
              return 0;
            }
          }
          return -ERRNO_CODES.ENOPROTOOPT; // The option is unknown at the level indicated.
        }
        case 16: { // sendmsg
          var sock = SYSCALLS.getSocketFromFD(), message = SYSCALLS.get(), flags = SYSCALLS.get();
          var iov = HEAP32[(((message)+(8))>>2)];
          var num = HEAP32[(((message)+(12))>>2)];
          // read the address and port to send to
          var addr, port;
          var name = HEAP32[((message)>>2)];
          var namelen = HEAP32[(((message)+(4))>>2)];
          if (name) {
            var info = __read_sockaddr(name, namelen);
            if (info.errno) return -info.errno;
            port = info.port;
            addr = DNS.lookup_addr(info.addr) || info.addr;
          }
          // concatenate scatter-gather arrays into one message buffer
          var total = 0;
          for (var i = 0; i < num; i++) {
            total += HEAP32[(((iov)+((8 * i) + 4))>>2)];
          }
          var view = new Uint8Array(total);
          var offset = 0;
          for (var i = 0; i < num; i++) {
            var iovbase = HEAP32[(((iov)+((8 * i) + 0))>>2)];
            var iovlen = HEAP32[(((iov)+((8 * i) + 4))>>2)];
            for (var j = 0; j < iovlen; j++) {  
              view[offset++] = HEAP8[(((iovbase)+(j))>>0)];
            }
          }
          // write the buffer
          return sock.sock_ops.sendmsg(sock, view, 0, total, addr, port);
        }
        case 17: { // recvmsg
          var sock = SYSCALLS.getSocketFromFD(), message = SYSCALLS.get(), flags = SYSCALLS.get();
          var iov = HEAP32[(((message)+(8))>>2)];
          var num = HEAP32[(((message)+(12))>>2)];
          // get the total amount of data we can read across all arrays
          var total = 0;
          for (var i = 0; i < num; i++) {
            total += HEAP32[(((iov)+((8 * i) + 4))>>2)];
          }
          // try to read total data
          var msg = sock.sock_ops.recvmsg(sock, total);
          if (!msg) return 0; // socket is closed
  
          // TODO honor flags:
          // MSG_OOB
          // Requests out-of-band data. The significance and semantics of out-of-band data are protocol-specific.
          // MSG_PEEK
          // Peeks at the incoming message.
          // MSG_WAITALL
          // Requests that the function block until the full amount of data requested can be returned. The function may return a smaller amount of data if a signal is caught, if the connection is terminated, if MSG_PEEK was specified, or if an error is pending for the socket.
  
          // write the source address out
          var name = HEAP32[((message)>>2)];
          if (name) {
            var res = __write_sockaddr(name, sock.family, DNS.lookup_name(msg.addr), msg.port);
            assert(!res.errno);
          }
          // write the buffer out to the scatter-gather arrays
          var bytesRead = 0;
          var bytesRemaining = msg.buffer.byteLength;
          for (var i = 0; bytesRemaining > 0 && i < num; i++) {
            var iovbase = HEAP32[(((iov)+((8 * i) + 0))>>2)];
            var iovlen = HEAP32[(((iov)+((8 * i) + 4))>>2)];
            if (!iovlen) {
              continue;
            }
            var length = Math.min(iovlen, bytesRemaining);
            var buf = msg.buffer.subarray(bytesRead, bytesRead + length);
            HEAPU8.set(buf, iovbase + bytesRead);
            bytesRead += length;
            bytesRemaining -= length;
          }
  
          // TODO set msghdr.msg_flags
          // MSG_EOR
          // End of record was received (if supported by the protocol).
          // MSG_OOB
          // Out-of-band data was received.
          // MSG_TRUNC
          // Normal data was truncated.
          // MSG_CTRUNC
  
          return bytesRead;
        }
        default: abort('unsupported socketcall syscall ' + call);
      }
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___gxx_personality_v0() {
    }

   
  Module["___uremdi3"] = ___uremdi3;

  function _pthread_cond_wait() { return 0; }

  function ___cxa_rethrow() {
      var ptr = EXCEPTIONS.caught.pop();
      if (!EXCEPTIONS.infos[ptr].rethrown) {
        // Only pop if the corresponding push was through rethrow_primary_exception
        EXCEPTIONS.caught.push(ptr)
        EXCEPTIONS.infos[ptr].rethrown = true;
      }
      EXCEPTIONS.last = ptr;
      throw ptr;
    }

   
  Module["_pthread_mutex_unlock"] = _pthread_mutex_unlock;

   
  Module["_llvm_bswap_i32"] = _llvm_bswap_i32;

   
  Module["_llvm_bswap_i16"] = _llvm_bswap_i16;


  
  
  function new_(constructor, argumentList) {
      if (!(constructor instanceof Function)) {
          throw new TypeError('new_ called with constructor type ' + typeof(constructor) + " which is not a function");
      }
  
      /*
       * Previously, the following line was just:
  
       function dummy() {};
  
       * Unfortunately, Chrome was preserving 'dummy' as the object's name, even though at creation, the 'dummy' has the
       * correct constructor name.  Thus, objects created with IMVU.new would show up in the debugger as 'dummy', which
       * isn't very helpful.  Using IMVU.createNamedFunction addresses the issue.  Doublely-unfortunately, there's no way
       * to write a test for this behavior.  -NRD 2013.02.22
       */
      var dummy = createNamedFunction(constructor.name || 'unknownFunctionName', function(){});
      dummy.prototype = constructor.prototype;
      var obj = new dummy;
  
      var r = constructor.apply(obj, argumentList);
      return (r instanceof Object) ? r : obj;
    }function craftInvokerFunction(humanName, argTypes, classType, cppInvokerFunc, cppTargetFunc) {
      // humanName: a human-readable string name for the function to be generated.
      // argTypes: An array that contains the embind type objects for all types in the function signature.
      //    argTypes[0] is the type object for the function return value.
      //    argTypes[1] is the type object for function this object/class type, or null if not crafting an invoker for a class method.
      //    argTypes[2...] are the actual function parameters.
      // classType: The embind type object for the class to be bound, or null if this is not a method of a class.
      // cppInvokerFunc: JS Function object to the C++-side function that interops into C++ code.
      // cppTargetFunc: Function pointer (an integer to FUNCTION_TABLE) to the target C++ function the cppInvokerFunc will end up calling.
      var argCount = argTypes.length;
  
      if (argCount < 2) {
          throwBindingError("argTypes array size mismatch! Must at least get return value and 'this' types!");
      }
  
      var isClassMethodFunc = (argTypes[1] !== null && classType !== null);
  
      // Free functions with signature "void function()" do not need an invoker that marshalls between wire types.
  // TODO: This omits argument count check - enable only at -O3 or similar.
  //    if (ENABLE_UNSAFE_OPTS && argCount == 2 && argTypes[0].name == "void" && !isClassMethodFunc) {
  //       return FUNCTION_TABLE[fn];
  //    }
  
      var argsList = "";
      var argsListWired = "";
      for(var i = 0; i < argCount - 2; ++i) {
          argsList += (i!==0?", ":"")+"arg"+i;
          argsListWired += (i!==0?", ":"")+"arg"+i+"Wired";
      }
  
      var invokerFnBody =
          "return function "+makeLegalFunctionName(humanName)+"("+argsList+") {\n" +
          "if (arguments.length !== "+(argCount - 2)+") {\n" +
              "throwBindingError('function "+humanName+" called with ' + arguments.length + ' arguments, expected "+(argCount - 2)+" args!');\n" +
          "}\n";
  
  
      // Determine if we need to use a dynamic stack to store the destructors for the function parameters.
      // TODO: Remove this completely once all function invokers are being dynamically generated.
      var needsDestructorStack = false;
  
      for(var i = 1; i < argTypes.length; ++i) { // Skip return value at index 0 - it's not deleted here.
          if (argTypes[i] !== null && argTypes[i].destructorFunction === undefined) { // The type does not define a destructor function - must use dynamic stack
              needsDestructorStack = true;
              break;
          }
      }
  
      if (needsDestructorStack) {
          invokerFnBody +=
              "var destructors = [];\n";
      }
  
      var dtorStack = needsDestructorStack ? "destructors" : "null";
      var args1 = ["throwBindingError", "invoker", "fn", "runDestructors", "retType", "classParam"];
      var args2 = [throwBindingError, cppInvokerFunc, cppTargetFunc, runDestructors, argTypes[0], argTypes[1]];
  
  
      if (isClassMethodFunc) {
          invokerFnBody += "var thisWired = classParam.toWireType("+dtorStack+", this);\n";
      }
  
      for(var i = 0; i < argCount - 2; ++i) {
          invokerFnBody += "var arg"+i+"Wired = argType"+i+".toWireType("+dtorStack+", arg"+i+"); // "+argTypes[i+2].name+"\n";
          args1.push("argType"+i);
          args2.push(argTypes[i+2]);
      }
  
      if (isClassMethodFunc) {
          argsListWired = "thisWired" + (argsListWired.length > 0 ? ", " : "") + argsListWired;
      }
  
      var returns = (argTypes[0].name !== "void");
  
      invokerFnBody +=
          (returns?"var rv = ":"") + "invoker(fn"+(argsListWired.length>0?", ":"")+argsListWired+");\n";
  
      if (needsDestructorStack) {
          invokerFnBody += "runDestructors(destructors);\n";
      } else {
          for(var i = isClassMethodFunc?1:2; i < argTypes.length; ++i) { // Skip return value at index 0 - it's not deleted here. Also skip class type if not a method.
              var paramName = (i === 1 ? "thisWired" : ("arg"+(i - 2)+"Wired"));
              if (argTypes[i].destructorFunction !== null) {
                  invokerFnBody += paramName+"_dtor("+paramName+"); // "+argTypes[i].name+"\n";
                  args1.push(paramName+"_dtor");
                  args2.push(argTypes[i].destructorFunction);
              }
          }
      }
  
      if (returns) {
          invokerFnBody += "var ret = retType.fromWireType(rv);\n" +
                           "return ret;\n";
      } else {
      }
      invokerFnBody += "}\n";
  
      args1.push(invokerFnBody);
  
      var invokerFunction = new_(Function, args1).apply(null, args2);
      return invokerFunction;
    }function __embind_register_class_class_function(
      rawClassType,
      methodName,
      argCount,
      rawArgTypesAddr,
      invokerSignature,
      rawInvoker,
      fn
    ) {
      var rawArgTypes = heap32VectorToArray(argCount, rawArgTypesAddr);
      methodName = readLatin1String(methodName);
      rawInvoker = requireFunction(invokerSignature, rawInvoker);
      whenDependentTypesAreResolved([], [rawClassType], function(classType) {
          classType = classType[0];
          var humanName = classType.name + '.' + methodName;
  
          function unboundTypesHandler() {
              throwUnboundTypeError('Cannot call ' + humanName + ' due to unbound types', rawArgTypes);
          }
  
          var proto = classType.registeredClass.constructor;
          if (undefined === proto[methodName]) {
              // This is the first function to be registered with this name.
              unboundTypesHandler.argCount = argCount-1;
              proto[methodName] = unboundTypesHandler;
          } else {
              // There was an existing function with the same name registered. Set up a function overload routing table.
              ensureOverloadTable(proto, methodName, humanName);
              proto[methodName].overloadTable[argCount-1] = unboundTypesHandler;
          }
  
          whenDependentTypesAreResolved([], rawArgTypes, function(argTypes) {
              // Replace the initial unbound-types-handler stub with the proper function. If multiple overloads are registered,
              // the function handlers go into an overload table.
              var invokerArgsArray = [argTypes[0] /* return value */, null /* no class 'this'*/].concat(argTypes.slice(1) /* actual params */);
              var func = craftInvokerFunction(humanName, invokerArgsArray, null /* no class 'this'*/, rawInvoker, fn);
              if (undefined === proto[methodName].overloadTable) {
                  proto[methodName] = func;
              } else {
                  proto[methodName].overloadTable[argCount-1] = func;
              }
              return [];
          });
          return [];
      });
    }

  function ___syscall140(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // llseek
      var stream = SYSCALLS.getStreamFromFD(), offset_high = SYSCALLS.get(), offset_low = SYSCALLS.get(), result = SYSCALLS.get(), whence = SYSCALLS.get();
      // NOTE: offset_high is unused - Emscripten's off_t is 32-bit
      var offset = offset_low;
      FS.llseek(stream, offset, whence);
      HEAP32[((result)>>2)]=stream.position;
      if (stream.getdents && offset === 0 && whence === 0) stream.getdents = null; // reset readdir state
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall146(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // writev
      var stream = SYSCALLS.getStreamFromFD(), iov = SYSCALLS.get(), iovcnt = SYSCALLS.get();
      return SYSCALLS.doWritev(stream, iov, iovcnt);
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall221(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // fcntl64
      var stream = SYSCALLS.getStreamFromFD(), cmd = SYSCALLS.get();
      switch (cmd) {
        case 0: {
          var arg = SYSCALLS.get();
          if (arg < 0) {
            return -ERRNO_CODES.EINVAL;
          }
          var newStream;
          newStream = FS.open(stream.path, stream.flags, 0, arg);
          return newStream.fd;
        }
        case 1:
        case 2:
          return 0;  // FD_CLOEXEC makes no sense for a single process.
        case 3:
          return stream.flags;
        case 4: {
          var arg = SYSCALLS.get();
          stream.flags |= arg;
          return 0;
        }
        case 12:
        case 12: {
          var arg = SYSCALLS.get();
          var offset = 0;
          // We're always unlocked.
          HEAP16[(((arg)+(offset))>>1)]=2;
          return 0;
        }
        case 13:
        case 14:
        case 13:
        case 14:
          return 0; // Pretend that the locking is successful.
        case 16:
        case 8:
          return -ERRNO_CODES.EINVAL; // These are for sockets. We don't have them fully implemented yet.
        case 9:
          // musl trusts getown return values, due to a bug where they must be, as they overlap with errors. just return -1 here, so fnctl() returns that, and we set errno ourselves.
          ___setErrNo(ERRNO_CODES.EINVAL);
          return -1;
        default: {
          return -ERRNO_CODES.EINVAL;
        }
      }
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function __embind_register_class_function(
      rawClassType,
      methodName,
      argCount,
      rawArgTypesAddr, // [ReturnType, ThisType, Args...]
      invokerSignature,
      rawInvoker,
      context,
      isPureVirtual
    ) {
      var rawArgTypes = heap32VectorToArray(argCount, rawArgTypesAddr);
      methodName = readLatin1String(methodName);
      rawInvoker = requireFunction(invokerSignature, rawInvoker);
  
      whenDependentTypesAreResolved([], [rawClassType], function(classType) {
          classType = classType[0];
          var humanName = classType.name + '.' + methodName;
  
          if (isPureVirtual) {
              classType.registeredClass.pureVirtualFunctions.push(methodName);
          }
  
          function unboundTypesHandler() {
              throwUnboundTypeError('Cannot call ' + humanName + ' due to unbound types', rawArgTypes);
          }
  
          var proto = classType.registeredClass.instancePrototype;
          var method = proto[methodName];
          if (undefined === method || (undefined === method.overloadTable && method.className !== classType.name && method.argCount === argCount - 2)) {
              // This is the first overload to be registered, OR we are replacing a function in the base class with a function in the derived class.
              unboundTypesHandler.argCount = argCount - 2;
              unboundTypesHandler.className = classType.name;
              proto[methodName] = unboundTypesHandler;
          } else {
              // There was an existing function with the same name registered. Set up a function overload routing table.
              ensureOverloadTable(proto, methodName, humanName);
              proto[methodName].overloadTable[argCount - 2] = unboundTypesHandler;
          }
  
          whenDependentTypesAreResolved([], rawArgTypes, function(argTypes) {
  
              var memberFunction = craftInvokerFunction(humanName, argTypes, classType, rawInvoker, context);
  
              // Replace the initial unbound-handler-stub function with the appropriate member function, now that all types
              // are resolved. If multiple overloads are registered for this function, the function goes into an overload table.
              if (undefined === proto[methodName].overloadTable) {
                  // Set argCount in case an overload is registered later
                  memberFunction.argCount = argCount - 2;
                  proto[methodName] = memberFunction;
              } else {
                  proto[methodName].overloadTable[argCount - 2] = memberFunction;
              }
  
              return [];
          });
          return [];
      });
    }

  var ___dso_handle=STATICTOP; STATICTOP += 16;;
embind_init_charCodes();
BindingError = Module['BindingError'] = extendError(Error, 'BindingError');;
InternalError = Module['InternalError'] = extendError(Error, 'InternalError');;
UnboundTypeError = Module['UnboundTypeError'] = extendError(Error, 'UnboundTypeError');;
init_ClassHandle();
init_RegisteredPointer();
init_embind();;
init_emval();;
FS.staticInit();__ATINIT__.unshift(function() { if (!Module["noFSInit"] && !FS.init.initialized) FS.init() });__ATMAIN__.push(function() { FS.ignorePermissions = false });__ATEXIT__.push(function() { FS.quit() });Module["FS_createFolder"] = FS.createFolder;Module["FS_createPath"] = FS.createPath;Module["FS_createDataFile"] = FS.createDataFile;Module["FS_createPreloadedFile"] = FS.createPreloadedFile;Module["FS_createLazyFile"] = FS.createLazyFile;Module["FS_createLink"] = FS.createLink;Module["FS_createDevice"] = FS.createDevice;Module["FS_unlink"] = FS.unlink;;
__ATINIT__.unshift(function() { TTY.init() });__ATEXIT__.push(function() { TTY.shutdown() });;
if (ENVIRONMENT_IS_NODE) { var fs = require("fs"); var NODEJS_PATH = require("path"); NODEFS.staticInit(); };
___buildEnvironment(ENV);;
__ATINIT__.push(function() { SOCKFS.root = FS.mount(SOCKFS, {}, null); });;
DYNAMICTOP_PTR = allocate(1, "i32", ALLOC_STATIC);

STACK_BASE = STACKTOP = Runtime.alignMemory(STATICTOP);

STACK_MAX = STACK_BASE + TOTAL_STACK;

DYNAMIC_BASE = Runtime.alignMemory(STACK_MAX);

HEAP32[DYNAMICTOP_PTR>>2] = DYNAMIC_BASE;

staticSealed = true; // seal the static portion of memory

assert(DYNAMIC_BASE < TOTAL_MEMORY, "TOTAL_MEMORY not big enough for stack");


function nullFunc_iiiiiiii(x) { Module["printErr"]("Invalid function pointer called with signature 'iiiiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_viiiii(x) { Module["printErr"]("Invalid function pointer called with signature 'viiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_iiiiiid(x) { Module["printErr"]("Invalid function pointer called with signature 'iiiiiid'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_vi(x) { Module["printErr"]("Invalid function pointer called with signature 'vi'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_vii(x) { Module["printErr"]("Invalid function pointer called with signature 'vii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_iiiiiiiiiii(x) { Module["printErr"]("Invalid function pointer called with signature 'iiiiiiiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_ii(x) { Module["printErr"]("Invalid function pointer called with signature 'ii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_iiiiiiiiiiii(x) { Module["printErr"]("Invalid function pointer called with signature 'iiiiiiiiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_iiii(x) { Module["printErr"]("Invalid function pointer called with signature 'iiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_viiiiiiiiiiiiiii(x) { Module["printErr"]("Invalid function pointer called with signature 'viiiiiiiiiiiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_viiiiii(x) { Module["printErr"]("Invalid function pointer called with signature 'viiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_iiiiiii(x) { Module["printErr"]("Invalid function pointer called with signature 'iiiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_iiiiiiiiiiiii(x) { Module["printErr"]("Invalid function pointer called with signature 'iiiiiiiiiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_viiiiiii(x) { Module["printErr"]("Invalid function pointer called with signature 'viiiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_viiiiiiiiii(x) { Module["printErr"]("Invalid function pointer called with signature 'viiiiiiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_iii(x) { Module["printErr"]("Invalid function pointer called with signature 'iii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_iiiiii(x) { Module["printErr"]("Invalid function pointer called with signature 'iiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_diii(x) { Module["printErr"]("Invalid function pointer called with signature 'diii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_i(x) { Module["printErr"]("Invalid function pointer called with signature 'i'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_iiiii(x) { Module["printErr"]("Invalid function pointer called with signature 'iiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_viii(x) { Module["printErr"]("Invalid function pointer called with signature 'viii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_v(x) { Module["printErr"]("Invalid function pointer called with signature 'v'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_iiiiiiiii(x) { Module["printErr"]("Invalid function pointer called with signature 'iiiiiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_iiiiid(x) { Module["printErr"]("Invalid function pointer called with signature 'iiiiid'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_viiii(x) { Module["printErr"]("Invalid function pointer called with signature 'viiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function invoke_iiiiiiii(index,a1,a2,a3,a4,a5,a6,a7) {
  try {
    return Module["dynCall_iiiiiiii"](index,a1,a2,a3,a4,a5,a6,a7);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_viiiii(index,a1,a2,a3,a4,a5) {
  try {
    Module["dynCall_viiiii"](index,a1,a2,a3,a4,a5);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_iiiiiid(index,a1,a2,a3,a4,a5,a6) {
  try {
    return Module["dynCall_iiiiiid"](index,a1,a2,a3,a4,a5,a6);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_vi(index,a1) {
  try {
    Module["dynCall_vi"](index,a1);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_vii(index,a1,a2) {
  try {
    Module["dynCall_vii"](index,a1,a2);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_iiiiiiiiiii(index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10) {
  try {
    return Module["dynCall_iiiiiiiiiii"](index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_ii(index,a1) {
  try {
    return Module["dynCall_ii"](index,a1);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_iiiiiiiiiiii(index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11) {
  try {
    return Module["dynCall_iiiiiiiiiiii"](index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_iiii(index,a1,a2,a3) {
  try {
    return Module["dynCall_iiii"](index,a1,a2,a3);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_viiiiiiiiiiiiiii(index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12,a13,a14,a15) {
  try {
    Module["dynCall_viiiiiiiiiiiiiii"](index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12,a13,a14,a15);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_viiiiii(index,a1,a2,a3,a4,a5,a6) {
  try {
    Module["dynCall_viiiiii"](index,a1,a2,a3,a4,a5,a6);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_iiiiiii(index,a1,a2,a3,a4,a5,a6) {
  try {
    return Module["dynCall_iiiiiii"](index,a1,a2,a3,a4,a5,a6);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_iiiiiiiiiiiii(index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12) {
  try {
    return Module["dynCall_iiiiiiiiiiiii"](index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_viiiiiii(index,a1,a2,a3,a4,a5,a6,a7) {
  try {
    Module["dynCall_viiiiiii"](index,a1,a2,a3,a4,a5,a6,a7);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_viiiiiiiiii(index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10) {
  try {
    Module["dynCall_viiiiiiiiii"](index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_iii(index,a1,a2) {
  try {
    return Module["dynCall_iii"](index,a1,a2);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_iiiiii(index,a1,a2,a3,a4,a5) {
  try {
    return Module["dynCall_iiiiii"](index,a1,a2,a3,a4,a5);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_diii(index,a1,a2,a3) {
  try {
    return Module["dynCall_diii"](index,a1,a2,a3);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_i(index) {
  try {
    return Module["dynCall_i"](index);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_iiiii(index,a1,a2,a3,a4) {
  try {
    return Module["dynCall_iiiii"](index,a1,a2,a3,a4);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_viii(index,a1,a2,a3) {
  try {
    Module["dynCall_viii"](index,a1,a2,a3);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_v(index) {
  try {
    Module["dynCall_v"](index);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_iiiiiiiii(index,a1,a2,a3,a4,a5,a6,a7,a8) {
  try {
    return Module["dynCall_iiiiiiiii"](index,a1,a2,a3,a4,a5,a6,a7,a8);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_iiiiid(index,a1,a2,a3,a4,a5) {
  try {
    return Module["dynCall_iiiiid"](index,a1,a2,a3,a4,a5);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_viiii(index,a1,a2,a3,a4) {
  try {
    Module["dynCall_viiii"](index,a1,a2,a3,a4);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

Module.asmGlobalArg = { "Math": Math, "Int8Array": Int8Array, "Int16Array": Int16Array, "Int32Array": Int32Array, "Uint8Array": Uint8Array, "Uint16Array": Uint16Array, "Uint32Array": Uint32Array, "Float32Array": Float32Array, "Float64Array": Float64Array, "NaN": NaN, "Infinity": Infinity };

Module.asmLibraryArg = { "abort": abort, "assert": assert, "enlargeMemory": enlargeMemory, "getTotalMemory": getTotalMemory, "abortOnCannotGrowMemory": abortOnCannotGrowMemory, "abortStackOverflow": abortStackOverflow, "nullFunc_iiiiiiii": nullFunc_iiiiiiii, "nullFunc_viiiii": nullFunc_viiiii, "nullFunc_iiiiiid": nullFunc_iiiiiid, "nullFunc_vi": nullFunc_vi, "nullFunc_vii": nullFunc_vii, "nullFunc_iiiiiiiiiii": nullFunc_iiiiiiiiiii, "nullFunc_ii": nullFunc_ii, "nullFunc_iiiiiiiiiiii": nullFunc_iiiiiiiiiiii, "nullFunc_iiii": nullFunc_iiii, "nullFunc_viiiiiiiiiiiiiii": nullFunc_viiiiiiiiiiiiiii, "nullFunc_viiiiii": nullFunc_viiiiii, "nullFunc_iiiiiii": nullFunc_iiiiiii, "nullFunc_iiiiiiiiiiiii": nullFunc_iiiiiiiiiiiii, "nullFunc_viiiiiii": nullFunc_viiiiiii, "nullFunc_viiiiiiiiii": nullFunc_viiiiiiiiii, "nullFunc_iii": nullFunc_iii, "nullFunc_iiiiii": nullFunc_iiiiii, "nullFunc_diii": nullFunc_diii, "nullFunc_i": nullFunc_i, "nullFunc_iiiii": nullFunc_iiiii, "nullFunc_viii": nullFunc_viii, "nullFunc_v": nullFunc_v, "nullFunc_iiiiiiiii": nullFunc_iiiiiiiii, "nullFunc_iiiiid": nullFunc_iiiiid, "nullFunc_viiii": nullFunc_viiii, "invoke_iiiiiiii": invoke_iiiiiiii, "invoke_viiiii": invoke_viiiii, "invoke_iiiiiid": invoke_iiiiiid, "invoke_vi": invoke_vi, "invoke_vii": invoke_vii, "invoke_iiiiiiiiiii": invoke_iiiiiiiiiii, "invoke_ii": invoke_ii, "invoke_iiiiiiiiiiii": invoke_iiiiiiiiiiii, "invoke_iiii": invoke_iiii, "invoke_viiiiiiiiiiiiiii": invoke_viiiiiiiiiiiiiii, "invoke_viiiiii": invoke_viiiiii, "invoke_iiiiiii": invoke_iiiiiii, "invoke_iiiiiiiiiiiii": invoke_iiiiiiiiiiiii, "invoke_viiiiiii": invoke_viiiiiii, "invoke_viiiiiiiiii": invoke_viiiiiiiiii, "invoke_iii": invoke_iii, "invoke_iiiiii": invoke_iiiiii, "invoke_diii": invoke_diii, "invoke_i": invoke_i, "invoke_iiiii": invoke_iiiii, "invoke_viii": invoke_viii, "invoke_v": invoke_v, "invoke_iiiiiiiii": invoke_iiiiiiiii, "invoke_iiiiid": invoke_iiiiid, "invoke_viiii": invoke_viiii, "___syscall221": ___syscall221, "floatReadValueFromPointer": floatReadValueFromPointer, "simpleReadValueFromPointer": simpleReadValueFromPointer, "throwInternalError": throwInternalError, "get_first_emval": get_first_emval, "getLiveInheritedInstances": getLiveInheritedInstances, "__emval_register": __emval_register, "__ZSt18uncaught_exceptionv": __ZSt18uncaught_exceptionv, "extendError": extendError, "ClassHandle": ClassHandle, "getShiftFromSize": getShiftFromSize, "__addDays": __addDays, "___cxa_begin_catch": ___cxa_begin_catch, "_emscripten_memcpy_big": _emscripten_memcpy_big, "runDestructor": runDestructor, "throwInstanceAlreadyDeleted": throwInstanceAlreadyDeleted, "__embind_register_std_string": __embind_register_std_string, "init_RegisteredPointer": init_RegisteredPointer, "ClassHandle_isAliasOf": ClassHandle_isAliasOf, "flushPendingDeletes": flushPendingDeletes, "makeClassHandle": makeClassHandle, "whenDependentTypesAreResolved": whenDependentTypesAreResolved, "__embind_register_class_constructor": __embind_register_class_constructor, "___cxa_atexit": ___cxa_atexit, "___cxa_rethrow": ___cxa_rethrow, "init_ClassHandle": init_ClassHandle, "___syscall140": ___syscall140, "ClassHandle_clone": ClassHandle_clone, "___syscall146": ___syscall146, "__inet_ntop4_raw": __inet_ntop4_raw, "RegisteredClass": RegisteredClass, "___cxa_free_exception": ___cxa_free_exception, "___cxa_find_matching_catch": ___cxa_find_matching_catch, "embind_init_charCodes": embind_init_charCodes, "___setErrNo": ___setErrNo, "__embind_register_class_class_function": __embind_register_class_class_function, "__embind_register_bool": __embind_register_bool, "___resumeException": ___resumeException, "createNamedFunction": createNamedFunction, "__embind_register_class_property": __embind_register_class_property, "___syscall91": ___syscall91, "__emval_decref": __emval_decref, "_pthread_once": _pthread_once, "__embind_register_class": __embind_register_class, "constNoSmartPtrRawPointerToWireType": constNoSmartPtrRawPointerToWireType, "heap32VectorToArray": heap32VectorToArray, "__inet_ntop6_raw": __inet_ntop6_raw, "ClassHandle_delete": ClassHandle_delete, "___lock": ___lock, "___syscall6": ___syscall6, "ensureOverloadTable": ensureOverloadTable, "__embind_register_emval": __embind_register_emval, "new_": new_, "downcastPointer": downcastPointer, "replacePublicSymbol": replacePublicSymbol, "init_embind": init_embind, "__inet_pton4_raw": __inet_pton4_raw, "___syscall102": ___syscall102, "ClassHandle_deleteLater": ClassHandle_deleteLater, "integerReadValueFromPointer": integerReadValueFromPointer, "RegisteredPointer_deleteObject": RegisteredPointer_deleteObject, "ClassHandle_isDeleted": ClassHandle_isDeleted, "__embind_register_integer": __embind_register_integer, "___cxa_allocate_exception": ___cxa_allocate_exception, "___buildEnvironment": ___buildEnvironment, "__isLeapYear": __isLeapYear, "___cxa_end_catch": ___cxa_end_catch, "_embind_repr": _embind_repr, "_strftime": _strftime, "__write_sockaddr": __write_sockaddr, "RegisteredPointer": RegisteredPointer, "craftInvokerFunction": craftInvokerFunction, "_getenv": _getenv, "runDestructors": runDestructors, "makeLegalFunctionName": makeLegalFunctionName, "_pthread_key_create": _pthread_key_create, "upcastPointer": upcastPointer, "init_emval": init_emval, "shallowCopyInternalPointer": shallowCopyInternalPointer, "nonConstNoSmartPtrRawPointerToWireType": nonConstNoSmartPtrRawPointerToWireType, "_abort": _abort, "throwBindingError": throwBindingError, "getTypeName": getTypeName, "validateThis": validateThis, "exposePublicSymbol": exposePublicSymbol, "RegisteredPointer_fromWireType": RegisteredPointer_fromWireType, "_pthread_getspecific": _pthread_getspecific, "_pthread_cond_wait": _pthread_cond_wait, "RegisteredPointer_destructor": RegisteredPointer_destructor, "__embind_register_memory_view": __embind_register_memory_view, "getInheritedInstance": getInheritedInstance, "setDelayFunction": setDelayFunction, "___gxx_personality_v0": ___gxx_personality_v0, "__inet_pton6_raw": __inet_pton6_raw, "__read_sockaddr": __read_sockaddr, "__embind_register_void": __embind_register_void, "___cxa_find_matching_catch_3": ___cxa_find_matching_catch_3, "_strftime_l": _strftime_l, "RegisteredPointer_getPointee": RegisteredPointer_getPointee, "_llvm_eh_typeid_for": _llvm_eh_typeid_for, "___cxa_find_matching_catch_2": ___cxa_find_matching_catch_2, "__embind_register_class_function": __embind_register_class_function, "throwUnboundTypeError": throwUnboundTypeError, "__arraySum": __arraySum, "readLatin1String": readLatin1String, "getBasestPointer": getBasestPointer, "getInheritedInstanceCount": getInheritedInstanceCount, "__embind_register_float": __embind_register_float, "___syscall54": ___syscall54, "___unlock": ___unlock, "__embind_register_std_wstring": __embind_register_std_wstring, "_pthread_setspecific": _pthread_setspecific, "genericPointerToWireType": genericPointerToWireType, "registerType": registerType, "___cxa_throw": ___cxa_throw, "count_emval_handles": count_emval_handles, "requireFunction": requireFunction, "_atexit": _atexit, "___map_file": ___map_file, "DYNAMICTOP_PTR": DYNAMICTOP_PTR, "tempDoublePtr": tempDoublePtr, "ABORT": ABORT, "STACKTOP": STACKTOP, "STACK_MAX": STACK_MAX, "cttz_i8": cttz_i8, "___dso_handle": ___dso_handle };
// EMSCRIPTEN_START_ASM
var asm = (function(global, env, buffer) {
'almost asm';


  var HEAP8 = new global.Int8Array(buffer);
  var HEAP16 = new global.Int16Array(buffer);
  var HEAP32 = new global.Int32Array(buffer);
  var HEAPU8 = new global.Uint8Array(buffer);
  var HEAPU16 = new global.Uint16Array(buffer);
  var HEAPU32 = new global.Uint32Array(buffer);
  var HEAPF32 = new global.Float32Array(buffer);
  var HEAPF64 = new global.Float64Array(buffer);

  var DYNAMICTOP_PTR=env.DYNAMICTOP_PTR|0;
  var tempDoublePtr=env.tempDoublePtr|0;
  var ABORT=env.ABORT|0;
  var STACKTOP=env.STACKTOP|0;
  var STACK_MAX=env.STACK_MAX|0;
  var cttz_i8=env.cttz_i8|0;
  var ___dso_handle=env.___dso_handle|0;

  var __THREW__ = 0;
  var threwValue = 0;
  var setjmpId = 0;
  var undef = 0;
  var nan = global.NaN, inf = global.Infinity;
  var tempInt = 0, tempBigInt = 0, tempBigIntS = 0, tempValue = 0, tempDouble = 0.0;
  var tempRet0 = 0;

  var Math_floor=global.Math.floor;
  var Math_abs=global.Math.abs;
  var Math_sqrt=global.Math.sqrt;
  var Math_pow=global.Math.pow;
  var Math_cos=global.Math.cos;
  var Math_sin=global.Math.sin;
  var Math_tan=global.Math.tan;
  var Math_acos=global.Math.acos;
  var Math_asin=global.Math.asin;
  var Math_atan=global.Math.atan;
  var Math_atan2=global.Math.atan2;
  var Math_exp=global.Math.exp;
  var Math_log=global.Math.log;
  var Math_ceil=global.Math.ceil;
  var Math_imul=global.Math.imul;
  var Math_min=global.Math.min;
  var Math_max=global.Math.max;
  var Math_clz32=global.Math.clz32;
  var abort=env.abort;
  var assert=env.assert;
  var enlargeMemory=env.enlargeMemory;
  var getTotalMemory=env.getTotalMemory;
  var abortOnCannotGrowMemory=env.abortOnCannotGrowMemory;
  var abortStackOverflow=env.abortStackOverflow;
  var nullFunc_iiiiiiii=env.nullFunc_iiiiiiii;
  var nullFunc_viiiii=env.nullFunc_viiiii;
  var nullFunc_iiiiiid=env.nullFunc_iiiiiid;
  var nullFunc_vi=env.nullFunc_vi;
  var nullFunc_vii=env.nullFunc_vii;
  var nullFunc_iiiiiiiiiii=env.nullFunc_iiiiiiiiiii;
  var nullFunc_ii=env.nullFunc_ii;
  var nullFunc_iiiiiiiiiiii=env.nullFunc_iiiiiiiiiiii;
  var nullFunc_iiii=env.nullFunc_iiii;
  var nullFunc_viiiiiiiiiiiiiii=env.nullFunc_viiiiiiiiiiiiiii;
  var nullFunc_viiiiii=env.nullFunc_viiiiii;
  var nullFunc_iiiiiii=env.nullFunc_iiiiiii;
  var nullFunc_iiiiiiiiiiiii=env.nullFunc_iiiiiiiiiiiii;
  var nullFunc_viiiiiii=env.nullFunc_viiiiiii;
  var nullFunc_viiiiiiiiii=env.nullFunc_viiiiiiiiii;
  var nullFunc_iii=env.nullFunc_iii;
  var nullFunc_iiiiii=env.nullFunc_iiiiii;
  var nullFunc_diii=env.nullFunc_diii;
  var nullFunc_i=env.nullFunc_i;
  var nullFunc_iiiii=env.nullFunc_iiiii;
  var nullFunc_viii=env.nullFunc_viii;
  var nullFunc_v=env.nullFunc_v;
  var nullFunc_iiiiiiiii=env.nullFunc_iiiiiiiii;
  var nullFunc_iiiiid=env.nullFunc_iiiiid;
  var nullFunc_viiii=env.nullFunc_viiii;
  var invoke_iiiiiiii=env.invoke_iiiiiiii;
  var invoke_viiiii=env.invoke_viiiii;
  var invoke_iiiiiid=env.invoke_iiiiiid;
  var invoke_vi=env.invoke_vi;
  var invoke_vii=env.invoke_vii;
  var invoke_iiiiiiiiiii=env.invoke_iiiiiiiiiii;
  var invoke_ii=env.invoke_ii;
  var invoke_iiiiiiiiiiii=env.invoke_iiiiiiiiiiii;
  var invoke_iiii=env.invoke_iiii;
  var invoke_viiiiiiiiiiiiiii=env.invoke_viiiiiiiiiiiiiii;
  var invoke_viiiiii=env.invoke_viiiiii;
  var invoke_iiiiiii=env.invoke_iiiiiii;
  var invoke_iiiiiiiiiiiii=env.invoke_iiiiiiiiiiiii;
  var invoke_viiiiiii=env.invoke_viiiiiii;
  var invoke_viiiiiiiiii=env.invoke_viiiiiiiiii;
  var invoke_iii=env.invoke_iii;
  var invoke_iiiiii=env.invoke_iiiiii;
  var invoke_diii=env.invoke_diii;
  var invoke_i=env.invoke_i;
  var invoke_iiiii=env.invoke_iiiii;
  var invoke_viii=env.invoke_viii;
  var invoke_v=env.invoke_v;
  var invoke_iiiiiiiii=env.invoke_iiiiiiiii;
  var invoke_iiiiid=env.invoke_iiiiid;
  var invoke_viiii=env.invoke_viiii;
  var ___syscall221=env.___syscall221;
  var floatReadValueFromPointer=env.floatReadValueFromPointer;
  var simpleReadValueFromPointer=env.simpleReadValueFromPointer;
  var throwInternalError=env.throwInternalError;
  var get_first_emval=env.get_first_emval;
  var getLiveInheritedInstances=env.getLiveInheritedInstances;
  var __emval_register=env.__emval_register;
  var __ZSt18uncaught_exceptionv=env.__ZSt18uncaught_exceptionv;
  var extendError=env.extendError;
  var ClassHandle=env.ClassHandle;
  var getShiftFromSize=env.getShiftFromSize;
  var __addDays=env.__addDays;
  var ___cxa_begin_catch=env.___cxa_begin_catch;
  var _emscripten_memcpy_big=env._emscripten_memcpy_big;
  var runDestructor=env.runDestructor;
  var throwInstanceAlreadyDeleted=env.throwInstanceAlreadyDeleted;
  var __embind_register_std_string=env.__embind_register_std_string;
  var init_RegisteredPointer=env.init_RegisteredPointer;
  var ClassHandle_isAliasOf=env.ClassHandle_isAliasOf;
  var flushPendingDeletes=env.flushPendingDeletes;
  var makeClassHandle=env.makeClassHandle;
  var whenDependentTypesAreResolved=env.whenDependentTypesAreResolved;
  var __embind_register_class_constructor=env.__embind_register_class_constructor;
  var ___cxa_atexit=env.___cxa_atexit;
  var ___cxa_rethrow=env.___cxa_rethrow;
  var init_ClassHandle=env.init_ClassHandle;
  var ___syscall140=env.___syscall140;
  var ClassHandle_clone=env.ClassHandle_clone;
  var ___syscall146=env.___syscall146;
  var __inet_ntop4_raw=env.__inet_ntop4_raw;
  var RegisteredClass=env.RegisteredClass;
  var ___cxa_free_exception=env.___cxa_free_exception;
  var ___cxa_find_matching_catch=env.___cxa_find_matching_catch;
  var embind_init_charCodes=env.embind_init_charCodes;
  var ___setErrNo=env.___setErrNo;
  var __embind_register_class_class_function=env.__embind_register_class_class_function;
  var __embind_register_bool=env.__embind_register_bool;
  var ___resumeException=env.___resumeException;
  var createNamedFunction=env.createNamedFunction;
  var __embind_register_class_property=env.__embind_register_class_property;
  var ___syscall91=env.___syscall91;
  var __emval_decref=env.__emval_decref;
  var _pthread_once=env._pthread_once;
  var __embind_register_class=env.__embind_register_class;
  var constNoSmartPtrRawPointerToWireType=env.constNoSmartPtrRawPointerToWireType;
  var heap32VectorToArray=env.heap32VectorToArray;
  var __inet_ntop6_raw=env.__inet_ntop6_raw;
  var ClassHandle_delete=env.ClassHandle_delete;
  var ___lock=env.___lock;
  var ___syscall6=env.___syscall6;
  var ensureOverloadTable=env.ensureOverloadTable;
  var __embind_register_emval=env.__embind_register_emval;
  var new_=env.new_;
  var downcastPointer=env.downcastPointer;
  var replacePublicSymbol=env.replacePublicSymbol;
  var init_embind=env.init_embind;
  var __inet_pton4_raw=env.__inet_pton4_raw;
  var ___syscall102=env.___syscall102;
  var ClassHandle_deleteLater=env.ClassHandle_deleteLater;
  var integerReadValueFromPointer=env.integerReadValueFromPointer;
  var RegisteredPointer_deleteObject=env.RegisteredPointer_deleteObject;
  var ClassHandle_isDeleted=env.ClassHandle_isDeleted;
  var __embind_register_integer=env.__embind_register_integer;
  var ___cxa_allocate_exception=env.___cxa_allocate_exception;
  var ___buildEnvironment=env.___buildEnvironment;
  var __isLeapYear=env.__isLeapYear;
  var ___cxa_end_catch=env.___cxa_end_catch;
  var _embind_repr=env._embind_repr;
  var _strftime=env._strftime;
  var __write_sockaddr=env.__write_sockaddr;
  var RegisteredPointer=env.RegisteredPointer;
  var craftInvokerFunction=env.craftInvokerFunction;
  var _getenv=env._getenv;
  var runDestructors=env.runDestructors;
  var makeLegalFunctionName=env.makeLegalFunctionName;
  var _pthread_key_create=env._pthread_key_create;
  var upcastPointer=env.upcastPointer;
  var init_emval=env.init_emval;
  var shallowCopyInternalPointer=env.shallowCopyInternalPointer;
  var nonConstNoSmartPtrRawPointerToWireType=env.nonConstNoSmartPtrRawPointerToWireType;
  var _abort=env._abort;
  var throwBindingError=env.throwBindingError;
  var getTypeName=env.getTypeName;
  var validateThis=env.validateThis;
  var exposePublicSymbol=env.exposePublicSymbol;
  var RegisteredPointer_fromWireType=env.RegisteredPointer_fromWireType;
  var _pthread_getspecific=env._pthread_getspecific;
  var _pthread_cond_wait=env._pthread_cond_wait;
  var RegisteredPointer_destructor=env.RegisteredPointer_destructor;
  var __embind_register_memory_view=env.__embind_register_memory_view;
  var getInheritedInstance=env.getInheritedInstance;
  var setDelayFunction=env.setDelayFunction;
  var ___gxx_personality_v0=env.___gxx_personality_v0;
  var __inet_pton6_raw=env.__inet_pton6_raw;
  var __read_sockaddr=env.__read_sockaddr;
  var __embind_register_void=env.__embind_register_void;
  var ___cxa_find_matching_catch_3=env.___cxa_find_matching_catch_3;
  var _strftime_l=env._strftime_l;
  var RegisteredPointer_getPointee=env.RegisteredPointer_getPointee;
  var _llvm_eh_typeid_for=env._llvm_eh_typeid_for;
  var ___cxa_find_matching_catch_2=env.___cxa_find_matching_catch_2;
  var __embind_register_class_function=env.__embind_register_class_function;
  var throwUnboundTypeError=env.throwUnboundTypeError;
  var __arraySum=env.__arraySum;
  var readLatin1String=env.readLatin1String;
  var getBasestPointer=env.getBasestPointer;
  var getInheritedInstanceCount=env.getInheritedInstanceCount;
  var __embind_register_float=env.__embind_register_float;
  var ___syscall54=env.___syscall54;
  var ___unlock=env.___unlock;
  var __embind_register_std_wstring=env.__embind_register_std_wstring;
  var _pthread_setspecific=env._pthread_setspecific;
  var genericPointerToWireType=env.genericPointerToWireType;
  var registerType=env.registerType;
  var ___cxa_throw=env.___cxa_throw;
  var count_emval_handles=env.count_emval_handles;
  var requireFunction=env.requireFunction;
  var _atexit=env._atexit;
  var ___map_file=env.___map_file;
  var tempFloat = 0.0;

// EMSCRIPTEN_START_FUNCS

function stackAlloc(size) {
  size = size|0;
  var ret = 0;
  ret = STACKTOP;
  STACKTOP = (STACKTOP + size)|0;
  STACKTOP = (STACKTOP + 15)&-16;
  if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(size|0);

  return ret|0;
}
function stackSave() {
  return STACKTOP|0;
}
function stackRestore(top) {
  top = top|0;
  STACKTOP = top;
}
function establishStackSpace(stackBase, stackMax) {
  stackBase = stackBase|0;
  stackMax = stackMax|0;
  STACKTOP = stackBase;
  STACK_MAX = stackMax;
}

function setThrew(threw, value) {
  threw = threw|0;
  value = value|0;
  if ((__THREW__|0) == 0) {
    __THREW__ = threw;
    threwValue = value;
  }
}

function setTempRet0(value) {
  value = value|0;
  tempRet0 = value;
}
function getTempRet0() {
  return tempRet0|0;
}

function __ZN6Socket3UDPC2Ev($this) {
 $this = $this|0;
 var $$expand_i1_val = 0, $$expand_i1_val2 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__s$addr$i = 0, $_binded = 0, $agg$tmp = 0, $call = 0;
 var $call$i6 = 0, $cleanup$is_active = 0, $cleanup$is_active$pre_trunc = 0, $cleanup$isactive = 0, $cmp = 0, $ehselector$slot = 0, $exception = 0, $exn = 0, $exn$slot = 0, $sel = 0, $this$addr = 0, $this$addr$i = 0, $this$addr$i$i = 0, $this$addr$i$i$i = 0, $this$addr$i$i$i$i = 0, $this1 = 0, $this1$i = 0, $this1$i$i = 0, $this1$i$i$i = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $agg$tmp = sp + 8|0;
 $cleanup$isactive = sp + 44|0;
 $this$addr = $this;
 $this1 = $this$addr;
 $call = (_socket(2,2,0)|0);
 HEAP32[$this1>>2] = $call;
 $0 = HEAP32[$this1>>2]|0;
 $cmp = ($0|0)==(-1);
 if (!($cmp)) {
  $_binded = ((($this1)) + 4|0);
  HEAP8[$_binded>>0] = 0;
  STACKTOP = sp;return;
 }
 $exception = (___cxa_allocate_exception(16)|0);
 $$expand_i1_val = 1;
 HEAP8[$cleanup$isactive>>0] = $$expand_i1_val;
 $this$addr$i = $agg$tmp;
 $__s$addr$i = 10584;
 $this1$i = $this$addr$i;
 $this$addr$i$i = $this1$i;
 $this1$i$i = $this$addr$i$i;
 $this$addr$i$i$i = $this1$i$i;
 $this1$i$i$i = $this$addr$i$i$i;
 $this$addr$i$i$i$i = $this1$i$i$i;
 ;HEAP32[$this1$i$i$i>>2]=0|0;HEAP32[$this1$i$i$i+4>>2]=0|0;HEAP32[$this1$i$i$i+8>>2]=0|0;
 $1 = $__s$addr$i;
 $2 = $__s$addr$i;
 __THREW__ = 0;
 $call$i6 = (invoke_ii(338,($2|0))|0);
 $3 = __THREW__; __THREW__ = 0;
 $4 = $3&1;
 if ($4) {
  label = 6;
 } else {
  __THREW__ = 0;
  invoke_viii(339,($this1$i|0),($1|0),($call$i6|0));
  $5 = __THREW__; __THREW__ = 0;
  $6 = $5&1;
  if ($6) {
   label = 6;
  } else {
   __THREW__ = 0;
   invoke_vii(340,($exception|0),($agg$tmp|0));
   $7 = __THREW__; __THREW__ = 0;
   $8 = $7&1;
   if (!($8)) {
    $$expand_i1_val2 = 0;
    HEAP8[$cleanup$isactive>>0] = $$expand_i1_val2;
    __THREW__ = 0;
    invoke_viii(341,($exception|0),(64|0),(342|0));
    $9 = __THREW__; __THREW__ = 0;
   }
   $12 = ___cxa_find_matching_catch_2()|0;
   $13 = tempRet0;
   $exn$slot = $12;
   $ehselector$slot = $13;
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($agg$tmp);
  }
 }
 if ((label|0) == 6) {
  $10 = ___cxa_find_matching_catch_2()|0;
  $11 = tempRet0;
  $exn$slot = $10;
  $ehselector$slot = $11;
 }
 $cleanup$is_active$pre_trunc = HEAP8[$cleanup$isactive>>0]|0;
 $cleanup$is_active = $cleanup$is_active$pre_trunc&1;
 if (!($cleanup$is_active)) {
  $exn = $exn$slot;
  $sel = $ehselector$slot;
  ___resumeException($exn|0);
  // unreachable;
 }
 ___cxa_free_exception(($exception|0));
 $exn = $exn$slot;
 $sel = $ehselector$slot;
 ___resumeException($exn|0);
 // unreachable;
}
function __ZN6Socket9ExceptionC2ENSt3__212basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE($this,$error) {
 $this = $this|0;
 $error = $error|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $__a$i$i = 0, $__i$i$i = 0, $_message = 0, $_message2 = 0, $arrayidx$i$i = 0, $cmp$i$i = 0, $ehselector$slot = 0, $exn = 0, $exn$slot = 0, $inc$i$i = 0, $sel = 0, $this$addr = 0;
 var $this$addr$i = 0, $this$addr$i$i = 0, $this$addr$i$i$i = 0, $this$addr$i$i$i$i = 0, $this$addr$i$i$i2$i = 0, $this$addr$i$i3$i = 0, $this$addr$i4$i = 0, $this1 = 0, $this1$i = 0, $this1$i$i = 0, $this1$i$i$i = 0, $this1$i$i$i7$i = 0, $this1$i$i6$i = 0, $this1$i5$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $this$addr = $this;
 $this1 = $this$addr;
 HEAP32[$this1>>2] = (2152);
 $_message = ((($this1)) + 4|0);
 $this$addr$i = $_message;
 $this1$i = $this$addr$i;
 $this$addr$i$i = $this1$i;
 $this1$i$i = $this$addr$i$i;
 $this$addr$i$i$i = $this1$i$i;
 $this1$i$i$i = $this$addr$i$i$i;
 $this$addr$i$i$i$i = $this1$i$i$i;
 ;HEAP32[$this1$i$i$i>>2]=0|0;HEAP32[$this1$i$i$i+4>>2]=0|0;HEAP32[$this1$i$i$i+8>>2]=0|0;
 $this$addr$i4$i = $this1$i;
 $this1$i5$i = $this$addr$i4$i;
 $this$addr$i$i3$i = $this1$i5$i;
 $this1$i$i6$i = $this$addr$i$i3$i;
 $this$addr$i$i$i2$i = $this1$i$i6$i;
 $this1$i$i$i7$i = $this$addr$i$i$i2$i;
 $__a$i$i = $this1$i$i$i7$i;
 $__i$i$i = 0;
 while(1) {
  $0 = $__i$i$i;
  $cmp$i$i = ($0>>>0)<(3);
  if (!($cmp$i$i)) {
   break;
  }
  $1 = $__a$i$i;
  $2 = $__i$i$i;
  $arrayidx$i$i = (($1) + ($2<<2)|0);
  HEAP32[$arrayidx$i$i>>2] = 0;
  $3 = $__i$i$i;
  $inc$i$i = (($3) + 1)|0;
  $__i$i$i = $inc$i$i;
 }
 $_message2 = ((($this1)) + 4|0);
 __THREW__ = 0;
 (invoke_iii(343,($_message2|0),($error|0))|0);
 $4 = __THREW__; __THREW__ = 0;
 $5 = $4&1;
 if ($5) {
  $6 = ___cxa_find_matching_catch_2()|0;
  $7 = tempRet0;
  $exn$slot = $6;
  $ehselector$slot = $7;
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($_message);
  $exn = $exn$slot;
  $sel = $ehselector$slot;
  ___resumeException($exn|0);
  // unreachable;
 } else {
  STACKTOP = sp;return;
 }
}
function __ZN6Socket9ExceptionD2Ev($this) {
 $this = $this|0;
 var $_message = 0, $this$addr = 0, $this1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $this$addr = $this;
 $this1 = $this$addr;
 HEAP32[$this1>>2] = (2152);
 $_message = ((($this1)) + 4|0);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($_message);
 STACKTOP = sp;return;
}
function __ZN6Socket3UDPD2Ev($this) {
 $this = $this|0;
 var $this$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $this$addr = $this;
 STACKTOP = sp;return;
}
function __ZN6Socket3UDP5closeEv($this) {
 $this = $this|0;
 var $0 = 0, $this$addr = 0, $this1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $this$addr = $this;
 $this1 = $this$addr;
 $0 = HEAP32[$this1>>2]|0;
 (_shutdown($0,2)|0);
 STACKTOP = sp;return;
}
function __ZN6Socket3UDP4bindEj($this,$port) {
 $this = $this|0;
 $port = $port|0;
 var $$expand_i1_val = 0, $$expand_i1_val4 = 0, $$sink1 = 0, $$sink2 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $7 = 0, $8 = 0, $9 = 0, $__a$i$i$i$i = 0, $__a$i$i6$i$i = 0, $__fill_$i$i$i$i = 0, $__gc_$i$i$i = 0, $__hm_$i$i = 0, $__i$i$i$i$i = 0, $__i$i$i7$i$i = 0, $__mode_$i$i = 0;
 var $__sb$addr$i$i = 0, $__sb$addr$i$i$i = 0, $__sb$addr$i$i$i$i = 0, $__sb_$i = 0, $__sb_$i22 = 0, $__sb_5$i = 0, $__str_$i$i = 0, $__tie_$i$i$i$i = 0, $__wch$addr$i = 0, $__wch$addr$i$i = 0, $_binded = 0, $_binded18 = 0, $add$ptr = 0, $add$ptr$i = 0, $add$ptr$i$i = 0, $add$ptr$i$i$i = 0, $add$ptr$i12$i$i = 0, $add$ptr2$i = 0, $add$ptr3$i = 0, $add$ptr3$i$i = 0;
 var $add$ptr4$i = 0, $add$ptr6$i$i$i = 0, $address = 0, $agg$tmp = 0, $arrayidx$i$i$i$i = 0, $arrayidx$i$i27$i$i = 0, $call = 0, $call$i$i$i$i = 0, $call2 = 0, $call3 = 0, $call5 = 0, $call7 = 0, $call9 = 0, $cleanup$is_active = 0, $cleanup$is_active$pre_trunc = 0, $cleanup$isactive = 0, $cmp = 0, $cmp$i$i$i$i = 0, $cmp$i$i25$i$i = 0, $conv = 0;
 var $ehselector$slot = 0, $ehselector$slot$i = 0, $ehselector$slot$i$i = 0, $error = 0, $exception = 0, $exn = 0, $exn$i = 0, $exn$i$i = 0, $exn$slot = 0, $exn$slot$i = 0, $exn$slot$i$i = 0, $inc$i$i$i$i = 0, $inc$i$i28$i$i = 0, $port$addr = 0, $ref$tmp$i$i = 0, $sel = 0, $sel$i = 0, $sel$i$i = 0, $sin_addr = 0, $sin_port = 0;
 var $this$addr = 0, $this$addr$i = 0, $this$addr$i$i = 0, $this$addr$i$i$i = 0, $this$addr$i$i$i$i = 0, $this$addr$i$i$i$i$i = 0, $this$addr$i$i$i$i$i$i = 0, $this$addr$i$i$i$i8$i$i = 0, $this$addr$i$i$i13$i = 0, $this$addr$i$i$i2$i$i$i = 0, $this$addr$i$i$i2$i3$i$i = 0, $this$addr$i$i$i9$i$i = 0, $this$addr$i$i10$i$i = 0, $this$addr$i$i14$i = 0, $this$addr$i$i3$i$i$i = 0, $this$addr$i$i3$i4$i$i = 0, $this$addr$i$i9$i = 0, $this$addr$i10$i = 0, $this$addr$i11$i$i = 0, $this$addr$i15$i = 0;
 var $this$addr$i20 = 0, $this$addr$i4$i$i$i = 0, $this$addr$i4$i5$i$i = 0, $this$addr$i5$i$i = 0, $this1 = 0, $this1$i = 0, $this1$i$i = 0, $this1$i$i$i = 0, $this1$i$i$i$i = 0, $this1$i$i$i$i$i = 0, $this1$i$i$i15$i$i = 0, $this1$i$i$i20$i = 0, $this1$i$i$i7$i$i$i = 0, $this1$i$i$i7$i21$i$i = 0, $this1$i$i12$i = 0, $this1$i$i14$i$i = 0, $this1$i$i19$i = 0, $this1$i$i6$i$i$i = 0, $this1$i$i6$i20$i$i = 0, $this1$i11$i = 0;
 var $this1$i12$i$i = 0, $this1$i18$i = 0, $this1$i21 = 0, $this1$i5$i$i$i = 0, $this1$i5$i18$i$i = 0, $this1$i7$i$i = 0, $tobool = 0, $vbase$offset$i$i = 0, $vbase$offset$i$i$i = 0, $vbase$offset$i11$i$i = 0, $vbase$offset5$i$i$i = 0, $vtable$i$i = 0, $vtable$i$i$i = 0, $vtable$i9$i$i = 0, $vtable3$i$i$i = 0, $vtt$addr$i$i = 0, $vtt$addr$i$i$i = 0, $vtt$addr$i6$i$i = 0, $vtt2$i$i = 0, $vtt2$i$i$i = 0;
 var $vtt2$i8$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 368|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(368|0);
 $ref$tmp$i$i = sp + 224|0;
 $address = sp + 168|0;
 $error = sp + 24|0;
 $agg$tmp = sp;
 $cleanup$isactive = sp + 360|0;
 $this$addr = $this;
 $port$addr = $port;
 $this1 = $this$addr;
 HEAP16[$address>>1] = 2;
 $call = (_htonl(0)|0);
 $sin_addr = ((($address)) + 4|0);
 HEAP32[$sin_addr>>2] = $call;
 $0 = $port$addr;
 $conv = $0&65535;
 $call2 = (_htons($conv)|0);
 $sin_port = ((($address)) + 2|0);
 HEAP16[$sin_port>>1] = $call2;
 $_binded = ((($this1)) + 4|0);
 $1 = HEAP8[$_binded>>0]|0;
 $tobool = $1&1;
 if ($tobool) {
  __ZN6Socket3UDP5closeEv($this1);
  $call3 = (_socket(2,2,0)|0);
  HEAP32[$this1>>2] = $call3;
 }
 $2 = HEAP32[$this1>>2]|0;
 $call5 = (_bind($2,$address,16)|0);
 $cmp = ($call5|0)==(-1);
 if (!($cmp)) {
  $_binded18 = ((($this1)) + 4|0);
  HEAP8[$_binded18>>0] = 1;
  STACKTOP = sp;return;
 }
 $this$addr$i = $error;
 $__wch$addr$i = 24;
 $this1$i = $this$addr$i;
 $3 = ((($this1$i)) + 64|0);
 $this$addr$i$i = $3;
 $this1$i$i = $this$addr$i$i;
 $this$addr$i$i$i = $this1$i$i;
 $this1$i$i$i = $this$addr$i$i$i;
 HEAP32[$this1$i$i$i>>2] = (6400);
 HEAP32[$this1$i$i>>2] = (6384);
 HEAP32[$this1$i>>2] = (2168);
 $add$ptr$i = ((($this1$i)) + 64|0);
 HEAP32[$add$ptr$i>>2] = (2208);
 $add$ptr2$i = ((($this1$i)) + 8|0);
 HEAP32[$add$ptr2$i>>2] = (2188);
 $__sb_$i = ((($this1$i)) + 12|0);
 $this$addr$i15$i = $this1$i;
 $4 = 2220;
 $vtt$addr$i$i = $4;
 $__sb$addr$i$i = $__sb_$i;
 $this1$i18$i = $this$addr$i15$i;
 $vtt2$i$i = $vtt$addr$i$i;
 $5 = $__sb$addr$i$i;
 $6 = ((($vtt2$i$i)) + 4|0);
 $this$addr$i$i14$i = $this1$i18$i;
 $vtt$addr$i$i$i = $6;
 $__sb$addr$i$i$i = $5;
 $this1$i$i19$i = $this$addr$i$i14$i;
 $vtt2$i$i$i = $vtt$addr$i$i$i;
 $7 = HEAP32[$vtt2$i$i$i>>2]|0;
 HEAP32[$this1$i$i19$i>>2] = $7;
 $8 = ((($vtt2$i$i$i)) + 4|0);
 $9 = HEAP32[$8>>2]|0;
 $vtable$i$i$i = HEAP32[$this1$i$i19$i>>2]|0;
 $10 = ((($vtable$i$i$i)) + -12|0);
 $vbase$offset$i$i$i = HEAP32[$10>>2]|0;
 $add$ptr$i$i$i = (($this1$i$i19$i) + ($vbase$offset$i$i$i)|0);
 HEAP32[$add$ptr$i$i$i>>2] = $9;
 $__gc_$i$i$i = ((($this1$i$i19$i)) + 4|0);
 HEAP32[$__gc_$i$i$i>>2] = 0;
 $vtable3$i$i$i = HEAP32[$this1$i$i19$i>>2]|0;
 $11 = ((($vtable3$i$i$i)) + -12|0);
 $vbase$offset5$i$i$i = HEAP32[$11>>2]|0;
 $add$ptr6$i$i$i = (($this1$i$i19$i) + ($vbase$offset5$i$i$i)|0);
 $12 = $__sb$addr$i$i$i;
 $this$addr$i$i$i13$i = $add$ptr6$i$i$i;
 $__sb$addr$i$i$i$i = $12;
 $this1$i$i$i20$i = $this$addr$i$i$i13$i;
 $13 = $__sb$addr$i$i$i$i;
 __THREW__ = 0;
 invoke_vii(344,($this1$i$i$i20$i|0),($13|0));
 $14 = __THREW__; __THREW__ = 0;
 $15 = $14&1;
 if ($15) {
  $44 = ___cxa_find_matching_catch_2()|0;
  $45 = tempRet0;
  $exn$slot$i = $44;
  $ehselector$slot$i = $45;
  $49 = ((($this1$i)) + 64|0);
  __ZNSt3__29basic_iosIcNS_11char_traitsIcEEED2Ev($49);
  $exn$i = $exn$slot$i;
  $sel$i = $ehselector$slot$i;
  ___resumeException($exn$i|0);
  // unreachable;
 }
 $__tie_$i$i$i$i = ((($this1$i$i$i20$i)) + 72|0);
 HEAP32[$__tie_$i$i$i$i>>2] = 0;
 $call$i$i$i$i = (__ZNSt3__211char_traitsIcE3eofEv()|0);
 $__fill_$i$i$i$i = ((($this1$i$i$i20$i)) + 76|0);
 HEAP32[$__fill_$i$i$i$i>>2] = $call$i$i$i$i;
 $16 = ((($this1$i18$i)) + 8|0);
 $17 = ((($vtt2$i$i)) + 12|0);
 $this$addr$i5$i$i = $16;
 $vtt$addr$i6$i$i = $17;
 $this1$i7$i$i = $this$addr$i5$i$i;
 $vtt2$i8$i$i = $vtt$addr$i6$i$i;
 $18 = HEAP32[$vtt2$i8$i$i>>2]|0;
 HEAP32[$this1$i7$i$i>>2] = $18;
 $19 = ((($vtt2$i8$i$i)) + 4|0);
 $20 = HEAP32[$19>>2]|0;
 $vtable$i9$i$i = HEAP32[$this1$i7$i$i>>2]|0;
 $21 = ((($vtable$i9$i$i)) + -12|0);
 $vbase$offset$i11$i$i = HEAP32[$21>>2]|0;
 $add$ptr$i12$i$i = (($this1$i7$i$i) + ($vbase$offset$i11$i$i)|0);
 HEAP32[$add$ptr$i12$i$i>>2] = $20;
 $22 = HEAP32[$vtt2$i$i>>2]|0;
 HEAP32[$this1$i18$i>>2] = $22;
 $23 = ((($vtt2$i$i)) + 20|0);
 $24 = HEAP32[$23>>2]|0;
 $vtable$i$i = HEAP32[$this1$i18$i>>2]|0;
 $25 = ((($vtable$i$i)) + -12|0);
 $vbase$offset$i$i = HEAP32[$25>>2]|0;
 $add$ptr$i$i = (($this1$i18$i) + ($vbase$offset$i$i)|0);
 HEAP32[$add$ptr$i$i>>2] = $24;
 $26 = ((($vtt2$i$i)) + 24|0);
 $27 = HEAP32[$26>>2]|0;
 $add$ptr3$i$i = ((($this1$i18$i)) + 8|0);
 HEAP32[$add$ptr3$i$i>>2] = $27;
 HEAP32[$this1$i>>2] = (2168);
 $add$ptr3$i = ((($this1$i)) + 64|0);
 HEAP32[$add$ptr3$i>>2] = (2208);
 $add$ptr4$i = ((($this1$i)) + 8|0);
 HEAP32[$add$ptr4$i>>2] = (2188);
 $__sb_5$i = ((($this1$i)) + 12|0);
 $28 = $__wch$addr$i;
 $this$addr$i10$i = $__sb_5$i;
 $__wch$addr$i$i = $28;
 $this1$i11$i = $this$addr$i10$i;
 __THREW__ = 0;
 invoke_vi(345,($this1$i11$i|0));
 $29 = __THREW__; __THREW__ = 0;
 $30 = $29&1;
 do {
  if ($30) {
   $46 = ___cxa_find_matching_catch_2()|0;
   $47 = tempRet0;
   $$sink1 = $47;$$sink2 = $46;
  } else {
   HEAP32[$this1$i11$i>>2] = (2264);
   $__str_$i$i = ((($this1$i11$i)) + 32|0);
   $this$addr$i$i9$i = $__str_$i$i;
   $this1$i$i12$i = $this$addr$i$i9$i;
   $this$addr$i$i$i$i = $this1$i$i12$i;
   $this1$i$i$i$i = $this$addr$i$i$i$i;
   $this$addr$i$i$i$i$i = $this1$i$i$i$i;
   $this1$i$i$i$i$i = $this$addr$i$i$i$i$i;
   $this$addr$i$i$i$i$i$i = $this1$i$i$i$i$i;
   ;HEAP32[$this1$i$i$i$i$i>>2]=0|0;HEAP32[$this1$i$i$i$i$i+4>>2]=0|0;HEAP32[$this1$i$i$i$i$i+8>>2]=0|0;
   $this$addr$i4$i$i$i = $this1$i$i12$i;
   $this1$i5$i$i$i = $this$addr$i4$i$i$i;
   $this$addr$i$i3$i$i$i = $this1$i5$i$i$i;
   $this1$i$i6$i$i$i = $this$addr$i$i3$i$i$i;
   $this$addr$i$i$i2$i$i$i = $this1$i$i6$i$i$i;
   $this1$i$i$i7$i$i$i = $this$addr$i$i$i2$i$i$i;
   $__a$i$i$i$i = $this1$i$i$i7$i$i$i;
   $__i$i$i$i$i = 0;
   while(1) {
    $31 = $__i$i$i$i$i;
    $cmp$i$i$i$i = ($31>>>0)<(3);
    if (!($cmp$i$i$i$i)) {
     break;
    }
    $32 = $__a$i$i$i$i;
    $33 = $__i$i$i$i$i;
    $arrayidx$i$i$i$i = (($32) + ($33<<2)|0);
    HEAP32[$arrayidx$i$i$i$i>>2] = 0;
    $34 = $__i$i$i$i$i;
    $inc$i$i$i$i = (($34) + 1)|0;
    $__i$i$i$i$i = $inc$i$i$i$i;
   }
   $__hm_$i$i = ((($this1$i11$i)) + 44|0);
   HEAP32[$__hm_$i$i>>2] = 0;
   $__mode_$i$i = ((($this1$i11$i)) + 48|0);
   $35 = $__wch$addr$i$i;
   HEAP32[$__mode_$i$i>>2] = $35;
   $this$addr$i11$i$i = $ref$tmp$i$i;
   $this1$i12$i$i = $this$addr$i11$i$i;
   $this$addr$i$i10$i$i = $this1$i12$i$i;
   $this1$i$i14$i$i = $this$addr$i$i10$i$i;
   $this$addr$i$i$i9$i$i = $this1$i$i14$i$i;
   $this1$i$i$i15$i$i = $this$addr$i$i$i9$i$i;
   $this$addr$i$i$i$i8$i$i = $this1$i$i$i15$i$i;
   ;HEAP32[$this1$i$i$i15$i$i>>2]=0|0;HEAP32[$this1$i$i$i15$i$i+4>>2]=0|0;HEAP32[$this1$i$i$i15$i$i+8>>2]=0|0;
   $this$addr$i4$i5$i$i = $this1$i12$i$i;
   $this1$i5$i18$i$i = $this$addr$i4$i5$i$i;
   $this$addr$i$i3$i4$i$i = $this1$i5$i18$i$i;
   $this1$i$i6$i20$i$i = $this$addr$i$i3$i4$i$i;
   $this$addr$i$i$i2$i3$i$i = $this1$i$i6$i20$i$i;
   $this1$i$i$i7$i21$i$i = $this$addr$i$i$i2$i3$i$i;
   $__a$i$i6$i$i = $this1$i$i$i7$i21$i$i;
   $__i$i$i7$i$i = 0;
   while(1) {
    $36 = $__i$i$i7$i$i;
    $cmp$i$i25$i$i = ($36>>>0)<(3);
    if (!($cmp$i$i25$i$i)) {
     break;
    }
    $37 = $__a$i$i6$i$i;
    $38 = $__i$i$i7$i$i;
    $arrayidx$i$i27$i$i = (($37) + ($38<<2)|0);
    HEAP32[$arrayidx$i$i27$i$i>>2] = 0;
    $39 = $__i$i$i7$i$i;
    $inc$i$i28$i$i = (($39) + 1)|0;
    $__i$i$i7$i$i = $inc$i$i28$i$i;
   }
   __THREW__ = 0;
   invoke_vii(346,($this1$i11$i|0),($ref$tmp$i$i|0));
   $40 = __THREW__; __THREW__ = 0;
   $41 = $40&1;
   if ($41) {
    $42 = ___cxa_find_matching_catch_2()|0;
    $43 = tempRet0;
    $exn$slot$i$i = $42;
    $ehselector$slot$i$i = $43;
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($ref$tmp$i$i);
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__str_$i$i);
    __ZNSt3__215basic_streambufIcNS_11char_traitsIcEEED2Ev($this1$i11$i);
    $exn$i$i = $exn$slot$i$i;
    $sel$i$i = $ehselector$slot$i$i;
    $$sink1 = $sel$i$i;$$sink2 = $exn$i$i;
    break;
   }
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($ref$tmp$i$i);
   $add$ptr = ((($error)) + 8|0);
   __THREW__ = 0;
   $call7 = (invoke_iii(347,($add$ptr|0),(10639|0))|0);
   $50 = __THREW__; __THREW__ = 0;
   $51 = $50&1;
   if (!($51)) {
    $52 = $port$addr;
    __THREW__ = 0;
    $call9 = (invoke_iii(348,($call7|0),($52|0))|0);
    $53 = __THREW__; __THREW__ = 0;
    $54 = $53&1;
    if (!($54)) {
     __THREW__ = 0;
     (invoke_iii(347,($call9|0),(10668|0))|0);
     $55 = __THREW__; __THREW__ = 0;
     $56 = $55&1;
     if (!($56)) {
      $exception = (___cxa_allocate_exception(16)|0);
      $$expand_i1_val = 1;
      HEAP8[$cleanup$isactive>>0] = $$expand_i1_val;
      $this$addr$i20 = $error;
      $this1$i21 = $this$addr$i20;
      $__sb_$i22 = ((($this1$i21)) + 12|0);
      __THREW__ = 0;
      invoke_vii(349,($agg$tmp|0),($__sb_$i22|0));
      $57 = __THREW__; __THREW__ = 0;
      $58 = $57&1;
      if ($58) {
       $64 = ___cxa_find_matching_catch_2()|0;
       $65 = tempRet0;
       $exn$slot = $64;
       $ehselector$slot = $65;
      } else {
       __THREW__ = 0;
       invoke_vii(340,($exception|0),($agg$tmp|0));
       $59 = __THREW__; __THREW__ = 0;
       $60 = $59&1;
       if (!($60)) {
        $$expand_i1_val4 = 0;
        HEAP8[$cleanup$isactive>>0] = $$expand_i1_val4;
        __THREW__ = 0;
        invoke_viii(341,($exception|0),(64|0),(342|0));
        $61 = __THREW__; __THREW__ = 0;
       }
       $66 = ___cxa_find_matching_catch_2()|0;
       $67 = tempRet0;
       $exn$slot = $66;
       $ehselector$slot = $67;
       __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($agg$tmp);
      }
      $cleanup$is_active$pre_trunc = HEAP8[$cleanup$isactive>>0]|0;
      $cleanup$is_active = $cleanup$is_active$pre_trunc&1;
      if (!($cleanup$is_active)) {
       __ZNSt3__218basic_stringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($error);
       $exn = $exn$slot;
       $sel = $ehselector$slot;
       ___resumeException($exn|0);
       // unreachable;
      }
      ___cxa_free_exception(($exception|0));
      __ZNSt3__218basic_stringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($error);
      $exn = $exn$slot;
      $sel = $ehselector$slot;
      ___resumeException($exn|0);
      // unreachable;
     }
    }
   }
   $62 = ___cxa_find_matching_catch_2()|0;
   $63 = tempRet0;
   $exn$slot = $62;
   $ehselector$slot = $63;
   __ZNSt3__218basic_stringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($error);
   $exn = $exn$slot;
   $sel = $ehselector$slot;
   ___resumeException($exn|0);
   // unreachable;
  }
 } while(0);
 $exn$slot$i = $$sink2;
 $ehselector$slot$i = $$sink1;
 $48 = 2220;
 __ZNSt3__214basic_iostreamIcNS_11char_traitsIcEEED2Ev($this1$i,$48);
 $49 = ((($this1$i)) + 64|0);
 __ZNSt3__29basic_iosIcNS_11char_traitsIcEEED2Ev($49);
 $exn$i = $exn$slot$i;
 $sel$i = $ehselector$slot$i;
 ___resumeException($exn$i|0);
 // unreachable;
}
function __ZNSt3__2lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc($__os,$__str) {
 $__os = $__os|0;
 $__str = $__str|0;
 var $0 = 0, $1 = 0, $2 = 0, $__os$addr = 0, $__str$addr = 0, $call = 0, $call1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $__os$addr = $__os;
 $__str$addr = $__str;
 $0 = $__os$addr;
 $1 = $__str$addr;
 $2 = $__str$addr;
 $call = (__ZNSt3__211char_traitsIcE6lengthEPKc($2)|0);
 $call1 = (__ZNSt3__224__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_j($0,$1,$call)|0);
 STACKTOP = sp;return ($call1|0);
}
function __ZNSt3__218basic_stringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($this) {
 $this = $this|0;
 var $0 = 0, $this$addr = 0, $this1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $this$addr = $this;
 $this1 = $this$addr;
 __ZNSt3__218basic_stringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($this1,2216);
 $0 = ((($this1)) + 64|0);
 __ZNSt3__29basic_iosIcNS_11char_traitsIcEEED2Ev($0);
 STACKTOP = sp;return;
}
function __ZN6Socket3UDP4sendENSt3__212basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEjS7_($this,$ip,$port,$data) {
 $this = $this|0;
 $ip = $ip|0;
 $port = $port|0;
 $data = $data|0;
 var $$expand_i1_val = 0, $$expand_i1_val4 = 0, $$sink1 = 0, $$sink2 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $__a$i$i$i$i = 0, $__a$i$i6$i$i = 0, $__fill_$i$i$i$i = 0, $__gc_$i$i$i = 0;
 var $__hm_$i$i = 0, $__i$i$i$i$i = 0, $__i$i$i7$i$i = 0, $__mode_$i$i = 0, $__p$addr$i$i$i = 0, $__p$addr$i$i$i26 = 0, $__r$addr$i$i$i$i$i = 0, $__r$addr$i$i$i$i$i31 = 0, $__sb$addr$i$i = 0, $__sb$addr$i$i$i = 0, $__sb$addr$i$i$i$i = 0, $__sb_$i = 0, $__sb_$i94 = 0, $__sb_5$i = 0, $__size_$i23$i$i = 0, $__str_$i$i = 0, $__tie_$i$i$i$i = 0, $__wch$addr$i = 0, $__wch$addr$i$i = 0, $__x$addr$i$i$i$i$i$i = 0;
 var $__x$addr$i$i$i$i$i$i30 = 0, $add = 0, $add$ptr = 0, $add$ptr$i = 0, $add$ptr$i$i = 0, $add$ptr$i$i$i = 0, $add$ptr$i12$i$i = 0, $add$ptr2$i = 0, $add$ptr3$i = 0, $add$ptr3$i$i = 0, $add$ptr4$i = 0, $add$ptr6$i$i$i = 0, $address = 0, $agg$tmp = 0, $and$i$i$i = 0, $and$i$i$i$i = 0, $and$i$i$i$i52 = 0, $arrayidx$i$i$i$i103 = 0, $arrayidx$i$i27$i$i = 0, $call = 0;
 var $call$i$i$i$i = 0, $call11 = 0, $call13 = 0, $call15 = 0, $call17 = 0, $call6 = 0, $call7 = 0, $call9 = 0, $cleanup$is_active = 0, $cleanup$is_active$pre_trunc = 0, $cleanup$isactive = 0, $cmp = 0, $cmp$i$i$i$i = 0, $cmp$i$i25$i$i = 0, $cond$i$i = 0, $cond$i$i$i = 0, $cond$i$i$i71 = 0, $conv = 0, $conv$i$i$i = 0, $conv$i$i$i$i = 0;
 var $conv$i$i$i$i51 = 0, $conv$i14$i$i = 0, $ehselector$slot = 0, $ehselector$slot$i = 0, $ehselector$slot$i$i = 0, $error = 0, $exception = 0, $exn = 0, $exn$i = 0, $exn$i$i = 0, $exn$slot = 0, $exn$slot$i = 0, $exn$slot$i$i = 0, $inc$i$i$i$i = 0, $inc$i$i28$i$i = 0, $port$addr = 0, $ref$tmp$i$i = 0, $sel = 0, $sel$i = 0, $sel$i$i = 0;
 var $sin_addr = 0, $sin_port = 0, $this$addr = 0, $this$addr$i = 0, $this$addr$i$i = 0, $this$addr$i$i$i = 0, $this$addr$i$i$i$i = 0, $this$addr$i$i$i$i$i = 0, $this$addr$i$i$i$i$i$i = 0, $this$addr$i$i$i$i$i$i35 = 0, $this$addr$i$i$i$i$i$i85 = 0, $this$addr$i$i$i$i$i36 = 0, $this$addr$i$i$i$i$i73 = 0, $this$addr$i$i$i$i$i86 = 0, $this$addr$i$i$i$i37 = 0, $this$addr$i$i$i$i74 = 0, $this$addr$i$i$i$i8$i$i = 0, $this$addr$i$i$i$i87 = 0, $this$addr$i$i$i13$i = 0, $this$addr$i$i$i13$i$i$i = 0;
 var $this$addr$i$i$i13$i$i$i27 = 0, $this$addr$i$i$i15$i$i = 0, $this$addr$i$i$i2$i$i$i = 0, $this$addr$i$i$i2$i3$i$i = 0, $this$addr$i$i$i38 = 0, $this$addr$i$i$i4$i$i = 0, $this$addr$i$i$i4$i$i$i = 0, $this$addr$i$i$i4$i$i$i32 = 0, $this$addr$i$i$i75 = 0, $this$addr$i$i$i88 = 0, $this$addr$i$i$i9$i$i = 0, $this$addr$i$i10$i$i = 0, $this$addr$i$i14$i = 0, $this$addr$i$i14$i$i$i = 0, $this$addr$i$i14$i$i$i28 = 0, $this$addr$i$i16$i$i = 0, $this$addr$i$i3$i$i$i = 0, $this$addr$i$i3$i4$i$i = 0, $this$addr$i$i39 = 0, $this$addr$i$i5$i$i = 0;
 var $this$addr$i$i5$i$i$i = 0, $this$addr$i$i5$i$i$i33 = 0, $this$addr$i$i76 = 0, $this$addr$i$i89 = 0, $this$addr$i$i9$i = 0, $this$addr$i10$i = 0, $this$addr$i11$i$i = 0, $this$addr$i15$i = 0, $this$addr$i15$i$i$i = 0, $this$addr$i15$i$i$i29 = 0, $this$addr$i17$i$i = 0, $this$addr$i4$i$i$i = 0, $this$addr$i4$i5$i$i = 0, $this$addr$i40 = 0, $this$addr$i5$i$i = 0, $this$addr$i6$i$i = 0, $this$addr$i6$i$i$i = 0, $this$addr$i6$i$i$i34 = 0, $this$addr$i77 = 0, $this$addr$i83 = 0;
 var $this$addr$i90 = 0, $this1 = 0, $this1$i = 0, $this1$i$i = 0, $this1$i$i$i = 0, $this1$i$i$i$i = 0, $this1$i$i$i$i$i = 0, $this1$i$i$i$i$i$i = 0, $this1$i$i$i$i$i$i47 = 0, $this1$i$i$i$i$i46 = 0, $this1$i$i$i$i$i82 = 0, $this1$i$i$i$i$i98 = 0, $this1$i$i$i$i44 = 0, $this1$i$i$i$i81 = 0, $this1$i$i$i$i97 = 0, $this1$i$i$i10$i$i = 0, $this1$i$i$i10$i$i$i = 0, $this1$i$i$i10$i$i$i65 = 0, $this1$i$i$i15$i$i = 0, $this1$i$i$i19$i$i$i = 0;
 var $this1$i$i$i19$i$i$i57 = 0, $this1$i$i$i20$i = 0, $this1$i$i$i21$i$i = 0, $this1$i$i$i43 = 0, $this1$i$i$i7$i$i$i = 0, $this1$i$i$i7$i21$i$i = 0, $this1$i$i$i80 = 0, $this1$i$i$i93 = 0, $this1$i$i12$i = 0, $this1$i$i14$i$i = 0, $this1$i$i18$i$i$i = 0, $this1$i$i18$i$i$i56 = 0, $this1$i$i19$i = 0, $this1$i$i20$i$i = 0, $this1$i$i42 = 0, $this1$i$i6$i$i$i = 0, $this1$i$i6$i20$i$i = 0, $this1$i$i79 = 0, $this1$i$i9$i$i = 0, $this1$i$i9$i$i$i = 0;
 var $this1$i$i9$i$i$i64 = 0, $this1$i$i92 = 0, $this1$i11$i = 0, $this1$i12$i$i = 0, $this1$i16$i$i$i = 0, $this1$i16$i$i$i54 = 0, $this1$i18$i = 0, $this1$i18$i$i = 0, $this1$i41 = 0, $this1$i5$i$i$i = 0, $this1$i5$i18$i$i = 0, $this1$i7$i$i = 0, $this1$i7$i$i$i = 0, $this1$i7$i$i$i62 = 0, $this1$i7$i$i95 = 0, $this1$i78 = 0, $this1$i84 = 0, $this1$i91 = 0, $tobool$i$i$i = 0, $tobool$i$i$i$i = 0;
 var $tobool$i$i$i$i53 = 0, $vbase$offset$i$i = 0, $vbase$offset$i$i$i = 0, $vbase$offset$i11$i$i = 0, $vbase$offset5$i$i$i = 0, $vtable$i$i = 0, $vtable$i$i$i = 0, $vtable$i9$i$i = 0, $vtable3$i$i$i = 0, $vtt$addr$i$i = 0, $vtt$addr$i$i$i = 0, $vtt$addr$i6$i$i = 0, $vtt2$i$i = 0, $vtt2$i$i$i = 0, $vtt2$i8$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 528|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(528|0);
 $ref$tmp$i$i = sp + 392|0;
 $address = sp + 168|0;
 $error = sp + 24|0;
 $agg$tmp = sp;
 $cleanup$isactive = sp + 524|0;
 $this$addr = $this;
 $port$addr = $port;
 $this1 = $this$addr;
 HEAP16[$address>>1] = 2;
 $0 = $port$addr;
 $conv = $0&65535;
 $call = (_htons($conv)|0);
 $sin_port = ((($address)) + 2|0);
 HEAP16[$sin_port>>1] = $call;
 $this$addr$i = $ip;
 $this1$i = $this$addr$i;
 $this$addr$i$i = $this1$i;
 $this1$i$i = $this$addr$i$i;
 $this$addr$i$i$i = $this1$i$i;
 $this1$i$i$i = $this$addr$i$i$i;
 $this$addr$i$i$i$i = $this1$i$i$i;
 $this1$i$i$i$i = $this$addr$i$i$i$i;
 $this$addr$i$i$i$i$i = $this1$i$i$i$i;
 $this1$i$i$i$i$i = $this$addr$i$i$i$i$i;
 $this$addr$i$i$i$i$i$i = $this1$i$i$i$i$i;
 $this1$i$i$i$i$i$i = $this$addr$i$i$i$i$i$i;
 $1 = ((($this1$i$i$i$i$i$i)) + 11|0);
 $2 = HEAP8[$1>>0]|0;
 $conv$i$i$i$i = $2&255;
 $and$i$i$i$i = $conv$i$i$i$i & 128;
 $tobool$i$i$i$i = ($and$i$i$i$i|0)!=(0);
 if ($tobool$i$i$i$i) {
  $this$addr$i15$i$i$i = $this1$i$i$i;
  $this1$i16$i$i$i = $this$addr$i15$i$i$i;
  $this$addr$i$i14$i$i$i = $this1$i16$i$i$i;
  $this1$i$i18$i$i$i = $this$addr$i$i14$i$i$i;
  $this$addr$i$i$i13$i$i$i = $this1$i$i18$i$i$i;
  $this1$i$i$i19$i$i$i = $this$addr$i$i$i13$i$i$i;
  $3 = HEAP32[$this1$i$i$i19$i$i$i>>2]|0;
  $cond$i$i$i = $3;
 } else {
  $this$addr$i6$i$i$i = $this1$i$i$i;
  $this1$i7$i$i$i = $this$addr$i6$i$i$i;
  $this$addr$i$i5$i$i$i = $this1$i7$i$i$i;
  $this1$i$i9$i$i$i = $this$addr$i$i5$i$i$i;
  $this$addr$i$i$i4$i$i$i = $this1$i$i9$i$i$i;
  $this1$i$i$i10$i$i$i = $this$addr$i$i$i4$i$i$i;
  $__r$addr$i$i$i$i$i = $this1$i$i$i10$i$i$i;
  $4 = $__r$addr$i$i$i$i$i;
  $__x$addr$i$i$i$i$i$i = $4;
  $5 = $__x$addr$i$i$i$i$i$i;
  $cond$i$i$i = $5;
 }
 $__p$addr$i$i$i = $cond$i$i$i;
 $6 = $__p$addr$i$i$i;
 $sin_addr = ((($address)) + 4|0);
 (___inet_aton($6,$sin_addr)|0);
 $7 = HEAP32[$this1>>2]|0;
 $this$addr$i40 = $data;
 $this1$i41 = $this$addr$i40;
 $this$addr$i$i39 = $this1$i41;
 $this1$i$i42 = $this$addr$i$i39;
 $this$addr$i$i$i38 = $this1$i$i42;
 $this1$i$i$i43 = $this$addr$i$i$i38;
 $this$addr$i$i$i$i37 = $this1$i$i$i43;
 $this1$i$i$i$i44 = $this$addr$i$i$i$i37;
 $this$addr$i$i$i$i$i36 = $this1$i$i$i$i44;
 $this1$i$i$i$i$i46 = $this$addr$i$i$i$i$i36;
 $this$addr$i$i$i$i$i$i35 = $this1$i$i$i$i$i46;
 $this1$i$i$i$i$i$i47 = $this$addr$i$i$i$i$i$i35;
 $8 = ((($this1$i$i$i$i$i$i47)) + 11|0);
 $9 = HEAP8[$8>>0]|0;
 $conv$i$i$i$i51 = $9&255;
 $and$i$i$i$i52 = $conv$i$i$i$i51 & 128;
 $tobool$i$i$i$i53 = ($and$i$i$i$i52|0)!=(0);
 if ($tobool$i$i$i$i53) {
  $this$addr$i15$i$i$i29 = $this1$i$i$i43;
  $this1$i16$i$i$i54 = $this$addr$i15$i$i$i29;
  $this$addr$i$i14$i$i$i28 = $this1$i16$i$i$i54;
  $this1$i$i18$i$i$i56 = $this$addr$i$i14$i$i$i28;
  $this$addr$i$i$i13$i$i$i27 = $this1$i$i18$i$i$i56;
  $this1$i$i$i19$i$i$i57 = $this$addr$i$i$i13$i$i$i27;
  $10 = HEAP32[$this1$i$i$i19$i$i$i57>>2]|0;
  $cond$i$i$i71 = $10;
 } else {
  $this$addr$i6$i$i$i34 = $this1$i$i$i43;
  $this1$i7$i$i$i62 = $this$addr$i6$i$i$i34;
  $this$addr$i$i5$i$i$i33 = $this1$i7$i$i$i62;
  $this1$i$i9$i$i$i64 = $this$addr$i$i5$i$i$i33;
  $this$addr$i$i$i4$i$i$i32 = $this1$i$i9$i$i$i64;
  $this1$i$i$i10$i$i$i65 = $this$addr$i$i$i4$i$i$i32;
  $__r$addr$i$i$i$i$i31 = $this1$i$i$i10$i$i$i65;
  $11 = $__r$addr$i$i$i$i$i31;
  $__x$addr$i$i$i$i$i$i30 = $11;
  $12 = $__x$addr$i$i$i$i$i$i30;
  $cond$i$i$i71 = $12;
 }
 $__p$addr$i$i$i26 = $cond$i$i$i71;
 $13 = $__p$addr$i$i$i26;
 $this$addr$i77 = $data;
 $this1$i78 = $this$addr$i77;
 $this$addr$i$i76 = $this1$i78;
 $this1$i$i79 = $this$addr$i$i76;
 $this$addr$i$i$i75 = $this1$i$i79;
 $this1$i$i$i80 = $this$addr$i$i$i75;
 $this$addr$i$i$i$i74 = $this1$i$i$i80;
 $this1$i$i$i$i81 = $this$addr$i$i$i$i74;
 $this$addr$i$i$i$i$i73 = $this1$i$i$i$i81;
 $this1$i$i$i$i$i82 = $this$addr$i$i$i$i$i73;
 $14 = ((($this1$i$i$i$i$i82)) + 11|0);
 $15 = HEAP8[$14>>0]|0;
 $conv$i$i$i = $15&255;
 $and$i$i$i = $conv$i$i$i & 128;
 $tobool$i$i$i = ($and$i$i$i|0)!=(0);
 if ($tobool$i$i$i) {
  $this$addr$i17$i$i = $this1$i$i79;
  $this1$i18$i$i = $this$addr$i17$i$i;
  $this$addr$i$i16$i$i = $this1$i18$i$i;
  $this1$i$i20$i$i = $this$addr$i$i16$i$i;
  $this$addr$i$i$i15$i$i = $this1$i$i20$i$i;
  $this1$i$i$i21$i$i = $this$addr$i$i$i15$i$i;
  $__size_$i23$i$i = ((($this1$i$i$i21$i$i)) + 4|0);
  $16 = HEAP32[$__size_$i23$i$i>>2]|0;
  $cond$i$i = $16;
 } else {
  $this$addr$i6$i$i = $this1$i$i79;
  $this1$i7$i$i = $this$addr$i6$i$i;
  $this$addr$i$i5$i$i = $this1$i7$i$i;
  $this1$i$i9$i$i = $this$addr$i$i5$i$i;
  $this$addr$i$i$i4$i$i = $this1$i$i9$i$i;
  $this1$i$i$i10$i$i = $this$addr$i$i$i4$i$i;
  $17 = ((($this1$i$i$i10$i$i)) + 11|0);
  $18 = HEAP8[$17>>0]|0;
  $conv$i14$i$i = $18&255;
  $cond$i$i = $conv$i14$i$i;
 }
 $add = (($cond$i$i) + 1)|0;
 $call6 = (_sendto($7,$13,$add,0,$address,16)|0);
 $cmp = ($call6|0)==(-1);
 if (!($cmp)) {
  STACKTOP = sp;return;
 }
 $this$addr$i90 = $error;
 $__wch$addr$i = 24;
 $this1$i91 = $this$addr$i90;
 $19 = ((($this1$i91)) + 64|0);
 $this$addr$i$i89 = $19;
 $this1$i$i92 = $this$addr$i$i89;
 $this$addr$i$i$i88 = $this1$i$i92;
 $this1$i$i$i93 = $this$addr$i$i$i88;
 HEAP32[$this1$i$i$i93>>2] = (6400);
 HEAP32[$this1$i$i92>>2] = (6384);
 HEAP32[$this1$i91>>2] = (2168);
 $add$ptr$i = ((($this1$i91)) + 64|0);
 HEAP32[$add$ptr$i>>2] = (2208);
 $add$ptr2$i = ((($this1$i91)) + 8|0);
 HEAP32[$add$ptr2$i>>2] = (2188);
 $__sb_$i94 = ((($this1$i91)) + 12|0);
 $this$addr$i15$i = $this1$i91;
 $20 = 2220;
 $vtt$addr$i$i = $20;
 $__sb$addr$i$i = $__sb_$i94;
 $this1$i18$i = $this$addr$i15$i;
 $vtt2$i$i = $vtt$addr$i$i;
 $21 = $__sb$addr$i$i;
 $22 = ((($vtt2$i$i)) + 4|0);
 $this$addr$i$i14$i = $this1$i18$i;
 $vtt$addr$i$i$i = $22;
 $__sb$addr$i$i$i = $21;
 $this1$i$i19$i = $this$addr$i$i14$i;
 $vtt2$i$i$i = $vtt$addr$i$i$i;
 $23 = HEAP32[$vtt2$i$i$i>>2]|0;
 HEAP32[$this1$i$i19$i>>2] = $23;
 $24 = ((($vtt2$i$i$i)) + 4|0);
 $25 = HEAP32[$24>>2]|0;
 $vtable$i$i$i = HEAP32[$this1$i$i19$i>>2]|0;
 $26 = ((($vtable$i$i$i)) + -12|0);
 $vbase$offset$i$i$i = HEAP32[$26>>2]|0;
 $add$ptr$i$i$i = (($this1$i$i19$i) + ($vbase$offset$i$i$i)|0);
 HEAP32[$add$ptr$i$i$i>>2] = $25;
 $__gc_$i$i$i = ((($this1$i$i19$i)) + 4|0);
 HEAP32[$__gc_$i$i$i>>2] = 0;
 $vtable3$i$i$i = HEAP32[$this1$i$i19$i>>2]|0;
 $27 = ((($vtable3$i$i$i)) + -12|0);
 $vbase$offset5$i$i$i = HEAP32[$27>>2]|0;
 $add$ptr6$i$i$i = (($this1$i$i19$i) + ($vbase$offset5$i$i$i)|0);
 $28 = $__sb$addr$i$i$i;
 $this$addr$i$i$i13$i = $add$ptr6$i$i$i;
 $__sb$addr$i$i$i$i = $28;
 $this1$i$i$i20$i = $this$addr$i$i$i13$i;
 $29 = $__sb$addr$i$i$i$i;
 __THREW__ = 0;
 invoke_vii(344,($this1$i$i$i20$i|0),($29|0));
 $30 = __THREW__; __THREW__ = 0;
 $31 = $30&1;
 if ($31) {
  $60 = ___cxa_find_matching_catch_2()|0;
  $61 = tempRet0;
  $exn$slot$i = $60;
  $ehselector$slot$i = $61;
  $65 = ((($this1$i91)) + 64|0);
  __ZNSt3__29basic_iosIcNS_11char_traitsIcEEED2Ev($65);
  $exn$i = $exn$slot$i;
  $sel$i = $ehselector$slot$i;
  ___resumeException($exn$i|0);
  // unreachable;
 }
 $__tie_$i$i$i$i = ((($this1$i$i$i20$i)) + 72|0);
 HEAP32[$__tie_$i$i$i$i>>2] = 0;
 $call$i$i$i$i = (__ZNSt3__211char_traitsIcE3eofEv()|0);
 $__fill_$i$i$i$i = ((($this1$i$i$i20$i)) + 76|0);
 HEAP32[$__fill_$i$i$i$i>>2] = $call$i$i$i$i;
 $32 = ((($this1$i18$i)) + 8|0);
 $33 = ((($vtt2$i$i)) + 12|0);
 $this$addr$i5$i$i = $32;
 $vtt$addr$i6$i$i = $33;
 $this1$i7$i$i95 = $this$addr$i5$i$i;
 $vtt2$i8$i$i = $vtt$addr$i6$i$i;
 $34 = HEAP32[$vtt2$i8$i$i>>2]|0;
 HEAP32[$this1$i7$i$i95>>2] = $34;
 $35 = ((($vtt2$i8$i$i)) + 4|0);
 $36 = HEAP32[$35>>2]|0;
 $vtable$i9$i$i = HEAP32[$this1$i7$i$i95>>2]|0;
 $37 = ((($vtable$i9$i$i)) + -12|0);
 $vbase$offset$i11$i$i = HEAP32[$37>>2]|0;
 $add$ptr$i12$i$i = (($this1$i7$i$i95) + ($vbase$offset$i11$i$i)|0);
 HEAP32[$add$ptr$i12$i$i>>2] = $36;
 $38 = HEAP32[$vtt2$i$i>>2]|0;
 HEAP32[$this1$i18$i>>2] = $38;
 $39 = ((($vtt2$i$i)) + 20|0);
 $40 = HEAP32[$39>>2]|0;
 $vtable$i$i = HEAP32[$this1$i18$i>>2]|0;
 $41 = ((($vtable$i$i)) + -12|0);
 $vbase$offset$i$i = HEAP32[$41>>2]|0;
 $add$ptr$i$i = (($this1$i18$i) + ($vbase$offset$i$i)|0);
 HEAP32[$add$ptr$i$i>>2] = $40;
 $42 = ((($vtt2$i$i)) + 24|0);
 $43 = HEAP32[$42>>2]|0;
 $add$ptr3$i$i = ((($this1$i18$i)) + 8|0);
 HEAP32[$add$ptr3$i$i>>2] = $43;
 HEAP32[$this1$i91>>2] = (2168);
 $add$ptr3$i = ((($this1$i91)) + 64|0);
 HEAP32[$add$ptr3$i>>2] = (2208);
 $add$ptr4$i = ((($this1$i91)) + 8|0);
 HEAP32[$add$ptr4$i>>2] = (2188);
 $__sb_5$i = ((($this1$i91)) + 12|0);
 $44 = $__wch$addr$i;
 $this$addr$i10$i = $__sb_5$i;
 $__wch$addr$i$i = $44;
 $this1$i11$i = $this$addr$i10$i;
 __THREW__ = 0;
 invoke_vi(345,($this1$i11$i|0));
 $45 = __THREW__; __THREW__ = 0;
 $46 = $45&1;
 do {
  if ($46) {
   $62 = ___cxa_find_matching_catch_2()|0;
   $63 = tempRet0;
   $$sink1 = $63;$$sink2 = $62;
  } else {
   HEAP32[$this1$i11$i>>2] = (2264);
   $__str_$i$i = ((($this1$i11$i)) + 32|0);
   $this$addr$i$i9$i = $__str_$i$i;
   $this1$i$i12$i = $this$addr$i$i9$i;
   $this$addr$i$i$i$i87 = $this1$i$i12$i;
   $this1$i$i$i$i97 = $this$addr$i$i$i$i87;
   $this$addr$i$i$i$i$i86 = $this1$i$i$i$i97;
   $this1$i$i$i$i$i98 = $this$addr$i$i$i$i$i86;
   $this$addr$i$i$i$i$i$i85 = $this1$i$i$i$i$i98;
   ;HEAP32[$this1$i$i$i$i$i98>>2]=0|0;HEAP32[$this1$i$i$i$i$i98+4>>2]=0|0;HEAP32[$this1$i$i$i$i$i98+8>>2]=0|0;
   $this$addr$i4$i$i$i = $this1$i$i12$i;
   $this1$i5$i$i$i = $this$addr$i4$i$i$i;
   $this$addr$i$i3$i$i$i = $this1$i5$i$i$i;
   $this1$i$i6$i$i$i = $this$addr$i$i3$i$i$i;
   $this$addr$i$i$i2$i$i$i = $this1$i$i6$i$i$i;
   $this1$i$i$i7$i$i$i = $this$addr$i$i$i2$i$i$i;
   $__a$i$i$i$i = $this1$i$i$i7$i$i$i;
   $__i$i$i$i$i = 0;
   while(1) {
    $47 = $__i$i$i$i$i;
    $cmp$i$i$i$i = ($47>>>0)<(3);
    if (!($cmp$i$i$i$i)) {
     break;
    }
    $48 = $__a$i$i$i$i;
    $49 = $__i$i$i$i$i;
    $arrayidx$i$i$i$i103 = (($48) + ($49<<2)|0);
    HEAP32[$arrayidx$i$i$i$i103>>2] = 0;
    $50 = $__i$i$i$i$i;
    $inc$i$i$i$i = (($50) + 1)|0;
    $__i$i$i$i$i = $inc$i$i$i$i;
   }
   $__hm_$i$i = ((($this1$i11$i)) + 44|0);
   HEAP32[$__hm_$i$i>>2] = 0;
   $__mode_$i$i = ((($this1$i11$i)) + 48|0);
   $51 = $__wch$addr$i$i;
   HEAP32[$__mode_$i$i>>2] = $51;
   $this$addr$i11$i$i = $ref$tmp$i$i;
   $this1$i12$i$i = $this$addr$i11$i$i;
   $this$addr$i$i10$i$i = $this1$i12$i$i;
   $this1$i$i14$i$i = $this$addr$i$i10$i$i;
   $this$addr$i$i$i9$i$i = $this1$i$i14$i$i;
   $this1$i$i$i15$i$i = $this$addr$i$i$i9$i$i;
   $this$addr$i$i$i$i8$i$i = $this1$i$i$i15$i$i;
   ;HEAP32[$this1$i$i$i15$i$i>>2]=0|0;HEAP32[$this1$i$i$i15$i$i+4>>2]=0|0;HEAP32[$this1$i$i$i15$i$i+8>>2]=0|0;
   $this$addr$i4$i5$i$i = $this1$i12$i$i;
   $this1$i5$i18$i$i = $this$addr$i4$i5$i$i;
   $this$addr$i$i3$i4$i$i = $this1$i5$i18$i$i;
   $this1$i$i6$i20$i$i = $this$addr$i$i3$i4$i$i;
   $this$addr$i$i$i2$i3$i$i = $this1$i$i6$i20$i$i;
   $this1$i$i$i7$i21$i$i = $this$addr$i$i$i2$i3$i$i;
   $__a$i$i6$i$i = $this1$i$i$i7$i21$i$i;
   $__i$i$i7$i$i = 0;
   while(1) {
    $52 = $__i$i$i7$i$i;
    $cmp$i$i25$i$i = ($52>>>0)<(3);
    if (!($cmp$i$i25$i$i)) {
     break;
    }
    $53 = $__a$i$i6$i$i;
    $54 = $__i$i$i7$i$i;
    $arrayidx$i$i27$i$i = (($53) + ($54<<2)|0);
    HEAP32[$arrayidx$i$i27$i$i>>2] = 0;
    $55 = $__i$i$i7$i$i;
    $inc$i$i28$i$i = (($55) + 1)|0;
    $__i$i$i7$i$i = $inc$i$i28$i$i;
   }
   __THREW__ = 0;
   invoke_vii(346,($this1$i11$i|0),($ref$tmp$i$i|0));
   $56 = __THREW__; __THREW__ = 0;
   $57 = $56&1;
   if ($57) {
    $58 = ___cxa_find_matching_catch_2()|0;
    $59 = tempRet0;
    $exn$slot$i$i = $58;
    $ehselector$slot$i$i = $59;
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($ref$tmp$i$i);
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__str_$i$i);
    __ZNSt3__215basic_streambufIcNS_11char_traitsIcEEED2Ev($this1$i11$i);
    $exn$i$i = $exn$slot$i$i;
    $sel$i$i = $ehselector$slot$i$i;
    $$sink1 = $sel$i$i;$$sink2 = $exn$i$i;
    break;
   }
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($ref$tmp$i$i);
   $add$ptr = ((($error)) + 8|0);
   __THREW__ = 0;
   $call7 = (invoke_iii(347,($add$ptr|0),(10689|0))|0);
   $66 = __THREW__; __THREW__ = 0;
   $67 = $66&1;
   if (!($67)) {
    __THREW__ = 0;
    $call9 = (invoke_iii(350,($call7|0),($ip|0))|0);
    $68 = __THREW__; __THREW__ = 0;
    $69 = $68&1;
    if (!($69)) {
     __THREW__ = 0;
     $call11 = (invoke_iii(347,($call9|0),(10706|0))|0);
     $70 = __THREW__; __THREW__ = 0;
     $71 = $70&1;
     if (!($71)) {
      $72 = $port$addr;
      __THREW__ = 0;
      $call13 = (invoke_iii(348,($call11|0),($72|0))|0);
      $73 = __THREW__; __THREW__ = 0;
      $74 = $73&1;
      if (!($74)) {
       __THREW__ = 0;
       $call15 = (invoke_iii(347,($call13|0),(10715|0))|0);
       $75 = __THREW__; __THREW__ = 0;
       $76 = $75&1;
       if (!($76)) {
        __THREW__ = 0;
        $call17 = (invoke_iii(350,($call15|0),($data|0))|0);
        $77 = __THREW__; __THREW__ = 0;
        $78 = $77&1;
        if (!($78)) {
         __THREW__ = 0;
         (invoke_iii(347,($call17|0),(10724|0))|0);
         $79 = __THREW__; __THREW__ = 0;
         $80 = $79&1;
         if (!($80)) {
          $exception = (___cxa_allocate_exception(16)|0);
          $$expand_i1_val = 1;
          HEAP8[$cleanup$isactive>>0] = $$expand_i1_val;
          $this$addr$i83 = $error;
          $this1$i84 = $this$addr$i83;
          $__sb_$i = ((($this1$i84)) + 12|0);
          __THREW__ = 0;
          invoke_vii(349,($agg$tmp|0),($__sb_$i|0));
          $81 = __THREW__; __THREW__ = 0;
          $82 = $81&1;
          if ($82) {
           $88 = ___cxa_find_matching_catch_2()|0;
           $89 = tempRet0;
           $exn$slot = $88;
           $ehselector$slot = $89;
          } else {
           __THREW__ = 0;
           invoke_vii(340,($exception|0),($agg$tmp|0));
           $83 = __THREW__; __THREW__ = 0;
           $84 = $83&1;
           if (!($84)) {
            $$expand_i1_val4 = 0;
            HEAP8[$cleanup$isactive>>0] = $$expand_i1_val4;
            __THREW__ = 0;
            invoke_viii(341,($exception|0),(64|0),(342|0));
            $85 = __THREW__; __THREW__ = 0;
           }
           $90 = ___cxa_find_matching_catch_2()|0;
           $91 = tempRet0;
           $exn$slot = $90;
           $ehselector$slot = $91;
           __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($agg$tmp);
          }
          $cleanup$is_active$pre_trunc = HEAP8[$cleanup$isactive>>0]|0;
          $cleanup$is_active = $cleanup$is_active$pre_trunc&1;
          if (!($cleanup$is_active)) {
           __ZNSt3__218basic_stringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($error);
           $exn = $exn$slot;
           $sel = $ehselector$slot;
           ___resumeException($exn|0);
           // unreachable;
          }
          ___cxa_free_exception(($exception|0));
          __ZNSt3__218basic_stringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($error);
          $exn = $exn$slot;
          $sel = $ehselector$slot;
          ___resumeException($exn|0);
          // unreachable;
         }
        }
       }
      }
     }
    }
   }
   $86 = ___cxa_find_matching_catch_2()|0;
   $87 = tempRet0;
   $exn$slot = $86;
   $ehselector$slot = $87;
   __ZNSt3__218basic_stringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($error);
   $exn = $exn$slot;
   $sel = $ehselector$slot;
   ___resumeException($exn|0);
   // unreachable;
  }
 } while(0);
 $exn$slot$i = $$sink2;
 $ehselector$slot$i = $$sink1;
 $64 = 2220;
 __ZNSt3__214basic_iostreamIcNS_11char_traitsIcEEED2Ev($this1$i91,$64);
 $65 = ((($this1$i91)) + 64|0);
 __ZNSt3__29basic_iosIcNS_11char_traitsIcEEED2Ev($65);
 $exn$i = $exn$slot$i;
 $sel$i = $ehselector$slot$i;
 ___resumeException($exn$i|0);
 // unreachable;
}
function __ZNSt3__2lsIcNS_11char_traitsIcEENS_9allocatorIcEEEERNS_13basic_ostreamIT_T0_EES9_RKNS_12basic_stringIS6_S7_T1_EE($__os,$__str) {
 $__os = $__os|0;
 $__str = $__str|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__os$addr = 0, $__p$addr$i$i = 0, $__r$addr$i$i$i$i = 0, $__size_$i23$i = 0, $__str$addr = 0, $__x$addr$i$i$i$i$i = 0;
 var $and$i$i = 0, $and$i$i$i = 0, $call2 = 0, $cond$i = 0, $cond$i$i = 0, $conv$i$i = 0, $conv$i$i$i = 0, $conv$i14$i = 0, $this$addr$i = 0, $this$addr$i$i = 0, $this$addr$i$i$i = 0, $this$addr$i$i$i$i = 0, $this$addr$i$i$i$i$i = 0, $this$addr$i$i$i$i3 = 0, $this$addr$i$i$i13$i$i = 0, $this$addr$i$i$i15$i = 0, $this$addr$i$i$i4 = 0, $this$addr$i$i$i4$i = 0, $this$addr$i$i$i4$i$i = 0, $this$addr$i$i14$i$i = 0;
 var $this$addr$i$i16$i = 0, $this$addr$i$i5 = 0, $this$addr$i$i5$i = 0, $this$addr$i$i5$i$i = 0, $this$addr$i15$i$i = 0, $this$addr$i17$i = 0, $this$addr$i6 = 0, $this$addr$i6$i = 0, $this$addr$i6$i$i = 0, $this1$i = 0, $this1$i$i = 0, $this1$i$i$i = 0, $this1$i$i$i$i = 0, $this1$i$i$i$i$i = 0, $this1$i$i$i$i10 = 0, $this1$i$i$i10$i = 0, $this1$i$i$i10$i$i = 0, $this1$i$i$i19$i$i = 0, $this1$i$i$i21$i = 0, $this1$i$i$i9 = 0;
 var $this1$i$i18$i$i = 0, $this1$i$i20$i = 0, $this1$i$i8 = 0, $this1$i$i9$i = 0, $this1$i$i9$i$i = 0, $this1$i16$i$i = 0, $this1$i18$i = 0, $this1$i7 = 0, $this1$i7$i = 0, $this1$i7$i$i = 0, $tobool$i$i = 0, $tobool$i$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(112|0);
 $__os$addr = $__os;
 $__str$addr = $__str;
 $0 = $__os$addr;
 $1 = $__str$addr;
 $this$addr$i = $1;
 $this1$i = $this$addr$i;
 $this$addr$i$i = $this1$i;
 $this1$i$i = $this$addr$i$i;
 $this$addr$i$i$i = $this1$i$i;
 $this1$i$i$i = $this$addr$i$i$i;
 $this$addr$i$i$i$i = $this1$i$i$i;
 $this1$i$i$i$i = $this$addr$i$i$i$i;
 $this$addr$i$i$i$i$i = $this1$i$i$i$i;
 $this1$i$i$i$i$i = $this$addr$i$i$i$i$i;
 $2 = ((($this1$i$i$i$i$i)) + 11|0);
 $3 = HEAP8[$2>>0]|0;
 $conv$i$i$i = $3&255;
 $and$i$i$i = $conv$i$i$i & 128;
 $tobool$i$i$i = ($and$i$i$i|0)!=(0);
 if ($tobool$i$i$i) {
  $this$addr$i15$i$i = $this1$i$i;
  $this1$i16$i$i = $this$addr$i15$i$i;
  $this$addr$i$i14$i$i = $this1$i16$i$i;
  $this1$i$i18$i$i = $this$addr$i$i14$i$i;
  $this$addr$i$i$i13$i$i = $this1$i$i18$i$i;
  $this1$i$i$i19$i$i = $this$addr$i$i$i13$i$i;
  $4 = HEAP32[$this1$i$i$i19$i$i>>2]|0;
  $cond$i$i = $4;
 } else {
  $this$addr$i6$i$i = $this1$i$i;
  $this1$i7$i$i = $this$addr$i6$i$i;
  $this$addr$i$i5$i$i = $this1$i7$i$i;
  $this1$i$i9$i$i = $this$addr$i$i5$i$i;
  $this$addr$i$i$i4$i$i = $this1$i$i9$i$i;
  $this1$i$i$i10$i$i = $this$addr$i$i$i4$i$i;
  $__r$addr$i$i$i$i = $this1$i$i$i10$i$i;
  $5 = $__r$addr$i$i$i$i;
  $__x$addr$i$i$i$i$i = $5;
  $6 = $__x$addr$i$i$i$i$i;
  $cond$i$i = $6;
 }
 $__p$addr$i$i = $cond$i$i;
 $7 = $__p$addr$i$i;
 $8 = $__str$addr;
 $this$addr$i6 = $8;
 $this1$i7 = $this$addr$i6;
 $this$addr$i$i5 = $this1$i7;
 $this1$i$i8 = $this$addr$i$i5;
 $this$addr$i$i$i4 = $this1$i$i8;
 $this1$i$i$i9 = $this$addr$i$i$i4;
 $this$addr$i$i$i$i3 = $this1$i$i$i9;
 $this1$i$i$i$i10 = $this$addr$i$i$i$i3;
 $9 = ((($this1$i$i$i$i10)) + 11|0);
 $10 = HEAP8[$9>>0]|0;
 $conv$i$i = $10&255;
 $and$i$i = $conv$i$i & 128;
 $tobool$i$i = ($and$i$i|0)!=(0);
 if ($tobool$i$i) {
  $this$addr$i17$i = $this1$i7;
  $this1$i18$i = $this$addr$i17$i;
  $this$addr$i$i16$i = $this1$i18$i;
  $this1$i$i20$i = $this$addr$i$i16$i;
  $this$addr$i$i$i15$i = $this1$i$i20$i;
  $this1$i$i$i21$i = $this$addr$i$i$i15$i;
  $__size_$i23$i = ((($this1$i$i$i21$i)) + 4|0);
  $11 = HEAP32[$__size_$i23$i>>2]|0;
  $cond$i = $11;
  $call2 = (__ZNSt3__224__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_j($0,$7,$cond$i)|0);
  STACKTOP = sp;return ($call2|0);
 } else {
  $this$addr$i6$i = $this1$i7;
  $this1$i7$i = $this$addr$i6$i;
  $this$addr$i$i5$i = $this1$i7$i;
  $this1$i$i9$i = $this$addr$i$i5$i;
  $this$addr$i$i$i4$i = $this1$i$i9$i;
  $this1$i$i$i10$i = $this$addr$i$i$i4$i;
  $12 = ((($this1$i$i$i10$i)) + 11|0);
  $13 = HEAP8[$12>>0]|0;
  $conv$i14$i = $13&255;
  $cond$i = $conv$i14$i;
  $call2 = (__ZNSt3__224__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_j($0,$7,$cond$i)|0);
  STACKTOP = sp;return ($call2|0);
 }
 return (0)|0;
}
function __ZN6Socket3UDP7receiveEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var $$expand_i1_val = 0, $$expand_i1_val1 = 0, $$expand_i1_val3 = 0, $$expand_i1_val6 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__s$addr$i = 0, $__s$addr$i23 = 0;
 var $__s$addr$i28 = 0, $address = 0, $agg$tmp = 0, $agg$tmp9 = 0, $agg$tmp9$byval_copy = 0, $buffer = 0, $call = 0, $call$i21 = 0, $call11 = 0, $call16 = 0, $call2 = 0, $cleanup$is_active = 0, $cleanup$is_active$pre_trunc = 0, $cleanup$isactive = 0, $cmp = 0, $conv = 0, $data = 0, $ehselector$slot = 0, $exception = 0, $exn = 0;
 var $exn$slot = 0, $nrvo = 0, $nrvo$val = 0, $nrvo$val$pre_trunc = 0, $port = 0, $sel = 0, $sin_addr = 0, $sin_port = 0, $size = 0, $this$addr = 0, $this$addr$i = 0, $this$addr$i$i = 0, $this$addr$i$i$i = 0, $this$addr$i$i$i$i = 0, $this$addr$i22 = 0, $this$addr$i27 = 0, $this1 = 0, $this1$i = 0, $this1$i$i = 0, $this1$i$i$i = 0;
 var $this1$i24 = 0, $this1$i29 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(96|0);
 $agg$tmp9$byval_copy = sp + 88|0;
 $size = sp + 44|0;
 $address = sp + 24|0;
 $nrvo = sp + 93|0;
 $agg$tmp = sp + 4|0;
 $cleanup$isactive = sp + 92|0;
 $agg$tmp9 = sp;
 $this$addr = $this;
 $this1 = $this$addr;
 HEAP32[$size>>2] = 16;
 $call = (_malloc(1024)|0);
 $buffer = $call;
 $$expand_i1_val = 0;
 HEAP8[$nrvo>>0] = $$expand_i1_val;
 __ZN6Socket8DatagramC2Ev($agg$result);
 $0 = HEAP32[$this1>>2]|0;
 $1 = $buffer;
 __THREW__ = 0;
 $call2 = (invoke_iiiiiii(351,($0|0),($1|0),1024,0,($address|0),($size|0))|0);
 $2 = __THREW__; __THREW__ = 0;
 $3 = $2&1;
 do {
  if (!($3)) {
   $cmp = ($call2|0)==(-1);
   if (!($cmp)) {
    $19 = $buffer;
    $data = ((($agg$result)) + 16|0);
    $this$addr$i22 = $data;
    $__s$addr$i23 = $19;
    $this1$i24 = $this$addr$i22;
    $20 = $__s$addr$i23;
    __THREW__ = 0;
    (invoke_iii(352,($this1$i24|0),($20|0))|0);
    $21 = __THREW__; __THREW__ = 0;
    $22 = $21&1;
    if ($22) {
     break;
    }
    $sin_addr = ((($address)) + 4|0);
    ;HEAP32[$agg$tmp9>>2]=HEAP32[$sin_addr>>2]|0;
    __THREW__ = 0;
    ;HEAP32[$agg$tmp9$byval_copy>>2]=HEAP32[$agg$tmp9>>2]|0;
    $call11 = (invoke_ii(353,($agg$tmp9$byval_copy|0))|0);
    $23 = __THREW__; __THREW__ = 0;
    $24 = $23&1;
    if ($24) {
     break;
    }
    $this$addr$i27 = $agg$result;
    $__s$addr$i28 = $call11;
    $this1$i29 = $this$addr$i27;
    $25 = $__s$addr$i28;
    __THREW__ = 0;
    (invoke_iii(352,($this1$i29|0),($25|0))|0);
    $26 = __THREW__; __THREW__ = 0;
    $27 = $26&1;
    if ($27) {
     break;
    }
    $sin_port = ((($address)) + 2|0);
    $28 = HEAP16[$sin_port>>1]|0;
    __THREW__ = 0;
    $call16 = (invoke_ii(354,($28|0))|0);
    $29 = __THREW__; __THREW__ = 0;
    $30 = $29&1;
    if ($30) {
     break;
    }
    $conv = $call16&65535;
    $port = ((($agg$result)) + 12|0);
    HEAP32[$port>>2] = $conv;
    $31 = $buffer;
    __THREW__ = 0;
    invoke_vi(355,($31|0));
    $32 = __THREW__; __THREW__ = 0;
    $33 = $32&1;
    if ($33) {
     break;
    }
    $$expand_i1_val6 = 1;
    HEAP8[$nrvo>>0] = $$expand_i1_val6;
    $nrvo$val$pre_trunc = HEAP8[$nrvo>>0]|0;
    $nrvo$val = $nrvo$val$pre_trunc&1;
    if ($nrvo$val) {
     STACKTOP = sp;return;
    }
    __ZN6Socket8DatagramD2Ev($agg$result);
    STACKTOP = sp;return;
   }
   $exception = (___cxa_allocate_exception(16)|0);
   $$expand_i1_val1 = 1;
   HEAP8[$cleanup$isactive>>0] = $$expand_i1_val1;
   $this$addr$i = $agg$tmp;
   $__s$addr$i = 10738;
   $this1$i = $this$addr$i;
   $this$addr$i$i = $this1$i;
   $this1$i$i = $this$addr$i$i;
   $this$addr$i$i$i = $this1$i$i;
   $this1$i$i$i = $this$addr$i$i$i;
   $this$addr$i$i$i$i = $this1$i$i$i;
   ;HEAP32[$this1$i$i$i>>2]=0|0;HEAP32[$this1$i$i$i+4>>2]=0|0;HEAP32[$this1$i$i$i+8>>2]=0|0;
   $4 = $__s$addr$i;
   $5 = $__s$addr$i;
   __THREW__ = 0;
   $call$i21 = (invoke_ii(338,($5|0))|0);
   $6 = __THREW__; __THREW__ = 0;
   $7 = $6&1;
   if ($7) {
    label = 8;
   } else {
    __THREW__ = 0;
    invoke_viii(339,($this1$i|0),($4|0),($call$i21|0));
    $8 = __THREW__; __THREW__ = 0;
    $9 = $8&1;
    if ($9) {
     label = 8;
    } else {
     __THREW__ = 0;
     invoke_vii(340,($exception|0),($agg$tmp|0));
     $10 = __THREW__; __THREW__ = 0;
     $11 = $10&1;
     if (!($11)) {
      $$expand_i1_val3 = 0;
      HEAP8[$cleanup$isactive>>0] = $$expand_i1_val3;
      __THREW__ = 0;
      invoke_viii(341,($exception|0),(64|0),(342|0));
      $12 = __THREW__; __THREW__ = 0;
     }
     $17 = ___cxa_find_matching_catch_2()|0;
     $18 = tempRet0;
     $exn$slot = $17;
     $ehselector$slot = $18;
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($agg$tmp);
    }
   }
   if ((label|0) == 8) {
    $15 = ___cxa_find_matching_catch_2()|0;
    $16 = tempRet0;
    $exn$slot = $15;
    $ehselector$slot = $16;
   }
   $cleanup$is_active$pre_trunc = HEAP8[$cleanup$isactive>>0]|0;
   $cleanup$is_active = $cleanup$is_active$pre_trunc&1;
   if (!($cleanup$is_active)) {
    __ZN6Socket8DatagramD2Ev($agg$result);
    $exn = $exn$slot;
    $sel = $ehselector$slot;
    ___resumeException($exn|0);
    // unreachable;
   }
   ___cxa_free_exception(($exception|0));
   __ZN6Socket8DatagramD2Ev($agg$result);
   $exn = $exn$slot;
   $sel = $ehselector$slot;
   ___resumeException($exn|0);
   // unreachable;
  }
 } while(0);
 $13 = ___cxa_find_matching_catch_2()|0;
 $14 = tempRet0;
 $exn$slot = $13;
 $ehselector$slot = $14;
 __ZN6Socket8DatagramD2Ev($agg$result);
 $exn = $exn$slot;
 $sel = $ehselector$slot;
 ___resumeException($exn|0);
 // unreachable;
}
function __ZN6Socket8DatagramC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $__a$i$i = 0, $__i$i$i = 0, $arrayidx$i$i = 0, $cmp$i$i = 0, $data = 0, $inc$i$i = 0, $this$addr = 0, $this$addr$i = 0, $this$addr$i$i = 0, $this$addr$i$i$i = 0, $this$addr$i$i$i$i = 0, $this$addr$i$i$i2$i = 0, $this$addr$i$i3$i = 0, $this$addr$i4$i = 0, $this1 = 0, $this1$i = 0;
 var $this1$i$i = 0, $this1$i$i$i = 0, $this1$i$i$i7$i = 0, $this1$i$i6$i = 0, $this1$i5$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $this$addr = $this;
 $this1 = $this$addr;
 __ZN6Socket7AddressC2Ev($this1);
 $data = ((($this1)) + 16|0);
 $this$addr$i = $data;
 $this1$i = $this$addr$i;
 $this$addr$i$i = $this1$i;
 $this1$i$i = $this$addr$i$i;
 $this$addr$i$i$i = $this1$i$i;
 $this1$i$i$i = $this$addr$i$i$i;
 $this$addr$i$i$i$i = $this1$i$i$i;
 ;HEAP32[$this1$i$i$i>>2]=0|0;HEAP32[$this1$i$i$i+4>>2]=0|0;HEAP32[$this1$i$i$i+8>>2]=0|0;
 $this$addr$i4$i = $this1$i;
 $this1$i5$i = $this$addr$i4$i;
 $this$addr$i$i3$i = $this1$i5$i;
 $this1$i$i6$i = $this$addr$i$i3$i;
 $this$addr$i$i$i2$i = $this1$i$i6$i;
 $this1$i$i$i7$i = $this$addr$i$i$i2$i;
 $__a$i$i = $this1$i$i$i7$i;
 $__i$i$i = 0;
 while(1) {
  $0 = $__i$i$i;
  $cmp$i$i = ($0>>>0)<(3);
  if (!($cmp$i$i)) {
   break;
  }
  $1 = $__a$i$i;
  $2 = $__i$i$i;
  $arrayidx$i$i = (($1) + ($2<<2)|0);
  HEAP32[$arrayidx$i$i>>2] = 0;
  $3 = $__i$i$i;
  $inc$i$i = (($3) + 1)|0;
  $__i$i$i = $inc$i$i;
 }
 STACKTOP = sp;return;
}
function __ZN6Socket8DatagramD2Ev($this) {
 $this = $this|0;
 var $data = 0, $this$addr = 0, $this1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $this$addr = $this;
 $this1 = $this$addr;
 $data = ((($this1)) + 16|0);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($data);
 __ZN6Socket7AddressD2Ev($this1);
 STACKTOP = sp;return;
}
function ___cxx_global_var_init() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN45EmscriptenBindingInitializer_my_class_exampleC2Ev(22024);
 return;
}
function __ZN45EmscriptenBindingInitializer_my_class_exampleC2Ev($this) {
 $this = $this|0;
 var $$addr$i$i = 0, $$addr$i$i$i = 0, $$addr$i$i11 = 0, $$addr$i$i21 = 0, $$addr$i$i29 = 0, $$addr$i$i38 = 0, $$addr$i11$i = 0, $$addr$i13$i = 0, $$addr$i15$i = 0, $$addr$i9$i = 0, $$field = 0, $$field17 = 0, $$field21 = 0, $$field24 = 0, $$index16 = 0, $$index23 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0;
 var $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_getActualType$i = 0, $args$i = 0, $args$i$i = 0, $args$i32 = 0, $args$i42 = 0, $call$i = 0, $call$i$i = 0, $call$i$i$i = 0, $call$i$i$i$i = 0, $call$i$i$i17 = 0, $call$i$i$i26 = 0, $call$i$i$i37 = 0, $call$i$i$i48 = 0, $call$i$i10$i = 0, $call$i$i12$i = 0, $call$i$i14$i = 0;
 var $call$i$i16$i = 0, $call$i14 = 0, $call$i24 = 0, $call$i34 = 0, $call$i45 = 0, $call2$i = 0, $call2$i$i = 0, $call2$i15 = 0, $call2$i25 = 0, $call2$i35 = 0, $call2$i46 = 0, $call3$i = 0, $call3$i$i = 0, $call3$i16 = 0, $call3$i36 = 0, $call3$i47 = 0, $call4$i = 0, $call4$i27 = 0, $call5$i = 0, $call5$i18 = 0;
 var $call5$i28 = 0, $call6$i = 0, $call8$i = 0, $classMethod$addr$i = 0, $classMethod$addr$i41 = 0, $destructor$i = 0, $downcast$i = 0, $factory$addr$i$i = 0, $fieldName$addr$i = 0, $getter$addr$i = 0, $getter$addr$i$index14 = 0, $getter$i$field = 0, $getter$i$field9 = 0, $getter$i$index8 = 0, $gter$i = 0, $invoke$i = 0, $invoke$i$i = 0, $invoke$i43 = 0, $invoker$i = 0, $memberFunction$addr$i = 0;
 var $memberFunction$addr$i$index5 = 0, $memberFunction$i$field = 0, $memberFunction$i$field3 = 0, $memberFunction$i$index2 = 0, $methodName$addr$i = 0, $methodName$addr$i31 = 0, $methodName$addr$i40 = 0, $name$addr$i = 0, $ref$tmp = 0, $setter$addr$i = 0, $setter$addr$i$index15 = 0, $setter$i$field = 0, $setter$i$field12 = 0, $setter$i$index11 = 0, $ster$i = 0, $this$addr = 0, $this$addr$i = 0, $this$addr$i$i = 0, $this$addr$i12 = 0, $this$addr$i22 = 0;
 var $this$addr$i30 = 0, $this$addr$i39 = 0, $this$addr$i8 = 0, $this1$i$i = 0, $this1$i13 = 0, $this1$i23 = 0, $this1$i33 = 0, $this1$i9 = 0, $tmp = 0, $tmp$i = 0, $tmp$i$byval_copy = 0, $tmp$i$index19 = 0, $tmp$index1 = 0, $tmp10 = 0, $tmp3 = 0, $tmp3$index6 = 0, $tmp319 = 0, $tmp4 = 0, $tmp4$index7 = 0, $tmp420 = 0;
 var $tmp7$i = 0, $tmp7$i$byval_copy = 0, $tmp7$i$index26 = 0, $upcast$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 272|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(272|0);
 $tmp7$i$byval_copy = sp + 248|0;
 $tmp$i$byval_copy = sp + 240|0;
 $args$i42 = sp + 260|0;
 $args$i32 = sp + 259|0;
 $getter$addr$i = sp + 176|0;
 $setter$addr$i = sp + 168|0;
 $tmp$i = sp + 152|0;
 $tmp7$i = sp + 144|0;
 $tmp420 = sp + 16|0;
 $tmp319 = sp + 8|0;
 $memberFunction$addr$i = sp + 120|0;
 $args$i = sp + 258|0;
 $tmp10 = sp;
 $args$i$i = sp + 257|0;
 $ref$tmp = sp + 256|0;
 $tmp = sp + 40|0;
 $tmp3 = sp + 32|0;
 $tmp4 = sp + 24|0;
 $this$addr = $this;
 $this$addr$i = $ref$tmp;
 $name$addr$i = 10763;
 __ZN10emscripten8internal11NoBaseClass6verifyI7MyClassEEvv();
 $_getActualType$i = 356;
 $call$i = (__ZN10emscripten8internal11NoBaseClass11getUpcasterI7MyClassEEPFvvEv()|0);
 $upcast$i = $call$i;
 $call2$i = (__ZN10emscripten8internal11NoBaseClass13getDowncasterI7MyClassEEPFvvEv()|0);
 $downcast$i = $call2$i;
 $destructor$i = 357;
 $call3$i = (__ZN10emscripten8internal6TypeIDI7MyClassE3getEv()|0);
 $call4$i = (__ZN10emscripten8internal6TypeIDINS0_17AllowedRawPointerI7MyClassEEE3getEv()|0);
 $call5$i = (__ZN10emscripten8internal6TypeIDINS0_17AllowedRawPointerIK7MyClassEEE3getEv()|0);
 $call6$i = (__ZN10emscripten8internal11NoBaseClass3getEv()|0);
 $0 = $_getActualType$i;
 $$addr$i$i = $0;
 $call$i$i$i = (__ZN10emscripten8internal19getGenericSignatureIJiiEEEPKcv()|0);
 $1 = $_getActualType$i;
 $2 = $upcast$i;
 $$addr$i11$i = $2;
 $call$i$i12$i = (__ZN10emscripten8internal19getGenericSignatureIJvEEEPKcv()|0);
 $3 = $upcast$i;
 $4 = $downcast$i;
 $$addr$i13$i = $4;
 $call$i$i14$i = (__ZN10emscripten8internal19getGenericSignatureIJvEEEPKcv()|0);
 $5 = $downcast$i;
 $6 = $name$addr$i;
 $7 = $destructor$i;
 $$addr$i15$i = $7;
 $call$i$i16$i = (__ZN10emscripten8internal19getGenericSignatureIJviEEEPKcv()|0);
 $8 = $destructor$i;
 __embind_register_class(($call3$i|0),($call4$i|0),($call5$i|0),($call6$i|0),($call$i$i$i|0),($1|0),($call$i$i12$i|0),($3|0),($call$i$i14$i|0),($5|0),($6|0),($call$i$i16$i|0),($8|0));
 $this$addr$i8 = $ref$tmp;
 $this1$i9 = $this$addr$i8;
 $this$addr$i$i = $this1$i9;
 $factory$addr$i$i = 358;
 $this1$i$i = $this$addr$i$i;
 $invoke$i$i = 359;
 $call$i$i = (__ZN10emscripten8internal6TypeIDI7MyClassE3getEv()|0);
 $call2$i$i = (__ZNK10emscripten8internal12WithPoliciesIJNS_18allow_raw_pointersEEE11ArgTypeListIJP7MyClassOiONSt3__212basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEEEE8getCountEv($args$i$i)|0);
 $call3$i$i = (__ZNK10emscripten8internal12WithPoliciesIJNS_18allow_raw_pointersEEE11ArgTypeListIJP7MyClassOiONSt3__212basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEEEE8getTypesEv($args$i$i)|0);
 $9 = $invoke$i$i;
 $$addr$i$i$i = $9;
 $call$i$i$i$i = (__ZN10emscripten8internal19getGenericSignatureIJiiiiEEEPKcv()|0);
 $10 = $invoke$i$i;
 $11 = $factory$addr$i$i;
 __embind_register_class_constructor(($call$i$i|0),($call2$i$i|0),($call3$i$i|0),($call$i$i$i$i|0),($10|0),($11|0));
 HEAP32[$tmp>>2] = (360);
 $tmp$index1 = ((($tmp)) + 4|0);
 HEAP32[$tmp$index1>>2] = 0;
 ;HEAP8[$tmp10>>0]=HEAP8[$tmp>>0]|0;HEAP8[$tmp10+1>>0]=HEAP8[$tmp+1>>0]|0;HEAP8[$tmp10+2>>0]=HEAP8[$tmp+2>>0]|0;HEAP8[$tmp10+3>>0]=HEAP8[$tmp+3>>0]|0;HEAP8[$tmp10+4>>0]=HEAP8[$tmp+4>>0]|0;HEAP8[$tmp10+5>>0]=HEAP8[$tmp+5>>0]|0;HEAP8[$tmp10+6>>0]=HEAP8[$tmp+6>>0]|0;HEAP8[$tmp10+7>>0]=HEAP8[$tmp+7>>0]|0;
 $memberFunction$i$field = HEAP32[$tmp10>>2]|0;
 $memberFunction$i$index2 = ((($tmp10)) + 4|0);
 $memberFunction$i$field3 = HEAP32[$memberFunction$i$index2>>2]|0;
 $this$addr$i12 = $this1$i$i;
 $methodName$addr$i = 10771;
 HEAP32[$memberFunction$addr$i>>2] = $memberFunction$i$field;
 $memberFunction$addr$i$index5 = ((($memberFunction$addr$i)) + 4|0);
 HEAP32[$memberFunction$addr$i$index5>>2] = $memberFunction$i$field3;
 $this1$i13 = $this$addr$i12;
 $invoker$i = 361;
 $call$i14 = (__ZN10emscripten8internal6TypeIDI7MyClassE3getEv()|0);
 $12 = $methodName$addr$i;
 $call2$i15 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJvNS0_17AllowedRawPointerI7MyClassEEEE8getCountEv($args$i)|0);
 $call3$i16 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJvNS0_17AllowedRawPointerI7MyClassEEEE8getTypesEv($args$i)|0);
 $13 = $invoker$i;
 $$addr$i$i11 = $13;
 $call$i$i$i17 = (__ZN10emscripten8internal19getGenericSignatureIJviiEEEPKcv()|0);
 $14 = $invoker$i;
 $call5$i18 = (__ZN10emscripten8internal10getContextIM7MyClassFvvEEEPT_RKS5_($memberFunction$addr$i)|0);
 __embind_register_class_function(($call$i14|0),($12|0),($call2$i15|0),($call3$i16|0),($call$i$i$i17|0),($14|0),($call5$i18|0),0);
 HEAP32[$tmp3>>2] = (362);
 $tmp3$index6 = ((($tmp3)) + 4|0);
 HEAP32[$tmp3$index6>>2] = 0;
 HEAP32[$tmp4>>2] = (363);
 $tmp4$index7 = ((($tmp4)) + 4|0);
 HEAP32[$tmp4$index7>>2] = 0;
 ;HEAP8[$tmp420>>0]=HEAP8[$tmp4>>0]|0;HEAP8[$tmp420+1>>0]=HEAP8[$tmp4+1>>0]|0;HEAP8[$tmp420+2>>0]=HEAP8[$tmp4+2>>0]|0;HEAP8[$tmp420+3>>0]=HEAP8[$tmp4+3>>0]|0;HEAP8[$tmp420+4>>0]=HEAP8[$tmp4+4>>0]|0;HEAP8[$tmp420+5>>0]=HEAP8[$tmp4+5>>0]|0;HEAP8[$tmp420+6>>0]=HEAP8[$tmp4+6>>0]|0;HEAP8[$tmp420+7>>0]=HEAP8[$tmp4+7>>0]|0;
 ;HEAP8[$tmp319>>0]=HEAP8[$tmp3>>0]|0;HEAP8[$tmp319+1>>0]=HEAP8[$tmp3+1>>0]|0;HEAP8[$tmp319+2>>0]=HEAP8[$tmp3+2>>0]|0;HEAP8[$tmp319+3>>0]=HEAP8[$tmp3+3>>0]|0;HEAP8[$tmp319+4>>0]=HEAP8[$tmp3+4>>0]|0;HEAP8[$tmp319+5>>0]=HEAP8[$tmp3+5>>0]|0;HEAP8[$tmp319+6>>0]=HEAP8[$tmp3+6>>0]|0;HEAP8[$tmp319+7>>0]=HEAP8[$tmp3+7>>0]|0;
 $getter$i$field = HEAP32[$tmp319>>2]|0;
 $getter$i$index8 = ((($tmp319)) + 4|0);
 $getter$i$field9 = HEAP32[$getter$i$index8>>2]|0;
 $setter$i$field = HEAP32[$tmp420>>2]|0;
 $setter$i$index11 = ((($tmp420)) + 4|0);
 $setter$i$field12 = HEAP32[$setter$i$index11>>2]|0;
 $this$addr$i22 = $this1$i13;
 $fieldName$addr$i = 10782;
 HEAP32[$getter$addr$i>>2] = $getter$i$field;
 $getter$addr$i$index14 = ((($getter$addr$i)) + 4|0);
 HEAP32[$getter$addr$i$index14>>2] = $getter$i$field9;
 HEAP32[$setter$addr$i>>2] = $setter$i$field;
 $setter$addr$i$index15 = ((($setter$addr$i)) + 4|0);
 HEAP32[$setter$addr$i$index15>>2] = $setter$i$field12;
 $this1$i23 = $this$addr$i22;
 $gter$i = 364;
 $ster$i = 365;
 $call$i24 = (__ZN10emscripten8internal6TypeIDI7MyClassE3getEv()|0);
 $15 = $fieldName$addr$i;
 $call2$i25 = (__ZN10emscripten8internal6TypeIDIiE3getEv()|0);
 $16 = $gter$i;
 $$addr$i$i21 = $16;
 $call$i$i$i26 = (__ZN10emscripten8internal19getGenericSignatureIJiiiEEEPKcv()|0);
 $17 = $gter$i;
 $$field = HEAP32[$getter$addr$i>>2]|0;
 $$index16 = ((($getter$addr$i)) + 4|0);
 $$field17 = HEAP32[$$index16>>2]|0;
 HEAP32[$tmp$i>>2] = $$field;
 $tmp$i$index19 = ((($tmp$i)) + 4|0);
 HEAP32[$tmp$i$index19>>2] = $$field17;
 ;HEAP32[$tmp$i$byval_copy>>2]=HEAP32[$tmp$i>>2]|0;HEAP32[$tmp$i$byval_copy+4>>2]=HEAP32[$tmp$i+4>>2]|0;
 $call4$i27 = (__ZN10emscripten8internal12GetterPolicyIM7MyClassKFivEE10getContextES4_($tmp$i$byval_copy)|0);
 $call5$i28 = (__ZN10emscripten8internal6TypeIDIiE3getEv()|0);
 $18 = $ster$i;
 $$addr$i9$i = $18;
 $call$i$i10$i = (__ZN10emscripten8internal19getGenericSignatureIJviiiEEEPKcv()|0);
 $19 = $ster$i;
 $$field21 = HEAP32[$setter$addr$i>>2]|0;
 $$index23 = ((($setter$addr$i)) + 4|0);
 $$field24 = HEAP32[$$index23>>2]|0;
 HEAP32[$tmp7$i>>2] = $$field21;
 $tmp7$i$index26 = ((($tmp7$i)) + 4|0);
 HEAP32[$tmp7$i$index26>>2] = $$field24;
 ;HEAP32[$tmp7$i$byval_copy>>2]=HEAP32[$tmp7$i>>2]|0;HEAP32[$tmp7$i$byval_copy+4>>2]=HEAP32[$tmp7$i+4>>2]|0;
 $call8$i = (__ZN10emscripten8internal12SetterPolicyIM7MyClassFviEE10getContextES4_($tmp7$i$byval_copy)|0);
 __embind_register_class_property(($call$i24|0),($15|0),($call2$i25|0),($call$i$i$i26|0),($17|0),($call4$i27|0),($call5$i28|0),($call$i$i10$i|0),($19|0),($call8$i|0));
 $this$addr$i30 = $this1$i23;
 $methodName$addr$i31 = 10784;
 $classMethod$addr$i = 366;
 $this1$i33 = $this$addr$i30;
 $invoke$i = 367;
 $call$i34 = (__ZN10emscripten8internal6TypeIDI7MyClassE3getEv()|0);
 $20 = $methodName$addr$i31;
 $call2$i35 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJNSt3__212basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEERK7MyClassEE8getCountEv($args$i32)|0);
 $call3$i36 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJNSt3__212basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEERK7MyClassEE8getTypesEv($args$i32)|0);
 $21 = $invoke$i;
 $$addr$i$i29 = $21;
 $call$i$i$i37 = (__ZN10emscripten8internal19getGenericSignatureIJiiiEEEPKcv()|0);
 $22 = $invoke$i;
 $23 = $classMethod$addr$i;
 __embind_register_class_class_function(($call$i34|0),($20|0),($call2$i35|0),($call3$i36|0),($call$i$i$i37|0),($22|0),($23|0));
 $this$addr$i39 = $this1$i33;
 $methodName$addr$i40 = 10806;
 $classMethod$addr$i41 = 368;
 $invoke$i43 = 369;
 $call$i45 = (__ZN10emscripten8internal6TypeIDI7MyClassE3getEv()|0);
 $24 = $methodName$addr$i40;
 $call2$i46 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJNSt3__212basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEEEE8getCountEv($args$i42)|0);
 $call3$i47 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJNSt3__212basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEEEE8getTypesEv($args$i42)|0);
 $25 = $invoke$i43;
 $$addr$i$i38 = $25;
 $call$i$i$i48 = (__ZN10emscripten8internal19getGenericSignatureIJiiEEEPKcv()|0);
 $26 = $invoke$i43;
 $27 = $classMethod$addr$i41;
 __embind_register_class_class_function(($call$i45|0),($24|0),($call2$i46|0),($call3$i47|0),($call$i$i$i48|0),($26|0),($27|0));
 STACKTOP = sp;return;
}
function __ZN7MyClass10incrementXEv($this) {
 $this = $this|0;
 var $0 = 0, $inc = 0, $this$addr = 0, $this1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $this$addr = $this;
 $this1 = $this$addr;
 $0 = HEAP32[$this1>>2]|0;
 $inc = (($0) + 1)|0;
 HEAP32[$this1>>2] = $inc;
 STACKTOP = sp;return;
}
function __ZNK7MyClass4getXEv($this) {
 $this = $this|0;
 var $0 = 0, $this$addr = 0, $this1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $this$addr = $this;
 $this1 = $this$addr;
 $0 = HEAP32[$this1>>2]|0;
 STACKTOP = sp;return ($0|0);
}
function __ZN7MyClass4setXEi($this,$x_) {
 $this = $this|0;
 $x_ = $x_|0;
 var $0 = 0, $this$addr = 0, $this1 = 0, $x_$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $this$addr = $this;
 $x_$addr = $x_;
 $this1 = $this$addr;
 $0 = $x_$addr;
 HEAP32[$this1>>2] = $0;
 STACKTOP = sp;return;
}
function __ZN7MyClass21getStringFromInstanceERKS_($agg$result,$instance) {
 $agg$result = $agg$result|0;
 $instance = $instance|0;
 var $0 = 0, $instance$addr = 0, $y = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $instance$addr = $instance;
 $0 = $instance$addr;
 $y = ((($0)) + 4|0);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2ERKS5_($agg$result,$y);
 STACKTOP = sp;return;
}
function __ZN7MyClass5fetchEv($agg$result) {
 $agg$result = $agg$result|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__s$addr$i = 0, $__s$addr$i27 = 0, $__s$addr$i41 = 0, $agg$tmp = 0, $agg$tmp4 = 0, $call = 0, $call$i22 = 0, $call$i35 = 0, $call$i49 = 0, $data = 0;
 var $e = 0, $ehselector$slot = 0, $exn = 0, $exn$slot = 0, $exn19 = 0, $matches = 0, $received = 0, $sel = 0, $sel20 = 0, $sock = 0, $this$addr$i = 0, $this$addr$i$i = 0, $this$addr$i$i$i = 0, $this$addr$i$i$i$i = 0, $this$addr$i$i$i$i23 = 0, $this$addr$i$i$i$i37 = 0, $this$addr$i$i$i24 = 0, $this$addr$i$i$i38 = 0, $this$addr$i$i25 = 0, $this$addr$i$i39 = 0;
 var $this$addr$i26 = 0, $this$addr$i40 = 0, $this1$i = 0, $this1$i$i = 0, $this1$i$i$i = 0, $this1$i$i$i31 = 0, $this1$i$i$i45 = 0, $this1$i$i30 = 0, $this1$i$i44 = 0, $this1$i28 = 0, $this1$i42 = 0, $vtable = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(144|0);
 $sock = sp + 64|0;
 $agg$tmp = sp + 44|0;
 $agg$tmp4 = sp + 32|0;
 $received = sp + 4|0;
 __THREW__ = 0;
 invoke_vi(370,($sock|0));
 $0 = __THREW__; __THREW__ = 0;
 $1 = $0&1;
 if ($1) {
  $22 = ___cxa_find_matching_catch_3(64|0)|0;
  $23 = tempRet0;
  $exn$slot = $22;
  $ehselector$slot = $23;
 } else {
  __THREW__ = 0;
  invoke_vii(371,($sock|0),9501);
  $2 = __THREW__; __THREW__ = 0;
  $3 = $2&1;
  L4: do {
   if ($3) {
    label = 12;
   } else {
    $this$addr$i = $agg$tmp;
    $__s$addr$i = 10947;
    $this1$i = $this$addr$i;
    $this$addr$i$i = $this1$i;
    $this1$i$i = $this$addr$i$i;
    $this$addr$i$i$i = $this1$i$i;
    $this1$i$i$i = $this$addr$i$i$i;
    $this$addr$i$i$i$i = $this1$i$i$i;
    ;HEAP32[$this1$i$i$i>>2]=0|0;HEAP32[$this1$i$i$i+4>>2]=0|0;HEAP32[$this1$i$i$i+8>>2]=0|0;
    $4 = $__s$addr$i;
    $5 = $__s$addr$i;
    __THREW__ = 0;
    $call$i22 = (invoke_ii(338,($5|0))|0);
    $6 = __THREW__; __THREW__ = 0;
    $7 = $6&1;
    if ($7) {
     label = 12;
    } else {
     __THREW__ = 0;
     invoke_viii(339,($this1$i|0),($4|0),($call$i22|0));
     $8 = __THREW__; __THREW__ = 0;
     $9 = $8&1;
     if ($9) {
      label = 12;
     } else {
      $this$addr$i26 = $agg$tmp4;
      $__s$addr$i27 = 10957;
      $this1$i28 = $this$addr$i26;
      $this$addr$i$i25 = $this1$i28;
      $this1$i$i30 = $this$addr$i$i25;
      $this$addr$i$i$i24 = $this1$i$i30;
      $this1$i$i$i31 = $this$addr$i$i$i24;
      $this$addr$i$i$i$i23 = $this1$i$i$i31;
      ;HEAP32[$this1$i$i$i31>>2]=0|0;HEAP32[$this1$i$i$i31+4>>2]=0|0;HEAP32[$this1$i$i$i31+8>>2]=0|0;
      $10 = $__s$addr$i27;
      $11 = $__s$addr$i27;
      __THREW__ = 0;
      $call$i35 = (invoke_ii(338,($11|0))|0);
      $12 = __THREW__; __THREW__ = 0;
      $13 = $12&1;
      do {
       if ($13) {
        label = 13;
       } else {
        __THREW__ = 0;
        invoke_viii(339,($this1$i28|0),($10|0),($call$i35|0));
        $14 = __THREW__; __THREW__ = 0;
        $15 = $14&1;
        if ($15) {
         label = 13;
        } else {
         __THREW__ = 0;
         invoke_viiii(372,($sock|0),($agg$tmp|0),9501,($agg$tmp4|0));
         $16 = __THREW__; __THREW__ = 0;
         $17 = $16&1;
         if ($17) {
          $28 = ___cxa_find_matching_catch_3(64|0)|0;
          $29 = tempRet0;
          $exn$slot = $28;
          $ehselector$slot = $29;
          __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($agg$tmp4);
          break;
         }
         __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($agg$tmp4);
         __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($agg$tmp);
         __THREW__ = 0;
         invoke_vii(373,($received|0),($sock|0));
         $18 = __THREW__; __THREW__ = 0;
         $19 = $18&1;
         if ($19) {
          label = 12;
          break L4;
         }
         $data = ((($received)) + 16|0);
         __THREW__ = 0;
         invoke_vii(374,($agg$result|0),($data|0));
         $20 = __THREW__; __THREW__ = 0;
         $21 = $20&1;
         if ($21) {
          $30 = ___cxa_find_matching_catch_3(64|0)|0;
          $31 = tempRet0;
          $exn$slot = $30;
          $ehselector$slot = $31;
          __ZN6Socket8DatagramD2Ev($received);
          break L4;
         }
         __ZN6Socket8DatagramD2Ev($received);
         __ZN6Socket3UDPD2Ev($sock);
         STACKTOP = sp;return;
        }
       }
      } while(0);
      if ((label|0) == 13) {
       $26 = ___cxa_find_matching_catch_3(64|0)|0;
       $27 = tempRet0;
       $exn$slot = $26;
       $ehselector$slot = $27;
      }
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($agg$tmp);
     }
    }
   }
  } while(0);
  if ((label|0) == 12) {
   $24 = ___cxa_find_matching_catch_3(64|0)|0;
   $25 = tempRet0;
   $exn$slot = $24;
   $ehselector$slot = $25;
  }
  __ZN6Socket3UDPD2Ev($sock);
 }
 $sel = $ehselector$slot;
 $32 = (_llvm_eh_typeid_for((64|0))|0);
 $matches = ($sel|0)==($32|0);
 if (!($matches)) {
  $exn19 = $exn$slot;
  $sel20 = $ehselector$slot;
  ___resumeException($exn19|0);
  // unreachable;
 }
 $exn = $exn$slot;
 $33 = (___cxa_begin_catch(($exn|0))|0);
 $e = $33;
 $34 = $e;
 $vtable = HEAP32[$34>>2]|0;
 $35 = HEAP32[$vtable>>2]|0;
 __THREW__ = 0;
 $call = (invoke_ii($35|0,($34|0))|0);
 $36 = __THREW__; __THREW__ = 0;
 $37 = $36&1;
 if (!($37)) {
  $this$addr$i40 = $agg$result;
  $__s$addr$i41 = $call;
  $this1$i42 = $this$addr$i40;
  $this$addr$i$i39 = $this1$i42;
  $this1$i$i44 = $this$addr$i$i39;
  $this$addr$i$i$i38 = $this1$i$i44;
  $this1$i$i$i45 = $this$addr$i$i$i38;
  $this$addr$i$i$i$i37 = $this1$i$i$i45;
  ;HEAP32[$this1$i$i$i45>>2]=0|0;HEAP32[$this1$i$i$i45+4>>2]=0|0;HEAP32[$this1$i$i$i45+8>>2]=0|0;
  $38 = $__s$addr$i41;
  $39 = $__s$addr$i41;
  __THREW__ = 0;
  $call$i49 = (invoke_ii(338,($39|0))|0);
  $40 = __THREW__; __THREW__ = 0;
  $41 = $40&1;
  if (!($41)) {
   __THREW__ = 0;
   invoke_viii(339,($this1$i42|0),($38|0),($call$i49|0));
   $42 = __THREW__; __THREW__ = 0;
   $43 = $42&1;
   if (!($43)) {
    ___cxa_end_catch();
    STACKTOP = sp;return;
   }
  }
 }
 $44 = ___cxa_find_matching_catch_2()|0;
 $45 = tempRet0;
 $exn$slot = $44;
 $ehselector$slot = $45;
 __THREW__ = 0;
 invoke_v(375);
 $46 = __THREW__; __THREW__ = 0;
 $47 = $46&1;
 if ($47) {
  $48 = ___cxa_find_matching_catch_3(0|0)|0;
  $49 = tempRet0;
  ___clang_call_terminate($48);
  // unreachable;
 } else {
  $exn19 = $exn$slot;
  $sel20 = $ehselector$slot;
  ___resumeException($exn19|0);
  // unreachable;
 }
}
function __ZN6Socket9Exception4whatEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $__p$addr$i$i$i = 0, $__r$addr$i$i$i$i$i = 0, $__x$addr$i$i$i$i$i$i = 0, $_message = 0, $and$i$i$i$i = 0, $cond$i$i$i = 0, $conv$i$i$i$i = 0, $this$addr = 0, $this$addr$i = 0, $this$addr$i$i = 0, $this$addr$i$i$i = 0, $this$addr$i$i$i$i = 0, $this$addr$i$i$i$i$i = 0, $this$addr$i$i$i$i$i$i = 0;
 var $this$addr$i$i$i13$i$i$i = 0, $this$addr$i$i$i4$i$i$i = 0, $this$addr$i$i14$i$i$i = 0, $this$addr$i$i5$i$i$i = 0, $this$addr$i15$i$i$i = 0, $this$addr$i6$i$i$i = 0, $this1 = 0, $this1$i = 0, $this1$i$i = 0, $this1$i$i$i = 0, $this1$i$i$i$i = 0, $this1$i$i$i$i$i = 0, $this1$i$i$i$i$i$i = 0, $this1$i$i$i10$i$i$i = 0, $this1$i$i$i19$i$i$i = 0, $this1$i$i18$i$i$i = 0, $this1$i$i9$i$i$i = 0, $this1$i16$i$i$i = 0, $this1$i7$i$i$i = 0, $tobool$i$i$i$i = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $this$addr = $this;
 $this1 = $this$addr;
 $_message = ((($this1)) + 4|0);
 $this$addr$i = $_message;
 $this1$i = $this$addr$i;
 $this$addr$i$i = $this1$i;
 $this1$i$i = $this$addr$i$i;
 $this$addr$i$i$i = $this1$i$i;
 $this1$i$i$i = $this$addr$i$i$i;
 $this$addr$i$i$i$i = $this1$i$i$i;
 $this1$i$i$i$i = $this$addr$i$i$i$i;
 $this$addr$i$i$i$i$i = $this1$i$i$i$i;
 $this1$i$i$i$i$i = $this$addr$i$i$i$i$i;
 $this$addr$i$i$i$i$i$i = $this1$i$i$i$i$i;
 $this1$i$i$i$i$i$i = $this$addr$i$i$i$i$i$i;
 $0 = ((($this1$i$i$i$i$i$i)) + 11|0);
 $1 = HEAP8[$0>>0]|0;
 $conv$i$i$i$i = $1&255;
 $and$i$i$i$i = $conv$i$i$i$i & 128;
 $tobool$i$i$i$i = ($and$i$i$i$i|0)!=(0);
 if ($tobool$i$i$i$i) {
  $this$addr$i15$i$i$i = $this1$i$i$i;
  $this1$i16$i$i$i = $this$addr$i15$i$i$i;
  $this$addr$i$i14$i$i$i = $this1$i16$i$i$i;
  $this1$i$i18$i$i$i = $this$addr$i$i14$i$i$i;
  $this$addr$i$i$i13$i$i$i = $this1$i$i18$i$i$i;
  $this1$i$i$i19$i$i$i = $this$addr$i$i$i13$i$i$i;
  $2 = HEAP32[$this1$i$i$i19$i$i$i>>2]|0;
  $cond$i$i$i = $2;
  $__p$addr$i$i$i = $cond$i$i$i;
  $5 = $__p$addr$i$i$i;
  STACKTOP = sp;return ($5|0);
 } else {
  $this$addr$i6$i$i$i = $this1$i$i$i;
  $this1$i7$i$i$i = $this$addr$i6$i$i$i;
  $this$addr$i$i5$i$i$i = $this1$i7$i$i$i;
  $this1$i$i9$i$i$i = $this$addr$i$i5$i$i$i;
  $this$addr$i$i$i4$i$i$i = $this1$i$i9$i$i$i;
  $this1$i$i$i10$i$i$i = $this$addr$i$i$i4$i$i$i;
  $__r$addr$i$i$i$i$i = $this1$i$i$i10$i$i$i;
  $3 = $__r$addr$i$i$i$i$i;
  $__x$addr$i$i$i$i$i$i = $3;
  $4 = $__x$addr$i$i$i$i$i$i;
  $cond$i$i$i = $4;
  $__p$addr$i$i$i = $cond$i$i$i;
  $5 = $__p$addr$i$i$i;
  STACKTOP = sp;return ($5|0);
 }
 return (0)|0;
}
function ___clang_call_terminate($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 (___cxa_begin_catch(($0|0))|0);
 __ZSt9terminatev();
 // unreachable;
}
function __ZNSt3__218basic_stringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($this,$vtt) {
 $this = $this|0;
 $vtt = $vtt|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $__sb_ = 0, $add$ptr = 0, $add$ptr3 = 0, $this$addr = 0, $this1 = 0, $vbase$offset = 0, $vtable = 0, $vtt$addr = 0, $vtt2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $this$addr = $this;
 $vtt$addr = $vtt;
 $this1 = $this$addr;
 $vtt2 = $vtt$addr;
 $0 = HEAP32[$vtt2>>2]|0;
 HEAP32[$this1>>2] = $0;
 $1 = ((($vtt2)) + 32|0);
 $2 = HEAP32[$1>>2]|0;
 $vtable = HEAP32[$this1>>2]|0;
 $3 = ((($vtable)) + -12|0);
 $vbase$offset = HEAP32[$3>>2]|0;
 $add$ptr = (($this1) + ($vbase$offset)|0);
 HEAP32[$add$ptr>>2] = $2;
 $4 = ((($vtt2)) + 36|0);
 $5 = HEAP32[$4>>2]|0;
 $add$ptr3 = ((($this1)) + 8|0);
 HEAP32[$add$ptr3>>2] = $5;
 $__sb_ = ((($this1)) + 12|0);
 __ZNSt3__215basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__sb_);
 $6 = ((($vtt2)) + 4|0);
 __ZNSt3__214basic_iostreamIcNS_11char_traitsIcEEED2Ev($this1,$6);
 STACKTOP = sp;return;
}
function __ZThn8_NSt3__218basic_stringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($this) {
 $this = $this|0;
 var $0 = 0, $this$addr = 0, $this1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $this$addr = $this;
 $this1 = $this$addr;
 $0 = ((($this1)) + -8|0);
 __ZNSt3__218basic_stringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($0);
 STACKTOP = sp;return;
}
function __ZTv0_n12_NSt3__218basic_stringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $this$addr = 0, $this1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $this$addr = $this;
 $this1 = $this$addr;
 $0 = HEAP32[$this1>>2]|0;
 $1 = ((($0)) + -12|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (($this1) + ($2)|0);
 __ZNSt3__218basic_stringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($3);
 STACKTOP = sp;return;
}
function __ZNSt3__218basic_stringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED0Ev($this) {
 $this = $this|0;
 var $this$addr = 0, $this1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $this$addr = $this;
 $this1 = $this$addr;
 __ZNSt3__218basic_stringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($this1);
 __ZdlPv($this1);
 STACKTOP = sp;return;
}
function __ZThn8_NSt3__218basic_stringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED0Ev($this) {
 $this = $this|0;
 var $0 = 0, $this$addr = 0, $this1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $this$addr = $this;
 $this1 = $this$addr;
 $0 = ((($this1)) + -8|0);
 __ZNSt3__218basic_stringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED0Ev($0);
 STACKTOP = sp;return;
}
function __ZTv0_n12_NSt3__218basic_stringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $this$addr = 0, $this1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $this$addr = $this;
 $this1 = $this$addr;
 $0 = HEAP32[$this1>>2]|0;
 $1 = ((($0)) + -12|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (($this1) + ($2)|0);
 __ZNSt3__218basic_stringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED0Ev($3);
 STACKTOP = sp;return;
}
function __ZNSt3__215basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($this) {
 $this = $this|0;
 var $__str_ = 0, $this$addr = 0, $this1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $this$addr = $this;
 $this1 = $this$addr;
 HEAP32[$this1>>2] = (2264);
 $__str_ = ((($this1)) + 32|0);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__str_);
 __ZNSt3__215basic_streambufIcNS_11char_traitsIcEEED2Ev($this1);
 STACKTOP = sp;return;
}
function __ZNSt3__215basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEED0Ev($this) {
 $this = $this|0;
 var $this$addr = 0, $this1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $this$addr = $this;
 $this1 = $this$addr;
 __ZNSt3__215basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($this1);
 __ZdlPv($this1);
 STACKTOP = sp;return;
}
function __ZNSt3__215basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEE7seekoffExNS_8ios_base7seekdirEj($agg$result,$this,$0,$1,$__way,$__wch) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $0 = $0|0;
 $1 = $1|0;
 $__way = $__way|0;
 $__wch = $__wch|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0;
 var $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0;
 var $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0;
 var $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0;
 var $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0;
 var $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0;
 var $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0;
 var $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__binp_$i = 0, $__binp_$i176 = 0, $__binp_$i91 = 0, $__binp_$i94 = 0, $__bout_$i = 0, $__bout_$i170 = 0, $__bout_$i86 = 0;
 var $__einp_$i = 0, $__eout_$i = 0, $__eout_$i83 = 0, $__gbeg$addr$i = 0, $__gend$addr$i = 0, $__gnext$addr$i = 0, $__hm_ = 0, $__hm_25 = 0, $__hm_3 = 0, $__hm_32 = 0, $__hm_64 = 0, $__n$addr$i = 0, $__ninp_$i = 0, $__ninp_$i110 = 0, $__ninp_$i179 = 0, $__noff = 0, $__nout_$i = 0, $__nout_$i102 = 0, $__nout_$i173 = 0, $__nout_$i192 = 0;
 var $__nout_$i77 = 0, $__nout_$i80 = 0, $__off$addr = 0, $__off$addr$i = 0, $__off$addr$i104 = 0, $__off$addr$i112 = 0, $__off$addr$i119 = 0, $__off$addr$i181 = 0, $__off$addr$i186 = 0, $__off$addr$i96 = 0, $__off_$i = 0, $__off_$i107 = 0, $__off_$i115 = 0, $__off_$i122 = 0, $__off_$i184 = 0, $__off_$i189 = 0, $__off_$i99 = 0, $__p$addr$i$i = 0, $__p$addr$i$i123 = 0, $__pbeg$addr$i = 0;
 var $__pend$addr$i = 0, $__r$addr$i$i$i$i = 0, $__r$addr$i$i$i$i128 = 0, $__str_ = 0, $__str_33 = 0, $__way$addr = 0, $__wch$addr = 0, $__x$addr$i$i$i$i$i = 0, $__x$addr$i$i$i$i$i127 = 0, $add$ptr = 0, $add$ptr$i = 0, $and = 0, $and$i$i$i = 0, $and$i$i$i147 = 0, $and13 = 0, $and44 = 0, $and51 = 0, $and59 = 0, $and66 = 0, $and7 = 0;
 var $cmp = 0, $cmp4 = 0, $cmp48 = 0, $cmp55 = 0, $cmp8 = 0, $cmp9 = 0, $cond$i$i = 0, $cond$i$i166 = 0, $conv$i$i$i = 0, $conv$i$i$i146 = 0, $or$cond = 0, $sub$ptr$lhs$cast = 0, $sub$ptr$lhs$cast19 = 0, $sub$ptr$lhs$cast27 = 0, $sub$ptr$lhs$cast35 = 0, $sub$ptr$rhs$cast = 0, $sub$ptr$rhs$cast20 = 0, $sub$ptr$rhs$cast28 = 0, $sub$ptr$rhs$cast36 = 0, $sub$ptr$sub = 0;
 var $sub$ptr$sub21 = 0, $sub$ptr$sub29 = 0, $sub$ptr$sub37 = 0, $this$addr = 0, $this$addr$i = 0, $this$addr$i$i = 0, $this$addr$i$i$i = 0, $this$addr$i$i$i$i = 0, $this$addr$i$i$i$i$i = 0, $this$addr$i$i$i$i$i132 = 0, $this$addr$i$i$i$i133 = 0, $this$addr$i$i$i13$i$i = 0, $this$addr$i$i$i13$i$i124 = 0, $this$addr$i$i$i134 = 0, $this$addr$i$i$i4$i$i = 0, $this$addr$i$i$i4$i$i129 = 0, $this$addr$i$i135 = 0, $this$addr$i$i14$i$i = 0, $this$addr$i$i14$i$i125 = 0, $this$addr$i$i5$i$i = 0;
 var $this$addr$i$i5$i$i130 = 0, $this$addr$i100 = 0, $this$addr$i103 = 0, $this$addr$i108 = 0, $this$addr$i111 = 0, $this$addr$i116 = 0, $this$addr$i118 = 0, $this$addr$i136 = 0, $this$addr$i15$i$i = 0, $this$addr$i15$i$i126 = 0, $this$addr$i168 = 0, $this$addr$i171 = 0, $this$addr$i174 = 0, $this$addr$i177 = 0, $this$addr$i180 = 0, $this$addr$i185 = 0, $this$addr$i190 = 0, $this$addr$i6$i$i = 0, $this$addr$i6$i$i131 = 0, $this$addr$i73 = 0;
 var $this$addr$i75 = 0, $this$addr$i78 = 0, $this$addr$i81 = 0, $this$addr$i84 = 0, $this$addr$i87 = 0, $this$addr$i89 = 0, $this$addr$i92 = 0, $this$addr$i95 = 0, $this1 = 0, $this1$i = 0, $this1$i$i = 0, $this1$i$i$i = 0, $this1$i$i$i$i = 0, $this1$i$i$i$i$i = 0, $this1$i$i$i$i$i142 = 0, $this1$i$i$i$i141 = 0, $this1$i$i$i10$i$i = 0, $this1$i$i$i10$i$i160 = 0, $this1$i$i$i139 = 0, $this1$i$i$i19$i$i = 0;
 var $this1$i$i$i19$i$i152 = 0, $this1$i$i138 = 0, $this1$i$i18$i$i = 0, $this1$i$i18$i$i151 = 0, $this1$i$i9$i$i = 0, $this1$i$i9$i$i159 = 0, $this1$i101 = 0, $this1$i105 = 0, $this1$i109 = 0, $this1$i113 = 0, $this1$i117 = 0, $this1$i120 = 0, $this1$i137 = 0, $this1$i16$i$i = 0, $this1$i16$i$i149 = 0, $this1$i169 = 0, $this1$i172 = 0, $this1$i175 = 0, $this1$i178 = 0, $this1$i182 = 0;
 var $this1$i187 = 0, $this1$i191 = 0, $this1$i7$i$i = 0, $this1$i7$i$i157 = 0, $this1$i74 = 0, $this1$i76 = 0, $this1$i79 = 0, $this1$i82 = 0, $this1$i85 = 0, $this1$i88 = 0, $this1$i90 = 0, $this1$i93 = 0, $this1$i97 = 0, $tobool = 0, $tobool$i$i$i = 0, $tobool$i$i$i148 = 0, $tobool45 = 0, $tobool52 = 0, $tobool60 = 0, $tobool67 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 320|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(320|0);
 $__off$addr$i186 = sp + 64|0;
 $__off$addr$i181 = sp + 56|0;
 $__off$addr$i119 = sp + 48|0;
 $__off$addr$i112 = sp + 40|0;
 $__off$addr$i104 = sp + 32|0;
 $__off$addr$i96 = sp + 24|0;
 $__off$addr$i = sp + 16|0;
 $__off$addr = sp + 8|0;
 $__noff = sp;
 $this$addr = $this;
 $2 = $__off$addr;
 $3 = $2;
 HEAP32[$3>>2] = $0;
 $4 = (($2) + 4)|0;
 $5 = $4;
 HEAP32[$5>>2] = $1;
 $__way$addr = $__way;
 $__wch$addr = $__wch;
 $this1 = $this$addr;
 $__hm_ = ((($this1)) + 44|0);
 $6 = HEAP32[$__hm_>>2]|0;
 $this$addr$i = $this1;
 $this1$i = $this$addr$i;
 $__nout_$i = ((($this1$i)) + 24|0);
 $7 = HEAP32[$__nout_$i>>2]|0;
 $cmp = ($6>>>0)<($7>>>0);
 if ($cmp) {
  $this$addr$i190 = $this1;
  $this1$i191 = $this$addr$i190;
  $__nout_$i192 = ((($this1$i191)) + 24|0);
  $8 = HEAP32[$__nout_$i192>>2]|0;
  $__hm_3 = ((($this1)) + 44|0);
  HEAP32[$__hm_3>>2] = $8;
 }
 $9 = $__wch$addr;
 $and = $9 & 24;
 $cmp4 = ($and|0)==(0);
 if ($cmp4) {
  $this$addr$i185 = $agg$result;
  $10 = $__off$addr$i186;
  $11 = $10;
  HEAP32[$11>>2] = -1;
  $12 = (($10) + 4)|0;
  $13 = $12;
  HEAP32[$13>>2] = -1;
  $this1$i187 = $this$addr$i185;
  ;HEAP32[$this1$i187>>2]=0|0;HEAP32[$this1$i187+4>>2]=0|0;
  $__off_$i189 = ((($this1$i187)) + 8|0);
  $14 = $__off$addr$i186;
  $15 = $14;
  $16 = HEAP32[$15>>2]|0;
  $17 = (($14) + 4)|0;
  $18 = $17;
  $19 = HEAP32[$18>>2]|0;
  $20 = $__off_$i189;
  $21 = $20;
  HEAP32[$21>>2] = $16;
  $22 = (($20) + 4)|0;
  $23 = $22;
  HEAP32[$23>>2] = $19;
  STACKTOP = sp;return;
 }
 $24 = $__wch$addr;
 $and7 = $24 & 24;
 $cmp8 = ($and7|0)==(24);
 $25 = $__way$addr;
 $cmp9 = ($25|0)==(1);
 $or$cond = $cmp8 & $cmp9;
 if ($or$cond) {
  $this$addr$i180 = $agg$result;
  $26 = $__off$addr$i181;
  $27 = $26;
  HEAP32[$27>>2] = -1;
  $28 = (($26) + 4)|0;
  $29 = $28;
  HEAP32[$29>>2] = -1;
  $this1$i182 = $this$addr$i180;
  ;HEAP32[$this1$i182>>2]=0|0;HEAP32[$this1$i182+4>>2]=0|0;
  $__off_$i184 = ((($this1$i182)) + 8|0);
  $30 = $__off$addr$i181;
  $31 = $30;
  $32 = HEAP32[$31>>2]|0;
  $33 = (($30) + 4)|0;
  $34 = $33;
  $35 = HEAP32[$34>>2]|0;
  $36 = $__off_$i184;
  $37 = $36;
  HEAP32[$37>>2] = $32;
  $38 = (($36) + 4)|0;
  $39 = $38;
  HEAP32[$39>>2] = $35;
  STACKTOP = sp;return;
 }
 $40 = $__way$addr;
 L12: do {
  switch ($40|0) {
  case 0:  {
   $41 = $__noff;
   $42 = $41;
   HEAP32[$42>>2] = 0;
   $43 = (($41) + 4)|0;
   $44 = $43;
   HEAP32[$44>>2] = 0;
   break;
  }
  case 1:  {
   $45 = $__wch$addr;
   $and13 = $45 & 8;
   $tobool = ($and13|0)!=(0);
   if ($tobool) {
    $this$addr$i177 = $this1;
    $this1$i178 = $this$addr$i177;
    $__ninp_$i179 = ((($this1$i178)) + 12|0);
    $46 = HEAP32[$__ninp_$i179>>2]|0;
    $this$addr$i174 = $this1;
    $this1$i175 = $this$addr$i174;
    $__binp_$i176 = ((($this1$i175)) + 8|0);
    $47 = HEAP32[$__binp_$i176>>2]|0;
    $sub$ptr$lhs$cast = $46;
    $sub$ptr$rhs$cast = $47;
    $sub$ptr$sub = (($sub$ptr$lhs$cast) - ($sub$ptr$rhs$cast))|0;
    $48 = ($sub$ptr$sub|0)<(0);
    $49 = $48 << 31 >> 31;
    $50 = $__noff;
    $51 = $50;
    HEAP32[$51>>2] = $sub$ptr$sub;
    $52 = (($50) + 4)|0;
    $53 = $52;
    HEAP32[$53>>2] = $49;
    break L12;
   } else {
    $this$addr$i171 = $this1;
    $this1$i172 = $this$addr$i171;
    $__nout_$i173 = ((($this1$i172)) + 24|0);
    $54 = HEAP32[$__nout_$i173>>2]|0;
    $this$addr$i168 = $this1;
    $this1$i169 = $this$addr$i168;
    $__bout_$i170 = ((($this1$i169)) + 20|0);
    $55 = HEAP32[$__bout_$i170>>2]|0;
    $sub$ptr$lhs$cast19 = $54;
    $sub$ptr$rhs$cast20 = $55;
    $sub$ptr$sub21 = (($sub$ptr$lhs$cast19) - ($sub$ptr$rhs$cast20))|0;
    $56 = ($sub$ptr$sub21|0)<(0);
    $57 = $56 << 31 >> 31;
    $58 = $__noff;
    $59 = $58;
    HEAP32[$59>>2] = $sub$ptr$sub21;
    $60 = (($58) + 4)|0;
    $61 = $60;
    HEAP32[$61>>2] = $57;
    break L12;
   }
   break;
  }
  case 2:  {
   $__hm_25 = ((($this1)) + 44|0);
   $62 = HEAP32[$__hm_25>>2]|0;
   $__str_ = ((($this1)) + 32|0);
   $this$addr$i136 = $__str_;
   $this1$i137 = $this$addr$i136;
   $this$addr$i$i135 = $this1$i137;
   $this1$i$i138 = $this$addr$i$i135;
   $this$addr$i$i$i134 = $this1$i$i138;
   $this1$i$i$i139 = $this$addr$i$i$i134;
   $this$addr$i$i$i$i133 = $this1$i$i$i139;
   $this1$i$i$i$i141 = $this$addr$i$i$i$i133;
   $this$addr$i$i$i$i$i132 = $this1$i$i$i$i141;
   $this1$i$i$i$i$i142 = $this$addr$i$i$i$i$i132;
   $63 = ((($this1$i$i$i$i$i142)) + 11|0);
   $64 = HEAP8[$63>>0]|0;
   $conv$i$i$i146 = $64&255;
   $and$i$i$i147 = $conv$i$i$i146 & 128;
   $tobool$i$i$i148 = ($and$i$i$i147|0)!=(0);
   if ($tobool$i$i$i148) {
    $this$addr$i15$i$i126 = $this1$i$i138;
    $this1$i16$i$i149 = $this$addr$i15$i$i126;
    $this$addr$i$i14$i$i125 = $this1$i16$i$i149;
    $this1$i$i18$i$i151 = $this$addr$i$i14$i$i125;
    $this$addr$i$i$i13$i$i124 = $this1$i$i18$i$i151;
    $this1$i$i$i19$i$i152 = $this$addr$i$i$i13$i$i124;
    $65 = HEAP32[$this1$i$i$i19$i$i152>>2]|0;
    $cond$i$i166 = $65;
   } else {
    $this$addr$i6$i$i131 = $this1$i$i138;
    $this1$i7$i$i157 = $this$addr$i6$i$i131;
    $this$addr$i$i5$i$i130 = $this1$i7$i$i157;
    $this1$i$i9$i$i159 = $this$addr$i$i5$i$i130;
    $this$addr$i$i$i4$i$i129 = $this1$i$i9$i$i159;
    $this1$i$i$i10$i$i160 = $this$addr$i$i$i4$i$i129;
    $__r$addr$i$i$i$i128 = $this1$i$i$i10$i$i160;
    $66 = $__r$addr$i$i$i$i128;
    $__x$addr$i$i$i$i$i127 = $66;
    $67 = $__x$addr$i$i$i$i$i127;
    $cond$i$i166 = $67;
   }
   $__p$addr$i$i123 = $cond$i$i166;
   $68 = $__p$addr$i$i123;
   $sub$ptr$lhs$cast27 = $62;
   $sub$ptr$rhs$cast28 = $68;
   $sub$ptr$sub29 = (($sub$ptr$lhs$cast27) - ($sub$ptr$rhs$cast28))|0;
   $69 = ($sub$ptr$sub29|0)<(0);
   $70 = $69 << 31 >> 31;
   $71 = $__noff;
   $72 = $71;
   HEAP32[$72>>2] = $sub$ptr$sub29;
   $73 = (($71) + 4)|0;
   $74 = $73;
   HEAP32[$74>>2] = $70;
   break;
  }
  default: {
   $this$addr$i118 = $agg$result;
   $75 = $__off$addr$i119;
   $76 = $75;
   HEAP32[$76>>2] = -1;
   $77 = (($75) + 4)|0;
   $78 = $77;
   HEAP32[$78>>2] = -1;
   $this1$i120 = $this$addr$i118;
   ;HEAP32[$this1$i120>>2]=0|0;HEAP32[$this1$i120+4>>2]=0|0;
   $__off_$i122 = ((($this1$i120)) + 8|0);
   $79 = $__off$addr$i119;
   $80 = $79;
   $81 = HEAP32[$80>>2]|0;
   $82 = (($79) + 4)|0;
   $83 = $82;
   $84 = HEAP32[$83>>2]|0;
   $85 = $__off_$i122;
   $86 = $85;
   HEAP32[$86>>2] = $81;
   $87 = (($85) + 4)|0;
   $88 = $87;
   HEAP32[$88>>2] = $84;
   STACKTOP = sp;return;
  }
  }
 } while(0);
 $89 = $__off$addr;
 $90 = $89;
 $91 = HEAP32[$90>>2]|0;
 $92 = (($89) + 4)|0;
 $93 = $92;
 $94 = HEAP32[$93>>2]|0;
 $95 = $__noff;
 $96 = $95;
 $97 = HEAP32[$96>>2]|0;
 $98 = (($95) + 4)|0;
 $99 = $98;
 $100 = HEAP32[$99>>2]|0;
 $101 = (_i64Add(($97|0),($100|0),($91|0),($94|0))|0);
 $102 = tempRet0;
 $103 = $__noff;
 $104 = $103;
 HEAP32[$104>>2] = $101;
 $105 = (($103) + 4)|0;
 $106 = $105;
 HEAP32[$106>>2] = $102;
 $107 = $__noff;
 $108 = $107;
 $109 = HEAP32[$108>>2]|0;
 $110 = (($107) + 4)|0;
 $111 = $110;
 $112 = HEAP32[$111>>2]|0;
 $113 = ($112|0)<(0);
 if (!($113)) {
  $__hm_32 = ((($this1)) + 44|0);
  $114 = HEAP32[$__hm_32>>2]|0;
  $__str_33 = ((($this1)) + 32|0);
  $this$addr$i116 = $__str_33;
  $this1$i117 = $this$addr$i116;
  $this$addr$i$i = $this1$i117;
  $this1$i$i = $this$addr$i$i;
  $this$addr$i$i$i = $this1$i$i;
  $this1$i$i$i = $this$addr$i$i$i;
  $this$addr$i$i$i$i = $this1$i$i$i;
  $this1$i$i$i$i = $this$addr$i$i$i$i;
  $this$addr$i$i$i$i$i = $this1$i$i$i$i;
  $this1$i$i$i$i$i = $this$addr$i$i$i$i$i;
  $115 = ((($this1$i$i$i$i$i)) + 11|0);
  $116 = HEAP8[$115>>0]|0;
  $conv$i$i$i = $116&255;
  $and$i$i$i = $conv$i$i$i & 128;
  $tobool$i$i$i = ($and$i$i$i|0)!=(0);
  if ($tobool$i$i$i) {
   $this$addr$i15$i$i = $this1$i$i;
   $this1$i16$i$i = $this$addr$i15$i$i;
   $this$addr$i$i14$i$i = $this1$i16$i$i;
   $this1$i$i18$i$i = $this$addr$i$i14$i$i;
   $this$addr$i$i$i13$i$i = $this1$i$i18$i$i;
   $this1$i$i$i19$i$i = $this$addr$i$i$i13$i$i;
   $117 = HEAP32[$this1$i$i$i19$i$i>>2]|0;
   $cond$i$i = $117;
  } else {
   $this$addr$i6$i$i = $this1$i$i;
   $this1$i7$i$i = $this$addr$i6$i$i;
   $this$addr$i$i5$i$i = $this1$i7$i$i;
   $this1$i$i9$i$i = $this$addr$i$i5$i$i;
   $this$addr$i$i$i4$i$i = $this1$i$i9$i$i;
   $this1$i$i$i10$i$i = $this$addr$i$i$i4$i$i;
   $__r$addr$i$i$i$i = $this1$i$i$i10$i$i;
   $118 = $__r$addr$i$i$i$i;
   $__x$addr$i$i$i$i$i = $118;
   $119 = $__x$addr$i$i$i$i$i;
   $cond$i$i = $119;
  }
  $__p$addr$i$i = $cond$i$i;
  $120 = $__p$addr$i$i;
  $sub$ptr$lhs$cast35 = $114;
  $sub$ptr$rhs$cast36 = $120;
  $sub$ptr$sub37 = (($sub$ptr$lhs$cast35) - ($sub$ptr$rhs$cast36))|0;
  $121 = ($sub$ptr$sub37|0)<(0);
  $122 = $121 << 31 >> 31;
  $123 = $__noff;
  $124 = $123;
  $125 = HEAP32[$124>>2]|0;
  $126 = (($123) + 4)|0;
  $127 = $126;
  $128 = HEAP32[$127>>2]|0;
  $129 = ($122|0)<($128|0);
  $130 = ($sub$ptr$sub37>>>0)<($125>>>0);
  $131 = ($122|0)==($128|0);
  $132 = $131 & $130;
  $133 = $129 | $132;
  if (!($133)) {
   $148 = $__noff;
   $149 = $148;
   $150 = HEAP32[$149>>2]|0;
   $151 = (($148) + 4)|0;
   $152 = $151;
   $153 = HEAP32[$152>>2]|0;
   $154 = ($150|0)!=(0);
   $155 = ($153|0)!=(0);
   $156 = $154 | $155;
   if ($156) {
    $157 = $__wch$addr;
    $and44 = $157 & 8;
    $tobool45 = ($and44|0)!=(0);
    if ($tobool45) {
     $this$addr$i108 = $this1;
     $this1$i109 = $this$addr$i108;
     $__ninp_$i110 = ((($this1$i109)) + 12|0);
     $158 = HEAP32[$__ninp_$i110>>2]|0;
     $cmp48 = ($158|0)==(0|0);
     if ($cmp48) {
      $this$addr$i103 = $agg$result;
      $159 = $__off$addr$i104;
      $160 = $159;
      HEAP32[$160>>2] = -1;
      $161 = (($159) + 4)|0;
      $162 = $161;
      HEAP32[$162>>2] = -1;
      $this1$i105 = $this$addr$i103;
      ;HEAP32[$this1$i105>>2]=0|0;HEAP32[$this1$i105+4>>2]=0|0;
      $__off_$i107 = ((($this1$i105)) + 8|0);
      $163 = $__off$addr$i104;
      $164 = $163;
      $165 = HEAP32[$164>>2]|0;
      $166 = (($163) + 4)|0;
      $167 = $166;
      $168 = HEAP32[$167>>2]|0;
      $169 = $__off_$i107;
      $170 = $169;
      HEAP32[$170>>2] = $165;
      $171 = (($169) + 4)|0;
      $172 = $171;
      HEAP32[$172>>2] = $168;
      STACKTOP = sp;return;
     }
    }
    $173 = $__wch$addr;
    $and51 = $173 & 16;
    $tobool52 = ($and51|0)!=(0);
    if ($tobool52) {
     $this$addr$i100 = $this1;
     $this1$i101 = $this$addr$i100;
     $__nout_$i102 = ((($this1$i101)) + 24|0);
     $174 = HEAP32[$__nout_$i102>>2]|0;
     $cmp55 = ($174|0)==(0|0);
     if ($cmp55) {
      $this$addr$i95 = $agg$result;
      $175 = $__off$addr$i96;
      $176 = $175;
      HEAP32[$176>>2] = -1;
      $177 = (($175) + 4)|0;
      $178 = $177;
      HEAP32[$178>>2] = -1;
      $this1$i97 = $this$addr$i95;
      ;HEAP32[$this1$i97>>2]=0|0;HEAP32[$this1$i97+4>>2]=0|0;
      $__off_$i99 = ((($this1$i97)) + 8|0);
      $179 = $__off$addr$i96;
      $180 = $179;
      $181 = HEAP32[$180>>2]|0;
      $182 = (($179) + 4)|0;
      $183 = $182;
      $184 = HEAP32[$183>>2]|0;
      $185 = $__off_$i99;
      $186 = $185;
      HEAP32[$186>>2] = $181;
      $187 = (($185) + 4)|0;
      $188 = $187;
      HEAP32[$188>>2] = $184;
      STACKTOP = sp;return;
     }
    }
   }
   $189 = $__wch$addr;
   $and59 = $189 & 8;
   $tobool60 = ($and59|0)!=(0);
   if ($tobool60) {
    $this$addr$i92 = $this1;
    $this1$i93 = $this$addr$i92;
    $__binp_$i94 = ((($this1$i93)) + 8|0);
    $190 = HEAP32[$__binp_$i94>>2]|0;
    $this$addr$i89 = $this1;
    $this1$i90 = $this$addr$i89;
    $__binp_$i91 = ((($this1$i90)) + 8|0);
    $191 = HEAP32[$__binp_$i91>>2]|0;
    $192 = $__noff;
    $193 = $192;
    $194 = HEAP32[$193>>2]|0;
    $195 = (($192) + 4)|0;
    $196 = $195;
    $197 = HEAP32[$196>>2]|0;
    $add$ptr = (($191) + ($194)|0);
    $__hm_64 = ((($this1)) + 44|0);
    $198 = HEAP32[$__hm_64>>2]|0;
    $this$addr$i87 = $this1;
    $__gbeg$addr$i = $190;
    $__gnext$addr$i = $add$ptr;
    $__gend$addr$i = $198;
    $this1$i88 = $this$addr$i87;
    $199 = $__gbeg$addr$i;
    $__binp_$i = ((($this1$i88)) + 8|0);
    HEAP32[$__binp_$i>>2] = $199;
    $200 = $__gnext$addr$i;
    $__ninp_$i = ((($this1$i88)) + 12|0);
    HEAP32[$__ninp_$i>>2] = $200;
    $201 = $__gend$addr$i;
    $__einp_$i = ((($this1$i88)) + 16|0);
    HEAP32[$__einp_$i>>2] = $201;
   }
   $202 = $__wch$addr;
   $and66 = $202 & 16;
   $tobool67 = ($and66|0)!=(0);
   if ($tobool67) {
    $this$addr$i84 = $this1;
    $this1$i85 = $this$addr$i84;
    $__bout_$i86 = ((($this1$i85)) + 20|0);
    $203 = HEAP32[$__bout_$i86>>2]|0;
    $this$addr$i81 = $this1;
    $this1$i82 = $this$addr$i81;
    $__eout_$i83 = ((($this1$i82)) + 28|0);
    $204 = HEAP32[$__eout_$i83>>2]|0;
    $this$addr$i78 = $this1;
    $__pbeg$addr$i = $203;
    $__pend$addr$i = $204;
    $this1$i79 = $this$addr$i78;
    $205 = $__pbeg$addr$i;
    $__nout_$i80 = ((($this1$i79)) + 24|0);
    HEAP32[$__nout_$i80>>2] = $205;
    $__bout_$i = ((($this1$i79)) + 20|0);
    HEAP32[$__bout_$i>>2] = $205;
    $206 = $__pend$addr$i;
    $__eout_$i = ((($this1$i79)) + 28|0);
    HEAP32[$__eout_$i>>2] = $206;
    $207 = $__noff;
    $208 = $207;
    $209 = HEAP32[$208>>2]|0;
    $210 = (($207) + 4)|0;
    $211 = $210;
    $212 = HEAP32[$211>>2]|0;
    $this$addr$i75 = $this1;
    $__n$addr$i = $209;
    $this1$i76 = $this$addr$i75;
    $213 = $__n$addr$i;
    $__nout_$i77 = ((($this1$i76)) + 24|0);
    $214 = HEAP32[$__nout_$i77>>2]|0;
    $add$ptr$i = (($214) + ($213)|0);
    HEAP32[$__nout_$i77>>2] = $add$ptr$i;
   }
   $215 = $__noff;
   $216 = $215;
   $217 = HEAP32[$216>>2]|0;
   $218 = (($215) + 4)|0;
   $219 = $218;
   $220 = HEAP32[$219>>2]|0;
   $this$addr$i73 = $agg$result;
   $221 = $__off$addr$i;
   $222 = $221;
   HEAP32[$222>>2] = $217;
   $223 = (($221) + 4)|0;
   $224 = $223;
   HEAP32[$224>>2] = $220;
   $this1$i74 = $this$addr$i73;
   ;HEAP32[$this1$i74>>2]=0|0;HEAP32[$this1$i74+4>>2]=0|0;
   $__off_$i = ((($this1$i74)) + 8|0);
   $225 = $__off$addr$i;
   $226 = $225;
   $227 = HEAP32[$226>>2]|0;
   $228 = (($225) + 4)|0;
   $229 = $228;
   $230 = HEAP32[$229>>2]|0;
   $231 = $__off_$i;
   $232 = $231;
   HEAP32[$232>>2] = $227;
   $233 = (($231) + 4)|0;
   $234 = $233;
   HEAP32[$234>>2] = $230;
   STACKTOP = sp;return;
  }
 }
 $this$addr$i111 = $agg$result;
 $134 = $__off$addr$i112;
 $135 = $134;
 HEAP32[$135>>2] = -1;
 $136 = (($134) + 4)|0;
 $137 = $136;
 HEAP32[$137>>2] = -1;
 $this1$i113 = $this$addr$i111;
 ;HEAP32[$this1$i113>>2]=0|0;HEAP32[$this1$i113+4>>2]=0|0;
 $__off_$i115 = ((($this1$i113)) + 8|0);
 $138 = $__off$addr$i112;
 $139 = $138;
 $140 = HEAP32[$139>>2]|0;
 $141 = (($138) + 4)|0;
 $142 = $141;
 $143 = HEAP32[$142>>2]|0;
 $144 = $__off_$i115;
 $145 = $144;
 HEAP32[$145>>2] = $140;
 $146 = (($144) + 4)|0;
 $147 = $146;
 HEAP32[$147>>2] = $143;
 STACKTOP = sp;return;
}
function __ZNSt3__215basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEE7seekposENS_4fposI11__mbstate_tEEj($agg$result,$this,$__sp,$__wch) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__sp = $__sp|0;
 $__wch = $__wch|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $__off_$i = 0, $__wch$addr = 0, $this$addr = 0, $this$addr$i = 0, $this1 = 0, $this1$i = 0, $vtable = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $this$addr = $this;
 $__wch$addr = $__wch;
 $this1 = $this$addr;
 $vtable = HEAP32[$this1>>2]|0;
 $0 = ((($vtable)) + 16|0);
 $1 = HEAP32[$0>>2]|0;
 $this$addr$i = $__sp;
 $this1$i = $this$addr$i;
 $__off_$i = ((($this1$i)) + 8|0);
 $2 = $__off_$i;
 $3 = $2;
 $4 = HEAP32[$3>>2]|0;
 $5 = (($2) + 4)|0;
 $6 = $5;
 $7 = HEAP32[$6>>2]|0;
 $8 = $__wch$addr;
 FUNCTION_TABLE_viiiiii[$1 & 511]($agg$result,$this1,$4,$7,0,$8);
 STACKTOP = sp;return;
}
function __ZNSt3__215basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEE9underflowEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__binp_$i = 0, $__binp_$i44 = 0, $__einp_$i = 0;
 var $__einp_$i31 = 0, $__einp_$i38 = 0, $__gbeg$addr$i = 0, $__gend$addr$i = 0, $__gnext$addr$i = 0, $__hm_ = 0, $__hm_11 = 0, $__hm_3 = 0, $__hm_6 = 0, $__mode_ = 0, $__ninp_$i = 0, $__ninp_$i34 = 0, $__ninp_$i37 = 0, $__ninp_$i41 = 0, $__nout_$i = 0, $__nout_$i24 = 0, $and = 0, $call18 = 0, $call21 = 0, $cmp = 0;
 var $cmp15 = 0, $cmp7 = 0, $retval = 0, $this$addr = 0, $this$addr$i = 0, $this$addr$i22 = 0, $this$addr$i25 = 0, $this$addr$i27 = 0, $this$addr$i29 = 0, $this$addr$i32 = 0, $this$addr$i35 = 0, $this$addr$i39 = 0, $this$addr$i42 = 0, $this1 = 0, $this1$i = 0, $this1$i23 = 0, $this1$i26 = 0, $this1$i28 = 0, $this1$i30 = 0, $this1$i33 = 0;
 var $this1$i36 = 0, $this1$i40 = 0, $this1$i43 = 0, $tobool = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $this$addr = $this;
 $this1 = $this$addr;
 $__hm_ = ((($this1)) + 44|0);
 $0 = HEAP32[$__hm_>>2]|0;
 $this$addr$i = $this1;
 $this1$i = $this$addr$i;
 $__nout_$i = ((($this1$i)) + 24|0);
 $1 = HEAP32[$__nout_$i>>2]|0;
 $cmp = ($0>>>0)<($1>>>0);
 if ($cmp) {
  $this$addr$i22 = $this1;
  $this1$i23 = $this$addr$i22;
  $__nout_$i24 = ((($this1$i23)) + 24|0);
  $2 = HEAP32[$__nout_$i24>>2]|0;
  $__hm_3 = ((($this1)) + 44|0);
  HEAP32[$__hm_3>>2] = $2;
 }
 $__mode_ = ((($this1)) + 48|0);
 $3 = HEAP32[$__mode_>>2]|0;
 $and = $3 & 8;
 $tobool = ($and|0)!=(0);
 if ($tobool) {
  $this$addr$i25 = $this1;
  $this1$i26 = $this$addr$i25;
  $__einp_$i = ((($this1$i26)) + 16|0);
  $4 = HEAP32[$__einp_$i>>2]|0;
  $__hm_6 = ((($this1)) + 44|0);
  $5 = HEAP32[$__hm_6>>2]|0;
  $cmp7 = ($4>>>0)<($5>>>0);
  if ($cmp7) {
   $this$addr$i42 = $this1;
   $this1$i43 = $this$addr$i42;
   $__binp_$i44 = ((($this1$i43)) + 8|0);
   $6 = HEAP32[$__binp_$i44>>2]|0;
   $this$addr$i39 = $this1;
   $this1$i40 = $this$addr$i39;
   $__ninp_$i41 = ((($this1$i40)) + 12|0);
   $7 = HEAP32[$__ninp_$i41>>2]|0;
   $__hm_11 = ((($this1)) + 44|0);
   $8 = HEAP32[$__hm_11>>2]|0;
   $this$addr$i35 = $this1;
   $__gbeg$addr$i = $6;
   $__gnext$addr$i = $7;
   $__gend$addr$i = $8;
   $this1$i36 = $this$addr$i35;
   $9 = $__gbeg$addr$i;
   $__binp_$i = ((($this1$i36)) + 8|0);
   HEAP32[$__binp_$i>>2] = $9;
   $10 = $__gnext$addr$i;
   $__ninp_$i37 = ((($this1$i36)) + 12|0);
   HEAP32[$__ninp_$i37>>2] = $10;
   $11 = $__gend$addr$i;
   $__einp_$i38 = ((($this1$i36)) + 16|0);
   HEAP32[$__einp_$i38>>2] = $11;
  }
  $this$addr$i32 = $this1;
  $this1$i33 = $this$addr$i32;
  $__ninp_$i34 = ((($this1$i33)) + 12|0);
  $12 = HEAP32[$__ninp_$i34>>2]|0;
  $this$addr$i29 = $this1;
  $this1$i30 = $this$addr$i29;
  $__einp_$i31 = ((($this1$i30)) + 16|0);
  $13 = HEAP32[$__einp_$i31>>2]|0;
  $cmp15 = ($12>>>0)<($13>>>0);
  if ($cmp15) {
   $this$addr$i27 = $this1;
   $this1$i28 = $this$addr$i27;
   $__ninp_$i = ((($this1$i28)) + 12|0);
   $14 = HEAP32[$__ninp_$i>>2]|0;
   $15 = HEAP8[$14>>0]|0;
   $call18 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($15)|0);
   $retval = $call18;
   $16 = $retval;
   STACKTOP = sp;return ($16|0);
  }
 }
 $call21 = (__ZNSt3__211char_traitsIcE3eofEv()|0);
 $retval = $call21;
 $16 = $retval;
 STACKTOP = sp;return ($16|0);
}
function __ZNSt3__215basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEE9pbackfailEi($this,$__c) {
 $this = $this|0;
 $__c = $__c|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__binp_$i = 0, $__binp_$i38 = 0, $__binp_$i45 = 0, $__binp_$i54 = 0, $__binp_$i63 = 0, $__c$addr = 0, $__einp_$i = 0, $__einp_$i65 = 0, $__gbeg$addr$i = 0, $__gbeg$addr$i59 = 0, $__gend$addr$i = 0, $__gend$addr$i61 = 0, $__gnext$addr$i = 0;
 var $__gnext$addr$i60 = 0, $__hm_ = 0, $__hm_13 = 0, $__hm_23 = 0, $__hm_3 = 0, $__mode_ = 0, $__ninp_$i = 0, $__ninp_$i39 = 0, $__ninp_$i42 = 0, $__ninp_$i48 = 0, $__ninp_$i51 = 0, $__ninp_$i57 = 0, $__ninp_$i64 = 0, $__nout_$i = 0, $__nout_$i31 = 0, $add$ptr = 0, $add$ptr22 = 0, $and = 0, $arrayidx = 0, $call14 = 0;
 var $call16 = 0, $call18 = 0, $call24 = 0, $call28 = 0, $call8 = 0, $call9 = 0, $cmp = 0, $cmp6 = 0, $retval = 0, $this$addr = 0, $this$addr$i = 0, $this$addr$i29 = 0, $this$addr$i32 = 0, $this$addr$i34 = 0, $this$addr$i36 = 0, $this$addr$i40 = 0, $this$addr$i43 = 0, $this$addr$i46 = 0, $this$addr$i49 = 0, $this$addr$i52 = 0;
 var $this$addr$i55 = 0, $this$addr$i58 = 0, $this1 = 0, $this1$i = 0, $this1$i30 = 0, $this1$i33 = 0, $this1$i35 = 0, $this1$i37 = 0, $this1$i41 = 0, $this1$i44 = 0, $this1$i47 = 0, $this1$i50 = 0, $this1$i53 = 0, $this1$i56 = 0, $this1$i62 = 0, $tobool = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(96|0);
 $this$addr = $this;
 $__c$addr = $__c;
 $this1 = $this$addr;
 $__hm_ = ((($this1)) + 44|0);
 $0 = HEAP32[$__hm_>>2]|0;
 $this$addr$i = $this1;
 $this1$i = $this$addr$i;
 $__nout_$i = ((($this1$i)) + 24|0);
 $1 = HEAP32[$__nout_$i>>2]|0;
 $cmp = ($0>>>0)<($1>>>0);
 if ($cmp) {
  $this$addr$i29 = $this1;
  $this1$i30 = $this$addr$i29;
  $__nout_$i31 = ((($this1$i30)) + 24|0);
  $2 = HEAP32[$__nout_$i31>>2]|0;
  $__hm_3 = ((($this1)) + 44|0);
  HEAP32[$__hm_3>>2] = $2;
 }
 $this$addr$i34 = $this1;
 $this1$i35 = $this$addr$i34;
 $__binp_$i = ((($this1$i35)) + 8|0);
 $3 = HEAP32[$__binp_$i>>2]|0;
 $this$addr$i46 = $this1;
 $this1$i47 = $this$addr$i46;
 $__ninp_$i48 = ((($this1$i47)) + 12|0);
 $4 = HEAP32[$__ninp_$i48>>2]|0;
 $cmp6 = ($3>>>0)<($4>>>0);
 do {
  if ($cmp6) {
   $5 = $__c$addr;
   $call8 = (__ZNSt3__211char_traitsIcE3eofEv()|0);
   $call9 = (__ZNSt3__211char_traitsIcE11eq_int_typeEii($5,$call8)|0);
   if ($call9) {
    $this$addr$i52 = $this1;
    $this1$i53 = $this$addr$i52;
    $__binp_$i54 = ((($this1$i53)) + 8|0);
    $6 = HEAP32[$__binp_$i54>>2]|0;
    $this$addr$i55 = $this1;
    $this1$i56 = $this$addr$i55;
    $__ninp_$i57 = ((($this1$i56)) + 12|0);
    $7 = HEAP32[$__ninp_$i57>>2]|0;
    $add$ptr = ((($7)) + -1|0);
    $__hm_13 = ((($this1)) + 44|0);
    $8 = HEAP32[$__hm_13>>2]|0;
    $this$addr$i58 = $this1;
    $__gbeg$addr$i59 = $6;
    $__gnext$addr$i60 = $add$ptr;
    $__gend$addr$i61 = $8;
    $this1$i62 = $this$addr$i58;
    $9 = $__gbeg$addr$i59;
    $__binp_$i63 = ((($this1$i62)) + 8|0);
    HEAP32[$__binp_$i63>>2] = $9;
    $10 = $__gnext$addr$i60;
    $__ninp_$i64 = ((($this1$i62)) + 12|0);
    HEAP32[$__ninp_$i64>>2] = $10;
    $11 = $__gend$addr$i61;
    $__einp_$i65 = ((($this1$i62)) + 16|0);
    HEAP32[$__einp_$i65>>2] = $11;
    $12 = $__c$addr;
    $call14 = (__ZNSt3__211char_traitsIcE7not_eofEi($12)|0);
    $retval = $call14;
    $26 = $retval;
    STACKTOP = sp;return ($26|0);
   }
   $__mode_ = ((($this1)) + 48|0);
   $13 = HEAP32[$__mode_>>2]|0;
   $and = $13 & 16;
   $tobool = ($and|0)!=(0);
   if (!($tobool)) {
    $14 = $__c$addr;
    $call16 = (__ZNSt3__211char_traitsIcE12to_char_typeEi($14)|0);
    $this$addr$i49 = $this1;
    $this1$i50 = $this$addr$i49;
    $__ninp_$i51 = ((($this1$i50)) + 12|0);
    $15 = HEAP32[$__ninp_$i51>>2]|0;
    $arrayidx = ((($15)) + -1|0);
    $16 = HEAP8[$arrayidx>>0]|0;
    $call18 = (__ZNSt3__211char_traitsIcE2eqEcc($call16,$16)|0);
    if (!($call18)) {
     break;
    }
   }
   $this$addr$i43 = $this1;
   $this1$i44 = $this$addr$i43;
   $__binp_$i45 = ((($this1$i44)) + 8|0);
   $17 = HEAP32[$__binp_$i45>>2]|0;
   $this$addr$i40 = $this1;
   $this1$i41 = $this$addr$i40;
   $__ninp_$i42 = ((($this1$i41)) + 12|0);
   $18 = HEAP32[$__ninp_$i42>>2]|0;
   $add$ptr22 = ((($18)) + -1|0);
   $__hm_23 = ((($this1)) + 44|0);
   $19 = HEAP32[$__hm_23>>2]|0;
   $this$addr$i36 = $this1;
   $__gbeg$addr$i = $17;
   $__gnext$addr$i = $add$ptr22;
   $__gend$addr$i = $19;
   $this1$i37 = $this$addr$i36;
   $20 = $__gbeg$addr$i;
   $__binp_$i38 = ((($this1$i37)) + 8|0);
   HEAP32[$__binp_$i38>>2] = $20;
   $21 = $__gnext$addr$i;
   $__ninp_$i39 = ((($this1$i37)) + 12|0);
   HEAP32[$__ninp_$i39>>2] = $21;
   $22 = $__gend$addr$i;
   $__einp_$i = ((($this1$i37)) + 16|0);
   HEAP32[$__einp_$i>>2] = $22;
   $23 = $__c$addr;
   $call24 = (__ZNSt3__211char_traitsIcE12to_char_typeEi($23)|0);
   $this$addr$i32 = $this1;
   $this1$i33 = $this$addr$i32;
   $__ninp_$i = ((($this1$i33)) + 12|0);
   $24 = HEAP32[$__ninp_$i>>2]|0;
   HEAP8[$24>>0] = $call24;
   $25 = $__c$addr;
   $retval = $25;
   $26 = $retval;
   STACKTOP = sp;return ($26|0);
  }
 } while(0);
 $call28 = (__ZNSt3__211char_traitsIcE3eofEv()|0);
 $retval = $call28;
 $26 = $retval;
 STACKTOP = sp;return ($26|0);
}
function __ZNSt3__215basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEE8overflowEi($this,$__c) {
 $this = $this|0;
 $__c = $__c|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $8 = 0, $9 = 0, $__a$addr$i = 0, $__a$addr$i$i = 0;
 var $__b$addr$i = 0, $__b$addr$i$i = 0, $__binp_$i = 0, $__binp_$i71 = 0, $__bout_$i = 0, $__bout_$i153 = 0, $__bout_$i86 = 0, $__bout_$i93 = 0, $__c$addr = 0, $__c$addr$i = 0, $__cap_$i$i = 0, $__einp_$i = 0, $__eout_$i = 0, $__eout_$i65 = 0, $__eout_$i94 = 0, $__gbeg$addr$i = 0, $__gend$addr$i = 0, $__gnext$addr$i = 0, $__hm = 0, $__hm_ = 0;
 var $__hm_35 = 0, $__hm_40 = 0, $__hm_42 = 0, $__hm_51 = 0, $__mode_ = 0, $__mode_43 = 0, $__n$addr$i = 0, $__n$addr$i149 = 0, $__ninp = 0, $__ninp_$i = 0, $__ninp_$i72 = 0, $__nout = 0, $__nout_$i = 0, $__nout_$i62 = 0, $__nout_$i68 = 0, $__nout_$i81 = 0, $__nout_$i89 = 0, $__nout_$i92 = 0, $__nout_3$i = 0, $__p = 0;
 var $__p$addr$i$i = 0, $__p$addr$i$i103 = 0, $__p47 = 0, $__pbeg$addr$i = 0, $__pend$addr$i = 0, $__r$addr$i$i$i$i = 0, $__r$addr$i$i$i$i108 = 0, $__size_$i23$i = 0, $__str_ = 0, $__str_22 = 0, $__str_23 = 0, $__str_26 = 0, $__str_28 = 0, $__str_48 = 0, $__x$addr$i$i$i = 0, $__x$addr$i$i$i$i$i = 0, $__x$addr$i$i$i$i$i107 = 0, $__y$addr$i$i$i = 0, $add$ptr = 0, $add$ptr$i = 0;
 var $add$ptr34 = 0, $add$ptr39 = 0, $add$ptr50 = 0, $agg$tmp$i = 0, $agg$tmp1$i = 0, $and = 0, $and$i$i = 0, $and$i$i$i = 0, $and$i$i$i127 = 0, $and$i$i167 = 0, $and$i11$i = 0, $and44 = 0, $call = 0, $call$i = 0, $call2 = 0, $call2$i = 0, $call36 = 0, $call4$i = 0, $call55 = 0, $call9 = 0;
 var $cmp = 0, $cmp$i = 0, $cmp$i$i$i = 0, $cond$i = 0, $cond$i$i = 0, $cond$i$i146 = 0, $cond$i172 = 0, $cond$lvalue$i$i2D = 0, $conv = 0, $conv$i$i = 0, $conv$i$i$i = 0, $conv$i$i$i126 = 0, $conv$i$i166 = 0, $conv$i14$i = 0, $ehselector$slot = 0, $exn = 0, $exn$slot = 0, $incdec$ptr$i = 0, $ref$tmp = 0, $retval = 0;
 var $retval$i = 0, $sub$i = 0, $sub$ptr$lhs$cast = 0, $sub$ptr$lhs$cast13 = 0, $sub$ptr$lhs$cast18 = 0, $sub$ptr$rhs$cast = 0, $sub$ptr$rhs$cast14 = 0, $sub$ptr$rhs$cast19 = 0, $sub$ptr$sub = 0, $sub$ptr$sub15 = 0, $sub$ptr$sub20 = 0, $this$addr = 0, $this$addr$i = 0, $this$addr$i$i = 0, $this$addr$i$i$i = 0, $this$addr$i$i$i$i = 0, $this$addr$i$i$i$i$i = 0, $this$addr$i$i$i$i$i112 = 0, $this$addr$i$i$i$i113 = 0, $this$addr$i$i$i$i154 = 0;
 var $this$addr$i$i$i$i95 = 0, $this$addr$i$i$i114 = 0, $this$addr$i$i$i13$i$i = 0, $this$addr$i$i$i13$i$i104 = 0, $this$addr$i$i$i15$i = 0, $this$addr$i$i$i155 = 0, $this$addr$i$i$i3$i = 0, $this$addr$i$i$i4$i = 0, $this$addr$i$i$i4$i$i = 0, $this$addr$i$i$i4$i$i109 = 0, $this$addr$i$i$i75 = 0, $this$addr$i$i$i96 = 0, $this$addr$i$i115 = 0, $this$addr$i$i14$i$i = 0, $this$addr$i$i14$i$i105 = 0, $this$addr$i$i156 = 0, $this$addr$i$i16$i = 0, $this$addr$i$i4$i = 0, $this$addr$i$i5$i = 0, $this$addr$i$i5$i$i = 0;
 var $this$addr$i$i5$i$i110 = 0, $this$addr$i$i97 = 0, $this$addr$i116 = 0, $this$addr$i148 = 0, $this$addr$i15$i$i = 0, $this$addr$i15$i$i106 = 0, $this$addr$i151 = 0, $this$addr$i157 = 0, $this$addr$i17$i = 0, $this$addr$i5$i = 0, $this$addr$i56 = 0, $this$addr$i58 = 0, $this$addr$i6$i = 0, $this$addr$i6$i$i = 0, $this$addr$i6$i$i111 = 0, $this$addr$i60 = 0, $this$addr$i63 = 0, $this$addr$i66 = 0, $this$addr$i69 = 0, $this$addr$i73 = 0;
 var $this$addr$i79 = 0, $this$addr$i82 = 0, $this$addr$i84 = 0, $this$addr$i87 = 0, $this$addr$i90 = 0, $this$addr$i98 = 0, $this1 = 0, $this1$i = 0, $this1$i$i = 0, $this1$i$i$i = 0, $this1$i$i$i$i = 0, $this1$i$i$i$i$i = 0, $this1$i$i$i$i$i122 = 0, $this1$i$i$i$i102 = 0, $this1$i$i$i$i121 = 0, $this1$i$i$i$i162 = 0, $this1$i$i$i10$i = 0, $this1$i$i$i10$i$i = 0, $this1$i$i$i10$i$i140 = 0, $this1$i$i$i101 = 0;
 var $this1$i$i$i119 = 0, $this1$i$i$i161 = 0, $this1$i$i$i19$i$i = 0, $this1$i$i$i19$i$i132 = 0, $this1$i$i$i21$i = 0, $this1$i$i$i9$i = 0, $this1$i$i100 = 0, $this1$i$i118 = 0, $this1$i$i159 = 0, $this1$i$i18$i$i = 0, $this1$i$i18$i$i131 = 0, $this1$i$i20$i = 0, $this1$i$i8$i = 0, $this1$i$i9$i = 0, $this1$i$i9$i$i = 0, $this1$i$i9$i$i139 = 0, $this1$i117 = 0, $this1$i150 = 0, $this1$i152 = 0, $this1$i158 = 0;
 var $this1$i16$i$i = 0, $this1$i16$i$i129 = 0, $this1$i18$i = 0, $this1$i57 = 0, $this1$i59 = 0, $this1$i6$i = 0, $this1$i61 = 0, $this1$i64 = 0, $this1$i67 = 0, $this1$i7$i = 0, $this1$i7$i$i = 0, $this1$i7$i$i137 = 0, $this1$i70 = 0, $this1$i74 = 0, $this1$i80 = 0, $this1$i83 = 0, $this1$i85 = 0, $this1$i88 = 0, $this1$i91 = 0, $this1$i99 = 0;
 var $tobool = 0, $tobool$i$i = 0, $tobool$i$i$i = 0, $tobool$i$i$i128 = 0, $tobool$i$i168 = 0, $tobool45 = 0, $vtable$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 352|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(352|0);
 $agg$tmp1$i = sp;
 $agg$tmp$i = sp + 345|0;
 $ref$tmp = sp + 8|0;
 $this$addr = $this;
 $__c$addr = $__c;
 $this1 = $this$addr;
 $0 = $__c$addr;
 $call = (__ZNSt3__211char_traitsIcE3eofEv()|0);
 $call2 = (__ZNSt3__211char_traitsIcE11eq_int_typeEii($0,$call)|0);
 if ($call2) {
  $76 = $__c$addr;
  $call55 = (__ZNSt3__211char_traitsIcE7not_eofEi($76)|0);
  $retval = $call55;
  $77 = $retval;
  STACKTOP = sp;return ($77|0);
 }
 $this$addr$i = $this1;
 $this1$i = $this$addr$i;
 $__ninp_$i = ((($this1$i)) + 12|0);
 $1 = HEAP32[$__ninp_$i>>2]|0;
 $this$addr$i56 = $this1;
 $this1$i57 = $this$addr$i56;
 $__binp_$i = ((($this1$i57)) + 8|0);
 $2 = HEAP32[$__binp_$i>>2]|0;
 $sub$ptr$lhs$cast = $1;
 $sub$ptr$rhs$cast = $2;
 $sub$ptr$sub = (($sub$ptr$lhs$cast) - ($sub$ptr$rhs$cast))|0;
 $__ninp = $sub$ptr$sub;
 $this$addr$i60 = $this1;
 $this1$i61 = $this$addr$i60;
 $__nout_$i62 = ((($this1$i61)) + 24|0);
 $3 = HEAP32[$__nout_$i62>>2]|0;
 $this$addr$i63 = $this1;
 $this1$i64 = $this$addr$i63;
 $__eout_$i65 = ((($this1$i64)) + 28|0);
 $4 = HEAP32[$__eout_$i65>>2]|0;
 $cmp = ($3|0)==($4|0);
 do {
  if ($cmp) {
   $__mode_ = ((($this1)) + 48|0);
   $5 = HEAP32[$__mode_>>2]|0;
   $and = $5 & 16;
   $tobool = ($and|0)!=(0);
   if (!($tobool)) {
    $call9 = (__ZNSt3__211char_traitsIcE3eofEv()|0);
    $retval = $call9;
    $77 = $retval;
    STACKTOP = sp;return ($77|0);
   }
   $this$addr$i66 = $this1;
   $this1$i67 = $this$addr$i66;
   $__nout_$i68 = ((($this1$i67)) + 24|0);
   $6 = HEAP32[$__nout_$i68>>2]|0;
   $this$addr$i82 = $this1;
   $this1$i83 = $this$addr$i82;
   $__bout_$i = ((($this1$i83)) + 20|0);
   $7 = HEAP32[$__bout_$i>>2]|0;
   $sub$ptr$lhs$cast13 = $6;
   $sub$ptr$rhs$cast14 = $7;
   $sub$ptr$sub15 = (($sub$ptr$lhs$cast13) - ($sub$ptr$rhs$cast14))|0;
   $__nout = $sub$ptr$sub15;
   $__hm_ = ((($this1)) + 44|0);
   $8 = HEAP32[$__hm_>>2]|0;
   $this$addr$i151 = $this1;
   $this1$i152 = $this$addr$i151;
   $__bout_$i153 = ((($this1$i152)) + 20|0);
   $9 = HEAP32[$__bout_$i153>>2]|0;
   $sub$ptr$lhs$cast18 = $8;
   $sub$ptr$rhs$cast19 = $9;
   $sub$ptr$sub20 = (($sub$ptr$lhs$cast18) - ($sub$ptr$rhs$cast19))|0;
   $__hm = $sub$ptr$sub20;
   $__str_ = ((($this1)) + 32|0);
   __THREW__ = 0;
   invoke_vii(376,($__str_|0),0);
   $10 = __THREW__; __THREW__ = 0;
   $11 = $10&1;
   if (!($11)) {
    $__str_22 = ((($this1)) + 32|0);
    $__str_23 = ((($this1)) + 32|0);
    $this$addr$i157 = $__str_23;
    $this1$i158 = $this$addr$i157;
    $this$addr$i$i156 = $this1$i158;
    $this1$i$i159 = $this$addr$i$i156;
    $this$addr$i$i$i155 = $this1$i$i159;
    $this1$i$i$i161 = $this$addr$i$i$i155;
    $this$addr$i$i$i$i154 = $this1$i$i$i161;
    $this1$i$i$i$i162 = $this$addr$i$i$i$i154;
    $12 = ((($this1$i$i$i$i162)) + 11|0);
    $13 = HEAP8[$12>>0]|0;
    $conv$i$i166 = $13&255;
    $and$i$i167 = $conv$i$i166 & 128;
    $tobool$i$i168 = ($and$i$i167|0)!=(0);
    if ($tobool$i$i168) {
     $this$addr$i5$i = $this1$i158;
     $this1$i6$i = $this$addr$i5$i;
     $this$addr$i$i4$i = $this1$i6$i;
     $this1$i$i8$i = $this$addr$i$i4$i;
     $this$addr$i$i$i3$i = $this1$i$i8$i;
     $this1$i$i$i9$i = $this$addr$i$i$i3$i;
     $__cap_$i$i = ((($this1$i$i$i9$i)) + 8|0);
     $14 = HEAP32[$__cap_$i$i>>2]|0;
     $and$i11$i = $14 & 2147483647;
     $cond$i172 = $and$i11$i;
    } else {
     $cond$i172 = 11;
    }
    $sub$i = (($cond$i172) - 1)|0;
    $this$addr$i148 = $__str_22;
    $__n$addr$i149 = $sub$i;
    $this1$i150 = $this$addr$i148;
    $15 = $__n$addr$i149;
    __THREW__ = 0;
    invoke_viii(377,($this1$i150|0),($15|0),0);
    $16 = __THREW__; __THREW__ = 0;
    $17 = $16&1;
    if (!($17)) {
     $__str_26 = ((($this1)) + 32|0);
     $this$addr$i116 = $__str_26;
     $this1$i117 = $this$addr$i116;
     $this$addr$i$i115 = $this1$i117;
     $this1$i$i118 = $this$addr$i$i115;
     $this$addr$i$i$i114 = $this1$i$i118;
     $this1$i$i$i119 = $this$addr$i$i$i114;
     $this$addr$i$i$i$i113 = $this1$i$i$i119;
     $this1$i$i$i$i121 = $this$addr$i$i$i$i113;
     $this$addr$i$i$i$i$i112 = $this1$i$i$i$i121;
     $this1$i$i$i$i$i122 = $this$addr$i$i$i$i$i112;
     $18 = ((($this1$i$i$i$i$i122)) + 11|0);
     $19 = HEAP8[$18>>0]|0;
     $conv$i$i$i126 = $19&255;
     $and$i$i$i127 = $conv$i$i$i126 & 128;
     $tobool$i$i$i128 = ($and$i$i$i127|0)!=(0);
     if ($tobool$i$i$i128) {
      $this$addr$i15$i$i106 = $this1$i$i118;
      $this1$i16$i$i129 = $this$addr$i15$i$i106;
      $this$addr$i$i14$i$i105 = $this1$i16$i$i129;
      $this1$i$i18$i$i131 = $this$addr$i$i14$i$i105;
      $this$addr$i$i$i13$i$i104 = $this1$i$i18$i$i131;
      $this1$i$i$i19$i$i132 = $this$addr$i$i$i13$i$i104;
      $20 = HEAP32[$this1$i$i$i19$i$i132>>2]|0;
      $cond$i$i146 = $20;
     } else {
      $this$addr$i6$i$i111 = $this1$i$i118;
      $this1$i7$i$i137 = $this$addr$i6$i$i111;
      $this$addr$i$i5$i$i110 = $this1$i7$i$i137;
      $this1$i$i9$i$i139 = $this$addr$i$i5$i$i110;
      $this$addr$i$i$i4$i$i109 = $this1$i$i9$i$i139;
      $this1$i$i$i10$i$i140 = $this$addr$i$i$i4$i$i109;
      $__r$addr$i$i$i$i108 = $this1$i$i$i10$i$i140;
      $21 = $__r$addr$i$i$i$i108;
      $__x$addr$i$i$i$i$i107 = $21;
      $22 = $__x$addr$i$i$i$i$i107;
      $cond$i$i146 = $22;
     }
     $__p$addr$i$i103 = $cond$i$i146;
     $23 = $__p$addr$i$i103;
     $__p = $23;
     $24 = $__p;
     $25 = $__p;
     $__str_28 = ((($this1)) + 32|0);
     $this$addr$i98 = $__str_28;
     $this1$i99 = $this$addr$i98;
     $this$addr$i$i97 = $this1$i99;
     $this1$i$i100 = $this$addr$i$i97;
     $this$addr$i$i$i96 = $this1$i$i100;
     $this1$i$i$i101 = $this$addr$i$i$i96;
     $this$addr$i$i$i$i95 = $this1$i$i$i101;
     $this1$i$i$i$i102 = $this$addr$i$i$i$i95;
     $26 = ((($this1$i$i$i$i102)) + 11|0);
     $27 = HEAP8[$26>>0]|0;
     $conv$i$i = $27&255;
     $and$i$i = $conv$i$i & 128;
     $tobool$i$i = ($and$i$i|0)!=(0);
     if ($tobool$i$i) {
      $this$addr$i17$i = $this1$i99;
      $this1$i18$i = $this$addr$i17$i;
      $this$addr$i$i16$i = $this1$i18$i;
      $this1$i$i20$i = $this$addr$i$i16$i;
      $this$addr$i$i$i15$i = $this1$i$i20$i;
      $this1$i$i$i21$i = $this$addr$i$i$i15$i;
      $__size_$i23$i = ((($this1$i$i$i21$i)) + 4|0);
      $28 = HEAP32[$__size_$i23$i>>2]|0;
      $cond$i = $28;
     } else {
      $this$addr$i6$i = $this1$i99;
      $this1$i7$i = $this$addr$i6$i;
      $this$addr$i$i5$i = $this1$i7$i;
      $this1$i$i9$i = $this$addr$i$i5$i;
      $this$addr$i$i$i4$i = $this1$i$i9$i;
      $this1$i$i$i10$i = $this$addr$i$i$i4$i;
      $29 = ((($this1$i$i$i10$i)) + 11|0);
      $30 = HEAP8[$29>>0]|0;
      $conv$i14$i = $30&255;
      $cond$i = $conv$i14$i;
     }
     $add$ptr = (($25) + ($cond$i)|0);
     $this$addr$i90 = $this1;
     $__pbeg$addr$i = $24;
     $__pend$addr$i = $add$ptr;
     $this1$i91 = $this$addr$i90;
     $31 = $__pbeg$addr$i;
     $__nout_$i92 = ((($this1$i91)) + 24|0);
     HEAP32[$__nout_$i92>>2] = $31;
     $__bout_$i93 = ((($this1$i91)) + 20|0);
     HEAP32[$__bout_$i93>>2] = $31;
     $32 = $__pend$addr$i;
     $__eout_$i94 = ((($this1$i91)) + 28|0);
     HEAP32[$__eout_$i94>>2] = $32;
     $33 = $__nout;
     $this$addr$i87 = $this1;
     $__n$addr$i = $33;
     $this1$i88 = $this$addr$i87;
     $34 = $__n$addr$i;
     $__nout_$i89 = ((($this1$i88)) + 24|0);
     $35 = HEAP32[$__nout_$i89>>2]|0;
     $add$ptr$i = (($35) + ($34)|0);
     HEAP32[$__nout_$i89>>2] = $add$ptr$i;
     $this$addr$i84 = $this1;
     $this1$i85 = $this$addr$i84;
     $__bout_$i86 = ((($this1$i85)) + 20|0);
     $36 = HEAP32[$__bout_$i86>>2]|0;
     $37 = $__hm;
     $add$ptr34 = (($36) + ($37)|0);
     $__hm_35 = ((($this1)) + 44|0);
     HEAP32[$__hm_35>>2] = $add$ptr34;
     break;
    }
   }
   $38 = ___cxa_find_matching_catch_3(0|0)|0;
   $39 = tempRet0;
   $exn$slot = $38;
   $ehselector$slot = $39;
   $exn = $exn$slot;
   (___cxa_begin_catch(($exn|0))|0);
   $call36 = (__ZNSt3__211char_traitsIcE3eofEv()|0);
   $retval = $call36;
   ___cxa_end_catch();
   $77 = $retval;
   STACKTOP = sp;return ($77|0);
  }
 } while(0);
 $this$addr$i79 = $this1;
 $this1$i80 = $this$addr$i79;
 $__nout_$i81 = ((($this1$i80)) + 24|0);
 $40 = HEAP32[$__nout_$i81>>2]|0;
 $add$ptr39 = ((($40)) + 1|0);
 HEAP32[$ref$tmp>>2] = $add$ptr39;
 $__hm_40 = ((($this1)) + 44|0);
 $__a$addr$i = $ref$tmp;
 $__b$addr$i = $__hm_40;
 $41 = $__a$addr$i;
 $42 = $__b$addr$i;
 ;HEAP8[$agg$tmp1$i>>0]=HEAP8[$agg$tmp$i>>0]|0;
 $__a$addr$i$i = $41;
 $__b$addr$i$i = $42;
 $43 = $__a$addr$i$i;
 $44 = $__b$addr$i$i;
 $this$addr$i$i$i75 = $agg$tmp1$i;
 $__x$addr$i$i$i = $43;
 $__y$addr$i$i$i = $44;
 $45 = $__x$addr$i$i$i;
 $46 = HEAP32[$45>>2]|0;
 $47 = $__y$addr$i$i$i;
 $48 = HEAP32[$47>>2]|0;
 $cmp$i$i$i = ($46>>>0)<($48>>>0);
 $49 = $__b$addr$i$i;
 $50 = $__a$addr$i$i;
 $cond$lvalue$i$i2D = $cmp$i$i$i ? $49 : $50;
 $51 = HEAP32[$cond$lvalue$i$i2D>>2]|0;
 $__hm_42 = ((($this1)) + 44|0);
 HEAP32[$__hm_42>>2] = $51;
 $__mode_43 = ((($this1)) + 48|0);
 $52 = HEAP32[$__mode_43>>2]|0;
 $and44 = $52 & 8;
 $tobool45 = ($and44|0)!=(0);
 if ($tobool45) {
  $__str_48 = ((($this1)) + 32|0);
  $this$addr$i73 = $__str_48;
  $this1$i74 = $this$addr$i73;
  $this$addr$i$i = $this1$i74;
  $this1$i$i = $this$addr$i$i;
  $this$addr$i$i$i = $this1$i$i;
  $this1$i$i$i = $this$addr$i$i$i;
  $this$addr$i$i$i$i = $this1$i$i$i;
  $this1$i$i$i$i = $this$addr$i$i$i$i;
  $this$addr$i$i$i$i$i = $this1$i$i$i$i;
  $this1$i$i$i$i$i = $this$addr$i$i$i$i$i;
  $53 = ((($this1$i$i$i$i$i)) + 11|0);
  $54 = HEAP8[$53>>0]|0;
  $conv$i$i$i = $54&255;
  $and$i$i$i = $conv$i$i$i & 128;
  $tobool$i$i$i = ($and$i$i$i|0)!=(0);
  if ($tobool$i$i$i) {
   $this$addr$i15$i$i = $this1$i$i;
   $this1$i16$i$i = $this$addr$i15$i$i;
   $this$addr$i$i14$i$i = $this1$i16$i$i;
   $this1$i$i18$i$i = $this$addr$i$i14$i$i;
   $this$addr$i$i$i13$i$i = $this1$i$i18$i$i;
   $this1$i$i$i19$i$i = $this$addr$i$i$i13$i$i;
   $55 = HEAP32[$this1$i$i$i19$i$i>>2]|0;
   $cond$i$i = $55;
  } else {
   $this$addr$i6$i$i = $this1$i$i;
   $this1$i7$i$i = $this$addr$i6$i$i;
   $this$addr$i$i5$i$i = $this1$i7$i$i;
   $this1$i$i9$i$i = $this$addr$i$i5$i$i;
   $this$addr$i$i$i4$i$i = $this1$i$i9$i$i;
   $this1$i$i$i10$i$i = $this$addr$i$i$i4$i$i;
   $__r$addr$i$i$i$i = $this1$i$i$i10$i$i;
   $56 = $__r$addr$i$i$i$i;
   $__x$addr$i$i$i$i$i = $56;
   $57 = $__x$addr$i$i$i$i$i;
   $cond$i$i = $57;
  }
  $__p$addr$i$i = $cond$i$i;
  $58 = $__p$addr$i$i;
  $__p47 = $58;
  $59 = $__p47;
  $60 = $__p47;
  $61 = $__ninp;
  $add$ptr50 = (($60) + ($61)|0);
  $__hm_51 = ((($this1)) + 44|0);
  $62 = HEAP32[$__hm_51>>2]|0;
  $this$addr$i69 = $this1;
  $__gbeg$addr$i = $59;
  $__gnext$addr$i = $add$ptr50;
  $__gend$addr$i = $62;
  $this1$i70 = $this$addr$i69;
  $63 = $__gbeg$addr$i;
  $__binp_$i71 = ((($this1$i70)) + 8|0);
  HEAP32[$__binp_$i71>>2] = $63;
  $64 = $__gnext$addr$i;
  $__ninp_$i72 = ((($this1$i70)) + 12|0);
  HEAP32[$__ninp_$i72>>2] = $64;
  $65 = $__gend$addr$i;
  $__einp_$i = ((($this1$i70)) + 16|0);
  HEAP32[$__einp_$i>>2] = $65;
 }
 $66 = $__c$addr;
 $conv = $66&255;
 $this$addr$i58 = $this1;
 $__c$addr$i = $conv;
 $this1$i59 = $this$addr$i58;
 $__nout_$i = ((($this1$i59)) + 24|0);
 $67 = HEAP32[$__nout_$i>>2]|0;
 $__eout_$i = ((($this1$i59)) + 28|0);
 $68 = HEAP32[$__eout_$i>>2]|0;
 $cmp$i = ($67|0)==($68|0);
 if ($cmp$i) {
  $vtable$i = HEAP32[$this1$i59>>2]|0;
  $69 = ((($vtable$i)) + 52|0);
  $70 = HEAP32[$69>>2]|0;
  $71 = $__c$addr$i;
  $call$i = (__ZNSt3__211char_traitsIcE11to_int_typeEc($71)|0);
  $call2$i = (FUNCTION_TABLE_iii[$70 & 511]($this1$i59,$call$i)|0);
  $retval$i = $call2$i;
 } else {
  $72 = $__c$addr$i;
  $__nout_3$i = ((($this1$i59)) + 24|0);
  $73 = HEAP32[$__nout_3$i>>2]|0;
  $incdec$ptr$i = ((($73)) + 1|0);
  HEAP32[$__nout_3$i>>2] = $incdec$ptr$i;
  HEAP8[$73>>0] = $72;
  $74 = $__c$addr$i;
  $call4$i = (__ZNSt3__211char_traitsIcE11to_int_typeEc($74)|0);
  $retval$i = $call4$i;
 }
 $75 = $retval$i;
 $retval = $75;
 $77 = $retval;
 STACKTOP = sp;return ($77|0);
}
function __ZNSt3__211char_traitsIcE11to_int_typeEc($__c) {
 $__c = $__c|0;
 var $0 = 0, $__c$addr = 0, $conv = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $__c$addr = $__c;
 $0 = $__c$addr;
 $conv = $0&255;
 STACKTOP = sp;return ($conv|0);
}
function __ZNSt3__211char_traitsIcE3eofEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return -1;
}
function __ZNSt3__211char_traitsIcE11eq_int_typeEii($__c1,$__c2) {
 $__c1 = $__c1|0;
 $__c2 = $__c2|0;
 var $0 = 0, $1 = 0, $__c1$addr = 0, $__c2$addr = 0, $cmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $__c1$addr = $__c1;
 $__c2$addr = $__c2;
 $0 = $__c1$addr;
 $1 = $__c2$addr;
 $cmp = ($0|0)==($1|0);
 STACKTOP = sp;return ($cmp|0);
}
function __ZNSt3__211char_traitsIcE7not_eofEi($__c) {
 $__c = $__c|0;
 var $0 = 0, $1 = 0, $__c$addr = 0, $call = 0, $call1 = 0, $call2 = 0, $cond = 0, $neg = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $__c$addr = $__c;
 $0 = $__c$addr;
 $call = (__ZNSt3__211char_traitsIcE3eofEv()|0);
 $call1 = (__ZNSt3__211char_traitsIcE11eq_int_typeEii($0,$call)|0);
 if ($call1) {
  $call2 = (__ZNSt3__211char_traitsIcE3eofEv()|0);
  $neg = $call2 ^ -1;
  $cond = $neg;
  STACKTOP = sp;return ($cond|0);
 } else {
  $1 = $__c$addr;
  $cond = $1;
  STACKTOP = sp;return ($cond|0);
 }
 return (0)|0;
}
function __ZNSt3__211char_traitsIcE2eqEcc($__c1,$__c2) {
 $__c1 = $__c1|0;
 $__c2 = $__c2|0;
 var $0 = 0, $1 = 0, $__c1$addr = 0, $__c2$addr = 0, $cmp = 0, $conv = 0, $conv1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $__c1$addr = $__c1;
 $__c2$addr = $__c2;
 $0 = $__c1$addr;
 $conv = $0 << 24 >> 24;
 $1 = $__c2$addr;
 $conv1 = $1 << 24 >> 24;
 $cmp = ($conv|0)==($conv1|0);
 STACKTOP = sp;return ($cmp|0);
}
function __ZNSt3__211char_traitsIcE12to_char_typeEi($__c) {
 $__c = $__c|0;
 var $0 = 0, $__c$addr = 0, $conv = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $__c$addr = $__c;
 $0 = $__c$addr;
 $conv = $0&255;
 STACKTOP = sp;return ($conv|0);
}
function __ZN6Socket7AddressC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $__a$i$i = 0, $__i$i$i = 0, $arrayidx$i$i = 0, $cmp$i$i = 0, $inc$i$i = 0, $this$addr = 0, $this$addr$i = 0, $this$addr$i$i = 0, $this$addr$i$i$i = 0, $this$addr$i$i$i$i = 0, $this$addr$i$i$i2$i = 0, $this$addr$i$i3$i = 0, $this$addr$i4$i = 0, $this1 = 0, $this1$i = 0, $this1$i$i = 0;
 var $this1$i$i$i = 0, $this1$i$i$i7$i = 0, $this1$i$i6$i = 0, $this1$i5$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $this$addr = $this;
 $this1 = $this$addr;
 $this$addr$i = $this1;
 $this1$i = $this$addr$i;
 $this$addr$i$i = $this1$i;
 $this1$i$i = $this$addr$i$i;
 $this$addr$i$i$i = $this1$i$i;
 $this1$i$i$i = $this$addr$i$i$i;
 $this$addr$i$i$i$i = $this1$i$i$i;
 ;HEAP32[$this1$i$i$i>>2]=0|0;HEAP32[$this1$i$i$i+4>>2]=0|0;HEAP32[$this1$i$i$i+8>>2]=0|0;
 $this$addr$i4$i = $this1$i;
 $this1$i5$i = $this$addr$i4$i;
 $this$addr$i$i3$i = $this1$i5$i;
 $this1$i$i6$i = $this$addr$i$i3$i;
 $this$addr$i$i$i2$i = $this1$i$i6$i;
 $this1$i$i$i7$i = $this$addr$i$i$i2$i;
 $__a$i$i = $this1$i$i$i7$i;
 $__i$i$i = 0;
 while(1) {
  $0 = $__i$i$i;
  $cmp$i$i = ($0>>>0)<(3);
  if (!($cmp$i$i)) {
   break;
  }
  $1 = $__a$i$i;
  $2 = $__i$i$i;
  $arrayidx$i$i = (($1) + ($2<<2)|0);
  HEAP32[$arrayidx$i$i>>2] = 0;
  $3 = $__i$i$i;
  $inc$i$i = (($3) + 1)|0;
  $__i$i$i = $inc$i$i;
 }
 STACKTOP = sp;return;
}
function __ZN6Socket7AddressD2Ev($this) {
 $this = $this|0;
 var $this$addr = 0, $this1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $this$addr = $this;
 $this1 = $this$addr;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($this1);
 STACKTOP = sp;return;
}
function __ZNSt3__211char_traitsIcE6lengthEPKc($__s) {
 $__s = $__s|0;
 var $0 = 0, $__s$addr = 0, $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $__s$addr = $__s;
 $0 = $__s$addr;
 $call = (_strlen($0)|0);
 STACKTOP = sp;return ($call|0);
}
function __ZNSt3__215basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEE3strERKNS_12basic_stringIcS2_S4_EE($this,$__s) {
 $this = $this|0;
 $__s = $__s|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $7 = 0, $8 = 0, $9 = 0, $__binp_$i = 0, $__bout_$i = 0, $__cap_$i$i = 0, $__einp_$i = 0, $__eout_$i = 0, $__gbeg$addr$i = 0, $__gend$addr$i = 0, $__gnext$addr$i = 0, $__hm_ = 0, $__hm_11 = 0, $__hm_21 = 0;
 var $__hm_6 = 0, $__mode_ = 0, $__mode_12 = 0, $__mode_32 = 0, $__n$addr$i = 0, $__n$addr$i142 = 0, $__ninp_$i = 0, $__nout_$i = 0, $__nout_$i42 = 0, $__p$addr$i$i = 0, $__p$addr$i$i203 = 0, $__p$addr$i$i290 = 0, $__p$addr$i$i335 = 0, $__p$addr$i$i51 = 0, $__p$addr$i$i96 = 0, $__pbeg$addr$i = 0, $__pend$addr$i = 0, $__r$addr$i$i$i$i = 0, $__r$addr$i$i$i$i101 = 0, $__r$addr$i$i$i$i208 = 0;
 var $__r$addr$i$i$i$i295 = 0, $__r$addr$i$i$i$i340 = 0, $__r$addr$i$i$i$i56 = 0, $__s$addr = 0, $__size_$i23$i = 0, $__size_$i23$i171 = 0, $__size_$i23$i275 = 0, $__str_ = 0, $__str_16 = 0, $__str_18 = 0, $__str_2 = 0, $__str_22 = 0, $__str_23 = 0, $__str_25 = 0, $__str_27 = 0, $__str_29 = 0, $__str_4 = 0, $__str_7 = 0, $__str_9 = 0, $__sz = 0;
 var $__x$addr$i$i$i$i$i = 0, $__x$addr$i$i$i$i$i100 = 0, $__x$addr$i$i$i$i$i207 = 0, $__x$addr$i$i$i$i$i294 = 0, $__x$addr$i$i$i$i$i339 = 0, $__x$addr$i$i$i$i$i55 = 0, $add$ptr = 0, $add$ptr$i = 0, $add$ptr20 = 0, $add$ptr31 = 0, $and = 0, $and$i$i = 0, $and$i$i$i = 0, $and$i$i$i120 = 0, $and$i$i$i227 = 0, $and$i$i$i314 = 0, $and$i$i$i359 = 0, $and$i$i$i75 = 0, $and$i$i163 = 0, $and$i$i197 = 0;
 var $and$i$i267 = 0, $and$i11$i = 0, $and13 = 0, $and33 = 0, $cond$i = 0, $cond$i$i = 0, $cond$i$i139 = 0, $cond$i$i246 = 0, $cond$i$i333 = 0, $cond$i$i378 = 0, $cond$i$i94 = 0, $cond$i182 = 0, $cond$i202 = 0, $cond$i286 = 0, $conv$i$i = 0, $conv$i$i$i = 0, $conv$i$i$i119 = 0, $conv$i$i$i226 = 0, $conv$i$i$i313 = 0, $conv$i$i$i358 = 0;
 var $conv$i$i$i74 = 0, $conv$i$i162 = 0, $conv$i$i196 = 0, $conv$i$i266 = 0, $conv$i14$i = 0, $conv$i14$i180 = 0, $conv$i14$i284 = 0, $sub$i = 0, $this$addr = 0, $this$addr$i = 0, $this$addr$i$i = 0, $this$addr$i$i$i = 0, $this$addr$i$i$i$i = 0, $this$addr$i$i$i$i$i = 0, $this$addr$i$i$i$i$i105 = 0, $this$addr$i$i$i$i$i212 = 0, $this$addr$i$i$i$i$i299 = 0, $this$addr$i$i$i$i$i344 = 0, $this$addr$i$i$i$i$i60 = 0, $this$addr$i$i$i$i106 = 0;
 var $this$addr$i$i$i$i150 = 0, $this$addr$i$i$i$i184 = 0, $this$addr$i$i$i$i213 = 0, $this$addr$i$i$i$i254 = 0, $this$addr$i$i$i$i300 = 0, $this$addr$i$i$i$i345 = 0, $this$addr$i$i$i$i43 = 0, $this$addr$i$i$i$i61 = 0, $this$addr$i$i$i107 = 0, $this$addr$i$i$i13$i$i = 0, $this$addr$i$i$i13$i$i204 = 0, $this$addr$i$i$i13$i$i291 = 0, $this$addr$i$i$i13$i$i336 = 0, $this$addr$i$i$i13$i$i52 = 0, $this$addr$i$i$i13$i$i97 = 0, $this$addr$i$i$i15$i = 0, $this$addr$i$i$i15$i144 = 0, $this$addr$i$i$i15$i248 = 0, $this$addr$i$i$i151 = 0, $this$addr$i$i$i185 = 0;
 var $this$addr$i$i$i214 = 0, $this$addr$i$i$i255 = 0, $this$addr$i$i$i3$i = 0, $this$addr$i$i$i301 = 0, $this$addr$i$i$i346 = 0, $this$addr$i$i$i4$i = 0, $this$addr$i$i$i4$i$i = 0, $this$addr$i$i$i4$i$i102 = 0, $this$addr$i$i$i4$i$i209 = 0, $this$addr$i$i$i4$i$i296 = 0, $this$addr$i$i$i4$i$i341 = 0, $this$addr$i$i$i4$i$i57 = 0, $this$addr$i$i$i4$i147 = 0, $this$addr$i$i$i4$i251 = 0, $this$addr$i$i$i44 = 0, $this$addr$i$i$i62 = 0, $this$addr$i$i108 = 0, $this$addr$i$i14$i$i = 0, $this$addr$i$i14$i$i205 = 0, $this$addr$i$i14$i$i292 = 0;
 var $this$addr$i$i14$i$i337 = 0, $this$addr$i$i14$i$i53 = 0, $this$addr$i$i14$i$i98 = 0, $this$addr$i$i152 = 0, $this$addr$i$i16$i = 0, $this$addr$i$i16$i145 = 0, $this$addr$i$i16$i249 = 0, $this$addr$i$i186 = 0, $this$addr$i$i215 = 0, $this$addr$i$i256 = 0, $this$addr$i$i302 = 0, $this$addr$i$i347 = 0, $this$addr$i$i4$i = 0, $this$addr$i$i45 = 0, $this$addr$i$i5$i = 0, $this$addr$i$i5$i$i = 0, $this$addr$i$i5$i$i103 = 0, $this$addr$i$i5$i$i210 = 0, $this$addr$i$i5$i$i297 = 0, $this$addr$i$i5$i$i342 = 0;
 var $this$addr$i$i5$i$i58 = 0, $this$addr$i$i5$i148 = 0, $this$addr$i$i5$i252 = 0, $this$addr$i$i63 = 0, $this$addr$i109 = 0, $this$addr$i141 = 0, $this$addr$i15$i$i = 0, $this$addr$i15$i$i206 = 0, $this$addr$i15$i$i293 = 0, $this$addr$i15$i$i338 = 0, $this$addr$i15$i$i54 = 0, $this$addr$i15$i$i99 = 0, $this$addr$i153 = 0, $this$addr$i17$i = 0, $this$addr$i17$i146 = 0, $this$addr$i17$i250 = 0, $this$addr$i187 = 0, $this$addr$i216 = 0, $this$addr$i257 = 0, $this$addr$i288 = 0;
 var $this$addr$i303 = 0, $this$addr$i348 = 0, $this$addr$i38 = 0, $this$addr$i40 = 0, $this$addr$i46 = 0, $this$addr$i5$i = 0, $this$addr$i6$i = 0, $this$addr$i6$i$i = 0, $this$addr$i6$i$i104 = 0, $this$addr$i6$i$i211 = 0, $this$addr$i6$i$i298 = 0, $this$addr$i6$i$i343 = 0, $this$addr$i6$i$i59 = 0, $this$addr$i6$i149 = 0, $this$addr$i6$i253 = 0, $this$addr$i64 = 0, $this1 = 0, $this1$i = 0, $this1$i$i = 0, $this1$i$i$i = 0;
 var $this1$i$i$i$i = 0, $this1$i$i$i$i$i = 0, $this1$i$i$i$i$i115 = 0, $this1$i$i$i$i$i222 = 0, $this1$i$i$i$i$i309 = 0, $this1$i$i$i$i$i354 = 0, $this1$i$i$i$i$i70 = 0, $this1$i$i$i$i114 = 0, $this1$i$i$i$i158 = 0, $this1$i$i$i$i192 = 0, $this1$i$i$i$i221 = 0, $this1$i$i$i$i262 = 0, $this1$i$i$i$i308 = 0, $this1$i$i$i$i353 = 0, $this1$i$i$i$i50 = 0, $this1$i$i$i$i69 = 0, $this1$i$i$i10$i = 0, $this1$i$i$i10$i$i = 0, $this1$i$i$i10$i$i133 = 0, $this1$i$i$i10$i$i240 = 0;
 var $this1$i$i$i10$i$i327 = 0, $this1$i$i$i10$i$i372 = 0, $this1$i$i$i10$i$i88 = 0, $this1$i$i$i10$i176 = 0, $this1$i$i$i10$i280 = 0, $this1$i$i$i112 = 0, $this1$i$i$i157 = 0, $this1$i$i$i19$i$i = 0, $this1$i$i$i19$i$i125 = 0, $this1$i$i$i19$i$i232 = 0, $this1$i$i$i19$i$i319 = 0, $this1$i$i$i19$i$i364 = 0, $this1$i$i$i19$i$i80 = 0, $this1$i$i$i191 = 0, $this1$i$i$i21$i = 0, $this1$i$i$i21$i168 = 0, $this1$i$i$i21$i272 = 0, $this1$i$i$i219 = 0, $this1$i$i$i261 = 0, $this1$i$i$i306 = 0;
 var $this1$i$i$i351 = 0, $this1$i$i$i49 = 0, $this1$i$i$i67 = 0, $this1$i$i$i9$i = 0, $this1$i$i111 = 0, $this1$i$i155 = 0, $this1$i$i18$i$i = 0, $this1$i$i18$i$i124 = 0, $this1$i$i18$i$i231 = 0, $this1$i$i18$i$i318 = 0, $this1$i$i18$i$i363 = 0, $this1$i$i18$i$i79 = 0, $this1$i$i189 = 0, $this1$i$i20$i = 0, $this1$i$i20$i167 = 0, $this1$i$i20$i271 = 0, $this1$i$i218 = 0, $this1$i$i259 = 0, $this1$i$i305 = 0, $this1$i$i350 = 0;
 var $this1$i$i48 = 0, $this1$i$i66 = 0, $this1$i$i8$i = 0, $this1$i$i9$i = 0, $this1$i$i9$i$i = 0, $this1$i$i9$i$i132 = 0, $this1$i$i9$i$i239 = 0, $this1$i$i9$i$i326 = 0, $this1$i$i9$i$i371 = 0, $this1$i$i9$i$i87 = 0, $this1$i$i9$i175 = 0, $this1$i$i9$i279 = 0, $this1$i110 = 0, $this1$i143 = 0, $this1$i154 = 0, $this1$i16$i$i = 0, $this1$i16$i$i122 = 0, $this1$i16$i$i229 = 0, $this1$i16$i$i316 = 0, $this1$i16$i$i361 = 0;
 var $this1$i16$i$i77 = 0, $this1$i18$i = 0, $this1$i18$i165 = 0, $this1$i18$i269 = 0, $this1$i188 = 0, $this1$i217 = 0, $this1$i258 = 0, $this1$i289 = 0, $this1$i304 = 0, $this1$i349 = 0, $this1$i39 = 0, $this1$i41 = 0, $this1$i47 = 0, $this1$i6$i = 0, $this1$i65 = 0, $this1$i7$i = 0, $this1$i7$i$i = 0, $this1$i7$i$i130 = 0, $this1$i7$i$i237 = 0, $this1$i7$i$i324 = 0;
 var $this1$i7$i$i369 = 0, $this1$i7$i$i85 = 0, $this1$i7$i173 = 0, $this1$i7$i277 = 0, $tobool = 0, $tobool$i$i = 0, $tobool$i$i$i = 0, $tobool$i$i$i121 = 0, $tobool$i$i$i228 = 0, $tobool$i$i$i315 = 0, $tobool$i$i$i360 = 0, $tobool$i$i$i76 = 0, $tobool$i$i164 = 0, $tobool$i$i198 = 0, $tobool$i$i268 = 0, $tobool14 = 0, $tobool34 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 544|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(544|0);
 $this$addr = $this;
 $__s$addr = $__s;
 $this1 = $this$addr;
 $0 = $__s$addr;
 $__str_ = ((($this1)) + 32|0);
 (__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEaSERKS5_($__str_,$0)|0);
 $__hm_ = ((($this1)) + 44|0);
 HEAP32[$__hm_>>2] = 0;
 $__mode_ = ((($this1)) + 48|0);
 $1 = HEAP32[$__mode_>>2]|0;
 $and = $1 & 8;
 $tobool = ($and|0)!=(0);
 if ($tobool) {
  $__str_2 = ((($this1)) + 32|0);
  $this$addr$i = $__str_2;
  $this1$i = $this$addr$i;
  $this$addr$i$i = $this1$i;
  $this1$i$i = $this$addr$i$i;
  $this$addr$i$i$i = $this1$i$i;
  $this1$i$i$i = $this$addr$i$i$i;
  $this$addr$i$i$i$i = $this1$i$i$i;
  $this1$i$i$i$i = $this$addr$i$i$i$i;
  $this$addr$i$i$i$i$i = $this1$i$i$i$i;
  $this1$i$i$i$i$i = $this$addr$i$i$i$i$i;
  $2 = ((($this1$i$i$i$i$i)) + 11|0);
  $3 = HEAP8[$2>>0]|0;
  $conv$i$i$i = $3&255;
  $and$i$i$i = $conv$i$i$i & 128;
  $tobool$i$i$i = ($and$i$i$i|0)!=(0);
  if ($tobool$i$i$i) {
   $this$addr$i15$i$i = $this1$i$i;
   $this1$i16$i$i = $this$addr$i15$i$i;
   $this$addr$i$i14$i$i = $this1$i16$i$i;
   $this1$i$i18$i$i = $this$addr$i$i14$i$i;
   $this$addr$i$i$i13$i$i = $this1$i$i18$i$i;
   $this1$i$i$i19$i$i = $this$addr$i$i$i13$i$i;
   $4 = HEAP32[$this1$i$i$i19$i$i>>2]|0;
   $cond$i$i = $4;
  } else {
   $this$addr$i6$i$i = $this1$i$i;
   $this1$i7$i$i = $this$addr$i6$i$i;
   $this$addr$i$i5$i$i = $this1$i7$i$i;
   $this1$i$i9$i$i = $this$addr$i$i5$i$i;
   $this$addr$i$i$i4$i$i = $this1$i$i9$i$i;
   $this1$i$i$i10$i$i = $this$addr$i$i$i4$i$i;
   $__r$addr$i$i$i$i = $this1$i$i$i10$i$i;
   $5 = $__r$addr$i$i$i$i;
   $__x$addr$i$i$i$i$i = $5;
   $6 = $__x$addr$i$i$i$i$i;
   $cond$i$i = $6;
  }
  $__p$addr$i$i = $cond$i$i;
  $7 = $__p$addr$i$i;
  $__str_4 = ((($this1)) + 32|0);
  $this$addr$i153 = $__str_4;
  $this1$i154 = $this$addr$i153;
  $this$addr$i$i152 = $this1$i154;
  $this1$i$i155 = $this$addr$i$i152;
  $this$addr$i$i$i151 = $this1$i$i155;
  $this1$i$i$i157 = $this$addr$i$i$i151;
  $this$addr$i$i$i$i150 = $this1$i$i$i157;
  $this1$i$i$i$i158 = $this$addr$i$i$i$i150;
  $8 = ((($this1$i$i$i$i158)) + 11|0);
  $9 = HEAP8[$8>>0]|0;
  $conv$i$i162 = $9&255;
  $and$i$i163 = $conv$i$i162 & 128;
  $tobool$i$i164 = ($and$i$i163|0)!=(0);
  if ($tobool$i$i164) {
   $this$addr$i17$i146 = $this1$i154;
   $this1$i18$i165 = $this$addr$i17$i146;
   $this$addr$i$i16$i145 = $this1$i18$i165;
   $this1$i$i20$i167 = $this$addr$i$i16$i145;
   $this$addr$i$i$i15$i144 = $this1$i$i20$i167;
   $this1$i$i$i21$i168 = $this$addr$i$i$i15$i144;
   $__size_$i23$i171 = ((($this1$i$i$i21$i168)) + 4|0);
   $10 = HEAP32[$__size_$i23$i171>>2]|0;
   $cond$i182 = $10;
  } else {
   $this$addr$i6$i149 = $this1$i154;
   $this1$i7$i173 = $this$addr$i6$i149;
   $this$addr$i$i5$i148 = $this1$i7$i173;
   $this1$i$i9$i175 = $this$addr$i$i5$i148;
   $this$addr$i$i$i4$i147 = $this1$i$i9$i175;
   $this1$i$i$i10$i176 = $this$addr$i$i$i4$i147;
   $11 = ((($this1$i$i$i10$i176)) + 11|0);
   $12 = HEAP8[$11>>0]|0;
   $conv$i14$i180 = $12&255;
   $cond$i182 = $conv$i14$i180;
  }
  $add$ptr = (($7) + ($cond$i182)|0);
  $__hm_6 = ((($this1)) + 44|0);
  HEAP32[$__hm_6>>2] = $add$ptr;
  $__str_7 = ((($this1)) + 32|0);
  $this$addr$i348 = $__str_7;
  $this1$i349 = $this$addr$i348;
  $this$addr$i$i347 = $this1$i349;
  $this1$i$i350 = $this$addr$i$i347;
  $this$addr$i$i$i346 = $this1$i$i350;
  $this1$i$i$i351 = $this$addr$i$i$i346;
  $this$addr$i$i$i$i345 = $this1$i$i$i351;
  $this1$i$i$i$i353 = $this$addr$i$i$i$i345;
  $this$addr$i$i$i$i$i344 = $this1$i$i$i$i353;
  $this1$i$i$i$i$i354 = $this$addr$i$i$i$i$i344;
  $13 = ((($this1$i$i$i$i$i354)) + 11|0);
  $14 = HEAP8[$13>>0]|0;
  $conv$i$i$i358 = $14&255;
  $and$i$i$i359 = $conv$i$i$i358 & 128;
  $tobool$i$i$i360 = ($and$i$i$i359|0)!=(0);
  if ($tobool$i$i$i360) {
   $this$addr$i15$i$i338 = $this1$i$i350;
   $this1$i16$i$i361 = $this$addr$i15$i$i338;
   $this$addr$i$i14$i$i337 = $this1$i16$i$i361;
   $this1$i$i18$i$i363 = $this$addr$i$i14$i$i337;
   $this$addr$i$i$i13$i$i336 = $this1$i$i18$i$i363;
   $this1$i$i$i19$i$i364 = $this$addr$i$i$i13$i$i336;
   $15 = HEAP32[$this1$i$i$i19$i$i364>>2]|0;
   $cond$i$i378 = $15;
  } else {
   $this$addr$i6$i$i343 = $this1$i$i350;
   $this1$i7$i$i369 = $this$addr$i6$i$i343;
   $this$addr$i$i5$i$i342 = $this1$i7$i$i369;
   $this1$i$i9$i$i371 = $this$addr$i$i5$i$i342;
   $this$addr$i$i$i4$i$i341 = $this1$i$i9$i$i371;
   $this1$i$i$i10$i$i372 = $this$addr$i$i$i4$i$i341;
   $__r$addr$i$i$i$i340 = $this1$i$i$i10$i$i372;
   $16 = $__r$addr$i$i$i$i340;
   $__x$addr$i$i$i$i$i339 = $16;
   $17 = $__x$addr$i$i$i$i$i339;
   $cond$i$i378 = $17;
  }
  $__p$addr$i$i335 = $cond$i$i378;
  $18 = $__p$addr$i$i335;
  $__str_9 = ((($this1)) + 32|0);
  $this$addr$i303 = $__str_9;
  $this1$i304 = $this$addr$i303;
  $this$addr$i$i302 = $this1$i304;
  $this1$i$i305 = $this$addr$i$i302;
  $this$addr$i$i$i301 = $this1$i$i305;
  $this1$i$i$i306 = $this$addr$i$i$i301;
  $this$addr$i$i$i$i300 = $this1$i$i$i306;
  $this1$i$i$i$i308 = $this$addr$i$i$i$i300;
  $this$addr$i$i$i$i$i299 = $this1$i$i$i$i308;
  $this1$i$i$i$i$i309 = $this$addr$i$i$i$i$i299;
  $19 = ((($this1$i$i$i$i$i309)) + 11|0);
  $20 = HEAP8[$19>>0]|0;
  $conv$i$i$i313 = $20&255;
  $and$i$i$i314 = $conv$i$i$i313 & 128;
  $tobool$i$i$i315 = ($and$i$i$i314|0)!=(0);
  if ($tobool$i$i$i315) {
   $this$addr$i15$i$i293 = $this1$i$i305;
   $this1$i16$i$i316 = $this$addr$i15$i$i293;
   $this$addr$i$i14$i$i292 = $this1$i16$i$i316;
   $this1$i$i18$i$i318 = $this$addr$i$i14$i$i292;
   $this$addr$i$i$i13$i$i291 = $this1$i$i18$i$i318;
   $this1$i$i$i19$i$i319 = $this$addr$i$i$i13$i$i291;
   $21 = HEAP32[$this1$i$i$i19$i$i319>>2]|0;
   $cond$i$i333 = $21;
  } else {
   $this$addr$i6$i$i298 = $this1$i$i305;
   $this1$i7$i$i324 = $this$addr$i6$i$i298;
   $this$addr$i$i5$i$i297 = $this1$i7$i$i324;
   $this1$i$i9$i$i326 = $this$addr$i$i5$i$i297;
   $this$addr$i$i$i4$i$i296 = $this1$i$i9$i$i326;
   $this1$i$i$i10$i$i327 = $this$addr$i$i$i4$i$i296;
   $__r$addr$i$i$i$i295 = $this1$i$i$i10$i$i327;
   $22 = $__r$addr$i$i$i$i295;
   $__x$addr$i$i$i$i$i294 = $22;
   $23 = $__x$addr$i$i$i$i$i294;
   $cond$i$i333 = $23;
  }
  $__p$addr$i$i290 = $cond$i$i333;
  $24 = $__p$addr$i$i290;
  $__hm_11 = ((($this1)) + 44|0);
  $25 = HEAP32[$__hm_11>>2]|0;
  $this$addr$i288 = $this1;
  $__gbeg$addr$i = $18;
  $__gnext$addr$i = $24;
  $__gend$addr$i = $25;
  $this1$i289 = $this$addr$i288;
  $26 = $__gbeg$addr$i;
  $__binp_$i = ((($this1$i289)) + 8|0);
  HEAP32[$__binp_$i>>2] = $26;
  $27 = $__gnext$addr$i;
  $__ninp_$i = ((($this1$i289)) + 12|0);
  HEAP32[$__ninp_$i>>2] = $27;
  $28 = $__gend$addr$i;
  $__einp_$i = ((($this1$i289)) + 16|0);
  HEAP32[$__einp_$i>>2] = $28;
 }
 $__mode_12 = ((($this1)) + 48|0);
 $29 = HEAP32[$__mode_12>>2]|0;
 $and13 = $29 & 16;
 $tobool14 = ($and13|0)!=(0);
 if (!($tobool14)) {
  STACKTOP = sp;return;
 }
 $__str_16 = ((($this1)) + 32|0);
 $this$addr$i257 = $__str_16;
 $this1$i258 = $this$addr$i257;
 $this$addr$i$i256 = $this1$i258;
 $this1$i$i259 = $this$addr$i$i256;
 $this$addr$i$i$i255 = $this1$i$i259;
 $this1$i$i$i261 = $this$addr$i$i$i255;
 $this$addr$i$i$i$i254 = $this1$i$i$i261;
 $this1$i$i$i$i262 = $this$addr$i$i$i$i254;
 $30 = ((($this1$i$i$i$i262)) + 11|0);
 $31 = HEAP8[$30>>0]|0;
 $conv$i$i266 = $31&255;
 $and$i$i267 = $conv$i$i266 & 128;
 $tobool$i$i268 = ($and$i$i267|0)!=(0);
 if ($tobool$i$i268) {
  $this$addr$i17$i250 = $this1$i258;
  $this1$i18$i269 = $this$addr$i17$i250;
  $this$addr$i$i16$i249 = $this1$i18$i269;
  $this1$i$i20$i271 = $this$addr$i$i16$i249;
  $this$addr$i$i$i15$i248 = $this1$i$i20$i271;
  $this1$i$i$i21$i272 = $this$addr$i$i$i15$i248;
  $__size_$i23$i275 = ((($this1$i$i$i21$i272)) + 4|0);
  $32 = HEAP32[$__size_$i23$i275>>2]|0;
  $cond$i286 = $32;
 } else {
  $this$addr$i6$i253 = $this1$i258;
  $this1$i7$i277 = $this$addr$i6$i253;
  $this$addr$i$i5$i252 = $this1$i7$i277;
  $this1$i$i9$i279 = $this$addr$i$i5$i252;
  $this$addr$i$i$i4$i251 = $this1$i$i9$i279;
  $this1$i$i$i10$i280 = $this$addr$i$i$i4$i251;
  $33 = ((($this1$i$i$i10$i280)) + 11|0);
  $34 = HEAP8[$33>>0]|0;
  $conv$i14$i284 = $34&255;
  $cond$i286 = $conv$i14$i284;
 }
 $__sz = $cond$i286;
 $__str_18 = ((($this1)) + 32|0);
 $this$addr$i216 = $__str_18;
 $this1$i217 = $this$addr$i216;
 $this$addr$i$i215 = $this1$i217;
 $this1$i$i218 = $this$addr$i$i215;
 $this$addr$i$i$i214 = $this1$i$i218;
 $this1$i$i$i219 = $this$addr$i$i$i214;
 $this$addr$i$i$i$i213 = $this1$i$i$i219;
 $this1$i$i$i$i221 = $this$addr$i$i$i$i213;
 $this$addr$i$i$i$i$i212 = $this1$i$i$i$i221;
 $this1$i$i$i$i$i222 = $this$addr$i$i$i$i$i212;
 $35 = ((($this1$i$i$i$i$i222)) + 11|0);
 $36 = HEAP8[$35>>0]|0;
 $conv$i$i$i226 = $36&255;
 $and$i$i$i227 = $conv$i$i$i226 & 128;
 $tobool$i$i$i228 = ($and$i$i$i227|0)!=(0);
 if ($tobool$i$i$i228) {
  $this$addr$i15$i$i206 = $this1$i$i218;
  $this1$i16$i$i229 = $this$addr$i15$i$i206;
  $this$addr$i$i14$i$i205 = $this1$i16$i$i229;
  $this1$i$i18$i$i231 = $this$addr$i$i14$i$i205;
  $this$addr$i$i$i13$i$i204 = $this1$i$i18$i$i231;
  $this1$i$i$i19$i$i232 = $this$addr$i$i$i13$i$i204;
  $37 = HEAP32[$this1$i$i$i19$i$i232>>2]|0;
  $cond$i$i246 = $37;
 } else {
  $this$addr$i6$i$i211 = $this1$i$i218;
  $this1$i7$i$i237 = $this$addr$i6$i$i211;
  $this$addr$i$i5$i$i210 = $this1$i7$i$i237;
  $this1$i$i9$i$i239 = $this$addr$i$i5$i$i210;
  $this$addr$i$i$i4$i$i209 = $this1$i$i9$i$i239;
  $this1$i$i$i10$i$i240 = $this$addr$i$i$i4$i$i209;
  $__r$addr$i$i$i$i208 = $this1$i$i$i10$i$i240;
  $38 = $__r$addr$i$i$i$i208;
  $__x$addr$i$i$i$i$i207 = $38;
  $39 = $__x$addr$i$i$i$i$i207;
  $cond$i$i246 = $39;
 }
 $__p$addr$i$i203 = $cond$i$i246;
 $40 = $__p$addr$i$i203;
 $41 = $__sz;
 $add$ptr20 = (($40) + ($41)|0);
 $__hm_21 = ((($this1)) + 44|0);
 HEAP32[$__hm_21>>2] = $add$ptr20;
 $__str_22 = ((($this1)) + 32|0);
 $__str_23 = ((($this1)) + 32|0);
 $this$addr$i187 = $__str_23;
 $this1$i188 = $this$addr$i187;
 $this$addr$i$i186 = $this1$i188;
 $this1$i$i189 = $this$addr$i$i186;
 $this$addr$i$i$i185 = $this1$i$i189;
 $this1$i$i$i191 = $this$addr$i$i$i185;
 $this$addr$i$i$i$i184 = $this1$i$i$i191;
 $this1$i$i$i$i192 = $this$addr$i$i$i$i184;
 $42 = ((($this1$i$i$i$i192)) + 11|0);
 $43 = HEAP8[$42>>0]|0;
 $conv$i$i196 = $43&255;
 $and$i$i197 = $conv$i$i196 & 128;
 $tobool$i$i198 = ($and$i$i197|0)!=(0);
 if ($tobool$i$i198) {
  $this$addr$i5$i = $this1$i188;
  $this1$i6$i = $this$addr$i5$i;
  $this$addr$i$i4$i = $this1$i6$i;
  $this1$i$i8$i = $this$addr$i$i4$i;
  $this$addr$i$i$i3$i = $this1$i$i8$i;
  $this1$i$i$i9$i = $this$addr$i$i$i3$i;
  $__cap_$i$i = ((($this1$i$i$i9$i)) + 8|0);
  $44 = HEAP32[$__cap_$i$i>>2]|0;
  $and$i11$i = $44 & 2147483647;
  $cond$i202 = $and$i11$i;
 } else {
  $cond$i202 = 11;
 }
 $sub$i = (($cond$i202) - 1)|0;
 $this$addr$i141 = $__str_22;
 $__n$addr$i142 = $sub$i;
 $this1$i143 = $this$addr$i141;
 $45 = $__n$addr$i142;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($this1$i143,$45,0);
 $__str_25 = ((($this1)) + 32|0);
 $this$addr$i109 = $__str_25;
 $this1$i110 = $this$addr$i109;
 $this$addr$i$i108 = $this1$i110;
 $this1$i$i111 = $this$addr$i$i108;
 $this$addr$i$i$i107 = $this1$i$i111;
 $this1$i$i$i112 = $this$addr$i$i$i107;
 $this$addr$i$i$i$i106 = $this1$i$i$i112;
 $this1$i$i$i$i114 = $this$addr$i$i$i$i106;
 $this$addr$i$i$i$i$i105 = $this1$i$i$i$i114;
 $this1$i$i$i$i$i115 = $this$addr$i$i$i$i$i105;
 $46 = ((($this1$i$i$i$i$i115)) + 11|0);
 $47 = HEAP8[$46>>0]|0;
 $conv$i$i$i119 = $47&255;
 $and$i$i$i120 = $conv$i$i$i119 & 128;
 $tobool$i$i$i121 = ($and$i$i$i120|0)!=(0);
 if ($tobool$i$i$i121) {
  $this$addr$i15$i$i99 = $this1$i$i111;
  $this1$i16$i$i122 = $this$addr$i15$i$i99;
  $this$addr$i$i14$i$i98 = $this1$i16$i$i122;
  $this1$i$i18$i$i124 = $this$addr$i$i14$i$i98;
  $this$addr$i$i$i13$i$i97 = $this1$i$i18$i$i124;
  $this1$i$i$i19$i$i125 = $this$addr$i$i$i13$i$i97;
  $48 = HEAP32[$this1$i$i$i19$i$i125>>2]|0;
  $cond$i$i139 = $48;
 } else {
  $this$addr$i6$i$i104 = $this1$i$i111;
  $this1$i7$i$i130 = $this$addr$i6$i$i104;
  $this$addr$i$i5$i$i103 = $this1$i7$i$i130;
  $this1$i$i9$i$i132 = $this$addr$i$i5$i$i103;
  $this$addr$i$i$i4$i$i102 = $this1$i$i9$i$i132;
  $this1$i$i$i10$i$i133 = $this$addr$i$i$i4$i$i102;
  $__r$addr$i$i$i$i101 = $this1$i$i$i10$i$i133;
  $49 = $__r$addr$i$i$i$i101;
  $__x$addr$i$i$i$i$i100 = $49;
  $50 = $__x$addr$i$i$i$i$i100;
  $cond$i$i139 = $50;
 }
 $__p$addr$i$i96 = $cond$i$i139;
 $51 = $__p$addr$i$i96;
 $__str_27 = ((($this1)) + 32|0);
 $this$addr$i64 = $__str_27;
 $this1$i65 = $this$addr$i64;
 $this$addr$i$i63 = $this1$i65;
 $this1$i$i66 = $this$addr$i$i63;
 $this$addr$i$i$i62 = $this1$i$i66;
 $this1$i$i$i67 = $this$addr$i$i$i62;
 $this$addr$i$i$i$i61 = $this1$i$i$i67;
 $this1$i$i$i$i69 = $this$addr$i$i$i$i61;
 $this$addr$i$i$i$i$i60 = $this1$i$i$i$i69;
 $this1$i$i$i$i$i70 = $this$addr$i$i$i$i$i60;
 $52 = ((($this1$i$i$i$i$i70)) + 11|0);
 $53 = HEAP8[$52>>0]|0;
 $conv$i$i$i74 = $53&255;
 $and$i$i$i75 = $conv$i$i$i74 & 128;
 $tobool$i$i$i76 = ($and$i$i$i75|0)!=(0);
 if ($tobool$i$i$i76) {
  $this$addr$i15$i$i54 = $this1$i$i66;
  $this1$i16$i$i77 = $this$addr$i15$i$i54;
  $this$addr$i$i14$i$i53 = $this1$i16$i$i77;
  $this1$i$i18$i$i79 = $this$addr$i$i14$i$i53;
  $this$addr$i$i$i13$i$i52 = $this1$i$i18$i$i79;
  $this1$i$i$i19$i$i80 = $this$addr$i$i$i13$i$i52;
  $54 = HEAP32[$this1$i$i$i19$i$i80>>2]|0;
  $cond$i$i94 = $54;
 } else {
  $this$addr$i6$i$i59 = $this1$i$i66;
  $this1$i7$i$i85 = $this$addr$i6$i$i59;
  $this$addr$i$i5$i$i58 = $this1$i7$i$i85;
  $this1$i$i9$i$i87 = $this$addr$i$i5$i$i58;
  $this$addr$i$i$i4$i$i57 = $this1$i$i9$i$i87;
  $this1$i$i$i10$i$i88 = $this$addr$i$i$i4$i$i57;
  $__r$addr$i$i$i$i56 = $this1$i$i$i10$i$i88;
  $55 = $__r$addr$i$i$i$i56;
  $__x$addr$i$i$i$i$i55 = $55;
  $56 = $__x$addr$i$i$i$i$i55;
  $cond$i$i94 = $56;
 }
 $__p$addr$i$i51 = $cond$i$i94;
 $57 = $__p$addr$i$i51;
 $__str_29 = ((($this1)) + 32|0);
 $this$addr$i46 = $__str_29;
 $this1$i47 = $this$addr$i46;
 $this$addr$i$i45 = $this1$i47;
 $this1$i$i48 = $this$addr$i$i45;
 $this$addr$i$i$i44 = $this1$i$i48;
 $this1$i$i$i49 = $this$addr$i$i$i44;
 $this$addr$i$i$i$i43 = $this1$i$i$i49;
 $this1$i$i$i$i50 = $this$addr$i$i$i$i43;
 $58 = ((($this1$i$i$i$i50)) + 11|0);
 $59 = HEAP8[$58>>0]|0;
 $conv$i$i = $59&255;
 $and$i$i = $conv$i$i & 128;
 $tobool$i$i = ($and$i$i|0)!=(0);
 if ($tobool$i$i) {
  $this$addr$i17$i = $this1$i47;
  $this1$i18$i = $this$addr$i17$i;
  $this$addr$i$i16$i = $this1$i18$i;
  $this1$i$i20$i = $this$addr$i$i16$i;
  $this$addr$i$i$i15$i = $this1$i$i20$i;
  $this1$i$i$i21$i = $this$addr$i$i$i15$i;
  $__size_$i23$i = ((($this1$i$i$i21$i)) + 4|0);
  $60 = HEAP32[$__size_$i23$i>>2]|0;
  $cond$i = $60;
 } else {
  $this$addr$i6$i = $this1$i47;
  $this1$i7$i = $this$addr$i6$i;
  $this$addr$i$i5$i = $this1$i7$i;
  $this1$i$i9$i = $this$addr$i$i5$i;
  $this$addr$i$i$i4$i = $this1$i$i9$i;
  $this1$i$i$i10$i = $this$addr$i$i$i4$i;
  $61 = ((($this1$i$i$i10$i)) + 11|0);
  $62 = HEAP8[$61>>0]|0;
  $conv$i14$i = $62&255;
  $cond$i = $conv$i14$i;
 }
 $add$ptr31 = (($57) + ($cond$i)|0);
 $this$addr$i40 = $this1;
 $__pbeg$addr$i = $51;
 $__pend$addr$i = $add$ptr31;
 $this1$i41 = $this$addr$i40;
 $63 = $__pbeg$addr$i;
 $__nout_$i42 = ((($this1$i41)) + 24|0);
 HEAP32[$__nout_$i42>>2] = $63;
 $__bout_$i = ((($this1$i41)) + 20|0);
 HEAP32[$__bout_$i>>2] = $63;
 $64 = $__pend$addr$i;
 $__eout_$i = ((($this1$i41)) + 28|0);
 HEAP32[$__eout_$i>>2] = $64;
 $__mode_32 = ((($this1)) + 48|0);
 $65 = HEAP32[$__mode_32>>2]|0;
 $and33 = $65 & 3;
 $tobool34 = ($and33|0)!=(0);
 if (!($tobool34)) {
  STACKTOP = sp;return;
 }
 $66 = $__sz;
 $this$addr$i38 = $this1;
 $__n$addr$i = $66;
 $this1$i39 = $this$addr$i38;
 $67 = $__n$addr$i;
 $__nout_$i = ((($this1$i39)) + 24|0);
 $68 = HEAP32[$__nout_$i>>2]|0;
 $add$ptr$i = (($68) + ($67)|0);
 HEAP32[$__nout_$i>>2] = $add$ptr$i;
 STACKTOP = sp;return;
}
function __ZNSt3__224__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_j($__os,$__str,$__len) {
 $__os = $__os|0;
 $__str = $__str|0;
 $__len = $__len|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $__c$addr$i$i = 0, $__c$addr$i$i$i = 0, $__fill_$i = 0, $__fill_4$i = 0, $__fill_5$i = 0, $__fmtflags_$i = 0, $__l$addr$i$i$i = 0, $__len$addr = 0, $__os$addr = 0, $__rdbuf_$i$i$i = 0, $__rdstate_$i$i = 0, $__s = 0, $__s$addr$i = 0, $__state$addr$i = 0, $__state$addr$i$i = 0, $__str$addr = 0, $add$ptr = 0, $add$ptr$i = 0, $add$ptr10 = 0;
 var $add$ptr14 = 0, $add$ptr24 = 0, $add$ptr30 = 0, $add$ptr5 = 0, $add$ptr6 = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $and = 0, $call$i = 0, $call$i5$i$i = 0, $call$i6$i$i = 0, $call18 = 0, $call2$i = 0, $cmp = 0, $cmp$i = 0, $cond = 0, $conv$i = 0, $conv6$i = 0, $ehselector$slot = 0, $ehselector$slot$i$i = 0;
 var $exn = 0, $exn$i$i = 0, $exn$i$i$sink = 0, $exn$slot = 0, $exn$slot$i$i = 0, $exn34 = 0, $or$i$i = 0, $ref$tmp = 0, $ref$tmp$i$i = 0, $sel = 0, $sel$i$i = 0, $sel$i$i$sink = 0, $this$addr$i = 0, $this$addr$i$i = 0, $this$addr$i$i$i = 0, $this$addr$i$i$i47 = 0, $this$addr$i$i38 = 0, $this$addr$i$i48 = 0, $this$addr$i36 = 0, $this$addr$i39 = 0;
 var $this$addr$i42 = 0, $this$addr$i44 = 0, $this$addr$i49 = 0, $this1$i = 0, $this1$i$i = 0, $this1$i$i$i = 0, $this1$i$i$i52 = 0, $this1$i$i41 = 0, $this1$i$i51 = 0, $this1$i37 = 0, $this1$i40 = 0, $this1$i43 = 0, $this1$i45 = 0, $this1$i50 = 0, $tobool$i = 0, $vbase$offset = 0, $vbase$offset$i = 0, $vbase$offset13 = 0, $vbase$offset23 = 0, $vbase$offset29 = 0;
 var $vbase$offset9 = 0, $vtable = 0, $vtable$i = 0, $vtable$i$i$i = 0, $vtable11 = 0, $vtable21 = 0, $vtable27 = 0, $vtable7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(128|0);
 $agg$tmp$byval_copy = sp + 108|0;
 $ref$tmp$i$i = sp + 92|0;
 $__s = sp + 16|0;
 $ref$tmp = sp + 4|0;
 $agg$tmp = sp;
 $__os$addr = $__os;
 $__str$addr = $__str;
 $__len$addr = $__len;
 $0 = $__os$addr;
 __THREW__ = 0;
 invoke_vii(378,($__s|0),($0|0));
 $1 = __THREW__; __THREW__ = 0;
 $2 = $1&1;
 L1: do {
  if ($2) {
   $46 = ___cxa_find_matching_catch_3(0|0)|0;
   $47 = tempRet0;
   $exn$slot = $46;
   $ehselector$slot = $47;
  } else {
   $this$addr$i = $__s;
   $this1$i = $this$addr$i;
   $3 = HEAP8[$this1$i>>0]|0;
   $tobool$i = $3&1;
   do {
    if ($tobool$i) {
     $4 = $__os$addr;
     $this$addr$i36 = $agg$tmp;
     $__s$addr$i = $4;
     $this1$i37 = $this$addr$i36;
     $5 = $__s$addr$i;
     $vtable$i = HEAP32[$5>>2]|0;
     $6 = ((($vtable$i)) + -12|0);
     $vbase$offset$i = HEAP32[$6>>2]|0;
     $add$ptr$i = (($5) + ($vbase$offset$i)|0);
     $this$addr$i$i = $add$ptr$i;
     $this1$i$i = $this$addr$i$i;
     $this$addr$i$i$i = $this1$i$i;
     $this1$i$i$i = $this$addr$i$i$i;
     $__rdbuf_$i$i$i = ((($this1$i$i$i)) + 24|0);
     $7 = HEAP32[$__rdbuf_$i$i$i>>2]|0;
     HEAP32[$this1$i37>>2] = $7;
     $8 = $__str$addr;
     $9 = $__os$addr;
     $vtable = HEAP32[$9>>2]|0;
     $10 = ((($vtable)) + -12|0);
     $vbase$offset = HEAP32[$10>>2]|0;
     $add$ptr = (($9) + ($vbase$offset)|0);
     $this$addr$i42 = $add$ptr;
     $this1$i43 = $this$addr$i42;
     $__fmtflags_$i = ((($this1$i43)) + 4|0);
     $11 = HEAP32[$__fmtflags_$i>>2]|0;
     $and = $11 & 176;
     $cmp = ($and|0)==(32);
     $12 = $__str$addr;
     $13 = $__len$addr;
     $add$ptr5 = (($12) + ($13)|0);
     $14 = $__str$addr;
     $cond = $cmp ? $add$ptr5 : $14;
     $15 = $__str$addr;
     $16 = $__len$addr;
     $add$ptr6 = (($15) + ($16)|0);
     $17 = $__os$addr;
     $vtable7 = HEAP32[$17>>2]|0;
     $18 = ((($vtable7)) + -12|0);
     $vbase$offset9 = HEAP32[$18>>2]|0;
     $add$ptr10 = (($17) + ($vbase$offset9)|0);
     $19 = $__os$addr;
     $vtable11 = HEAP32[$19>>2]|0;
     $20 = ((($vtable11)) + -12|0);
     $vbase$offset13 = HEAP32[$20>>2]|0;
     $add$ptr14 = (($19) + ($vbase$offset13)|0);
     $this$addr$i49 = $add$ptr14;
     $this1$i50 = $this$addr$i49;
     $call$i = (__ZNSt3__211char_traitsIcE3eofEv()|0);
     $__fill_$i = ((($this1$i50)) + 76|0);
     $21 = HEAP32[$__fill_$i>>2]|0;
     $call2$i = (__ZNSt3__211char_traitsIcE11eq_int_typeEii($call$i,$21)|0);
     do {
      if ($call2$i) {
       $this$addr$i$i48 = $this1$i50;
       $__c$addr$i$i = 32;
       $this1$i$i51 = $this$addr$i$i48;
       __THREW__ = 0;
       invoke_vii(379,($ref$tmp$i$i|0),($this1$i$i51|0));
       $22 = __THREW__; __THREW__ = 0;
       $23 = $22&1;
       if ($23) {
        label = 13;
       } else {
        $__l$addr$i$i$i = $ref$tmp$i$i;
        $24 = $__l$addr$i$i$i;
        __THREW__ = 0;
        $call$i5$i$i = (invoke_iii(380,($24|0),(20096|0))|0);
        $25 = __THREW__; __THREW__ = 0;
        $26 = $25&1;
        if (!($26)) {
         $27 = $__c$addr$i$i;
         $this$addr$i$i$i47 = $call$i5$i$i;
         $__c$addr$i$i$i = $27;
         $this1$i$i$i52 = $this$addr$i$i$i47;
         $vtable$i$i$i = HEAP32[$this1$i$i$i52>>2]|0;
         $28 = ((($vtable$i$i$i)) + 28|0);
         $29 = HEAP32[$28>>2]|0;
         $30 = $__c$addr$i$i$i;
         __THREW__ = 0;
         $call$i6$i$i = (invoke_iii($29|0,($this1$i$i$i52|0),($30|0))|0);
         $31 = __THREW__; __THREW__ = 0;
         $32 = $31&1;
         if (!($32)) {
          __ZNSt3__26localeD2Ev($ref$tmp$i$i);
          $conv$i = $call$i6$i$i << 24 >> 24;
          $__fill_4$i = ((($this1$i50)) + 76|0);
          HEAP32[$__fill_4$i>>2] = $conv$i;
          label = 9;
          break;
         }
        }
        $33 = ___cxa_find_matching_catch_3(0|0)|0;
        $34 = tempRet0;
        $exn$slot$i$i = $33;
        $ehselector$slot$i$i = $34;
        __ZNSt3__26localeD2Ev($ref$tmp$i$i);
        $exn$i$i = $exn$slot$i$i;
        $sel$i$i = $ehselector$slot$i$i;
        $exn$i$i$sink = $exn$i$i;$sel$i$i$sink = $sel$i$i;
       }
      } else {
       label = 9;
      }
     } while(0);
     if ((label|0) == 9) {
      $__fill_5$i = ((($this1$i50)) + 76|0);
      $35 = HEAP32[$__fill_5$i>>2]|0;
      $conv6$i = $35&255;
      __THREW__ = 0;
      ;HEAP32[$agg$tmp$byval_copy>>2]=HEAP32[$agg$tmp>>2]|0;
      $call18 = (invoke_iiiiiii(381,($agg$tmp$byval_copy|0),($8|0),($cond|0),($add$ptr6|0),($add$ptr10|0),($conv6$i|0))|0);
      $36 = __THREW__; __THREW__ = 0;
      $37 = $36&1;
      if ($37) {
       label = 13;
      } else {
       HEAP32[$ref$tmp>>2] = $call18;
       $this$addr$i44 = $ref$tmp;
       $this1$i45 = $this$addr$i44;
       $38 = HEAP32[$this1$i45>>2]|0;
       $cmp$i = ($38|0)==(0|0);
       if (!($cmp$i)) {
        break;
       }
       $39 = $__os$addr;
       $vtable21 = HEAP32[$39>>2]|0;
       $40 = ((($vtable21)) + -12|0);
       $vbase$offset23 = HEAP32[$40>>2]|0;
       $add$ptr24 = (($39) + ($vbase$offset23)|0);
       $this$addr$i39 = $add$ptr24;
       $__state$addr$i = 5;
       $this1$i40 = $this$addr$i39;
       $41 = $__state$addr$i;
       $this$addr$i$i38 = $this1$i40;
       $__state$addr$i$i = $41;
       $this1$i$i41 = $this$addr$i$i38;
       $__rdstate_$i$i = ((($this1$i$i41)) + 16|0);
       $42 = HEAP32[$__rdstate_$i$i>>2]|0;
       $43 = $__state$addr$i$i;
       $or$i$i = $42 | $43;
       __THREW__ = 0;
       invoke_vii(382,($this1$i$i41|0),($or$i$i|0));
       $44 = __THREW__; __THREW__ = 0;
       $45 = $44&1;
       if ($45) {
        label = 13;
       } else {
        break;
       }
      }
     }
     if ((label|0) == 13) {
      $48 = ___cxa_find_matching_catch_3(0|0)|0;
      $49 = tempRet0;
      $exn$i$i$sink = $48;$sel$i$i$sink = $49;
     }
     $exn$slot = $exn$i$i$sink;
     $ehselector$slot = $sel$i$i$sink;
     __ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEE6sentryD2Ev($__s);
     break L1;
    }
   } while(0);
   __ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEE6sentryD2Ev($__s);
   $54 = $__os$addr;
   STACKTOP = sp;return ($54|0);
  }
 } while(0);
 $exn = $exn$slot;
 (___cxa_begin_catch(($exn|0))|0);
 $50 = $__os$addr;
 $vtable27 = HEAP32[$50>>2]|0;
 $51 = ((($vtable27)) + -12|0);
 $vbase$offset29 = HEAP32[$51>>2]|0;
 $add$ptr30 = (($50) + ($vbase$offset29)|0);
 __THREW__ = 0;
 invoke_vi(383,($add$ptr30|0));
 $52 = __THREW__; __THREW__ = 0;
 $53 = $52&1;
 if (!($53)) {
  ___cxa_end_catch();
  $54 = $__os$addr;
  STACKTOP = sp;return ($54|0);
 }
 $55 = ___cxa_find_matching_catch_2()|0;
 $56 = tempRet0;
 $exn$slot = $55;
 $ehselector$slot = $56;
 __THREW__ = 0;
 invoke_v(375);
 $57 = __THREW__; __THREW__ = 0;
 $58 = $57&1;
 if ($58) {
  $59 = ___cxa_find_matching_catch_3(0|0)|0;
  $60 = tempRet0;
  ___clang_call_terminate($59);
  // unreachable;
 } else {
  $exn34 = $exn$slot;
  $sel = $ehselector$slot;
  ___resumeException($exn34|0);
  // unreachable;
 }
 return (0)|0;
}
function __ZNSt3__216__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($__s,$__ob,$__op,$__oe,$__iob,$__fl) {
 $__s = $__s|0;
 $__ob = $__ob|0;
 $__op = $__op|0;
 $__oe = $__oe|0;
 $__iob = $__iob|0;
 $__fl = $__fl|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__c$addr$i = 0, $__fl$addr = 0, $__iob$addr = 0;
 var $__n$addr$i = 0, $__n$addr$i47 = 0, $__n$addr$i53 = 0, $__n$addr$i65 = 0, $__np = 0, $__ns = 0, $__ob$addr = 0, $__oe$addr = 0, $__op$addr = 0, $__p$addr$i$i = 0, $__r$addr$i$i$i$i = 0, $__r$i = 0, $__s$addr$i = 0, $__s$addr$i46 = 0, $__s$addr$i64 = 0, $__sp = 0, $__sz = 0, $__wide$addr$i = 0, $__width_$i = 0, $__width_$i42 = 0;
 var $__width_2$i = 0, $__x$addr$i$i$i$i$i = 0, $and$i$i$i = 0, $call$i = 0, $call$i51 = 0, $call$i6970 = 0, $cleanup$dest = 0, $cleanup$dest$slot = 0, $cmp = 0, $cmp1 = 0, $cmp11 = 0, $cmp16 = 0, $cmp21 = 0, $cmp29 = 0, $cmp33 = 0, $cmp7 = 0, $cond$i$i = 0, $conv$i$i$i = 0, $ehselector$slot = 0, $exn = 0;
 var $exn$slot = 0, $retval = 0, $sel = 0, $sub = 0, $sub$ptr$lhs$cast = 0, $sub$ptr$lhs$cast26 = 0, $sub$ptr$lhs$cast4 = 0, $sub$ptr$rhs$cast = 0, $sub$ptr$rhs$cast27 = 0, $sub$ptr$rhs$cast5 = 0, $sub$ptr$sub = 0, $sub$ptr$sub28 = 0, $sub$ptr$sub6 = 0, $switch = 0, $this$addr$i = 0, $this$addr$i$i = 0, $this$addr$i$i$i = 0, $this$addr$i$i$i$i = 0, $this$addr$i$i$i$i$i = 0, $this$addr$i$i$i$i55 = 0;
 var $this$addr$i$i$i13$i$i = 0, $this$addr$i$i$i4$i$i = 0, $this$addr$i$i$i56 = 0, $this$addr$i$i14$i$i = 0, $this$addr$i$i5$i$i = 0, $this$addr$i$i57 = 0, $this$addr$i15$i$i = 0, $this$addr$i40 = 0, $this$addr$i43 = 0, $this$addr$i45 = 0, $this$addr$i52 = 0, $this$addr$i58 = 0, $this$addr$i6$i$i = 0, $this$addr$i63 = 0, $this1$i = 0, $this1$i$i = 0, $this1$i$i$i = 0, $this1$i$i$i$i$i = 0, $this1$i$i$i$i62 = 0, $this1$i$i$i10$i$i = 0;
 var $this1$i$i$i19$i$i = 0, $this1$i$i$i61 = 0, $this1$i$i18$i$i = 0, $this1$i$i60 = 0, $this1$i$i9$i$i = 0, $this1$i16$i$i = 0, $this1$i41 = 0, $this1$i44 = 0, $this1$i48 = 0, $this1$i54 = 0, $this1$i59 = 0, $this1$i66 = 0, $this1$i7$i$i = 0, $tobool$i$i$i = 0, $vtable$i = 0, $vtable$i49 = 0, $vtable$i67 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 192|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(192|0);
 $retval = sp + 52|0;
 $__sp = sp + 12|0;
 $__ob$addr = $__ob;
 $__op$addr = $__op;
 $__oe$addr = $__oe;
 $__iob$addr = $__iob;
 $__fl$addr = $__fl;
 $0 = HEAP32[$__s>>2]|0;
 $cmp = ($0|0)==(0|0);
 if ($cmp) {
  ;HEAP32[$retval>>2]=HEAP32[$__s>>2]|0;
  $56 = HEAP32[$retval>>2]|0;
  STACKTOP = sp;return ($56|0);
 }
 $1 = $__oe$addr;
 $2 = $__ob$addr;
 $sub$ptr$lhs$cast = $1;
 $sub$ptr$rhs$cast = $2;
 $sub$ptr$sub = (($sub$ptr$lhs$cast) - ($sub$ptr$rhs$cast))|0;
 $__sz = $sub$ptr$sub;
 $3 = $__iob$addr;
 $this$addr$i = $3;
 $this1$i = $this$addr$i;
 $__width_$i = ((($this1$i)) + 12|0);
 $4 = HEAP32[$__width_$i>>2]|0;
 $__ns = $4;
 $5 = $__ns;
 $6 = $__sz;
 $cmp1 = ($5|0)>($6|0);
 if ($cmp1) {
  $7 = $__sz;
  $8 = $__ns;
  $sub = (($8) - ($7))|0;
  $__ns = $sub;
 } else {
  $__ns = 0;
 }
 $9 = $__op$addr;
 $10 = $__ob$addr;
 $sub$ptr$lhs$cast4 = $9;
 $sub$ptr$rhs$cast5 = $10;
 $sub$ptr$sub6 = (($sub$ptr$lhs$cast4) - ($sub$ptr$rhs$cast5))|0;
 $__np = $sub$ptr$sub6;
 $11 = $__np;
 $cmp7 = ($11|0)>(0);
 if ($cmp7) {
  $12 = HEAP32[$__s>>2]|0;
  $13 = $__ob$addr;
  $14 = $__np;
  $this$addr$i45 = $12;
  $__s$addr$i46 = $13;
  $__n$addr$i47 = $14;
  $this1$i48 = $this$addr$i45;
  $vtable$i49 = HEAP32[$this1$i48>>2]|0;
  $15 = ((($vtable$i49)) + 48|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = $__s$addr$i46;
  $18 = $__n$addr$i47;
  $call$i51 = (FUNCTION_TABLE_iiii[$16 & 1023]($this1$i48,$17,$18)|0);
  $19 = $__np;
  $cmp11 = ($call$i51|0)!=($19|0);
  if ($cmp11) {
   HEAP32[$__s>>2] = 0;
   ;HEAP32[$retval>>2]=HEAP32[$__s>>2]|0;
   $56 = HEAP32[$retval>>2]|0;
   STACKTOP = sp;return ($56|0);
  }
 }
 $20 = $__ns;
 $cmp16 = ($20|0)>(0);
 if ($cmp16) {
  $21 = $__ns;
  $22 = $__fl$addr;
  $this$addr$i52 = $__sp;
  $__n$addr$i53 = $21;
  $__c$addr$i = $22;
  $this1$i54 = $this$addr$i52;
  $this$addr$i$i = $this1$i54;
  $this1$i$i = $this$addr$i$i;
  $this$addr$i$i$i = $this1$i$i;
  $this1$i$i$i = $this$addr$i$i$i;
  $this$addr$i$i$i$i = $this1$i$i$i;
  ;HEAP32[$this1$i$i$i>>2]=0|0;HEAP32[$this1$i$i$i+4>>2]=0|0;HEAP32[$this1$i$i$i+8>>2]=0|0;
  $23 = $__n$addr$i53;
  $24 = $__c$addr$i;
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEjc($this1$i54,$23,$24);
  $25 = HEAP32[$__s>>2]|0;
  $this$addr$i58 = $__sp;
  $this1$i59 = $this$addr$i58;
  $this$addr$i$i57 = $this1$i59;
  $this1$i$i60 = $this$addr$i$i57;
  $this$addr$i$i$i56 = $this1$i$i60;
  $this1$i$i$i61 = $this$addr$i$i$i56;
  $this$addr$i$i$i$i55 = $this1$i$i$i61;
  $this1$i$i$i$i62 = $this$addr$i$i$i$i55;
  $this$addr$i$i$i$i$i = $this1$i$i$i$i62;
  $this1$i$i$i$i$i = $this$addr$i$i$i$i$i;
  $26 = ((($this1$i$i$i$i$i)) + 11|0);
  $27 = HEAP8[$26>>0]|0;
  $conv$i$i$i = $27&255;
  $and$i$i$i = $conv$i$i$i & 128;
  $tobool$i$i$i = ($and$i$i$i|0)!=(0);
  if ($tobool$i$i$i) {
   $this$addr$i15$i$i = $this1$i$i60;
   $this1$i16$i$i = $this$addr$i15$i$i;
   $this$addr$i$i14$i$i = $this1$i16$i$i;
   $this1$i$i18$i$i = $this$addr$i$i14$i$i;
   $this$addr$i$i$i13$i$i = $this1$i$i18$i$i;
   $this1$i$i$i19$i$i = $this$addr$i$i$i13$i$i;
   $28 = HEAP32[$this1$i$i$i19$i$i>>2]|0;
   $cond$i$i = $28;
  } else {
   $this$addr$i6$i$i = $this1$i$i60;
   $this1$i7$i$i = $this$addr$i6$i$i;
   $this$addr$i$i5$i$i = $this1$i7$i$i;
   $this1$i$i9$i$i = $this$addr$i$i5$i$i;
   $this$addr$i$i$i4$i$i = $this1$i$i9$i$i;
   $this1$i$i$i10$i$i = $this$addr$i$i$i4$i$i;
   $__r$addr$i$i$i$i = $this1$i$i$i10$i$i;
   $29 = $__r$addr$i$i$i$i;
   $__x$addr$i$i$i$i$i = $29;
   $30 = $__x$addr$i$i$i$i$i;
   $cond$i$i = $30;
  }
  $__p$addr$i$i = $cond$i$i;
  $31 = $__p$addr$i$i;
  $32 = $__ns;
  $this$addr$i63 = $25;
  $__s$addr$i64 = $31;
  $__n$addr$i65 = $32;
  $this1$i66 = $this$addr$i63;
  $vtable$i67 = HEAP32[$this1$i66>>2]|0;
  $33 = ((($vtable$i67)) + 48|0);
  $34 = HEAP32[$33>>2]|0;
  $35 = $__s$addr$i64;
  $36 = $__n$addr$i65;
  __THREW__ = 0;
  $call$i6970 = (invoke_iiii($34|0,($this1$i66|0),($35|0),($36|0))|0);
  $37 = __THREW__; __THREW__ = 0;
  $38 = $37&1;
  if ($38) {
   $40 = ___cxa_find_matching_catch_2()|0;
   $41 = tempRet0;
   $exn$slot = $40;
   $ehselector$slot = $41;
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__sp);
   $exn = $exn$slot;
   $sel = $ehselector$slot;
   ___resumeException($exn|0);
   // unreachable;
  }
  $39 = $__ns;
  $cmp21 = ($call$i6970|0)!=($39|0);
  if ($cmp21) {
   HEAP32[$__s>>2] = 0;
   ;HEAP32[$retval>>2]=HEAP32[$__s>>2]|0;
   $cleanup$dest$slot = 1;
  } else {
   $cleanup$dest$slot = 0;
  }
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__sp);
  $cleanup$dest = $cleanup$dest$slot;
  $switch = ($cleanup$dest>>>0)<(1);
  if (!($switch)) {
   $56 = HEAP32[$retval>>2]|0;
   STACKTOP = sp;return ($56|0);
  }
 }
 $42 = $__oe$addr;
 $43 = $__op$addr;
 $sub$ptr$lhs$cast26 = $42;
 $sub$ptr$rhs$cast27 = $43;
 $sub$ptr$sub28 = (($sub$ptr$lhs$cast26) - ($sub$ptr$rhs$cast27))|0;
 $__np = $sub$ptr$sub28;
 $44 = $__np;
 $cmp29 = ($44|0)>(0);
 if ($cmp29) {
  $45 = HEAP32[$__s>>2]|0;
  $46 = $__op$addr;
  $47 = $__np;
  $this$addr$i43 = $45;
  $__s$addr$i = $46;
  $__n$addr$i = $47;
  $this1$i44 = $this$addr$i43;
  $vtable$i = HEAP32[$this1$i44>>2]|0;
  $48 = ((($vtable$i)) + 48|0);
  $49 = HEAP32[$48>>2]|0;
  $50 = $__s$addr$i;
  $51 = $__n$addr$i;
  $call$i = (FUNCTION_TABLE_iiii[$49 & 1023]($this1$i44,$50,$51)|0);
  $52 = $__np;
  $cmp33 = ($call$i|0)!=($52|0);
  if ($cmp33) {
   HEAP32[$__s>>2] = 0;
   ;HEAP32[$retval>>2]=HEAP32[$__s>>2]|0;
   $56 = HEAP32[$retval>>2]|0;
   STACKTOP = sp;return ($56|0);
  }
 }
 $53 = $__iob$addr;
 $this$addr$i40 = $53;
 $__wide$addr$i = 0;
 $this1$i41 = $this$addr$i40;
 $__width_$i42 = ((($this1$i41)) + 12|0);
 $54 = HEAP32[$__width_$i42>>2]|0;
 $__r$i = $54;
 $55 = $__wide$addr$i;
 $__width_2$i = ((($this1$i41)) + 12|0);
 HEAP32[$__width_2$i>>2] = $55;
 ;HEAP32[$retval>>2]=HEAP32[$__s>>2]|0;
 $56 = HEAP32[$retval>>2]|0;
 STACKTOP = sp;return ($56|0);
}
function __ZNKSt3__215basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEE3strEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__a$addr$i = 0, $__a$addr$i40 = 0, $__a$addr$i74 = 0;
 var $__a$i$i = 0, $__binp_$i = 0, $__bout_$i = 0, $__einp_$i = 0, $__first$addr$i = 0, $__first$addr$i72 = 0, $__hm_ = 0, $__hm_4 = 0, $__hm_6 = 0, $__i$i$i = 0, $__last$addr$i = 0, $__last$addr$i73 = 0, $__mode_ = 0, $__mode_7 = 0, $__nout_$i = 0, $__nout_$i49 = 0, $__str_ = 0, $__str_14 = 0, $__str_19 = 0, $__t$addr$i$i$i = 0;
 var $__t$addr$i$i$i$i = 0, $__t$addr$i$i$i$i32 = 0, $__t$addr$i$i$i$i64 = 0, $__t$addr$i$i$i35 = 0, $__t$addr$i$i$i67 = 0, $agg$tmp$i = 0, $agg$tmp$i$i = 0, $agg$tmp$i$i37 = 0, $agg$tmp$i$i69 = 0, $agg$tmp$i41 = 0, $agg$tmp$i75 = 0, $agg$tmp2$i = 0, $agg$tmp2$i$i = 0, $agg$tmp2$i$i34 = 0, $agg$tmp2$i$i66 = 0, $agg$tmp2$i38 = 0, $agg$tmp2$i70 = 0, $and = 0, $and8 = 0, $arrayidx$i$i = 0;
 var $cmp = 0, $cmp$i$i = 0, $inc$i$i = 0, $ref$tmp = 0, $ref$tmp13 = 0, $ref$tmp18 = 0, $this$addr = 0, $this$addr$i = 0, $this$addr$i$i = 0, $this$addr$i$i$i = 0, $this$addr$i$i$i$i = 0, $this$addr$i$i$i$i23 = 0, $this$addr$i$i$i$i50 = 0, $this$addr$i$i$i$i83 = 0, $this$addr$i$i$i24 = 0, $this$addr$i$i$i33 = 0, $this$addr$i$i$i51 = 0, $this$addr$i$i$i65 = 0, $this$addr$i$i$i84 = 0, $this$addr$i$i25 = 0;
 var $this$addr$i$i3$i = 0, $this$addr$i$i36 = 0, $this$addr$i$i52 = 0, $this$addr$i$i68 = 0, $this$addr$i$i85 = 0, $this$addr$i21 = 0, $this$addr$i26 = 0, $this$addr$i39 = 0, $this$addr$i4$i = 0, $this$addr$i47 = 0, $this$addr$i54 = 0, $this$addr$i60 = 0, $this$addr$i62 = 0, $this$addr$i71 = 0, $this$addr$i81 = 0, $this$addr$i87 = 0, $this1 = 0, $this1$i = 0, $this1$i$i = 0, $this1$i$i$i = 0;
 var $this1$i$i$i$i = 0, $this1$i$i$i30 = 0, $this1$i$i$i45 = 0, $this1$i$i$i58 = 0, $this1$i$i$i79 = 0, $this1$i$i$i91 = 0, $this1$i$i28 = 0, $this1$i$i44 = 0, $this1$i$i56 = 0, $this1$i$i6$i = 0, $this1$i$i78 = 0, $this1$i$i89 = 0, $this1$i22 = 0, $this1$i27 = 0, $this1$i42 = 0, $this1$i48 = 0, $this1$i5$i = 0, $this1$i55 = 0, $this1$i61 = 0, $this1$i63 = 0;
 var $this1$i76 = 0, $this1$i82 = 0, $this1$i88 = 0, $tobool = 0, $tobool9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 240|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(240|0);
 $agg$tmp2$i$i66 = sp + 40|0;
 $agg$tmp$i$i69 = sp + 232|0;
 $agg$tmp2$i70 = sp + 32|0;
 $agg$tmp$i75 = sp + 231|0;
 $agg$tmp2$i$i34 = sp + 24|0;
 $agg$tmp$i$i37 = sp + 230|0;
 $agg$tmp2$i38 = sp + 16|0;
 $agg$tmp$i41 = sp + 229|0;
 $agg$tmp2$i$i = sp + 8|0;
 $agg$tmp$i$i = sp + 228|0;
 $agg$tmp2$i = sp;
 $agg$tmp$i = sp + 227|0;
 $ref$tmp = sp + 226|0;
 $ref$tmp13 = sp + 225|0;
 $ref$tmp18 = sp + 224|0;
 $this$addr = $this;
 $this1 = $this$addr;
 $__mode_ = ((($this1)) + 48|0);
 $0 = HEAP32[$__mode_>>2]|0;
 $and = $0 & 16;
 $tobool = ($and|0)!=(0);
 if ($tobool) {
  $__hm_ = ((($this1)) + 44|0);
  $1 = HEAP32[$__hm_>>2]|0;
  $this$addr$i = $this1;
  $this1$i = $this$addr$i;
  $__nout_$i = ((($this1$i)) + 24|0);
  $2 = HEAP32[$__nout_$i>>2]|0;
  $cmp = ($1>>>0)<($2>>>0);
  if ($cmp) {
   $this$addr$i47 = $this1;
   $this1$i48 = $this$addr$i47;
   $__nout_$i49 = ((($this1$i48)) + 24|0);
   $3 = HEAP32[$__nout_$i49>>2]|0;
   $__hm_4 = ((($this1)) + 44|0);
   HEAP32[$__hm_4>>2] = $3;
  }
  $this$addr$i81 = $this1;
  $this1$i82 = $this$addr$i81;
  $__bout_$i = ((($this1$i82)) + 20|0);
  $4 = HEAP32[$__bout_$i>>2]|0;
  $__hm_6 = ((($this1)) + 44|0);
  $5 = HEAP32[$__hm_6>>2]|0;
  $__str_ = ((($this1)) + 32|0);
  $this$addr$i87 = $__str_;
  $this1$i88 = $this$addr$i87;
  $this$addr$i$i85 = $this1$i88;
  $this1$i$i89 = $this$addr$i$i85;
  $this$addr$i$i$i84 = $this1$i$i89;
  $this1$i$i$i91 = $this$addr$i$i$i84;
  $this$addr$i$i$i$i83 = $this1$i$i$i91;
  $this$addr$i71 = $agg$result;
  $__first$addr$i72 = $4;
  $__last$addr$i73 = $5;
  $__a$addr$i74 = $ref$tmp;
  $this1$i76 = $this$addr$i71;
  ;HEAP8[$agg$tmp2$i70>>0]=HEAP8[$agg$tmp$i75>>0]|0;
  $this$addr$i$i68 = $this1$i76;
  $this1$i$i78 = $this$addr$i$i68;
  $__t$addr$i$i$i67 = $agg$tmp2$i70;
  ;HEAP8[$agg$tmp2$i$i66>>0]=HEAP8[$agg$tmp$i$i69>>0]|0;
  $this$addr$i$i$i65 = $this1$i$i78;
  $this1$i$i$i79 = $this$addr$i$i$i65;
  $__t$addr$i$i$i$i64 = $agg$tmp2$i$i66;
  ;HEAP32[$this1$i$i$i79>>2]=0|0;HEAP32[$this1$i$i$i79+4>>2]=0|0;HEAP32[$this1$i$i$i79+8>>2]=0|0;
  $6 = $__first$addr$i72;
  $7 = $__last$addr$i73;
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initIPcEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeES9_S9_($this1$i76,$6,$7);
  STACKTOP = sp;return;
 }
 $__mode_7 = ((($this1)) + 48|0);
 $8 = HEAP32[$__mode_7>>2]|0;
 $and8 = $8 & 8;
 $tobool9 = ($and8|0)!=(0);
 if ($tobool9) {
  $this$addr$i62 = $this1;
  $this1$i63 = $this$addr$i62;
  $__binp_$i = ((($this1$i63)) + 8|0);
  $9 = HEAP32[$__binp_$i>>2]|0;
  $this$addr$i60 = $this1;
  $this1$i61 = $this$addr$i60;
  $__einp_$i = ((($this1$i61)) + 16|0);
  $10 = HEAP32[$__einp_$i>>2]|0;
  $__str_14 = ((($this1)) + 32|0);
  $this$addr$i54 = $__str_14;
  $this1$i55 = $this$addr$i54;
  $this$addr$i$i52 = $this1$i55;
  $this1$i$i56 = $this$addr$i$i52;
  $this$addr$i$i$i51 = $this1$i$i56;
  $this1$i$i$i58 = $this$addr$i$i$i51;
  $this$addr$i$i$i$i50 = $this1$i$i$i58;
  $this$addr$i39 = $agg$result;
  $__first$addr$i = $9;
  $__last$addr$i = $10;
  $__a$addr$i40 = $ref$tmp13;
  $this1$i42 = $this$addr$i39;
  ;HEAP8[$agg$tmp2$i38>>0]=HEAP8[$agg$tmp$i41>>0]|0;
  $this$addr$i$i36 = $this1$i42;
  $this1$i$i44 = $this$addr$i$i36;
  $__t$addr$i$i$i35 = $agg$tmp2$i38;
  ;HEAP8[$agg$tmp2$i$i34>>0]=HEAP8[$agg$tmp$i$i37>>0]|0;
  $this$addr$i$i$i33 = $this1$i$i44;
  $this1$i$i$i45 = $this$addr$i$i$i33;
  $__t$addr$i$i$i$i32 = $agg$tmp2$i$i34;
  ;HEAP32[$this1$i$i$i45>>2]=0|0;HEAP32[$this1$i$i$i45+4>>2]=0|0;HEAP32[$this1$i$i$i45+8>>2]=0|0;
  $11 = $__first$addr$i;
  $12 = $__last$addr$i;
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initIPcEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeES9_S9_($this1$i42,$11,$12);
  STACKTOP = sp;return;
 }
 $__str_19 = ((($this1)) + 32|0);
 $this$addr$i26 = $__str_19;
 $this1$i27 = $this$addr$i26;
 $this$addr$i$i25 = $this1$i27;
 $this1$i$i28 = $this$addr$i$i25;
 $this$addr$i$i$i24 = $this1$i$i28;
 $this1$i$i$i30 = $this$addr$i$i$i24;
 $this$addr$i$i$i$i23 = $this1$i$i$i30;
 $this$addr$i21 = $agg$result;
 $__a$addr$i = $ref$tmp18;
 $this1$i22 = $this$addr$i21;
 ;HEAP8[$agg$tmp2$i>>0]=HEAP8[$agg$tmp$i>>0]|0;
 $this$addr$i$i = $this1$i22;
 $this1$i$i = $this$addr$i$i;
 $__t$addr$i$i$i = $agg$tmp2$i;
 ;HEAP8[$agg$tmp2$i$i>>0]=HEAP8[$agg$tmp$i$i>>0]|0;
 $this$addr$i$i$i = $this1$i$i;
 $this1$i$i$i = $this$addr$i$i$i;
 $__t$addr$i$i$i$i = $agg$tmp2$i$i;
 ;HEAP32[$this1$i$i$i>>2]=0|0;HEAP32[$this1$i$i$i+4>>2]=0|0;HEAP32[$this1$i$i$i+8>>2]=0|0;
 $this$addr$i4$i = $this1$i22;
 $this1$i5$i = $this$addr$i4$i;
 $this$addr$i$i3$i = $this1$i5$i;
 $this1$i$i6$i = $this$addr$i$i3$i;
 $this$addr$i$i$i$i = $this1$i$i6$i;
 $this1$i$i$i$i = $this$addr$i$i$i$i;
 $__a$i$i = $this1$i$i$i$i;
 $__i$i$i = 0;
 while(1) {
  $13 = $__i$i$i;
  $cmp$i$i = ($13>>>0)<(3);
  if (!($cmp$i$i)) {
   break;
  }
  $14 = $__a$i$i;
  $15 = $__i$i$i;
  $arrayidx$i$i = (($14) + ($15<<2)|0);
  HEAP32[$arrayidx$i$i>>2] = 0;
  $16 = $__i$i$i;
  $inc$i$i = (($16) + 1)|0;
  $__i$i$i = $inc$i$i;
 }
 STACKTOP = sp;return;
}
function __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initIPcEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeES9_S9_($this,$__first,$__last) {
 $this = $this|0;
 $__first = $__first|0;
 $__last = $__last|0;
 var $$addr$i$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__a$addr$i = 0, $__a$addr$i$i = 0, $__a$addr$i$i$i = 0;
 var $__cap = 0, $__cap_$i = 0, $__first$addr = 0, $__first$addr$i = 0, $__first$addr$i$i = 0, $__last$addr = 0, $__last$addr$i = 0, $__last$addr$i$i = 0, $__m$i = 0, $__n$addr$i = 0, $__n$addr$i$i = 0, $__p = 0, $__p$addr$i = 0, $__r$addr$i$i = 0, $__s$addr$i = 0, $__s$addr$i$i = 0, $__s$addr$i22 = 0, $__s$addr$i32 = 0, $__s$addr$i68 = 0, $__size$addr$i$i$i = 0;
 var $__size_$i28 = 0, $__sz = 0, $__x$addr$i$i$i = 0, $add = 0, $add$i = 0, $add$i$i = 0, $add9 = 0, $agg$tmp$i = 0, $agg$tmp$i$i = 0, $agg$tmp1$i = 0, $agg$tmp1$i$i = 0, $and$i$i = 0, $call$i$i$i = 0, $cmp = 0, $cmp$i = 0, $cmp11 = 0, $cmp3 = 0, $cond$i = 0, $conv$i = 0, $incdec$ptr = 0;
 var $incdec$ptr12 = 0, $or$i = 0, $ref$tmp = 0, $sub$i = 0, $sub$i69 = 0, $sub$ptr$lhs$cast$i$i = 0, $sub$ptr$rhs$cast$i$i = 0, $sub$ptr$sub$i$i = 0, $this$addr = 0, $this$addr$i = 0, $this$addr$i$i = 0, $this$addr$i$i$i = 0, $this$addr$i$i$i$i = 0, $this$addr$i$i$i13 = 0, $this$addr$i$i$i19 = 0, $this$addr$i$i$i29 = 0, $this$addr$i$i$i3$i = 0, $this$addr$i$i$i39 = 0, $this$addr$i$i$i48 = 0, $this$addr$i$i$i52 = 0;
 var $this$addr$i$i$i61 = 0, $this$addr$i$i14 = 0, $this$addr$i$i20 = 0, $this$addr$i$i30 = 0, $this$addr$i$i40 = 0, $this$addr$i$i49 = 0, $this$addr$i$i53 = 0, $this$addr$i$i62 = 0, $this$addr$i15 = 0, $this$addr$i21 = 0, $this$addr$i31 = 0, $this$addr$i41 = 0, $this$addr$i54 = 0, $this$addr$i63 = 0, $this1 = 0, $this1$i = 0, $this1$i$i = 0, $this1$i$i$i = 0, $this1$i$i$i$i = 0, $this1$i$i$i18 = 0;
 var $this1$i$i$i26 = 0, $this1$i$i$i36 = 0, $this1$i$i$i45 = 0, $this1$i$i$i58 = 0, $this1$i$i$i67 = 0, $this1$i$i17 = 0, $this1$i$i25 = 0, $this1$i$i35 = 0, $this1$i$i44 = 0, $this1$i$i50 = 0, $this1$i$i57 = 0, $this1$i$i66 = 0, $this1$i16 = 0, $this1$i23 = 0, $this1$i33 = 0, $this1$i42 = 0, $this1$i55 = 0, $this1$i64 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(224|0);
 $agg$tmp1$i$i = sp + 8|0;
 $agg$tmp$i$i = sp + 218|0;
 $agg$tmp1$i = sp;
 $agg$tmp$i = sp + 217|0;
 $ref$tmp = sp + 216|0;
 $this$addr = $this;
 $__first$addr = $__first;
 $__last$addr = $__last;
 $this1 = $this$addr;
 $0 = $__first$addr;
 $1 = $__last$addr;
 $__first$addr$i = $0;
 $__last$addr$i = $1;
 $2 = $__first$addr$i;
 $3 = $__last$addr$i;
 ;HEAP8[$agg$tmp1$i>>0]=HEAP8[$agg$tmp$i>>0]|0;
 $__first$addr$i$i = $2;
 $__last$addr$i$i = $3;
 $4 = $__last$addr$i$i;
 $5 = $__first$addr$i$i;
 $sub$ptr$lhs$cast$i$i = $4;
 $sub$ptr$rhs$cast$i$i = $5;
 $sub$ptr$sub$i$i = (($sub$ptr$lhs$cast$i$i) - ($sub$ptr$rhs$cast$i$i))|0;
 $__sz = $sub$ptr$sub$i$i;
 $6 = $__sz;
 $this$addr$i = $this1;
 $this1$i = $this$addr$i;
 $this$addr$i$i = $this1$i;
 $this1$i$i = $this$addr$i$i;
 $this$addr$i$i$i = $this1$i$i;
 $this1$i$i$i = $this$addr$i$i$i;
 $this$addr$i$i$i$i = $this1$i$i$i;
 $this1$i$i$i$i = $this$addr$i$i$i$i;
 $__a$addr$i$i = $this1$i$i$i$i;
 $7 = $__a$addr$i$i;
 ;HEAP8[$agg$tmp1$i$i>>0]=HEAP8[$agg$tmp$i$i>>0]|0;
 $__a$addr$i$i$i = $7;
 $8 = $__a$addr$i$i$i;
 $this$addr$i$i$i3$i = $8;
 $__m$i = -1;
 $9 = $__m$i;
 $sub$i = (($9) - 16)|0;
 $cmp = ($6>>>0)>($sub$i>>>0);
 if ($cmp) {
  __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv($this1);
 }
 $10 = $__sz;
 $cmp3 = ($10>>>0)<(11);
 $11 = $__sz;
 if ($cmp3) {
  $this$addr$i15 = $this1;
  $__s$addr$i = $11;
  $this1$i16 = $this$addr$i15;
  $12 = $__s$addr$i;
  $conv$i = $12&255;
  $this$addr$i$i14 = $this1$i16;
  $this1$i$i17 = $this$addr$i$i14;
  $this$addr$i$i$i13 = $this1$i$i17;
  $this1$i$i$i18 = $this$addr$i$i$i13;
  $13 = ((($this1$i$i$i18)) + 11|0);
  HEAP8[$13>>0] = $conv$i;
  $this$addr$i54 = $this1;
  $this1$i55 = $this$addr$i54;
  $this$addr$i$i53 = $this1$i55;
  $this1$i$i57 = $this$addr$i$i53;
  $this$addr$i$i$i52 = $this1$i$i57;
  $this1$i$i$i58 = $this$addr$i$i$i52;
  $__r$addr$i$i = $this1$i$i$i58;
  $14 = $__r$addr$i$i;
  $__x$addr$i$i$i = $14;
  $15 = $__x$addr$i$i$i;
  $__p = $15;
 } else {
  $__s$addr$i68 = $11;
  $16 = $__s$addr$i68;
  $cmp$i = ($16>>>0)<(11);
  if ($cmp$i) {
   $cond$i = 11;
  } else {
   $17 = $__s$addr$i68;
   $add$i = (($17) + 1)|0;
   $__s$addr$i$i = $add$i;
   $18 = $__s$addr$i$i;
   $add$i$i = (($18) + 15)|0;
   $and$i$i = $add$i$i & -16;
   $cond$i = $and$i$i;
  }
  $sub$i69 = (($cond$i) - 1)|0;
  $__cap = $sub$i69;
  $this$addr$i63 = $this1;
  $this1$i64 = $this$addr$i63;
  $this$addr$i$i62 = $this1$i64;
  $this1$i$i66 = $this$addr$i$i62;
  $this$addr$i$i$i61 = $this1$i$i66;
  $this1$i$i$i67 = $this$addr$i$i$i61;
  $19 = $__cap;
  $add = (($19) + 1)|0;
  $__a$addr$i = $this1$i$i$i67;
  $__n$addr$i = $add;
  $20 = $__a$addr$i;
  $21 = $__n$addr$i;
  $this$addr$i$i49 = $20;
  $__n$addr$i$i = $21;
  $$addr$i$i = 0;
  $this1$i$i50 = $this$addr$i$i49;
  $this$addr$i$i$i48 = $this1$i$i50;
  $22 = $__n$addr$i$i;
  $__size$addr$i$i$i = $22;
  $23 = $__size$addr$i$i$i;
  $call$i$i$i = (__Znwj($23)|0);
  $__p = $call$i$i$i;
  $24 = $__p;
  $this$addr$i41 = $this1;
  $__p$addr$i = $24;
  $this1$i42 = $this$addr$i41;
  $25 = $__p$addr$i;
  $this$addr$i$i40 = $this1$i42;
  $this1$i$i44 = $this$addr$i$i40;
  $this$addr$i$i$i39 = $this1$i$i44;
  $this1$i$i$i45 = $this$addr$i$i$i39;
  HEAP32[$this1$i$i$i45>>2] = $25;
  $26 = $__cap;
  $add9 = (($26) + 1)|0;
  $this$addr$i31 = $this1;
  $__s$addr$i32 = $add9;
  $this1$i33 = $this$addr$i31;
  $27 = $__s$addr$i32;
  $or$i = -2147483648 | $27;
  $this$addr$i$i30 = $this1$i33;
  $this1$i$i35 = $this$addr$i$i30;
  $this$addr$i$i$i29 = $this1$i$i35;
  $this1$i$i$i36 = $this$addr$i$i$i29;
  $__cap_$i = ((($this1$i$i$i36)) + 8|0);
  HEAP32[$__cap_$i>>2] = $or$i;
  $28 = $__sz;
  $this$addr$i21 = $this1;
  $__s$addr$i22 = $28;
  $this1$i23 = $this$addr$i21;
  $29 = $__s$addr$i22;
  $this$addr$i$i20 = $this1$i23;
  $this1$i$i25 = $this$addr$i$i20;
  $this$addr$i$i$i19 = $this1$i$i25;
  $this1$i$i$i26 = $this$addr$i$i$i19;
  $__size_$i28 = ((($this1$i$i$i26)) + 4|0);
  HEAP32[$__size_$i28>>2] = $29;
 }
 while(1) {
  $30 = $__first$addr;
  $31 = $__last$addr;
  $cmp11 = ($30|0)!=($31|0);
  $32 = $__p;
  if (!($cmp11)) {
   break;
  }
  $33 = $__first$addr;
  __ZNSt3__211char_traitsIcE6assignERcRKc($32,$33);
  $34 = $__first$addr;
  $incdec$ptr = ((($34)) + 1|0);
  $__first$addr = $incdec$ptr;
  $35 = $__p;
  $incdec$ptr12 = ((($35)) + 1|0);
  $__p = $incdec$ptr12;
 }
 HEAP8[$ref$tmp>>0] = 0;
 __ZNSt3__211char_traitsIcE6assignERcRKc($32,$ref$tmp);
 STACKTOP = sp;return;
}
function __ZNSt3__211char_traitsIcE6assignERcRKc($__c1,$__c2) {
 $__c1 = $__c1|0;
 $__c2 = $__c2|0;
 var $0 = 0, $1 = 0, $2 = 0, $__c1$addr = 0, $__c2$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $__c1$addr = $__c1;
 $__c2$addr = $__c2;
 $0 = $__c2$addr;
 $1 = HEAP8[$0>>0]|0;
 $2 = $__c1$addr;
 HEAP8[$2>>0] = $1;
 STACKTOP = sp;return;
}
function __ZN10emscripten8internal11NoBaseClass6verifyI7MyClassEEvv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZN10emscripten8internal13getActualTypeI7MyClassEEPKvPT_($ptr) {
 $ptr = $ptr|0;
 var $0 = 0, $call = 0, $ptr$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $ptr$addr = $ptr;
 $0 = $ptr$addr;
 $call = (__ZN10emscripten8internal14getLightTypeIDI7MyClassEEPKvRKT_($0)|0);
 STACKTOP = sp;return ($call|0);
}
function __ZN10emscripten8internal11NoBaseClass11getUpcasterI7MyClassEEPFvvEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (0|0);
}
function __ZN10emscripten8internal11NoBaseClass13getDowncasterI7MyClassEEPFvvEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (0|0);
}
function __ZN10emscripten8internal14raw_destructorI7MyClassEEvPT_($ptr) {
 $ptr = $ptr|0;
 var $0 = 0, $isnull = 0, $ptr$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $ptr$addr = $ptr;
 $0 = $ptr$addr;
 $isnull = ($0|0)==(0|0);
 if ($isnull) {
  STACKTOP = sp;return;
 }
 __ZN7MyClassD2Ev($0);
 __ZdlPv($0);
 STACKTOP = sp;return;
}
function __ZN10emscripten8internal6TypeIDI7MyClassE3getEv() {
 var $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = (__ZN10emscripten8internal11LightTypeIDI7MyClassE3getEv()|0);
 return ($call|0);
}
function __ZN10emscripten8internal6TypeIDINS0_17AllowedRawPointerI7MyClassEEE3getEv() {
 var $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = (__ZN10emscripten8internal11LightTypeIDIP7MyClassE3getEv()|0);
 return ($call|0);
}
function __ZN10emscripten8internal6TypeIDINS0_17AllowedRawPointerIK7MyClassEEE3getEv() {
 var $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = (__ZN10emscripten8internal11LightTypeIDIPK7MyClassE3getEv()|0);
 return ($call|0);
}
function __ZN10emscripten8internal11NoBaseClass3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (0|0);
}
function __ZN10emscripten8internal14getLightTypeIDI7MyClassEEPKvRKT_($value) {
 $value = $value|0;
 var $value$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $value$addr = $value;
 STACKTOP = sp;return (248|0);
}
function __ZN7MyClassD2Ev($this) {
 $this = $this|0;
 var $this$addr = 0, $this1 = 0, $y = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $this$addr = $this;
 $this1 = $this$addr;
 $y = ((($this1)) + 4|0);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($y);
 STACKTOP = sp;return;
}
function __ZN10emscripten8internal11LightTypeIDI7MyClassE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (248|0);
}
function __ZN10emscripten8internal11LightTypeIDIP7MyClassE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (256|0);
}
function __ZN10emscripten8internal11LightTypeIDIPK7MyClassE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (272|0);
}
function __ZN10emscripten8internal19getGenericSignatureIJiiEEEPKcv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (10995|0);
}
function __ZN10emscripten8internal19getGenericSignatureIJvEEEPKcv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (10998|0);
}
function __ZN10emscripten8internal19getGenericSignatureIJviEEEPKcv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (11000|0);
}
function __ZN10emscripten8internal12operator_newI7MyClassJiNSt3__212basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEEEEPT_DpOT0_($args,$args1) {
 $args = $args|0;
 $args1 = $args1|0;
 var $$expand_i1_val = 0, $$expand_i1_val2 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__a$i$i = 0, $__i$i$i = 0;
 var $__str$addr$i = 0, $__t$addr$i = 0, $__t$addr$i$i = 0, $__t$addr$i6 = 0, $agg$tmp = 0, $args$addr = 0, $args$addr2 = 0, $arrayidx$i$i = 0, $call = 0, $cleanup$is_active = 0, $cleanup$is_active$pre_trunc = 0, $cleanup$isactive = 0, $cmp$i$i = 0, $ehselector$slot = 0, $exn = 0, $exn$slot = 0, $inc$i$i = 0, $sel = 0, $this$addr$i = 0, $this$addr$i$i = 0;
 var $this$addr$i$i$i = 0, $this$addr$i$i$i$i = 0, $this1$i = 0, $this1$i$i = 0, $this1$i$i$i = 0, $this1$i$i$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(80|0);
 $agg$tmp = sp + 8|0;
 $cleanup$isactive = sp + 68|0;
 $args$addr = $args;
 $args$addr2 = $args1;
 $call = (__Znwj(16)|0);
 $$expand_i1_val = 1;
 HEAP8[$cleanup$isactive>>0] = $$expand_i1_val;
 $0 = $args$addr;
 $__t$addr$i = $0;
 $1 = $__t$addr$i;
 $2 = HEAP32[$1>>2]|0;
 $3 = $args$addr2;
 $__t$addr$i6 = $3;
 $4 = $__t$addr$i6;
 $this$addr$i = $agg$tmp;
 $__str$addr$i = $4;
 $this1$i = $this$addr$i;
 $5 = $__str$addr$i;
 $__t$addr$i$i = $5;
 $6 = $__t$addr$i$i;
 ;HEAP32[$this1$i>>2]=HEAP32[$6>>2]|0;HEAP32[$this1$i+4>>2]=HEAP32[$6+4>>2]|0;HEAP32[$this1$i+8>>2]=HEAP32[$6+8>>2]|0;
 $7 = $__str$addr$i;
 $this$addr$i$i = $7;
 $this1$i$i = $this$addr$i$i;
 $this$addr$i$i$i = $this1$i$i;
 $this1$i$i$i = $this$addr$i$i$i;
 $this$addr$i$i$i$i = $this1$i$i$i;
 $this1$i$i$i$i = $this$addr$i$i$i$i;
 $__a$i$i = $this1$i$i$i$i;
 $__i$i$i = 0;
 while(1) {
  $8 = $__i$i$i;
  $cmp$i$i = ($8>>>0)<(3);
  if (!($cmp$i$i)) {
   break;
  }
  $9 = $__a$i$i;
  $10 = $__i$i$i;
  $arrayidx$i$i = (($9) + ($10<<2)|0);
  HEAP32[$arrayidx$i$i>>2] = 0;
  $11 = $__i$i$i;
  $inc$i$i = (($11) + 1)|0;
  $__i$i$i = $inc$i$i;
 }
 __THREW__ = 0;
 invoke_viii(384,($call|0),($2|0),($agg$tmp|0));
 $12 = __THREW__; __THREW__ = 0;
 $13 = $12&1;
 if (!($13)) {
  $$expand_i1_val2 = 0;
  HEAP8[$cleanup$isactive>>0] = $$expand_i1_val2;
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($agg$tmp);
  STACKTOP = sp;return ($call|0);
 }
 $14 = ___cxa_find_matching_catch_2()|0;
 $15 = tempRet0;
 $exn$slot = $14;
 $ehselector$slot = $15;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($agg$tmp);
 $cleanup$is_active$pre_trunc = HEAP8[$cleanup$isactive>>0]|0;
 $cleanup$is_active = $cleanup$is_active$pre_trunc&1;
 if (!($cleanup$is_active)) {
  $exn = $exn$slot;
  $sel = $ehselector$slot;
  ___resumeException($exn|0);
  // unreachable;
 }
 __ZdlPv($call);
 $exn = $exn$slot;
 $sel = $ehselector$slot;
 ___resumeException($exn|0);
 // unreachable;
 return (0)|0;
}
function __ZN10emscripten8internal7InvokerIP7MyClassJOiONSt3__212basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEEE6invokeEPFS3_S4_SC_EiPNS0_11BindingTypeISB_EUt_E($fn,$args,$args1) {
 $fn = $fn|0;
 $args = $args|0;
 $args1 = $args1|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $args$addr = 0, $args$addr2 = 0, $call = 0, $call4 = 0, $call6 = 0, $ehselector$slot = 0, $exn = 0, $exn$slot = 0, $fn$addr = 0, $ref$tmp = 0, $ref$tmp3 = 0;
 var $sel = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $ref$tmp = sp + 20|0;
 $ref$tmp3 = sp + 8|0;
 $fn$addr = $fn;
 $args$addr = $args;
 $args$addr2 = $args1;
 $0 = $fn$addr;
 $1 = $args$addr;
 $call = (__ZN10emscripten8internal11BindingTypeIOiE12fromWireTypeEi($1)|0);
 HEAP32[$ref$tmp>>2] = $call;
 $2 = $args$addr2;
 __ZN10emscripten8internal11BindingTypeIONSt3__212basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEE12fromWireTypeEPNS1_IS8_EUt_E($ref$tmp3,$2);
 __THREW__ = 0;
 $call4 = (invoke_iii($0|0,($ref$tmp|0),($ref$tmp3|0))|0);
 $3 = __THREW__; __THREW__ = 0;
 $4 = $3&1;
 if (!($4)) {
  __THREW__ = 0;
  $call6 = (invoke_ii(385,($call4|0))|0);
  $5 = __THREW__; __THREW__ = 0;
  $6 = $5&1;
  if (!($6)) {
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($ref$tmp3);
   STACKTOP = sp;return ($call6|0);
  }
 }
 $7 = ___cxa_find_matching_catch_2()|0;
 $8 = tempRet0;
 $exn$slot = $7;
 $ehselector$slot = $8;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($ref$tmp3);
 $exn = $exn$slot;
 $sel = $ehselector$slot;
 ___resumeException($exn|0);
 // unreachable;
 return (0)|0;
}
function __ZNK10emscripten8internal12WithPoliciesIJNS_18allow_raw_pointersEEE11ArgTypeListIJP7MyClassOiONSt3__212basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEEEE8getCountEv($this) {
 $this = $this|0;
 var $this$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $this$addr = $this;
 STACKTOP = sp;return 3;
}
function __ZNK10emscripten8internal12WithPoliciesIJNS_18allow_raw_pointersEEE11ArgTypeListIJP7MyClassOiONSt3__212basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEEEE8getTypesEv($this) {
 $this = $this|0;
 var $call = 0, $this$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $this$addr = $this;
 $call = (__ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJNS0_17AllowedRawPointerI7MyClassEEOiONSt3__212basic_stringIcNS7_11char_traitsIcEENS7_9allocatorIcEEEEEEEE3getEv()|0);
 STACKTOP = sp;return ($call|0);
}
function __ZN10emscripten8internal11BindingTypeIP7MyClassE10toWireTypeES3_($p) {
 $p = $p|0;
 var $0 = 0, $p$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $p$addr = $p;
 $0 = $p$addr;
 STACKTOP = sp;return ($0|0);
}
function __ZN10emscripten8internal11BindingTypeIOiE12fromWireTypeEi($wt) {
 $wt = $wt|0;
 var $0 = 0, $call = 0, $wt$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $wt$addr = $wt;
 $0 = $wt$addr;
 $call = (__ZN10emscripten8internal11BindingTypeIiE12fromWireTypeEi($0)|0);
 STACKTOP = sp;return ($call|0);
}
function __ZN10emscripten8internal11BindingTypeIONSt3__212basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEE12fromWireTypeEPNS1_IS8_EUt_E($agg$result,$wt) {
 $agg$result = $agg$result|0;
 $wt = $wt|0;
 var $0 = 0, $wt$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $wt$addr = $wt;
 $0 = $wt$addr;
 __ZN10emscripten8internal11BindingTypeINSt3__212basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEE12fromWireTypeEPNS9_Ut_E($agg$result,$0);
 STACKTOP = sp;return;
}
function __ZN10emscripten8internal11BindingTypeIiE12fromWireTypeEi($v) {
 $v = $v|0;
 var $0 = 0, $v$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $v$addr = $v;
 $0 = $v$addr;
 STACKTOP = sp;return ($0|0);
}
function __ZN10emscripten8internal11BindingTypeINSt3__212basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEE12fromWireTypeEPNS9_Ut_E($agg$result,$v) {
 $agg$result = $agg$result|0;
 $v = $v|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $__n$addr$i = 0, $__s$addr$i = 0, $data = 0, $this$addr$i = 0, $this$addr$i$i = 0, $this$addr$i$i$i = 0, $this$addr$i$i$i$i = 0, $this1$i = 0, $this1$i$i = 0, $this1$i$i$i = 0, $v$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $v$addr = $v;
 $0 = $v$addr;
 $data = ((($0)) + 4|0);
 $1 = $v$addr;
 $2 = HEAP32[$1>>2]|0;
 $this$addr$i = $agg$result;
 $__s$addr$i = $data;
 $__n$addr$i = $2;
 $this1$i = $this$addr$i;
 $this$addr$i$i = $this1$i;
 $this1$i$i = $this$addr$i$i;
 $this$addr$i$i$i = $this1$i$i;
 $this1$i$i$i = $this$addr$i$i$i;
 $this$addr$i$i$i$i = $this1$i$i$i;
 ;HEAP32[$this1$i$i$i>>2]=0|0;HEAP32[$this1$i$i$i+4>>2]=0|0;HEAP32[$this1$i$i$i+8>>2]=0|0;
 $3 = $__s$addr$i;
 $4 = $__n$addr$i;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($this1$i,$3,$4);
 STACKTOP = sp;return;
}
function __ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJNS0_17AllowedRawPointerI7MyClassEEOiONSt3__212basic_stringIcNS7_11char_traitsIcEENS7_9allocatorIcEEEEEEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (2320|0);
}
function __ZN10emscripten8internal19getGenericSignatureIJiiiiEEEPKcv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (11104|0);
}
function __ZN7MyClassC2EiNSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE($this,$x,$y) {
 $this = $this|0;
 $x = $x|0;
 $y = $y|0;
 var $0 = 0, $this$addr = 0, $this1 = 0, $x$addr = 0, $y3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $this$addr = $this;
 $x$addr = $x;
 $this1 = $this$addr;
 $0 = $x$addr;
 HEAP32[$this1>>2] = $0;
 $y3 = ((($this1)) + 4|0);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2ERKS5_($y3,$y);
 STACKTOP = sp;return;
}
function __ZN10emscripten8internal13MethodInvokerIM7MyClassFvvEvPS2_JEE6invokeERKS4_S5_($method,$wireThis) {
 $method = $method|0;
 $wireThis = $wireThis|0;
 var $$field = 0, $$field2 = 0, $$index1 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $call = 0, $memptr$adj$shifted = 0, $memptr$isvirtual = 0, $memptr$nonvirtualfn = 0, $memptr$virtualfn = 0, $method$addr = 0, $vtable = 0, $wireThis$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $method$addr = $method;
 $wireThis$addr = $wireThis;
 $0 = $wireThis$addr;
 $call = (__ZN10emscripten8internal11BindingTypeIP7MyClassE12fromWireTypeES3_($0)|0);
 $1 = $method$addr;
 $$field = HEAP32[$1>>2]|0;
 $$index1 = ((($1)) + 4|0);
 $$field2 = HEAP32[$$index1>>2]|0;
 $memptr$adj$shifted = $$field2 >> 1;
 $2 = (($call) + ($memptr$adj$shifted)|0);
 $3 = $$field2 & 1;
 $memptr$isvirtual = ($3|0)!=(0);
 if ($memptr$isvirtual) {
  $vtable = HEAP32[$2>>2]|0;
  $4 = (($vtable) + ($$field)|0);
  $memptr$virtualfn = HEAP32[$4>>2]|0;
  $5 = $memptr$virtualfn;
  FUNCTION_TABLE_vi[$5 & 1023]($2);
  STACKTOP = sp;return;
 } else {
  $memptr$nonvirtualfn = $$field;
  $5 = $memptr$nonvirtualfn;
  FUNCTION_TABLE_vi[$5 & 1023]($2);
  STACKTOP = sp;return;
 }
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJvNS0_17AllowedRawPointerI7MyClassEEEE8getCountEv($this) {
 $this = $this|0;
 var $this$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $this$addr = $this;
 STACKTOP = sp;return 2;
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJvNS0_17AllowedRawPointerI7MyClassEEEE8getTypesEv($this) {
 $this = $this|0;
 var $call = 0, $this$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $this$addr = $this;
 $call = (__ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJvNS0_17AllowedRawPointerI7MyClassEEEEEE3getEv()|0);
 STACKTOP = sp;return ($call|0);
}
function __ZN10emscripten8internal10getContextIM7MyClassFvvEEEPT_RKS5_($t) {
 $t = $t|0;
 var $$field = 0, $$field2 = 0, $$index1 = 0, $$index5 = 0, $0 = 0, $call = 0, $t$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $t$addr = $t;
 $call = (__Znwj(8)|0);
 $0 = $t$addr;
 $$field = HEAP32[$0>>2]|0;
 $$index1 = ((($0)) + 4|0);
 $$field2 = HEAP32[$$index1>>2]|0;
 HEAP32[$call>>2] = $$field;
 $$index5 = ((($call)) + 4|0);
 HEAP32[$$index5>>2] = $$field2;
 STACKTOP = sp;return ($call|0);
}
function __ZN10emscripten8internal11BindingTypeIP7MyClassE12fromWireTypeES3_($wt) {
 $wt = $wt|0;
 var $0 = 0, $wt$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $wt$addr = $wt;
 $0 = $wt$addr;
 STACKTOP = sp;return ($0|0);
}
function __ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJvNS0_17AllowedRawPointerI7MyClassEEEEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (2332|0);
}
function __ZN10emscripten8internal19getGenericSignatureIJviiEEEPKcv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (11109|0);
}
function __ZN10emscripten8internal12GetterPolicyIM7MyClassKFivEE3getIS2_EEiRKS4_RKT_($context,$ptr) {
 $context = $context|0;
 $ptr = $ptr|0;
 var $$field = 0, $$field2 = 0, $$index1 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $call = 0, $call1 = 0, $context$addr = 0, $memptr$adj$shifted = 0, $memptr$isvirtual = 0, $memptr$nonvirtualfn = 0, $memptr$virtualfn = 0, $ptr$addr = 0, $ref$tmp = 0, $vtable = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $ref$tmp = sp;
 $context$addr = $context;
 $ptr$addr = $ptr;
 $0 = $ptr$addr;
 $1 = $context$addr;
 $$field = HEAP32[$1>>2]|0;
 $$index1 = ((($1)) + 4|0);
 $$field2 = HEAP32[$$index1>>2]|0;
 $memptr$adj$shifted = $$field2 >> 1;
 $2 = (($0) + ($memptr$adj$shifted)|0);
 $3 = $$field2 & 1;
 $memptr$isvirtual = ($3|0)!=(0);
 if ($memptr$isvirtual) {
  $vtable = HEAP32[$2>>2]|0;
  $4 = (($vtable) + ($$field)|0);
  $memptr$virtualfn = HEAP32[$4>>2]|0;
  $5 = $memptr$virtualfn;
 } else {
  $memptr$nonvirtualfn = $$field;
  $5 = $memptr$nonvirtualfn;
 }
 $call = (FUNCTION_TABLE_ii[$5 & 1023]($2)|0);
 HEAP32[$ref$tmp>>2] = $call;
 $call1 = (__ZN10emscripten8internal11BindingTypeIiE10toWireTypeERKi($ref$tmp)|0);
 STACKTOP = sp;return ($call1|0);
}
function __ZN10emscripten8internal12SetterPolicyIM7MyClassFviEE3setIS2_EEvRKS4_RT_i($context,$ptr,$wt) {
 $context = $context|0;
 $ptr = $ptr|0;
 $wt = $wt|0;
 var $$field = 0, $$field2 = 0, $$index1 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $call = 0, $context$addr = 0, $memptr$adj$shifted = 0, $memptr$isvirtual = 0, $memptr$nonvirtualfn = 0, $memptr$virtualfn = 0, $ptr$addr = 0, $vtable = 0, $wt$addr = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $context$addr = $context;
 $ptr$addr = $ptr;
 $wt$addr = $wt;
 $0 = $ptr$addr;
 $1 = $context$addr;
 $$field = HEAP32[$1>>2]|0;
 $$index1 = ((($1)) + 4|0);
 $$field2 = HEAP32[$$index1>>2]|0;
 $memptr$adj$shifted = $$field2 >> 1;
 $2 = (($0) + ($memptr$adj$shifted)|0);
 $3 = $$field2 & 1;
 $memptr$isvirtual = ($3|0)!=(0);
 if ($memptr$isvirtual) {
  $vtable = HEAP32[$2>>2]|0;
  $4 = (($vtable) + ($$field)|0);
  $memptr$virtualfn = HEAP32[$4>>2]|0;
  $6 = $memptr$virtualfn;
 } else {
  $memptr$nonvirtualfn = $$field;
  $6 = $memptr$nonvirtualfn;
 }
 $5 = $wt$addr;
 $call = (__ZN10emscripten8internal11BindingTypeIiE12fromWireTypeEi($5)|0);
 FUNCTION_TABLE_vii[$6 & 1023]($2,$call);
 STACKTOP = sp;return;
}
function __ZN10emscripten8internal6TypeIDIiE3getEv() {
 var $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = (__ZN10emscripten8internal11LightTypeIDIiE3getEv()|0);
 return ($call|0);
}
function __ZN10emscripten8internal12GetterPolicyIM7MyClassKFivEE10getContextES4_($0) {
 $0 = $0|0;
 var $call = 0, $context$addr = 0, $context$addr$index4 = 0, $context$field = 0, $context$field2 = 0, $context$index1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $context$addr = sp;
 $context$field = HEAP32[$0>>2]|0;
 $context$index1 = ((($0)) + 4|0);
 $context$field2 = HEAP32[$context$index1>>2]|0;
 HEAP32[$context$addr>>2] = $context$field;
 $context$addr$index4 = ((($context$addr)) + 4|0);
 HEAP32[$context$addr$index4>>2] = $context$field2;
 $call = (__ZN10emscripten8internal10getContextIM7MyClassKFivEEEPT_RKS5_($context$addr)|0);
 STACKTOP = sp;return ($call|0);
}
function __ZN10emscripten8internal12SetterPolicyIM7MyClassFviEE10getContextES4_($0) {
 $0 = $0|0;
 var $call = 0, $context$addr = 0, $context$addr$index4 = 0, $context$field = 0, $context$field2 = 0, $context$index1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $context$addr = sp;
 $context$field = HEAP32[$0>>2]|0;
 $context$index1 = ((($0)) + 4|0);
 $context$field2 = HEAP32[$context$index1>>2]|0;
 HEAP32[$context$addr>>2] = $context$field;
 $context$addr$index4 = ((($context$addr)) + 4|0);
 HEAP32[$context$addr$index4>>2] = $context$field2;
 $call = (__ZN10emscripten8internal10getContextIM7MyClassFviEEEPT_RKS5_($context$addr)|0);
 STACKTOP = sp;return ($call|0);
}
function __ZN10emscripten8internal11BindingTypeIiE10toWireTypeERKi($v) {
 $v = $v|0;
 var $0 = 0, $1 = 0, $v$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $v$addr = $v;
 $0 = $v$addr;
 $1 = HEAP32[$0>>2]|0;
 STACKTOP = sp;return ($1|0);
}
function __ZN10emscripten8internal11LightTypeIDIiE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (2080|0);
}
function __ZN10emscripten8internal19getGenericSignatureIJiiiEEEPKcv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (11113|0);
}
function __ZN10emscripten8internal10getContextIM7MyClassKFivEEEPT_RKS5_($t) {
 $t = $t|0;
 var $$field = 0, $$field2 = 0, $$index1 = 0, $$index5 = 0, $0 = 0, $call = 0, $t$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $t$addr = $t;
 $call = (__Znwj(8)|0);
 $0 = $t$addr;
 $$field = HEAP32[$0>>2]|0;
 $$index1 = ((($0)) + 4|0);
 $$field2 = HEAP32[$$index1>>2]|0;
 HEAP32[$call>>2] = $$field;
 $$index5 = ((($call)) + 4|0);
 HEAP32[$$index5>>2] = $$field2;
 STACKTOP = sp;return ($call|0);
}
function __ZN10emscripten8internal19getGenericSignatureIJviiiEEEPKcv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (11117|0);
}
function __ZN10emscripten8internal10getContextIM7MyClassFviEEEPT_RKS5_($t) {
 $t = $t|0;
 var $$field = 0, $$field2 = 0, $$index1 = 0, $$index5 = 0, $0 = 0, $call = 0, $t$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $t$addr = $t;
 $call = (__Znwj(8)|0);
 $0 = $t$addr;
 $$field = HEAP32[$0>>2]|0;
 $$index1 = ((($0)) + 4|0);
 $$field2 = HEAP32[$$index1>>2]|0;
 HEAP32[$call>>2] = $$field;
 $$index5 = ((($call)) + 4|0);
 HEAP32[$$index5>>2] = $$field2;
 STACKTOP = sp;return ($call|0);
}
function __ZN10emscripten8internal7InvokerINSt3__212basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEJRK7MyClassEE6invokeEPFS8_SB_EPS9_($fn,$args) {
 $fn = $fn|0;
 $args = $args|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $args$addr = 0, $call = 0, $call1 = 0, $ehselector$slot = 0, $exn = 0, $exn$slot = 0, $fn$addr = 0, $ref$tmp = 0, $sel = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $ref$tmp = sp + 8|0;
 $fn$addr = $fn;
 $args$addr = $args;
 $0 = $fn$addr;
 $1 = $args$addr;
 $call = (__ZN10emscripten8internal18GenericBindingTypeI7MyClassE12fromWireTypeEPS2_($1)|0);
 FUNCTION_TABLE_vii[$0 & 1023]($ref$tmp,$call);
 __THREW__ = 0;
 $call1 = (invoke_ii(386,($ref$tmp|0))|0);
 $2 = __THREW__; __THREW__ = 0;
 $3 = $2&1;
 if ($3) {
  $4 = ___cxa_find_matching_catch_2()|0;
  $5 = tempRet0;
  $exn$slot = $4;
  $ehselector$slot = $5;
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($ref$tmp);
  $exn = $exn$slot;
  $sel = $ehselector$slot;
  ___resumeException($exn|0);
  // unreachable;
 } else {
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($ref$tmp);
  STACKTOP = sp;return ($call1|0);
 }
 return (0)|0;
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJNSt3__212basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEERK7MyClassEE8getCountEv($this) {
 $this = $this|0;
 var $this$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $this$addr = $this;
 STACKTOP = sp;return 2;
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJNSt3__212basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEERK7MyClassEE8getTypesEv($this) {
 $this = $this|0;
 var $call = 0, $this$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $this$addr = $this;
 $call = (__ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJNSt3__212basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEERK7MyClassEEEE3getEv()|0);
 STACKTOP = sp;return ($call|0);
}
function __ZN10emscripten8internal11BindingTypeINSt3__212basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEE10toWireTypeERKS8_($v) {
 $v = $v|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__p$addr$i$i = 0, $__r$addr$i$i$i$i = 0, $__size_$i23$i$i = 0, $__size_$i23$i$i106 = 0, $__size_$i23$i$i34 = 0, $__x$addr$i$i$i$i$i = 0, $add = 0, $and$i$i$i = 0, $and$i$i$i26 = 0, $and$i$i$i65 = 0, $and$i$i$i98 = 0, $call1 = 0;
 var $cond$i$i = 0, $cond$i$i117 = 0, $cond$i$i45 = 0, $cond$i$i76 = 0, $conv$i$i$i = 0, $conv$i$i$i25 = 0, $conv$i$i$i64 = 0, $conv$i$i$i97 = 0, $conv$i14$i$i = 0, $conv$i14$i$i115 = 0, $conv$i14$i$i43 = 0, $data = 0, $this$addr$i = 0, $this$addr$i$i = 0, $this$addr$i$i$i = 0, $this$addr$i$i$i$i = 0, $this$addr$i$i$i$i$i = 0, $this$addr$i$i$i$i$i11 = 0, $this$addr$i$i$i$i$i50 = 0, $this$addr$i$i$i$i$i83 = 0;
 var $this$addr$i$i$i$i12 = 0, $this$addr$i$i$i$i51 = 0, $this$addr$i$i$i$i84 = 0, $this$addr$i$i$i13 = 0, $this$addr$i$i$i13$i$i = 0, $this$addr$i$i$i15$i$i = 0, $this$addr$i$i$i15$i$i5 = 0, $this$addr$i$i$i15$i$i77 = 0, $this$addr$i$i$i4$i$i = 0, $this$addr$i$i$i4$i$i47 = 0, $this$addr$i$i$i4$i$i8 = 0, $this$addr$i$i$i4$i$i80 = 0, $this$addr$i$i$i52 = 0, $this$addr$i$i$i85 = 0, $this$addr$i$i14 = 0, $this$addr$i$i14$i$i = 0, $this$addr$i$i16$i$i = 0, $this$addr$i$i16$i$i6 = 0, $this$addr$i$i16$i$i78 = 0, $this$addr$i$i5$i$i = 0;
 var $this$addr$i$i5$i$i48 = 0, $this$addr$i$i5$i$i81 = 0, $this$addr$i$i5$i$i9 = 0, $this$addr$i$i53 = 0, $this$addr$i$i86 = 0, $this$addr$i15 = 0, $this$addr$i15$i$i = 0, $this$addr$i17$i$i = 0, $this$addr$i17$i$i7 = 0, $this$addr$i17$i$i79 = 0, $this$addr$i54 = 0, $this$addr$i6$i$i = 0, $this$addr$i6$i$i10 = 0, $this$addr$i6$i$i49 = 0, $this$addr$i6$i$i82 = 0, $this$addr$i87 = 0, $this1$i = 0, $this1$i$i = 0, $this1$i$i$i = 0, $this1$i$i$i$i = 0;
 var $this1$i$i$i$i$i = 0, $this1$i$i$i$i$i21 = 0, $this1$i$i$i$i$i60 = 0, $this1$i$i$i$i$i93 = 0, $this1$i$i$i$i20 = 0, $this1$i$i$i$i59 = 0, $this1$i$i$i$i92 = 0, $this1$i$i$i10$i$i = 0, $this1$i$i$i10$i$i111 = 0, $this1$i$i$i10$i$i39 = 0, $this1$i$i$i10$i$i72 = 0, $this1$i$i$i18 = 0, $this1$i$i$i19$i$i = 0, $this1$i$i$i21$i$i = 0, $this1$i$i$i21$i$i103 = 0, $this1$i$i$i21$i$i31 = 0, $this1$i$i$i57 = 0, $this1$i$i$i90 = 0, $this1$i$i17 = 0, $this1$i$i18$i$i = 0;
 var $this1$i$i20$i$i = 0, $this1$i$i20$i$i102 = 0, $this1$i$i20$i$i30 = 0, $this1$i$i56 = 0, $this1$i$i89 = 0, $this1$i$i9$i$i = 0, $this1$i$i9$i$i110 = 0, $this1$i$i9$i$i38 = 0, $this1$i$i9$i$i71 = 0, $this1$i16 = 0, $this1$i16$i$i = 0, $this1$i18$i$i = 0, $this1$i18$i$i100 = 0, $this1$i18$i$i28 = 0, $this1$i55 = 0, $this1$i7$i$i = 0, $this1$i7$i$i108 = 0, $this1$i7$i$i36 = 0, $this1$i7$i$i69 = 0, $this1$i88 = 0;
 var $tobool$i$i$i = 0, $tobool$i$i$i27 = 0, $tobool$i$i$i66 = 0, $tobool$i$i$i99 = 0, $v$addr = 0, $wt = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 208|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(208|0);
 $v$addr = $v;
 $0 = $v$addr;
 $this$addr$i = $0;
 $this1$i = $this$addr$i;
 $this$addr$i$i = $this1$i;
 $this1$i$i = $this$addr$i$i;
 $this$addr$i$i$i = $this1$i$i;
 $this1$i$i$i = $this$addr$i$i$i;
 $this$addr$i$i$i$i = $this1$i$i$i;
 $this1$i$i$i$i = $this$addr$i$i$i$i;
 $this$addr$i$i$i$i$i = $this1$i$i$i$i;
 $this1$i$i$i$i$i = $this$addr$i$i$i$i$i;
 $1 = ((($this1$i$i$i$i$i)) + 11|0);
 $2 = HEAP8[$1>>0]|0;
 $conv$i$i$i = $2&255;
 $and$i$i$i = $conv$i$i$i & 128;
 $tobool$i$i$i = ($and$i$i$i|0)!=(0);
 if ($tobool$i$i$i) {
  $this$addr$i17$i$i = $this1$i$i;
  $this1$i18$i$i = $this$addr$i17$i$i;
  $this$addr$i$i16$i$i = $this1$i18$i$i;
  $this1$i$i20$i$i = $this$addr$i$i16$i$i;
  $this$addr$i$i$i15$i$i = $this1$i$i20$i$i;
  $this1$i$i$i21$i$i = $this$addr$i$i$i15$i$i;
  $__size_$i23$i$i = ((($this1$i$i$i21$i$i)) + 4|0);
  $3 = HEAP32[$__size_$i23$i$i>>2]|0;
  $cond$i$i = $3;
 } else {
  $this$addr$i6$i$i = $this1$i$i;
  $this1$i7$i$i = $this$addr$i6$i$i;
  $this$addr$i$i5$i$i = $this1$i7$i$i;
  $this1$i$i9$i$i = $this$addr$i$i5$i$i;
  $this$addr$i$i$i4$i$i = $this1$i$i9$i$i;
  $this1$i$i$i10$i$i = $this$addr$i$i$i4$i$i;
  $4 = ((($this1$i$i$i10$i$i)) + 11|0);
  $5 = HEAP8[$4>>0]|0;
  $conv$i14$i$i = $5&255;
  $cond$i$i = $conv$i14$i$i;
 }
 $add = (4 + ($cond$i$i))|0;
 $call1 = (_malloc($add)|0);
 $wt = $call1;
 $6 = $v$addr;
 $this$addr$i87 = $6;
 $this1$i88 = $this$addr$i87;
 $this$addr$i$i86 = $this1$i88;
 $this1$i$i89 = $this$addr$i$i86;
 $this$addr$i$i$i85 = $this1$i$i89;
 $this1$i$i$i90 = $this$addr$i$i$i85;
 $this$addr$i$i$i$i84 = $this1$i$i$i90;
 $this1$i$i$i$i92 = $this$addr$i$i$i$i84;
 $this$addr$i$i$i$i$i83 = $this1$i$i$i$i92;
 $this1$i$i$i$i$i93 = $this$addr$i$i$i$i$i83;
 $7 = ((($this1$i$i$i$i$i93)) + 11|0);
 $8 = HEAP8[$7>>0]|0;
 $conv$i$i$i97 = $8&255;
 $and$i$i$i98 = $conv$i$i$i97 & 128;
 $tobool$i$i$i99 = ($and$i$i$i98|0)!=(0);
 if ($tobool$i$i$i99) {
  $this$addr$i17$i$i79 = $this1$i$i89;
  $this1$i18$i$i100 = $this$addr$i17$i$i79;
  $this$addr$i$i16$i$i78 = $this1$i18$i$i100;
  $this1$i$i20$i$i102 = $this$addr$i$i16$i$i78;
  $this$addr$i$i$i15$i$i77 = $this1$i$i20$i$i102;
  $this1$i$i$i21$i$i103 = $this$addr$i$i$i15$i$i77;
  $__size_$i23$i$i106 = ((($this1$i$i$i21$i$i103)) + 4|0);
  $9 = HEAP32[$__size_$i23$i$i106>>2]|0;
  $cond$i$i117 = $9;
 } else {
  $this$addr$i6$i$i82 = $this1$i$i89;
  $this1$i7$i$i108 = $this$addr$i6$i$i82;
  $this$addr$i$i5$i$i81 = $this1$i7$i$i108;
  $this1$i$i9$i$i110 = $this$addr$i$i5$i$i81;
  $this$addr$i$i$i4$i$i80 = $this1$i$i9$i$i110;
  $this1$i$i$i10$i$i111 = $this$addr$i$i$i4$i$i80;
  $10 = ((($this1$i$i$i10$i$i111)) + 11|0);
  $11 = HEAP8[$10>>0]|0;
  $conv$i14$i$i115 = $11&255;
  $cond$i$i117 = $conv$i14$i$i115;
 }
 $12 = $wt;
 HEAP32[$12>>2] = $cond$i$i117;
 $13 = $wt;
 $data = ((($13)) + 4|0);
 $14 = $v$addr;
 $this$addr$i54 = $14;
 $this1$i55 = $this$addr$i54;
 $this$addr$i$i53 = $this1$i55;
 $this1$i$i56 = $this$addr$i$i53;
 $this$addr$i$i$i52 = $this1$i$i56;
 $this1$i$i$i57 = $this$addr$i$i$i52;
 $this$addr$i$i$i$i51 = $this1$i$i$i57;
 $this1$i$i$i$i59 = $this$addr$i$i$i$i51;
 $this$addr$i$i$i$i$i50 = $this1$i$i$i$i59;
 $this1$i$i$i$i$i60 = $this$addr$i$i$i$i$i50;
 $15 = ((($this1$i$i$i$i$i60)) + 11|0);
 $16 = HEAP8[$15>>0]|0;
 $conv$i$i$i64 = $16&255;
 $and$i$i$i65 = $conv$i$i$i64 & 128;
 $tobool$i$i$i66 = ($and$i$i$i65|0)!=(0);
 if ($tobool$i$i$i66) {
  $this$addr$i15$i$i = $this1$i$i56;
  $this1$i16$i$i = $this$addr$i15$i$i;
  $this$addr$i$i14$i$i = $this1$i16$i$i;
  $this1$i$i18$i$i = $this$addr$i$i14$i$i;
  $this$addr$i$i$i13$i$i = $this1$i$i18$i$i;
  $this1$i$i$i19$i$i = $this$addr$i$i$i13$i$i;
  $17 = HEAP32[$this1$i$i$i19$i$i>>2]|0;
  $cond$i$i76 = $17;
 } else {
  $this$addr$i6$i$i49 = $this1$i$i56;
  $this1$i7$i$i69 = $this$addr$i6$i$i49;
  $this$addr$i$i5$i$i48 = $this1$i7$i$i69;
  $this1$i$i9$i$i71 = $this$addr$i$i5$i$i48;
  $this$addr$i$i$i4$i$i47 = $this1$i$i9$i$i71;
  $this1$i$i$i10$i$i72 = $this$addr$i$i$i4$i$i47;
  $__r$addr$i$i$i$i = $this1$i$i$i10$i$i72;
  $18 = $__r$addr$i$i$i$i;
  $__x$addr$i$i$i$i$i = $18;
  $19 = $__x$addr$i$i$i$i$i;
  $cond$i$i76 = $19;
 }
 $__p$addr$i$i = $cond$i$i76;
 $20 = $__p$addr$i$i;
 $21 = $v$addr;
 $this$addr$i15 = $21;
 $this1$i16 = $this$addr$i15;
 $this$addr$i$i14 = $this1$i16;
 $this1$i$i17 = $this$addr$i$i14;
 $this$addr$i$i$i13 = $this1$i$i17;
 $this1$i$i$i18 = $this$addr$i$i$i13;
 $this$addr$i$i$i$i12 = $this1$i$i$i18;
 $this1$i$i$i$i20 = $this$addr$i$i$i$i12;
 $this$addr$i$i$i$i$i11 = $this1$i$i$i$i20;
 $this1$i$i$i$i$i21 = $this$addr$i$i$i$i$i11;
 $22 = ((($this1$i$i$i$i$i21)) + 11|0);
 $23 = HEAP8[$22>>0]|0;
 $conv$i$i$i25 = $23&255;
 $and$i$i$i26 = $conv$i$i$i25 & 128;
 $tobool$i$i$i27 = ($and$i$i$i26|0)!=(0);
 if ($tobool$i$i$i27) {
  $this$addr$i17$i$i7 = $this1$i$i17;
  $this1$i18$i$i28 = $this$addr$i17$i$i7;
  $this$addr$i$i16$i$i6 = $this1$i18$i$i28;
  $this1$i$i20$i$i30 = $this$addr$i$i16$i$i6;
  $this$addr$i$i$i15$i$i5 = $this1$i$i20$i$i30;
  $this1$i$i$i21$i$i31 = $this$addr$i$i$i15$i$i5;
  $__size_$i23$i$i34 = ((($this1$i$i$i21$i$i31)) + 4|0);
  $24 = HEAP32[$__size_$i23$i$i34>>2]|0;
  $cond$i$i45 = $24;
  _memcpy(($data|0),($20|0),($cond$i$i45|0))|0;
  $27 = $wt;
  STACKTOP = sp;return ($27|0);
 } else {
  $this$addr$i6$i$i10 = $this1$i$i17;
  $this1$i7$i$i36 = $this$addr$i6$i$i10;
  $this$addr$i$i5$i$i9 = $this1$i7$i$i36;
  $this1$i$i9$i$i38 = $this$addr$i$i5$i$i9;
  $this$addr$i$i$i4$i$i8 = $this1$i$i9$i$i38;
  $this1$i$i$i10$i$i39 = $this$addr$i$i$i4$i$i8;
  $25 = ((($this1$i$i$i10$i$i39)) + 11|0);
  $26 = HEAP8[$25>>0]|0;
  $conv$i14$i$i43 = $26&255;
  $cond$i$i45 = $conv$i14$i$i43;
  _memcpy(($data|0),($20|0),($cond$i$i45|0))|0;
  $27 = $wt;
  STACKTOP = sp;return ($27|0);
 }
 return (0)|0;
}
function __ZN10emscripten8internal18GenericBindingTypeI7MyClassE12fromWireTypeEPS2_($p) {
 $p = $p|0;
 var $0 = 0, $p$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $p$addr = $p;
 $0 = $p$addr;
 STACKTOP = sp;return ($0|0);
}
function __ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJNSt3__212basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEERK7MyClassEEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (2340|0);
}
function __ZN10emscripten8internal7InvokerINSt3__212basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEJEE6invokeEPFS8_vE($fn) {
 $fn = $fn|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $call = 0, $ehselector$slot = 0, $exn = 0, $exn$slot = 0, $fn$addr = 0, $ref$tmp = 0, $sel = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $ref$tmp = sp + 8|0;
 $fn$addr = $fn;
 $0 = $fn$addr;
 FUNCTION_TABLE_vi[$0 & 1023]($ref$tmp);
 __THREW__ = 0;
 $call = (invoke_ii(386,($ref$tmp|0))|0);
 $1 = __THREW__; __THREW__ = 0;
 $2 = $1&1;
 if ($2) {
  $3 = ___cxa_find_matching_catch_2()|0;
  $4 = tempRet0;
  $exn$slot = $3;
  $ehselector$slot = $4;
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($ref$tmp);
  $exn = $exn$slot;
  $sel = $ehselector$slot;
  ___resumeException($exn|0);
  // unreachable;
 } else {
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($ref$tmp);
  STACKTOP = sp;return ($call|0);
 }
 return (0)|0;
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJNSt3__212basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEEEE8getCountEv($this) {
 $this = $this|0;
 var $this$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $this$addr = $this;
 STACKTOP = sp;return 1;
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJNSt3__212basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEEEE8getTypesEv($this) {
 $this = $this|0;
 var $call = 0, $this$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $this$addr = $this;
 $call = (__ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJNSt3__212basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEEEEE3getEv()|0);
 STACKTOP = sp;return ($call|0);
}
function __ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJNSt3__212basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEEEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (2348|0);
}
function __GLOBAL__sub_I_client_cpp() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 ___cxx_global_var_init();
 return;
}
function __GLOBAL__sub_I_bind_cpp() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 ___cxx_global_var_init_2();
 return;
}
function ___cxx_global_var_init_2() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN53EmscriptenBindingInitializer_native_and_builtin_typesC2Ev(22025);
 return;
}
function __ZN53EmscriptenBindingInitializer_native_and_builtin_typesC2Ev($this) {
 $this = $this|0;
 var $call = 0, $call2 = 0, $call3 = 0, $call4 = 0, $call5 = 0, $call6 = 0, $this$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $this$addr = $this;
 $call = (__ZN10emscripten8internal6TypeIDIvE3getEv()|0);
 __embind_register_void(($call|0),(11122|0));
 $call2 = (__ZN10emscripten8internal6TypeIDIbE3getEv()|0);
 __embind_register_bool(($call2|0),(11127|0),1,1,0);
 __ZN12_GLOBAL__N_1L16register_integerIcEEvPKc(11132);
 __ZN12_GLOBAL__N_1L16register_integerIaEEvPKc(11137);
 __ZN12_GLOBAL__N_1L16register_integerIhEEvPKc(11149);
 __ZN12_GLOBAL__N_1L16register_integerIsEEvPKc(11163);
 __ZN12_GLOBAL__N_1L16register_integerItEEvPKc(11169);
 __ZN12_GLOBAL__N_1L16register_integerIiEEvPKc(11184);
 __ZN12_GLOBAL__N_1L16register_integerIjEEvPKc(11188);
 __ZN12_GLOBAL__N_1L16register_integerIlEEvPKc(11201);
 __ZN12_GLOBAL__N_1L16register_integerImEEvPKc(11206);
 __ZN12_GLOBAL__N_1L14register_floatIfEEvPKc(11220);
 __ZN12_GLOBAL__N_1L14register_floatIdEEvPKc(11226);
 $call3 = (__ZN10emscripten8internal6TypeIDINSt3__212basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEE3getEv()|0);
 __embind_register_std_string(($call3|0),(11233|0));
 $call4 = (__ZN10emscripten8internal6TypeIDINSt3__212basic_stringIhNS2_11char_traitsIhEENS2_9allocatorIhEEEEE3getEv()|0);
 __embind_register_std_string(($call4|0),(11245|0));
 $call5 = (__ZN10emscripten8internal6TypeIDINSt3__212basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEEE3getEv()|0);
 __embind_register_std_wstring(($call5|0),4,(11278|0));
 $call6 = (__ZN10emscripten8internal6TypeIDINS_3valEE3getEv()|0);
 __embind_register_emval(($call6|0),(11291|0));
 __ZN12_GLOBAL__N_1L20register_memory_viewIcEEvPKc(11307);
 __ZN12_GLOBAL__N_1L20register_memory_viewIaEEvPKc(11337);
 __ZN12_GLOBAL__N_1L20register_memory_viewIhEEvPKc(11374);
 __ZN12_GLOBAL__N_1L20register_memory_viewIsEEvPKc(11413);
 __ZN12_GLOBAL__N_1L20register_memory_viewItEEvPKc(11444);
 __ZN12_GLOBAL__N_1L20register_memory_viewIiEEvPKc(11484);
 __ZN12_GLOBAL__N_1L20register_memory_viewIjEEvPKc(11513);
 __ZN12_GLOBAL__N_1L20register_memory_viewIlEEvPKc(11551);
 __ZN12_GLOBAL__N_1L20register_memory_viewImEEvPKc(11581);
 __ZN12_GLOBAL__N_1L20register_memory_viewIaEEvPKc(11620);
 __ZN12_GLOBAL__N_1L20register_memory_viewIhEEvPKc(11652);
 __ZN12_GLOBAL__N_1L20register_memory_viewIsEEvPKc(11685);
 __ZN12_GLOBAL__N_1L20register_memory_viewItEEvPKc(11718);
 __ZN12_GLOBAL__N_1L20register_memory_viewIiEEvPKc(11752);
 __ZN12_GLOBAL__N_1L20register_memory_viewIjEEvPKc(11785);
 __ZN12_GLOBAL__N_1L20register_memory_viewIfEEvPKc(11819);
 __ZN12_GLOBAL__N_1L20register_memory_viewIdEEvPKc(11850);
 __ZN12_GLOBAL__N_1L20register_memory_viewIeEEvPKc(11882);
 STACKTOP = sp;return;
}
function __ZN10emscripten8internal6TypeIDIvE3getEv() {
 var $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = (__ZN10emscripten8internal11LightTypeIDIvE3getEv()|0);
 return ($call|0);
}
function __ZN10emscripten8internal6TypeIDIbE3getEv() {
 var $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = (__ZN10emscripten8internal11LightTypeIDIbE3getEv()|0);
 return ($call|0);
}
function __ZN12_GLOBAL__N_1L16register_integerIcEEvPKc($name) {
 $name = $name|0;
 var $0 = 0, $call = 0, $conv = 0, $conv3 = 0, $name$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $name$addr = $name;
 $call = (__ZN10emscripten8internal6TypeIDIcE3getEv()|0);
 $0 = $name$addr;
 $conv = -128 << 24 >> 24;
 $conv3 = 127 << 24 >> 24;
 __embind_register_integer(($call|0),($0|0),1,($conv|0),($conv3|0));
 STACKTOP = sp;return;
}
function __ZN12_GLOBAL__N_1L16register_integerIaEEvPKc($name) {
 $name = $name|0;
 var $0 = 0, $call = 0, $conv = 0, $conv3 = 0, $name$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $name$addr = $name;
 $call = (__ZN10emscripten8internal6TypeIDIaE3getEv()|0);
 $0 = $name$addr;
 $conv = -128 << 24 >> 24;
 $conv3 = 127 << 24 >> 24;
 __embind_register_integer(($call|0),($0|0),1,($conv|0),($conv3|0));
 STACKTOP = sp;return;
}
function __ZN12_GLOBAL__N_1L16register_integerIhEEvPKc($name) {
 $name = $name|0;
 var $0 = 0, $call = 0, $conv = 0, $conv3 = 0, $name$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $name$addr = $name;
 $call = (__ZN10emscripten8internal6TypeIDIhE3getEv()|0);
 $0 = $name$addr;
 $conv = 0;
 $conv3 = 255;
 __embind_register_integer(($call|0),($0|0),1,($conv|0),($conv3|0));
 STACKTOP = sp;return;
}
function __ZN12_GLOBAL__N_1L16register_integerIsEEvPKc($name) {
 $name = $name|0;
 var $0 = 0, $call = 0, $conv = 0, $conv3 = 0, $name$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $name$addr = $name;
 $call = (__ZN10emscripten8internal6TypeIDIsE3getEv()|0);
 $0 = $name$addr;
 $conv = -32768 << 16 >> 16;
 $conv3 = 32767 << 16 >> 16;
 __embind_register_integer(($call|0),($0|0),2,($conv|0),($conv3|0));
 STACKTOP = sp;return;
}
function __ZN12_GLOBAL__N_1L16register_integerItEEvPKc($name) {
 $name = $name|0;
 var $0 = 0, $call = 0, $conv = 0, $conv3 = 0, $name$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $name$addr = $name;
 $call = (__ZN10emscripten8internal6TypeIDItE3getEv()|0);
 $0 = $name$addr;
 $conv = 0;
 $conv3 = 65535;
 __embind_register_integer(($call|0),($0|0),2,($conv|0),($conv3|0));
 STACKTOP = sp;return;
}
function __ZN12_GLOBAL__N_1L16register_integerIiEEvPKc($name) {
 $name = $name|0;
 var $0 = 0, $call = 0, $name$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $name$addr = $name;
 $call = (__ZN10emscripten8internal6TypeIDIiE3getEv()|0);
 $0 = $name$addr;
 __embind_register_integer(($call|0),($0|0),4,-2147483648,2147483647);
 STACKTOP = sp;return;
}
function __ZN12_GLOBAL__N_1L16register_integerIjEEvPKc($name) {
 $name = $name|0;
 var $0 = 0, $call = 0, $name$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $name$addr = $name;
 $call = (__ZN10emscripten8internal6TypeIDIjE3getEv()|0);
 $0 = $name$addr;
 __embind_register_integer(($call|0),($0|0),4,0,-1);
 STACKTOP = sp;return;
}
function __ZN12_GLOBAL__N_1L16register_integerIlEEvPKc($name) {
 $name = $name|0;
 var $0 = 0, $call = 0, $name$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $name$addr = $name;
 $call = (__ZN10emscripten8internal6TypeIDIlE3getEv()|0);
 $0 = $name$addr;
 __embind_register_integer(($call|0),($0|0),4,-2147483648,2147483647);
 STACKTOP = sp;return;
}
function __ZN12_GLOBAL__N_1L16register_integerImEEvPKc($name) {
 $name = $name|0;
 var $0 = 0, $call = 0, $name$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $name$addr = $name;
 $call = (__ZN10emscripten8internal6TypeIDImE3getEv()|0);
 $0 = $name$addr;
 __embind_register_integer(($call|0),($0|0),4,0,-1);
 STACKTOP = sp;return;
}
function __ZN12_GLOBAL__N_1L14register_floatIfEEvPKc($name) {
 $name = $name|0;
 var $0 = 0, $call = 0, $name$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $name$addr = $name;
 $call = (__ZN10emscripten8internal6TypeIDIfE3getEv()|0);
 $0 = $name$addr;
 __embind_register_float(($call|0),($0|0),4);
 STACKTOP = sp;return;
}
function __ZN12_GLOBAL__N_1L14register_floatIdEEvPKc($name) {
 $name = $name|0;
 var $0 = 0, $call = 0, $name$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $name$addr = $name;
 $call = (__ZN10emscripten8internal6TypeIDIdE3getEv()|0);
 $0 = $name$addr;
 __embind_register_float(($call|0),($0|0),8);
 STACKTOP = sp;return;
}
function __ZN10emscripten8internal6TypeIDINSt3__212basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEE3getEv() {
 var $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = (__ZN10emscripten8internal11LightTypeIDINSt3__212basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEE3getEv()|0);
 return ($call|0);
}
function __ZN10emscripten8internal6TypeIDINSt3__212basic_stringIhNS2_11char_traitsIhEENS2_9allocatorIhEEEEE3getEv() {
 var $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = (__ZN10emscripten8internal11LightTypeIDINSt3__212basic_stringIhNS2_11char_traitsIhEENS2_9allocatorIhEEEEE3getEv()|0);
 return ($call|0);
}
function __ZN10emscripten8internal6TypeIDINSt3__212basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEEE3getEv() {
 var $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = (__ZN10emscripten8internal11LightTypeIDINSt3__212basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEEE3getEv()|0);
 return ($call|0);
}
function __ZN10emscripten8internal6TypeIDINS_3valEE3getEv() {
 var $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = (__ZN10emscripten8internal11LightTypeIDINS_3valEE3getEv()|0);
 return ($call|0);
}
function __ZN12_GLOBAL__N_1L20register_memory_viewIcEEvPKc($name) {
 $name = $name|0;
 var $0 = 0, $call = 0, $call1 = 0, $name$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $name$addr = $name;
 $call = (__ZN10emscripten8internal6TypeIDINS_11memory_viewIcEEE3getEv()|0);
 $call1 = (__ZN12_GLOBAL__N_118getTypedArrayIndexIcEENS_15TypedArrayIndexEv()|0);
 $0 = $name$addr;
 __embind_register_memory_view(($call|0),($call1|0),($0|0));
 STACKTOP = sp;return;
}
function __ZN12_GLOBAL__N_1L20register_memory_viewIaEEvPKc($name) {
 $name = $name|0;
 var $0 = 0, $call = 0, $call1 = 0, $name$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $name$addr = $name;
 $call = (__ZN10emscripten8internal6TypeIDINS_11memory_viewIaEEE3getEv()|0);
 $call1 = (__ZN12_GLOBAL__N_118getTypedArrayIndexIaEENS_15TypedArrayIndexEv()|0);
 $0 = $name$addr;
 __embind_register_memory_view(($call|0),($call1|0),($0|0));
 STACKTOP = sp;return;
}
function __ZN12_GLOBAL__N_1L20register_memory_viewIhEEvPKc($name) {
 $name = $name|0;
 var $0 = 0, $call = 0, $call1 = 0, $name$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $name$addr = $name;
 $call = (__ZN10emscripten8internal6TypeIDINS_11memory_viewIhEEE3getEv()|0);
 $call1 = (__ZN12_GLOBAL__N_118getTypedArrayIndexIhEENS_15TypedArrayIndexEv()|0);
 $0 = $name$addr;
 __embind_register_memory_view(($call|0),($call1|0),($0|0));
 STACKTOP = sp;return;
}
function __ZN12_GLOBAL__N_1L20register_memory_viewIsEEvPKc($name) {
 $name = $name|0;
 var $0 = 0, $call = 0, $call1 = 0, $name$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $name$addr = $name;
 $call = (__ZN10emscripten8internal6TypeIDINS_11memory_viewIsEEE3getEv()|0);
 $call1 = (__ZN12_GLOBAL__N_118getTypedArrayIndexIsEENS_15TypedArrayIndexEv()|0);
 $0 = $name$addr;
 __embind_register_memory_view(($call|0),($call1|0),($0|0));
 STACKTOP = sp;return;
}
function __ZN12_GLOBAL__N_1L20register_memory_viewItEEvPKc($name) {
 $name = $name|0;
 var $0 = 0, $call = 0, $call1 = 0, $name$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $name$addr = $name;
 $call = (__ZN10emscripten8internal6TypeIDINS_11memory_viewItEEE3getEv()|0);
 $call1 = (__ZN12_GLOBAL__N_118getTypedArrayIndexItEENS_15TypedArrayIndexEv()|0);
 $0 = $name$addr;
 __embind_register_memory_view(($call|0),($call1|0),($0|0));
 STACKTOP = sp;return;
}
function __ZN12_GLOBAL__N_1L20register_memory_viewIiEEvPKc($name) {
 $name = $name|0;
 var $0 = 0, $call = 0, $call1 = 0, $name$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $name$addr = $name;
 $call = (__ZN10emscripten8internal6TypeIDINS_11memory_viewIiEEE3getEv()|0);
 $call1 = (__ZN12_GLOBAL__N_118getTypedArrayIndexIiEENS_15TypedArrayIndexEv()|0);
 $0 = $name$addr;
 __embind_register_memory_view(($call|0),($call1|0),($0|0));
 STACKTOP = sp;return;
}
function __ZN12_GLOBAL__N_1L20register_memory_viewIjEEvPKc($name) {
 $name = $name|0;
 var $0 = 0, $call = 0, $call1 = 0, $name$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $name$addr = $name;
 $call = (__ZN10emscripten8internal6TypeIDINS_11memory_viewIjEEE3getEv()|0);
 $call1 = (__ZN12_GLOBAL__N_118getTypedArrayIndexIjEENS_15TypedArrayIndexEv()|0);
 $0 = $name$addr;
 __embind_register_memory_view(($call|0),($call1|0),($0|0));
 STACKTOP = sp;return;
}
function __ZN12_GLOBAL__N_1L20register_memory_viewIlEEvPKc($name) {
 $name = $name|0;
 var $0 = 0, $call = 0, $call1 = 0, $name$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $name$addr = $name;
 $call = (__ZN10emscripten8internal6TypeIDINS_11memory_viewIlEEE3getEv()|0);
 $call1 = (__ZN12_GLOBAL__N_118getTypedArrayIndexIlEENS_15TypedArrayIndexEv()|0);
 $0 = $name$addr;
 __embind_register_memory_view(($call|0),($call1|0),($0|0));
 STACKTOP = sp;return;
}
function __ZN12_GLOBAL__N_1L20register_memory_viewImEEvPKc($name) {
 $name = $name|0;
 var $0 = 0, $call = 0, $call1 = 0, $name$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $name$addr = $name;
 $call = (__ZN10emscripten8internal6TypeIDINS_11memory_viewImEEE3getEv()|0);
 $call1 = (__ZN12_GLOBAL__N_118getTypedArrayIndexImEENS_15TypedArrayIndexEv()|0);
 $0 = $name$addr;
 __embind_register_memory_view(($call|0),($call1|0),($0|0));
 STACKTOP = sp;return;
}
function __ZN12_GLOBAL__N_1L20register_memory_viewIfEEvPKc($name) {
 $name = $name|0;
 var $0 = 0, $call = 0, $call1 = 0, $name$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $name$addr = $name;
 $call = (__ZN10emscripten8internal6TypeIDINS_11memory_viewIfEEE3getEv()|0);
 $call1 = (__ZN12_GLOBAL__N_118getTypedArrayIndexIfEENS_15TypedArrayIndexEv()|0);
 $0 = $name$addr;
 __embind_register_memory_view(($call|0),($call1|0),($0|0));
 STACKTOP = sp;return;
}
function __ZN12_GLOBAL__N_1L20register_memory_viewIdEEvPKc($name) {
 $name = $name|0;
 var $0 = 0, $call = 0, $call1 = 0, $name$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $name$addr = $name;
 $call = (__ZN10emscripten8internal6TypeIDINS_11memory_viewIdEEE3getEv()|0);
 $call1 = (__ZN12_GLOBAL__N_118getTypedArrayIndexIdEENS_15TypedArrayIndexEv()|0);
 $0 = $name$addr;
 __embind_register_memory_view(($call|0),($call1|0),($0|0));
 STACKTOP = sp;return;
}
function __ZN12_GLOBAL__N_1L20register_memory_viewIeEEvPKc($name) {
 $name = $name|0;
 var $0 = 0, $call = 0, $call1 = 0, $name$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $name$addr = $name;
 $call = (__ZN10emscripten8internal6TypeIDINS_11memory_viewIeEEE3getEv()|0);
 $call1 = (__ZN12_GLOBAL__N_118getTypedArrayIndexIeEENS_15TypedArrayIndexEv()|0);
 $0 = $name$addr;
 __embind_register_memory_view(($call|0),($call1|0),($0|0));
 STACKTOP = sp;return;
}
function __ZN10emscripten8internal6TypeIDINS_11memory_viewIeEEE3getEv() {
 var $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = (__ZN10emscripten8internal11LightTypeIDINS_11memory_viewIeEEE3getEv()|0);
 return ($call|0);
}
function __ZN12_GLOBAL__N_118getTypedArrayIndexIeEENS_15TypedArrayIndexEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 7;
}
function __ZN10emscripten8internal11LightTypeIDINS_11memory_viewIeEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (320|0);
}
function __ZN10emscripten8internal6TypeIDINS_11memory_viewIdEEE3getEv() {
 var $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = (__ZN10emscripten8internal11LightTypeIDINS_11memory_viewIdEEE3getEv()|0);
 return ($call|0);
}
function __ZN12_GLOBAL__N_118getTypedArrayIndexIdEENS_15TypedArrayIndexEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 7;
}
function __ZN10emscripten8internal11LightTypeIDINS_11memory_viewIdEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (328|0);
}
function __ZN10emscripten8internal6TypeIDINS_11memory_viewIfEEE3getEv() {
 var $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = (__ZN10emscripten8internal11LightTypeIDINS_11memory_viewIfEEE3getEv()|0);
 return ($call|0);
}
function __ZN12_GLOBAL__N_118getTypedArrayIndexIfEENS_15TypedArrayIndexEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 6;
}
function __ZN10emscripten8internal11LightTypeIDINS_11memory_viewIfEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (336|0);
}
function __ZN10emscripten8internal6TypeIDINS_11memory_viewImEEE3getEv() {
 var $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = (__ZN10emscripten8internal11LightTypeIDINS_11memory_viewImEEE3getEv()|0);
 return ($call|0);
}
function __ZN12_GLOBAL__N_118getTypedArrayIndexImEENS_15TypedArrayIndexEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 5;
}
function __ZN10emscripten8internal11LightTypeIDINS_11memory_viewImEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (344|0);
}
function __ZN10emscripten8internal6TypeIDINS_11memory_viewIlEEE3getEv() {
 var $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = (__ZN10emscripten8internal11LightTypeIDINS_11memory_viewIlEEE3getEv()|0);
 return ($call|0);
}
function __ZN12_GLOBAL__N_118getTypedArrayIndexIlEENS_15TypedArrayIndexEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 4;
}
function __ZN10emscripten8internal11LightTypeIDINS_11memory_viewIlEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (352|0);
}
function __ZN10emscripten8internal6TypeIDINS_11memory_viewIjEEE3getEv() {
 var $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = (__ZN10emscripten8internal11LightTypeIDINS_11memory_viewIjEEE3getEv()|0);
 return ($call|0);
}
function __ZN12_GLOBAL__N_118getTypedArrayIndexIjEENS_15TypedArrayIndexEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 5;
}
function __ZN10emscripten8internal11LightTypeIDINS_11memory_viewIjEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (360|0);
}
function __ZN10emscripten8internal6TypeIDINS_11memory_viewIiEEE3getEv() {
 var $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = (__ZN10emscripten8internal11LightTypeIDINS_11memory_viewIiEEE3getEv()|0);
 return ($call|0);
}
function __ZN12_GLOBAL__N_118getTypedArrayIndexIiEENS_15TypedArrayIndexEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 4;
}
function __ZN10emscripten8internal11LightTypeIDINS_11memory_viewIiEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (368|0);
}
function __ZN10emscripten8internal6TypeIDINS_11memory_viewItEEE3getEv() {
 var $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = (__ZN10emscripten8internal11LightTypeIDINS_11memory_viewItEEE3getEv()|0);
 return ($call|0);
}
function __ZN12_GLOBAL__N_118getTypedArrayIndexItEENS_15TypedArrayIndexEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 3;
}
function __ZN10emscripten8internal11LightTypeIDINS_11memory_viewItEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (376|0);
}
function __ZN10emscripten8internal6TypeIDINS_11memory_viewIsEEE3getEv() {
 var $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = (__ZN10emscripten8internal11LightTypeIDINS_11memory_viewIsEEE3getEv()|0);
 return ($call|0);
}
function __ZN12_GLOBAL__N_118getTypedArrayIndexIsEENS_15TypedArrayIndexEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 2;
}
function __ZN10emscripten8internal11LightTypeIDINS_11memory_viewIsEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (384|0);
}
function __ZN10emscripten8internal6TypeIDINS_11memory_viewIhEEE3getEv() {
 var $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = (__ZN10emscripten8internal11LightTypeIDINS_11memory_viewIhEEE3getEv()|0);
 return ($call|0);
}
function __ZN12_GLOBAL__N_118getTypedArrayIndexIhEENS_15TypedArrayIndexEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 1;
}
function __ZN10emscripten8internal11LightTypeIDINS_11memory_viewIhEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (392|0);
}
function __ZN10emscripten8internal6TypeIDINS_11memory_viewIaEEE3getEv() {
 var $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = (__ZN10emscripten8internal11LightTypeIDINS_11memory_viewIaEEE3getEv()|0);
 return ($call|0);
}
function __ZN12_GLOBAL__N_118getTypedArrayIndexIaEENS_15TypedArrayIndexEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 0;
}
function __ZN10emscripten8internal11LightTypeIDINS_11memory_viewIaEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (400|0);
}
function __ZN10emscripten8internal6TypeIDINS_11memory_viewIcEEE3getEv() {
 var $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = (__ZN10emscripten8internal11LightTypeIDINS_11memory_viewIcEEE3getEv()|0);
 return ($call|0);
}
function __ZN12_GLOBAL__N_118getTypedArrayIndexIcEENS_15TypedArrayIndexEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 0;
}
function __ZN10emscripten8internal11LightTypeIDINS_11memory_viewIcEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (408|0);
}
function __ZN10emscripten8internal11LightTypeIDINS_3valEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (416|0);
}
function __ZN10emscripten8internal11LightTypeIDINSt3__212basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (424|0);
}
function __ZN10emscripten8internal11LightTypeIDINSt3__212basic_stringIhNS2_11char_traitsIhEENS2_9allocatorIhEEEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (448|0);
}
function __ZN10emscripten8internal11LightTypeIDINSt3__212basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (296|0);
}
function __ZN10emscripten8internal6TypeIDIdE3getEv() {
 var $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = (__ZN10emscripten8internal11LightTypeIDIdE3getEv()|0);
 return ($call|0);
}
function __ZN10emscripten8internal11LightTypeIDIdE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (2120|0);
}
function __ZN10emscripten8internal6TypeIDIfE3getEv() {
 var $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = (__ZN10emscripten8internal11LightTypeIDIfE3getEv()|0);
 return ($call|0);
}
function __ZN10emscripten8internal11LightTypeIDIfE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (2112|0);
}
function __ZN10emscripten8internal6TypeIDImE3getEv() {
 var $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = (__ZN10emscripten8internal11LightTypeIDImE3getEv()|0);
 return ($call|0);
}
function __ZN10emscripten8internal11LightTypeIDImE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (2104|0);
}
function __ZN10emscripten8internal6TypeIDIlE3getEv() {
 var $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = (__ZN10emscripten8internal11LightTypeIDIlE3getEv()|0);
 return ($call|0);
}
function __ZN10emscripten8internal11LightTypeIDIlE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (2096|0);
}
function __ZN10emscripten8internal6TypeIDIjE3getEv() {
 var $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = (__ZN10emscripten8internal11LightTypeIDIjE3getEv()|0);
 return ($call|0);
}
function __ZN10emscripten8internal11LightTypeIDIjE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (2088|0);
}
function __ZN10emscripten8internal6TypeIDItE3getEv() {
 var $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = (__ZN10emscripten8internal11LightTypeIDItE3getEv()|0);
 return ($call|0);
}
function __ZN10emscripten8internal11LightTypeIDItE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (2072|0);
}
function __ZN10emscripten8internal6TypeIDIsE3getEv() {
 var $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = (__ZN10emscripten8internal11LightTypeIDIsE3getEv()|0);
 return ($call|0);
}
function __ZN10emscripten8internal11LightTypeIDIsE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (2064|0);
}
function __ZN10emscripten8internal6TypeIDIhE3getEv() {
 var $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = (__ZN10emscripten8internal11LightTypeIDIhE3getEv()|0);
 return ($call|0);
}
function __ZN10emscripten8internal11LightTypeIDIhE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (2048|0);
}
function __ZN10emscripten8internal6TypeIDIaE3getEv() {
 var $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = (__ZN10emscripten8internal11LightTypeIDIaE3getEv()|0);
 return ($call|0);
}
function __ZN10emscripten8internal11LightTypeIDIaE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (2056|0);
}
function __ZN10emscripten8internal6TypeIDIcE3getEv() {
 var $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = (__ZN10emscripten8internal11LightTypeIDIcE3getEv()|0);
 return ($call|0);
}
function __ZN10emscripten8internal11LightTypeIDIcE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (2040|0);
}
function __ZN10emscripten8internal11LightTypeIDIbE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (2032|0);
}
function __ZN10emscripten8internal11LightTypeIDIvE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (2016|0);
}
function ___getTypeName($ti) {
 $ti = $ti|0;
 var $0 = 0, $1 = 0, $__type_name$i = 0, $call1 = 0, $this$addr$i = 0, $this1$i = 0, $ti$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $ti$addr = $ti;
 $0 = $ti$addr;
 $this$addr$i = $0;
 $this1$i = $this$addr$i;
 $__type_name$i = ((($this1$i)) + 4|0);
 $1 = HEAP32[$__type_name$i>>2]|0;
 $call1 = (___strdup($1)|0);
 STACKTOP = sp;return ($call1|0);
}
function _emscripten_get_global_libc() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (19464|0);
}
function ___stdio_close($f) {
 $f = $f|0;
 var $0 = 0, $call = 0, $call1 = 0, $call2 = 0, $fd = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 $fd = ((($f)) + 60|0);
 $0 = HEAP32[$fd>>2]|0;
 $call = (_dummy_570($0)|0);
 HEAP32[$vararg_buffer>>2] = $call;
 $call1 = (___syscall6(6,($vararg_buffer|0))|0);
 $call2 = (___syscall_ret($call1)|0);
 STACKTOP = sp;return ($call2|0);
}
function ___stdio_write($f,$buf,$len) {
 $f = $f|0;
 $buf = $buf|0;
 $len = $len|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $add = 0, $add$ptr = 0, $add$ptr32 = 0, $buf8 = 0, $buf_size = 0, $call = 0, $call40 = 0;
 var $call7 = 0, $call741 = 0, $call746 = 0, $cmp = 0, $cmp12 = 0, $cmp17 = 0, $cmp24 = 0, $cmp42 = 0, $cnt$0 = 0, $dec = 0, $fd = 0, $incdec$ptr = 0, $iov$043 = 0, $iov$1 = 0, $iov_base2 = 0, $iov_len = 0, $iov_len19 = 0, $iov_len23 = 0, $iov_len3 = 0, $iov_len36 = 0;
 var $iovcnt$045 = 0, $iovcnt$1 = 0, $iovs = 0, $or = 0, $rem$044 = 0, $retval$0 = 0, $sub = 0, $sub$ptr$sub = 0, $sub21 = 0, $sub28 = 0, $sub37 = 0, $vararg_buffer = 0, $vararg_buffer3 = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr6 = 0, $vararg_ptr7 = 0, $wbase = 0, $wend = 0, $wend14 = 0;
 var $wpos = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer = sp;
 $iovs = sp + 32|0;
 $wbase = ((($f)) + 28|0);
 $0 = HEAP32[$wbase>>2]|0;
 HEAP32[$iovs>>2] = $0;
 $iov_len = ((($iovs)) + 4|0);
 $wpos = ((($f)) + 20|0);
 $1 = HEAP32[$wpos>>2]|0;
 $sub$ptr$sub = (($1) - ($0))|0;
 HEAP32[$iov_len>>2] = $sub$ptr$sub;
 $iov_base2 = ((($iovs)) + 8|0);
 HEAP32[$iov_base2>>2] = $buf;
 $iov_len3 = ((($iovs)) + 12|0);
 HEAP32[$iov_len3>>2] = $len;
 $add = (($sub$ptr$sub) + ($len))|0;
 $fd = ((($f)) + 60|0);
 $2 = HEAP32[$fd>>2]|0;
 $3 = $iovs;
 HEAP32[$vararg_buffer>>2] = $2;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $3;
 $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
 HEAP32[$vararg_ptr2>>2] = 2;
 $call40 = (___syscall146(146,($vararg_buffer|0))|0);
 $call741 = (___syscall_ret($call40)|0);
 $cmp42 = ($add|0)==($call741|0);
 L1: do {
  if ($cmp42) {
   label = 3;
  } else {
   $call746 = $call741;$iov$043 = $iovs;$iovcnt$045 = 2;$rem$044 = $add;
   while(1) {
    $cmp12 = ($call746|0)<(0);
    if ($cmp12) {
     break;
    }
    $sub21 = (($rem$044) - ($call746))|0;
    $iov_len23 = ((($iov$043)) + 4|0);
    $8 = HEAP32[$iov_len23>>2]|0;
    $cmp24 = ($call746>>>0)>($8>>>0);
    $incdec$ptr = ((($iov$043)) + 8|0);
    $iov$1 = $cmp24 ? $incdec$ptr : $iov$043;
    $dec = $cmp24 << 31 >> 31;
    $iovcnt$1 = (($dec) + ($iovcnt$045))|0;
    $sub28 = $cmp24 ? $8 : 0;
    $cnt$0 = (($call746) - ($sub28))|0;
    $9 = HEAP32[$iov$1>>2]|0;
    $add$ptr32 = (($9) + ($cnt$0)|0);
    HEAP32[$iov$1>>2] = $add$ptr32;
    $iov_len36 = ((($iov$1)) + 4|0);
    $10 = HEAP32[$iov_len36>>2]|0;
    $sub37 = (($10) - ($cnt$0))|0;
    HEAP32[$iov_len36>>2] = $sub37;
    $11 = HEAP32[$fd>>2]|0;
    $12 = $iov$1;
    HEAP32[$vararg_buffer3>>2] = $11;
    $vararg_ptr6 = ((($vararg_buffer3)) + 4|0);
    HEAP32[$vararg_ptr6>>2] = $12;
    $vararg_ptr7 = ((($vararg_buffer3)) + 8|0);
    HEAP32[$vararg_ptr7>>2] = $iovcnt$1;
    $call = (___syscall146(146,($vararg_buffer3|0))|0);
    $call7 = (___syscall_ret($call)|0);
    $cmp = ($sub21|0)==($call7|0);
    if ($cmp) {
     label = 3;
     break L1;
    } else {
     $call746 = $call7;$iov$043 = $iov$1;$iovcnt$045 = $iovcnt$1;$rem$044 = $sub21;
    }
   }
   $wend14 = ((($f)) + 16|0);
   HEAP32[$wend14>>2] = 0;
   HEAP32[$wbase>>2] = 0;
   HEAP32[$wpos>>2] = 0;
   $6 = HEAP32[$f>>2]|0;
   $or = $6 | 32;
   HEAP32[$f>>2] = $or;
   $cmp17 = ($iovcnt$045|0)==(2);
   if ($cmp17) {
    $retval$0 = 0;
   } else {
    $iov_len19 = ((($iov$043)) + 4|0);
    $7 = HEAP32[$iov_len19>>2]|0;
    $sub = (($len) - ($7))|0;
    $retval$0 = $sub;
   }
  }
 } while(0);
 if ((label|0) == 3) {
  $buf8 = ((($f)) + 44|0);
  $4 = HEAP32[$buf8>>2]|0;
  $buf_size = ((($f)) + 48|0);
  $5 = HEAP32[$buf_size>>2]|0;
  $add$ptr = (($4) + ($5)|0);
  $wend = ((($f)) + 16|0);
  HEAP32[$wend>>2] = $add$ptr;
  HEAP32[$wbase>>2] = $4;
  HEAP32[$wpos>>2] = $4;
  $retval$0 = $len;
 }
 STACKTOP = sp;return ($retval$0|0);
}
function ___stdio_seek($f,$off,$whence) {
 $f = $f|0;
 $off = $off|0;
 $whence = $whence|0;
 var $$pre = 0, $0 = 0, $1 = 0, $2 = 0, $call = 0, $call1 = 0, $cmp = 0, $fd = 0, $ret = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr3 = 0, $vararg_ptr4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $vararg_buffer = sp;
 $ret = sp + 20|0;
 $fd = ((($f)) + 60|0);
 $0 = HEAP32[$fd>>2]|0;
 $1 = $ret;
 HEAP32[$vararg_buffer>>2] = $0;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = 0;
 $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
 HEAP32[$vararg_ptr2>>2] = $off;
 $vararg_ptr3 = ((($vararg_buffer)) + 12|0);
 HEAP32[$vararg_ptr3>>2] = $1;
 $vararg_ptr4 = ((($vararg_buffer)) + 16|0);
 HEAP32[$vararg_ptr4>>2] = $whence;
 $call = (___syscall140(140,($vararg_buffer|0))|0);
 $call1 = (___syscall_ret($call)|0);
 $cmp = ($call1|0)<(0);
 if ($cmp) {
  HEAP32[$ret>>2] = -1;
  $2 = -1;
 } else {
  $$pre = HEAP32[$ret>>2]|0;
  $2 = $$pre;
 }
 STACKTOP = sp;return ($2|0);
}
function ___syscall_ret($r) {
 $r = $r|0;
 var $call = 0, $cmp = 0, $retval$0 = 0, $sub = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $cmp = ($r>>>0)>(4294963200);
 if ($cmp) {
  $sub = (0 - ($r))|0;
  $call = (___errno_location()|0);
  HEAP32[$call>>2] = $sub;
  $retval$0 = -1;
 } else {
  $retval$0 = $r;
 }
 return ($retval$0|0);
}
function ___errno_location() {
 var $call = 0, $errno_val = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = (___pthread_self_103()|0);
 $errno_val = ((($call)) + 64|0);
 return ($errno_val|0);
}
function ___pthread_self_103() {
 var $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = (_pthread_self()|0);
 return ($call|0);
}
function _pthread_self() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (2756|0);
}
function _dummy_570($fd) {
 $fd = $fd|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return ($fd|0);
}
function ___stdout_write($f,$buf,$len) {
 $f = $f|0;
 $buf = $buf|0;
 $len = $len|0;
 var $0 = 0, $1 = 0, $2 = 0, $and = 0, $call = 0, $call3 = 0, $fd = 0, $lbf = 0, $tobool = 0, $tobool2 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $write = 0, $wsz = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $vararg_buffer = sp;
 $wsz = sp + 16|0;
 $write = ((($f)) + 36|0);
 HEAP32[$write>>2] = 37;
 $0 = HEAP32[$f>>2]|0;
 $and = $0 & 64;
 $tobool = ($and|0)==(0);
 if ($tobool) {
  $fd = ((($f)) + 60|0);
  $1 = HEAP32[$fd>>2]|0;
  $2 = $wsz;
  HEAP32[$vararg_buffer>>2] = $1;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = 21523;
  $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
  HEAP32[$vararg_ptr2>>2] = $2;
  $call = (___syscall54(54,($vararg_buffer|0))|0);
  $tobool2 = ($call|0)==(0);
  if (!($tobool2)) {
   $lbf = ((($f)) + 75|0);
   HEAP8[$lbf>>0] = -1;
  }
 }
 $call3 = (___stdio_write($f,$buf,$len)|0);
 STACKTOP = sp;return ($call3|0);
}
function _strtoull_l($s,$p,$base,$loc) {
 $s = $s|0;
 $p = $p|0;
 $base = $base|0;
 $loc = $loc|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_strtoull($s,$p,$base)|0);
 $1 = tempRet0;
 tempRet0 = ($1);
 return ($0|0);
}
function _strtoull($s,$p,$base) {
 $s = $s|0;
 $p = $p|0;
 $base = $base|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_strtox_742($s,$p,$base,-1,-1)|0);
 $1 = tempRet0;
 tempRet0 = ($1);
 return ($0|0);
}
function _strtox_742($s,$p,$base,$0,$1) {
 $s = $s|0;
 $p = $p|0;
 $base = $base|0;
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $add = 0, $add$ptr = 0, $add$ptr$sink = 0, $add$ptr5 = 0, $buf = 0, $cmp = 0, $f = 0, $lock = 0, $rend1 = 0, $rpos = 0, $shcnt = 0, $sub$ptr$sub = 0, $tobool = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(128|0);
 $f = sp;
 HEAP32[$f>>2] = 0;
 $rpos = ((($f)) + 4|0);
 HEAP32[$rpos>>2] = $s;
 $buf = ((($f)) + 44|0);
 HEAP32[$buf>>2] = $s;
 $cmp = ($s|0)<(0|0);
 $add$ptr = ((($s)) + 2147483647|0);
 $add$ptr$sink = $cmp ? (-1) : $add$ptr;
 $rend1 = ((($f)) + 8|0);
 HEAP32[$rend1>>2] = $add$ptr$sink;
 $lock = ((($f)) + 76|0);
 HEAP32[$lock>>2] = -1;
 ___shlim($f,0);
 $2 = (___intscan($f,$base,1,$0,$1)|0);
 $3 = tempRet0;
 $tobool = ($p|0)==(0|0);
 if (!($tobool)) {
  $shcnt = ((($f)) + 108|0);
  $4 = HEAP32[$shcnt>>2]|0;
  $5 = HEAP32[$rpos>>2]|0;
  $6 = HEAP32[$rend1>>2]|0;
  $sub$ptr$sub = (($5) + ($4))|0;
  $add = (($sub$ptr$sub) - ($6))|0;
  $add$ptr5 = (($s) + ($add)|0);
  HEAP32[$p>>2] = $add$ptr5;
 }
 tempRet0 = ($3);
 STACKTOP = sp;return ($2|0);
}
function ___shlim($f,$lim) {
 $f = $f|0;
 $lim = $lim|0;
 var $$sink = 0, $0 = 0, $1 = 0, $add$ptr = 0, $cmp = 0, $or$cond = 0, $rend = 0, $rpos = 0, $shcnt = 0, $shend4 = 0, $shlim = 0, $sub$ptr$lhs$cast = 0, $sub$ptr$rhs$cast = 0, $sub$ptr$sub = 0, $tobool = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $shlim = ((($f)) + 104|0);
 HEAP32[$shlim>>2] = $lim;
 $rend = ((($f)) + 8|0);
 $0 = HEAP32[$rend>>2]|0;
 $rpos = ((($f)) + 4|0);
 $1 = HEAP32[$rpos>>2]|0;
 $sub$ptr$lhs$cast = $0;
 $sub$ptr$rhs$cast = $1;
 $sub$ptr$sub = (($sub$ptr$lhs$cast) - ($sub$ptr$rhs$cast))|0;
 $shcnt = ((($f)) + 108|0);
 HEAP32[$shcnt>>2] = $sub$ptr$sub;
 $tobool = ($lim|0)!=(0);
 $cmp = ($sub$ptr$sub|0)>($lim|0);
 $or$cond = $tobool & $cmp;
 $add$ptr = (($1) + ($lim)|0);
 $$sink = $or$cond ? $add$ptr : $0;
 $shend4 = ((($f)) + 100|0);
 HEAP32[$shend4>>2] = $$sink;
 return;
}
function ___intscan($f,$base,$pok,$0,$1) {
 $f = $f|0;
 $base = $base|0;
 $pok = $pok|0;
 $0 = $0|0;
 $1 = $1|0;
 var $$base132 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0;
 var $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0;
 var $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0;
 var $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0;
 var $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $add = 0, $add249 = 0, $and = 0;
 var $and174 = 0, $arrayidx = 0, $arrayidx175 = 0, $arrayidx178 = 0, $arrayidx178157 = 0, $arrayidx206 = 0, $arrayidx237 = 0, $arrayidx237175 = 0, $arrayidx266 = 0, $arrayidx305 = 0, $arrayidx311 = 0, $arrayidx93 = 0, $base$addr$1 = 0, $base$addr$1134 = 0, $base$addr$1135 = 0, $c$0 = 0, $c$1 = 0, $c$1136 = 0, $c$2$be = 0, $c$2$lcssa = 0;
 var $c$3$be = 0, $c$3184 = 0, $c$4$be = 0, $c$4$lcssa = 0, $c$5$be = 0, $c$6$be = 0, $c$6$lcssa = 0, $c$7$be = 0, $c$7167 = 0, $c$8 = 0, $c$9$be = 0, $call = 0, $call105 = 0, $call126 = 0, $call160 = 0, $call200 = 0, $call21 = 0, $call231 = 0, $call260 = 0, $call299 = 0;
 var $call3 = 0, $call326 = 0, $call330 = 0, $call351 = 0, $call357 = 0, $call4 = 0, $call42 = 0, $call57 = 0, $cmp = 0, $cmp1 = 0, $cmp108 = 0, $cmp112 = 0, $cmp112191 = 0, $cmp114 = 0, $cmp119 = 0, $cmp132 = 0, $cmp132183 = 0, $cmp14 = 0, $cmp153 = 0, $cmp165 = 0;
 var $cmp180 = 0, $cmp180159 = 0, $cmp183 = 0, $cmp193 = 0, $cmp208 = 0, $cmp208152 = 0, $cmp224 = 0, $cmp239 = 0, $cmp239177 = 0, $cmp242 = 0, $cmp25 = 0, $cmp253 = 0, $cmp268 = 0, $cmp268166 = 0, $cmp292 = 0, $cmp30 = 0, $cmp307 = 0, $cmp313 = 0, $cmp319 = 0, $cmp35 = 0;
 var $cmp45 = 0, $cmp50 = 0, $cmp61 = 0, $cmp7 = 0, $cmp95 = 0, $cond = 0, $cond44 = 0, $cond59 = 0, $conv = 0, $conv124 = 0, $conv158 = 0, $conv176 = 0, $conv179 = 0, $conv179158 = 0, $conv179161 = 0, $conv19 = 0, $conv198 = 0, $conv207 = 0, $conv207151 = 0, $conv229 = 0;
 var $conv238 = 0, $conv238176 = 0, $conv238179 = 0, $conv258 = 0, $conv267 = 0, $conv267165 = 0, $conv297 = 0, $conv306 = 0, $conv312 = 0, $conv324 = 0, $conv40 = 0, $conv55 = 0, $conv94 = 0, $incdec$ptr = 0, $incdec$ptr102 = 0, $incdec$ptr123 = 0, $incdec$ptr157 = 0, $incdec$ptr18 = 0, $incdec$ptr197 = 0, $incdec$ptr228 = 0;
 var $incdec$ptr257 = 0, $incdec$ptr296 = 0, $incdec$ptr323 = 0, $incdec$ptr340 = 0, $incdec$ptr39 = 0, $incdec$ptr54 = 0, $incdec$ptr68 = 0, $incdec$ptr77 = 0, $mul = 0, $mul173 = 0, $mul246 = 0, $neg$0 = 0, $neg$0$ = 0, $neg$1 = 0, $or = 0, $or$cond = 0, $or$cond154 = 0, $or$cond2 = 0, $or$cond3 = 0, $or$cond5 = 0;
 var $or189 = 0, $rpos = 0, $shend = 0, $shl = 0, $shr = 0, $sub = 0, $sub111 = 0, $sub111190 = 0, $sub111193 = 0, $sub131 = 0, $sub131182 = 0, $sub131186 = 0, $sub170 = 0, $tobool = 0, $tobool171 = 0, $tobool337 = 0, $tobool349 = 0, $tobool65 = 0, $tobool71 = 0, $tobool99 = 0;
 var $x$0192 = 0, $x$1160 = 0, $x$2178 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $cmp = ($base>>>0)>(36);
 L1: do {
  if ($cmp) {
   $call = (___errno_location()|0);
   HEAP32[$call>>2] = 22;
   $150 = 0;$151 = 0;
  } else {
   $rpos = ((($f)) + 4|0);
   $shend = ((($f)) + 100|0);
   while(1) {
    $2 = HEAP32[$rpos>>2]|0;
    $3 = HEAP32[$shend>>2]|0;
    $cmp1 = ($2>>>0)<($3>>>0);
    if ($cmp1) {
     $incdec$ptr = ((($2)) + 1|0);
     HEAP32[$rpos>>2] = $incdec$ptr;
     $4 = HEAP8[$2>>0]|0;
     $conv = $4&255;
     $cond = $conv;
    } else {
     $call3 = (___shgetc($f)|0);
     $cond = $call3;
    }
    $call4 = (_isspace($cond)|0);
    $tobool = ($call4|0)==(0);
    if ($tobool) {
     break;
    }
   }
   L11: do {
    switch ($cond|0) {
    case 43: case 45:  {
     $cmp7 = ($cond|0)==(45);
     $sub = $cmp7 << 31 >> 31;
     $5 = HEAP32[$rpos>>2]|0;
     $6 = HEAP32[$shend>>2]|0;
     $cmp14 = ($5>>>0)<($6>>>0);
     if ($cmp14) {
      $incdec$ptr18 = ((($5)) + 1|0);
      HEAP32[$rpos>>2] = $incdec$ptr18;
      $7 = HEAP8[$5>>0]|0;
      $conv19 = $7&255;
      $c$0 = $conv19;$neg$0 = $sub;
      break L11;
     } else {
      $call21 = (___shgetc($f)|0);
      $c$0 = $call21;$neg$0 = $sub;
      break L11;
     }
     break;
    }
    default: {
     $c$0 = $cond;$neg$0 = 0;
    }
    }
   } while(0);
   $cmp25 = ($base|0)==(0);
   $8 = $base | 16;
   $9 = ($8|0)==(16);
   $cmp30 = ($c$0|0)==(48);
   $or$cond2 = $9 & $cmp30;
   do {
    if ($or$cond2) {
     $10 = HEAP32[$rpos>>2]|0;
     $11 = HEAP32[$shend>>2]|0;
     $cmp35 = ($10>>>0)<($11>>>0);
     if ($cmp35) {
      $incdec$ptr39 = ((($10)) + 1|0);
      HEAP32[$rpos>>2] = $incdec$ptr39;
      $12 = HEAP8[$10>>0]|0;
      $conv40 = $12&255;
      $cond44 = $conv40;
     } else {
      $call42 = (___shgetc($f)|0);
      $cond44 = $call42;
     }
     $or = $cond44 | 32;
     $cmp45 = ($or|0)==(120);
     if (!($cmp45)) {
      if ($cmp25) {
       $base$addr$1135 = 8;$c$1136 = $cond44;
       label = 46;
       break;
      } else {
       $base$addr$1 = $base;$c$1 = $cond44;
       label = 32;
       break;
      }
     }
     $13 = HEAP32[$rpos>>2]|0;
     $14 = HEAP32[$shend>>2]|0;
     $cmp50 = ($13>>>0)<($14>>>0);
     if ($cmp50) {
      $incdec$ptr54 = ((($13)) + 1|0);
      HEAP32[$rpos>>2] = $incdec$ptr54;
      $15 = HEAP8[$13>>0]|0;
      $conv55 = $15&255;
      $cond59 = $conv55;
     } else {
      $call57 = (___shgetc($f)|0);
      $cond59 = $call57;
     }
     $arrayidx = ((12437) + ($cond59)|0);
     $16 = HEAP8[$arrayidx>>0]|0;
     $cmp61 = ($16&255)>(15);
     if ($cmp61) {
      $17 = HEAP32[$shend>>2]|0;
      $tobool65 = ($17|0)!=(0|0);
      if ($tobool65) {
       $18 = HEAP32[$rpos>>2]|0;
       $incdec$ptr68 = ((($18)) + -1|0);
       HEAP32[$rpos>>2] = $incdec$ptr68;
      }
      $tobool71 = ($pok|0)==(0);
      if ($tobool71) {
       ___shlim($f,0);
       $150 = 0;$151 = 0;
       break L1;
      }
      if (!($tobool65)) {
       $150 = 0;$151 = 0;
       break L1;
      }
      $19 = HEAP32[$rpos>>2]|0;
      $incdec$ptr77 = ((($19)) + -1|0);
      HEAP32[$rpos>>2] = $incdec$ptr77;
      $150 = 0;$151 = 0;
      break L1;
     } else {
      $base$addr$1135 = 16;$c$1136 = $cond59;
      label = 46;
     }
    } else {
     $$base132 = $cmp25 ? 10 : $base;
     $arrayidx93 = ((12437) + ($c$0)|0);
     $20 = HEAP8[$arrayidx93>>0]|0;
     $conv94 = $20&255;
     $cmp95 = ($conv94>>>0)<($$base132>>>0);
     if ($cmp95) {
      $base$addr$1 = $$base132;$c$1 = $c$0;
      label = 32;
     } else {
      $21 = HEAP32[$shend>>2]|0;
      $tobool99 = ($21|0)==(0|0);
      if (!($tobool99)) {
       $22 = HEAP32[$rpos>>2]|0;
       $incdec$ptr102 = ((($22)) + -1|0);
       HEAP32[$rpos>>2] = $incdec$ptr102;
      }
      ___shlim($f,0);
      $call105 = (___errno_location()|0);
      HEAP32[$call105>>2] = 22;
      $150 = 0;$151 = 0;
      break L1;
     }
    }
   } while(0);
   L43: do {
    if ((label|0) == 32) {
     $cmp108 = ($base$addr$1|0)==(10);
     if ($cmp108) {
      $sub111190 = (($c$1) + -48)|0;
      $cmp112191 = ($sub111190>>>0)<(10);
      if ($cmp112191) {
       $sub111193 = $sub111190;$x$0192 = 0;
       while(1) {
        $mul = ($x$0192*10)|0;
        $add = (($mul) + ($sub111193))|0;
        $23 = HEAP32[$rpos>>2]|0;
        $24 = HEAP32[$shend>>2]|0;
        $cmp119 = ($23>>>0)<($24>>>0);
        if ($cmp119) {
         $incdec$ptr123 = ((($23)) + 1|0);
         HEAP32[$rpos>>2] = $incdec$ptr123;
         $25 = HEAP8[$23>>0]|0;
         $conv124 = $25&255;
         $c$2$be = $conv124;
        } else {
         $call126 = (___shgetc($f)|0);
         $c$2$be = $call126;
        }
        $sub111 = (($c$2$be) + -48)|0;
        $cmp112 = ($sub111>>>0)<(10);
        $cmp114 = ($add>>>0)<(429496729);
        $26 = $cmp112 & $cmp114;
        if ($26) {
         $sub111193 = $sub111;$x$0192 = $add;
        } else {
         break;
        }
       }
       $152 = $add;$153 = 0;$c$2$lcssa = $c$2$be;
      } else {
       $152 = 0;$153 = 0;$c$2$lcssa = $c$1;
      }
      $sub131182 = (($c$2$lcssa) + -48)|0;
      $cmp132183 = ($sub131182>>>0)<(10);
      if ($cmp132183) {
       $27 = $152;$28 = $153;$c$3184 = $c$2$lcssa;$sub131186 = $sub131182;
       while(1) {
        $29 = (___muldi3(($27|0),($28|0),10,0)|0);
        $30 = tempRet0;
        $31 = ($sub131186|0)<(0);
        $32 = $31 << 31 >> 31;
        $33 = $sub131186 ^ -1;
        $34 = $32 ^ -1;
        $35 = ($30>>>0)>($34>>>0);
        $36 = ($29>>>0)>($33>>>0);
        $37 = ($30|0)==($34|0);
        $38 = $37 & $36;
        $39 = $35 | $38;
        if ($39) {
         $154 = $27;$155 = $28;$base$addr$1134 = 10;$c$8 = $c$3184;
         label = 72;
         break L43;
        }
        $40 = (_i64Add(($29|0),($30|0),($sub131186|0),($32|0))|0);
        $41 = tempRet0;
        $42 = HEAP32[$rpos>>2]|0;
        $43 = HEAP32[$shend>>2]|0;
        $cmp153 = ($42>>>0)<($43>>>0);
        if ($cmp153) {
         $incdec$ptr157 = ((($42)) + 1|0);
         HEAP32[$rpos>>2] = $incdec$ptr157;
         $44 = HEAP8[$42>>0]|0;
         $conv158 = $44&255;
         $c$3$be = $conv158;
        } else {
         $call160 = (___shgetc($f)|0);
         $c$3$be = $call160;
        }
        $sub131 = (($c$3$be) + -48)|0;
        $cmp132 = ($sub131>>>0)<(10);
        $45 = ($41>>>0)<(429496729);
        $46 = ($40>>>0)<(2576980378);
        $47 = ($41|0)==(429496729);
        $48 = $47 & $46;
        $49 = $45 | $48;
        $or$cond3 = $cmp132 & $49;
        if ($or$cond3) {
         $27 = $40;$28 = $41;$c$3184 = $c$3$be;$sub131186 = $sub131;
        } else {
         break;
        }
       }
       $cmp165 = ($sub131>>>0)>(9);
       if ($cmp165) {
        $127 = $41;$129 = $40;$neg$1 = $neg$0;
       } else {
        $154 = $40;$155 = $41;$base$addr$1134 = 10;$c$8 = $c$3$be;
        label = 72;
       }
      } else {
       $127 = $153;$129 = $152;$neg$1 = $neg$0;
      }
     } else {
      $base$addr$1135 = $base$addr$1;$c$1136 = $c$1;
      label = 46;
     }
    }
   } while(0);
   L63: do {
    if ((label|0) == 46) {
     $sub170 = (($base$addr$1135) + -1)|0;
     $and = $sub170 & $base$addr$1135;
     $tobool171 = ($and|0)==(0);
     if ($tobool171) {
      $mul173 = ($base$addr$1135*23)|0;
      $shr = $mul173 >>> 5;
      $and174 = $shr & 7;
      $arrayidx175 = (12693 + ($and174)|0);
      $51 = HEAP8[$arrayidx175>>0]|0;
      $conv176 = $51 << 24 >> 24;
      $arrayidx178157 = ((12437) + ($c$1136)|0);
      $52 = HEAP8[$arrayidx178157>>0]|0;
      $conv179158 = $52&255;
      $cmp180159 = ($conv179158>>>0)<($base$addr$1135>>>0);
      if ($cmp180159) {
       $conv179161 = $conv179158;$x$1160 = 0;
       while(1) {
        $shl = $x$1160 << $conv176;
        $or189 = $conv179161 | $shl;
        $53 = HEAP32[$rpos>>2]|0;
        $54 = HEAP32[$shend>>2]|0;
        $cmp193 = ($53>>>0)<($54>>>0);
        if ($cmp193) {
         $incdec$ptr197 = ((($53)) + 1|0);
         HEAP32[$rpos>>2] = $incdec$ptr197;
         $55 = HEAP8[$53>>0]|0;
         $conv198 = $55&255;
         $c$4$be = $conv198;
        } else {
         $call200 = (___shgetc($f)|0);
         $c$4$be = $call200;
        }
        $arrayidx178 = ((12437) + ($c$4$be)|0);
        $56 = HEAP8[$arrayidx178>>0]|0;
        $conv179 = $56&255;
        $cmp180 = ($conv179>>>0)<($base$addr$1135>>>0);
        $cmp183 = ($or189>>>0)<(134217728);
        $57 = $cmp183 & $cmp180;
        if ($57) {
         $conv179161 = $conv179;$x$1160 = $or189;
        } else {
         break;
        }
       }
       $60 = $56;$62 = 0;$64 = $or189;$c$4$lcssa = $c$4$be;
      } else {
       $60 = $52;$62 = 0;$64 = 0;$c$4$lcssa = $c$1136;
      }
      $58 = (_bitshift64Lshr(-1,-1,($conv176|0))|0);
      $59 = tempRet0;
      $conv207151 = $60&255;
      $cmp208152 = ($conv207151>>>0)>=($base$addr$1135>>>0);
      $61 = ($62>>>0)>($59>>>0);
      $63 = ($64>>>0)>($58>>>0);
      $65 = ($62|0)==($59|0);
      $66 = $65 & $63;
      $67 = $61 | $66;
      $or$cond154 = $cmp208152 | $67;
      if ($or$cond154) {
       $154 = $64;$155 = $62;$base$addr$1134 = $base$addr$1135;$c$8 = $c$4$lcssa;
       label = 72;
       break;
      } else {
       $68 = $64;$69 = $62;$73 = $60;
      }
      while(1) {
       $70 = (_bitshift64Shl(($68|0),($69|0),($conv176|0))|0);
       $71 = tempRet0;
       $72 = $73&255;
       $74 = $72 | $70;
       $75 = HEAP32[$rpos>>2]|0;
       $76 = HEAP32[$shend>>2]|0;
       $cmp224 = ($75>>>0)<($76>>>0);
       if ($cmp224) {
        $incdec$ptr228 = ((($75)) + 1|0);
        HEAP32[$rpos>>2] = $incdec$ptr228;
        $77 = HEAP8[$75>>0]|0;
        $conv229 = $77&255;
        $c$5$be = $conv229;
       } else {
        $call231 = (___shgetc($f)|0);
        $c$5$be = $call231;
       }
       $arrayidx206 = ((12437) + ($c$5$be)|0);
       $78 = HEAP8[$arrayidx206>>0]|0;
       $conv207 = $78&255;
       $cmp208 = ($conv207>>>0)>=($base$addr$1135>>>0);
       $79 = ($71>>>0)>($59>>>0);
       $80 = ($74>>>0)>($58>>>0);
       $81 = ($71|0)==($59|0);
       $82 = $81 & $80;
       $83 = $79 | $82;
       $or$cond = $cmp208 | $83;
       if ($or$cond) {
        $154 = $74;$155 = $71;$base$addr$1134 = $base$addr$1135;$c$8 = $c$5$be;
        label = 72;
        break L63;
       } else {
        $68 = $74;$69 = $71;$73 = $78;
       }
      }
     }
     $arrayidx237175 = ((12437) + ($c$1136)|0);
     $50 = HEAP8[$arrayidx237175>>0]|0;
     $conv238176 = $50&255;
     $cmp239177 = ($conv238176>>>0)<($base$addr$1135>>>0);
     if ($cmp239177) {
      $conv238179 = $conv238176;$x$2178 = 0;
      while(1) {
       $mul246 = Math_imul($x$2178, $base$addr$1135)|0;
       $add249 = (($conv238179) + ($mul246))|0;
       $84 = HEAP32[$rpos>>2]|0;
       $85 = HEAP32[$shend>>2]|0;
       $cmp253 = ($84>>>0)<($85>>>0);
       if ($cmp253) {
        $incdec$ptr257 = ((($84)) + 1|0);
        HEAP32[$rpos>>2] = $incdec$ptr257;
        $86 = HEAP8[$84>>0]|0;
        $conv258 = $86&255;
        $c$6$be = $conv258;
       } else {
        $call260 = (___shgetc($f)|0);
        $c$6$be = $call260;
       }
       $arrayidx237 = ((12437) + ($c$6$be)|0);
       $87 = HEAP8[$arrayidx237>>0]|0;
       $conv238 = $87&255;
       $cmp239 = ($conv238>>>0)<($base$addr$1135>>>0);
       $cmp242 = ($add249>>>0)<(119304647);
       $88 = $cmp242 & $cmp239;
       if ($88) {
        $conv238179 = $conv238;$x$2178 = $add249;
       } else {
        break;
       }
      }
      $156 = $add249;$157 = 0;$89 = $87;$c$6$lcssa = $c$6$be;
     } else {
      $156 = 0;$157 = 0;$89 = $50;$c$6$lcssa = $c$1136;
     }
     $conv267165 = $89&255;
     $cmp268166 = ($conv267165>>>0)<($base$addr$1135>>>0);
     if ($cmp268166) {
      $90 = (___udivdi3(-1,-1,($base$addr$1135|0),0)|0);
      $91 = tempRet0;
      $102 = $89;$93 = $157;$95 = $156;$c$7167 = $c$6$lcssa;
      while(1) {
       $92 = ($93>>>0)>($91>>>0);
       $94 = ($95>>>0)>($90>>>0);
       $96 = ($93|0)==($91|0);
       $97 = $96 & $94;
       $98 = $92 | $97;
       if ($98) {
        $154 = $95;$155 = $93;$base$addr$1134 = $base$addr$1135;$c$8 = $c$7167;
        label = 72;
        break L63;
       }
       $99 = (___muldi3(($95|0),($93|0),($base$addr$1135|0),0)|0);
       $100 = tempRet0;
       $101 = $102&255;
       $103 = $101 ^ -1;
       $104 = ($100>>>0)>(4294967295);
       $105 = ($99>>>0)>($103>>>0);
       $106 = ($100|0)==(-1);
       $107 = $106 & $105;
       $108 = $104 | $107;
       if ($108) {
        $154 = $95;$155 = $93;$base$addr$1134 = $base$addr$1135;$c$8 = $c$7167;
        label = 72;
        break L63;
       }
       $109 = (_i64Add(($101|0),0,($99|0),($100|0))|0);
       $110 = tempRet0;
       $111 = HEAP32[$rpos>>2]|0;
       $112 = HEAP32[$shend>>2]|0;
       $cmp292 = ($111>>>0)<($112>>>0);
       if ($cmp292) {
        $incdec$ptr296 = ((($111)) + 1|0);
        HEAP32[$rpos>>2] = $incdec$ptr296;
        $113 = HEAP8[$111>>0]|0;
        $conv297 = $113&255;
        $c$7$be = $conv297;
       } else {
        $call299 = (___shgetc($f)|0);
        $c$7$be = $call299;
       }
       $arrayidx266 = ((12437) + ($c$7$be)|0);
       $114 = HEAP8[$arrayidx266>>0]|0;
       $conv267 = $114&255;
       $cmp268 = ($conv267>>>0)<($base$addr$1135>>>0);
       if ($cmp268) {
        $102 = $114;$93 = $110;$95 = $109;$c$7167 = $c$7$be;
       } else {
        $154 = $109;$155 = $110;$base$addr$1134 = $base$addr$1135;$c$8 = $c$7$be;
        label = 72;
        break;
       }
      }
     } else {
      $154 = $156;$155 = $157;$base$addr$1134 = $base$addr$1135;$c$8 = $c$6$lcssa;
      label = 72;
     }
    }
   } while(0);
   if ((label|0) == 72) {
    $arrayidx305 = ((12437) + ($c$8)|0);
    $115 = HEAP8[$arrayidx305>>0]|0;
    $conv306 = $115&255;
    $cmp307 = ($conv306>>>0)<($base$addr$1134>>>0);
    if ($cmp307) {
     while(1) {
      $116 = HEAP32[$rpos>>2]|0;
      $117 = HEAP32[$shend>>2]|0;
      $cmp319 = ($116>>>0)<($117>>>0);
      if ($cmp319) {
       $incdec$ptr323 = ((($116)) + 1|0);
       HEAP32[$rpos>>2] = $incdec$ptr323;
       $118 = HEAP8[$116>>0]|0;
       $conv324 = $118&255;
       $c$9$be = $conv324;
      } else {
       $call326 = (___shgetc($f)|0);
       $c$9$be = $call326;
      }
      $arrayidx311 = ((12437) + ($c$9$be)|0);
      $119 = HEAP8[$arrayidx311>>0]|0;
      $conv312 = $119&255;
      $cmp313 = ($conv312>>>0)<($base$addr$1134>>>0);
      if (!($cmp313)) {
       break;
      }
     }
     $call330 = (___errno_location()|0);
     HEAP32[$call330>>2] = 34;
     $120 = $0 & 1;
     $121 = ($120|0)==(0);
     $122 = (0)==(0);
     $123 = $121 & $122;
     $neg$0$ = $123 ? $neg$0 : 0;
     $127 = $1;$129 = $0;$neg$1 = $neg$0$;
    } else {
     $127 = $155;$129 = $154;$neg$1 = $neg$0;
    }
   }
   $124 = HEAP32[$shend>>2]|0;
   $tobool337 = ($124|0)==(0|0);
   if (!($tobool337)) {
    $125 = HEAP32[$rpos>>2]|0;
    $incdec$ptr340 = ((($125)) + -1|0);
    HEAP32[$rpos>>2] = $incdec$ptr340;
   }
   $126 = ($127>>>0)<($1>>>0);
   $128 = ($129>>>0)<($0>>>0);
   $130 = ($127|0)==($1|0);
   $131 = $130 & $128;
   $132 = $126 | $131;
   if (!($132)) {
    $133 = $0 & 1;
    $134 = ($133|0)!=(0);
    $135 = (0)!=(0);
    $136 = $134 | $135;
    $tobool349 = ($neg$1|0)!=(0);
    $or$cond5 = $136 | $tobool349;
    if (!($or$cond5)) {
     $call351 = (___errno_location()|0);
     HEAP32[$call351>>2] = 34;
     $137 = (_i64Add(($0|0),($1|0),-1,-1)|0);
     $138 = tempRet0;
     $150 = $138;$151 = $137;
     break;
    }
    $139 = ($127>>>0)>($1>>>0);
    $140 = ($129>>>0)>($0>>>0);
    $141 = ($127|0)==($1|0);
    $142 = $141 & $140;
    $143 = $139 | $142;
    if ($143) {
     $call357 = (___errno_location()|0);
     HEAP32[$call357>>2] = 34;
     $150 = $1;$151 = $0;
     break;
    }
   }
   $144 = ($neg$1|0)<(0);
   $145 = $144 << 31 >> 31;
   $146 = $129 ^ $neg$1;
   $147 = $127 ^ $145;
   $148 = (_i64Subtract(($146|0),($147|0),($neg$1|0),($145|0))|0);
   $149 = tempRet0;
   $150 = $149;$151 = $148;
  }
 } while(0);
 tempRet0 = ($150);
 return ($151|0);
}
function ___shgetc($f) {
 $f = $f|0;
 var $$phi$trans$insert$phi$trans$insert = 0, $$pre = 0, $$pre26$pre = 0, $$pre29 = 0, $$sink = 0, $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $add = 0, $add$ptr = 0, $add29 = 0, $arrayidx = 0;
 var $call = 0, $cmp = 0, $cmp2 = 0, $cmp32 = 0, $cmp9 = 0, $conv = 0, $conv35 = 0, $rend17$phi$trans$insert = 0, $retval$0 = 0, $rpos = 0, $shcnt = 0, $shcnt28$pre$phiZ2D = 0, $shcnt7 = 0, $shend = 0, $shend18 = 0, $shlim = 0, $sub = 0, $sub$ptr$lhs$cast25 = 0, $sub$ptr$rhs$cast = 0, $sub$ptr$rhs$cast26 = 0;
 var $sub$ptr$sub = 0, $sub$ptr$sub27 = 0, $sub8 = 0, $tobool = 0, $tobool21 = 0, $tobool4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $shlim = ((($f)) + 104|0);
 $0 = HEAP32[$shlim>>2]|0;
 $tobool = ($0|0)==(0);
 if ($tobool) {
  label = 3;
 } else {
  $shcnt = ((($f)) + 108|0);
  $1 = HEAP32[$shcnt>>2]|0;
  $cmp = ($1|0)<($0|0);
  if ($cmp) {
   label = 3;
  } else {
   label = 4;
  }
 }
 if ((label|0) == 3) {
  $call = (___uflow($f)|0);
  $cmp2 = ($call|0)<(0);
  if ($cmp2) {
   label = 4;
  } else {
   $2 = HEAP32[$shlim>>2]|0;
   $tobool4 = ($2|0)==(0);
   $rend17$phi$trans$insert = ((($f)) + 8|0);
   if ($tobool4) {
    $$pre = HEAP32[$rend17$phi$trans$insert>>2]|0;
    $$phi$trans$insert$phi$trans$insert = ((($f)) + 4|0);
    $$pre26$pre = HEAP32[$$phi$trans$insert$phi$trans$insert>>2]|0;
    $$pre29 = ((($f)) + 108|0);
    $$sink = $$pre;$7 = $$pre;$8 = $$pre26$pre;$shcnt28$pre$phiZ2D = $$pre29;
   } else {
    $3 = HEAP32[$rend17$phi$trans$insert>>2]|0;
    $rpos = ((($f)) + 4|0);
    $4 = HEAP32[$rpos>>2]|0;
    $sub$ptr$rhs$cast = $4;
    $sub$ptr$sub = (($3) - ($sub$ptr$rhs$cast))|0;
    $shcnt7 = ((($f)) + 108|0);
    $5 = HEAP32[$shcnt7>>2]|0;
    $sub = (($2) - ($5))|0;
    $cmp9 = ($sub$ptr$sub|0)<($sub|0);
    $6 = $3;
    if ($cmp9) {
     $$sink = $6;$7 = $6;$8 = $4;$shcnt28$pre$phiZ2D = $shcnt7;
    } else {
     $sub8 = (($sub) + -1)|0;
     $add$ptr = (($4) + ($sub8)|0);
     $$sink = $add$ptr;$7 = $6;$8 = $4;$shcnt28$pre$phiZ2D = $shcnt7;
    }
   }
   $shend18 = ((($f)) + 100|0);
   HEAP32[$shend18>>2] = $$sink;
   $tobool21 = ($7|0)==(0|0);
   if (!($tobool21)) {
    $sub$ptr$lhs$cast25 = $7;
    $sub$ptr$rhs$cast26 = $8;
    $9 = HEAP32[$shcnt28$pre$phiZ2D>>2]|0;
    $sub$ptr$sub27 = (($sub$ptr$lhs$cast25) + 1)|0;
    $add = (($sub$ptr$sub27) - ($sub$ptr$rhs$cast26))|0;
    $add29 = (($add) + ($9))|0;
    HEAP32[$shcnt28$pre$phiZ2D>>2] = $add29;
   }
   $arrayidx = ((($8)) + -1|0);
   $10 = HEAP8[$arrayidx>>0]|0;
   $conv = $10&255;
   $cmp32 = ($conv|0)==($call|0);
   if ($cmp32) {
    $retval$0 = $call;
   } else {
    $conv35 = $call&255;
    HEAP8[$arrayidx>>0] = $conv35;
    $retval$0 = $call;
   }
  }
 }
 if ((label|0) == 4) {
  $shend = ((($f)) + 100|0);
  HEAP32[$shend>>2] = 0;
  $retval$0 = -1;
 }
 return ($retval$0|0);
}
function _isspace($c) {
 $c = $c|0;
 var $0 = 0, $cmp = 0, $cmp1 = 0, $lor$ext = 0, $sub = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $cmp = ($c|0)==(32);
 $sub = (($c) + -9)|0;
 $cmp1 = ($sub>>>0)<(5);
 $0 = $cmp | $cmp1;
 $lor$ext = $0&1;
 return ($lor$ext|0);
}
function ___uflow($f) {
 $f = $f|0;
 var $0 = 0, $1 = 0, $c = 0, $call = 0, $call1 = 0, $cmp = 0, $conv = 0, $read = 0, $retval$0 = 0, $tobool = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $c = sp;
 $call = (___toread($f)|0);
 $tobool = ($call|0)==(0);
 if ($tobool) {
  $read = ((($f)) + 32|0);
  $0 = HEAP32[$read>>2]|0;
  $call1 = (FUNCTION_TABLE_iiii[$0 & 1023]($f,$c,1)|0);
  $cmp = ($call1|0)==(1);
  if ($cmp) {
   $1 = HEAP8[$c>>0]|0;
   $conv = $1&255;
   $retval$0 = $conv;
  } else {
   $retval$0 = -1;
  }
 } else {
  $retval$0 = -1;
 }
 STACKTOP = sp;return ($retval$0|0);
}
function ___toread($f) {
 $f = $f|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $add$ptr = 0, $and = 0, $buf = 0, $buf_size = 0, $cmp = 0, $conv = 0, $conv3 = 0, $mode = 0, $or = 0, $or9 = 0, $rend = 0, $retval$0 = 0;
 var $rpos = 0, $sext = 0, $sub = 0, $tobool = 0, $wbase = 0, $wend = 0, $wpos = 0, $write = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $mode = ((($f)) + 74|0);
 $0 = HEAP8[$mode>>0]|0;
 $conv = $0 << 24 >> 24;
 $sub = (($conv) + 255)|0;
 $or = $sub | $conv;
 $conv3 = $or&255;
 HEAP8[$mode>>0] = $conv3;
 $wpos = ((($f)) + 20|0);
 $1 = HEAP32[$wpos>>2]|0;
 $wbase = ((($f)) + 28|0);
 $2 = HEAP32[$wbase>>2]|0;
 $cmp = ($1>>>0)>($2>>>0);
 if ($cmp) {
  $write = ((($f)) + 36|0);
  $3 = HEAP32[$write>>2]|0;
  (FUNCTION_TABLE_iiii[$3 & 1023]($f,0,0)|0);
 }
 $wend = ((($f)) + 16|0);
 HEAP32[$wend>>2] = 0;
 HEAP32[$wbase>>2] = 0;
 HEAP32[$wpos>>2] = 0;
 $4 = HEAP32[$f>>2]|0;
 $and = $4 & 4;
 $tobool = ($and|0)==(0);
 if ($tobool) {
  $buf = ((($f)) + 44|0);
  $5 = HEAP32[$buf>>2]|0;
  $buf_size = ((($f)) + 48|0);
  $6 = HEAP32[$buf_size>>2]|0;
  $add$ptr = (($5) + ($6)|0);
  $rend = ((($f)) + 8|0);
  HEAP32[$rend>>2] = $add$ptr;
  $rpos = ((($f)) + 4|0);
  HEAP32[$rpos>>2] = $add$ptr;
  $7 = $4 << 27;
  $sext = $7 >> 31;
  $retval$0 = $sext;
 } else {
  $or9 = $4 | 32;
  HEAP32[$f>>2] = $or9;
  $retval$0 = -1;
 }
 return ($retval$0|0);
}
function _strtoll_l($s,$p,$base,$loc) {
 $s = $s|0;
 $p = $p|0;
 $base = $base|0;
 $loc = $loc|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_strtoll($s,$p,$base)|0);
 $1 = tempRet0;
 tempRet0 = ($1);
 return ($0|0);
}
function _strtoll($s,$p,$base) {
 $s = $s|0;
 $p = $p|0;
 $base = $base|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_strtox_742($s,$p,$base,0,-2147483648)|0);
 $1 = tempRet0;
 tempRet0 = ($1);
 return ($0|0);
}
function _strtoul($s,$p,$base) {
 $s = $s|0;
 $p = $p|0;
 $base = $base|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_strtox_742($s,$p,$base,-1,0)|0);
 $1 = tempRet0;
 return ($0|0);
}
function _copysign($x,$y) {
 $x = +$x;
 $y = +$y;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAPF64[tempDoublePtr>>3] = $x;$0 = HEAP32[tempDoublePtr>>2]|0;
 $1 = HEAP32[tempDoublePtr+4>>2]|0;
 HEAPF64[tempDoublePtr>>3] = $y;$2 = HEAP32[tempDoublePtr>>2]|0;
 $3 = HEAP32[tempDoublePtr+4>>2]|0;
 $4 = $1 & 2147483647;
 $5 = $3 & -2147483648;
 $6 = $5 | $4;
 HEAP32[tempDoublePtr>>2] = $0;HEAP32[tempDoublePtr+4>>2] = $6;$7 = +HEAPF64[tempDoublePtr>>3];
 return (+$7);
}
function _strcmp($l,$r) {
 $l = $l|0;
 $r = $r|0;
 var $$lcssa = 0, $$lcssa6 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $cmp = 0, $cmp7 = 0, $conv5 = 0, $conv6 = 0, $incdec$ptr = 0, $incdec$ptr4 = 0, $l$addr$010 = 0, $or$cond = 0, $or$cond9 = 0, $r$addr$011 = 0, $sub = 0, $tobool = 0, $tobool8 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[$l>>0]|0;
 $1 = HEAP8[$r>>0]|0;
 $cmp7 = ($0<<24>>24)!=($1<<24>>24);
 $tobool8 = ($0<<24>>24)==(0);
 $or$cond9 = $tobool8 | $cmp7;
 if ($or$cond9) {
  $$lcssa = $1;$$lcssa6 = $0;
 } else {
  $l$addr$010 = $l;$r$addr$011 = $r;
  while(1) {
   $incdec$ptr = ((($l$addr$010)) + 1|0);
   $incdec$ptr4 = ((($r$addr$011)) + 1|0);
   $2 = HEAP8[$incdec$ptr>>0]|0;
   $3 = HEAP8[$incdec$ptr4>>0]|0;
   $cmp = ($2<<24>>24)!=($3<<24>>24);
   $tobool = ($2<<24>>24)==(0);
   $or$cond = $tobool | $cmp;
   if ($or$cond) {
    $$lcssa = $3;$$lcssa6 = $2;
    break;
   } else {
    $l$addr$010 = $incdec$ptr;$r$addr$011 = $incdec$ptr4;
   }
  }
 }
 $conv5 = $$lcssa6&255;
 $conv6 = $$lcssa&255;
 $sub = (($conv5) - ($conv6))|0;
 return ($sub|0);
}
function _vsnprintf($s,$n,$fmt,$ap) {
 $s = $s|0;
 $n = $n|0;
 $fmt = $fmt|0;
 $ap = $ap|0;
 var $0 = 0, $1 = 0, $add$ptr = 0, $arrayidx = 0, $b = 0, $buf = 0, $buf_size = 0, $call = 0, $call10 = 0, $cmp = 0, $cmp16 = 0, $cmp4 = 0, $f = 0, $n$addr$0 = 0, $retval$0 = 0, $s$addr$0 = 0, $sub = 0, $sub$ptr$rhs$cast = 0, $sub17 = 0, $sub3 = 0;
 var $sub3$n$addr$0 = 0, $tobool = 0, $tobool11 = 0, $wbase = 0, $wend = 0, $wpos = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(128|0);
 $b = sp + 124|0;
 $f = sp;
 dest=$f; src=3128; stop=dest+124|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 $sub = (($n) + -1)|0;
 $cmp = ($sub>>>0)>(2147483646);
 if ($cmp) {
  $tobool = ($n|0)==(0);
  if ($tobool) {
   $n$addr$0 = 1;$s$addr$0 = $b;
   label = 4;
  } else {
   $call = (___errno_location()|0);
   HEAP32[$call>>2] = 75;
   $retval$0 = -1;
  }
 } else {
  $n$addr$0 = $n;$s$addr$0 = $s;
  label = 4;
 }
 if ((label|0) == 4) {
  $sub$ptr$rhs$cast = $s$addr$0;
  $sub3 = (-2 - ($sub$ptr$rhs$cast))|0;
  $cmp4 = ($n$addr$0>>>0)>($sub3>>>0);
  $sub3$n$addr$0 = $cmp4 ? $sub3 : $n$addr$0;
  $buf_size = ((($f)) + 48|0);
  HEAP32[$buf_size>>2] = $sub3$n$addr$0;
  $wpos = ((($f)) + 20|0);
  HEAP32[$wpos>>2] = $s$addr$0;
  $buf = ((($f)) + 44|0);
  HEAP32[$buf>>2] = $s$addr$0;
  $add$ptr = (($s$addr$0) + ($sub3$n$addr$0)|0);
  $wend = ((($f)) + 16|0);
  HEAP32[$wend>>2] = $add$ptr;
  $wbase = ((($f)) + 28|0);
  HEAP32[$wbase>>2] = $add$ptr;
  $call10 = (_vfprintf($f,$fmt,$ap)|0);
  $tobool11 = ($sub3$n$addr$0|0)==(0);
  if ($tobool11) {
   $retval$0 = $call10;
  } else {
   $0 = HEAP32[$wpos>>2]|0;
   $1 = HEAP32[$wend>>2]|0;
   $cmp16 = ($0|0)==($1|0);
   $sub17 = $cmp16 << 31 >> 31;
   $arrayidx = (($0) + ($sub17)|0);
   HEAP8[$arrayidx>>0] = 0;
   $retval$0 = $call10;
  }
 }
 STACKTOP = sp;return ($retval$0|0);
}
function _vfprintf($f,$fmt,$ap) {
 $f = $f|0;
 $fmt = $fmt|0;
 $ap = $ap|0;
 var $$call21 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $add$ptr = 0, $and = 0, $and11 = 0, $and36 = 0, $ap2 = 0, $buf = 0, $buf_size = 0, $call = 0, $call21 = 0, $call2130 = 0, $call6 = 0;
 var $cmp = 0, $cmp5 = 0, $cmp7 = 0, $cond = 0, $internal_buf = 0, $lock = 0, $mode = 0, $nl_arg = 0, $nl_type = 0, $or = 0, $ret$1 = 0, $ret$1$ = 0, $retval$0 = 0, $tobool = 0, $tobool22 = 0, $tobool26 = 0, $tobool37 = 0, $tobool41 = 0, $vacopy_currentptr = 0, $wbase = 0;
 var $wend = 0, $wpos = 0, $write = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(224|0);
 $ap2 = sp + 120|0;
 $nl_type = sp + 80|0;
 $nl_arg = sp;
 $internal_buf = sp + 136|0;
 dest=$nl_type; stop=dest+40|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 $vacopy_currentptr = HEAP32[$ap>>2]|0;
 HEAP32[$ap2>>2] = $vacopy_currentptr;
 $call = (_printf_core(0,$fmt,$ap2,$nl_arg,$nl_type)|0);
 $cmp = ($call|0)<(0);
 if ($cmp) {
  $retval$0 = -1;
 } else {
  $lock = ((($f)) + 76|0);
  $0 = HEAP32[$lock>>2]|0;
  $cmp5 = ($0|0)>(-1);
  if ($cmp5) {
   $call6 = (___lockfile($f)|0);
   $cond = $call6;
  } else {
   $cond = 0;
  }
  $1 = HEAP32[$f>>2]|0;
  $and = $1 & 32;
  $mode = ((($f)) + 74|0);
  $2 = HEAP8[$mode>>0]|0;
  $cmp7 = ($2<<24>>24)<(1);
  if ($cmp7) {
   $and11 = $1 & -33;
   HEAP32[$f>>2] = $and11;
  }
  $buf_size = ((($f)) + 48|0);
  $3 = HEAP32[$buf_size>>2]|0;
  $tobool = ($3|0)==(0);
  if ($tobool) {
   $buf = ((($f)) + 44|0);
   $4 = HEAP32[$buf>>2]|0;
   HEAP32[$buf>>2] = $internal_buf;
   $wbase = ((($f)) + 28|0);
   HEAP32[$wbase>>2] = $internal_buf;
   $wpos = ((($f)) + 20|0);
   HEAP32[$wpos>>2] = $internal_buf;
   HEAP32[$buf_size>>2] = 80;
   $add$ptr = ((($internal_buf)) + 80|0);
   $wend = ((($f)) + 16|0);
   HEAP32[$wend>>2] = $add$ptr;
   $call21 = (_printf_core($f,$fmt,$ap2,$nl_arg,$nl_type)|0);
   $tobool22 = ($4|0)==(0|0);
   if ($tobool22) {
    $ret$1 = $call21;
   } else {
    $write = ((($f)) + 36|0);
    $5 = HEAP32[$write>>2]|0;
    (FUNCTION_TABLE_iiii[$5 & 1023]($f,0,0)|0);
    $6 = HEAP32[$wpos>>2]|0;
    $tobool26 = ($6|0)==(0|0);
    $$call21 = $tobool26 ? -1 : $call21;
    HEAP32[$buf>>2] = $4;
    HEAP32[$buf_size>>2] = 0;
    HEAP32[$wend>>2] = 0;
    HEAP32[$wbase>>2] = 0;
    HEAP32[$wpos>>2] = 0;
    $ret$1 = $$call21;
   }
  } else {
   $call2130 = (_printf_core($f,$fmt,$ap2,$nl_arg,$nl_type)|0);
   $ret$1 = $call2130;
  }
  $7 = HEAP32[$f>>2]|0;
  $and36 = $7 & 32;
  $tobool37 = ($and36|0)==(0);
  $ret$1$ = $tobool37 ? $ret$1 : -1;
  $or = $7 | $and;
  HEAP32[$f>>2] = $or;
  $tobool41 = ($cond|0)==(0);
  if (!($tobool41)) {
   ___unlockfile($f);
  }
  $retval$0 = $ret$1$;
 }
 STACKTOP = sp;return ($retval$0|0);
}
function _printf_core($f,$fmt,$ap,$nl_arg,$nl_type) {
 $f = $f|0;
 $fmt = $fmt|0;
 $ap = $ap|0;
 $nl_arg = $nl_arg|0;
 $nl_type = $nl_type|0;
 var $$ = 0, $$$ = 0, $$194$ = 0, $$197 = 0, $$add$ptr258 = 0, $$l10n$0 = 0, $$lcssa199 = 0, $$pre = 0, $$pre247 = 0, $$pre248 = 0, $$pre248$pre = 0, $$pre249 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0;
 var $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0;
 var $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0;
 var $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0.0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
 var $97 = 0, $98 = 0, $99 = 0, $a$0 = 0, $a$0$add$ptr206 = 0, $a$1 = 0, $a$2 = 0, $add = 0, $add$ptr = 0, $add$ptr139 = 0, $add$ptr206 = 0, $add$ptr258 = 0, $add$ptr341 = 0, $add$ptr360 = 0, $add$ptr43 = 0, $add$ptr43$arrayidx31 = 0, $add$ptr474 = 0, $add$ptr88 = 0, $add270 = 0, $add323 = 0;
 var $add396 = 0, $add413 = 0, $add442 = 0, $and = 0, $and211 = 0, $and215 = 0, $and217 = 0, $and220 = 0, $and250 = 0, $and255 = 0, $and264 = 0, $and290 = 0, $and295 = 0, $and310 = 0, $and310$fl$4 = 0, $arg = 0, $arglist_current = 0, $arglist_current2 = 0, $arglist_next = 0, $arglist_next3 = 0;
 var $argpos$0 = 0, $arrayidx114 = 0, $arrayidx119 = 0, $arrayidx124 = 0, $arrayidx132 = 0, $arrayidx16 = 0, $arrayidx174 = 0, $arrayidx193 = 0, $arrayidx31 = 0, $arrayidx35 = 0, $arrayidx371 = 0, $arrayidx470 = 0, $arrayidx482 = 0, $arrayidx68 = 0, $arrayidx73 = 0, $arrayidx81 = 0, $buf = 0, $call = 0, $call104 = 0, $call160 = 0;
 var $call345 = 0, $call346 = 0, $call357 = 0, $call385 = 0, $call412 = 0, $call430 = 0, $cmp = 0, $cmp1 = 0, $cmp105 = 0, $cmp111 = 0, $cmp116 = 0, $cmp126 = 0, $cmp13 = 0, $cmp166 = 0, $cmp177 = 0, $cmp18 = 0, $cmp182 = 0, $cmp185 = 0, $cmp212 = 0, $cmp241 = 0;
 var $cmp271 = 0, $cmp307 = 0, $cmp324 = 0, $cmp37 = 0, $cmp378 = 0, $cmp378227 = 0, $cmp386 = 0, $cmp391 = 0, $cmp398 = 0, $cmp405 = 0, $cmp405237 = 0, $cmp414 = 0, $cmp422 = 0, $cmp435 = 0, $cmp443 = 0, $cmp467 = 0, $cmp479 = 0, $cmp50 = 0, $cmp50217 = 0, $cmp65 = 0;
 var $cmp75 = 0, $cmp97 = 0, $cnt$0 = 0, $cnt$1 = 0, $cond149 = 0, $cond246 = 0, $cond355 = 0, $cond427 = 0, $conv120 = 0, $conv134 = 0, $conv164 = 0, $conv172 = 0, $conv175 = 0, $conv208 = 0, $conv230 = 0, $conv233 = 0, $conv32 = 0, $conv48 = 0, $conv48215 = 0, $conv69 = 0;
 var $conv83 = 0, $expanded = 0, $expanded10 = 0, $expanded11 = 0, $expanded13 = 0, $expanded14 = 0, $expanded15 = 0, $expanded4 = 0, $expanded6 = 0, $expanded7 = 0, $expanded8 = 0, $fl$0$lcssa = 0, $fl$0219 = 0, $fl$1 = 0, $fl$1$and220 = 0, $fl$3 = 0, $fl$4 = 0, $fl$6 = 0, $i$0$lcssa = 0, $i$0$lcssa256 = 0;
 var $i$0229 = 0, $i$1238 = 0, $i$2210 = 0, $i$3207 = 0, $i137 = 0, $i86 = 0, $inc = 0, $inc489 = 0, $incdec$ptr = 0, $incdec$ptr159 = 0, $incdec$ptr171 = 0, $incdec$ptr23 = 0, $incdec$ptr384 = 0, $incdec$ptr411 = 0, $incdec$ptr62 = 0, $isdigit = 0, $isdigit188 = 0, $isdigit190 = 0, $isdigittmp = 0, $isdigittmp$ = 0;
 var $isdigittmp187 = 0, $isdigittmp189 = 0, $l$0 = 0, $l$1228 = 0, $l$2 = 0, $l10n$0 = 0, $l10n$0$phi = 0, $l10n$1 = 0, $l10n$2 = 0, $l10n$3 = 0, $lnot = 0, $lnot$ext = 0, $lnot484 = 0, $mb = 0, $narrow = 0, $or = 0, $or$cond = 0, $or$cond192 = 0, $or$cond193 = 0, $or$cond195 = 0;
 var $or100 = 0, $or100$fl$0 = 0, $or247 = 0, $p$0 = 0, $p$0$p$0$add270 = 0, $p$1 = 0, $p$2 = 0, $p$2$add323 = 0, $p$2$add323$p$2 = 0, $p$3 = 0, $p$4253 = 0, $p$5 = 0, $pl$0 = 0, $pl$1 = 0, $pl$2 = 0, $prefix$0 = 0, $prefix$1 = 0, $prefix$2 = 0, $retval$0 = 0, $s = 0;
 var $shl = 0, $shr = 0, $st$0 = 0, $storemerge = 0, $storemerge186218 = 0, $storemerge191 = 0, $sub = 0, $sub$ptr$lhs$cast = 0, $sub$ptr$lhs$cast318 = 0, $sub$ptr$lhs$cast362 = 0, $sub$ptr$lhs$cast432 = 0, $sub$ptr$rhs$cast = 0, $sub$ptr$rhs$cast268 = 0, $sub$ptr$rhs$cast319 = 0, $sub$ptr$rhs$cast363 = 0, $sub$ptr$rhs$cast433 = 0, $sub$ptr$sub = 0, $sub$ptr$sub269 = 0, $sub$ptr$sub320 = 0, $sub$ptr$sub364 = 0;
 var $sub$ptr$sub434 = 0, $sub$ptr$sub434$p$5 = 0, $sub101 = 0, $sub101$w$0 = 0, $sub135 = 0, $sub165 = 0, $sub173 = 0, $sub176 = 0, $sub390 = 0, $sub49 = 0, $sub49216 = 0, $sub49220 = 0, $sub84 = 0, $t$0 = 0, $t$1 = 0, $tobool = 0, $tobool141 = 0, $tobool179 = 0, $tobool209 = 0, $tobool218 = 0;
 var $tobool25 = 0, $tobool256 = 0, $tobool265 = 0, $tobool28 = 0, $tobool291 = 0, $tobool296 = 0, $tobool315 = 0, $tobool350 = 0, $tobool358 = 0, $tobool381 = 0, $tobool408 = 0, $tobool460 = 0, $tobool463 = 0, $tobool471 = 0, $tobool55 = 0, $tobool90 = 0, $trunc = 0, $w$0 = 0, $w$1 = 0, $w$2 = 0;
 var $wc = 0, $ws$0230 = 0, $ws$1239 = 0, $xor = 0, $xor450 = 0, $xor458 = 0, $z$0$lcssa = 0, $z$0212 = 0, $z$1 = 0, $z$2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $s = sp + 16|0;
 $arg = sp;
 $buf = sp + 24|0;
 $wc = sp + 8|0;
 $mb = sp + 20|0;
 HEAP32[$s>>2] = $fmt;
 $tobool25 = ($f|0)!=(0|0);
 $add$ptr206 = ((($buf)) + 40|0);
 $sub$ptr$lhs$cast318 = $add$ptr206;
 $add$ptr341 = ((($buf)) + 39|0);
 $arrayidx371 = ((($wc)) + 4|0);
 $1 = $fmt;$cnt$0 = 0;$l$0 = 0;$l10n$0 = 0;
 L1: while(1) {
  $cmp = ($cnt$0|0)>(-1);
  do {
   if ($cmp) {
    $sub = (2147483647 - ($cnt$0))|0;
    $cmp1 = ($l$0|0)>($sub|0);
    if ($cmp1) {
     $call = (___errno_location()|0);
     HEAP32[$call>>2] = 75;
     $cnt$1 = -1;
     break;
    } else {
     $add = (($l$0) + ($cnt$0))|0;
     $cnt$1 = $add;
     break;
    }
   } else {
    $cnt$1 = $cnt$0;
   }
  } while(0);
  $0 = HEAP8[$1>>0]|0;
  $tobool = ($0<<24>>24)==(0);
  if ($tobool) {
   label = 87;
   break;
  } else {
   $2 = $0;$3 = $1;
  }
  L9: while(1) {
   switch ($2<<24>>24) {
   case 37:  {
    $4 = $3;$z$0212 = $3;
    label = 9;
    break L9;
    break;
   }
   case 0:  {
    $7 = $3;$z$0$lcssa = $3;
    break L9;
    break;
   }
   default: {
   }
   }
   $incdec$ptr = ((($3)) + 1|0);
   HEAP32[$s>>2] = $incdec$ptr;
   $$pre = HEAP8[$incdec$ptr>>0]|0;
   $2 = $$pre;$3 = $incdec$ptr;
  }
  L12: do {
   if ((label|0) == 9) {
    while(1) {
     label = 0;
     $arrayidx16 = ((($4)) + 1|0);
     $5 = HEAP8[$arrayidx16>>0]|0;
     $cmp18 = ($5<<24>>24)==(37);
     if (!($cmp18)) {
      $7 = $4;$z$0$lcssa = $z$0212;
      break L12;
     }
     $incdec$ptr23 = ((($z$0212)) + 1|0);
     $add$ptr = ((($4)) + 2|0);
     HEAP32[$s>>2] = $add$ptr;
     $6 = HEAP8[$add$ptr>>0]|0;
     $cmp13 = ($6<<24>>24)==(37);
     if ($cmp13) {
      $4 = $add$ptr;$z$0212 = $incdec$ptr23;
      label = 9;
     } else {
      $7 = $add$ptr;$z$0$lcssa = $incdec$ptr23;
      break;
     }
    }
   }
  } while(0);
  $sub$ptr$lhs$cast = $z$0$lcssa;
  $sub$ptr$rhs$cast = $1;
  $sub$ptr$sub = (($sub$ptr$lhs$cast) - ($sub$ptr$rhs$cast))|0;
  if ($tobool25) {
   _out($f,$1,$sub$ptr$sub);
  }
  $tobool28 = ($sub$ptr$sub|0)==(0);
  if (!($tobool28)) {
   $l10n$0$phi = $l10n$0;$1 = $7;$cnt$0 = $cnt$1;$l$0 = $sub$ptr$sub;$l10n$0 = $l10n$0$phi;
   continue;
  }
  $arrayidx31 = ((($7)) + 1|0);
  $8 = HEAP8[$arrayidx31>>0]|0;
  $conv32 = $8 << 24 >> 24;
  $isdigittmp = (($conv32) + -48)|0;
  $isdigit = ($isdigittmp>>>0)<(10);
  if ($isdigit) {
   $arrayidx35 = ((($7)) + 2|0);
   $9 = HEAP8[$arrayidx35>>0]|0;
   $cmp37 = ($9<<24>>24)==(36);
   $add$ptr43 = ((($7)) + 3|0);
   $add$ptr43$arrayidx31 = $cmp37 ? $add$ptr43 : $arrayidx31;
   $$l10n$0 = $cmp37 ? 1 : $l10n$0;
   $isdigittmp$ = $cmp37 ? $isdigittmp : -1;
   $argpos$0 = $isdigittmp$;$l10n$1 = $$l10n$0;$storemerge = $add$ptr43$arrayidx31;
  } else {
   $argpos$0 = -1;$l10n$1 = $l10n$0;$storemerge = $arrayidx31;
  }
  HEAP32[$s>>2] = $storemerge;
  $10 = HEAP8[$storemerge>>0]|0;
  $conv48215 = $10 << 24 >> 24;
  $sub49216 = (($conv48215) + -32)|0;
  $cmp50217 = ($sub49216>>>0)<(32);
  L24: do {
   if ($cmp50217) {
    $149 = $10;$fl$0219 = 0;$storemerge186218 = $storemerge;$sub49220 = $sub49216;
    while(1) {
     $shl = 1 << $sub49220;
     $and = $shl & 75913;
     $tobool55 = ($and|0)==(0);
     if ($tobool55) {
      $$lcssa199 = $149;$12 = $storemerge186218;$fl$0$lcssa = $fl$0219;
      break L24;
     }
     $or = $shl | $fl$0219;
     $incdec$ptr62 = ((($storemerge186218)) + 1|0);
     HEAP32[$s>>2] = $incdec$ptr62;
     $11 = HEAP8[$incdec$ptr62>>0]|0;
     $conv48 = $11 << 24 >> 24;
     $sub49 = (($conv48) + -32)|0;
     $cmp50 = ($sub49>>>0)<(32);
     if ($cmp50) {
      $149 = $11;$fl$0219 = $or;$storemerge186218 = $incdec$ptr62;$sub49220 = $sub49;
     } else {
      $$lcssa199 = $11;$12 = $incdec$ptr62;$fl$0$lcssa = $or;
      break;
     }
    }
   } else {
    $$lcssa199 = $10;$12 = $storemerge;$fl$0$lcssa = 0;
   }
  } while(0);
  $cmp65 = ($$lcssa199<<24>>24)==(42);
  if ($cmp65) {
   $arrayidx68 = ((($12)) + 1|0);
   $13 = HEAP8[$arrayidx68>>0]|0;
   $conv69 = $13 << 24 >> 24;
   $isdigittmp189 = (($conv69) + -48)|0;
   $isdigit190 = ($isdigittmp189>>>0)<(10);
   if ($isdigit190) {
    $arrayidx73 = ((($12)) + 2|0);
    $14 = HEAP8[$arrayidx73>>0]|0;
    $cmp75 = ($14<<24>>24)==(36);
    if ($cmp75) {
     $arrayidx81 = (($nl_type) + ($isdigittmp189<<2)|0);
     HEAP32[$arrayidx81>>2] = 10;
     $15 = HEAP8[$arrayidx68>>0]|0;
     $conv83 = $15 << 24 >> 24;
     $sub84 = (($conv83) + -48)|0;
     $i86 = (($nl_arg) + ($sub84<<3)|0);
     $16 = $i86;
     $17 = $16;
     $18 = HEAP32[$17>>2]|0;
     $19 = (($16) + 4)|0;
     $20 = $19;
     $21 = HEAP32[$20>>2]|0;
     $add$ptr88 = ((($12)) + 3|0);
     $l10n$2 = 1;$storemerge191 = $add$ptr88;$w$0 = $18;
    } else {
     label = 23;
    }
   } else {
    label = 23;
   }
   if ((label|0) == 23) {
    label = 0;
    $tobool90 = ($l10n$1|0)==(0);
    if (!($tobool90)) {
     $retval$0 = -1;
     break;
    }
    if ($tobool25) {
     $arglist_current = HEAP32[$ap>>2]|0;
     $22 = $arglist_current;
     $23 = ((0) + 4|0);
     $expanded4 = $23;
     $expanded = (($expanded4) - 1)|0;
     $24 = (($22) + ($expanded))|0;
     $25 = ((0) + 4|0);
     $expanded8 = $25;
     $expanded7 = (($expanded8) - 1)|0;
     $expanded6 = $expanded7 ^ -1;
     $26 = $24 & $expanded6;
     $27 = $26;
     $28 = HEAP32[$27>>2]|0;
     $arglist_next = ((($27)) + 4|0);
     HEAP32[$ap>>2] = $arglist_next;
     $l10n$2 = 0;$storemerge191 = $arrayidx68;$w$0 = $28;
    } else {
     $l10n$2 = 0;$storemerge191 = $arrayidx68;$w$0 = 0;
    }
   }
   HEAP32[$s>>2] = $storemerge191;
   $cmp97 = ($w$0|0)<(0);
   $or100 = $fl$0$lcssa | 8192;
   $sub101 = (0 - ($w$0))|0;
   $or100$fl$0 = $cmp97 ? $or100 : $fl$0$lcssa;
   $sub101$w$0 = $cmp97 ? $sub101 : $w$0;
   $30 = $storemerge191;$fl$1 = $or100$fl$0;$l10n$3 = $l10n$2;$w$1 = $sub101$w$0;
  } else {
   $call104 = (_getint($s)|0);
   $cmp105 = ($call104|0)<(0);
   if ($cmp105) {
    $retval$0 = -1;
    break;
   }
   $$pre247 = HEAP32[$s>>2]|0;
   $30 = $$pre247;$fl$1 = $fl$0$lcssa;$l10n$3 = $l10n$1;$w$1 = $call104;
  }
  $29 = HEAP8[$30>>0]|0;
  $cmp111 = ($29<<24>>24)==(46);
  do {
   if ($cmp111) {
    $arrayidx114 = ((($30)) + 1|0);
    $31 = HEAP8[$arrayidx114>>0]|0;
    $cmp116 = ($31<<24>>24)==(42);
    if (!($cmp116)) {
     $incdec$ptr159 = ((($30)) + 1|0);
     HEAP32[$s>>2] = $incdec$ptr159;
     $call160 = (_getint($s)|0);
     $$pre248$pre = HEAP32[$s>>2]|0;
     $$pre248 = $$pre248$pre;$p$0 = $call160;
     break;
    }
    $arrayidx119 = ((($30)) + 2|0);
    $32 = HEAP8[$arrayidx119>>0]|0;
    $conv120 = $32 << 24 >> 24;
    $isdigittmp187 = (($conv120) + -48)|0;
    $isdigit188 = ($isdigittmp187>>>0)<(10);
    if ($isdigit188) {
     $arrayidx124 = ((($30)) + 3|0);
     $33 = HEAP8[$arrayidx124>>0]|0;
     $cmp126 = ($33<<24>>24)==(36);
     if ($cmp126) {
      $arrayidx132 = (($nl_type) + ($isdigittmp187<<2)|0);
      HEAP32[$arrayidx132>>2] = 10;
      $34 = HEAP8[$arrayidx119>>0]|0;
      $conv134 = $34 << 24 >> 24;
      $sub135 = (($conv134) + -48)|0;
      $i137 = (($nl_arg) + ($sub135<<3)|0);
      $35 = $i137;
      $36 = $35;
      $37 = HEAP32[$36>>2]|0;
      $38 = (($35) + 4)|0;
      $39 = $38;
      $40 = HEAP32[$39>>2]|0;
      $add$ptr139 = ((($30)) + 4|0);
      HEAP32[$s>>2] = $add$ptr139;
      $$pre248 = $add$ptr139;$p$0 = $37;
      break;
     }
    }
    $tobool141 = ($l10n$3|0)==(0);
    if (!($tobool141)) {
     $retval$0 = -1;
     break L1;
    }
    if ($tobool25) {
     $arglist_current2 = HEAP32[$ap>>2]|0;
     $41 = $arglist_current2;
     $42 = ((0) + 4|0);
     $expanded11 = $42;
     $expanded10 = (($expanded11) - 1)|0;
     $43 = (($41) + ($expanded10))|0;
     $44 = ((0) + 4|0);
     $expanded15 = $44;
     $expanded14 = (($expanded15) - 1)|0;
     $expanded13 = $expanded14 ^ -1;
     $45 = $43 & $expanded13;
     $46 = $45;
     $47 = HEAP32[$46>>2]|0;
     $arglist_next3 = ((($46)) + 4|0);
     HEAP32[$ap>>2] = $arglist_next3;
     $cond149 = $47;
    } else {
     $cond149 = 0;
    }
    HEAP32[$s>>2] = $arrayidx119;
    $$pre248 = $arrayidx119;$p$0 = $cond149;
   } else {
    $$pre248 = $30;$p$0 = -1;
   }
  } while(0);
  $49 = $$pre248;$st$0 = 0;
  while(1) {
   $48 = HEAP8[$49>>0]|0;
   $conv164 = $48 << 24 >> 24;
   $sub165 = (($conv164) + -65)|0;
   $cmp166 = ($sub165>>>0)>(57);
   if ($cmp166) {
    $retval$0 = -1;
    break L1;
   }
   $incdec$ptr171 = ((($49)) + 1|0);
   HEAP32[$s>>2] = $incdec$ptr171;
   $50 = HEAP8[$49>>0]|0;
   $conv172 = $50 << 24 >> 24;
   $sub173 = (($conv172) + -65)|0;
   $arrayidx174 = ((12702 + (($st$0*58)|0)|0) + ($sub173)|0);
   $51 = HEAP8[$arrayidx174>>0]|0;
   $conv175 = $51&255;
   $sub176 = (($conv175) + -1)|0;
   $cmp177 = ($sub176>>>0)<(8);
   if ($cmp177) {
    $49 = $incdec$ptr171;$st$0 = $conv175;
   } else {
    break;
   }
  }
  $tobool179 = ($51<<24>>24)==(0);
  if ($tobool179) {
   $retval$0 = -1;
   break;
  }
  $cmp182 = ($51<<24>>24)==(19);
  $cmp185 = ($argpos$0|0)>(-1);
  do {
   if ($cmp182) {
    if ($cmp185) {
     $retval$0 = -1;
     break L1;
    } else {
     label = 49;
    }
   } else {
    if ($cmp185) {
     $arrayidx193 = (($nl_type) + ($argpos$0<<2)|0);
     HEAP32[$arrayidx193>>2] = $conv175;
     $52 = (($nl_arg) + ($argpos$0<<3)|0);
     $53 = $52;
     $54 = $53;
     $55 = HEAP32[$54>>2]|0;
     $56 = (($53) + 4)|0;
     $57 = $56;
     $58 = HEAP32[$57>>2]|0;
     $59 = $arg;
     $60 = $59;
     HEAP32[$60>>2] = $55;
     $61 = (($59) + 4)|0;
     $62 = $61;
     HEAP32[$62>>2] = $58;
     label = 49;
     break;
    }
    if (!($tobool25)) {
     $retval$0 = 0;
     break L1;
    }
    _pop_arg($arg,$conv175,$ap);
   }
  } while(0);
  if ((label|0) == 49) {
   label = 0;
   if (!($tobool25)) {
    $1 = $incdec$ptr171;$cnt$0 = $cnt$1;$l$0 = 0;$l10n$0 = $l10n$3;
    continue;
   }
  }
  $63 = HEAP8[$49>>0]|0;
  $conv208 = $63 << 24 >> 24;
  $tobool209 = ($st$0|0)!=(0);
  $and211 = $conv208 & 15;
  $cmp212 = ($and211|0)==(3);
  $or$cond192 = $tobool209 & $cmp212;
  $and215 = $conv208 & -33;
  $t$0 = $or$cond192 ? $and215 : $conv208;
  $and217 = $fl$1 & 8192;
  $tobool218 = ($and217|0)==(0);
  $and220 = $fl$1 & -65537;
  $fl$1$and220 = $tobool218 ? $fl$1 : $and220;
  L71: do {
   switch ($t$0|0) {
   case 110:  {
    $trunc = $st$0&255;
    switch ($trunc<<24>>24) {
    case 0:  {
     $70 = HEAP32[$arg>>2]|0;
     HEAP32[$70>>2] = $cnt$1;
     $1 = $incdec$ptr171;$cnt$0 = $cnt$1;$l$0 = 0;$l10n$0 = $l10n$3;
     continue L1;
     break;
    }
    case 1:  {
     $71 = HEAP32[$arg>>2]|0;
     HEAP32[$71>>2] = $cnt$1;
     $1 = $incdec$ptr171;$cnt$0 = $cnt$1;$l$0 = 0;$l10n$0 = $l10n$3;
     continue L1;
     break;
    }
    case 2:  {
     $72 = ($cnt$1|0)<(0);
     $73 = $72 << 31 >> 31;
     $74 = HEAP32[$arg>>2]|0;
     $75 = $74;
     $76 = $75;
     HEAP32[$76>>2] = $cnt$1;
     $77 = (($75) + 4)|0;
     $78 = $77;
     HEAP32[$78>>2] = $73;
     $1 = $incdec$ptr171;$cnt$0 = $cnt$1;$l$0 = 0;$l10n$0 = $l10n$3;
     continue L1;
     break;
    }
    case 3:  {
     $conv230 = $cnt$1&65535;
     $79 = HEAP32[$arg>>2]|0;
     HEAP16[$79>>1] = $conv230;
     $1 = $incdec$ptr171;$cnt$0 = $cnt$1;$l$0 = 0;$l10n$0 = $l10n$3;
     continue L1;
     break;
    }
    case 4:  {
     $conv233 = $cnt$1&255;
     $80 = HEAP32[$arg>>2]|0;
     HEAP8[$80>>0] = $conv233;
     $1 = $incdec$ptr171;$cnt$0 = $cnt$1;$l$0 = 0;$l10n$0 = $l10n$3;
     continue L1;
     break;
    }
    case 6:  {
     $81 = HEAP32[$arg>>2]|0;
     HEAP32[$81>>2] = $cnt$1;
     $1 = $incdec$ptr171;$cnt$0 = $cnt$1;$l$0 = 0;$l10n$0 = $l10n$3;
     continue L1;
     break;
    }
    case 7:  {
     $82 = ($cnt$1|0)<(0);
     $83 = $82 << 31 >> 31;
     $84 = HEAP32[$arg>>2]|0;
     $85 = $84;
     $86 = $85;
     HEAP32[$86>>2] = $cnt$1;
     $87 = (($85) + 4)|0;
     $88 = $87;
     HEAP32[$88>>2] = $83;
     $1 = $incdec$ptr171;$cnt$0 = $cnt$1;$l$0 = 0;$l10n$0 = $l10n$3;
     continue L1;
     break;
    }
    default: {
     $1 = $incdec$ptr171;$cnt$0 = $cnt$1;$l$0 = 0;$l10n$0 = $l10n$3;
     continue L1;
    }
    }
    break;
   }
   case 112:  {
    $cmp241 = ($p$0>>>0)>(8);
    $cond246 = $cmp241 ? $p$0 : 8;
    $or247 = $fl$1$and220 | 8;
    $fl$3 = $or247;$p$1 = $cond246;$t$1 = 120;
    label = 61;
    break;
   }
   case 88: case 120:  {
    $fl$3 = $fl$1$and220;$p$1 = $p$0;$t$1 = $t$0;
    label = 61;
    break;
   }
   case 111:  {
    $99 = $arg;
    $100 = $99;
    $101 = HEAP32[$100>>2]|0;
    $102 = (($99) + 4)|0;
    $103 = $102;
    $104 = HEAP32[$103>>2]|0;
    $105 = (_fmt_o($101,$104,$add$ptr206)|0);
    $and264 = $fl$1$and220 & 8;
    $tobool265 = ($and264|0)==(0);
    $sub$ptr$rhs$cast268 = $105;
    $sub$ptr$sub269 = (($sub$ptr$lhs$cast318) - ($sub$ptr$rhs$cast268))|0;
    $cmp271 = ($p$0|0)>($sub$ptr$sub269|0);
    $add270 = (($sub$ptr$sub269) + 1)|0;
    $106 = $tobool265 | $cmp271;
    $p$0$p$0$add270 = $106 ? $p$0 : $add270;
    $125 = $101;$127 = $104;$a$0 = $105;$fl$4 = $fl$1$and220;$p$2 = $p$0$p$0$add270;$pl$1 = 0;$prefix$1 = 13166;
    label = 67;
    break;
   }
   case 105: case 100:  {
    $107 = $arg;
    $108 = $107;
    $109 = HEAP32[$108>>2]|0;
    $110 = (($107) + 4)|0;
    $111 = $110;
    $112 = HEAP32[$111>>2]|0;
    $113 = ($112|0)<(0);
    if ($113) {
     $114 = (_i64Subtract(0,0,($109|0),($112|0))|0);
     $115 = tempRet0;
     $116 = $arg;
     $117 = $116;
     HEAP32[$117>>2] = $114;
     $118 = (($116) + 4)|0;
     $119 = $118;
     HEAP32[$119>>2] = $115;
     $121 = $114;$122 = $115;$pl$0 = 1;$prefix$0 = 13166;
     label = 66;
     break L71;
    } else {
     $and290 = $fl$1$and220 & 2048;
     $tobool291 = ($and290|0)==(0);
     $and295 = $fl$1$and220 & 1;
     $tobool296 = ($and295|0)==(0);
     $$ = $tobool296 ? 13166 : (13168);
     $$$ = $tobool291 ? $$ : (13167);
     $120 = $fl$1$and220 & 2049;
     $narrow = ($120|0)!=(0);
     $$194$ = $narrow&1;
     $121 = $109;$122 = $112;$pl$0 = $$194$;$prefix$0 = $$$;
     label = 66;
     break L71;
    }
    break;
   }
   case 117:  {
    $64 = $arg;
    $65 = $64;
    $66 = HEAP32[$65>>2]|0;
    $67 = (($64) + 4)|0;
    $68 = $67;
    $69 = HEAP32[$68>>2]|0;
    $121 = $66;$122 = $69;$pl$0 = 0;$prefix$0 = 13166;
    label = 66;
    break;
   }
   case 99:  {
    $129 = $arg;
    $130 = $129;
    $131 = HEAP32[$130>>2]|0;
    $132 = (($129) + 4)|0;
    $133 = $132;
    $134 = HEAP32[$133>>2]|0;
    $135 = $131&255;
    HEAP8[$add$ptr341>>0] = $135;
    $a$2 = $add$ptr341;$fl$6 = $and220;$p$5 = 1;$pl$2 = 0;$prefix$2 = 13166;$z$2 = $add$ptr206;
    break;
   }
   case 109:  {
    $call345 = (___errno_location()|0);
    $136 = HEAP32[$call345>>2]|0;
    $call346 = (_strerror($136)|0);
    $a$1 = $call346;
    label = 71;
    break;
   }
   case 115:  {
    $137 = HEAP32[$arg>>2]|0;
    $tobool350 = ($137|0)!=(0|0);
    $cond355 = $tobool350 ? $137 : 13176;
    $a$1 = $cond355;
    label = 71;
    break;
   }
   case 67:  {
    $138 = $arg;
    $139 = $138;
    $140 = HEAP32[$139>>2]|0;
    $141 = (($138) + 4)|0;
    $142 = $141;
    $143 = HEAP32[$142>>2]|0;
    HEAP32[$wc>>2] = $140;
    HEAP32[$arrayidx371>>2] = 0;
    HEAP32[$arg>>2] = $wc;
    $150 = $wc;$p$4253 = -1;
    label = 75;
    break;
   }
   case 83:  {
    $$pre249 = HEAP32[$arg>>2]|0;
    $cmp378227 = ($p$0|0)==(0);
    if ($cmp378227) {
     _pad_684($f,32,$w$1,0,$fl$1$and220);
     $i$0$lcssa256 = 0;
     label = 84;
    } else {
     $150 = $$pre249;$p$4253 = $p$0;
     label = 75;
    }
    break;
   }
   case 65: case 71: case 70: case 69: case 97: case 103: case 102: case 101:  {
    $146 = +HEAPF64[$arg>>3];
    $call430 = (_fmt_fp($f,$146,$w$1,$p$0,$fl$1$and220,$t$0)|0);
    $1 = $incdec$ptr171;$cnt$0 = $cnt$1;$l$0 = $call430;$l10n$0 = $l10n$3;
    continue L1;
    break;
   }
   default: {
    $a$2 = $1;$fl$6 = $fl$1$and220;$p$5 = $p$0;$pl$2 = 0;$prefix$2 = 13166;$z$2 = $add$ptr206;
   }
   }
  } while(0);
  L95: do {
   if ((label|0) == 61) {
    label = 0;
    $89 = $arg;
    $90 = $89;
    $91 = HEAP32[$90>>2]|0;
    $92 = (($89) + 4)|0;
    $93 = $92;
    $94 = HEAP32[$93>>2]|0;
    $and250 = $t$1 & 32;
    $95 = (_fmt_x($91,$94,$add$ptr206,$and250)|0);
    $96 = ($91|0)==(0);
    $97 = ($94|0)==(0);
    $98 = $96 & $97;
    $and255 = $fl$3 & 8;
    $tobool256 = ($and255|0)==(0);
    $or$cond193 = $tobool256 | $98;
    $shr = $t$1 >> 4;
    $add$ptr258 = (13166 + ($shr)|0);
    $$add$ptr258 = $or$cond193 ? 13166 : $add$ptr258;
    $$197 = $or$cond193 ? 0 : 2;
    $125 = $91;$127 = $94;$a$0 = $95;$fl$4 = $fl$3;$p$2 = $p$1;$pl$1 = $$197;$prefix$1 = $$add$ptr258;
    label = 67;
   }
   else if ((label|0) == 66) {
    label = 0;
    $123 = (_fmt_u($121,$122,$add$ptr206)|0);
    $125 = $121;$127 = $122;$a$0 = $123;$fl$4 = $fl$1$and220;$p$2 = $p$0;$pl$1 = $pl$0;$prefix$1 = $prefix$0;
    label = 67;
   }
   else if ((label|0) == 71) {
    label = 0;
    $call357 = (_memchr($a$1,0,$p$0)|0);
    $tobool358 = ($call357|0)==(0|0);
    $sub$ptr$lhs$cast362 = $call357;
    $sub$ptr$rhs$cast363 = $a$1;
    $sub$ptr$sub364 = (($sub$ptr$lhs$cast362) - ($sub$ptr$rhs$cast363))|0;
    $add$ptr360 = (($a$1) + ($p$0)|0);
    $p$3 = $tobool358 ? $p$0 : $sub$ptr$sub364;
    $z$1 = $tobool358 ? $add$ptr360 : $call357;
    $a$2 = $a$1;$fl$6 = $and220;$p$5 = $p$3;$pl$2 = 0;$prefix$2 = 13166;$z$2 = $z$1;
   }
   else if ((label|0) == 75) {
    label = 0;
    $i$0229 = 0;$l$1228 = 0;$ws$0230 = $150;
    while(1) {
     $144 = HEAP32[$ws$0230>>2]|0;
     $tobool381 = ($144|0)==(0);
     if ($tobool381) {
      $i$0$lcssa = $i$0229;$l$2 = $l$1228;
      break;
     }
     $call385 = (_wctomb($mb,$144)|0);
     $cmp386 = ($call385|0)<(0);
     $sub390 = (($p$4253) - ($i$0229))|0;
     $cmp391 = ($call385>>>0)>($sub390>>>0);
     $or$cond195 = $cmp386 | $cmp391;
     if ($or$cond195) {
      $i$0$lcssa = $i$0229;$l$2 = $call385;
      break;
     }
     $incdec$ptr384 = ((($ws$0230)) + 4|0);
     $add396 = (($call385) + ($i$0229))|0;
     $cmp378 = ($p$4253>>>0)>($add396>>>0);
     if ($cmp378) {
      $i$0229 = $add396;$l$1228 = $call385;$ws$0230 = $incdec$ptr384;
     } else {
      $i$0$lcssa = $add396;$l$2 = $call385;
      break;
     }
    }
    $cmp398 = ($l$2|0)<(0);
    if ($cmp398) {
     $retval$0 = -1;
     break L1;
    }
    _pad_684($f,32,$w$1,$i$0$lcssa,$fl$1$and220);
    $cmp405237 = ($i$0$lcssa|0)==(0);
    if ($cmp405237) {
     $i$0$lcssa256 = 0;
     label = 84;
    } else {
     $i$1238 = 0;$ws$1239 = $150;
     while(1) {
      $145 = HEAP32[$ws$1239>>2]|0;
      $tobool408 = ($145|0)==(0);
      if ($tobool408) {
       $i$0$lcssa256 = $i$0$lcssa;
       label = 84;
       break L95;
      }
      $call412 = (_wctomb($mb,$145)|0);
      $add413 = (($call412) + ($i$1238))|0;
      $cmp414 = ($add413|0)>($i$0$lcssa|0);
      if ($cmp414) {
       $i$0$lcssa256 = $i$0$lcssa;
       label = 84;
       break L95;
      }
      $incdec$ptr411 = ((($ws$1239)) + 4|0);
      _out($f,$mb,$call412);
      $cmp405 = ($add413>>>0)<($i$0$lcssa>>>0);
      if ($cmp405) {
       $i$1238 = $add413;$ws$1239 = $incdec$ptr411;
      } else {
       $i$0$lcssa256 = $i$0$lcssa;
       label = 84;
       break;
      }
     }
    }
   }
  } while(0);
  if ((label|0) == 67) {
   label = 0;
   $cmp307 = ($p$2|0)>(-1);
   $and310 = $fl$4 & -65537;
   $and310$fl$4 = $cmp307 ? $and310 : $fl$4;
   $124 = ($125|0)!=(0);
   $126 = ($127|0)!=(0);
   $128 = $124 | $126;
   $tobool315 = ($p$2|0)!=(0);
   $or$cond = $tobool315 | $128;
   $sub$ptr$rhs$cast319 = $a$0;
   $sub$ptr$sub320 = (($sub$ptr$lhs$cast318) - ($sub$ptr$rhs$cast319))|0;
   $lnot = $128 ^ 1;
   $lnot$ext = $lnot&1;
   $add323 = (($lnot$ext) + ($sub$ptr$sub320))|0;
   $cmp324 = ($p$2|0)>($add323|0);
   $p$2$add323 = $cmp324 ? $p$2 : $add323;
   $p$2$add323$p$2 = $or$cond ? $p$2$add323 : $p$2;
   $a$0$add$ptr206 = $or$cond ? $a$0 : $add$ptr206;
   $a$2 = $a$0$add$ptr206;$fl$6 = $and310$fl$4;$p$5 = $p$2$add323$p$2;$pl$2 = $pl$1;$prefix$2 = $prefix$1;$z$2 = $add$ptr206;
  }
  else if ((label|0) == 84) {
   label = 0;
   $xor = $fl$1$and220 ^ 8192;
   _pad_684($f,32,$w$1,$i$0$lcssa256,$xor);
   $cmp422 = ($w$1|0)>($i$0$lcssa256|0);
   $cond427 = $cmp422 ? $w$1 : $i$0$lcssa256;
   $1 = $incdec$ptr171;$cnt$0 = $cnt$1;$l$0 = $cond427;$l10n$0 = $l10n$3;
   continue;
  }
  $sub$ptr$lhs$cast432 = $z$2;
  $sub$ptr$rhs$cast433 = $a$2;
  $sub$ptr$sub434 = (($sub$ptr$lhs$cast432) - ($sub$ptr$rhs$cast433))|0;
  $cmp435 = ($p$5|0)<($sub$ptr$sub434|0);
  $sub$ptr$sub434$p$5 = $cmp435 ? $sub$ptr$sub434 : $p$5;
  $add442 = (($sub$ptr$sub434$p$5) + ($pl$2))|0;
  $cmp443 = ($w$1|0)<($add442|0);
  $w$2 = $cmp443 ? $add442 : $w$1;
  _pad_684($f,32,$w$2,$add442,$fl$6);
  _out($f,$prefix$2,$pl$2);
  $xor450 = $fl$6 ^ 65536;
  _pad_684($f,48,$w$2,$add442,$xor450);
  _pad_684($f,48,$sub$ptr$sub434$p$5,$sub$ptr$sub434,0);
  _out($f,$a$2,$sub$ptr$sub434);
  $xor458 = $fl$6 ^ 8192;
  _pad_684($f,32,$w$2,$add442,$xor458);
  $1 = $incdec$ptr171;$cnt$0 = $cnt$1;$l$0 = $w$2;$l10n$0 = $l10n$3;
 }
 L114: do {
  if ((label|0) == 87) {
   $tobool460 = ($f|0)==(0|0);
   if ($tobool460) {
    $tobool463 = ($l10n$0|0)==(0);
    if ($tobool463) {
     $retval$0 = 0;
    } else {
     $i$2210 = 1;
     while(1) {
      $arrayidx470 = (($nl_type) + ($i$2210<<2)|0);
      $147 = HEAP32[$arrayidx470>>2]|0;
      $tobool471 = ($147|0)==(0);
      if ($tobool471) {
       $i$3207 = $i$2210;
       break;
      }
      $add$ptr474 = (($nl_arg) + ($i$2210<<3)|0);
      _pop_arg($add$ptr474,$147,$ap);
      $inc = (($i$2210) + 1)|0;
      $cmp467 = ($inc|0)<(10);
      if ($cmp467) {
       $i$2210 = $inc;
      } else {
       $retval$0 = 1;
       break L114;
      }
     }
     while(1) {
      $arrayidx482 = (($nl_type) + ($i$3207<<2)|0);
      $148 = HEAP32[$arrayidx482>>2]|0;
      $lnot484 = ($148|0)==(0);
      $inc489 = (($i$3207) + 1)|0;
      if (!($lnot484)) {
       $retval$0 = -1;
       break L114;
      }
      $cmp479 = ($inc489|0)<(10);
      if ($cmp479) {
       $i$3207 = $inc489;
      } else {
       $retval$0 = 1;
       break;
      }
     }
    }
   } else {
    $retval$0 = $cnt$1;
   }
  }
 } while(0);
 STACKTOP = sp;return ($retval$0|0);
}
function ___lockfile($f) {
 $f = $f|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 0;
}
function ___unlockfile($f) {
 $f = $f|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function _out($f,$s,$l) {
 $f = $f|0;
 $s = $s|0;
 $l = $l|0;
 var $0 = 0, $and = 0, $tobool = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$f>>2]|0;
 $and = $0 & 32;
 $tobool = ($and|0)==(0);
 if ($tobool) {
  (___fwritex($s,$l,$f)|0);
 }
 return;
}
function _getint($s) {
 $s = $s|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $add = 0, $conv = 0, $conv4 = 0, $i$0$lcssa = 0, $i$07 = 0, $incdec$ptr = 0, $isdigit = 0, $isdigit6 = 0, $isdigittmp = 0, $isdigittmp5 = 0, $isdigittmp8 = 0, $mul = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$s>>2]|0;
 $1 = HEAP8[$0>>0]|0;
 $conv4 = $1 << 24 >> 24;
 $isdigittmp5 = (($conv4) + -48)|0;
 $isdigit6 = ($isdigittmp5>>>0)<(10);
 if ($isdigit6) {
  $2 = $0;$i$07 = 0;$isdigittmp8 = $isdigittmp5;
  while(1) {
   $mul = ($i$07*10)|0;
   $add = (($isdigittmp8) + ($mul))|0;
   $incdec$ptr = ((($2)) + 1|0);
   HEAP32[$s>>2] = $incdec$ptr;
   $3 = HEAP8[$incdec$ptr>>0]|0;
   $conv = $3 << 24 >> 24;
   $isdigittmp = (($conv) + -48)|0;
   $isdigit = ($isdigittmp>>>0)<(10);
   if ($isdigit) {
    $2 = $incdec$ptr;$i$07 = $add;$isdigittmp8 = $isdigittmp;
   } else {
    $i$0$lcssa = $add;
    break;
   }
  }
 } else {
  $i$0$lcssa = 0;
 }
 return ($i$0$lcssa|0);
}
function _pop_arg($arg,$type,$ap) {
 $arg = $arg|0;
 $type = $type|0;
 $ap = $ap|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0.0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0.0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0;
 var $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0;
 var $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0;
 var $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0;
 var $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0;
 var $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $arglist_current = 0, $arglist_current11 = 0, $arglist_current14 = 0, $arglist_current17 = 0, $arglist_current2 = 0, $arglist_current20 = 0, $arglist_current23 = 0, $arglist_current26 = 0, $arglist_current5 = 0;
 var $arglist_current8 = 0, $arglist_next = 0, $arglist_next12 = 0, $arglist_next15 = 0, $arglist_next18 = 0, $arglist_next21 = 0, $arglist_next24 = 0, $arglist_next27 = 0, $arglist_next3 = 0, $arglist_next6 = 0, $arglist_next9 = 0, $cmp = 0, $conv16 = 0, $conv22$mask = 0, $conv28 = 0, $conv34$mask = 0, $expanded = 0, $expanded28 = 0, $expanded30 = 0, $expanded31 = 0;
 var $expanded32 = 0, $expanded34 = 0, $expanded35 = 0, $expanded37 = 0, $expanded38 = 0, $expanded39 = 0, $expanded41 = 0, $expanded42 = 0, $expanded44 = 0, $expanded45 = 0, $expanded46 = 0, $expanded48 = 0, $expanded49 = 0, $expanded51 = 0, $expanded52 = 0, $expanded53 = 0, $expanded55 = 0, $expanded56 = 0, $expanded58 = 0, $expanded59 = 0;
 var $expanded60 = 0, $expanded62 = 0, $expanded63 = 0, $expanded65 = 0, $expanded66 = 0, $expanded67 = 0, $expanded69 = 0, $expanded70 = 0, $expanded72 = 0, $expanded73 = 0, $expanded74 = 0, $expanded76 = 0, $expanded77 = 0, $expanded79 = 0, $expanded80 = 0, $expanded81 = 0, $expanded83 = 0, $expanded84 = 0, $expanded86 = 0, $expanded87 = 0;
 var $expanded88 = 0, $expanded90 = 0, $expanded91 = 0, $expanded93 = 0, $expanded94 = 0, $expanded95 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $cmp = ($type>>>0)>(20);
 L1: do {
  if (!($cmp)) {
   do {
    switch ($type|0) {
    case 9:  {
     $arglist_current = HEAP32[$ap>>2]|0;
     $0 = $arglist_current;
     $1 = ((0) + 4|0);
     $expanded28 = $1;
     $expanded = (($expanded28) - 1)|0;
     $2 = (($0) + ($expanded))|0;
     $3 = ((0) + 4|0);
     $expanded32 = $3;
     $expanded31 = (($expanded32) - 1)|0;
     $expanded30 = $expanded31 ^ -1;
     $4 = $2 & $expanded30;
     $5 = $4;
     $6 = HEAP32[$5>>2]|0;
     $arglist_next = ((($5)) + 4|0);
     HEAP32[$ap>>2] = $arglist_next;
     HEAP32[$arg>>2] = $6;
     break L1;
     break;
    }
    case 10:  {
     $arglist_current2 = HEAP32[$ap>>2]|0;
     $7 = $arglist_current2;
     $8 = ((0) + 4|0);
     $expanded35 = $8;
     $expanded34 = (($expanded35) - 1)|0;
     $9 = (($7) + ($expanded34))|0;
     $10 = ((0) + 4|0);
     $expanded39 = $10;
     $expanded38 = (($expanded39) - 1)|0;
     $expanded37 = $expanded38 ^ -1;
     $11 = $9 & $expanded37;
     $12 = $11;
     $13 = HEAP32[$12>>2]|0;
     $arglist_next3 = ((($12)) + 4|0);
     HEAP32[$ap>>2] = $arglist_next3;
     $14 = ($13|0)<(0);
     $15 = $14 << 31 >> 31;
     $16 = $arg;
     $17 = $16;
     HEAP32[$17>>2] = $13;
     $18 = (($16) + 4)|0;
     $19 = $18;
     HEAP32[$19>>2] = $15;
     break L1;
     break;
    }
    case 11:  {
     $arglist_current5 = HEAP32[$ap>>2]|0;
     $20 = $arglist_current5;
     $21 = ((0) + 4|0);
     $expanded42 = $21;
     $expanded41 = (($expanded42) - 1)|0;
     $22 = (($20) + ($expanded41))|0;
     $23 = ((0) + 4|0);
     $expanded46 = $23;
     $expanded45 = (($expanded46) - 1)|0;
     $expanded44 = $expanded45 ^ -1;
     $24 = $22 & $expanded44;
     $25 = $24;
     $26 = HEAP32[$25>>2]|0;
     $arglist_next6 = ((($25)) + 4|0);
     HEAP32[$ap>>2] = $arglist_next6;
     $27 = $arg;
     $28 = $27;
     HEAP32[$28>>2] = $26;
     $29 = (($27) + 4)|0;
     $30 = $29;
     HEAP32[$30>>2] = 0;
     break L1;
     break;
    }
    case 12:  {
     $arglist_current8 = HEAP32[$ap>>2]|0;
     $31 = $arglist_current8;
     $32 = ((0) + 8|0);
     $expanded49 = $32;
     $expanded48 = (($expanded49) - 1)|0;
     $33 = (($31) + ($expanded48))|0;
     $34 = ((0) + 8|0);
     $expanded53 = $34;
     $expanded52 = (($expanded53) - 1)|0;
     $expanded51 = $expanded52 ^ -1;
     $35 = $33 & $expanded51;
     $36 = $35;
     $37 = $36;
     $38 = $37;
     $39 = HEAP32[$38>>2]|0;
     $40 = (($37) + 4)|0;
     $41 = $40;
     $42 = HEAP32[$41>>2]|0;
     $arglist_next9 = ((($36)) + 8|0);
     HEAP32[$ap>>2] = $arglist_next9;
     $43 = $arg;
     $44 = $43;
     HEAP32[$44>>2] = $39;
     $45 = (($43) + 4)|0;
     $46 = $45;
     HEAP32[$46>>2] = $42;
     break L1;
     break;
    }
    case 13:  {
     $arglist_current11 = HEAP32[$ap>>2]|0;
     $47 = $arglist_current11;
     $48 = ((0) + 4|0);
     $expanded56 = $48;
     $expanded55 = (($expanded56) - 1)|0;
     $49 = (($47) + ($expanded55))|0;
     $50 = ((0) + 4|0);
     $expanded60 = $50;
     $expanded59 = (($expanded60) - 1)|0;
     $expanded58 = $expanded59 ^ -1;
     $51 = $49 & $expanded58;
     $52 = $51;
     $53 = HEAP32[$52>>2]|0;
     $arglist_next12 = ((($52)) + 4|0);
     HEAP32[$ap>>2] = $arglist_next12;
     $conv16 = $53&65535;
     $54 = $conv16 << 16 >> 16;
     $55 = ($54|0)<(0);
     $56 = $55 << 31 >> 31;
     $57 = $arg;
     $58 = $57;
     HEAP32[$58>>2] = $54;
     $59 = (($57) + 4)|0;
     $60 = $59;
     HEAP32[$60>>2] = $56;
     break L1;
     break;
    }
    case 14:  {
     $arglist_current14 = HEAP32[$ap>>2]|0;
     $61 = $arglist_current14;
     $62 = ((0) + 4|0);
     $expanded63 = $62;
     $expanded62 = (($expanded63) - 1)|0;
     $63 = (($61) + ($expanded62))|0;
     $64 = ((0) + 4|0);
     $expanded67 = $64;
     $expanded66 = (($expanded67) - 1)|0;
     $expanded65 = $expanded66 ^ -1;
     $65 = $63 & $expanded65;
     $66 = $65;
     $67 = HEAP32[$66>>2]|0;
     $arglist_next15 = ((($66)) + 4|0);
     HEAP32[$ap>>2] = $arglist_next15;
     $conv22$mask = $67 & 65535;
     $68 = $arg;
     $69 = $68;
     HEAP32[$69>>2] = $conv22$mask;
     $70 = (($68) + 4)|0;
     $71 = $70;
     HEAP32[$71>>2] = 0;
     break L1;
     break;
    }
    case 15:  {
     $arglist_current17 = HEAP32[$ap>>2]|0;
     $72 = $arglist_current17;
     $73 = ((0) + 4|0);
     $expanded70 = $73;
     $expanded69 = (($expanded70) - 1)|0;
     $74 = (($72) + ($expanded69))|0;
     $75 = ((0) + 4|0);
     $expanded74 = $75;
     $expanded73 = (($expanded74) - 1)|0;
     $expanded72 = $expanded73 ^ -1;
     $76 = $74 & $expanded72;
     $77 = $76;
     $78 = HEAP32[$77>>2]|0;
     $arglist_next18 = ((($77)) + 4|0);
     HEAP32[$ap>>2] = $arglist_next18;
     $conv28 = $78&255;
     $79 = $conv28 << 24 >> 24;
     $80 = ($79|0)<(0);
     $81 = $80 << 31 >> 31;
     $82 = $arg;
     $83 = $82;
     HEAP32[$83>>2] = $79;
     $84 = (($82) + 4)|0;
     $85 = $84;
     HEAP32[$85>>2] = $81;
     break L1;
     break;
    }
    case 16:  {
     $arglist_current20 = HEAP32[$ap>>2]|0;
     $86 = $arglist_current20;
     $87 = ((0) + 4|0);
     $expanded77 = $87;
     $expanded76 = (($expanded77) - 1)|0;
     $88 = (($86) + ($expanded76))|0;
     $89 = ((0) + 4|0);
     $expanded81 = $89;
     $expanded80 = (($expanded81) - 1)|0;
     $expanded79 = $expanded80 ^ -1;
     $90 = $88 & $expanded79;
     $91 = $90;
     $92 = HEAP32[$91>>2]|0;
     $arglist_next21 = ((($91)) + 4|0);
     HEAP32[$ap>>2] = $arglist_next21;
     $conv34$mask = $92 & 255;
     $93 = $arg;
     $94 = $93;
     HEAP32[$94>>2] = $conv34$mask;
     $95 = (($93) + 4)|0;
     $96 = $95;
     HEAP32[$96>>2] = 0;
     break L1;
     break;
    }
    case 17:  {
     $arglist_current23 = HEAP32[$ap>>2]|0;
     $97 = $arglist_current23;
     $98 = ((0) + 8|0);
     $expanded84 = $98;
     $expanded83 = (($expanded84) - 1)|0;
     $99 = (($97) + ($expanded83))|0;
     $100 = ((0) + 8|0);
     $expanded88 = $100;
     $expanded87 = (($expanded88) - 1)|0;
     $expanded86 = $expanded87 ^ -1;
     $101 = $99 & $expanded86;
     $102 = $101;
     $103 = +HEAPF64[$102>>3];
     $arglist_next24 = ((($102)) + 8|0);
     HEAP32[$ap>>2] = $arglist_next24;
     HEAPF64[$arg>>3] = $103;
     break L1;
     break;
    }
    case 18:  {
     $arglist_current26 = HEAP32[$ap>>2]|0;
     $104 = $arglist_current26;
     $105 = ((0) + 8|0);
     $expanded91 = $105;
     $expanded90 = (($expanded91) - 1)|0;
     $106 = (($104) + ($expanded90))|0;
     $107 = ((0) + 8|0);
     $expanded95 = $107;
     $expanded94 = (($expanded95) - 1)|0;
     $expanded93 = $expanded94 ^ -1;
     $108 = $106 & $expanded93;
     $109 = $108;
     $110 = +HEAPF64[$109>>3];
     $arglist_next27 = ((($109)) + 8|0);
     HEAP32[$ap>>2] = $arglist_next27;
     HEAPF64[$arg>>3] = $110;
     break L1;
     break;
    }
    default: {
     break L1;
    }
    }
   } while(0);
  }
 } while(0);
 return;
}
function _fmt_x($0,$1,$s,$lower) {
 $0 = $0|0;
 $1 = $1|0;
 $s = $s|0;
 $lower = $lower|0;
 var $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $arrayidx = 0, $conv1 = 0, $conv4 = 0, $idxprom = 0, $incdec$ptr = 0, $or = 0, $s$addr$0$lcssa = 0, $s$addr$06 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $2 = ($0|0)==(0);
 $3 = ($1|0)==(0);
 $4 = $2 & $3;
 if ($4) {
  $s$addr$0$lcssa = $s;
 } else {
  $5 = $0;$7 = $1;$s$addr$06 = $s;
  while(1) {
   $idxprom = $5 & 15;
   $arrayidx = (13214 + ($idxprom)|0);
   $6 = HEAP8[$arrayidx>>0]|0;
   $conv4 = $6&255;
   $or = $conv4 | $lower;
   $conv1 = $or&255;
   $incdec$ptr = ((($s$addr$06)) + -1|0);
   HEAP8[$incdec$ptr>>0] = $conv1;
   $8 = (_bitshift64Lshr(($5|0),($7|0),4)|0);
   $9 = tempRet0;
   $10 = ($8|0)==(0);
   $11 = ($9|0)==(0);
   $12 = $10 & $11;
   if ($12) {
    $s$addr$0$lcssa = $incdec$ptr;
    break;
   } else {
    $5 = $8;$7 = $9;$s$addr$06 = $incdec$ptr;
   }
  }
 }
 return ($s$addr$0$lcssa|0);
}
function _fmt_o($0,$1,$s) {
 $0 = $0|0;
 $1 = $1|0;
 $s = $s|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $conv = 0, $incdec$ptr = 0, $s$addr$0$lcssa = 0, $s$addr$06 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($0|0)==(0);
 $3 = ($1|0)==(0);
 $4 = $2 & $3;
 if ($4) {
  $s$addr$0$lcssa = $s;
 } else {
  $6 = $0;$8 = $1;$s$addr$06 = $s;
  while(1) {
   $5 = $6&255;
   $7 = $5 & 7;
   $conv = $7 | 48;
   $incdec$ptr = ((($s$addr$06)) + -1|0);
   HEAP8[$incdec$ptr>>0] = $conv;
   $9 = (_bitshift64Lshr(($6|0),($8|0),3)|0);
   $10 = tempRet0;
   $11 = ($9|0)==(0);
   $12 = ($10|0)==(0);
   $13 = $11 & $12;
   if ($13) {
    $s$addr$0$lcssa = $incdec$ptr;
    break;
   } else {
    $6 = $9;$8 = $10;$s$addr$06 = $incdec$ptr;
   }
  }
 }
 return ($s$addr$0$lcssa|0);
}
function _fmt_u($0,$1,$s) {
 $0 = $0|0;
 $1 = $1|0;
 $s = $s|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $add5 = 0, $conv = 0;
 var $conv6 = 0, $div9 = 0, $incdec$ptr = 0, $incdec$ptr7 = 0, $rem4 = 0, $s$addr$0$lcssa = 0, $s$addr$013 = 0, $s$addr$1$lcssa = 0, $s$addr$19 = 0, $tobool8 = 0, $x$addr$0$lcssa$off0 = 0, $y$010 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($1>>>0)>(0);
 $3 = ($0>>>0)>(4294967295);
 $4 = ($1|0)==(0);
 $5 = $4 & $3;
 $6 = $2 | $5;
 if ($6) {
  $7 = $0;$8 = $1;$s$addr$013 = $s;
  while(1) {
   $9 = (___uremdi3(($7|0),($8|0),10,0)|0);
   $10 = tempRet0;
   $11 = $9&255;
   $conv = $11 | 48;
   $incdec$ptr = ((($s$addr$013)) + -1|0);
   HEAP8[$incdec$ptr>>0] = $conv;
   $12 = (___udivdi3(($7|0),($8|0),10,0)|0);
   $13 = tempRet0;
   $14 = ($8>>>0)>(9);
   $15 = ($7>>>0)>(4294967295);
   $16 = ($8|0)==(9);
   $17 = $16 & $15;
   $18 = $14 | $17;
   if ($18) {
    $7 = $12;$8 = $13;$s$addr$013 = $incdec$ptr;
   } else {
    break;
   }
  }
  $s$addr$0$lcssa = $incdec$ptr;$x$addr$0$lcssa$off0 = $12;
 } else {
  $s$addr$0$lcssa = $s;$x$addr$0$lcssa$off0 = $0;
 }
 $tobool8 = ($x$addr$0$lcssa$off0|0)==(0);
 if ($tobool8) {
  $s$addr$1$lcssa = $s$addr$0$lcssa;
 } else {
  $s$addr$19 = $s$addr$0$lcssa;$y$010 = $x$addr$0$lcssa$off0;
  while(1) {
   $rem4 = (($y$010>>>0) % 10)&-1;
   $add5 = $rem4 | 48;
   $conv6 = $add5&255;
   $incdec$ptr7 = ((($s$addr$19)) + -1|0);
   HEAP8[$incdec$ptr7>>0] = $conv6;
   $div9 = (($y$010>>>0) / 10)&-1;
   $19 = ($y$010>>>0)<(10);
   if ($19) {
    $s$addr$1$lcssa = $incdec$ptr7;
    break;
   } else {
    $s$addr$19 = $incdec$ptr7;$y$010 = $div9;
   }
  }
 }
 return ($s$addr$1$lcssa|0);
}
function _strerror($e) {
 $e = $e|0;
 var $0 = 0, $call = 0, $call1 = 0, $locale = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = (___pthread_self_104()|0);
 $locale = ((($call)) + 188|0);
 $0 = HEAP32[$locale>>2]|0;
 $call1 = (___strerror_l($e,$0)|0);
 return ($call1|0);
}
function _memchr($src,$c,$n) {
 $src = $src|0;
 $c = $c|0;
 $n = $n|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $and = 0, $and15 = 0, $and16 = 0, $and39 = 0, $cmp = 0, $cmp11 = 0, $cmp1132 = 0, $cmp28 = 0, $cmp8 = 0, $cond = 0, $conv1 = 0, $dec = 0;
 var $dec34 = 0, $incdec$ptr = 0, $incdec$ptr21 = 0, $incdec$ptr33 = 0, $lnot = 0, $mul = 0, $n$addr$0$lcssa = 0, $n$addr$0$lcssa52 = 0, $n$addr$043 = 0, $n$addr$1$lcssa = 0, $n$addr$133 = 0, $n$addr$227 = 0, $n$addr$3 = 0, $neg = 0, $or$cond = 0, $or$cond42 = 0, $s$0$lcssa = 0, $s$0$lcssa53 = 0, $s$044 = 0, $s$128 = 0;
 var $s$2 = 0, $sub = 0, $sub22 = 0, $tobool = 0, $tobool2 = 0, $tobool2$lcssa = 0, $tobool241 = 0, $tobool25 = 0, $tobool2526 = 0, $tobool36 = 0, $tobool40 = 0, $w$0$lcssa = 0, $w$034 = 0, $xor = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $conv1 = $c & 255;
 $0 = $src;
 $and39 = $0 & 3;
 $tobool40 = ($and39|0)!=(0);
 $tobool241 = ($n|0)!=(0);
 $or$cond42 = $tobool241 & $tobool40;
 L1: do {
  if ($or$cond42) {
   $1 = $c&255;
   $n$addr$043 = $n;$s$044 = $src;
   while(1) {
    $2 = HEAP8[$s$044>>0]|0;
    $cmp = ($2<<24>>24)==($1<<24>>24);
    if ($cmp) {
     $n$addr$0$lcssa52 = $n$addr$043;$s$0$lcssa53 = $s$044;
     label = 6;
     break L1;
    }
    $incdec$ptr = ((($s$044)) + 1|0);
    $dec = (($n$addr$043) + -1)|0;
    $3 = $incdec$ptr;
    $and = $3 & 3;
    $tobool = ($and|0)!=(0);
    $tobool2 = ($dec|0)!=(0);
    $or$cond = $tobool2 & $tobool;
    if ($or$cond) {
     $n$addr$043 = $dec;$s$044 = $incdec$ptr;
    } else {
     $n$addr$0$lcssa = $dec;$s$0$lcssa = $incdec$ptr;$tobool2$lcssa = $tobool2;
     label = 5;
     break;
    }
   }
  } else {
   $n$addr$0$lcssa = $n;$s$0$lcssa = $src;$tobool2$lcssa = $tobool241;
   label = 5;
  }
 } while(0);
 if ((label|0) == 5) {
  if ($tobool2$lcssa) {
   $n$addr$0$lcssa52 = $n$addr$0$lcssa;$s$0$lcssa53 = $s$0$lcssa;
   label = 6;
  } else {
   $n$addr$3 = 0;$s$2 = $s$0$lcssa;
  }
 }
 L8: do {
  if ((label|0) == 6) {
   $4 = HEAP8[$s$0$lcssa53>>0]|0;
   $5 = $c&255;
   $cmp8 = ($4<<24>>24)==($5<<24>>24);
   if ($cmp8) {
    $n$addr$3 = $n$addr$0$lcssa52;$s$2 = $s$0$lcssa53;
   } else {
    $mul = Math_imul($conv1, 16843009)|0;
    $cmp1132 = ($n$addr$0$lcssa52>>>0)>(3);
    L11: do {
     if ($cmp1132) {
      $n$addr$133 = $n$addr$0$lcssa52;$w$034 = $s$0$lcssa53;
      while(1) {
       $6 = HEAP32[$w$034>>2]|0;
       $xor = $6 ^ $mul;
       $sub = (($xor) + -16843009)|0;
       $neg = $xor & -2139062144;
       $and15 = $neg ^ -2139062144;
       $and16 = $and15 & $sub;
       $lnot = ($and16|0)==(0);
       if (!($lnot)) {
        break;
       }
       $incdec$ptr21 = ((($w$034)) + 4|0);
       $sub22 = (($n$addr$133) + -4)|0;
       $cmp11 = ($sub22>>>0)>(3);
       if ($cmp11) {
        $n$addr$133 = $sub22;$w$034 = $incdec$ptr21;
       } else {
        $n$addr$1$lcssa = $sub22;$w$0$lcssa = $incdec$ptr21;
        label = 11;
        break L11;
       }
      }
      $n$addr$227 = $n$addr$133;$s$128 = $w$034;
     } else {
      $n$addr$1$lcssa = $n$addr$0$lcssa52;$w$0$lcssa = $s$0$lcssa53;
      label = 11;
     }
    } while(0);
    if ((label|0) == 11) {
     $tobool2526 = ($n$addr$1$lcssa|0)==(0);
     if ($tobool2526) {
      $n$addr$3 = 0;$s$2 = $w$0$lcssa;
      break;
     } else {
      $n$addr$227 = $n$addr$1$lcssa;$s$128 = $w$0$lcssa;
     }
    }
    while(1) {
     $7 = HEAP8[$s$128>>0]|0;
     $cmp28 = ($7<<24>>24)==($5<<24>>24);
     if ($cmp28) {
      $n$addr$3 = $n$addr$227;$s$2 = $s$128;
      break L8;
     }
     $incdec$ptr33 = ((($s$128)) + 1|0);
     $dec34 = (($n$addr$227) + -1)|0;
     $tobool25 = ($dec34|0)==(0);
     if ($tobool25) {
      $n$addr$3 = 0;$s$2 = $incdec$ptr33;
      break;
     } else {
      $n$addr$227 = $dec34;$s$128 = $incdec$ptr33;
     }
    }
   }
  }
 } while(0);
 $tobool36 = ($n$addr$3|0)!=(0);
 $cond = $tobool36 ? $s$2 : 0;
 return ($cond|0);
}
function _pad_684($f,$c,$w,$l,$fl) {
 $f = $f|0;
 $c = $c|0;
 $w = $w|0;
 $l = $l|0;
 $fl = $fl|0;
 var $0 = 0, $1 = 0, $2 = 0, $and = 0, $cmp = 0, $cmp3 = 0, $cmp38 = 0, $cond = 0, $l$addr$0$lcssa = 0, $l$addr$09 = 0, $or$cond = 0, $pad = 0, $sub = 0, $sub6 = 0, $tobool = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 256|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(256|0);
 $pad = sp;
 $and = $fl & 73728;
 $tobool = ($and|0)==(0);
 $cmp = ($w|0)>($l|0);
 $or$cond = $cmp & $tobool;
 if ($or$cond) {
  $sub = (($w) - ($l))|0;
  $0 = ($sub>>>0)<(256);
  $cond = $0 ? $sub : 256;
  _memset(($pad|0),($c|0),($cond|0))|0;
  $cmp38 = ($sub>>>0)>(255);
  if ($cmp38) {
   $1 = (($w) - ($l))|0;
   $l$addr$09 = $sub;
   while(1) {
    _out($f,$pad,256);
    $sub6 = (($l$addr$09) + -256)|0;
    $cmp3 = ($sub6>>>0)>(255);
    if ($cmp3) {
     $l$addr$09 = $sub6;
    } else {
     break;
    }
   }
   $2 = $1 & 255;
   $l$addr$0$lcssa = $2;
  } else {
   $l$addr$0$lcssa = $sub;
  }
  _out($f,$pad,$l$addr$0$lcssa);
 }
 STACKTOP = sp;return;
}
function _wctomb($s,$wc) {
 $s = $s|0;
 $wc = $wc|0;
 var $call = 0, $retval$0 = 0, $tobool = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $tobool = ($s|0)==(0|0);
 if ($tobool) {
  $retval$0 = 0;
 } else {
  $call = (_wcrtomb($s,$wc,0)|0);
  $retval$0 = $call;
 }
 return ($retval$0|0);
}
function _fmt_fp($f,$y,$w,$p,$fl,$t) {
 $f = $f|0;
 $y = +$y;
 $w = $w|0;
 $p = $p|0;
 $fl = $fl|0;
 $t = $t|0;
 var $$ = 0, $$$ = 0, $$$405 = 0.0, $$394$ = 0, $$397 = 0.0, $$405 = 0.0, $$p = 0, $$p$inc468 = 0, $$pr = 0, $$pr407 = 0, $$pre = 0, $$pre487 = 0, $$sub514 = 0, $$sub562 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0;
 var $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0;
 var $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0;
 var $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $8 = 0, $9 = 0, $a$1$lcssa = 0, $a$1476 = 0, $a$2$ph = 0, $a$3$lcssa = 0, $a$3466 = 0, $a$5$lcssa = 0, $a$5448 = 0, $a$6 = 0, $a$8 = 0;
 var $a$9$ph = 0, $add = 0, $add$ptr213 = 0, $add$ptr311 = 0, $add$ptr311$z$4 = 0, $add$ptr354 = 0, $add$ptr358 = 0, $add$ptr373 = 0, $add$ptr442 = 0, $add$ptr442$z$3 = 0, $add$ptr65 = 0, $add$ptr671 = 0, $add$ptr742 = 0, $add$ptr756 = 0, $add113 = 0, $add150 = 0, $add150$pn = 0, $add165 = 0, $add273 = 0, $add275 = 0;
 var $add284 = 0, $add313 = 0, $add355 = 0, $add410 = 0.0, $add414 = 0, $add477$neg = 0, $add561 = 0, $add608 = 0, $add612 = 0, $add620 = 0, $add653 = 0, $add653$sink406 = 0, $add67 = 0, $add737 = 0, $add810 = 0, $add87 = 0.0, $add90 = 0.0, $and = 0, $and12 = 0, $and134 = 0;
 var $and282 = 0, $and36 = 0, $and379 = 0, $and45 = 0, $and483 = 0, $and610$pre$phiZ2D = 0, $and62 = 0, $arraydecay208$add$ptr213 = 0, $arrayidx = 0, $arrayidx117 = 0, $arrayidx251 = 0, $arrayidx453 = 0, $arrayidx489 = 0, $big = 0, $buf = 0, $call55 = 0.0, $carry$0471 = 0, $carry262$0462 = 0, $cmp103 = 0, $cmp127 = 0;
 var $cmp147 = 0, $cmp205 = 0, $cmp225 = 0, $cmp225474 = 0, $cmp235 = 0, $cmp235470 = 0, $cmp249 = 0, $cmp259 = 0, $cmp259464 = 0, $cmp277 = 0, $cmp277460 = 0, $cmp299 = 0, $cmp308 = 0, $cmp315 = 0, $cmp324 = 0, $cmp324456 = 0, $cmp333 = 0, $cmp338 = 0, $cmp350 = 0, $cmp363452 = 0;
 var $cmp374 = 0, $cmp38 = 0, $cmp385 = 0, $cmp390 = 0, $cmp403 = 0, $cmp411 = 0, $cmp416 = 0, $cmp416446 = 0, $cmp420 = 0, $cmp433 = 0, $cmp433442 = 0, $cmp443 = 0, $cmp450 = 0, $cmp450$lcssa = 0, $cmp470 = 0, $cmp473 = 0, $cmp495 = 0, $cmp495438 = 0, $cmp505 = 0, $cmp528 = 0;
 var $cmp577 = 0, $cmp59 = 0, $cmp614 = 0, $cmp617 = 0, $cmp623 = 0, $cmp636 = 0, $cmp636433 = 0, $cmp660 = 0, $cmp665 = 0, $cmp673 = 0, $cmp678 = 0, $cmp678419 = 0, $cmp68 = 0, $cmp686 = 0, $cmp707 = 0, $cmp707414 = 0, $cmp710 = 0, $cmp710415 = 0, $cmp722 = 0, $cmp722411 = 0;
 var $cmp745 = 0, $cmp748 = 0, $cmp748427 = 0, $cmp760 = 0, $cmp765 = 0, $cmp770 = 0, $cmp770423 = 0, $cmp777 = 0, $cmp790 = 0, $cmp818 = 0, $cmp82 = 0, $cmp94 = 0, $cond = 0, $cond100 = 0, $cond233 = 0, $cond271 = 0, $cond304 = 0, $cond43 = 0, $cond629 = 0, $cond732 = 0;
 var $cond800 = 0, $conv111 = 0, $conv114 = 0, $conv116 = 0, $conv118393 = 0, $conv121 = 0, $conv123 = 0.0, $conv216 = 0, $conv218 = 0.0, $conv644 = 0, $conv646 = 0, $d$0 = 0, $d$0469 = 0, $d$0472 = 0, $d$1461 = 0, $d$4 = 0, $d$5422 = 0, $d$6416 = 0, $d$7428 = 0, $dec = 0;
 var $dec476 = 0, $dec481 = 0, $dec78 = 0, $div274 = 0, $div356 = 0, $div378 = 0, $div384 = 0, $e$0458 = 0, $e$1 = 0, $e$2444 = 0, $e$4 = 0, $e$5$ph = 0, $e2 = 0, $ebuf0 = 0, $estr$0 = 0, $estr$1$lcssa = 0, $estr$1434 = 0, $estr$2 = 0, $exitcond = 0, $i$0457 = 0;
 var $i$1$lcssa = 0, $i$1453 = 0, $i$2443 = 0, $i$3439 = 0, $inc = 0, $inc425 = 0, $inc438 = 0, $inc468 = 0, $inc500 = 0, $incdec$ptr106 = 0, $incdec$ptr112 = 0, $incdec$ptr115 = 0, $incdec$ptr122 = 0, $incdec$ptr137 = 0, $incdec$ptr217 = 0, $incdec$ptr246 = 0, $incdec$ptr288 = 0, $incdec$ptr292 = 0, $incdec$ptr292$a$3 = 0, $incdec$ptr292$a$3492 = 0;
 var $incdec$ptr292$a$3494 = 0, $incdec$ptr292491 = 0, $incdec$ptr296 = 0, $incdec$ptr419 = 0, $incdec$ptr419$sink$lcssa = 0, $incdec$ptr419$sink447 = 0, $incdec$ptr423 = 0, $incdec$ptr639 = 0, $incdec$ptr645 = 0, $incdec$ptr647 = 0, $incdec$ptr681 = 0, $incdec$ptr689 = 0, $incdec$ptr698 = 0, $incdec$ptr725 = 0, $incdec$ptr734 = 0, $incdec$ptr763 = 0, $incdec$ptr773 = 0, $incdec$ptr776 = 0, $incdec$ptr808 = 0, $j$0 = 0;
 var $j$0451 = 0, $j$0454 = 0, $j$1440 = 0, $j$2 = 0, $l$0 = 0, $l$1 = 0, $land$ext$neg = 0, $lnot = 0, $lnot455 = 0, $lor$ext = 0, $mul = 0.0, $mul125 = 0.0, $mul202 = 0.0, $mul220 = 0.0, $mul286 = 0, $mul322 = 0, $mul328 = 0, $mul335 = 0, $mul349 = 0, $mul367 = 0;
 var $mul406 = 0.0, $mul406$$397 = 0.0, $mul407 = 0.0, $mul407$$$405 = 0.0, $mul431 = 0, $mul437 = 0, $mul499 = 0, $mul513 = 0, $mul80 = 0.0, $narrow = 0, $not$tobool341 = 0, $notlhs = 0, $notrhs = 0, $or = 0, $or$cond = 0, $or$cond1$not = 0, $or$cond2 = 0, $or$cond395 = 0, $or$cond396 = 0, $or$cond398 = 0;
 var $or$cond402 = 0, $or120 = 0, $or504 = 0, $or613 = 0, $p$addr$2 = 0, $p$addr$2$$sub514399 = 0, $p$addr$2$$sub562400 = 0, $p$addr$3 = 0, $p$addr$4$lcssa = 0, $p$addr$4417 = 0, $p$addr$5$lcssa = 0, $p$addr$5429 = 0, $pl$0 = 0, $prefix$0 = 0, $prefix$0$add$ptr65 = 0, $r$0$a$9 = 0, $re$1410 = 0, $rem360 = 0, $rem370 = 0, $rem494 = 0;
 var $rem494437 = 0, $round$0409 = 0.0, $round377$1 = 0.0, $s$0 = 0, $s$1 = 0, $s35$0 = 0, $s668$0420 = 0, $s668$1 = 0, $s715$0$lcssa = 0, $s715$0412 = 0, $s753$0 = 0, $s753$1424 = 0, $s753$2 = 0, $scevgep483 = 0, $scevgep483484 = 0, $shl280 = 0, $shr283 = 0, $shr285 = 0, $small$1 = 0.0, $sub = 0.0;
 var $sub$ptr$div = 0, $sub$ptr$div321 = 0, $sub$ptr$div347 = 0, $sub$ptr$div430 = 0, $sub$ptr$div511 = 0, $sub$ptr$lhs$cast = 0, $sub$ptr$lhs$cast143 = 0, $sub$ptr$lhs$cast151 = 0, $sub$ptr$lhs$cast305 = 0, $sub$ptr$lhs$cast318 = 0, $sub$ptr$lhs$cast344 = 0, $sub$ptr$lhs$cast508 = 0, $sub$ptr$lhs$cast633 = 0, $sub$ptr$lhs$cast694 = 0, $sub$ptr$lhs$cast787 = 0, $sub$ptr$lhs$cast811 = 0, $sub$ptr$rhs$cast = 0, $sub$ptr$rhs$cast152 = 0, $sub$ptr$rhs$cast306 = 0, $sub$ptr$rhs$cast319 = 0;
 var $sub$ptr$rhs$cast428 = 0, $sub$ptr$rhs$cast634 = 0, $sub$ptr$rhs$cast634431 = 0, $sub$ptr$rhs$cast649 = 0, $sub$ptr$rhs$cast695 = 0, $sub$ptr$rhs$cast788 = 0, $sub$ptr$rhs$cast812 = 0, $sub$ptr$sub = 0, $sub$ptr$sub145 = 0, $sub$ptr$sub153 = 0, $sub$ptr$sub307 = 0, $sub$ptr$sub320 = 0, $sub$ptr$sub346 = 0, $sub$ptr$sub429 = 0, $sub$ptr$sub510 = 0, $sub$ptr$sub635 = 0, $sub$ptr$sub635432 = 0, $sub$ptr$sub650 = 0, $sub$ptr$sub650$pn = 0, $sub$ptr$sub696 = 0;
 var $sub$ptr$sub789 = 0, $sub$ptr$sub813 = 0, $sub124 = 0.0, $sub146 = 0, $sub181 = 0, $sub203 = 0, $sub219 = 0.0, $sub256 = 0, $sub264 = 0, $sub281 = 0, $sub336 = 0, $sub343 = 0, $sub357 = 0, $sub409 = 0, $sub478 = 0, $sub480 = 0, $sub514 = 0, $sub562 = 0, $sub626$le = 0, $sub735 = 0;
 var $sub74 = 0, $sub806 = 0, $sub85 = 0.0, $sub86 = 0.0, $sub88 = 0.0, $sub91 = 0.0, $sub97 = 0, $t$addr$0 = 0, $t$addr$1 = 0, $tobool13 = 0, $tobool135 = 0, $tobool139 = 0, $tobool140 = 0, $tobool222 = 0, $tobool244 = 0, $tobool290 = 0, $tobool290490 = 0, $tobool294 = 0, $tobool341 = 0, $tobool37 = 0;
 var $tobool371 = 0, $tobool380 = 0, $tobool400 = 0, $tobool484 = 0, $tobool490 = 0, $tobool56 = 0, $tobool63 = 0, $tobool76 = 0, $tobool76488 = 0, $tobool781 = 0, $tobool79 = 0, $tobool9 = 0, $w$add653 = 0, $xor = 0, $xor167 = 0, $xor186 = 0, $xor655 = 0, $xor816 = 0, $y$addr$0 = 0.0, $y$addr$1 = 0.0;
 var $y$addr$2 = 0.0, $y$addr$3 = 0.0, $y$addr$4 = 0.0, $z$0 = 0, $z$1$lcssa = 0, $z$1475 = 0, $z$2 = 0, $z$3$lcssa = 0, $z$3465 = 0, $z$4 = 0, $z$7 = 0, $z$7$add$ptr742 = 0, $z$7$ph = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 560|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(560|0);
 $big = sp + 8|0;
 $e2 = sp;
 $buf = sp + 524|0;
 $sub$ptr$rhs$cast = $buf;
 $ebuf0 = sp + 512|0;
 HEAP32[$e2>>2] = 0;
 $arrayidx = ((($ebuf0)) + 12|0);
 (___DOUBLE_BITS_685($y)|0);
 $0 = tempRet0;
 $1 = ($0|0)<(0);
 if ($1) {
  $sub = -$y;
  $pl$0 = 1;$prefix$0 = 13183;$y$addr$0 = $sub;
 } else {
  $and = $fl & 2048;
  $tobool9 = ($and|0)==(0);
  $and12 = $fl & 1;
  $tobool13 = ($and12|0)==(0);
  $$ = $tobool13 ? (13184) : (13189);
  $$$ = $tobool9 ? $$ : (13186);
  $2 = $fl & 2049;
  $narrow = ($2|0)!=(0);
  $$394$ = $narrow&1;
  $pl$0 = $$394$;$prefix$0 = $$$;$y$addr$0 = $y;
 }
 (___DOUBLE_BITS_685($y$addr$0)|0);
 $3 = tempRet0;
 $4 = $3 & 2146435072;
 $5 = ($4>>>0)<(2146435072);
 $6 = (0)<(0);
 $7 = ($4|0)==(2146435072);
 $8 = $7 & $6;
 $9 = $5 | $8;
 do {
  if ($9) {
   $call55 = (+_frexpl($y$addr$0,$e2));
   $mul = $call55 * 2.0;
   $tobool56 = $mul != 0.0;
   if ($tobool56) {
    $10 = HEAP32[$e2>>2]|0;
    $dec = (($10) + -1)|0;
    HEAP32[$e2>>2] = $dec;
   }
   $or = $t | 32;
   $cmp59 = ($or|0)==(97);
   if ($cmp59) {
    $and62 = $t & 32;
    $tobool63 = ($and62|0)==(0);
    $add$ptr65 = ((($prefix$0)) + 9|0);
    $prefix$0$add$ptr65 = $tobool63 ? $prefix$0 : $add$ptr65;
    $add67 = $pl$0 | 2;
    $11 = ($p>>>0)>(11);
    $sub74 = (12 - ($p))|0;
    $tobool76488 = ($sub74|0)==(0);
    $tobool76 = $11 | $tobool76488;
    do {
     if ($tobool76) {
      $y$addr$1 = $mul;
     } else {
      $re$1410 = $sub74;$round$0409 = 8.0;
      while(1) {
       $dec78 = (($re$1410) + -1)|0;
       $mul80 = $round$0409 * 16.0;
       $tobool79 = ($dec78|0)==(0);
       if ($tobool79) {
        break;
       } else {
        $re$1410 = $dec78;$round$0409 = $mul80;
       }
      }
      $12 = HEAP8[$prefix$0$add$ptr65>>0]|0;
      $cmp82 = ($12<<24>>24)==(45);
      if ($cmp82) {
       $sub85 = -$mul;
       $sub86 = $sub85 - $mul80;
       $add87 = $mul80 + $sub86;
       $sub88 = -$add87;
       $y$addr$1 = $sub88;
       break;
      } else {
       $add90 = $mul + $mul80;
       $sub91 = $add90 - $mul80;
       $y$addr$1 = $sub91;
       break;
      }
     }
    } while(0);
    $13 = HEAP32[$e2>>2]|0;
    $cmp94 = ($13|0)<(0);
    $sub97 = (0 - ($13))|0;
    $cond100 = $cmp94 ? $sub97 : $13;
    $14 = ($cond100|0)<(0);
    $15 = $14 << 31 >> 31;
    $16 = (_fmt_u($cond100,$15,$arrayidx)|0);
    $cmp103 = ($16|0)==($arrayidx|0);
    if ($cmp103) {
     $incdec$ptr106 = ((($ebuf0)) + 11|0);
     HEAP8[$incdec$ptr106>>0] = 48;
     $estr$0 = $incdec$ptr106;
    } else {
     $estr$0 = $16;
    }
    $17 = $13 >> 31;
    $18 = $17 & 2;
    $19 = (($18) + 43)|0;
    $conv111 = $19&255;
    $incdec$ptr112 = ((($estr$0)) + -1|0);
    HEAP8[$incdec$ptr112>>0] = $conv111;
    $add113 = (($t) + 15)|0;
    $conv114 = $add113&255;
    $incdec$ptr115 = ((($estr$0)) + -2|0);
    HEAP8[$incdec$ptr115>>0] = $conv114;
    $notrhs = ($p|0)<(1);
    $and134 = $fl & 8;
    $tobool135 = ($and134|0)==(0);
    $s$0 = $buf;$y$addr$2 = $y$addr$1;
    while(1) {
     $conv116 = (~~(($y$addr$2)));
     $arrayidx117 = (13214 + ($conv116)|0);
     $20 = HEAP8[$arrayidx117>>0]|0;
     $conv118393 = $20&255;
     $or120 = $conv118393 | $and62;
     $conv121 = $or120&255;
     $incdec$ptr122 = ((($s$0)) + 1|0);
     HEAP8[$s$0>>0] = $conv121;
     $conv123 = (+($conv116|0));
     $sub124 = $y$addr$2 - $conv123;
     $mul125 = $sub124 * 16.0;
     $sub$ptr$lhs$cast = $incdec$ptr122;
     $sub$ptr$sub = (($sub$ptr$lhs$cast) - ($sub$ptr$rhs$cast))|0;
     $cmp127 = ($sub$ptr$sub|0)==(1);
     if ($cmp127) {
      $notlhs = $mul125 == 0.0;
      $or$cond1$not = $notrhs & $notlhs;
      $or$cond = $tobool135 & $or$cond1$not;
      if ($or$cond) {
       $s$1 = $incdec$ptr122;
      } else {
       $incdec$ptr137 = ((($s$0)) + 2|0);
       HEAP8[$incdec$ptr122>>0] = 46;
       $s$1 = $incdec$ptr137;
      }
     } else {
      $s$1 = $incdec$ptr122;
     }
     $tobool139 = $mul125 != 0.0;
     if ($tobool139) {
      $s$0 = $s$1;$y$addr$2 = $mul125;
     } else {
      break;
     }
    }
    $tobool140 = ($p|0)!=(0);
    $sub$ptr$rhs$cast152 = $incdec$ptr115;
    $sub$ptr$lhs$cast151 = $arrayidx;
    $sub$ptr$lhs$cast143 = $s$1;
    $sub$ptr$sub145 = (($sub$ptr$lhs$cast143) - ($sub$ptr$rhs$cast))|0;
    $sub$ptr$sub153 = (($sub$ptr$lhs$cast151) - ($sub$ptr$rhs$cast152))|0;
    $sub146 = (($sub$ptr$sub145) + -2)|0;
    $cmp147 = ($sub146|0)<($p|0);
    $or$cond395 = $tobool140 & $cmp147;
    $add150 = (($p) + 2)|0;
    $add150$pn = $or$cond395 ? $add150 : $sub$ptr$sub145;
    $l$0 = (($sub$ptr$sub153) + ($add67))|0;
    $add165 = (($l$0) + ($add150$pn))|0;
    _pad_684($f,32,$w,$add165,$fl);
    _out($f,$prefix$0$add$ptr65,$add67);
    $xor167 = $fl ^ 65536;
    _pad_684($f,48,$w,$add165,$xor167);
    _out($f,$buf,$sub$ptr$sub145);
    $sub181 = (($add150$pn) - ($sub$ptr$sub145))|0;
    _pad_684($f,48,$sub181,0,0);
    _out($f,$incdec$ptr115,$sub$ptr$sub153);
    $xor186 = $fl ^ 8192;
    _pad_684($f,32,$w,$add165,$xor186);
    $add653$sink406 = $add165;
    break;
   }
   $cmp68 = ($p|0)<(0);
   $$p = $cmp68 ? 6 : $p;
   if ($tobool56) {
    $mul202 = $mul * 268435456.0;
    $21 = HEAP32[$e2>>2]|0;
    $sub203 = (($21) + -28)|0;
    HEAP32[$e2>>2] = $sub203;
    $$pr = $sub203;$y$addr$3 = $mul202;
   } else {
    $$pre = HEAP32[$e2>>2]|0;
    $$pr = $$pre;$y$addr$3 = $mul;
   }
   $cmp205 = ($$pr|0)<(0);
   $add$ptr213 = ((($big)) + 288|0);
   $arraydecay208$add$ptr213 = $cmp205 ? $big : $add$ptr213;
   $y$addr$4 = $y$addr$3;$z$0 = $arraydecay208$add$ptr213;
   while(1) {
    $conv216 = (~~(($y$addr$4))>>>0);
    HEAP32[$z$0>>2] = $conv216;
    $incdec$ptr217 = ((($z$0)) + 4|0);
    $conv218 = (+($conv216>>>0));
    $sub219 = $y$addr$4 - $conv218;
    $mul220 = $sub219 * 1.0E+9;
    $tobool222 = $mul220 != 0.0;
    if ($tobool222) {
     $y$addr$4 = $mul220;$z$0 = $incdec$ptr217;
    } else {
     break;
    }
   }
   $cmp225474 = ($$pr|0)>(0);
   if ($cmp225474) {
    $23 = $$pr;$a$1476 = $arraydecay208$add$ptr213;$z$1475 = $incdec$ptr217;
    while(1) {
     $22 = ($23|0)<(29);
     $cond233 = $22 ? $23 : 29;
     $d$0469 = ((($z$1475)) + -4|0);
     $cmp235470 = ($d$0469>>>0)<($a$1476>>>0);
     if ($cmp235470) {
      $a$2$ph = $a$1476;
     } else {
      $carry$0471 = 0;$d$0472 = $d$0469;
      while(1) {
       $24 = HEAP32[$d$0472>>2]|0;
       $25 = (_bitshift64Shl(($24|0),0,($cond233|0))|0);
       $26 = tempRet0;
       $27 = (_i64Add(($25|0),($26|0),($carry$0471|0),0)|0);
       $28 = tempRet0;
       $29 = (___uremdi3(($27|0),($28|0),1000000000,0)|0);
       $30 = tempRet0;
       HEAP32[$d$0472>>2] = $29;
       $31 = (___udivdi3(($27|0),($28|0),1000000000,0)|0);
       $32 = tempRet0;
       $d$0 = ((($d$0472)) + -4|0);
       $cmp235 = ($d$0>>>0)<($a$1476>>>0);
       if ($cmp235) {
        break;
       } else {
        $carry$0471 = $31;$d$0472 = $d$0;
       }
      }
      $tobool244 = ($31|0)==(0);
      if ($tobool244) {
       $a$2$ph = $a$1476;
      } else {
       $incdec$ptr246 = ((($a$1476)) + -4|0);
       HEAP32[$incdec$ptr246>>2] = $31;
       $a$2$ph = $incdec$ptr246;
      }
     }
     $z$2 = $z$1475;
     while(1) {
      $cmp249 = ($z$2>>>0)>($a$2$ph>>>0);
      if (!($cmp249)) {
       break;
      }
      $arrayidx251 = ((($z$2)) + -4|0);
      $33 = HEAP32[$arrayidx251>>2]|0;
      $lnot = ($33|0)==(0);
      if ($lnot) {
       $z$2 = $arrayidx251;
      } else {
       break;
      }
     }
     $34 = HEAP32[$e2>>2]|0;
     $sub256 = (($34) - ($cond233))|0;
     HEAP32[$e2>>2] = $sub256;
     $cmp225 = ($sub256|0)>(0);
     if ($cmp225) {
      $23 = $sub256;$a$1476 = $a$2$ph;$z$1475 = $z$2;
     } else {
      $$pr407 = $sub256;$a$1$lcssa = $a$2$ph;$z$1$lcssa = $z$2;
      break;
     }
    }
   } else {
    $$pr407 = $$pr;$a$1$lcssa = $arraydecay208$add$ptr213;$z$1$lcssa = $incdec$ptr217;
   }
   $cmp259464 = ($$pr407|0)<(0);
   if ($cmp259464) {
    $add273 = (($$p) + 25)|0;
    $div274 = (($add273|0) / 9)&-1;
    $add275 = (($div274) + 1)|0;
    $cmp299 = ($or|0)==(102);
    $35 = $$pr407;$a$3466 = $a$1$lcssa;$z$3465 = $z$1$lcssa;
    while(1) {
     $sub264 = (0 - ($35))|0;
     $36 = ($sub264|0)<(9);
     $cond271 = $36 ? $sub264 : 9;
     $cmp277460 = ($a$3466>>>0)<($z$3465>>>0);
     if ($cmp277460) {
      $shl280 = 1 << $cond271;
      $sub281 = (($shl280) + -1)|0;
      $shr285 = 1000000000 >>> $cond271;
      $carry262$0462 = 0;$d$1461 = $a$3466;
      while(1) {
       $38 = HEAP32[$d$1461>>2]|0;
       $and282 = $38 & $sub281;
       $shr283 = $38 >>> $cond271;
       $add284 = (($shr283) + ($carry262$0462))|0;
       HEAP32[$d$1461>>2] = $add284;
       $mul286 = Math_imul($and282, $shr285)|0;
       $incdec$ptr288 = ((($d$1461)) + 4|0);
       $cmp277 = ($incdec$ptr288>>>0)<($z$3465>>>0);
       if ($cmp277) {
        $carry262$0462 = $mul286;$d$1461 = $incdec$ptr288;
       } else {
        break;
       }
      }
      $39 = HEAP32[$a$3466>>2]|0;
      $tobool290 = ($39|0)==(0);
      $incdec$ptr292 = ((($a$3466)) + 4|0);
      $incdec$ptr292$a$3 = $tobool290 ? $incdec$ptr292 : $a$3466;
      $tobool294 = ($mul286|0)==(0);
      if ($tobool294) {
       $incdec$ptr292$a$3494 = $incdec$ptr292$a$3;$z$4 = $z$3465;
      } else {
       $incdec$ptr296 = ((($z$3465)) + 4|0);
       HEAP32[$z$3465>>2] = $mul286;
       $incdec$ptr292$a$3494 = $incdec$ptr292$a$3;$z$4 = $incdec$ptr296;
      }
     } else {
      $37 = HEAP32[$a$3466>>2]|0;
      $tobool290490 = ($37|0)==(0);
      $incdec$ptr292491 = ((($a$3466)) + 4|0);
      $incdec$ptr292$a$3492 = $tobool290490 ? $incdec$ptr292491 : $a$3466;
      $incdec$ptr292$a$3494 = $incdec$ptr292$a$3492;$z$4 = $z$3465;
     }
     $cond304 = $cmp299 ? $arraydecay208$add$ptr213 : $incdec$ptr292$a$3494;
     $sub$ptr$lhs$cast305 = $z$4;
     $sub$ptr$rhs$cast306 = $cond304;
     $sub$ptr$sub307 = (($sub$ptr$lhs$cast305) - ($sub$ptr$rhs$cast306))|0;
     $sub$ptr$div = $sub$ptr$sub307 >> 2;
     $cmp308 = ($sub$ptr$div|0)>($add275|0);
     $add$ptr311 = (($cond304) + ($add275<<2)|0);
     $add$ptr311$z$4 = $cmp308 ? $add$ptr311 : $z$4;
     $40 = HEAP32[$e2>>2]|0;
     $add313 = (($40) + ($cond271))|0;
     HEAP32[$e2>>2] = $add313;
     $cmp259 = ($add313|0)<(0);
     if ($cmp259) {
      $35 = $add313;$a$3466 = $incdec$ptr292$a$3494;$z$3465 = $add$ptr311$z$4;
     } else {
      $a$3$lcssa = $incdec$ptr292$a$3494;$z$3$lcssa = $add$ptr311$z$4;
      break;
     }
    }
   } else {
    $a$3$lcssa = $a$1$lcssa;$z$3$lcssa = $z$1$lcssa;
   }
   $cmp315 = ($a$3$lcssa>>>0)<($z$3$lcssa>>>0);
   $sub$ptr$lhs$cast318 = $arraydecay208$add$ptr213;
   if ($cmp315) {
    $sub$ptr$rhs$cast319 = $a$3$lcssa;
    $sub$ptr$sub320 = (($sub$ptr$lhs$cast318) - ($sub$ptr$rhs$cast319))|0;
    $sub$ptr$div321 = $sub$ptr$sub320 >> 2;
    $mul322 = ($sub$ptr$div321*9)|0;
    $41 = HEAP32[$a$3$lcssa>>2]|0;
    $cmp324456 = ($41>>>0)<(10);
    if ($cmp324456) {
     $e$1 = $mul322;
    } else {
     $e$0458 = $mul322;$i$0457 = 10;
     while(1) {
      $mul328 = ($i$0457*10)|0;
      $inc = (($e$0458) + 1)|0;
      $cmp324 = ($41>>>0)<($mul328>>>0);
      if ($cmp324) {
       $e$1 = $inc;
       break;
      } else {
       $e$0458 = $inc;$i$0457 = $mul328;
      }
     }
    }
   } else {
    $e$1 = 0;
   }
   $cmp333 = ($or|0)!=(102);
   $mul335 = $cmp333 ? $e$1 : 0;
   $sub336 = (($$p) - ($mul335))|0;
   $cmp338 = ($or|0)==(103);
   $tobool341 = ($$p|0)!=(0);
   $42 = $tobool341 & $cmp338;
   $land$ext$neg = $42 << 31 >> 31;
   $sub343 = (($sub336) + ($land$ext$neg))|0;
   $sub$ptr$lhs$cast344 = $z$3$lcssa;
   $sub$ptr$sub346 = (($sub$ptr$lhs$cast344) - ($sub$ptr$lhs$cast318))|0;
   $sub$ptr$div347 = $sub$ptr$sub346 >> 2;
   $43 = ($sub$ptr$div347*9)|0;
   $mul349 = (($43) + -9)|0;
   $cmp350 = ($sub343|0)<($mul349|0);
   if ($cmp350) {
    $add$ptr354 = ((($arraydecay208$add$ptr213)) + 4|0);
    $add355 = (($sub343) + 9216)|0;
    $div356 = (($add355|0) / 9)&-1;
    $sub357 = (($div356) + -1024)|0;
    $add$ptr358 = (($add$ptr354) + ($sub357<<2)|0);
    $rem360 = (($add355|0) % 9)&-1;
    $j$0451 = (($rem360) + 1)|0;
    $cmp363452 = ($j$0451|0)<(9);
    if ($cmp363452) {
     $i$1453 = 10;$j$0454 = $j$0451;
     while(1) {
      $mul367 = ($i$1453*10)|0;
      $j$0 = (($j$0454) + 1)|0;
      $exitcond = ($j$0|0)==(9);
      if ($exitcond) {
       $i$1$lcssa = $mul367;
       break;
      } else {
       $i$1453 = $mul367;$j$0454 = $j$0;
      }
     }
    } else {
     $i$1$lcssa = 10;
    }
    $44 = HEAP32[$add$ptr358>>2]|0;
    $rem370 = (($44>>>0) % ($i$1$lcssa>>>0))&-1;
    $tobool371 = ($rem370|0)==(0);
    $add$ptr373 = ((($add$ptr358)) + 4|0);
    $cmp374 = ($add$ptr373|0)==($z$3$lcssa|0);
    $or$cond396 = $cmp374 & $tobool371;
    if ($or$cond396) {
     $a$8 = $a$3$lcssa;$d$4 = $add$ptr358;$e$4 = $e$1;
    } else {
     $div378 = (($44>>>0) / ($i$1$lcssa>>>0))&-1;
     $and379 = $div378 & 1;
     $tobool380 = ($and379|0)==(0);
     $$397 = $tobool380 ? 9007199254740992.0 : 9007199254740994.0;
     $div384 = (($i$1$lcssa|0) / 2)&-1;
     $cmp385 = ($rem370>>>0)<($div384>>>0);
     $cmp390 = ($rem370|0)==($div384|0);
     $or$cond398 = $cmp374 & $cmp390;
     $$405 = $or$cond398 ? 1.0 : 1.5;
     $$$405 = $cmp385 ? 0.5 : $$405;
     $tobool400 = ($pl$0|0)==(0);
     if ($tobool400) {
      $round377$1 = $$397;$small$1 = $$$405;
     } else {
      $45 = HEAP8[$prefix$0>>0]|0;
      $cmp403 = ($45<<24>>24)==(45);
      $mul406 = -$$397;
      $mul407 = -$$$405;
      $mul406$$397 = $cmp403 ? $mul406 : $$397;
      $mul407$$$405 = $cmp403 ? $mul407 : $$$405;
      $round377$1 = $mul406$$397;$small$1 = $mul407$$$405;
     }
     $sub409 = (($44) - ($rem370))|0;
     HEAP32[$add$ptr358>>2] = $sub409;
     $add410 = $round377$1 + $small$1;
     $cmp411 = $add410 != $round377$1;
     if ($cmp411) {
      $add414 = (($sub409) + ($i$1$lcssa))|0;
      HEAP32[$add$ptr358>>2] = $add414;
      $cmp416446 = ($add414>>>0)>(999999999);
      if ($cmp416446) {
       $a$5448 = $a$3$lcssa;$incdec$ptr419$sink447 = $add$ptr358;
       while(1) {
        $incdec$ptr419 = ((($incdec$ptr419$sink447)) + -4|0);
        HEAP32[$incdec$ptr419$sink447>>2] = 0;
        $cmp420 = ($incdec$ptr419>>>0)<($a$5448>>>0);
        if ($cmp420) {
         $incdec$ptr423 = ((($a$5448)) + -4|0);
         HEAP32[$incdec$ptr423>>2] = 0;
         $a$6 = $incdec$ptr423;
        } else {
         $a$6 = $a$5448;
        }
        $46 = HEAP32[$incdec$ptr419>>2]|0;
        $inc425 = (($46) + 1)|0;
        HEAP32[$incdec$ptr419>>2] = $inc425;
        $cmp416 = ($inc425>>>0)>(999999999);
        if ($cmp416) {
         $a$5448 = $a$6;$incdec$ptr419$sink447 = $incdec$ptr419;
        } else {
         $a$5$lcssa = $a$6;$incdec$ptr419$sink$lcssa = $incdec$ptr419;
         break;
        }
       }
      } else {
       $a$5$lcssa = $a$3$lcssa;$incdec$ptr419$sink$lcssa = $add$ptr358;
      }
      $sub$ptr$rhs$cast428 = $a$5$lcssa;
      $sub$ptr$sub429 = (($sub$ptr$lhs$cast318) - ($sub$ptr$rhs$cast428))|0;
      $sub$ptr$div430 = $sub$ptr$sub429 >> 2;
      $mul431 = ($sub$ptr$div430*9)|0;
      $47 = HEAP32[$a$5$lcssa>>2]|0;
      $cmp433442 = ($47>>>0)<(10);
      if ($cmp433442) {
       $a$8 = $a$5$lcssa;$d$4 = $incdec$ptr419$sink$lcssa;$e$4 = $mul431;
      } else {
       $e$2444 = $mul431;$i$2443 = 10;
       while(1) {
        $mul437 = ($i$2443*10)|0;
        $inc438 = (($e$2444) + 1)|0;
        $cmp433 = ($47>>>0)<($mul437>>>0);
        if ($cmp433) {
         $a$8 = $a$5$lcssa;$d$4 = $incdec$ptr419$sink$lcssa;$e$4 = $inc438;
         break;
        } else {
         $e$2444 = $inc438;$i$2443 = $mul437;
        }
       }
      }
     } else {
      $a$8 = $a$3$lcssa;$d$4 = $add$ptr358;$e$4 = $e$1;
     }
    }
    $add$ptr442 = ((($d$4)) + 4|0);
    $cmp443 = ($z$3$lcssa>>>0)>($add$ptr442>>>0);
    $add$ptr442$z$3 = $cmp443 ? $add$ptr442 : $z$3$lcssa;
    $a$9$ph = $a$8;$e$5$ph = $e$4;$z$7$ph = $add$ptr442$z$3;
   } else {
    $a$9$ph = $a$3$lcssa;$e$5$ph = $e$1;$z$7$ph = $z$3$lcssa;
   }
   $z$7 = $z$7$ph;
   while(1) {
    $cmp450 = ($z$7>>>0)>($a$9$ph>>>0);
    if (!($cmp450)) {
     $cmp450$lcssa = 0;
     break;
    }
    $arrayidx453 = ((($z$7)) + -4|0);
    $48 = HEAP32[$arrayidx453>>2]|0;
    $lnot455 = ($48|0)==(0);
    if ($lnot455) {
     $z$7 = $arrayidx453;
    } else {
     $cmp450$lcssa = 1;
     break;
    }
   }
   $sub626$le = (0 - ($e$5$ph))|0;
   do {
    if ($cmp338) {
     $not$tobool341 = $tobool341 ^ 1;
     $inc468 = $not$tobool341&1;
     $$p$inc468 = (($inc468) + ($$p))|0;
     $cmp470 = ($$p$inc468|0)>($e$5$ph|0);
     $cmp473 = ($e$5$ph|0)>(-5);
     $or$cond2 = $cmp470 & $cmp473;
     if ($or$cond2) {
      $dec476 = (($t) + -1)|0;
      $add477$neg = (($$p$inc468) + -1)|0;
      $sub478 = (($add477$neg) - ($e$5$ph))|0;
      $p$addr$2 = $sub478;$t$addr$0 = $dec476;
     } else {
      $sub480 = (($t) + -2)|0;
      $dec481 = (($$p$inc468) + -1)|0;
      $p$addr$2 = $dec481;$t$addr$0 = $sub480;
     }
     $and483 = $fl & 8;
     $tobool484 = ($and483|0)==(0);
     if ($tobool484) {
      if ($cmp450$lcssa) {
       $arrayidx489 = ((($z$7)) + -4|0);
       $49 = HEAP32[$arrayidx489>>2]|0;
       $tobool490 = ($49|0)==(0);
       if ($tobool490) {
        $j$2 = 9;
       } else {
        $rem494437 = (($49>>>0) % 10)&-1;
        $cmp495438 = ($rem494437|0)==(0);
        if ($cmp495438) {
         $i$3439 = 10;$j$1440 = 0;
         while(1) {
          $mul499 = ($i$3439*10)|0;
          $inc500 = (($j$1440) + 1)|0;
          $rem494 = (($49>>>0) % ($mul499>>>0))&-1;
          $cmp495 = ($rem494|0)==(0);
          if ($cmp495) {
           $i$3439 = $mul499;$j$1440 = $inc500;
          } else {
           $j$2 = $inc500;
           break;
          }
         }
        } else {
         $j$2 = 0;
        }
       }
      } else {
       $j$2 = 9;
      }
      $or504 = $t$addr$0 | 32;
      $cmp505 = ($or504|0)==(102);
      $sub$ptr$lhs$cast508 = $z$7;
      $sub$ptr$sub510 = (($sub$ptr$lhs$cast508) - ($sub$ptr$lhs$cast318))|0;
      $sub$ptr$div511 = $sub$ptr$sub510 >> 2;
      $50 = ($sub$ptr$div511*9)|0;
      $mul513 = (($50) + -9)|0;
      if ($cmp505) {
       $sub514 = (($mul513) - ($j$2))|0;
       $51 = ($sub514|0)>(0);
       $$sub514 = $51 ? $sub514 : 0;
       $cmp528 = ($p$addr$2|0)<($$sub514|0);
       $p$addr$2$$sub514399 = $cmp528 ? $p$addr$2 : $$sub514;
       $and610$pre$phiZ2D = 0;$p$addr$3 = $p$addr$2$$sub514399;$t$addr$1 = $t$addr$0;
       break;
      } else {
       $add561 = (($mul513) + ($e$5$ph))|0;
       $sub562 = (($add561) - ($j$2))|0;
       $52 = ($sub562|0)>(0);
       $$sub562 = $52 ? $sub562 : 0;
       $cmp577 = ($p$addr$2|0)<($$sub562|0);
       $p$addr$2$$sub562400 = $cmp577 ? $p$addr$2 : $$sub562;
       $and610$pre$phiZ2D = 0;$p$addr$3 = $p$addr$2$$sub562400;$t$addr$1 = $t$addr$0;
       break;
      }
     } else {
      $and610$pre$phiZ2D = $and483;$p$addr$3 = $p$addr$2;$t$addr$1 = $t$addr$0;
     }
    } else {
     $$pre487 = $fl & 8;
     $and610$pre$phiZ2D = $$pre487;$p$addr$3 = $$p;$t$addr$1 = $t;
    }
   } while(0);
   $53 = $p$addr$3 | $and610$pre$phiZ2D;
   $54 = ($53|0)!=(0);
   $lor$ext = $54&1;
   $or613 = $t$addr$1 | 32;
   $cmp614 = ($or613|0)==(102);
   if ($cmp614) {
    $cmp617 = ($e$5$ph|0)>(0);
    $add620 = $cmp617 ? $e$5$ph : 0;
    $estr$2 = 0;$sub$ptr$sub650$pn = $add620;
   } else {
    $cmp623 = ($e$5$ph|0)<(0);
    $cond629 = $cmp623 ? $sub626$le : $e$5$ph;
    $55 = ($cond629|0)<(0);
    $56 = $55 << 31 >> 31;
    $57 = (_fmt_u($cond629,$56,$arrayidx)|0);
    $sub$ptr$lhs$cast633 = $arrayidx;
    $sub$ptr$rhs$cast634431 = $57;
    $sub$ptr$sub635432 = (($sub$ptr$lhs$cast633) - ($sub$ptr$rhs$cast634431))|0;
    $cmp636433 = ($sub$ptr$sub635432|0)<(2);
    if ($cmp636433) {
     $estr$1434 = $57;
     while(1) {
      $incdec$ptr639 = ((($estr$1434)) + -1|0);
      HEAP8[$incdec$ptr639>>0] = 48;
      $sub$ptr$rhs$cast634 = $incdec$ptr639;
      $sub$ptr$sub635 = (($sub$ptr$lhs$cast633) - ($sub$ptr$rhs$cast634))|0;
      $cmp636 = ($sub$ptr$sub635|0)<(2);
      if ($cmp636) {
       $estr$1434 = $incdec$ptr639;
      } else {
       $estr$1$lcssa = $incdec$ptr639;
       break;
      }
     }
    } else {
     $estr$1$lcssa = $57;
    }
    $58 = $e$5$ph >> 31;
    $59 = $58 & 2;
    $60 = (($59) + 43)|0;
    $conv644 = $60&255;
    $incdec$ptr645 = ((($estr$1$lcssa)) + -1|0);
    HEAP8[$incdec$ptr645>>0] = $conv644;
    $conv646 = $t$addr$1&255;
    $incdec$ptr647 = ((($estr$1$lcssa)) + -2|0);
    HEAP8[$incdec$ptr647>>0] = $conv646;
    $sub$ptr$rhs$cast649 = $incdec$ptr647;
    $sub$ptr$sub650 = (($sub$ptr$lhs$cast633) - ($sub$ptr$rhs$cast649))|0;
    $estr$2 = $incdec$ptr647;$sub$ptr$sub650$pn = $sub$ptr$sub650;
   }
   $add608 = (($pl$0) + 1)|0;
   $add612 = (($add608) + ($p$addr$3))|0;
   $l$1 = (($add612) + ($lor$ext))|0;
   $add653 = (($l$1) + ($sub$ptr$sub650$pn))|0;
   _pad_684($f,32,$w,$add653,$fl);
   _out($f,$prefix$0,$pl$0);
   $xor655 = $fl ^ 65536;
   _pad_684($f,48,$w,$add653,$xor655);
   if ($cmp614) {
    $cmp660 = ($a$9$ph>>>0)>($arraydecay208$add$ptr213>>>0);
    $r$0$a$9 = $cmp660 ? $arraydecay208$add$ptr213 : $a$9$ph;
    $add$ptr671 = ((($buf)) + 9|0);
    $sub$ptr$lhs$cast694 = $add$ptr671;
    $incdec$ptr689 = ((($buf)) + 8|0);
    $d$5422 = $r$0$a$9;
    while(1) {
     $61 = HEAP32[$d$5422>>2]|0;
     $62 = (_fmt_u($61,0,$add$ptr671)|0);
     $cmp673 = ($d$5422|0)==($r$0$a$9|0);
     if ($cmp673) {
      $cmp686 = ($62|0)==($add$ptr671|0);
      if ($cmp686) {
       HEAP8[$incdec$ptr689>>0] = 48;
       $s668$1 = $incdec$ptr689;
      } else {
       $s668$1 = $62;
      }
     } else {
      $cmp678419 = ($62>>>0)>($buf>>>0);
      if ($cmp678419) {
       $63 = $62;
       $64 = (($63) - ($sub$ptr$rhs$cast))|0;
       _memset(($buf|0),48,($64|0))|0;
       $s668$0420 = $62;
       while(1) {
        $incdec$ptr681 = ((($s668$0420)) + -1|0);
        $cmp678 = ($incdec$ptr681>>>0)>($buf>>>0);
        if ($cmp678) {
         $s668$0420 = $incdec$ptr681;
        } else {
         $s668$1 = $incdec$ptr681;
         break;
        }
       }
      } else {
       $s668$1 = $62;
      }
     }
     $sub$ptr$rhs$cast695 = $s668$1;
     $sub$ptr$sub696 = (($sub$ptr$lhs$cast694) - ($sub$ptr$rhs$cast695))|0;
     _out($f,$s668$1,$sub$ptr$sub696);
     $incdec$ptr698 = ((($d$5422)) + 4|0);
     $cmp665 = ($incdec$ptr698>>>0)>($arraydecay208$add$ptr213>>>0);
     if ($cmp665) {
      break;
     } else {
      $d$5422 = $incdec$ptr698;
     }
    }
    $65 = ($53|0)==(0);
    if (!($65)) {
     _out($f,13230,1);
    }
    $cmp707414 = ($incdec$ptr698>>>0)<($z$7>>>0);
    $cmp710415 = ($p$addr$3|0)>(0);
    $66 = $cmp707414 & $cmp710415;
    if ($66) {
     $d$6416 = $incdec$ptr698;$p$addr$4417 = $p$addr$3;
     while(1) {
      $67 = HEAP32[$d$6416>>2]|0;
      $68 = (_fmt_u($67,0,$add$ptr671)|0);
      $cmp722411 = ($68>>>0)>($buf>>>0);
      if ($cmp722411) {
       $69 = $68;
       $70 = (($69) - ($sub$ptr$rhs$cast))|0;
       _memset(($buf|0),48,($70|0))|0;
       $s715$0412 = $68;
       while(1) {
        $incdec$ptr725 = ((($s715$0412)) + -1|0);
        $cmp722 = ($incdec$ptr725>>>0)>($buf>>>0);
        if ($cmp722) {
         $s715$0412 = $incdec$ptr725;
        } else {
         $s715$0$lcssa = $incdec$ptr725;
         break;
        }
       }
      } else {
       $s715$0$lcssa = $68;
      }
      $71 = ($p$addr$4417|0)<(9);
      $cond732 = $71 ? $p$addr$4417 : 9;
      _out($f,$s715$0$lcssa,$cond732);
      $incdec$ptr734 = ((($d$6416)) + 4|0);
      $sub735 = (($p$addr$4417) + -9)|0;
      $cmp707 = ($incdec$ptr734>>>0)<($z$7>>>0);
      $cmp710 = ($p$addr$4417|0)>(9);
      $72 = $cmp707 & $cmp710;
      if ($72) {
       $d$6416 = $incdec$ptr734;$p$addr$4417 = $sub735;
      } else {
       $p$addr$4$lcssa = $sub735;
       break;
      }
     }
    } else {
     $p$addr$4$lcssa = $p$addr$3;
    }
    $add737 = (($p$addr$4$lcssa) + 9)|0;
    _pad_684($f,48,$add737,9,0);
   } else {
    $add$ptr742 = ((($a$9$ph)) + 4|0);
    $z$7$add$ptr742 = $cmp450$lcssa ? $z$7 : $add$ptr742;
    $cmp748427 = ($p$addr$3|0)>(-1);
    if ($cmp748427) {
     $add$ptr756 = ((($buf)) + 9|0);
     $tobool781 = ($and610$pre$phiZ2D|0)==(0);
     $sub$ptr$lhs$cast787 = $add$ptr756;
     $73 = (0 - ($sub$ptr$rhs$cast))|0;
     $incdec$ptr763 = ((($buf)) + 8|0);
     $d$7428 = $a$9$ph;$p$addr$5429 = $p$addr$3;
     while(1) {
      $74 = HEAP32[$d$7428>>2]|0;
      $75 = (_fmt_u($74,0,$add$ptr756)|0);
      $cmp760 = ($75|0)==($add$ptr756|0);
      if ($cmp760) {
       HEAP8[$incdec$ptr763>>0] = 48;
       $s753$0 = $incdec$ptr763;
      } else {
       $s753$0 = $75;
      }
      $cmp765 = ($d$7428|0)==($a$9$ph|0);
      do {
       if ($cmp765) {
        $incdec$ptr776 = ((($s753$0)) + 1|0);
        _out($f,$s753$0,1);
        $cmp777 = ($p$addr$5429|0)<(1);
        $or$cond402 = $tobool781 & $cmp777;
        if ($or$cond402) {
         $s753$2 = $incdec$ptr776;
         break;
        }
        _out($f,13230,1);
        $s753$2 = $incdec$ptr776;
       } else {
        $cmp770423 = ($s753$0>>>0)>($buf>>>0);
        if (!($cmp770423)) {
         $s753$2 = $s753$0;
         break;
        }
        $scevgep483 = (($s753$0) + ($73)|0);
        $scevgep483484 = $scevgep483;
        _memset(($buf|0),48,($scevgep483484|0))|0;
        $s753$1424 = $s753$0;
        while(1) {
         $incdec$ptr773 = ((($s753$1424)) + -1|0);
         $cmp770 = ($incdec$ptr773>>>0)>($buf>>>0);
         if ($cmp770) {
          $s753$1424 = $incdec$ptr773;
         } else {
          $s753$2 = $incdec$ptr773;
          break;
         }
        }
       }
      } while(0);
      $sub$ptr$rhs$cast788 = $s753$2;
      $sub$ptr$sub789 = (($sub$ptr$lhs$cast787) - ($sub$ptr$rhs$cast788))|0;
      $cmp790 = ($p$addr$5429|0)>($sub$ptr$sub789|0);
      $cond800 = $cmp790 ? $sub$ptr$sub789 : $p$addr$5429;
      _out($f,$s753$2,$cond800);
      $sub806 = (($p$addr$5429) - ($sub$ptr$sub789))|0;
      $incdec$ptr808 = ((($d$7428)) + 4|0);
      $cmp745 = ($incdec$ptr808>>>0)<($z$7$add$ptr742>>>0);
      $cmp748 = ($sub806|0)>(-1);
      $76 = $cmp745 & $cmp748;
      if ($76) {
       $d$7428 = $incdec$ptr808;$p$addr$5429 = $sub806;
      } else {
       $p$addr$5$lcssa = $sub806;
       break;
      }
     }
    } else {
     $p$addr$5$lcssa = $p$addr$3;
    }
    $add810 = (($p$addr$5$lcssa) + 18)|0;
    _pad_684($f,48,$add810,18,0);
    $sub$ptr$lhs$cast811 = $arrayidx;
    $sub$ptr$rhs$cast812 = $estr$2;
    $sub$ptr$sub813 = (($sub$ptr$lhs$cast811) - ($sub$ptr$rhs$cast812))|0;
    _out($f,$estr$2,$sub$ptr$sub813);
   }
   $xor816 = $fl ^ 8192;
   _pad_684($f,32,$w,$add653,$xor816);
   $add653$sink406 = $add653;
  } else {
   $and36 = $t & 32;
   $tobool37 = ($and36|0)!=(0);
   $cond = $tobool37 ? 13202 : 13206;
   $cmp38 = ($y$addr$0 != $y$addr$0) | (0.0 != 0.0);
   $cond43 = $tobool37 ? 15133 : 13210;
   $s35$0 = $cmp38 ? $cond43 : $cond;
   $add = (($pl$0) + 3)|0;
   $and45 = $fl & -65537;
   _pad_684($f,32,$w,$add,$and45);
   _out($f,$prefix$0,$pl$0);
   _out($f,$s35$0,3);
   $xor = $fl ^ 8192;
   _pad_684($f,32,$w,$add,$xor);
   $add653$sink406 = $add;
  }
 } while(0);
 $cmp818 = ($add653$sink406|0)<($w|0);
 $w$add653 = $cmp818 ? $w : $add653$sink406;
 STACKTOP = sp;return ($w$add653|0);
}
function ___DOUBLE_BITS_685($__f) {
 $__f = +$__f;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAPF64[tempDoublePtr>>3] = $__f;$0 = HEAP32[tempDoublePtr>>2]|0;
 $1 = HEAP32[tempDoublePtr+4>>2]|0;
 tempRet0 = ($1);
 return ($0|0);
}
function _frexpl($x,$e) {
 $x = +$x;
 $e = $e|0;
 var $call = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = (+_frexp($x,$e));
 return (+$call);
}
function _frexp($x,$e) {
 $x = +$x;
 $e = $e|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0.0, $call = 0.0, $conv = 0, $mul = 0.0, $retval$0 = 0.0, $storemerge = 0, $sub = 0, $sub8 = 0, $tobool1 = 0, $trunc$clear = 0, $x$addr$0 = 0.0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 HEAPF64[tempDoublePtr>>3] = $x;$0 = HEAP32[tempDoublePtr>>2]|0;
 $1 = HEAP32[tempDoublePtr+4>>2]|0;
 $2 = (_bitshift64Lshr(($0|0),($1|0),52)|0);
 $3 = tempRet0;
 $4 = $2&65535;
 $trunc$clear = $4 & 2047;
 switch ($trunc$clear<<16>>16) {
 case 0:  {
  $tobool1 = $x != 0.0;
  if ($tobool1) {
   $mul = $x * 1.8446744073709552E+19;
   $call = (+_frexp($mul,$e));
   $5 = HEAP32[$e>>2]|0;
   $sub = (($5) + -64)|0;
   $storemerge = $sub;$x$addr$0 = $call;
  } else {
   $storemerge = 0;$x$addr$0 = $x;
  }
  HEAP32[$e>>2] = $storemerge;
  $retval$0 = $x$addr$0;
  break;
 }
 case 2047:  {
  $retval$0 = $x;
  break;
 }
 default: {
  $conv = $2 & 2047;
  $sub8 = (($conv) + -1022)|0;
  HEAP32[$e>>2] = $sub8;
  $6 = $1 & -2146435073;
  $7 = $6 | 1071644672;
  HEAP32[tempDoublePtr>>2] = $0;HEAP32[tempDoublePtr+4>>2] = $7;$8 = +HEAPF64[tempDoublePtr>>3];
  $retval$0 = $8;
 }
 }
 return (+$retval$0);
}
function _wcrtomb($s,$wc,$st) {
 $s = $s|0;
 $wc = $wc|0;
 $st = $st|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $and = 0, $and32 = 0, $and36 = 0, $and49 = 0, $and54 = 0, $and58 = 0, $call = 0, $call10 = 0, $call66 = 0, $cmp = 0, $cmp14 = 0, $cmp21 = 0, $cmp24 = 0, $cmp41 = 0, $cmp7 = 0, $conv = 0;
 var $conv12 = 0, $conv17 = 0, $conv19 = 0, $conv29 = 0, $conv34 = 0, $conv38 = 0, $conv46 = 0, $conv51 = 0, $conv56 = 0, $conv60 = 0, $incdec$ptr = 0, $incdec$ptr30 = 0, $incdec$ptr35 = 0, $incdec$ptr47 = 0, $incdec$ptr52 = 0, $incdec$ptr57 = 0, $locale = 0, $not$tobool2 = 0, $or = 0, $or$cond = 0;
 var $or18 = 0, $or28 = 0, $or33 = 0, $or37 = 0, $or45 = 0, $or50 = 0, $or55 = 0, $or59 = 0, $retval$0 = 0, $shr2729 = 0, $shr3130 = 0, $shr32 = 0, $shr4426 = 0, $shr4827 = 0, $shr5328 = 0, $sub40 = 0, $tobool = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $tobool = ($s|0)==(0|0);
 do {
  if ($tobool) {
   $retval$0 = 1;
  } else {
   $cmp = ($wc>>>0)<(128);
   if ($cmp) {
    $conv = $wc&255;
    HEAP8[$s>>0] = $conv;
    $retval$0 = 1;
    break;
   }
   $call = (___pthread_self_431()|0);
   $locale = ((($call)) + 188|0);
   $0 = HEAP32[$locale>>2]|0;
   $1 = HEAP32[$0>>2]|0;
   $not$tobool2 = ($1|0)==(0|0);
   if ($not$tobool2) {
    $2 = $wc & -128;
    $cmp7 = ($2|0)==(57216);
    if ($cmp7) {
     $conv12 = $wc&255;
     HEAP8[$s>>0] = $conv12;
     $retval$0 = 1;
     break;
    } else {
     $call10 = (___errno_location()|0);
     HEAP32[$call10>>2] = 84;
     $retval$0 = -1;
     break;
    }
   }
   $cmp14 = ($wc>>>0)<(2048);
   if ($cmp14) {
    $shr32 = $wc >>> 6;
    $or = $shr32 | 192;
    $conv17 = $or&255;
    $incdec$ptr = ((($s)) + 1|0);
    HEAP8[$s>>0] = $conv17;
    $and = $wc & 63;
    $or18 = $and | 128;
    $conv19 = $or18&255;
    HEAP8[$incdec$ptr>>0] = $conv19;
    $retval$0 = 2;
    break;
   }
   $cmp21 = ($wc>>>0)<(55296);
   $3 = $wc & -8192;
   $cmp24 = ($3|0)==(57344);
   $or$cond = $cmp21 | $cmp24;
   if ($or$cond) {
    $shr2729 = $wc >>> 12;
    $or28 = $shr2729 | 224;
    $conv29 = $or28&255;
    $incdec$ptr30 = ((($s)) + 1|0);
    HEAP8[$s>>0] = $conv29;
    $shr3130 = $wc >>> 6;
    $and32 = $shr3130 & 63;
    $or33 = $and32 | 128;
    $conv34 = $or33&255;
    $incdec$ptr35 = ((($s)) + 2|0);
    HEAP8[$incdec$ptr30>>0] = $conv34;
    $and36 = $wc & 63;
    $or37 = $and36 | 128;
    $conv38 = $or37&255;
    HEAP8[$incdec$ptr35>>0] = $conv38;
    $retval$0 = 3;
    break;
   }
   $sub40 = (($wc) + -65536)|0;
   $cmp41 = ($sub40>>>0)<(1048576);
   if ($cmp41) {
    $shr4426 = $wc >>> 18;
    $or45 = $shr4426 | 240;
    $conv46 = $or45&255;
    $incdec$ptr47 = ((($s)) + 1|0);
    HEAP8[$s>>0] = $conv46;
    $shr4827 = $wc >>> 12;
    $and49 = $shr4827 & 63;
    $or50 = $and49 | 128;
    $conv51 = $or50&255;
    $incdec$ptr52 = ((($s)) + 2|0);
    HEAP8[$incdec$ptr47>>0] = $conv51;
    $shr5328 = $wc >>> 6;
    $and54 = $shr5328 & 63;
    $or55 = $and54 | 128;
    $conv56 = $or55&255;
    $incdec$ptr57 = ((($s)) + 3|0);
    HEAP8[$incdec$ptr52>>0] = $conv56;
    $and58 = $wc & 63;
    $or59 = $and58 | 128;
    $conv60 = $or59&255;
    HEAP8[$incdec$ptr57>>0] = $conv60;
    $retval$0 = 4;
    break;
   } else {
    $call66 = (___errno_location()|0);
    HEAP32[$call66>>2] = 84;
    $retval$0 = -1;
    break;
   }
  }
 } while(0);
 return ($retval$0|0);
}
function ___pthread_self_431() {
 var $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = (_pthread_self()|0);
 return ($call|0);
}
function ___pthread_self_104() {
 var $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = (_pthread_self()|0);
 return ($call|0);
}
function ___strerror_l($e,$loc) {
 $e = $e|0;
 $loc = $loc|0;
 var $0 = 0, $1 = 0, $2 = 0, $arrayidx = 0, $arrayidx15 = 0, $call = 0, $cmp = 0, $conv = 0, $dec = 0, $i$012 = 0, $i$111 = 0, $inc = 0, $incdec$ptr = 0, $s$0$lcssa = 0, $s$010 = 0, $s$1 = 0, $tobool = 0, $tobool5 = 0, $tobool59 = 0, $tobool8 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $i$012 = 0;
 while(1) {
  $arrayidx = (13232 + ($i$012)|0);
  $0 = HEAP8[$arrayidx>>0]|0;
  $conv = $0&255;
  $cmp = ($conv|0)==($e|0);
  if ($cmp) {
   label = 2;
   break;
  }
  $inc = (($i$012) + 1)|0;
  $tobool = ($inc|0)==(87);
  if ($tobool) {
   $i$111 = 87;$s$010 = 13320;
   label = 5;
   break;
  } else {
   $i$012 = $inc;
  }
 }
 if ((label|0) == 2) {
  $tobool59 = ($i$012|0)==(0);
  if ($tobool59) {
   $s$0$lcssa = 13320;
  } else {
   $i$111 = $i$012;$s$010 = 13320;
   label = 5;
  }
 }
 if ((label|0) == 5) {
  while(1) {
   label = 0;
   $s$1 = $s$010;
   while(1) {
    $1 = HEAP8[$s$1>>0]|0;
    $tobool8 = ($1<<24>>24)==(0);
    $incdec$ptr = ((($s$1)) + 1|0);
    if ($tobool8) {
     break;
    } else {
     $s$1 = $incdec$ptr;
    }
   }
   $dec = (($i$111) + -1)|0;
   $tobool5 = ($dec|0)==(0);
   if ($tobool5) {
    $s$0$lcssa = $incdec$ptr;
    break;
   } else {
    $i$111 = $dec;$s$010 = $incdec$ptr;
    label = 5;
   }
  }
 }
 $arrayidx15 = ((($loc)) + 20|0);
 $2 = HEAP32[$arrayidx15>>2]|0;
 $call = (___lctrans($s$0$lcssa,$2)|0);
 return ($call|0);
}
function ___lctrans($msg,$lm) {
 $msg = $msg|0;
 $lm = $lm|0;
 var $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = (___lctrans_impl($msg,$lm)|0);
 return ($call|0);
}
function ___lctrans_impl($msg,$lm) {
 $msg = $msg|0;
 $lm = $lm|0;
 var $0 = 0, $1 = 0, $call = 0, $cond = 0, $map_size = 0, $tobool = 0, $tobool1 = 0, $trans$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $tobool = ($lm|0)==(0|0);
 if ($tobool) {
  $trans$0 = 0;
 } else {
  $0 = HEAP32[$lm>>2]|0;
  $map_size = ((($lm)) + 4|0);
  $1 = HEAP32[$map_size>>2]|0;
  $call = (___mo_lookup($0,$1,$msg)|0);
  $trans$0 = $call;
 }
 $tobool1 = ($trans$0|0)!=(0|0);
 $cond = $tobool1 ? $trans$0 : $msg;
 return ($cond|0);
}
function ___mo_lookup($p,$size,$s) {
 $p = $p|0;
 $size = $size|0;
 $s = $s|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $add = 0, $add$ptr = 0, $add$ptr65 = 0, $add$ptr65$ = 0, $add16 = 0, $add23 = 0, $add31 = 0, $add42 = 0, $add49 = 0, $add59 = 0;
 var $arrayidx = 0, $arrayidx1 = 0, $arrayidx17 = 0, $arrayidx24 = 0, $arrayidx3 = 0, $arrayidx32 = 0, $arrayidx43 = 0, $arrayidx50 = 0, $arrayidx60 = 0, $b$0 = 0, $b$1 = 0, $call = 0, $call18 = 0, $call2 = 0, $call25 = 0, $call36 = 0, $call4 = 0, $call44 = 0, $call51 = 0, $cmp = 0;
 var $cmp10 = 0, $cmp26 = 0, $cmp29 = 0, $cmp52 = 0, $cmp56 = 0, $cmp6 = 0, $cmp67 = 0, $cmp71 = 0, $div = 0, $div12 = 0, $div13 = 0, $div14 = 0, $mul = 0, $mul15 = 0, $n$0 = 0, $n$1 = 0, $or = 0, $or$cond = 0, $or$cond66 = 0, $or$cond67 = 0;
 var $rem = 0, $retval$4 = 0, $sub = 0, $sub28 = 0, $sub5 = 0, $sub55 = 0, $sub79 = 0, $tobool = 0, $tobool33 = 0, $tobool37 = 0, $tobool62 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$p>>2]|0;
 $sub = (($0) + 1794895138)|0;
 $arrayidx = ((($p)) + 8|0);
 $1 = HEAP32[$arrayidx>>2]|0;
 $call = (_swapc($1,$sub)|0);
 $arrayidx1 = ((($p)) + 12|0);
 $2 = HEAP32[$arrayidx1>>2]|0;
 $call2 = (_swapc($2,$sub)|0);
 $arrayidx3 = ((($p)) + 16|0);
 $3 = HEAP32[$arrayidx3>>2]|0;
 $call4 = (_swapc($3,$sub)|0);
 $div = $size >>> 2;
 $cmp = ($call>>>0)<($div>>>0);
 L1: do {
  if ($cmp) {
   $mul = $call << 2;
   $sub5 = (($size) - ($mul))|0;
   $cmp6 = ($call2>>>0)<($sub5>>>0);
   $cmp10 = ($call4>>>0)<($sub5>>>0);
   $or$cond = $cmp6 & $cmp10;
   if ($or$cond) {
    $or = $call4 | $call2;
    $rem = $or & 3;
    $tobool = ($rem|0)==(0);
    if ($tobool) {
     $div12 = $call2 >>> 2;
     $div13 = $call4 >>> 2;
     $b$0 = 0;$n$0 = $call;
     while(1) {
      $div14 = $n$0 >>> 1;
      $add = (($b$0) + ($div14))|0;
      $mul15 = $add << 1;
      $add16 = (($mul15) + ($div12))|0;
      $arrayidx17 = (($p) + ($add16<<2)|0);
      $4 = HEAP32[$arrayidx17>>2]|0;
      $call18 = (_swapc($4,$sub)|0);
      $add23 = (($add16) + 1)|0;
      $arrayidx24 = (($p) + ($add23<<2)|0);
      $5 = HEAP32[$arrayidx24>>2]|0;
      $call25 = (_swapc($5,$sub)|0);
      $cmp26 = ($call25>>>0)<($size>>>0);
      $sub28 = (($size) - ($call25))|0;
      $cmp29 = ($call18>>>0)<($sub28>>>0);
      $or$cond66 = $cmp26 & $cmp29;
      if (!($or$cond66)) {
       $retval$4 = 0;
       break L1;
      }
      $add31 = (($call25) + ($call18))|0;
      $arrayidx32 = (($p) + ($add31)|0);
      $6 = HEAP8[$arrayidx32>>0]|0;
      $tobool33 = ($6<<24>>24)==(0);
      if (!($tobool33)) {
       $retval$4 = 0;
       break L1;
      }
      $add$ptr = (($p) + ($call25)|0);
      $call36 = (_strcmp($s,$add$ptr)|0);
      $tobool37 = ($call36|0)==(0);
      if ($tobool37) {
       break;
      }
      $cmp67 = ($n$0|0)==(1);
      $cmp71 = ($call36|0)<(0);
      $sub79 = (($n$0) - ($div14))|0;
      $n$1 = $cmp71 ? $div14 : $sub79;
      $b$1 = $cmp71 ? $b$0 : $add;
      if ($cmp67) {
       $retval$4 = 0;
       break L1;
      } else {
       $b$0 = $b$1;$n$0 = $n$1;
      }
     }
     $add42 = (($mul15) + ($div13))|0;
     $arrayidx43 = (($p) + ($add42<<2)|0);
     $7 = HEAP32[$arrayidx43>>2]|0;
     $call44 = (_swapc($7,$sub)|0);
     $add49 = (($add42) + 1)|0;
     $arrayidx50 = (($p) + ($add49<<2)|0);
     $8 = HEAP32[$arrayidx50>>2]|0;
     $call51 = (_swapc($8,$sub)|0);
     $cmp52 = ($call51>>>0)<($size>>>0);
     $sub55 = (($size) - ($call51))|0;
     $cmp56 = ($call44>>>0)<($sub55>>>0);
     $or$cond67 = $cmp52 & $cmp56;
     if ($or$cond67) {
      $add$ptr65 = (($p) + ($call51)|0);
      $add59 = (($call51) + ($call44))|0;
      $arrayidx60 = (($p) + ($add59)|0);
      $9 = HEAP8[$arrayidx60>>0]|0;
      $tobool62 = ($9<<24>>24)==(0);
      $add$ptr65$ = $tobool62 ? $add$ptr65 : 0;
      $retval$4 = $add$ptr65$;
     } else {
      $retval$4 = 0;
     }
    } else {
     $retval$4 = 0;
    }
   } else {
    $retval$4 = 0;
   }
  } else {
   $retval$4 = 0;
  }
 } while(0);
 return ($retval$4|0);
}
function _swapc($x,$c) {
 $x = $x|0;
 $c = $c|0;
 var $or5 = 0, $tobool = 0, $x$or5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $tobool = ($c|0)==(0);
 $or5 = (_llvm_bswap_i32(($x|0))|0);
 $x$or5 = $tobool ? $x : $or5;
 return ($x$or5|0);
}
function ___fwritex($s,$l,$f) {
 $s = $s|0;
 $l = $l|0;
 $f = $f|0;
 var $$pre = 0, $$pre33 = 0, $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $add = 0, $add$ptr = 0, $add$ptr26 = 0, $arrayidx = 0, $call = 0, $call16 = 0, $call4 = 0;
 var $cmp = 0, $cmp11 = 0, $cmp17 = 0, $cmp6 = 0, $i$0 = 0, $i$1 = 0, $l$addr$0 = 0, $l$addr$1 = 0, $lbf = 0, $retval$1 = 0, $s$addr$1 = 0, $sub = 0, $sub$ptr$sub = 0, $tobool = 0, $tobool1 = 0, $tobool9 = 0, $wend = 0, $wpos = 0, $write = 0, $write15 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $wend = ((($f)) + 16|0);
 $0 = HEAP32[$wend>>2]|0;
 $tobool = ($0|0)==(0|0);
 if ($tobool) {
  $call = (___towrite($f)|0);
  $tobool1 = ($call|0)==(0);
  if ($tobool1) {
   $$pre = HEAP32[$wend>>2]|0;
   $3 = $$pre;
   label = 5;
  } else {
   $retval$1 = 0;
  }
 } else {
  $1 = $0;
  $3 = $1;
  label = 5;
 }
 L5: do {
  if ((label|0) == 5) {
   $wpos = ((($f)) + 20|0);
   $2 = HEAP32[$wpos>>2]|0;
   $sub$ptr$sub = (($3) - ($2))|0;
   $cmp = ($sub$ptr$sub>>>0)<($l>>>0);
   $4 = $2;
   if ($cmp) {
    $write = ((($f)) + 36|0);
    $5 = HEAP32[$write>>2]|0;
    $call4 = (FUNCTION_TABLE_iiii[$5 & 1023]($f,$s,$l)|0);
    $retval$1 = $call4;
    break;
   }
   $lbf = ((($f)) + 75|0);
   $6 = HEAP8[$lbf>>0]|0;
   $cmp6 = ($6<<24>>24)>(-1);
   L10: do {
    if ($cmp6) {
     $i$0 = $l;
     while(1) {
      $tobool9 = ($i$0|0)==(0);
      if ($tobool9) {
       $9 = $4;$i$1 = 0;$l$addr$1 = $l;$s$addr$1 = $s;
       break L10;
      }
      $sub = (($i$0) + -1)|0;
      $arrayidx = (($s) + ($sub)|0);
      $7 = HEAP8[$arrayidx>>0]|0;
      $cmp11 = ($7<<24>>24)==(10);
      if ($cmp11) {
       break;
      } else {
       $i$0 = $sub;
      }
     }
     $write15 = ((($f)) + 36|0);
     $8 = HEAP32[$write15>>2]|0;
     $call16 = (FUNCTION_TABLE_iiii[$8 & 1023]($f,$s,$i$0)|0);
     $cmp17 = ($call16>>>0)<($i$0>>>0);
     if ($cmp17) {
      $retval$1 = $call16;
      break L5;
     }
     $add$ptr = (($s) + ($i$0)|0);
     $l$addr$0 = (($l) - ($i$0))|0;
     $$pre33 = HEAP32[$wpos>>2]|0;
     $9 = $$pre33;$i$1 = $i$0;$l$addr$1 = $l$addr$0;$s$addr$1 = $add$ptr;
    } else {
     $9 = $4;$i$1 = 0;$l$addr$1 = $l;$s$addr$1 = $s;
    }
   } while(0);
   _memcpy(($9|0),($s$addr$1|0),($l$addr$1|0))|0;
   $10 = HEAP32[$wpos>>2]|0;
   $add$ptr26 = (($10) + ($l$addr$1)|0);
   HEAP32[$wpos>>2] = $add$ptr26;
   $add = (($i$1) + ($l$addr$1))|0;
   $retval$1 = $add;
  }
 } while(0);
 return ($retval$1|0);
}
function ___towrite($f) {
 $f = $f|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $add$ptr = 0, $and = 0, $buf = 0, $buf_size = 0, $conv = 0, $conv3 = 0, $mode = 0, $or = 0, $or5 = 0, $rend = 0, $retval$0 = 0, $rpos = 0, $sub = 0, $tobool = 0, $wbase = 0, $wend = 0;
 var $wpos = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $mode = ((($f)) + 74|0);
 $0 = HEAP8[$mode>>0]|0;
 $conv = $0 << 24 >> 24;
 $sub = (($conv) + 255)|0;
 $or = $sub | $conv;
 $conv3 = $or&255;
 HEAP8[$mode>>0] = $conv3;
 $1 = HEAP32[$f>>2]|0;
 $and = $1 & 8;
 $tobool = ($and|0)==(0);
 if ($tobool) {
  $rend = ((($f)) + 8|0);
  HEAP32[$rend>>2] = 0;
  $rpos = ((($f)) + 4|0);
  HEAP32[$rpos>>2] = 0;
  $buf = ((($f)) + 44|0);
  $2 = HEAP32[$buf>>2]|0;
  $wbase = ((($f)) + 28|0);
  HEAP32[$wbase>>2] = $2;
  $wpos = ((($f)) + 20|0);
  HEAP32[$wpos>>2] = $2;
  $buf_size = ((($f)) + 48|0);
  $3 = HEAP32[$buf_size>>2]|0;
  $add$ptr = (($2) + ($3)|0);
  $wend = ((($f)) + 16|0);
  HEAP32[$wend>>2] = $add$ptr;
  $retval$0 = 0;
 } else {
  $or5 = $1 | 32;
  HEAP32[$f>>2] = $or5;
  $retval$0 = -1;
 }
 return ($retval$0|0);
}
function _sn_write($f,$s,$l) {
 $f = $f|0;
 $s = $s|0;
 $l = $l|0;
 var $0 = 0, $1 = 0, $2 = 0, $add$ptr = 0, $cmp = 0, $l$sub$ptr$sub = 0, $sub$ptr$rhs$cast = 0, $sub$ptr$sub = 0, $wend = 0, $wpos = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $wend = ((($f)) + 16|0);
 $0 = HEAP32[$wend>>2]|0;
 $wpos = ((($f)) + 20|0);
 $1 = HEAP32[$wpos>>2]|0;
 $sub$ptr$rhs$cast = $1;
 $sub$ptr$sub = (($0) - ($sub$ptr$rhs$cast))|0;
 $cmp = ($sub$ptr$sub>>>0)>($l>>>0);
 $l$sub$ptr$sub = $cmp ? $l : $sub$ptr$sub;
 _memcpy(($1|0),($s|0),($l$sub$ptr$sub|0))|0;
 $2 = HEAP32[$wpos>>2]|0;
 $add$ptr = (($2) + ($l$sub$ptr$sub)|0);
 HEAP32[$wpos>>2] = $add$ptr;
 return ($l|0);
}
function ___ctype_b_loc() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (3252|0);
}
function ___ctype_get_mb_cur_max() {
 var $0 = 0, $1 = 0, $call = 0, $cond = 0, $locale = 0, $tobool = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = (___pthread_self()|0);
 $locale = ((($call)) + 188|0);
 $0 = HEAP32[$locale>>2]|0;
 $1 = HEAP32[$0>>2]|0;
 $tobool = ($1|0)!=(0|0);
 $cond = $tobool ? 4 : 1;
 return ($cond|0);
}
function ___pthread_self() {
 var $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = (_pthread_self()|0);
 return ($call|0);
}
function ___ctype_tolower_loc() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (3256|0);
}
function ___ctype_toupper_loc() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (4796|0);
}
function _wcslen($s) {
 $s = $s|0;
 var $0 = 0, $incdec$ptr = 0, $s$addr$0 = 0, $sub$ptr$div = 0, $sub$ptr$lhs$cast = 0, $sub$ptr$rhs$cast = 0, $sub$ptr$sub = 0, $tobool = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $s$addr$0 = $s;
 while(1) {
  $0 = HEAP32[$s$addr$0>>2]|0;
  $tobool = ($0|0)==(0);
  $incdec$ptr = ((($s$addr$0)) + 4|0);
  if ($tobool) {
   break;
  } else {
   $s$addr$0 = $incdec$ptr;
  }
 }
 $sub$ptr$lhs$cast = $s$addr$0;
 $sub$ptr$rhs$cast = $s;
 $sub$ptr$sub = (($sub$ptr$lhs$cast) - ($sub$ptr$rhs$cast))|0;
 $sub$ptr$div = $sub$ptr$sub >> 2;
 return ($sub$ptr$div|0);
}
function _isxdigit($c) {
 $c = $c|0;
 var $$cmp = 0, $cmp = 0, $isdigit = 0, $isdigittmp = 0, $lor$ext = 0, $or = 0, $sub = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $isdigittmp = (($c) + -48)|0;
 $isdigit = ($isdigittmp>>>0)<(10);
 $or = $c | 32;
 $sub = (($or) + -97)|0;
 $cmp = ($sub>>>0)<(6);
 $$cmp = $isdigit | $cmp;
 $lor$ext = $$cmp&1;
 return ($lor$ext|0);
}
function ___floatscan($f,$prec,$pok) {
 $f = $f|0;
 $prec = $prec|0;
 $pok = $pok|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $arrayidx = 0, $arrayidx95 = 0, $bits$0$ph = 0, $c$0 = 0, $c$1$lcssa = 0;
 var $c$197 = 0, $c$2 = 0, $c$395 = 0, $c$4 = 0, $c$5 = 0, $c$6 = 0, $call = 0, $call113 = 0, $call133 = 0, $call157 = 0, $call189 = 0, $call215 = 0, $call229 = 0, $call23 = 0, $call236 = 0.0, $call246 = 0.0, $call43 = 0, $call6 = 0, $cmp = 0, $cmp101 = 0;
 var $cmp106 = 0, $cmp126 = 0, $cmp136 = 0, $cmp150 = 0, $cmp16 = 0, $cmp161 = 0, $cmp165 = 0, $cmp169 = 0, $cmp172 = 0, $cmp176 = 0, $cmp217 = 0, $cmp222 = 0, $cmp233 = 0, $cmp26 = 0, $cmp29 = 0, $cmp31 = 0, $cmp36 = 0, $cmp53 = 0, $cmp57 = 0, $cmp70 = 0;
 var $cmp70$old = 0, $cmp9 = 0, $cmp91 = 0, $cmp97 = 0, $cond = 0, $cond135 = 0, $cond159 = 0, $cond231 = 0, $conv = 0, $conv111 = 0, $conv12 = 0, $conv131 = 0, $conv155 = 0, $conv21 = 0, $conv227 = 0, $conv28 = 0, $conv41 = 0, $conv84 = 0.0, $conv86 = 0.0, $conv96 = 0;
 var $dec = 0, $dec19293 = 0, $dec19293$in = 0, $emin$0$ph = 0, $i$0$lcssa = 0, $i$096 = 0, $i$1 = 0, $i$294 = 0, $i$3 = 0, $i$4 = 0, $inc = 0, $inc118 = 0, $inc204 = 0, $incdec$ptr = 0, $incdec$ptr110 = 0, $incdec$ptr130 = 0, $incdec$ptr143 = 0, $incdec$ptr154 = 0, $incdec$ptr184 = 0, $incdec$ptr199 = 0;
 var $incdec$ptr20 = 0, $incdec$ptr212 = 0, $incdec$ptr226 = 0, $incdec$ptr242 = 0, $incdec$ptr40 = 0, $incdec$ptr64 = 0, $incdec$ptr77 = 0, $mul = 0, $mul85 = 0.0, $or = 0, $or$cond = 0, $or$cond2 = 0, $or$cond3 = 0, $or$cond4 = 0, $or232 = 0, $or94 = 0, $retval$0 = 0.0, $rpos = 0, $shend = 0, $sign$0 = 0;
 var $sub13 = 0, $sub160 = 0, $sub164 = 0, $sub168 = 0, $tobool = 0, $tobool140 = 0, $tobool181 = 0, $tobool193 = 0, $tobool19392 = 0, $tobool209 = 0, $tobool239 = 0, $tobool55 = 0, $tobool61 = 0, $tobool67 = 0, $tobool88 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 switch ($prec|0) {
 case 0:  {
  $bits$0$ph = 24;$emin$0$ph = -149;
  label = 4;
  break;
 }
 case 1:  {
  $bits$0$ph = 53;$emin$0$ph = -1074;
  label = 4;
  break;
 }
 case 2:  {
  $bits$0$ph = 53;$emin$0$ph = -1074;
  label = 4;
  break;
 }
 default: {
  $retval$0 = 0.0;
 }
 }
 L4: do {
  if ((label|0) == 4) {
   $rpos = ((($f)) + 4|0);
   $shend = ((($f)) + 100|0);
   while(1) {
    $0 = HEAP32[$rpos>>2]|0;
    $1 = HEAP32[$shend>>2]|0;
    $cmp = ($0>>>0)<($1>>>0);
    if ($cmp) {
     $incdec$ptr = ((($0)) + 1|0);
     HEAP32[$rpos>>2] = $incdec$ptr;
     $2 = HEAP8[$0>>0]|0;
     $conv = $2&255;
     $cond = $conv;
    } else {
     $call = (___shgetc($f)|0);
     $cond = $call;
    }
    $call6 = (_isspace($cond)|0);
    $tobool = ($call6|0)==(0);
    if ($tobool) {
     break;
    }
   }
   L13: do {
    switch ($cond|0) {
    case 43: case 45:  {
     $cmp9 = ($cond|0)==(45);
     $conv12 = $cmp9&1;
     $mul = $conv12 << 1;
     $sub13 = (1 - ($mul))|0;
     $3 = HEAP32[$rpos>>2]|0;
     $4 = HEAP32[$shend>>2]|0;
     $cmp16 = ($3>>>0)<($4>>>0);
     if ($cmp16) {
      $incdec$ptr20 = ((($3)) + 1|0);
      HEAP32[$rpos>>2] = $incdec$ptr20;
      $5 = HEAP8[$3>>0]|0;
      $conv21 = $5&255;
      $c$0 = $conv21;$sign$0 = $sub13;
      break L13;
     } else {
      $call23 = (___shgetc($f)|0);
      $c$0 = $call23;$sign$0 = $sub13;
      break L13;
     }
     break;
    }
    default: {
     $c$0 = $cond;$sign$0 = 1;
    }
    }
   } while(0);
   $c$197 = $c$0;$i$096 = 0;
   while(1) {
    $or = $c$197 | 32;
    $arrayidx = (15124 + ($i$096)|0);
    $6 = HEAP8[$arrayidx>>0]|0;
    $conv28 = $6 << 24 >> 24;
    $cmp29 = ($or|0)==($conv28|0);
    if (!($cmp29)) {
     $c$1$lcssa = $c$197;$i$0$lcssa = $i$096;
     break;
    }
    $cmp31 = ($i$096>>>0)<(7);
    do {
     if ($cmp31) {
      $7 = HEAP32[$rpos>>2]|0;
      $8 = HEAP32[$shend>>2]|0;
      $cmp36 = ($7>>>0)<($8>>>0);
      if ($cmp36) {
       $incdec$ptr40 = ((($7)) + 1|0);
       HEAP32[$rpos>>2] = $incdec$ptr40;
       $9 = HEAP8[$7>>0]|0;
       $conv41 = $9&255;
       $c$2 = $conv41;
       break;
      } else {
       $call43 = (___shgetc($f)|0);
       $c$2 = $call43;
       break;
      }
     } else {
      $c$2 = $c$197;
     }
    } while(0);
    $inc = (($i$096) + 1)|0;
    $cmp26 = ($inc>>>0)<(8);
    if ($cmp26) {
     $c$197 = $c$2;$i$096 = $inc;
    } else {
     $c$1$lcssa = $c$2;$i$0$lcssa = $inc;
     break;
    }
   }
   L29: do {
    switch ($i$0$lcssa|0) {
    case 8:  {
     break;
    }
    case 3:  {
     label = 23;
     break;
    }
    default: {
     $cmp53 = ($i$0$lcssa>>>0)>(3);
     $tobool55 = ($pok|0)!=(0);
     $or$cond2 = $tobool55 & $cmp53;
     if ($or$cond2) {
      $cmp57 = ($i$0$lcssa|0)==(8);
      if ($cmp57) {
       break L29;
      } else {
       label = 23;
       break L29;
      }
     }
     $tobool88 = ($i$0$lcssa|0)==(0);
     L34: do {
      if ($tobool88) {
       $c$395 = $c$1$lcssa;$i$294 = 0;
       while(1) {
        $or94 = $c$395 | 32;
        $arrayidx95 = (15133 + ($i$294)|0);
        $13 = HEAP8[$arrayidx95>>0]|0;
        $conv96 = $13 << 24 >> 24;
        $cmp97 = ($or94|0)==($conv96|0);
        if (!($cmp97)) {
         $c$5 = $c$395;$i$3 = $i$294;
         break L34;
        }
        $cmp101 = ($i$294>>>0)<(2);
        do {
         if ($cmp101) {
          $14 = HEAP32[$rpos>>2]|0;
          $15 = HEAP32[$shend>>2]|0;
          $cmp106 = ($14>>>0)<($15>>>0);
          if ($cmp106) {
           $incdec$ptr110 = ((($14)) + 1|0);
           HEAP32[$rpos>>2] = $incdec$ptr110;
           $16 = HEAP8[$14>>0]|0;
           $conv111 = $16&255;
           $c$4 = $conv111;
           break;
          } else {
           $call113 = (___shgetc($f)|0);
           $c$4 = $call113;
           break;
          }
         } else {
          $c$4 = $c$395;
         }
        } while(0);
        $inc118 = (($i$294) + 1)|0;
        $cmp91 = ($inc118>>>0)<(3);
        if ($cmp91) {
         $c$395 = $c$4;$i$294 = $inc118;
        } else {
         $c$5 = $c$4;$i$3 = $inc118;
         break;
        }
       }
      } else {
       $c$5 = $c$1$lcssa;$i$3 = $i$0$lcssa;
      }
     } while(0);
     switch ($i$3|0) {
     case 3:  {
      $17 = HEAP32[$rpos>>2]|0;
      $18 = HEAP32[$shend>>2]|0;
      $cmp126 = ($17>>>0)<($18>>>0);
      if ($cmp126) {
       $incdec$ptr130 = ((($17)) + 1|0);
       HEAP32[$rpos>>2] = $incdec$ptr130;
       $19 = HEAP8[$17>>0]|0;
       $conv131 = $19&255;
       $cond135 = $conv131;
      } else {
       $call133 = (___shgetc($f)|0);
       $cond135 = $call133;
      }
      $cmp136 = ($cond135|0)==(40);
      if ($cmp136) {
       $i$4 = 1;
      } else {
       $20 = HEAP32[$shend>>2]|0;
       $tobool140 = ($20|0)==(0|0);
       if ($tobool140) {
        $retval$0 = nan;
        break L4;
       }
       $21 = HEAP32[$rpos>>2]|0;
       $incdec$ptr143 = ((($21)) + -1|0);
       HEAP32[$rpos>>2] = $incdec$ptr143;
       $retval$0 = nan;
       break L4;
      }
      while(1) {
       $22 = HEAP32[$rpos>>2]|0;
       $23 = HEAP32[$shend>>2]|0;
       $cmp150 = ($22>>>0)<($23>>>0);
       if ($cmp150) {
        $incdec$ptr154 = ((($22)) + 1|0);
        HEAP32[$rpos>>2] = $incdec$ptr154;
        $24 = HEAP8[$22>>0]|0;
        $conv155 = $24&255;
        $cond159 = $conv155;
       } else {
        $call157 = (___shgetc($f)|0);
        $cond159 = $call157;
       }
       $sub160 = (($cond159) + -48)|0;
       $cmp161 = ($sub160>>>0)<(10);
       $sub164 = (($cond159) + -65)|0;
       $cmp165 = ($sub164>>>0)<(26);
       $or$cond = $cmp161 | $cmp165;
       if (!($or$cond)) {
        $sub168 = (($cond159) + -97)|0;
        $cmp169 = ($sub168>>>0)<(26);
        $cmp172 = ($cond159|0)==(95);
        $or$cond3 = $cmp172 | $cmp169;
        if (!($or$cond3)) {
         break;
        }
       }
       $inc204 = (($i$4) + 1)|0;
       $i$4 = $inc204;
      }
      $cmp176 = ($cond159|0)==(41);
      if ($cmp176) {
       $retval$0 = nan;
       break L4;
      }
      $25 = HEAP32[$shend>>2]|0;
      $tobool181 = ($25|0)==(0|0);
      if (!($tobool181)) {
       $26 = HEAP32[$rpos>>2]|0;
       $incdec$ptr184 = ((($26)) + -1|0);
       HEAP32[$rpos>>2] = $incdec$ptr184;
      }
      if (!($tobool55)) {
       $call189 = (___errno_location()|0);
       HEAP32[$call189>>2] = 22;
       ___shlim($f,0);
       $retval$0 = 0.0;
       break L4;
      }
      $tobool19392 = ($i$4|0)==(0);
      if ($tobool19392) {
       $retval$0 = nan;
       break L4;
      } else {
       $dec19293$in = $i$4;
      }
      while(1) {
       $dec19293 = (($dec19293$in) + -1)|0;
       if (!($tobool181)) {
        $27 = HEAP32[$rpos>>2]|0;
        $incdec$ptr199 = ((($27)) + -1|0);
        HEAP32[$rpos>>2] = $incdec$ptr199;
       }
       $tobool193 = ($dec19293|0)==(0);
       if ($tobool193) {
        $retval$0 = nan;
        break L4;
       } else {
        $dec19293$in = $dec19293;
       }
      }
      break;
     }
     case 0:  {
      $cmp217 = ($c$5|0)==(48);
      if ($cmp217) {
       $30 = HEAP32[$rpos>>2]|0;
       $31 = HEAP32[$shend>>2]|0;
       $cmp222 = ($30>>>0)<($31>>>0);
       if ($cmp222) {
        $incdec$ptr226 = ((($30)) + 1|0);
        HEAP32[$rpos>>2] = $incdec$ptr226;
        $32 = HEAP8[$30>>0]|0;
        $conv227 = $32&255;
        $cond231 = $conv227;
       } else {
        $call229 = (___shgetc($f)|0);
        $cond231 = $call229;
       }
       $or232 = $cond231 | 32;
       $cmp233 = ($or232|0)==(120);
       if ($cmp233) {
        $call236 = (+_hexfloat($f,$bits$0$ph,$emin$0$ph,$sign$0,$pok));
        $retval$0 = $call236;
        break L4;
       }
       $33 = HEAP32[$shend>>2]|0;
       $tobool239 = ($33|0)==(0|0);
       if ($tobool239) {
        $c$6 = 48;
       } else {
        $34 = HEAP32[$rpos>>2]|0;
        $incdec$ptr242 = ((($34)) + -1|0);
        HEAP32[$rpos>>2] = $incdec$ptr242;
        $c$6 = 48;
       }
      } else {
       $c$6 = $c$5;
      }
      $call246 = (+_decfloat($f,$c$6,$bits$0$ph,$emin$0$ph,$sign$0,$pok));
      $retval$0 = $call246;
      break L4;
      break;
     }
     default: {
      $28 = HEAP32[$shend>>2]|0;
      $tobool209 = ($28|0)==(0|0);
      if (!($tobool209)) {
       $29 = HEAP32[$rpos>>2]|0;
       $incdec$ptr212 = ((($29)) + -1|0);
       HEAP32[$rpos>>2] = $incdec$ptr212;
      }
      $call215 = (___errno_location()|0);
      HEAP32[$call215>>2] = 22;
      ___shlim($f,0);
      $retval$0 = 0.0;
      break L4;
     }
     }
    }
    }
   } while(0);
   if ((label|0) == 23) {
    $10 = HEAP32[$shend>>2]|0;
    $tobool61 = ($10|0)==(0|0);
    if (!($tobool61)) {
     $11 = HEAP32[$rpos>>2]|0;
     $incdec$ptr64 = ((($11)) + -1|0);
     HEAP32[$rpos>>2] = $incdec$ptr64;
    }
    $tobool67 = ($pok|0)!=(0);
    $cmp70 = ($i$0$lcssa>>>0)>(3);
    $or$cond4 = $tobool67 & $cmp70;
    if ($or$cond4) {
     $i$1 = $i$0$lcssa;
     while(1) {
      if (!($tobool61)) {
       $12 = HEAP32[$rpos>>2]|0;
       $incdec$ptr77 = ((($12)) + -1|0);
       HEAP32[$rpos>>2] = $incdec$ptr77;
      }
      $dec = (($i$1) + -1)|0;
      $cmp70$old = ($dec>>>0)>(3);
      if ($cmp70$old) {
       $i$1 = $dec;
      } else {
       break;
      }
     }
    }
   }
   $conv84 = (+($sign$0|0));
   $mul85 = $conv84 * inf;
   $conv86 = $mul85;
   $retval$0 = $conv86;
  }
 } while(0);
 return (+$retval$0);
}
function _hexfloat($f,$bits,$emin,$sign,$pok) {
 $f = $f|0;
 $bits = $bits|0;
 $emin = $emin|0;
 $sign = $sign|0;
 $pok = $pok|0;
 var $$pre = 0.0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0;
 var $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0;
 var $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0;
 var $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0;
 var $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0;
 var $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $add210 = 0, $add214 = 0, $add256 = 0.0, $add259 = 0.0, $add73 = 0, $add80 = 0.0, $add86 = 0.0, $and = 0, $bias$0 = 0.0;
 var $bits$addr$0 = 0, $bits$addr$0108 = 0, $bits$addr$0109 = 0, $c$0 = 0, $c$1$ph = 0, $c$2 = 0, $c$2$lcssa = 0, $call = 0, $call101 = 0, $call13 = 0, $call187 = 0, $call197 = 0, $call240 = 0.0, $call242 = 0.0, $call263 = 0, $call266 = 0.0, $call27 = 0, $call44 = 0, $cmp = 0, $cmp146 = 0;
 var $cmp20 = 0, $cmp203 = 0, $cmp203115 = 0, $cmp206 = 0, $cmp235 = 0, $cmp244 = 0, $cmp31 = 0, $cmp31125 = 0, $cmp37 = 0, $cmp49 = 0, $cmp52 = 0, $cmp57 = 0, $cmp6 = 0, $cmp62 = 0, $cmp94 = 0, $cond46 = 0, $conv = 0, $conv11 = 0, $conv135 = 0.0, $conv179 = 0.0;
 var $conv188 = 0.0, $conv198 = 0.0, $conv241111 = 0.0, $conv25 = 0, $conv253$pre$phiZ2D = 0.0, $conv254 = 0.0, $conv42 = 0, $conv78 = 0.0, $conv99 = 0, $d$0 = 0, $div = 0.0, $gotdig$0 = 0, $gotdig$2 = 0, $gotdig$3 = 0, $gotrad$0 = 0, $gotrad$1 = 0, $gottail$0 = 0, $gottail$0$ = 0, $gottail$1 = 0, $gottail$2 = 0;
 var $inc251 = 0, $incdec$ptr = 0, $incdec$ptr10 = 0, $incdec$ptr111 = 0, $incdec$ptr120 = 0, $incdec$ptr129 = 0, $incdec$ptr159 = 0, $incdec$ptr170 = 0, $incdec$ptr24 = 0, $incdec$ptr41 = 0, $incdec$ptr98 = 0, $mul = 0, $mul136 = 0.0, $mul143 = 0, $mul180 = 0.0, $mul189 = 0.0, $mul190 = 0.0, $mul199 = 0.0, $mul200 = 0.0, $mul255 = 0.0;
 var $mul258 = 0.0, $mul79 = 0.0, $mul85 = 0.0, $not$cmp206 = 0, $or = 0, $or$cond = 0, $or$cond103 = 0, $or$cond136 = 0, $or$cond2 = 0, $or$cond3 = 0, $or145 = 0, $or65 = 0, $retval$0 = 0.0, $rpos = 0, $scale$0 = 0.0, $scale$1 = 0.0, $scale$2 = 0.0, $shend = 0, $sub = 0, $sub182 = 0;
 var $sub192 = 0, $sub211 = 0.0, $sub211$pn = 0.0, $sub239 = 0, $sub239110 = 0, $sub260 = 0.0, $sub51 = 0, $sub66 = 0, $tobool = 0, $tobool105 = 0, $tobool108 = 0, $tobool114 = 0, $tobool123 = 0, $tobool126 = 0, $tobool138 = 0, $tobool153 = 0, $tobool156 = 0, $tobool167 = 0, $tobool177 = 0, $tobool247 = 0;
 var $tobool249 = 0, $tobool261 = 0, $tobool82 = 0, $tobool83 = 0, $x$0 = 0, $x$1 = 0, $x$2 = 0, $x$3$lcssa = 0, $x$3122 = 0, $x$4$lcssa = 0, $x$4116 = 0, $x$5 = 0, $x$6 = 0, $y$0 = 0.0, $y$0$add86 = 0.0, $y$1 = 0.0, $y$2 = 0.0, $y$3$lcssa = 0.0, $y$3117 = 0.0, $y$4 = 0.0;
 var $y$5 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $rpos = ((($f)) + 4|0);
 $0 = HEAP32[$rpos>>2]|0;
 $shend = ((($f)) + 100|0);
 $1 = HEAP32[$shend>>2]|0;
 $cmp = ($0>>>0)<($1>>>0);
 if ($cmp) {
  $incdec$ptr = ((($0)) + 1|0);
  HEAP32[$rpos>>2] = $incdec$ptr;
  $2 = HEAP8[$0>>0]|0;
  $conv = $2&255;
  $c$0 = $conv;$gotdig$0 = 0;
 } else {
  $call = (___shgetc($f)|0);
  $c$0 = $call;$gotdig$0 = 0;
 }
 L4: while(1) {
  switch ($c$0|0) {
  case 46:  {
   label = 8;
   break L4;
   break;
  }
  case 48:  {
   break;
  }
  default: {
   $17 = 0;$19 = 0;$38 = 0;$40 = 0;$c$2 = $c$0;$gotdig$2 = $gotdig$0;$gotrad$0 = 0;$gottail$0 = 0;$scale$0 = 1.0;$x$0 = 0;$y$0 = 0.0;
   break L4;
  }
  }
  $3 = HEAP32[$rpos>>2]|0;
  $4 = HEAP32[$shend>>2]|0;
  $cmp6 = ($3>>>0)<($4>>>0);
  if ($cmp6) {
   $incdec$ptr10 = ((($3)) + 1|0);
   HEAP32[$rpos>>2] = $incdec$ptr10;
   $5 = HEAP8[$3>>0]|0;
   $conv11 = $5&255;
   $c$0 = $conv11;$gotdig$0 = 1;
   continue;
  } else {
   $call13 = (___shgetc($f)|0);
   $c$0 = $call13;$gotdig$0 = 1;
   continue;
  }
 }
 if ((label|0) == 8) {
  $6 = HEAP32[$rpos>>2]|0;
  $7 = HEAP32[$shend>>2]|0;
  $cmp20 = ($6>>>0)<($7>>>0);
  if ($cmp20) {
   $incdec$ptr24 = ((($6)) + 1|0);
   HEAP32[$rpos>>2] = $incdec$ptr24;
   $8 = HEAP8[$6>>0]|0;
   $conv25 = $8&255;
   $c$1$ph = $conv25;
  } else {
   $call27 = (___shgetc($f)|0);
   $c$1$ph = $call27;
  }
  $cmp31125 = ($c$1$ph|0)==(48);
  if ($cmp31125) {
   $12 = 0;$13 = 0;
   while(1) {
    $9 = HEAP32[$rpos>>2]|0;
    $10 = HEAP32[$shend>>2]|0;
    $cmp37 = ($9>>>0)<($10>>>0);
    if ($cmp37) {
     $incdec$ptr41 = ((($9)) + 1|0);
     HEAP32[$rpos>>2] = $incdec$ptr41;
     $11 = HEAP8[$9>>0]|0;
     $conv42 = $11&255;
     $cond46 = $conv42;
    } else {
     $call44 = (___shgetc($f)|0);
     $cond46 = $call44;
    }
    $14 = (_i64Add(($12|0),($13|0),-1,-1)|0);
    $15 = tempRet0;
    $cmp31 = ($cond46|0)==(48);
    if ($cmp31) {
     $12 = $14;$13 = $15;
    } else {
     $17 = 0;$19 = 0;$38 = $14;$40 = $15;$c$2 = $cond46;$gotdig$2 = 1;$gotrad$0 = 1;$gottail$0 = 0;$scale$0 = 1.0;$x$0 = 0;$y$0 = 0.0;
     break;
    }
   }
  } else {
   $17 = 0;$19 = 0;$38 = 0;$40 = 0;$c$2 = $c$1$ph;$gotdig$2 = $gotdig$0;$gotrad$0 = 1;$gottail$0 = 0;$scale$0 = 1.0;$x$0 = 0;$y$0 = 0.0;
  }
 }
 while(1) {
  $sub = (($c$2) + -48)|0;
  $cmp49 = ($sub>>>0)<(10);
  $cmp57 = ($c$2|0)==(46);
  if (!($cmp49)) {
   $or = $c$2 | 32;
   $sub51 = (($or) + -97)|0;
   $cmp52 = ($sub51>>>0)<(6);
   $or$cond3 = $cmp57 | $cmp52;
   if (!($or$cond3)) {
    $c$2$lcssa = $c$2;
    break;
   }
  }
  if ($cmp57) {
   $tobool = ($gotrad$0|0)==(0);
   if ($tobool) {
    $106 = $19;$107 = $17;$108 = $19;$109 = $17;$gotdig$3 = $gotdig$2;$gotrad$1 = 1;$gottail$2 = $gottail$0;$scale$2 = $scale$0;$x$2 = $x$0;$y$2 = $y$0;
   } else {
    $c$2$lcssa = 46;
    break;
   }
  } else {
   $cmp62 = ($c$2|0)>(57);
   $or65 = $c$2 | 32;
   $sub66 = (($or65) + -87)|0;
   $d$0 = $cmp62 ? $sub66 : $sub;
   $16 = ($17|0)<(0);
   $18 = ($19>>>0)<(8);
   $20 = ($17|0)==(0);
   $21 = $20 & $18;
   $22 = $16 | $21;
   do {
    if ($22) {
     $mul = $x$0 << 4;
     $add73 = (($d$0) + ($mul))|0;
     $gottail$1 = $gottail$0;$scale$1 = $scale$0;$x$1 = $add73;$y$1 = $y$0;
    } else {
     $23 = ($17|0)<(0);
     $24 = ($19>>>0)<(14);
     $25 = ($17|0)==(0);
     $26 = $25 & $24;
     $27 = $23 | $26;
     if ($27) {
      $conv78 = (+($d$0|0));
      $div = $scale$0 * 0.0625;
      $mul79 = $div * $conv78;
      $add80 = $y$0 + $mul79;
      $gottail$1 = $gottail$0;$scale$1 = $div;$x$1 = $x$0;$y$1 = $add80;
      break;
     } else {
      $tobool82 = ($d$0|0)==(0);
      $tobool83 = ($gottail$0|0)!=(0);
      $or$cond = $tobool83 | $tobool82;
      $mul85 = $scale$0 * 0.5;
      $add86 = $y$0 + $mul85;
      $y$0$add86 = $or$cond ? $y$0 : $add86;
      $gottail$0$ = $or$cond ? $gottail$0 : 1;
      $gottail$1 = $gottail$0$;$scale$1 = $scale$0;$x$1 = $x$0;$y$1 = $y$0$add86;
      break;
     }
    }
   } while(0);
   $28 = (_i64Add(($19|0),($17|0),1,0)|0);
   $29 = tempRet0;
   $106 = $38;$107 = $40;$108 = $28;$109 = $29;$gotdig$3 = 1;$gotrad$1 = $gotrad$0;$gottail$2 = $gottail$1;$scale$2 = $scale$1;$x$2 = $x$1;$y$2 = $y$1;
  }
  $30 = HEAP32[$rpos>>2]|0;
  $31 = HEAP32[$shend>>2]|0;
  $cmp94 = ($30>>>0)<($31>>>0);
  if ($cmp94) {
   $incdec$ptr98 = ((($30)) + 1|0);
   HEAP32[$rpos>>2] = $incdec$ptr98;
   $32 = HEAP8[$30>>0]|0;
   $conv99 = $32&255;
   $17 = $109;$19 = $108;$38 = $106;$40 = $107;$c$2 = $conv99;$gotdig$2 = $gotdig$3;$gotrad$0 = $gotrad$1;$gottail$0 = $gottail$2;$scale$0 = $scale$2;$x$0 = $x$2;$y$0 = $y$2;
   continue;
  } else {
   $call101 = (___shgetc($f)|0);
   $17 = $109;$19 = $108;$38 = $106;$40 = $107;$c$2 = $call101;$gotdig$2 = $gotdig$3;$gotrad$0 = $gotrad$1;$gottail$0 = $gottail$2;$scale$0 = $scale$2;$x$0 = $x$2;$y$0 = $y$2;
   continue;
  }
 }
 $tobool105 = ($gotdig$2|0)==(0);
 do {
  if ($tobool105) {
   $33 = HEAP32[$shend>>2]|0;
   $tobool108 = ($33|0)!=(0|0);
   if ($tobool108) {
    $34 = HEAP32[$rpos>>2]|0;
    $incdec$ptr111 = ((($34)) + -1|0);
    HEAP32[$rpos>>2] = $incdec$ptr111;
   }
   $tobool114 = ($pok|0)==(0);
   if ($tobool114) {
    ___shlim($f,0);
   } else {
    if ($tobool108) {
     $35 = HEAP32[$rpos>>2]|0;
     $incdec$ptr120 = ((($35)) + -1|0);
     HEAP32[$rpos>>2] = $incdec$ptr120;
    }
    $tobool123 = ($gotrad$0|0)==(0);
    $tobool126 = ($33|0)==(0|0);
    $or$cond136 = $tobool123 | $tobool126;
    if (!($or$cond136)) {
     $36 = HEAP32[$rpos>>2]|0;
     $incdec$ptr129 = ((($36)) + -1|0);
     HEAP32[$rpos>>2] = $incdec$ptr129;
    }
   }
   $conv135 = (+($sign|0));
   $mul136 = $conv135 * 0.0;
   $retval$0 = $mul136;
  } else {
   $tobool138 = ($gotrad$0|0)==(0);
   $37 = $tobool138 ? $19 : $38;
   $39 = $tobool138 ? $17 : $40;
   $41 = ($17|0)<(0);
   $42 = ($19>>>0)<(8);
   $43 = ($17|0)==(0);
   $44 = $43 & $42;
   $45 = $41 | $44;
   if ($45) {
    $46 = $19;$47 = $17;$x$3122 = $x$0;
    while(1) {
     $mul143 = $x$3122 << 4;
     $48 = (_i64Add(($46|0),($47|0),1,0)|0);
     $49 = tempRet0;
     $50 = ($49|0)<(0);
     $51 = ($48>>>0)<(8);
     $52 = ($49|0)==(0);
     $53 = $52 & $51;
     $54 = $50 | $53;
     if ($54) {
      $46 = $48;$47 = $49;$x$3122 = $mul143;
     } else {
      $x$3$lcssa = $mul143;
      break;
     }
    }
   } else {
    $x$3$lcssa = $x$0;
   }
   $or145 = $c$2$lcssa | 32;
   $cmp146 = ($or145|0)==(112);
   if ($cmp146) {
    $55 = (_scanexp($f,$pok)|0);
    $56 = tempRet0;
    $57 = ($55|0)==(0);
    $58 = ($56|0)==(-2147483648);
    $59 = $57 & $58;
    if ($59) {
     $tobool153 = ($pok|0)==(0);
     if ($tobool153) {
      ___shlim($f,0);
      $retval$0 = 0.0;
      break;
     }
     $60 = HEAP32[$shend>>2]|0;
     $tobool156 = ($60|0)==(0|0);
     if ($tobool156) {
      $68 = 0;$69 = 0;
     } else {
      $61 = HEAP32[$rpos>>2]|0;
      $incdec$ptr159 = ((($61)) + -1|0);
      HEAP32[$rpos>>2] = $incdec$ptr159;
      $68 = 0;$69 = 0;
     }
    } else {
     $68 = $55;$69 = $56;
    }
   } else {
    $62 = HEAP32[$shend>>2]|0;
    $tobool167 = ($62|0)==(0|0);
    if ($tobool167) {
     $68 = 0;$69 = 0;
    } else {
     $63 = HEAP32[$rpos>>2]|0;
     $incdec$ptr170 = ((($63)) + -1|0);
     HEAP32[$rpos>>2] = $incdec$ptr170;
     $68 = 0;$69 = 0;
    }
   }
   $64 = (_bitshift64Shl(($37|0),($39|0),2)|0);
   $65 = tempRet0;
   $66 = (_i64Add(($64|0),($65|0),-32,-1)|0);
   $67 = tempRet0;
   $70 = (_i64Add(($66|0),($67|0),($68|0),($69|0))|0);
   $71 = tempRet0;
   $tobool177 = ($x$3$lcssa|0)==(0);
   if ($tobool177) {
    $conv179 = (+($sign|0));
    $mul180 = $conv179 * 0.0;
    $retval$0 = $mul180;
    break;
   }
   $sub182 = (0 - ($emin))|0;
   $72 = ($sub182|0)<(0);
   $73 = $72 << 31 >> 31;
   $74 = ($71|0)>($73|0);
   $75 = ($70>>>0)>($sub182>>>0);
   $76 = ($71|0)==($73|0);
   $77 = $76 & $75;
   $78 = $74 | $77;
   if ($78) {
    $call187 = (___errno_location()|0);
    HEAP32[$call187>>2] = 34;
    $conv188 = (+($sign|0));
    $mul189 = $conv188 * 1.7976931348623157E+308;
    $mul190 = $mul189 * 1.7976931348623157E+308;
    $retval$0 = $mul190;
    break;
   }
   $sub192 = (($emin) + -106)|0;
   $79 = ($sub192|0)<(0);
   $80 = $79 << 31 >> 31;
   $81 = ($71|0)<($80|0);
   $82 = ($70>>>0)<($sub192>>>0);
   $83 = ($71|0)==($80|0);
   $84 = $83 & $82;
   $85 = $81 | $84;
   if ($85) {
    $call197 = (___errno_location()|0);
    HEAP32[$call197>>2] = 34;
    $conv198 = (+($sign|0));
    $mul199 = $conv198 * 2.2250738585072014E-308;
    $mul200 = $mul199 * 2.2250738585072014E-308;
    $retval$0 = $mul200;
    break;
   }
   $cmp203115 = ($x$3$lcssa|0)>(-1);
   if ($cmp203115) {
    $86 = $70;$87 = $71;$x$4116 = $x$3$lcssa;$y$3117 = $y$0;
    while(1) {
     $cmp206 = !($y$3117 >= 0.5);
     $add214 = $x$4116 << 1;
     $sub211 = $y$3117 + -1.0;
     $not$cmp206 = $cmp206 ^ 1;
     $add210 = $not$cmp206&1;
     $x$5 = $add214 | $add210;
     $sub211$pn = $cmp206 ? $y$3117 : $sub211;
     $y$4 = $y$3117 + $sub211$pn;
     $88 = (_i64Add(($86|0),($87|0),-1,-1)|0);
     $89 = tempRet0;
     $cmp203 = ($x$5|0)>(-1);
     if ($cmp203) {
      $86 = $88;$87 = $89;$x$4116 = $x$5;$y$3117 = $y$4;
     } else {
      $96 = $88;$97 = $89;$x$4$lcssa = $x$5;$y$3$lcssa = $y$4;
      break;
     }
    }
   } else {
    $96 = $70;$97 = $71;$x$4$lcssa = $x$3$lcssa;$y$3$lcssa = $y$0;
   }
   $90 = ($bits|0)<(0);
   $91 = $90 << 31 >> 31;
   $92 = ($emin|0)<(0);
   $93 = $92 << 31 >> 31;
   $94 = (_i64Subtract(32,0,($emin|0),($93|0))|0);
   $95 = tempRet0;
   $98 = (_i64Add(($94|0),($95|0),($96|0),($97|0))|0);
   $99 = tempRet0;
   $100 = ($91|0)>($99|0);
   $101 = ($bits>>>0)>($98>>>0);
   $102 = ($91|0)==($99|0);
   $103 = $102 & $101;
   $104 = $100 | $103;
   if ($104) {
    $105 = ($98|0)>(0);
    if ($105) {
     $bits$addr$0 = $98;
     label = 59;
    } else {
     $bits$addr$0109 = 0;$sub239110 = 84;
     label = 61;
    }
   } else {
    $bits$addr$0 = $bits;
    label = 59;
   }
   if ((label|0) == 59) {
    $cmp235 = ($bits$addr$0|0)<(53);
    $sub239 = (84 - ($bits$addr$0))|0;
    if ($cmp235) {
     $bits$addr$0109 = $bits$addr$0;$sub239110 = $sub239;
     label = 61;
    } else {
     $$pre = (+($sign|0));
     $bias$0 = 0.0;$bits$addr$0108 = $bits$addr$0;$conv253$pre$phiZ2D = $$pre;
    }
   }
   if ((label|0) == 61) {
    $conv241111 = (+($sign|0));
    $call240 = (+_scalbn(1.0,$sub239110));
    $call242 = (+_copysignl($call240,$conv241111));
    $bias$0 = $call242;$bits$addr$0108 = $bits$addr$0109;$conv253$pre$phiZ2D = $conv241111;
   }
   $cmp244 = ($bits$addr$0108|0)<(32);
   $tobool247 = $y$3$lcssa != 0.0;
   $or$cond2 = $tobool247 & $cmp244;
   $and = $x$4$lcssa & 1;
   $tobool249 = ($and|0)==(0);
   $or$cond103 = $tobool249 & $or$cond2;
   $inc251 = $or$cond103&1;
   $x$6 = (($inc251) + ($x$4$lcssa))|0;
   $y$5 = $or$cond103 ? 0.0 : $y$3$lcssa;
   $conv254 = (+($x$6>>>0));
   $mul255 = $conv253$pre$phiZ2D * $conv254;
   $add256 = $bias$0 + $mul255;
   $mul258 = $conv253$pre$phiZ2D * $y$5;
   $add259 = $mul258 + $add256;
   $sub260 = $add259 - $bias$0;
   $tobool261 = $sub260 != 0.0;
   if (!($tobool261)) {
    $call263 = (___errno_location()|0);
    HEAP32[$call263>>2] = 34;
   }
   $call266 = (+_scalbnl($sub260,$96));
   $retval$0 = $call266;
  }
 } while(0);
 return (+$retval$0);
}
function _decfloat($f,$c,$bits,$emin,$sign,$pok) {
 $f = $f|0;
 $c = $c|0;
 $bits = $bits|0;
 $emin = $emin|0;
 $sign = $sign|0;
 $pok = $pok|0;
 var $$264 = 0, $$inc66 = 0, $$neg = 0, $$pre = 0, $$sub489 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0;
 var $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
 var $98 = 0, $99 = 0, $a$0$lcssa380 = 0, $a$0329 = 0, $a$2$ph288 = 0, $a$4 = 0, $a$4$ph = 0, $a$4$ph386 = 0, $a$5322 = 0, $add252 = 0, $add265 = 0, $add275 = 0, $add287 = 0, $add309$sink$off0 = 0, $add347 = 0, $add371 = 0, $add404 = 0, $add417 = 0, $add427 = 0, $add433 = 0;
 var $add438 = 0, $add462 = 0, $add467 = 0, $add477 = 0.0, $add483 = 0, $add506 = 0.0, $add508 = 0, $add523 = 0, $add530 = 0.0, $add537 = 0.0, $add543 = 0, $add550 = 0.0, $add554 = 0.0, $add569 = 0.0, $add59 = 0, $and = 0, $and$a$0 = 0, $and323 = 0, $and349 = 0, $and354 = 0;
 var $and357 = 0, $and372 = 0, $and414 = 0, $and428 = 0, $and428$a$5 = 0, $and434 = 0, $and439 = 0, $and448 = 0, $and463 = 0, $and468 = 0, $and509 = 0, $and524 = 0, $and544 = 0, $and572 = 0, $arrayidx186 = 0, $arrayidx186$promoted = 0, $arrayidx219 = 0, $arrayidx239 = 0, $arrayidx256 = 0, $arrayidx261 = 0;
 var $arrayidx284 = 0, $arrayidx294 = 0, $arrayidx306 = 0, $arrayidx355 = 0, $arrayidx358 = 0, $arrayidx361 = 0, $arrayidx376 = 0, $arrayidx377 = 0, $arrayidx411 = 0, $arrayidx443 = 0, $arrayidx449 = 0, $arrayidx470 = 0, $arrayidx475 = 0, $arrayidx516 = 0, $arrayidx77 = 0, $bias$0 = 0.0, $bits$addr$0 = 0, $c$addr$0 = 0, $c$addr$1$be = 0, $c$addr$1$ph = 0;
 var $c$addr$2 = 0, $c$addr$3$be = 0, $c$addr$3$lcssa = 0, $c$addr$3348 = 0, $call = 0, $call135 = 0, $call15 = 0, $call165 = 0, $call175 = 0, $call32 = 0, $call500 = 0.0, $call501 = 0.0, $call503 = 0.0, $call504 = 0.0, $call563 = 0.0, $call577 = 0.0, $call600 = 0, $call603 = 0.0, $call91 = 0, $carry$0331 = 0;
 var $carry299$0 = 0, $carry299$1 = 0, $carry365$0324 = 0, $cmp100 = 0, $cmp121 = 0, $cmp149 = 0, $cmp152 = 0, $cmp183335 = 0, $cmp19 = 0, $cmp19359 = 0, $cmp194 = 0, $cmp197 = 0, $cmp2 = 0, $cmp200 = 0, $cmp203 = 0, $cmp211 = 0, $cmp226 = 0, $cmp231 = 0, $cmp246 = 0, $cmp25 = 0;
 var $cmp258 = 0, $cmp258327 = 0, $cmp269 = 0, $cmp289 = 0, $cmp292 = 0, $cmp295 = 0, $cmp324 = 0, $cmp327 = 0, $cmp350 = 0, $cmp368 = 0, $cmp373 = 0, $cmp378 = 0, $cmp38 = 0, $cmp38339 = 0, $cmp386 = 0, $cmp393 = 0, $cmp396 = 0, $cmp40 = 0, $cmp400 = 0, $cmp40340 = 0;
 var $cmp40350 = 0, $cmp406 = 0, $cmp406320 = 0, $cmp421 = 0, $cmp440 = 0, $cmp464 = 0, $cmp48 = 0, $cmp485 = 0, $cmp495 = 0, $cmp51 = 0, $cmp510 = 0, $cmp517 = 0, $cmp525 = 0, $cmp532 = 0, $cmp545 = 0, $cmp560 = 0, $cmp574 = 0, $cmp578 = 0, $cmp593 = 0, $cmp67 = 0;
 var $cmp8 = 0, $cmp84 = 0, $cond = 0, $cond254 = 0, $conv = 0, $conv13 = 0, $conv140 = 0.0, $conv155 = 0.0, $conv157 = 0.0, $conv166 = 0.0, $conv176 = 0.0, $conv206 = 0.0, $conv208 = 0.0, $conv214 = 0.0, $conv216 = 0.0, $conv220 = 0.0, $conv234 = 0.0, $conv236 = 0.0, $conv240 = 0.0, $conv30 = 0;
 var $conv476 = 0.0, $conv481 = 0.0, $conv54$lnz$0 = 0, $conv89 = 0, $denormal$2$v = 0, $div = 0, $div221 = 0.0, $div264 = 0, $div267 = 0, $e2$0 = 0, $e2$0$ph = 0, $e2$1 = 0, $e2$1$ph = 0, $e2$1$ph385 = 0, $e2$3 = 0, $e2$4 = 0, $exitcond = 0, $exitcond377 = 0, $frac$0 = 0.0, $frac$1 = 0.0;
 var $frac$3 = 0.0, $gotdig$0 = 0, $gotdig$2 = 0, $gotdig$3$lcssa = 0, $gotdig$3344 = 0, $gotdig$4 = 0, $gotrad$0 = 0, $gotrad$1$lcssa = 0, $gotrad$1345 = 0, $gotrad$2 = 0, $i$0319 = 0, $i$1 = 0, $i$4318 = 0, $inc189 = 0, $inc191 = 0, $inc279 = 0, $inc283 = 0, $inc391 = 0, $inc479 = 0, $inc566 = 0.0;
 var $inc590 = 0, $inc66 = 0, $inc70 = 0, $inc70$k$0 = 0, $incdec$ptr = 0, $incdec$ptr113 = 0, $incdec$ptr12 = 0, $incdec$ptr128 = 0, $incdec$ptr29 = 0, $incdec$ptr88 = 0, $j$0$lcssa = 0, $j$0296 = 0, $j$0297 = 0, $j$0298 = 0, $j$0347 = 0, $j$2 = 0, $j$3336 = 0, $k$0$lcssa = 0, $k$0300 = 0, $k$0301 = 0;
 var $k$0302 = 0, $k$0346 = 0, $k$2 = 0, $k$3 = 0, $k$4330 = 0, $k$5 = 0, $k$5$in = 0, $k$6323 = 0, $lnz$0$lcssa = 0, $lnz$0306 = 0, $lnz$0307 = 0, $lnz$0308 = 0, $lnz$0343 = 0, $lnz$2 = 0, $mul = 0, $mul141 = 0.0, $mul158 = 0.0, $mul167 = 0.0, $mul168 = 0.0, $mul177 = 0.0;
 var $mul178 = 0.0, $mul187 = 0, $mul187337 = 0, $mul209 = 0.0, $mul217 = 0.0, $mul224$neg = 0, $mul237 = 0.0, $mul241 = 0.0, $mul268 = 0, $mul420 = 0, $mul472 = 0.0, $mul482 = 0.0, $mul529 = 0.0, $mul536 = 0.0, $mul549 = 0.0, $mul553 = 0.0, $mul589 = 0.0, $narrow = 0, $not$cmp578 = 0, $or = 0;
 var $or$cond = 0, $or$cond2 = 0, $or$cond258 = 0, $or$cond259 = 0, $or$cond260 = 0, $or$cond261 = 0, $or$cond262 = 0, $or$cond262$not = 0, $or$cond263 = 0, $or$cond265 = 0, $or$cond4 = 0, $or$cond6 = 0, $or359 = 0, $or450 = 0, $or99 = 0, $rem = 0, $rem262 = 0, $retval$1 = 0.0, $rp$0$lcssa379 = 0, $rp$0328 = 0;
 var $rp$2$ph286 = 0, $rp$4$ph = 0, $rp$4$ph285 = 0, $rp$5321 = 0, $rpos = 0, $shend = 0, $shl412 = 0, $shr = 0, $shr230 = 0, $shr416 = 0, $shr419 = 0, $sub1 = 0, $sub170 = 0, $sub218 = 0, $sub225 = 0, $sub238 = 0, $sub255 = 0, $sub276 = 0, $sub276$rp$0 = 0, $sub286 = 0;
 var $sub300 = 0, $sub301 = 0, $sub322 = 0, $sub342 = 0, $sub348 = 0, $sub353 = 0, $sub356 = 0, $sub37 = 0, $sub37338 = 0, $sub37349 = 0, $sub413 = 0, $sub430 = 0, $sub430$rp$5 = 0, $sub447 = 0, $sub469 = 0, $sub484 = 0, $sub499 = 0, $sub502 = 0, $sub505 = 0.0, $sub559 = 0;
 var $sub570 = 0.0, $sub573 = 0, $sub60 = 0, $sub63$sink = 0, $sum = 0, $tobool107 = 0, $tobool110 = 0, $tobool125 = 0, $tobool138 = 0, $tobool180 = 0, $tobool244 = 0, $tobool273 = 0, $tobool281 = 0, $tobool331 = 0, $tobool345 = 0, $tobool425 = 0, $tobool436 = 0, $tobool520 = 0, $tobool56 = 0, $tobool564 = 0;
 var $tobool598 = 0, $tobool95 = 0, $tobool98 = 0, $tobool98267 = 0, $tobool98272 = 0, $tobool98273275 = 0, $x = 0, $y$0317 = 0.0, $y$1 = 0.0, $y$2 = 0.0, $y$3 = 0.0, $z$0 = 0, $z$1 = 0, $z$1$ph287 = 0, $z$10 = 0, $z$2 = 0, $z$3 = 0, $z$4 = 0, $z$6$ph = 0, $z$9316 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 512|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(512|0);
 $x = sp;
 $sum = (($emin) + ($bits))|0;
 $sub1 = (0 - ($sum))|0;
 $rpos = ((($f)) + 4|0);
 $shend = ((($f)) + 100|0);
 $c$addr$0 = $c;$gotdig$0 = 0;
 L1: while(1) {
  switch ($c$addr$0|0) {
  case 46:  {
   label = 6;
   break L1;
   break;
  }
  case 48:  {
   break;
  }
  default: {
   $101 = 0;$102 = 0;$c$addr$2 = $c$addr$0;$gotdig$2 = $gotdig$0;$gotrad$0 = 0;
   break L1;
  }
  }
  $0 = HEAP32[$rpos>>2]|0;
  $1 = HEAP32[$shend>>2]|0;
  $cmp2 = ($0>>>0)<($1>>>0);
  if ($cmp2) {
   $incdec$ptr = ((($0)) + 1|0);
   HEAP32[$rpos>>2] = $incdec$ptr;
   $2 = HEAP8[$0>>0]|0;
   $conv = $2&255;
   $c$addr$0 = $conv;$gotdig$0 = 1;
   continue;
  } else {
   $call = (___shgetc($f)|0);
   $c$addr$0 = $call;$gotdig$0 = 1;
   continue;
  }
 }
 if ((label|0) == 6) {
  $3 = HEAP32[$rpos>>2]|0;
  $4 = HEAP32[$shend>>2]|0;
  $cmp8 = ($3>>>0)<($4>>>0);
  if ($cmp8) {
   $incdec$ptr12 = ((($3)) + 1|0);
   HEAP32[$rpos>>2] = $incdec$ptr12;
   $5 = HEAP8[$3>>0]|0;
   $conv13 = $5&255;
   $c$addr$1$ph = $conv13;
  } else {
   $call15 = (___shgetc($f)|0);
   $c$addr$1$ph = $call15;
  }
  $cmp19359 = ($c$addr$1$ph|0)==(48);
  if ($cmp19359) {
   $6 = 0;$7 = 0;
   while(1) {
    $8 = (_i64Add(($6|0),($7|0),-1,-1)|0);
    $9 = tempRet0;
    $10 = HEAP32[$rpos>>2]|0;
    $11 = HEAP32[$shend>>2]|0;
    $cmp25 = ($10>>>0)<($11>>>0);
    if ($cmp25) {
     $incdec$ptr29 = ((($10)) + 1|0);
     HEAP32[$rpos>>2] = $incdec$ptr29;
     $12 = HEAP8[$10>>0]|0;
     $conv30 = $12&255;
     $c$addr$1$be = $conv30;
    } else {
     $call32 = (___shgetc($f)|0);
     $c$addr$1$be = $call32;
    }
    $cmp19 = ($c$addr$1$be|0)==(48);
    if ($cmp19) {
     $6 = $8;$7 = $9;
    } else {
     $101 = $8;$102 = $9;$c$addr$2 = $c$addr$1$be;$gotdig$2 = 1;$gotrad$0 = 1;
     break;
    }
   }
  } else {
   $101 = 0;$102 = 0;$c$addr$2 = $c$addr$1$ph;$gotdig$2 = $gotdig$0;$gotrad$0 = 1;
  }
 }
 HEAP32[$x>>2] = 0;
 $sub37338 = (($c$addr$2) + -48)|0;
 $cmp38339 = ($sub37338>>>0)<(10);
 $cmp40340 = ($c$addr$2|0)==(46);
 $13 = $cmp40340 | $cmp38339;
 L20: do {
  if ($13) {
   $arrayidx77 = ((($x)) + 496|0);
   $103 = $101;$104 = $102;$14 = 0;$15 = 0;$c$addr$3348 = $c$addr$2;$cmp40350 = $cmp40340;$gotdig$3344 = $gotdig$2;$gotrad$1345 = $gotrad$0;$j$0347 = 0;$k$0346 = 0;$lnz$0343 = 0;$sub37349 = $sub37338;
   L22: while(1) {
    do {
     if ($cmp40350) {
      $cond = ($gotrad$1345|0)==(0);
      if ($cond) {
       $105 = $14;$106 = $15;$107 = $14;$108 = $15;$gotdig$4 = $gotdig$3344;$gotrad$2 = 1;$j$2 = $j$0347;$k$2 = $k$0346;$lnz$2 = $lnz$0343;
      } else {
       break L22;
      }
     } else {
      $cmp48 = ($k$0346|0)<(125);
      $16 = (_i64Add(($14|0),($15|0),1,0)|0);
      $17 = tempRet0;
      $cmp51 = ($c$addr$3348|0)!=(48);
      if (!($cmp48)) {
       if (!($cmp51)) {
        $105 = $103;$106 = $104;$107 = $16;$108 = $17;$gotdig$4 = $gotdig$3344;$gotrad$2 = $gotrad$1345;$j$2 = $j$0347;$k$2 = $k$0346;$lnz$2 = $lnz$0343;
        break;
       }
       $19 = HEAP32[$arrayidx77>>2]|0;
       $or = $19 | 1;
       HEAP32[$arrayidx77>>2] = $or;
       $105 = $103;$106 = $104;$107 = $16;$108 = $17;$gotdig$4 = $gotdig$3344;$gotrad$2 = $gotrad$1345;$j$2 = $j$0347;$k$2 = $k$0346;$lnz$2 = $lnz$0343;
       break;
      }
      $conv54$lnz$0 = $cmp51 ? $16 : $lnz$0343;
      $tobool56 = ($j$0347|0)==(0);
      $$pre = (($x) + ($k$0346<<2)|0);
      if ($tobool56) {
       $sub63$sink = $sub37349;
      } else {
       $18 = HEAP32[$$pre>>2]|0;
       $mul = ($18*10)|0;
       $add59 = (($c$addr$3348) + -48)|0;
       $sub60 = (($add59) + ($mul))|0;
       $sub63$sink = $sub60;
      }
      HEAP32[$$pre>>2] = $sub63$sink;
      $inc66 = (($j$0347) + 1)|0;
      $cmp67 = ($inc66|0)==(9);
      $inc70 = $cmp67&1;
      $inc70$k$0 = (($inc70) + ($k$0346))|0;
      $$inc66 = $cmp67 ? 0 : $inc66;
      $105 = $103;$106 = $104;$107 = $16;$108 = $17;$gotdig$4 = 1;$gotrad$2 = $gotrad$1345;$j$2 = $$inc66;$k$2 = $inc70$k$0;$lnz$2 = $conv54$lnz$0;
     }
    } while(0);
    $20 = HEAP32[$rpos>>2]|0;
    $21 = HEAP32[$shend>>2]|0;
    $cmp84 = ($20>>>0)<($21>>>0);
    if ($cmp84) {
     $incdec$ptr88 = ((($20)) + 1|0);
     HEAP32[$rpos>>2] = $incdec$ptr88;
     $22 = HEAP8[$20>>0]|0;
     $conv89 = $22&255;
     $c$addr$3$be = $conv89;
    } else {
     $call91 = (___shgetc($f)|0);
     $c$addr$3$be = $call91;
    }
    $sub37 = (($c$addr$3$be) + -48)|0;
    $cmp38 = ($sub37>>>0)<(10);
    $cmp40 = ($c$addr$3$be|0)==(46);
    $23 = $cmp40 | $cmp38;
    if ($23) {
     $103 = $105;$104 = $106;$14 = $107;$15 = $108;$c$addr$3348 = $c$addr$3$be;$cmp40350 = $cmp40;$gotdig$3344 = $gotdig$4;$gotrad$1345 = $gotrad$2;$j$0347 = $j$2;$k$0346 = $k$2;$lnz$0343 = $lnz$2;$sub37349 = $sub37;
    } else {
     $25 = $107;$26 = $105;$28 = $108;$29 = $106;$c$addr$3$lcssa = $c$addr$3$be;$gotdig$3$lcssa = $gotdig$4;$gotrad$1$lcssa = $gotrad$2;$j$0$lcssa = $j$2;$k$0$lcssa = $k$2;$lnz$0$lcssa = $lnz$2;
     label = 29;
     break L20;
    }
   }
   $tobool98267 = ($gotdig$3344|0)!=(0);
   $109 = $14;$110 = $15;$111 = $103;$112 = $104;$j$0298 = $j$0347;$k$0302 = $k$0346;$lnz$0308 = $lnz$0343;$tobool98273275 = $tobool98267;
   label = 37;
  } else {
   $25 = 0;$26 = $101;$28 = 0;$29 = $102;$c$addr$3$lcssa = $c$addr$2;$gotdig$3$lcssa = $gotdig$2;$gotrad$1$lcssa = $gotrad$0;$j$0$lcssa = 0;$k$0$lcssa = 0;$lnz$0$lcssa = 0;
   label = 29;
  }
 } while(0);
 do {
  if ((label|0) == 29) {
   $tobool95 = ($gotrad$1$lcssa|0)==(0);
   $24 = $tobool95 ? $25 : $26;
   $27 = $tobool95 ? $28 : $29;
   $tobool98 = ($gotdig$3$lcssa|0)!=(0);
   $or99 = $c$addr$3$lcssa | 32;
   $cmp100 = ($or99|0)==(101);
   $or$cond258 = $tobool98 & $cmp100;
   if (!($or$cond258)) {
    $cmp121 = ($c$addr$3$lcssa|0)>(-1);
    if ($cmp121) {
     $109 = $25;$110 = $28;$111 = $24;$112 = $27;$j$0298 = $j$0$lcssa;$k$0302 = $k$0$lcssa;$lnz$0308 = $lnz$0$lcssa;$tobool98273275 = $tobool98;
     label = 37;
     break;
    } else {
     $113 = $25;$114 = $28;$115 = $24;$116 = $27;$j$0297 = $j$0$lcssa;$k$0301 = $k$0$lcssa;$lnz$0307 = $lnz$0$lcssa;$tobool98272 = $tobool98;
     label = 39;
     break;
    }
   }
   $30 = (_scanexp($f,$pok)|0);
   $31 = tempRet0;
   $32 = ($30|0)==(0);
   $33 = ($31|0)==(-2147483648);
   $34 = $32 & $33;
   if ($34) {
    $tobool107 = ($pok|0)==(0);
    if ($tobool107) {
     ___shlim($f,0);
     $retval$1 = 0.0;
     break;
    }
    $35 = HEAP32[$shend>>2]|0;
    $tobool110 = ($35|0)==(0|0);
    if ($tobool110) {
     $37 = 0;$38 = 0;
    } else {
     $36 = HEAP32[$rpos>>2]|0;
     $incdec$ptr113 = ((($36)) + -1|0);
     HEAP32[$rpos>>2] = $incdec$ptr113;
     $37 = 0;$38 = 0;
    }
   } else {
    $37 = $30;$38 = $31;
   }
   $39 = (_i64Add(($37|0),($38|0),($24|0),($27|0))|0);
   $40 = tempRet0;
   $45 = $39;$46 = $25;$48 = $40;$49 = $28;$j$0296 = $j$0$lcssa;$k$0300 = $k$0$lcssa;$lnz$0306 = $lnz$0$lcssa;
   label = 41;
  }
 } while(0);
 if ((label|0) == 37) {
  $41 = HEAP32[$shend>>2]|0;
  $tobool125 = ($41|0)==(0|0);
  if ($tobool125) {
   $113 = $109;$114 = $110;$115 = $111;$116 = $112;$j$0297 = $j$0298;$k$0301 = $k$0302;$lnz$0307 = $lnz$0308;$tobool98272 = $tobool98273275;
   label = 39;
  } else {
   $42 = HEAP32[$rpos>>2]|0;
   $incdec$ptr128 = ((($42)) + -1|0);
   HEAP32[$rpos>>2] = $incdec$ptr128;
   if ($tobool98273275) {
    $45 = $111;$46 = $109;$48 = $112;$49 = $110;$j$0296 = $j$0298;$k$0300 = $k$0302;$lnz$0306 = $lnz$0308;
    label = 41;
   } else {
    label = 40;
   }
  }
 }
 if ((label|0) == 39) {
  if ($tobool98272) {
   $45 = $115;$46 = $113;$48 = $116;$49 = $114;$j$0296 = $j$0297;$k$0300 = $k$0301;$lnz$0306 = $lnz$0307;
   label = 41;
  } else {
   label = 40;
  }
 }
 do {
  if ((label|0) == 40) {
   $call135 = (___errno_location()|0);
   HEAP32[$call135>>2] = 22;
   ___shlim($f,0);
   $retval$1 = 0.0;
  }
  else if ((label|0) == 41) {
   $43 = HEAP32[$x>>2]|0;
   $tobool138 = ($43|0)==(0);
   if ($tobool138) {
    $conv140 = (+($sign|0));
    $mul141 = $conv140 * 0.0;
    $retval$1 = $mul141;
    break;
   }
   $44 = ($45|0)==($46|0);
   $47 = ($48|0)==($49|0);
   $50 = $44 & $47;
   $51 = ($49|0)<(0);
   $52 = ($46>>>0)<(10);
   $53 = ($49|0)==(0);
   $54 = $53 & $52;
   $55 = $51 | $54;
   $or$cond = $55 & $50;
   if ($or$cond) {
    $cmp149 = ($bits|0)>(30);
    $shr = $43 >>> $bits;
    $cmp152 = ($shr|0)==(0);
    $or$cond259 = $cmp149 | $cmp152;
    if ($or$cond259) {
     $conv155 = (+($sign|0));
     $conv157 = (+($43>>>0));
     $mul158 = $conv155 * $conv157;
     $retval$1 = $mul158;
     break;
    }
   }
   $div = (($emin|0) / -2)&-1;
   $56 = ($div|0)<(0);
   $57 = $56 << 31 >> 31;
   $58 = ($48|0)>($57|0);
   $59 = ($45>>>0)>($div>>>0);
   $60 = ($48|0)==($57|0);
   $61 = $60 & $59;
   $62 = $58 | $61;
   if ($62) {
    $call165 = (___errno_location()|0);
    HEAP32[$call165>>2] = 34;
    $conv166 = (+($sign|0));
    $mul167 = $conv166 * 1.7976931348623157E+308;
    $mul168 = $mul167 * 1.7976931348623157E+308;
    $retval$1 = $mul168;
    break;
   }
   $sub170 = (($emin) + -106)|0;
   $63 = ($sub170|0)<(0);
   $64 = $63 << 31 >> 31;
   $65 = ($48|0)<($64|0);
   $66 = ($45>>>0)<($sub170>>>0);
   $67 = ($48|0)==($64|0);
   $68 = $67 & $66;
   $69 = $65 | $68;
   if ($69) {
    $call175 = (___errno_location()|0);
    HEAP32[$call175>>2] = 34;
    $conv176 = (+($sign|0));
    $mul177 = $conv176 * 2.2250738585072014E-308;
    $mul178 = $mul177 * 2.2250738585072014E-308;
    $retval$1 = $mul178;
    break;
   }
   $tobool180 = ($j$0296|0)==(0);
   if ($tobool180) {
    $k$3 = $k$0300;
   } else {
    $cmp183335 = ($j$0296|0)<(9);
    if ($cmp183335) {
     $arrayidx186 = (($x) + ($k$0300<<2)|0);
     $arrayidx186$promoted = HEAP32[$arrayidx186>>2]|0;
     $j$3336 = $j$0296;$mul187337 = $arrayidx186$promoted;
     while(1) {
      $mul187 = ($mul187337*10)|0;
      $inc189 = (($j$3336) + 1)|0;
      $exitcond377 = ($inc189|0)==(9);
      if ($exitcond377) {
       break;
      } else {
       $j$3336 = $inc189;$mul187337 = $mul187;
      }
     }
     HEAP32[$arrayidx186>>2] = $mul187;
    }
    $inc191 = (($k$0300) + 1)|0;
    $k$3 = $inc191;
   }
   $cmp194 = ($lnz$0306|0)<(9);
   if ($cmp194) {
    $cmp197 = ($lnz$0306|0)<=($45|0);
    $cmp200 = ($45|0)<(18);
    $or$cond2 = $cmp197 & $cmp200;
    if ($or$cond2) {
     $cmp203 = ($45|0)==(9);
     $70 = HEAP32[$x>>2]|0;
     if ($cmp203) {
      $conv206 = (+($sign|0));
      $conv208 = (+($70>>>0));
      $mul209 = $conv206 * $conv208;
      $retval$1 = $mul209;
      break;
     }
     $cmp211 = ($45|0)<(9);
     if ($cmp211) {
      $conv214 = (+($sign|0));
      $conv216 = (+($70>>>0));
      $mul217 = $conv214 * $conv216;
      $sub218 = (8 - ($45))|0;
      $arrayidx219 = (6336 + ($sub218<<2)|0);
      $71 = HEAP32[$arrayidx219>>2]|0;
      $conv220 = (+($71|0));
      $div221 = $mul217 / $conv220;
      $retval$1 = $div221;
      break;
     }
     $$neg = Math_imul($45, -3)|0;
     $mul224$neg = (($bits) + 27)|0;
     $sub225 = (($mul224$neg) + ($$neg))|0;
     $cmp226 = ($sub225|0)>(30);
     $shr230 = $70 >>> $sub225;
     $cmp231 = ($shr230|0)==(0);
     $or$cond260 = $cmp226 | $cmp231;
     if ($or$cond260) {
      $sub238 = (($45) + -10)|0;
      $arrayidx239 = (6336 + ($sub238<<2)|0);
      $conv234 = (+($sign|0));
      $conv236 = (+($70>>>0));
      $mul237 = $conv234 * $conv236;
      $72 = HEAP32[$arrayidx239>>2]|0;
      $conv240 = (+($72|0));
      $mul241 = $mul237 * $conv240;
      $retval$1 = $mul241;
      break;
     }
    }
   }
   $rem = (($45|0) % 9)&-1;
   $tobool244 = ($rem|0)==(0);
   if ($tobool244) {
    $a$2$ph288 = 0;$e2$0$ph = 0;$rp$2$ph286 = $45;$z$1$ph287 = $k$3;
   } else {
    $cmp246 = ($45|0)>(-1);
    $add252 = (($rem) + 9)|0;
    $cond254 = $cmp246 ? $rem : $add252;
    $sub255 = (8 - ($cond254))|0;
    $arrayidx256 = (6336 + ($sub255<<2)|0);
    $73 = HEAP32[$arrayidx256>>2]|0;
    $cmp258327 = ($k$3|0)==(0);
    if ($cmp258327) {
     $a$0$lcssa380 = 0;$rp$0$lcssa379 = $45;$z$0 = 0;
    } else {
     $div267 = (1000000000 / ($73|0))&-1;
     $a$0329 = 0;$carry$0331 = 0;$k$4330 = 0;$rp$0328 = $45;
     while(1) {
      $arrayidx261 = (($x) + ($k$4330<<2)|0);
      $74 = HEAP32[$arrayidx261>>2]|0;
      $rem262 = (($74>>>0) % ($73>>>0))&-1;
      $div264 = (($74>>>0) / ($73>>>0))&-1;
      $add265 = (($div264) + ($carry$0331))|0;
      HEAP32[$arrayidx261>>2] = $add265;
      $mul268 = Math_imul($div267, $rem262)|0;
      $cmp269 = ($k$4330|0)==($a$0329|0);
      $tobool273 = ($add265|0)==(0);
      $or$cond261 = $cmp269 & $tobool273;
      $add275 = (($a$0329) + 1)|0;
      $and = $add275 & 127;
      $sub276 = (($rp$0328) + -9)|0;
      $sub276$rp$0 = $or$cond261 ? $sub276 : $rp$0328;
      $and$a$0 = $or$cond261 ? $and : $a$0329;
      $inc279 = (($k$4330) + 1)|0;
      $cmp258 = ($inc279|0)==($k$3|0);
      if ($cmp258) {
       break;
      } else {
       $a$0329 = $and$a$0;$carry$0331 = $mul268;$k$4330 = $inc279;$rp$0328 = $sub276$rp$0;
      }
     }
     $tobool281 = ($mul268|0)==(0);
     if ($tobool281) {
      $a$0$lcssa380 = $and$a$0;$rp$0$lcssa379 = $sub276$rp$0;$z$0 = $k$3;
     } else {
      $arrayidx284 = (($x) + ($k$3<<2)|0);
      $inc283 = (($k$3) + 1)|0;
      HEAP32[$arrayidx284>>2] = $mul268;
      $a$0$lcssa380 = $and$a$0;$rp$0$lcssa379 = $sub276$rp$0;$z$0 = $inc283;
     }
    }
    $sub286 = (9 - ($cond254))|0;
    $add287 = (($sub286) + ($rp$0$lcssa379))|0;
    $a$2$ph288 = $a$0$lcssa380;$e2$0$ph = 0;$rp$2$ph286 = $add287;$z$1$ph287 = $z$0;
   }
   L101: while(1) {
    $cmp289 = ($rp$2$ph286|0)<(18);
    $cmp292 = ($rp$2$ph286|0)==(18);
    $arrayidx294 = (($x) + ($a$2$ph288<<2)|0);
    $e2$0 = $e2$0$ph;$z$1 = $z$1$ph287;
    while(1) {
     if (!($cmp289)) {
      if (!($cmp292)) {
       $a$4$ph = $a$2$ph288;$e2$1$ph = $e2$0;$rp$4$ph285 = $rp$2$ph286;$z$6$ph = $z$1;
       break L101;
      }
      $75 = HEAP32[$arrayidx294>>2]|0;
      $cmp295 = ($75>>>0)<(9007199);
      if (!($cmp295)) {
       $a$4$ph = $a$2$ph288;$e2$1$ph = $e2$0;$rp$4$ph285 = 18;$z$6$ph = $z$1;
       break L101;
      }
     }
     $sub301 = (($z$1) + 127)|0;
     $carry299$0 = 0;$k$5$in = $sub301;$z$2 = $z$1;
     while(1) {
      $k$5 = $k$5$in & 127;
      $arrayidx306 = (($x) + ($k$5<<2)|0);
      $76 = HEAP32[$arrayidx306>>2]|0;
      $77 = (_bitshift64Shl(($76|0),0,29)|0);
      $78 = tempRet0;
      $79 = (_i64Add(($77|0),($78|0),($carry299$0|0),0)|0);
      $80 = tempRet0;
      $81 = ($80>>>0)>(0);
      $82 = ($79>>>0)>(1000000000);
      $83 = ($80|0)==(0);
      $84 = $83 & $82;
      $85 = $81 | $84;
      if ($85) {
       $86 = (___udivdi3(($79|0),($80|0),1000000000,0)|0);
       $87 = tempRet0;
       $88 = (___uremdi3(($79|0),($80|0),1000000000,0)|0);
       $89 = tempRet0;
       $add309$sink$off0 = $88;$carry299$1 = $86;
      } else {
       $add309$sink$off0 = $79;$carry299$1 = 0;
      }
      HEAP32[$arrayidx306>>2] = $add309$sink$off0;
      $sub322 = (($z$2) + 127)|0;
      $and323 = $sub322 & 127;
      $cmp324 = ($k$5|0)!=($and323|0);
      $cmp327 = ($k$5|0)==($a$2$ph288|0);
      $or$cond262 = $cmp324 | $cmp327;
      $or$cond262$not = $or$cond262 ^ 1;
      $tobool331 = ($add309$sink$off0|0)==(0);
      $or$cond263 = $tobool331 & $or$cond262$not;
      $z$3 = $or$cond263 ? $k$5 : $z$2;
      $sub342 = (($k$5) + -1)|0;
      if ($cmp327) {
       break;
      } else {
       $carry299$0 = $carry299$1;$k$5$in = $sub342;$z$2 = $z$3;
      }
     }
     $sub300 = (($e2$0) + -29)|0;
     $tobool345 = ($carry299$1|0)==(0);
     if ($tobool345) {
      $e2$0 = $sub300;$z$1 = $z$3;
     } else {
      break;
     }
    }
    $add347 = (($rp$2$ph286) + 9)|0;
    $sub348 = (($a$2$ph288) + 127)|0;
    $and349 = $sub348 & 127;
    $cmp350 = ($and349|0)==($z$3|0);
    $sub353 = (($z$3) + 127)|0;
    $and354 = $sub353 & 127;
    $sub356 = (($z$3) + 126)|0;
    $and357 = $sub356 & 127;
    $arrayidx358 = (($x) + ($and357<<2)|0);
    if ($cmp350) {
     $arrayidx355 = (($x) + ($and354<<2)|0);
     $90 = HEAP32[$arrayidx355>>2]|0;
     $91 = HEAP32[$arrayidx358>>2]|0;
     $or359 = $91 | $90;
     HEAP32[$arrayidx358>>2] = $or359;
     $z$4 = $and354;
    } else {
     $z$4 = $z$3;
    }
    $arrayidx361 = (($x) + ($and349<<2)|0);
    HEAP32[$arrayidx361>>2] = $carry299$1;
    $a$2$ph288 = $and349;$e2$0$ph = $sub300;$rp$2$ph286 = $add347;$z$1$ph287 = $z$4;
   }
   L119: while(1) {
    $add438 = (($z$6$ph) + 1)|0;
    $and439 = $add438 & 127;
    $sub447 = (($z$6$ph) + 127)|0;
    $and448 = $sub447 & 127;
    $arrayidx449 = (($x) + ($and448<<2)|0);
    $a$4$ph386 = $a$4$ph;$e2$1$ph385 = $e2$1$ph;$rp$4$ph = $rp$4$ph285;
    while(1) {
     $cmp396 = ($rp$4$ph|0)==(18);
     $cmp400 = ($rp$4$ph|0)>(27);
     $$264 = $cmp400 ? 9 : 1;
     $a$4 = $a$4$ph386;$e2$1 = $e2$1$ph385;
     while(1) {
      $i$0319 = 0;
      while(1) {
       $add371 = (($i$0319) + ($a$4))|0;
       $and372 = $add371 & 127;
       $cmp373 = ($and372|0)==($z$6$ph|0);
       if ($cmp373) {
        $i$1 = 2;
        label = 88;
        break;
       }
       $arrayidx376 = (($x) + ($and372<<2)|0);
       $92 = HEAP32[$arrayidx376>>2]|0;
       $arrayidx377 = (6368 + ($i$0319<<2)|0);
       $93 = HEAP32[$arrayidx377>>2]|0;
       $cmp378 = ($92>>>0)<($93>>>0);
       if ($cmp378) {
        $i$1 = 2;
        label = 88;
        break;
       }
       $cmp386 = ($92>>>0)>($93>>>0);
       if ($cmp386) {
        break;
       }
       $inc391 = (($i$0319) + 1)|0;
       $cmp368 = ($inc391|0)<(2);
       if ($cmp368) {
        $i$0319 = $inc391;
       } else {
        $i$1 = $inc391;
        label = 88;
        break;
       }
      }
      if ((label|0) == 88) {
       label = 0;
       $cmp393 = ($i$1|0)==(2);
       $or$cond4 = $cmp396 & $cmp393;
       if ($or$cond4) {
        $i$4318 = 0;$y$0317 = 0.0;$z$9316 = $z$6$ph;
        break L119;
       }
      }
      $add404 = (($$264) + ($e2$1))|0;
      $cmp406320 = ($a$4|0)==($z$6$ph|0);
      if ($cmp406320) {
       $a$4 = $z$6$ph;$e2$1 = $add404;
      } else {
       break;
      }
     }
     $shl412 = 1 << $$264;
     $sub413 = (($shl412) + -1)|0;
     $shr419 = 1000000000 >>> $$264;
     $a$5322 = $a$4;$carry365$0324 = 0;$k$6323 = $a$4;$rp$5321 = $rp$4$ph;
     while(1) {
      $arrayidx411 = (($x) + ($k$6323<<2)|0);
      $94 = HEAP32[$arrayidx411>>2]|0;
      $and414 = $94 & $sub413;
      $shr416 = $94 >>> $$264;
      $add417 = (($shr416) + ($carry365$0324))|0;
      HEAP32[$arrayidx411>>2] = $add417;
      $mul420 = Math_imul($and414, $shr419)|0;
      $cmp421 = ($k$6323|0)==($a$5322|0);
      $tobool425 = ($add417|0)==(0);
      $or$cond265 = $cmp421 & $tobool425;
      $add427 = (($a$5322) + 1)|0;
      $and428 = $add427 & 127;
      $sub430 = (($rp$5321) + -9)|0;
      $sub430$rp$5 = $or$cond265 ? $sub430 : $rp$5321;
      $and428$a$5 = $or$cond265 ? $and428 : $a$5322;
      $add433 = (($k$6323) + 1)|0;
      $and434 = $add433 & 127;
      $cmp406 = ($and434|0)==($z$6$ph|0);
      if ($cmp406) {
       break;
      } else {
       $a$5322 = $and428$a$5;$carry365$0324 = $mul420;$k$6323 = $and434;$rp$5321 = $sub430$rp$5;
      }
     }
     $tobool436 = ($mul420|0)==(0);
     if ($tobool436) {
      $a$4$ph386 = $and428$a$5;$e2$1$ph385 = $add404;$rp$4$ph = $sub430$rp$5;
      continue;
     }
     $cmp440 = ($and439|0)==($and428$a$5|0);
     if (!($cmp440)) {
      break;
     }
     $95 = HEAP32[$arrayidx449>>2]|0;
     $or450 = $95 | 1;
     HEAP32[$arrayidx449>>2] = $or450;
     $a$4$ph386 = $and428$a$5;$e2$1$ph385 = $add404;$rp$4$ph = $sub430$rp$5;
    }
    $arrayidx443 = (($x) + ($z$6$ph<<2)|0);
    HEAP32[$arrayidx443>>2] = $mul420;
    $a$4$ph = $and428$a$5;$e2$1$ph = $add404;$rp$4$ph285 = $sub430$rp$5;$z$6$ph = $and439;
   }
   while(1) {
    $add462 = (($i$4318) + ($a$4))|0;
    $and463 = $add462 & 127;
    $cmp464 = ($and463|0)==($z$9316|0);
    $add467 = (($z$9316) + 1)|0;
    $and468 = $add467 & 127;
    if ($cmp464) {
     $sub469 = (($and468) + -1)|0;
     $arrayidx470 = (($x) + ($sub469<<2)|0);
     HEAP32[$arrayidx470>>2] = 0;
     $z$10 = $and468;
    } else {
     $z$10 = $z$9316;
    }
    $mul472 = $y$0317 * 1.0E+9;
    $arrayidx475 = (($x) + ($and463<<2)|0);
    $96 = HEAP32[$arrayidx475>>2]|0;
    $conv476 = (+($96>>>0));
    $add477 = $mul472 + $conv476;
    $inc479 = (($i$4318) + 1)|0;
    $exitcond = ($inc479|0)==(2);
    if ($exitcond) {
     break;
    } else {
     $i$4318 = $inc479;$y$0317 = $add477;$z$9316 = $z$10;
    }
   }
   $conv481 = (+($sign|0));
   $mul482 = $conv481 * $add477;
   $add483 = (($e2$1) + 53)|0;
   $sub484 = (($add483) - ($emin))|0;
   $cmp485 = ($sub484|0)<($bits|0);
   $97 = ($sub484|0)>(0);
   $$sub489 = $97 ? $sub484 : 0;
   $bits$addr$0 = $cmp485 ? $$sub489 : $bits;
   $cmp495 = ($bits$addr$0|0)<(53);
   if ($cmp495) {
    $sub499 = (105 - ($bits$addr$0))|0;
    $call500 = (+_scalbn(1.0,$sub499));
    $call501 = (+_copysignl($call500,$mul482));
    $sub502 = (53 - ($bits$addr$0))|0;
    $call503 = (+_scalbn(1.0,$sub502));
    $call504 = (+_fmodl($mul482,$call503));
    $sub505 = $mul482 - $call504;
    $add506 = $call501 + $sub505;
    $bias$0 = $call501;$frac$0 = $call504;$y$1 = $add506;
   } else {
    $bias$0 = 0.0;$frac$0 = 0.0;$y$1 = $mul482;
   }
   $add508 = (($a$4) + 2)|0;
   $and509 = $add508 & 127;
   $cmp510 = ($and509|0)==($z$10|0);
   if ($cmp510) {
    $frac$3 = $frac$0;
   } else {
    $arrayidx516 = (($x) + ($and509<<2)|0);
    $98 = HEAP32[$arrayidx516>>2]|0;
    $cmp517 = ($98>>>0)<(500000000);
    do {
     if ($cmp517) {
      $tobool520 = ($98|0)==(0);
      if ($tobool520) {
       $add523 = (($a$4) + 3)|0;
       $and524 = $add523 & 127;
       $cmp525 = ($and524|0)==($z$10|0);
       if ($cmp525) {
        $frac$1 = $frac$0;
        break;
       }
      }
      $mul529 = $conv481 * 0.25;
      $add530 = $mul529 + $frac$0;
      $frac$1 = $add530;
     } else {
      $cmp532 = ($98|0)==(500000000);
      if (!($cmp532)) {
       $mul536 = $conv481 * 0.75;
       $add537 = $mul536 + $frac$0;
       $frac$1 = $add537;
       break;
      }
      $add543 = (($a$4) + 3)|0;
      $and544 = $add543 & 127;
      $cmp545 = ($and544|0)==($z$10|0);
      if ($cmp545) {
       $mul549 = $conv481 * 0.5;
       $add550 = $mul549 + $frac$0;
       $frac$1 = $add550;
       break;
      } else {
       $mul553 = $conv481 * 0.75;
       $add554 = $mul553 + $frac$0;
       $frac$1 = $add554;
       break;
      }
     }
    } while(0);
    $sub559 = (53 - ($bits$addr$0))|0;
    $cmp560 = ($sub559|0)>(1);
    if ($cmp560) {
     $call563 = (+_fmodl($frac$1,1.0));
     $tobool564 = $call563 != 0.0;
     if ($tobool564) {
      $frac$3 = $frac$1;
     } else {
      $inc566 = $frac$1 + 1.0;
      $frac$3 = $inc566;
     }
    } else {
     $frac$3 = $frac$1;
    }
   }
   $add569 = $y$1 + $frac$3;
   $sub570 = $add569 - $bias$0;
   $and572 = $add483 & 2147483647;
   $sub573 = (-2 - ($sum))|0;
   $cmp574 = ($and572|0)>($sub573|0);
   do {
    if ($cmp574) {
     $call577 = (+Math_abs((+$sub570)));
     $cmp578 = !($call577 >= 9007199254740992.0);
     $mul589 = $sub570 * 0.5;
     $not$cmp578 = $cmp578 ^ 1;
     $inc590 = $not$cmp578&1;
     $e2$3 = (($inc590) + ($e2$1))|0;
     $y$2 = $cmp578 ? $sub570 : $mul589;
     $99 = (($e2$3) + 50)|0;
     $cmp593 = ($99|0)>($sub1|0);
     if (!($cmp593)) {
      $100 = ($bits$addr$0|0)!=($sub484|0);
      $narrow = $100 | $cmp578;
      $denormal$2$v = $cmp485 & $narrow;
      $tobool598 = $frac$3 != 0.0;
      $or$cond6 = $tobool598 & $denormal$2$v;
      if (!($or$cond6)) {
       $e2$4 = $e2$3;$y$3 = $y$2;
       break;
      }
     }
     $call600 = (___errno_location()|0);
     HEAP32[$call600>>2] = 34;
     $e2$4 = $e2$3;$y$3 = $y$2;
    } else {
     $e2$4 = $e2$1;$y$3 = $sub570;
    }
   } while(0);
   $call603 = (+_scalbnl($y$3,$e2$4));
   $retval$1 = $call603;
  }
 } while(0);
 STACKTOP = sp;return (+$retval$1);
}
function _scanexp($f,$pok) {
 $f = $f|0;
 $pok = $pok|0;
 var $$lcssa = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $add = 0, $c$0 = 0, $c$1$be = 0, $c$147 = 0, $c$2$be = 0, $c$2$lcssa = 0, $c$241 = 0, $c$3$be = 0, $call = 0;
 var $call104 = 0, $call17 = 0, $call58 = 0, $call85 = 0, $cmp = 0, $cmp10 = 0, $cmp20 = 0, $cmp32 = 0, $cmp4 = 0, $cmp44 = 0, $cmp46 = 0, $cmp51 = 0, $cmp64 = 0, $cmp6440 = 0, $cmp78 = 0, $cmp91 = 0, $cmp9138 = 0, $cmp97 = 0, $cond = 0, $cond19 = 0;
 var $conv = 0, $conv102 = 0, $conv15 = 0, $conv56 = 0, $conv7 = 0, $conv83 = 0, $incdec$ptr = 0, $incdec$ptr101 = 0, $incdec$ptr112 = 0, $incdec$ptr14 = 0, $incdec$ptr27 = 0, $incdec$ptr39 = 0, $incdec$ptr55 = 0, $incdec$ptr82 = 0, $mul = 0, $neg$0 = 0, $or$cond1 = 0, $rpos = 0, $shend = 0, $sub = 0;
 var $sub31 = 0, $sub43 = 0, $sub48 = 0, $sub63 = 0, $sub6339 = 0, $sub90 = 0, $sub9037 = 0, $tobool = 0, $tobool109 = 0, $tobool115 = 0, $tobool24 = 0, $tobool36 = 0, $x$048 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $rpos = ((($f)) + 4|0);
 $0 = HEAP32[$rpos>>2]|0;
 $shend = ((($f)) + 100|0);
 $1 = HEAP32[$shend>>2]|0;
 $cmp = ($0>>>0)<($1>>>0);
 if ($cmp) {
  $incdec$ptr = ((($0)) + 1|0);
  HEAP32[$rpos>>2] = $incdec$ptr;
  $2 = HEAP8[$0>>0]|0;
  $conv = $2&255;
  $cond = $conv;
 } else {
  $call = (___shgetc($f)|0);
  $cond = $call;
 }
 switch ($cond|0) {
 case 43: case 45:  {
  $cmp4 = ($cond|0)==(45);
  $conv7 = $cmp4&1;
  $3 = HEAP32[$rpos>>2]|0;
  $4 = HEAP32[$shend>>2]|0;
  $cmp10 = ($3>>>0)<($4>>>0);
  if ($cmp10) {
   $incdec$ptr14 = ((($3)) + 1|0);
   HEAP32[$rpos>>2] = $incdec$ptr14;
   $5 = HEAP8[$3>>0]|0;
   $conv15 = $5&255;
   $cond19 = $conv15;
  } else {
   $call17 = (___shgetc($f)|0);
   $cond19 = $call17;
  }
  $sub = (($cond19) + -48)|0;
  $cmp20 = ($sub>>>0)>(9);
  $tobool = ($pok|0)!=(0);
  $or$cond1 = $tobool & $cmp20;
  if ($or$cond1) {
   $6 = HEAP32[$shend>>2]|0;
   $tobool24 = ($6|0)==(0|0);
   if ($tobool24) {
    $c$0 = $cond19;$neg$0 = $conv7;
   } else {
    $7 = HEAP32[$rpos>>2]|0;
    $incdec$ptr27 = ((($7)) + -1|0);
    HEAP32[$rpos>>2] = $incdec$ptr27;
    $c$0 = $cond19;$neg$0 = $conv7;
   }
  } else {
   $c$0 = $cond19;$neg$0 = $conv7;
  }
  break;
 }
 default: {
  $c$0 = $cond;$neg$0 = 0;
 }
 }
 $sub31 = (($c$0) + -48)|0;
 $cmp32 = ($sub31>>>0)>(9);
 if ($cmp32) {
  $8 = HEAP32[$shend>>2]|0;
  $tobool36 = ($8|0)==(0|0);
  if ($tobool36) {
   $46 = -2147483648;$47 = 0;
  } else {
   $9 = HEAP32[$rpos>>2]|0;
   $incdec$ptr39 = ((($9)) + -1|0);
   HEAP32[$rpos>>2] = $incdec$ptr39;
   $46 = -2147483648;$47 = 0;
  }
 } else {
  $c$147 = $c$0;$x$048 = 0;
  while(1) {
   $mul = ($x$048*10)|0;
   $add = (($c$147) + -48)|0;
   $sub48 = (($add) + ($mul))|0;
   $10 = HEAP32[$rpos>>2]|0;
   $11 = HEAP32[$shend>>2]|0;
   $cmp51 = ($10>>>0)<($11>>>0);
   if ($cmp51) {
    $incdec$ptr55 = ((($10)) + 1|0);
    HEAP32[$rpos>>2] = $incdec$ptr55;
    $12 = HEAP8[$10>>0]|0;
    $conv56 = $12&255;
    $c$1$be = $conv56;
   } else {
    $call58 = (___shgetc($f)|0);
    $c$1$be = $call58;
   }
   $sub43 = (($c$1$be) + -48)|0;
   $cmp44 = ($sub43>>>0)<(10);
   $cmp46 = ($sub48|0)<(214748364);
   $13 = $cmp44 & $cmp46;
   if ($13) {
    $c$147 = $c$1$be;$x$048 = $sub48;
   } else {
    break;
   }
  }
  $14 = ($sub48|0)<(0);
  $15 = $14 << 31 >> 31;
  $sub6339 = (($c$1$be) + -48)|0;
  $cmp6440 = ($sub6339>>>0)<(10);
  if ($cmp6440) {
   $17 = $sub48;$18 = $15;$c$241 = $c$1$be;
   while(1) {
    $19 = (___muldi3(($17|0),($18|0),10,0)|0);
    $20 = tempRet0;
    $21 = ($c$241|0)<(0);
    $22 = $21 << 31 >> 31;
    $23 = (_i64Add(($c$241|0),($22|0),-48,-1)|0);
    $24 = tempRet0;
    $25 = (_i64Add(($23|0),($24|0),($19|0),($20|0))|0);
    $26 = tempRet0;
    $27 = HEAP32[$rpos>>2]|0;
    $28 = HEAP32[$shend>>2]|0;
    $cmp78 = ($27>>>0)<($28>>>0);
    if ($cmp78) {
     $incdec$ptr82 = ((($27)) + 1|0);
     HEAP32[$rpos>>2] = $incdec$ptr82;
     $29 = HEAP8[$27>>0]|0;
     $conv83 = $29&255;
     $c$2$be = $conv83;
    } else {
     $call85 = (___shgetc($f)|0);
     $c$2$be = $call85;
    }
    $sub63 = (($c$2$be) + -48)|0;
    $cmp64 = ($sub63>>>0)<(10);
    $30 = ($26|0)<(21474836);
    $31 = ($25>>>0)<(2061584302);
    $32 = ($26|0)==(21474836);
    $33 = $32 & $31;
    $34 = $30 | $33;
    $35 = $cmp64 & $34;
    if ($35) {
     $17 = $25;$18 = $26;$c$241 = $c$2$be;
    } else {
     $40 = $25;$41 = $26;$c$2$lcssa = $c$2$be;
     break;
    }
   }
  } else {
   $40 = $sub48;$41 = $15;$c$2$lcssa = $c$1$be;
  }
  $sub9037 = (($c$2$lcssa) + -48)|0;
  $cmp9138 = ($sub9037>>>0)<(10);
  $16 = HEAP32[$shend>>2]|0;
  if ($cmp9138) {
   $37 = $16;
   while(1) {
    $36 = HEAP32[$rpos>>2]|0;
    $cmp97 = ($36>>>0)<($37>>>0);
    if ($cmp97) {
     $incdec$ptr101 = ((($36)) + 1|0);
     HEAP32[$rpos>>2] = $incdec$ptr101;
     $38 = HEAP8[$36>>0]|0;
     $conv102 = $38&255;
     $48 = $37;$c$3$be = $conv102;
    } else {
     $call104 = (___shgetc($f)|0);
     $$pre = HEAP32[$shend>>2]|0;
     $48 = $$pre;$c$3$be = $call104;
    }
    $sub90 = (($c$3$be) + -48)|0;
    $cmp91 = ($sub90>>>0)<(10);
    if ($cmp91) {
     $37 = $48;
    } else {
     $$lcssa = $48;
     break;
    }
   }
  } else {
   $$lcssa = $16;
  }
  $tobool109 = ($$lcssa|0)==(0|0);
  if (!($tobool109)) {
   $39 = HEAP32[$rpos>>2]|0;
   $incdec$ptr112 = ((($39)) + -1|0);
   HEAP32[$rpos>>2] = $incdec$ptr112;
  }
  $tobool115 = ($neg$0|0)!=(0);
  $42 = (_i64Subtract(0,0,($40|0),($41|0))|0);
  $43 = tempRet0;
  $44 = $tobool115 ? $42 : $40;
  $45 = $tobool115 ? $43 : $41;
  $46 = $45;$47 = $44;
 }
 tempRet0 = ($46);
 return ($47|0);
}
function _scalbn($x,$n) {
 $x = +$x;
 $n = $n|0;
 var $$add14 = 0, $$add14$add = 0, $$sub4 = 0, $$sub4$sub = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0.0, $add = 0, $add14 = 0, $add21 = 0, $cmp = 0, $cmp1 = 0, $cmp11 = 0, $cmp8 = 0, $mul = 0.0, $mul10 = 0.0, $mul13 = 0.0, $mul13$mul10 = 0.0;
 var $mul22 = 0.0, $mul3 = 0.0, $mul3$mul = 0.0, $n$addr$0 = 0, $sub = 0, $sub4 = 0, $y$0 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $cmp = ($n|0)>(1023);
 if ($cmp) {
  $mul = $x * 8.9884656743115795E+307;
  $sub = (($n) + -1023)|0;
  $cmp1 = ($sub|0)>(1023);
  $mul3 = $mul * 8.9884656743115795E+307;
  $sub4 = (($n) + -2046)|0;
  $0 = ($sub4|0)<(1023);
  $$sub4 = $0 ? $sub4 : 1023;
  $$sub4$sub = $cmp1 ? $$sub4 : $sub;
  $mul3$mul = $cmp1 ? $mul3 : $mul;
  $n$addr$0 = $$sub4$sub;$y$0 = $mul3$mul;
 } else {
  $cmp8 = ($n|0)<(-1022);
  if ($cmp8) {
   $mul10 = $x * 2.2250738585072014E-308;
   $add = (($n) + 1022)|0;
   $cmp11 = ($add|0)<(-1022);
   $mul13 = $mul10 * 2.2250738585072014E-308;
   $add14 = (($n) + 2044)|0;
   $1 = ($add14|0)>(-1022);
   $$add14 = $1 ? $add14 : -1022;
   $$add14$add = $cmp11 ? $$add14 : $add;
   $mul13$mul10 = $cmp11 ? $mul13 : $mul10;
   $n$addr$0 = $$add14$add;$y$0 = $mul13$mul10;
  } else {
   $n$addr$0 = $n;$y$0 = $x;
  }
 }
 $add21 = (($n$addr$0) + 1023)|0;
 $2 = (_bitshift64Shl(($add21|0),0,52)|0);
 $3 = tempRet0;
 HEAP32[tempDoublePtr>>2] = $2;HEAP32[tempDoublePtr+4>>2] = $3;$4 = +HEAPF64[tempDoublePtr>>3];
 $mul22 = $y$0 * $4;
 return (+$mul22);
}
function _copysignl($x,$y) {
 $x = +$x;
 $y = +$y;
 var $call = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = (+_copysign($x,$y));
 return (+$call);
}
function _fmodl($x,$y) {
 $x = +$x;
 $y = +$y;
 var $call = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = (+_fmod($x,$y));
 return (+$call);
}
function _scalbnl($x,$n) {
 $x = +$x;
 $n = $n|0;
 var $call = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = (+_scalbn($x,$n));
 return (+$call);
}
function _fmod($x,$y) {
 $x = +$x;
 $y = +$y;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0.0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0;
 var $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $add = 0, $add128 = 0;
 var $add68 = 0, $cmp119 = 0, $cmp27 = 0, $cmp79 = 0, $cmp7966 = 0, $cmp85$lcssa = 0, $cmp8572 = 0, $conv = 0, $conv5 = 0, $dec = 0, $dec117 = 0, $dec64 = 0, $dec96 = 0, $div = 0.0, $ex$0$lcssa = 0, $ex$082 = 0, $ex$1 = 0, $ex$2$lcssa = 0, $ex$269 = 0, $ex$3$lcssa = 0;
 var $ex$363 = 0, $ey$0$lcssa = 0, $ey$078 = 0, $ey$1$ph = 0, $mul = 0.0, $mul107 = 0.0, $mul42 = 0.0, $mul42$x = 0.0, $mul91 = 0.0, $or$cond = 0, $retval$0 = 0.0, $tobool = 0, $tobool54 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAPF64[tempDoublePtr>>3] = $x;$0 = HEAP32[tempDoublePtr>>2]|0;
 $1 = HEAP32[tempDoublePtr+4>>2]|0;
 HEAPF64[tempDoublePtr>>3] = $y;$2 = HEAP32[tempDoublePtr>>2]|0;
 $3 = HEAP32[tempDoublePtr+4>>2]|0;
 $4 = (_bitshift64Lshr(($0|0),($1|0),52)|0);
 $5 = tempRet0;
 $conv = $4 & 2047;
 $6 = (_bitshift64Lshr(($2|0),($3|0),52)|0);
 $7 = tempRet0;
 $conv5 = $6 & 2047;
 $8 = $1 & -2147483648;
 $9 = (_bitshift64Shl(($2|0),($3|0),1)|0);
 $10 = tempRet0;
 $11 = ($9|0)==(0);
 $12 = ($10|0)==(0);
 $13 = $11 & $12;
 L1: do {
  if ($13) {
   label = 3;
  } else {
   $14 = (___DOUBLE_BITS_272($y)|0);
   $15 = tempRet0;
   $16 = $15 & 2147483647;
   $17 = ($16>>>0)>(2146435072);
   $18 = ($14>>>0)>(0);
   $19 = ($16|0)==(2146435072);
   $20 = $19 & $18;
   $21 = $17 | $20;
   $cmp27 = ($conv|0)==(2047);
   $or$cond = $cmp27 | $21;
   if ($or$cond) {
    label = 3;
   } else {
    $22 = (_bitshift64Shl(($0|0),($1|0),1)|0);
    $23 = tempRet0;
    $24 = ($23>>>0)>($10>>>0);
    $25 = ($22>>>0)>($9>>>0);
    $26 = ($23|0)==($10|0);
    $27 = $26 & $25;
    $28 = $24 | $27;
    if (!($28)) {
     $29 = ($22|0)==($9|0);
     $30 = ($23|0)==($10|0);
     $31 = $29 & $30;
     $mul42 = $x * 0.0;
     $mul42$x = $31 ? $mul42 : $x;
     return (+$mul42$x);
    }
    $tobool = ($conv|0)==(0);
    if ($tobool) {
     $32 = (_bitshift64Shl(($0|0),($1|0),12)|0);
     $33 = tempRet0;
     $34 = ($33|0)>(-1);
     $35 = ($32>>>0)>(4294967295);
     $36 = ($33|0)==(-1);
     $37 = $36 & $35;
     $38 = $34 | $37;
     if ($38) {
      $39 = $32;$40 = $33;$ex$082 = 0;
      while(1) {
       $dec = (($ex$082) + -1)|0;
       $41 = (_bitshift64Shl(($39|0),($40|0),1)|0);
       $42 = tempRet0;
       $43 = ($42|0)>(-1);
       $44 = ($41>>>0)>(4294967295);
       $45 = ($42|0)==(-1);
       $46 = $45 & $44;
       $47 = $43 | $46;
       if ($47) {
        $39 = $41;$40 = $42;$ex$082 = $dec;
       } else {
        $ex$0$lcssa = $dec;
        break;
       }
      }
     } else {
      $ex$0$lcssa = 0;
     }
     $add = (1 - ($ex$0$lcssa))|0;
     $48 = (_bitshift64Shl(($0|0),($1|0),($add|0))|0);
     $49 = tempRet0;
     $72 = $48;$73 = $49;$ex$1 = $ex$0$lcssa;
    } else {
     $50 = $1 & 1048575;
     $51 = $50 | 1048576;
     $72 = $0;$73 = $51;$ex$1 = $conv;
    }
    $tobool54 = ($conv5|0)==(0);
    if ($tobool54) {
     $52 = (_bitshift64Shl(($2|0),($3|0),12)|0);
     $53 = tempRet0;
     $54 = ($53|0)>(-1);
     $55 = ($52>>>0)>(4294967295);
     $56 = ($53|0)==(-1);
     $57 = $56 & $55;
     $58 = $54 | $57;
     if ($58) {
      $59 = $52;$60 = $53;$ey$078 = 0;
      while(1) {
       $dec64 = (($ey$078) + -1)|0;
       $61 = (_bitshift64Shl(($59|0),($60|0),1)|0);
       $62 = tempRet0;
       $63 = ($62|0)>(-1);
       $64 = ($61>>>0)>(4294967295);
       $65 = ($62|0)==(-1);
       $66 = $65 & $64;
       $67 = $63 | $66;
       if ($67) {
        $59 = $61;$60 = $62;$ey$078 = $dec64;
       } else {
        $ey$0$lcssa = $dec64;
        break;
       }
      }
     } else {
      $ey$0$lcssa = 0;
     }
     $add68 = (1 - ($ey$0$lcssa))|0;
     $68 = (_bitshift64Shl(($2|0),($3|0),($add68|0))|0);
     $69 = tempRet0;
     $74 = $68;$75 = $69;$ey$1$ph = $ey$0$lcssa;
    } else {
     $70 = $3 & 1048575;
     $71 = $70 | 1048576;
     $74 = $2;$75 = $71;$ey$1$ph = $conv5;
    }
    $cmp7966 = ($ex$1|0)>($ey$1$ph|0);
    $76 = (_i64Subtract(($72|0),($73|0),($74|0),($75|0))|0);
    $77 = tempRet0;
    $78 = ($77|0)>(-1);
    $79 = ($76>>>0)>(4294967295);
    $80 = ($77|0)==(-1);
    $81 = $80 & $79;
    $82 = $78 | $81;
    L23: do {
     if ($cmp7966) {
      $134 = $72;$135 = $73;$84 = $76;$86 = $77;$cmp8572 = $82;$ex$269 = $ex$1;
      while(1) {
       if ($cmp8572) {
        $83 = ($84|0)==(0);
        $85 = ($86|0)==(0);
        $87 = $83 & $85;
        if ($87) {
         break;
        } else {
         $88 = $84;$89 = $86;
        }
       } else {
        $88 = $134;$89 = $135;
       }
       $90 = (_bitshift64Shl(($88|0),($89|0),1)|0);
       $91 = tempRet0;
       $dec96 = (($ex$269) + -1)|0;
       $cmp79 = ($dec96|0)>($ey$1$ph|0);
       $92 = (_i64Subtract(($90|0),($91|0),($74|0),($75|0))|0);
       $93 = tempRet0;
       $94 = ($93|0)>(-1);
       $95 = ($92>>>0)>(4294967295);
       $96 = ($93|0)==(-1);
       $97 = $96 & $95;
       $98 = $94 | $97;
       if ($cmp79) {
        $134 = $90;$135 = $91;$84 = $92;$86 = $93;$cmp8572 = $98;$ex$269 = $dec96;
       } else {
        $100 = $92;$102 = $93;$136 = $90;$137 = $91;$cmp85$lcssa = $98;$ex$2$lcssa = $dec96;
        break L23;
       }
      }
      $mul91 = $x * 0.0;
      $retval$0 = $mul91;
      break L1;
     } else {
      $100 = $76;$102 = $77;$136 = $72;$137 = $73;$cmp85$lcssa = $82;$ex$2$lcssa = $ex$1;
     }
    } while(0);
    if ($cmp85$lcssa) {
     $99 = ($100|0)==(0);
     $101 = ($102|0)==(0);
     $103 = $99 & $101;
     if ($103) {
      $mul107 = $x * 0.0;
      $retval$0 = $mul107;
      break;
     } else {
      $105 = $102;$107 = $100;
     }
    } else {
     $105 = $137;$107 = $136;
    }
    $104 = ($105>>>0)<(1048576);
    $106 = ($107>>>0)<(0);
    $108 = ($105|0)==(1048576);
    $109 = $108 & $106;
    $110 = $104 | $109;
    if ($110) {
     $111 = $107;$112 = $105;$ex$363 = $ex$2$lcssa;
     while(1) {
      $113 = (_bitshift64Shl(($111|0),($112|0),1)|0);
      $114 = tempRet0;
      $dec117 = (($ex$363) + -1)|0;
      $115 = ($114>>>0)<(1048576);
      $116 = ($113>>>0)<(0);
      $117 = ($114|0)==(1048576);
      $118 = $117 & $116;
      $119 = $115 | $118;
      if ($119) {
       $111 = $113;$112 = $114;$ex$363 = $dec117;
      } else {
       $120 = $113;$121 = $114;$ex$3$lcssa = $dec117;
       break;
      }
     }
    } else {
     $120 = $107;$121 = $105;$ex$3$lcssa = $ex$2$lcssa;
    }
    $cmp119 = ($ex$3$lcssa|0)>(0);
    if ($cmp119) {
     $122 = (_i64Add(($120|0),($121|0),0,-1048576)|0);
     $123 = tempRet0;
     $124 = (_bitshift64Shl(($ex$3$lcssa|0),0,52)|0);
     $125 = tempRet0;
     $126 = $122 | $124;
     $127 = $123 | $125;
     $131 = $127;$132 = $126;
    } else {
     $add128 = (1 - ($ex$3$lcssa))|0;
     $128 = (_bitshift64Lshr(($120|0),($121|0),($add128|0))|0);
     $129 = tempRet0;
     $131 = $129;$132 = $128;
    }
    $130 = $131 | $8;
    HEAP32[tempDoublePtr>>2] = $132;HEAP32[tempDoublePtr+4>>2] = $130;$133 = +HEAPF64[tempDoublePtr>>3];
    $retval$0 = $133;
   }
  }
 } while(0);
 if ((label|0) == 3) {
  $mul = $x * $y;
  $div = $mul / $mul;
  $retval$0 = $div;
 }
 return (+$retval$0);
}
function ___DOUBLE_BITS_272($__f) {
 $__f = +$__f;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAPF64[tempDoublePtr>>3] = $__f;$0 = HEAP32[tempDoublePtr>>2]|0;
 $1 = HEAP32[tempDoublePtr+4>>2]|0;
 tempRet0 = ($1);
 return ($0|0);
}
function _catclose($catd) {
 $catd = $catd|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 0;
}
function _catgets($catd,$set_id,$msg_id,$s) {
 $catd = $catd|0;
 $set_id = $set_id|0;
 $msg_id = $msg_id|0;
 $s = $s|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return ($s|0);
}
function _catopen($name,$oflag) {
 $name = $name|0;
 $oflag = $oflag|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return ((-1)|0);
}
function _strlen($s) {
 $s = $s|0;
 var $$pn = 0, $$pre = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $and = 0, $and3 = 0, $incdec$ptr = 0, $incdec$ptr1323 = 0, $incdec$ptr7 = 0, $lnot = 0, $neg = 0, $rem = 0, $rem13 = 0, $s$addr$0$lcssa = 0, $s$addr$015 = 0, $s$addr$1$lcssa = 0;
 var $sub = 0, $sub$ptr$lhs$cast15 = 0, $sub$ptr$lhs$cast15$sink = 0, $sub$ptr$sub17 = 0, $tobool = 0, $tobool1 = 0, $tobool10 = 0, $tobool1021 = 0, $tobool14 = 0, $w$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $s;
 $rem13 = $0 & 3;
 $tobool14 = ($rem13|0)==(0);
 L1: do {
  if ($tobool14) {
   $s$addr$0$lcssa = $s;
   label = 4;
  } else {
   $5 = $0;$s$addr$015 = $s;
   while(1) {
    $1 = HEAP8[$s$addr$015>>0]|0;
    $tobool1 = ($1<<24>>24)==(0);
    if ($tobool1) {
     $sub$ptr$lhs$cast15$sink = $5;
     break L1;
    }
    $incdec$ptr = ((($s$addr$015)) + 1|0);
    $2 = $incdec$ptr;
    $rem = $2 & 3;
    $tobool = ($rem|0)==(0);
    if ($tobool) {
     $s$addr$0$lcssa = $incdec$ptr;
     label = 4;
     break;
    } else {
     $5 = $2;$s$addr$015 = $incdec$ptr;
    }
   }
  }
 } while(0);
 if ((label|0) == 4) {
  $w$0 = $s$addr$0$lcssa;
  while(1) {
   $3 = HEAP32[$w$0>>2]|0;
   $sub = (($3) + -16843009)|0;
   $neg = $3 & -2139062144;
   $and = $neg ^ -2139062144;
   $and3 = $and & $sub;
   $lnot = ($and3|0)==(0);
   $incdec$ptr7 = ((($w$0)) + 4|0);
   if ($lnot) {
    $w$0 = $incdec$ptr7;
   } else {
    break;
   }
  }
  $4 = $3&255;
  $tobool1021 = ($4<<24>>24)==(0);
  if ($tobool1021) {
   $s$addr$1$lcssa = $w$0;
  } else {
   $$pn = $w$0;
   while(1) {
    $incdec$ptr1323 = ((($$pn)) + 1|0);
    $$pre = HEAP8[$incdec$ptr1323>>0]|0;
    $tobool10 = ($$pre<<24>>24)==(0);
    if ($tobool10) {
     $s$addr$1$lcssa = $incdec$ptr1323;
     break;
    } else {
     $$pn = $incdec$ptr1323;
    }
   }
  }
  $sub$ptr$lhs$cast15 = $s$addr$1$lcssa;
  $sub$ptr$lhs$cast15$sink = $sub$ptr$lhs$cast15;
 }
 $sub$ptr$sub17 = (($sub$ptr$lhs$cast15$sink) - ($0))|0;
 return ($sub$ptr$sub17|0);
}
function ___munmap($start,$len) {
 $start = $start|0;
 $len = $len|0;
 var $0 = 0, $call = 0, $call1 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 _dummy_413();
 $0 = $start;
 HEAP32[$vararg_buffer>>2] = $0;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $len;
 $call = (___syscall91(91,($vararg_buffer|0))|0);
 $call1 = (___syscall_ret($call)|0);
 STACKTOP = sp;return ($call1|0);
}
function ___strchrnul($s,$c) {
 $s = $s|0;
 $c = $c|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $add$ptr = 0, $and = 0, $and14 = 0, $and15 = 0, $and29 = 0, $and9 = 0, $and930 = 0, $call = 0, $cmp = 0, $cmp26 = 0, $conv1 = 0;
 var $incdec$ptr = 0, $incdec$ptr19 = 0, $incdec$ptr31 = 0, $lnot = 0, $mul = 0, $neg = 0, $neg13 = 0, $neg28 = 0, $or$cond = 0, $or$cond24 = 0, $rem = 0, $rem34 = 0, $retval$0 = 0, $s$addr$0$lcssa = 0, $s$addr$036 = 0, $s$addr$1 = 0, $sub = 0, $sub11 = 0, $sub27 = 0, $tobool = 0;
 var $tobool10 = 0, $tobool1031 = 0, $tobool2 = 0, $tobool23 = 0, $tobool235 = 0, $tobool3 = 0, $w$0$lcssa = 0, $w$032 = 0, $xor = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $conv1 = $c & 255;
 $tobool = ($conv1|0)==(0);
 L1: do {
  if ($tobool) {
   $call = (_strlen($s)|0);
   $add$ptr = (($s) + ($call)|0);
   $retval$0 = $add$ptr;
  } else {
   $0 = $s;
   $rem34 = $0 & 3;
   $tobool235 = ($rem34|0)==(0);
   if ($tobool235) {
    $s$addr$0$lcssa = $s;
   } else {
    $1 = $c&255;
    $s$addr$036 = $s;
    while(1) {
     $2 = HEAP8[$s$addr$036>>0]|0;
     $tobool3 = ($2<<24>>24)==(0);
     $cmp = ($2<<24>>24)==($1<<24>>24);
     $or$cond = $tobool3 | $cmp;
     if ($or$cond) {
      $retval$0 = $s$addr$036;
      break L1;
     }
     $incdec$ptr = ((($s$addr$036)) + 1|0);
     $3 = $incdec$ptr;
     $rem = $3 & 3;
     $tobool2 = ($rem|0)==(0);
     if ($tobool2) {
      $s$addr$0$lcssa = $incdec$ptr;
      break;
     } else {
      $s$addr$036 = $incdec$ptr;
     }
    }
   }
   $mul = Math_imul($conv1, 16843009)|0;
   $4 = HEAP32[$s$addr$0$lcssa>>2]|0;
   $sub27 = (($4) + -16843009)|0;
   $neg28 = $4 & -2139062144;
   $and29 = $neg28 ^ -2139062144;
   $and930 = $and29 & $sub27;
   $tobool1031 = ($and930|0)==(0);
   L10: do {
    if ($tobool1031) {
     $5 = $4;$w$032 = $s$addr$0$lcssa;
     while(1) {
      $xor = $5 ^ $mul;
      $sub11 = (($xor) + -16843009)|0;
      $neg13 = $xor & -2139062144;
      $and14 = $neg13 ^ -2139062144;
      $and15 = $and14 & $sub11;
      $lnot = ($and15|0)==(0);
      if (!($lnot)) {
       $w$0$lcssa = $w$032;
       break L10;
      }
      $incdec$ptr19 = ((($w$032)) + 4|0);
      $6 = HEAP32[$incdec$ptr19>>2]|0;
      $sub = (($6) + -16843009)|0;
      $neg = $6 & -2139062144;
      $and = $neg ^ -2139062144;
      $and9 = $and & $sub;
      $tobool10 = ($and9|0)==(0);
      if ($tobool10) {
       $5 = $6;$w$032 = $incdec$ptr19;
      } else {
       $w$0$lcssa = $incdec$ptr19;
       break;
      }
     }
    } else {
     $w$0$lcssa = $s$addr$0$lcssa;
    }
   } while(0);
   $7 = $c&255;
   $s$addr$1 = $w$0$lcssa;
   while(1) {
    $8 = HEAP8[$s$addr$1>>0]|0;
    $tobool23 = ($8<<24>>24)==(0);
    $cmp26 = ($8<<24>>24)==($7<<24>>24);
    $or$cond24 = $tobool23 | $cmp26;
    $incdec$ptr31 = ((($s$addr$1)) + 1|0);
    if ($or$cond24) {
     $retval$0 = $s$addr$1;
     break;
    } else {
     $s$addr$1 = $incdec$ptr31;
    }
   }
  }
 } while(0);
 return ($retval$0|0);
}
function _dummy_413() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function _freelocale($l) {
 $l = $l|0;
 var $call = 0, $tobool = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = (___loc_is_allocated($l)|0);
 $tobool = ($call|0)==(0);
 if (!($tobool)) {
  _free($l);
 }
 return;
}
function ___loc_is_allocated($loc) {
 $loc = $loc|0;
 var $cmp = 0, $cmp1 = 0, $cmp1$ = 0, $land$ext = 0, $or$cond = 0, $tobool = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $tobool = ($loc|0)!=(0|0);
 $cmp = ($loc|0)!=(19528|0);
 $or$cond = $tobool & $cmp;
 $cmp1 = ($loc|0)!=(2400|0);
 $cmp1$ = $cmp1 & $or$cond;
 $land$ext = $cmp1$&1;
 return ($land$ext|0);
}
function _mbrtowc($wc,$src,$n,$st) {
 $wc = $wc|0;
 $src = $src|0;
 $n = $n|0;
 $st = $st|0;
 var $$st = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $add = 0, $and = 0, $arrayidx38 = 0, $c$036 = 0, $c$1 = 0, $c$2 = 0, $call = 0, $call71 = 0, $cmp = 0;
 var $cmp32 = 0, $cmp65 = 0, $conv = 0, $conv29 = 0, $conv31 = 0, $conv42 = 0, $conv52 = 0, $dec = 0, $dec55 = 0, $dummy = 0, $dummy$wc = 0, $incdec$ptr = 0, $incdec$ptr51 = 0, $lnot$ext = 0, $locale = 0, $n$addr$035 = 0, $n$addr$1 = 0, $not$tobool21 = 0, $or = 0, $or54 = 0;
 var $retval$0 = 0, $s$037 = 0, $s$1 = 0, $shl = 0, $shr32 = 0, $shr46 = 0, $sub = 0, $sub43 = 0, $sub53 = 0, $sub59 = 0, $tobool = 0, $tobool1 = 0, $tobool10 = 0, $tobool13 = 0, $tobool18 = 0, $tobool3 = 0, $tobool40 = 0, $tobool48 = 0, $tobool57 = 0, $tobool6 = 0;
 var $tobool61 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $dummy = sp;
 $tobool = ($st|0)==(0|0);
 $$st = $tobool ? 19552 : $st;
 $0 = HEAP32[$$st>>2]|0;
 $tobool1 = ($src|0)==(0|0);
 L1: do {
  if ($tobool1) {
   $tobool3 = ($0|0)==(0);
   if ($tobool3) {
    $retval$0 = 0;
   } else {
    label = 17;
   }
  } else {
   $tobool6 = ($wc|0)==(0|0);
   $dummy$wc = $tobool6 ? $dummy : $wc;
   $tobool10 = ($n|0)==(0);
   if ($tobool10) {
    $retval$0 = -2;
   } else {
    $tobool13 = ($0|0)==(0);
    if ($tobool13) {
     $1 = HEAP8[$src>>0]|0;
     $cmp = ($1<<24>>24)>(-1);
     if ($cmp) {
      $conv = $1&255;
      HEAP32[$dummy$wc>>2] = $conv;
      $tobool18 = ($1<<24>>24)!=(0);
      $lnot$ext = $tobool18&1;
      $retval$0 = $lnot$ext;
      break;
     }
     $call = (___pthread_self_422()|0);
     $locale = ((($call)) + 188|0);
     $2 = HEAP32[$locale>>2]|0;
     $3 = HEAP32[$2>>2]|0;
     $not$tobool21 = ($3|0)==(0|0);
     $4 = HEAP8[$src>>0]|0;
     if ($not$tobool21) {
      $conv29 = $4 << 24 >> 24;
      $and = $conv29 & 57343;
      HEAP32[$dummy$wc>>2] = $and;
      $retval$0 = 1;
      break;
     }
     $conv31 = $4&255;
     $sub = (($conv31) + -194)|0;
     $cmp32 = ($sub>>>0)>(50);
     if ($cmp32) {
      label = 17;
      break;
     }
     $incdec$ptr = ((($src)) + 1|0);
     $arrayidx38 = (2424 + ($sub<<2)|0);
     $5 = HEAP32[$arrayidx38>>2]|0;
     $dec = (($n) + -1)|0;
     $tobool40 = ($dec|0)==(0);
     if ($tobool40) {
      $c$2 = $5;
     } else {
      $c$036 = $5;$n$addr$035 = $dec;$s$037 = $incdec$ptr;
      label = 11;
     }
    } else {
     $c$036 = $0;$n$addr$035 = $n;$s$037 = $src;
     label = 11;
    }
    L14: do {
     if ((label|0) == 11) {
      $6 = HEAP8[$s$037>>0]|0;
      $conv42 = $6&255;
      $shr32 = $conv42 >>> 3;
      $sub43 = (($shr32) + -16)|0;
      $shr46 = $c$036 >> 26;
      $add = (($shr32) + ($shr46))|0;
      $or = $sub43 | $add;
      $tobool48 = ($or>>>0)>(7);
      if ($tobool48) {
       label = 17;
       break L1;
      } else {
       $7 = $6;$c$1 = $c$036;$n$addr$1 = $n$addr$035;$s$1 = $s$037;
      }
      while(1) {
       $shl = $c$1 << 6;
       $incdec$ptr51 = ((($s$1)) + 1|0);
       $conv52 = $7&255;
       $sub53 = (($conv52) + -128)|0;
       $or54 = $sub53 | $shl;
       $dec55 = (($n$addr$1) + -1)|0;
       $tobool57 = ($or54|0)<(0);
       if (!($tobool57)) {
        break;
       }
       $tobool61 = ($dec55|0)==(0);
       if ($tobool61) {
        $c$2 = $or54;
        break L14;
       }
       $8 = HEAP8[$incdec$ptr51>>0]|0;
       $9 = $8 & -64;
       $cmp65 = ($9<<24>>24)==(-128);
       if ($cmp65) {
        $7 = $8;$c$1 = $or54;$n$addr$1 = $dec55;$s$1 = $incdec$ptr51;
       } else {
        label = 17;
        break L1;
       }
      }
      HEAP32[$$st>>2] = 0;
      HEAP32[$dummy$wc>>2] = $or54;
      $sub59 = (($n) - ($dec55))|0;
      $retval$0 = $sub59;
      break L1;
     }
    } while(0);
    HEAP32[$$st>>2] = $c$2;
    $retval$0 = -2;
   }
  }
 } while(0);
 if ((label|0) == 17) {
  HEAP32[$$st>>2] = 0;
  $call71 = (___errno_location()|0);
  HEAP32[$call71>>2] = 84;
  $retval$0 = -1;
 }
 STACKTOP = sp;return ($retval$0|0);
}
function ___pthread_self_422() {
 var $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = (_pthread_self()|0);
 return ($call|0);
}
function _isdigit_l($c,$l) {
 $c = $c|0;
 $l = $l|0;
 var $0 = 0, $isdigit = 0, $isdigittmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $isdigittmp = (($c) + -48)|0;
 $isdigit = ($isdigittmp>>>0)<(10);
 $0 = $isdigit&1;
 return ($0|0);
}
function _isxdigit_l($c,$l) {
 $c = $c|0;
 $l = $l|0;
 var $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = (_isxdigit($c)|0);
 return ($call|0);
}
function ___get_locale($cat,$val) {
 $cat = $cat|0;
 $val = $val|0;
 var $$pre88 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__c_dot_utf8$new$4 = 0, $add = 0, $add$ptr104 = 0, $add$ptr131 = 0, $add105 = 0, $arraydecay = 0, $arraydecay63 = 0, $arraydecay74 = 0, $arrayidx102 = 0, $arrayidx106 = 0, $arrayidx121 = 0, $arrayidx144 = 0, $arrayidx16 = 0, $arrayidx28 = 0, $arrayidx38 = 0, $arrayidx53 = 0;
 var $buf = 0, $call = 0, $call108 = 0, $call111 = 0, $call136 = 0, $call3 = 0, $call41 = 0, $call44 = 0, $call64 = 0, $call75 = 0, $call84 = 0, $call9 = 0, $call91 = 0, $cmp = 0, $cmp149 = 0, $cmp25 = 0, $cmp35 = 0, $cmp50 = 0, $cmp55 = 0, $cmp97 = 0;
 var $inc = 0, $lnot = 0, $lnot$ext$neg = 0, $lnot$ext130 = 0, $map_size = 0, $map_size117 = 0, $map_size140 = 0, $n$0$lcssa = 0, $n$085 = 0, $name118 = 0, $name141 = 0, $new$4 = 0, $next = 0, $next122 = 0, $next145 = 0, $next80 = 0, $or$cond = 0, $p$084 = 0, $p$182 = 0, $path$180 = 0;
 var $retval$0 = 0, $sub = 0, $sub$ptr$lhs$cast = 0, $sub$ptr$rhs$cast = 0, $sub$ptr$sub = 0, $sub96 = 0, $tobool = 0, $tobool1 = 0, $tobool10 = 0, $tobool109 = 0, $tobool112 = 0, $tobool126 = 0, $tobool13 = 0, $tobool137 = 0, $tobool147 = 0, $tobool2 = 0, $tobool30 = 0, $tobool39 = 0, $tobool4 = 0, $tobool42 = 0;
 var $tobool61 = 0, $tobool6183 = 0, $tobool65 = 0, $tobool7 = 0, $tobool71 = 0, $tobool7181 = 0, $tobool76 = 0, $tobool82 = 0, $tobool86 = 0, $tobool89 = 0, $tobool8979 = 0, $tobool92 = 0, $val$addr$1 = 0, $val$addr$290 = 0, $val$addr$291 = 0, $val$addr$292 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 272|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(272|0);
 $buf = sp + 8|0;
 $map_size = sp;
 $0 = HEAP8[$val>>0]|0;
 $tobool = ($0<<24>>24)==(0);
 do {
  if ($tobool) {
   $call = (_getenv((15137|0))|0);
   $tobool1 = ($call|0)==(0|0);
   if (!($tobool1)) {
    $1 = HEAP8[$call>>0]|0;
    $tobool2 = ($1<<24>>24)==(0);
    if (!($tobool2)) {
     $val$addr$1 = $call;
     break;
    }
   }
   $arraydecay = (15144 + (($cat*12)|0)|0);
   $call3 = (_getenv(($arraydecay|0))|0);
   $tobool4 = ($call3|0)==(0|0);
   if (!($tobool4)) {
    $2 = HEAP8[$call3>>0]|0;
    $tobool7 = ($2<<24>>24)==(0);
    if (!($tobool7)) {
     $val$addr$1 = $call3;
     break;
    }
   }
   $call9 = (_getenv((15216|0))|0);
   $tobool10 = ($call9|0)==(0|0);
   if (!($tobool10)) {
    $3 = HEAP8[$call9>>0]|0;
    $tobool13 = ($3<<24>>24)==(0);
    if (!($tobool13)) {
     $val$addr$1 = $call9;
     break;
    }
   }
   $val$addr$1 = 15221;
  } else {
   $val$addr$1 = $val;
  }
 } while(0);
 $n$085 = 0;
 L13: while(1) {
  $arrayidx16 = (($val$addr$1) + ($n$085)|0);
  $4 = HEAP8[$arrayidx16>>0]|0;
  switch ($4<<24>>24) {
  case 47: case 0:  {
   $n$0$lcssa = $n$085;
   break L13;
   break;
  }
  default: {
  }
  }
  $inc = (($n$085) + 1)|0;
  $cmp = ($inc>>>0)<(15);
  if ($cmp) {
   $n$085 = $inc;
  } else {
   $n$0$lcssa = $inc;
   break;
  }
 }
 $5 = HEAP8[$val$addr$1>>0]|0;
 $cmp25 = ($5<<24>>24)==(46);
 if ($cmp25) {
  $val$addr$290 = 15221;
  label = 15;
 } else {
  $arrayidx28 = (($val$addr$1) + ($n$0$lcssa)|0);
  $6 = HEAP8[$arrayidx28>>0]|0;
  $tobool30 = ($6<<24>>24)==(0);
  if ($tobool30) {
   $cmp35 = ($5<<24>>24)==(67);
   if ($cmp35) {
    $val$addr$290 = $val$addr$1;
    label = 15;
   } else {
    $val$addr$291 = $val$addr$1;
    label = 16;
   }
  } else {
   $val$addr$290 = 15221;
   label = 15;
  }
 }
 if ((label|0) == 15) {
  $arrayidx38 = ((($val$addr$290)) + 1|0);
  $7 = HEAP8[$arrayidx38>>0]|0;
  $tobool39 = ($7<<24>>24)==(0);
  if ($tobool39) {
   $val$addr$292 = $val$addr$290;
   label = 18;
  } else {
   $val$addr$291 = $val$addr$290;
   label = 16;
  }
 }
 L22: do {
  if ((label|0) == 16) {
   $call41 = (_strcmp($val$addr$291,15221)|0);
   $tobool42 = ($call41|0)==(0);
   if ($tobool42) {
    $val$addr$292 = $val$addr$291;
    label = 18;
   } else {
    $call44 = (_strcmp($val$addr$291,15229)|0);
    $lnot = ($call44|0)==(0);
    if ($lnot) {
     $val$addr$292 = $val$addr$291;
     label = 18;
    } else {
     $9 = HEAP32[4889]|0;
     $tobool6183 = ($9|0)==(0|0);
     if (!($tobool6183)) {
      $p$084 = $9;
      while(1) {
       $arraydecay63 = ((($p$084)) + 8|0);
       $call64 = (_strcmp($val$addr$291,$arraydecay63)|0);
       $tobool65 = ($call64|0)==(0);
       if ($tobool65) {
        $retval$0 = $p$084;
        break L22;
       }
       $next = ((($p$084)) + 24|0);
       $10 = HEAP32[$next>>2]|0;
       $tobool61 = ($10|0)==(0|0);
       if ($tobool61) {
        break;
       } else {
        $p$084 = $10;
       }
      }
     }
     ___lock((19560|0));
     $11 = HEAP32[4889]|0;
     $tobool7181 = ($11|0)==(0|0);
     L32: do {
      if (!($tobool7181)) {
       $p$182 = $11;
       while(1) {
        $arraydecay74 = ((($p$182)) + 8|0);
        $call75 = (_strcmp($val$addr$291,$arraydecay74)|0);
        $tobool76 = ($call75|0)==(0);
        if ($tobool76) {
         break;
        }
        $next80 = ((($p$182)) + 24|0);
        $12 = HEAP32[$next80>>2]|0;
        $tobool71 = ($12|0)==(0|0);
        if ($tobool71) {
         break L32;
        } else {
         $p$182 = $12;
        }
       }
       ___unlock((19560|0));
       $retval$0 = $p$182;
       break L22;
      }
     } while(0);
     $13 = HEAP32[(19472)>>2]|0;
     $tobool82 = ($13|0)==(0);
     L39: do {
      if ($tobool82) {
       $call84 = (_getenv((15235|0))|0);
       $tobool86 = ($call84|0)==(0|0);
       if ($tobool86) {
        label = 41;
       } else {
        $14 = HEAP8[$call84>>0]|0;
        $tobool8979 = ($14<<24>>24)==(0);
        if ($tobool8979) {
         label = 41;
        } else {
         $sub96 = (254 - ($n$0$lcssa))|0;
         $add = (($n$0$lcssa) + 1)|0;
         $path$180 = $call84;
         while(1) {
          $call91 = (___strchrnul($path$180,58)|0);
          $sub$ptr$lhs$cast = $call91;
          $sub$ptr$rhs$cast = $path$180;
          $sub$ptr$sub = (($sub$ptr$lhs$cast) - ($sub$ptr$rhs$cast))|0;
          $15 = HEAP8[$call91>>0]|0;
          $tobool92 = ($15<<24>>24)!=(0);
          $lnot$ext$neg = $tobool92 << 31 >> 31;
          $sub = (($lnot$ext$neg) + ($sub$ptr$sub))|0;
          $cmp97 = ($sub>>>0)<($sub96>>>0);
          if ($cmp97) {
           _memcpy(($buf|0),($path$180|0),($sub|0))|0;
           $arrayidx102 = (($buf) + ($sub)|0);
           HEAP8[$arrayidx102>>0] = 47;
           $add$ptr104 = ((($arrayidx102)) + 1|0);
           _memcpy(($add$ptr104|0),($val$addr$291|0),($n$0$lcssa|0))|0;
           $add105 = (($add) + ($sub))|0;
           $arrayidx106 = (($buf) + ($add105)|0);
           HEAP8[$arrayidx106>>0] = 0;
           $call108 = (___map_file(($buf|0),($map_size|0))|0);
           $tobool109 = ($call108|0)==(0|0);
           if (!($tobool109)) {
            break;
           }
           $$pre88 = HEAP8[$call91>>0]|0;
           $18 = $$pre88;
          } else {
           $18 = $15;
          }
          $tobool126 = ($18<<24>>24)!=(0);
          $lnot$ext130 = $tobool126&1;
          $add$ptr131 = (($call91) + ($lnot$ext130)|0);
          $19 = HEAP8[$add$ptr131>>0]|0;
          $tobool89 = ($19<<24>>24)==(0);
          if ($tobool89) {
           label = 41;
           break L39;
          } else {
           $path$180 = $add$ptr131;
          }
         }
         $call111 = (_malloc(28)|0);
         $tobool112 = ($call111|0)==(0|0);
         $16 = HEAP32[$map_size>>2]|0;
         if ($tobool112) {
          (___munmap($call108,$16)|0);
          label = 41;
          break;
         } else {
          HEAP32[$call111>>2] = $call108;
          $map_size117 = ((($call111)) + 4|0);
          HEAP32[$map_size117>>2] = $16;
          $name118 = ((($call111)) + 8|0);
          _memcpy(($name118|0),($val$addr$291|0),($n$0$lcssa|0))|0;
          $arrayidx121 = (($name118) + ($n$0$lcssa)|0);
          HEAP8[$arrayidx121>>0] = 0;
          $17 = HEAP32[4889]|0;
          $next122 = ((($call111)) + 24|0);
          HEAP32[$next122>>2] = $17;
          HEAP32[4889] = $call111;
          $new$4 = $call111;
          break;
         }
        }
       }
      } else {
       label = 41;
      }
     } while(0);
     if ((label|0) == 41) {
      $call136 = (_malloc(28)|0);
      $tobool137 = ($call136|0)==(0|0);
      if ($tobool137) {
       $new$4 = $call136;
      } else {
       $20 = HEAP32[588]|0;
       HEAP32[$call136>>2] = $20;
       $21 = HEAP32[(2356)>>2]|0;
       $map_size140 = ((($call136)) + 4|0);
       HEAP32[$map_size140>>2] = $21;
       $name141 = ((($call136)) + 8|0);
       _memcpy(($name141|0),($val$addr$291|0),($n$0$lcssa|0))|0;
       $arrayidx144 = (($name141) + ($n$0$lcssa)|0);
       HEAP8[$arrayidx144>>0] = 0;
       $22 = HEAP32[4889]|0;
       $next145 = ((($call136)) + 24|0);
       HEAP32[$next145>>2] = $22;
       HEAP32[4889] = $call136;
       $new$4 = $call136;
      }
     }
     $tobool147 = ($new$4|0)==(0|0);
     $cmp149 = ($cat|0)==(0);
     $or$cond = $cmp149 & $tobool147;
     $__c_dot_utf8$new$4 = $or$cond ? 2352 : $new$4;
     ___unlock((19560|0));
     $retval$0 = $__c_dot_utf8$new$4;
    }
   }
  }
 } while(0);
 do {
  if ((label|0) == 18) {
   $cmp50 = ($cat|0)==(0);
   if ($cmp50) {
    $arrayidx53 = ((($val$addr$292)) + 1|0);
    $8 = HEAP8[$arrayidx53>>0]|0;
    $cmp55 = ($8<<24>>24)==(46);
    if ($cmp55) {
     $retval$0 = 2352;
     break;
    }
   }
   $retval$0 = 0;
  }
 } while(0);
 STACKTOP = sp;return ($retval$0|0);
}
function ___newlocale($mask,$name,$loc) {
 $mask = $mask|0;
 $name = $name|0;
 $loc = $loc|0;
 var $0 = 0, $1 = 0, $and = 0, $and11 = 0, $arrayidx = 0, $arrayidx15 = 0, $arrayidx26 = 0, $brmerge = 0, $call = 0, $call19 = 0, $call4 = 0, $cmp37 = 0, $cond = 0, $exitcond = 0, $exitcond29 = 0, $i$028 = 0, $i$126 = 0, $inc = 0, $inc23 = 0, $inc28 = 0;
 var $j$0$inc23 = 0, $j$027 = 0, $lm$0 = 0, $not$tobool21 = 0, $retval$0 = 0, $shl = 0, $shl10 = 0, $tmp = 0, $tobool = 0, $tobool12 = 0, $tobool2 = 0, $tobool9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $tmp = sp;
 $call = (___loc_is_allocated($loc)|0);
 $tobool = ($call|0)==(0);
 L1: do {
  if ($tobool) {
   $tobool9 = ($loc|0)==(0|0);
   $i$126 = 0;$j$027 = 0;
   while(1) {
    $shl10 = 1 << $i$126;
    $and11 = $shl10 & $mask;
    $tobool12 = ($and11|0)!=(0);
    $brmerge = $tobool9 | $tobool12;
    if ($brmerge) {
     $cond = $tobool12 ? $name : 23082;
     $call19 = (___get_locale($i$126,$cond)|0);
     $lm$0 = $call19;
    } else {
     $arrayidx15 = (($loc) + ($i$126<<2)|0);
     $0 = HEAP32[$arrayidx15>>2]|0;
     $lm$0 = $0;
    }
    $not$tobool21 = ($lm$0|0)!=(0|0);
    $inc23 = $not$tobool21&1;
    $j$0$inc23 = (($inc23) + ($j$027))|0;
    $arrayidx26 = (($tmp) + ($i$126<<2)|0);
    HEAP32[$arrayidx26>>2] = $lm$0;
    $inc28 = (($i$126) + 1)|0;
    $exitcond = ($inc28|0)==(6);
    if ($exitcond) {
     break;
    } else {
     $i$126 = $inc28;$j$027 = $j$0$inc23;
    }
   }
   switch ($j$0$inc23|0) {
   case 0:  {
    $retval$0 = 19528;
    break L1;
    break;
   }
   case 1:  {
    $1 = HEAP32[$tmp>>2]|0;
    $cmp37 = ($1|0)==(2352|0);
    if ($cmp37) {
     $retval$0 = 2400;
     break L1;
    }
    break;
   }
   default: {
   }
   }
   $retval$0 = $loc;
  } else {
   $i$028 = 0;
   while(1) {
    $shl = 1 << $i$028;
    $and = $shl & $mask;
    $tobool2 = ($and|0)==(0);
    if (!($tobool2)) {
     $arrayidx = (($loc) + ($i$028<<2)|0);
     $call4 = (___get_locale($i$028,$name)|0);
     HEAP32[$arrayidx>>2] = $call4;
    }
    $inc = (($i$028) + 1)|0;
    $exitcond29 = ($inc|0)==(6);
    if ($exitcond29) {
     $retval$0 = $loc;
     break;
    } else {
     $i$028 = $inc;
    }
   }
  }
 } while(0);
 STACKTOP = sp;return ($retval$0|0);
}
function _snprintf($s,$n,$fmt,$varargs) {
 $s = $s|0;
 $n = $n|0;
 $fmt = $fmt|0;
 $varargs = $varargs|0;
 var $ap = 0, $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $ap = sp;
 HEAP32[$ap>>2] = $varargs;
 $call = (_vsnprintf($s,$n,$fmt,$ap)|0);
 STACKTOP = sp;return ($call|0);
}
function ___uselocale($new) {
 $new = $new|0;
 var $0 = 0, $call = 0, $cmp = 0, $cmp2 = 0, $cond = 0, $cond6 = 0, $locale = 0, $tobool = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = (___pthread_self_233()|0);
 $locale = ((($call)) + 188|0);
 $0 = HEAP32[$locale>>2]|0;
 $tobool = ($new|0)==(0|0);
 if (!($tobool)) {
  $cmp = ($new|0)==((-1)|0);
  $cond = $cmp ? (19504) : $new;
  HEAP32[$locale>>2] = $cond;
 }
 $cmp2 = ($0|0)==((19504)|0);
 $cond6 = $cmp2 ? (-1) : $0;
 return ($cond6|0);
}
function ___pthread_self_233() {
 var $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = (_pthread_self()|0);
 return ($call|0);
}
function _wmemcpy($d,$s,$n) {
 $d = $d|0;
 $s = $s|0;
 $n = $n|0;
 var $0 = 0, $d$addr$06 = 0, $dec = 0, $incdec$ptr = 0, $incdec$ptr1 = 0, $n$addr$05 = 0, $s$addr$04 = 0, $tobool = 0, $tobool3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $tobool3 = ($n|0)==(0);
 if (!($tobool3)) {
  $d$addr$06 = $d;$n$addr$05 = $n;$s$addr$04 = $s;
  while(1) {
   $dec = (($n$addr$05) + -1)|0;
   $incdec$ptr = ((($s$addr$04)) + 4|0);
   $0 = HEAP32[$s$addr$04>>2]|0;
   $incdec$ptr1 = ((($d$addr$06)) + 4|0);
   HEAP32[$d$addr$06>>2] = $0;
   $tobool = ($dec|0)==(0);
   if ($tobool) {
    break;
   } else {
    $d$addr$06 = $incdec$ptr1;$n$addr$05 = $dec;$s$addr$04 = $incdec$ptr;
   }
  }
 }
 return ($d|0);
}
function ___strdup($s) {
 $s = $s|0;
 var $add = 0, $call = 0, $call1 = 0, $retval$0 = 0, $tobool = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = (_strlen($s)|0);
 $add = (($call) + 1)|0;
 $call1 = (_malloc($add)|0);
 $tobool = ($call1|0)==(0|0);
 if ($tobool) {
  $retval$0 = 0;
 } else {
  _memcpy(($call1|0),($s|0),($add|0))|0;
  $retval$0 = $call1;
 }
 return ($retval$0|0);
}
function ___overflow($f,$_c) {
 $f = $f|0;
 $_c = $_c|0;
 var $$pre = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $c = 0, $call = 0, $call13 = 0, $cmp = 0, $cmp14 = 0, $cmp7 = 0, $conv = 0, $conv18 = 0, $conv5 = 0, $conv6 = 0, $incdec$ptr = 0, $lbf = 0, $retval$0 = 0;
 var $tobool = 0, $tobool1 = 0, $wend = 0, $wpos = 0, $write = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $c = sp;
 $conv = $_c&255;
 HEAP8[$c>>0] = $conv;
 $wend = ((($f)) + 16|0);
 $0 = HEAP32[$wend>>2]|0;
 $tobool = ($0|0)==(0|0);
 if ($tobool) {
  $call = (___towrite($f)|0);
  $tobool1 = ($call|0)==(0);
  if ($tobool1) {
   $$pre = HEAP32[$wend>>2]|0;
   $2 = $$pre;
   label = 4;
  } else {
   $retval$0 = -1;
  }
 } else {
  $2 = $0;
  label = 4;
 }
 do {
  if ((label|0) == 4) {
   $wpos = ((($f)) + 20|0);
   $1 = HEAP32[$wpos>>2]|0;
   $cmp = ($1>>>0)<($2>>>0);
   if ($cmp) {
    $conv5 = $_c & 255;
    $lbf = ((($f)) + 75|0);
    $3 = HEAP8[$lbf>>0]|0;
    $conv6 = $3 << 24 >> 24;
    $cmp7 = ($conv5|0)==($conv6|0);
    if (!($cmp7)) {
     $incdec$ptr = ((($1)) + 1|0);
     HEAP32[$wpos>>2] = $incdec$ptr;
     HEAP8[$1>>0] = $conv;
     $retval$0 = $conv5;
     break;
    }
   }
   $write = ((($f)) + 36|0);
   $4 = HEAP32[$write>>2]|0;
   $call13 = (FUNCTION_TABLE_iiii[$4 & 1023]($f,$c,1)|0);
   $cmp14 = ($call13|0)==(1);
   if ($cmp14) {
    $5 = HEAP8[$c>>0]|0;
    $conv18 = $5&255;
    $retval$0 = $conv18;
   } else {
    $retval$0 = -1;
   }
  }
 } while(0);
 STACKTOP = sp;return ($retval$0|0);
}
function _mbtowc($wc,$src,$n) {
 $wc = $wc|0;
 $src = $src|0;
 $n = $n|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $add = 0, $and = 0, $arrayidx30 = 0, $call = 0, $call82 = 0, $cmp = 0, $cmp24 = 0, $cmp31 = 0, $cmp58 = 0, $cmp73 = 0;
 var $conv = 0, $conv21 = 0, $conv23 = 0, $conv38 = 0, $conv56 = 0, $conv71 = 0, $dummy = 0, $dummy$wc = 0, $incdec$ptr = 0, $incdec$ptr48 = 0, $incdec$ptr63 = 0, $lnot$ext = 0, $locale = 0, $mul = 0, $not$tobool13 = 0, $or = 0, $or51 = 0, $or66 = 0, $or81 = 0, $retval$0 = 0;
 var $shl47 = 0, $shl62 = 0, $shl77 = 0, $shr30 = 0, $shr42 = 0, $sub = 0, $sub33 = 0, $sub39 = 0, $sub50 = 0, $sub57 = 0, $sub72 = 0, $tobool = 0, $tobool1 = 0, $tobool10 = 0, $tobool35 = 0, $tobool4 = 0, $tobool44 = 0, $tobool53 = 0, $tobool68 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $dummy = sp;
 $tobool = ($src|0)==(0|0);
 L1: do {
  if ($tobool) {
   $retval$0 = 0;
  } else {
   $tobool1 = ($n|0)==(0);
   do {
    if (!($tobool1)) {
     $tobool4 = ($wc|0)==(0|0);
     $dummy$wc = $tobool4 ? $dummy : $wc;
     $0 = HEAP8[$src>>0]|0;
     $cmp = ($0<<24>>24)>(-1);
     if ($cmp) {
      $conv = $0&255;
      HEAP32[$dummy$wc>>2] = $conv;
      $tobool10 = ($0<<24>>24)!=(0);
      $lnot$ext = $tobool10&1;
      $retval$0 = $lnot$ext;
      break L1;
     }
     $call = (___pthread_self_428()|0);
     $locale = ((($call)) + 188|0);
     $1 = HEAP32[$locale>>2]|0;
     $2 = HEAP32[$1>>2]|0;
     $not$tobool13 = ($2|0)==(0|0);
     $3 = HEAP8[$src>>0]|0;
     if ($not$tobool13) {
      $conv21 = $3 << 24 >> 24;
      $and = $conv21 & 57343;
      HEAP32[$dummy$wc>>2] = $and;
      $retval$0 = 1;
      break L1;
     }
     $conv23 = $3&255;
     $sub = (($conv23) + -194)|0;
     $cmp24 = ($sub>>>0)>(50);
     if (!($cmp24)) {
      $incdec$ptr = ((($src)) + 1|0);
      $arrayidx30 = (2424 + ($sub<<2)|0);
      $4 = HEAP32[$arrayidx30>>2]|0;
      $cmp31 = ($n>>>0)<(4);
      if ($cmp31) {
       $mul = ($n*6)|0;
       $sub33 = (($mul) + -6)|0;
       $5 = -2147483648 >>> $sub33;
       $6 = $4 & $5;
       $tobool35 = ($6|0)==(0);
       if (!($tobool35)) {
        break;
       }
      }
      $7 = HEAP8[$incdec$ptr>>0]|0;
      $conv38 = $7&255;
      $shr30 = $conv38 >>> 3;
      $sub39 = (($shr30) + -16)|0;
      $shr42 = $4 >> 26;
      $add = (($shr30) + ($shr42))|0;
      $or = $sub39 | $add;
      $tobool44 = ($or>>>0)>(7);
      if (!($tobool44)) {
       $shl47 = $4 << 6;
       $sub50 = (($conv38) + -128)|0;
       $or51 = $sub50 | $shl47;
       $tobool53 = ($or51|0)<(0);
       if (!($tobool53)) {
        HEAP32[$dummy$wc>>2] = $or51;
        $retval$0 = 2;
        break L1;
       }
       $incdec$ptr48 = ((($src)) + 2|0);
       $8 = HEAP8[$incdec$ptr48>>0]|0;
       $conv56 = $8&255;
       $sub57 = (($conv56) + -128)|0;
       $cmp58 = ($sub57>>>0)>(63);
       if (!($cmp58)) {
        $shl62 = $or51 << 6;
        $or66 = $sub57 | $shl62;
        $tobool68 = ($or66|0)<(0);
        if (!($tobool68)) {
         HEAP32[$dummy$wc>>2] = $or66;
         $retval$0 = 3;
         break L1;
        }
        $incdec$ptr63 = ((($src)) + 3|0);
        $9 = HEAP8[$incdec$ptr63>>0]|0;
        $conv71 = $9&255;
        $sub72 = (($conv71) + -128)|0;
        $cmp73 = ($sub72>>>0)>(63);
        if (!($cmp73)) {
         $shl77 = $or66 << 6;
         $or81 = $sub72 | $shl77;
         HEAP32[$dummy$wc>>2] = $or81;
         $retval$0 = 4;
         break L1;
        }
       }
      }
     }
    }
   } while(0);
   $call82 = (___errno_location()|0);
   HEAP32[$call82>>2] = 84;
   $retval$0 = -1;
  }
 } while(0);
 STACKTOP = sp;return ($retval$0|0);
}
function ___pthread_self_428() {
 var $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = (_pthread_self()|0);
 return ($call|0);
}
function ___ofl_lock() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 ___lock((19568|0));
 return (19576|0);
}
function ___ofl_unlock() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 ___unlock((19568|0));
 return;
}
function _fflush($f) {
 $f = $f|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $call = 0, $call1 = 0, $call11 = 0, $call118 = 0, $call17 = 0, $call23 = 0, $call7 = 0, $cmp = 0, $cmp15 = 0, $cmp21 = 0, $cond10 = 0, $cond20 = 0, $f$addr$0 = 0, $f$addr$019 = 0;
 var $f$addr$022 = 0, $lock = 0, $lock14 = 0, $next = 0, $or = 0, $phitmp = 0, $r$0$lcssa = 0, $r$021 = 0, $r$1 = 0, $retval$0 = 0, $tobool = 0, $tobool12 = 0, $tobool1220 = 0, $tobool25 = 0, $tobool5 = 0, $wbase = 0, $wpos = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $tobool = ($f|0)==(0|0);
 do {
  if ($tobool) {
   $1 = HEAP32[781]|0;
   $tobool5 = ($1|0)==(0|0);
   if ($tobool5) {
    $cond10 = 0;
   } else {
    $2 = HEAP32[781]|0;
    $call7 = (_fflush($2)|0);
    $cond10 = $call7;
   }
   $call11 = (___ofl_lock()|0);
   $f$addr$019 = HEAP32[$call11>>2]|0;
   $tobool1220 = ($f$addr$019|0)==(0|0);
   if ($tobool1220) {
    $r$0$lcssa = $cond10;
   } else {
    $f$addr$022 = $f$addr$019;$r$021 = $cond10;
    while(1) {
     $lock14 = ((($f$addr$022)) + 76|0);
     $3 = HEAP32[$lock14>>2]|0;
     $cmp15 = ($3|0)>(-1);
     if ($cmp15) {
      $call17 = (___lockfile($f$addr$022)|0);
      $cond20 = $call17;
     } else {
      $cond20 = 0;
     }
     $wpos = ((($f$addr$022)) + 20|0);
     $4 = HEAP32[$wpos>>2]|0;
     $wbase = ((($f$addr$022)) + 28|0);
     $5 = HEAP32[$wbase>>2]|0;
     $cmp21 = ($4>>>0)>($5>>>0);
     if ($cmp21) {
      $call23 = (___fflush_unlocked($f$addr$022)|0);
      $or = $call23 | $r$021;
      $r$1 = $or;
     } else {
      $r$1 = $r$021;
     }
     $tobool25 = ($cond20|0)==(0);
     if (!($tobool25)) {
      ___unlockfile($f$addr$022);
     }
     $next = ((($f$addr$022)) + 56|0);
     $f$addr$0 = HEAP32[$next>>2]|0;
     $tobool12 = ($f$addr$0|0)==(0|0);
     if ($tobool12) {
      $r$0$lcssa = $r$1;
      break;
     } else {
      $f$addr$022 = $f$addr$0;$r$021 = $r$1;
     }
    }
   }
   ___ofl_unlock();
   $retval$0 = $r$0$lcssa;
  } else {
   $lock = ((($f)) + 76|0);
   $0 = HEAP32[$lock>>2]|0;
   $cmp = ($0|0)>(-1);
   if (!($cmp)) {
    $call118 = (___fflush_unlocked($f)|0);
    $retval$0 = $call118;
    break;
   }
   $call = (___lockfile($f)|0);
   $phitmp = ($call|0)==(0);
   $call1 = (___fflush_unlocked($f)|0);
   if ($phitmp) {
    $retval$0 = $call1;
   } else {
    ___unlockfile($f);
    $retval$0 = $call1;
   }
  }
 } while(0);
 return ($retval$0|0);
}
function ___fflush_unlocked($f) {
 $f = $f|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $cmp = 0, $cmp4 = 0, $rend = 0, $retval$0 = 0, $rpos = 0, $seek = 0, $sub$ptr$lhs$cast = 0, $sub$ptr$rhs$cast = 0, $sub$ptr$sub = 0, $tobool = 0, $wbase = 0, $wend = 0, $wpos = 0;
 var $write = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $wpos = ((($f)) + 20|0);
 $0 = HEAP32[$wpos>>2]|0;
 $wbase = ((($f)) + 28|0);
 $1 = HEAP32[$wbase>>2]|0;
 $cmp = ($0>>>0)>($1>>>0);
 if ($cmp) {
  $write = ((($f)) + 36|0);
  $2 = HEAP32[$write>>2]|0;
  (FUNCTION_TABLE_iiii[$2 & 1023]($f,0,0)|0);
  $3 = HEAP32[$wpos>>2]|0;
  $tobool = ($3|0)==(0|0);
  if ($tobool) {
   $retval$0 = -1;
  } else {
   label = 3;
  }
 } else {
  label = 3;
 }
 if ((label|0) == 3) {
  $rpos = ((($f)) + 4|0);
  $4 = HEAP32[$rpos>>2]|0;
  $rend = ((($f)) + 8|0);
  $5 = HEAP32[$rend>>2]|0;
  $cmp4 = ($4>>>0)<($5>>>0);
  if ($cmp4) {
   $sub$ptr$lhs$cast = $4;
   $sub$ptr$rhs$cast = $5;
   $sub$ptr$sub = (($sub$ptr$lhs$cast) - ($sub$ptr$rhs$cast))|0;
   $seek = ((($f)) + 40|0);
   $6 = HEAP32[$seek>>2]|0;
   (FUNCTION_TABLE_iiii[$6 & 1023]($f,$sub$ptr$sub,1)|0);
  }
  $wend = ((($f)) + 16|0);
  HEAP32[$wend>>2] = 0;
  HEAP32[$wbase>>2] = 0;
  HEAP32[$wpos>>2] = 0;
  HEAP32[$rend>>2] = 0;
  HEAP32[$rpos>>2] = 0;
  $retval$0 = 0;
 }
 return ($retval$0|0);
}
function _sscanf($s,$fmt,$varargs) {
 $s = $s|0;
 $fmt = $fmt|0;
 $varargs = $varargs|0;
 var $ap = 0, $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $ap = sp;
 HEAP32[$ap>>2] = $varargs;
 $call = (_vsscanf($s,$fmt,$ap)|0);
 STACKTOP = sp;return ($call|0);
}
function _vsscanf($s,$fmt,$ap) {
 $s = $s|0;
 $fmt = $fmt|0;
 $ap = $ap|0;
 var $buf = 0, $call = 0, $cookie = 0, $f = 0, $lock = 0, $read = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(128|0);
 $f = sp;
 dest=$f; stop=dest+124|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 $read = ((($f)) + 32|0);
 HEAP32[$read>>2] = 387;
 $buf = ((($f)) + 44|0);
 HEAP32[$buf>>2] = $s;
 $lock = ((($f)) + 76|0);
 HEAP32[$lock>>2] = -1;
 $cookie = ((($f)) + 84|0);
 HEAP32[$cookie>>2] = $s;
 $call = (_vfscanf($f,$fmt,$ap)|0);
 STACKTOP = sp;return ($call|0);
}
function _do_read($f,$buf,$len) {
 $f = $f|0;
 $buf = $buf|0;
 $len = $len|0;
 var $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = (___string_read($f,$buf,$len)|0);
 return ($call|0);
}
function _vfscanf($f,$fmt,$ap) {
 $f = $f|0;
 $fmt = $fmt|0;
 $ap = $ap|0;
 var $$ = 0, $$224 = 0, $$225 = 0, $$compoundliteral$sroa$2$0$$sroa_idx8 = 0, $$compoundliteral329 = 0, $$lcssa = 0, $$ph = 0, $$ph245 = 0, $$pre = 0, $$pre385 = 0, $$pre386 = 0, $$pre388 = 0, $$pre389 = 0, $$pre390 = 0, $$pre391 = 0, $$pre392 = 0, $$s$0 = 0, $$size$0 = 0, $$width$0 = 0, $0 = 0;
 var $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0;
 var $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $add = 0, $add$ptr = 0, $add$ptr86 = 0, $add173 = 0, $add174 = 0, $add278 = 0, $add287 = 0, $add29 = 0, $add296 = 0, $add325 = 0, $add346 = 0, $add378 = 0, $add389 = 0, $add417 = 0, $add439 = 0;
 var $add460 = 0, $add548 = 0, $add549 = 0, $add96 = 0, $alloc$1 = 0, $alloc$2 = 0, $and = 0, $arglist_current = 0, $arglist_next = 0, $arrayidx = 0, $arrayidx210 = 0, $arrayidx215 = 0, $arrayidx235 = 0, $arrayidx244 = 0, $arrayidx244$sink = 0, $arrayidx259 = 0, $arrayidx269 = 0, $arrayidx279 = 0, $arrayidx288 = 0, $arrayidx326 = 0;
 var $arrayidx33 = 0, $arrayidx338 = 0, $arrayidx379 = 0, $arrayidx384 = 0, $arrayidx418 = 0, $arrayidx423 = 0, $arrayidx440 = 0, $arrayidx491 = 0, $arrayidx495 = 0, $arrayidx79 = 0, $base$0 = 0, $c$0308 = 0, $call = 0, $call1 = 0, $call14 = 0, $call153 = 0, $call156 = 0, $call17 = 0, $call185 = 0, $call306 = 0;
 var $call322 = 0, $call331 = 0, $call348 = 0, $call354 = 0, $call361 = 0, $call375 = 0, $call392 = 0, $call4 = 0, $call414 = 0, $call436 = 0, $call50 = 0, $call522 = 0.0, $call85 = 0, $cmp = 0, $cmp100 = 0, $cmp111 = 0, $cmp119 = 0, $cmp131 = 0, $cmp146 = 0, $cmp178 = 0;
 var $cmp188 = 0, $cmp200 = 0, $cmp200$not = 0, $cmp203 = 0, $cmp220 = 0, $cmp273 = 0, $cmp273307 = 0, $cmp300 = 0, $cmp31 = 0, $cmp315 = 0, $cmp342 = 0, $cmp368 = 0, $cmp385 = 0, $cmp407 = 0, $cmp429 = 0, $cmp43 = 0, $cmp474 = 0, $cmp513 = 0, $cmp54 = 0, $cmp64 = 0;
 var $cmp7 = 0, $cmp81 = 0, $cond = 0, $cond155 = 0, $cond16 = 0, $cond299 = 0, $cond324 = 0, $cond377 = 0, $cond416 = 0, $cond438 = 0, $cond52 = 0, $conv = 0, $conv12 = 0, $conv130 = 0, $conv151 = 0, $conv243 = 0, $conv270 = 0, $conv272 = 0, $conv285$pre$phiZ2D = 0, $conv286 = 0;
 var $conv3 = 0, $conv320 = 0, $conv330 = 0, $conv34 = 0, $conv373 = 0, $conv382 = 0, $conv40 = 0, $conv412 = 0, $conv421 = 0, $conv434 = 0, $conv48 = 0, $conv53 = 0, $conv536 = 0.0, $conv91 = 0, $conv91298 = 0, $conv91303 = 0, $dest$0 = 0, $expanded = 0, $expanded1 = 0, $expanded3 = 0;
 var $expanded4 = 0, $expanded5 = 0, $factor = 0, $factor232 = 0, $i$0$ph = 0, $i$0$ph$phi = 0, $i$0$ph236 = 0, $i$1 = 0, $i$2 = 0, $i$2$ph = 0, $i$2$ph$phi = 0, $i$3 = 0, $i$4 = 0, $inc = 0, $inc337 = 0, $inc383 = 0, $inc422 = 0, $inc552 = 0, $incdec$ptr105 = 0, $incdec$ptr105$p$3 = 0;
 var $incdec$ptr108 = 0, $incdec$ptr11 = 0, $incdec$ptr114 = 0, $incdec$ptr114$incdec$ptr108 = 0, $incdec$ptr122 = 0, $incdec$ptr122$incdec$ptr108 = 0, $incdec$ptr150 = 0, $incdec$ptr164 = 0, $incdec$ptr182 = 0, $incdec$ptr196 = 0, $incdec$ptr218 = 0, $incdec$ptr223 = 0, $incdec$ptr241 = 0, $incdec$ptr25 = 0, $incdec$ptr290 = 0, $incdec$ptr319 = 0, $incdec$ptr372 = 0, $incdec$ptr411 = 0, $incdec$ptr433 = 0, $incdec$ptr451 = 0;
 var $incdec$ptr47 = 0, $incdec$ptr555 = 0, $incdec$ptr61 = 0, $incdec$ptr75 = 0, $incdec$ptr98 = 0, $invert$0 = 0, $isdigit = 0, $isdigit220 = 0, $isdigit220300 = 0, $isdigittmp = 0, $isdigittmp219 = 0, $isdigittmp219299 = 0, $k$0$ph = 0, $k$1$ph = 0, $lnot$ext$$le324 = 0, $lnot$ext$$le326 = 0, $lock = 0, $matches$0$inc552 = 0, $matches$0312 = 0, $matches$1 = 0;
 var $matches$2 = 0, $matches$3 = 0, $mul = 0, $mul305 = 0, $mul347 = 0, $narrow = 0, $narrow350 = 0, $or = 0, $or$cond = 0, $or$cond1 = 0, $or$cond2 = 0, $or$cond223 = 0, $or$conv130 = 0, $p$0316 = 0, $p$1 = 0, $p$10 = 0, $p$11 = 0, $p$2 = 0, $p$3$lcssa = 0, $p$3301 = 0;
 var $p$5 = 0, $p$6 = 0, $p$7 = 0, $p$7$ph = 0, $p$8 = 0, $p$9 = 0, $pos$0315 = 0, $pos$1 = 0, $pos$2 = 0, $rend169 = 0, $rpos144 = 0, $s$0310 = 0, $s$2$ph = 0, $s$4 = 0, $s$5 = 0, $s$6 = 0, $s$7 = 0, $s$8 = 0, $s$9 = 0, $s$9$ph = 0;
 var $scanset = 0, $shcnt167 = 0, $shend145 = 0, $size$0 = 0, $st = 0, $sub$ptr$sub = 0, $sub$ptr$sub172 = 0, $sub$ptr$sub459 = 0, $sub$ptr$sub508222 = 0, $sub$ptr$sub528221 = 0, $sub$ptr$sub547 = 0, $sub242 = 0, $sub97 = 0, $tobool = 0, $tobool103 = 0, $tobool157 = 0, $tobool161 = 0, $tobool18 = 0, $tobool193 = 0, $tobool2 = 0;
 var $tobool22 = 0, $tobool307 = 0, $tobool309 = 0, $tobool327 = 0, $tobool335 = 0, $tobool349 = 0, $tobool355 = 0, $tobool362 = 0, $tobool380 = 0, $tobool393 = 0, $tobool402 = 0, $tobool419 = 0, $tobool441 = 0, $tobool448 = 0, $tobool461 = 0, $tobool489 = 0, $tobool493 = 0, $tobool5 = 0, $tobool510 = 0, $tobool530 = 0;
 var $tobool533 = 0, $tobool558 = 0, $tobool558$old = 0, $tobool561 = 0, $tobool565 = 0, $tobool58 = 0, $trunc = 0, $wc = 0, $wcs$5 = 0, $width$0$lcssa = 0, $width$0302 = 0, $width$1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 288|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(288|0);
 $st = sp + 8|0;
 $scanset = sp + 17|0;
 $wc = sp;
 $$compoundliteral329 = sp + 16|0;
 $lock = ((($f)) + 76|0);
 $0 = HEAP32[$lock>>2]|0;
 $cmp = ($0|0)>(-1);
 if ($cmp) {
  $call = (___lockfile($f)|0);
  $cond = $call;
 } else {
  $cond = 0;
 }
 $1 = HEAP8[$fmt>>0]|0;
 $tobool309 = ($1<<24>>24)==(0);
 L4: do {
  if ($tobool309) {
   $matches$3 = 0;
  } else {
   $rpos144 = ((($f)) + 4|0);
   $shend145 = ((($f)) + 100|0);
   $shcnt167 = ((($f)) + 108|0);
   $rend169 = ((($f)) + 8|0);
   $arrayidx210 = ((($scanset)) + 10|0);
   $arrayidx215 = ((($scanset)) + 33|0);
   $$compoundliteral$sroa$2$0$$sroa_idx8 = ((($st)) + 4|0);
   $arrayidx235 = ((($scanset)) + 46|0);
   $arrayidx244 = ((($scanset)) + 94|0);
   $2 = ((($scanset)) + 1|0);
   $3 = ((($scanset)) + 1|0);
   $32 = 0;$4 = $1;$matches$0312 = 0;$p$0316 = $fmt;$pos$0315 = 0;$s$0310 = 0;
   L6: while(1) {
    $conv = $4&255;
    $call1 = (_isspace($conv)|0);
    $tobool2 = ($call1|0)==(0);
    L8: do {
     if ($tobool2) {
      $cmp31 = ($4<<24>>24)==(37);
      L10: do {
       if ($cmp31) {
        $arrayidx33 = ((($p$0316)) + 1|0);
        $15 = HEAP8[$arrayidx33>>0]|0;
        L12: do {
         switch ($15<<24>>24) {
         case 37:  {
          break L10;
          break;
         }
         case 42:  {
          $incdec$ptr75 = ((($p$0316)) + 2|0);
          $dest$0 = 0;$p$2 = $incdec$ptr75;
          break;
         }
         default: {
          $conv34 = $15&255;
          $isdigittmp = (($conv34) + -48)|0;
          $isdigit = ($isdigittmp>>>0)<(10);
          if ($isdigit) {
           $arrayidx79 = ((($p$0316)) + 2|0);
           $22 = HEAP8[$arrayidx79>>0]|0;
           $cmp81 = ($22<<24>>24)==(36);
           if ($cmp81) {
            $call85 = (_arg_n($ap,$isdigittmp)|0);
            $add$ptr86 = ((($p$0316)) + 3|0);
            $dest$0 = $call85;$p$2 = $add$ptr86;
            break L12;
           }
          }
          $arglist_current = HEAP32[$ap>>2]|0;
          $23 = $arglist_current;
          $24 = ((0) + 4|0);
          $expanded1 = $24;
          $expanded = (($expanded1) - 1)|0;
          $25 = (($23) + ($expanded))|0;
          $26 = ((0) + 4|0);
          $expanded5 = $26;
          $expanded4 = (($expanded5) - 1)|0;
          $expanded3 = $expanded4 ^ -1;
          $27 = $25 & $expanded3;
          $28 = $27;
          $29 = HEAP32[$28>>2]|0;
          $arglist_next = ((($28)) + 4|0);
          HEAP32[$ap>>2] = $arglist_next;
          $dest$0 = $29;$p$2 = $arrayidx33;
         }
         }
        } while(0);
        $30 = HEAP8[$p$2>>0]|0;
        $conv91298 = $30&255;
        $isdigittmp219299 = (($conv91298) + -48)|0;
        $isdigit220300 = ($isdigittmp219299>>>0)<(10);
        if ($isdigit220300) {
         $conv91303 = $conv91298;$p$3301 = $p$2;$width$0302 = 0;
         while(1) {
          $mul = ($width$0302*10)|0;
          $add96 = (($mul) + -48)|0;
          $sub97 = (($add96) + ($conv91303))|0;
          $incdec$ptr98 = ((($p$3301)) + 1|0);
          $31 = HEAP8[$incdec$ptr98>>0]|0;
          $conv91 = $31&255;
          $isdigittmp219 = (($conv91) + -48)|0;
          $isdigit220 = ($isdigittmp219>>>0)<(10);
          if ($isdigit220) {
           $conv91303 = $conv91;$p$3301 = $incdec$ptr98;$width$0302 = $sub97;
          } else {
           $$lcssa = $31;$p$3$lcssa = $incdec$ptr98;$width$0$lcssa = $sub97;
           break;
          }
         }
        } else {
         $$lcssa = $30;$p$3$lcssa = $p$2;$width$0$lcssa = 0;
        }
        $cmp100 = ($$lcssa<<24>>24)==(109);
        $tobool103 = ($dest$0|0)!=(0|0);
        $incdec$ptr105 = ((($p$3$lcssa)) + 1|0);
        $$s$0 = $cmp100 ? 0 : $s$0310;
        $$ = $cmp100 ? 0 : $32;
        $incdec$ptr105$p$3 = $cmp100 ? $incdec$ptr105 : $p$3$lcssa;
        $narrow = $tobool103 & $cmp100;
        $incdec$ptr108 = ((($incdec$ptr105$p$3)) + 1|0);
        $33 = HEAP8[$incdec$ptr105$p$3>>0]|0;
        switch ($33<<24>>24) {
        case 104:  {
         $34 = HEAP8[$incdec$ptr108>>0]|0;
         $cmp111 = ($34<<24>>24)==(104);
         $incdec$ptr114 = ((($incdec$ptr105$p$3)) + 2|0);
         $incdec$ptr114$incdec$ptr108 = $cmp111 ? $incdec$ptr114 : $incdec$ptr108;
         $$224 = $cmp111 ? -2 : -1;
         $p$5 = $incdec$ptr114$incdec$ptr108;$size$0 = $$224;
         break;
        }
        case 108:  {
         $35 = HEAP8[$incdec$ptr108>>0]|0;
         $cmp119 = ($35<<24>>24)==(108);
         $incdec$ptr122 = ((($incdec$ptr105$p$3)) + 2|0);
         $incdec$ptr122$incdec$ptr108 = $cmp119 ? $incdec$ptr122 : $incdec$ptr108;
         $$225 = $cmp119 ? 3 : 1;
         $p$5 = $incdec$ptr122$incdec$ptr108;$size$0 = $$225;
         break;
        }
        case 106:  {
         $p$5 = $incdec$ptr108;$size$0 = 3;
         break;
        }
        case 116: case 122:  {
         $p$5 = $incdec$ptr108;$size$0 = 1;
         break;
        }
        case 76:  {
         $p$5 = $incdec$ptr108;$size$0 = 2;
         break;
        }
        case 110: case 112: case 67: case 83: case 91: case 99: case 115: case 88: case 71: case 70: case 69: case 65: case 103: case 102: case 101: case 97: case 120: case 117: case 111: case 105: case 100:  {
         $p$5 = $incdec$ptr105$p$3;$size$0 = 0;
         break;
        }
        default: {
         $102 = $$;$narrow350 = $narrow;$s$7 = $$s$0;
         label = 137;
         break L6;
        }
        }
        $36 = HEAP8[$p$5>>0]|0;
        $conv130 = $36&255;
        $and = $conv130 & 47;
        $cmp131 = ($and|0)==(3);
        $or = $conv130 | 32;
        $or$conv130 = $cmp131 ? $or : $conv130;
        $$size$0 = $cmp131 ? 1 : $size$0;
        $trunc = $or$conv130&255;
        switch ($trunc<<24>>24) {
        case 99:  {
         $37 = ($width$0$lcssa|0)>(1);
         $$width$0 = $37 ? $width$0$lcssa : 1;
         $pos$1 = $pos$0315;$width$1 = $$width$0;
         break;
        }
        case 91:  {
         $pos$1 = $pos$0315;$width$1 = $width$0$lcssa;
         break;
        }
        case 110:  {
         $38 = ($pos$0315|0)<(0);
         $39 = $38 << 31 >> 31;
         _store_int($dest$0,$$size$0,$pos$0315,$39);
         $100 = $$;$matches$1 = $matches$0312;$p$11 = $p$5;$pos$2 = $pos$0315;$s$6 = $$s$0;
         break L8;
         break;
        }
        default: {
         ___shlim($f,0);
         while(1) {
          $40 = HEAP32[$rpos144>>2]|0;
          $41 = HEAP32[$shend145>>2]|0;
          $cmp146 = ($40>>>0)<($41>>>0);
          if ($cmp146) {
           $incdec$ptr150 = ((($40)) + 1|0);
           HEAP32[$rpos144>>2] = $incdec$ptr150;
           $42 = HEAP8[$40>>0]|0;
           $conv151 = $42&255;
           $cond155 = $conv151;
          } else {
           $call153 = (___shgetc($f)|0);
           $cond155 = $call153;
          }
          $call156 = (_isspace($cond155)|0);
          $tobool157 = ($call156|0)==(0);
          if ($tobool157) {
           break;
          }
         }
         $43 = HEAP32[$shend145>>2]|0;
         $tobool161 = ($43|0)==(0|0);
         if ($tobool161) {
          $$pre385 = HEAP32[$rpos144>>2]|0;
          $48 = $$pre385;
         } else {
          $44 = HEAP32[$rpos144>>2]|0;
          $incdec$ptr164 = ((($44)) + -1|0);
          HEAP32[$rpos144>>2] = $incdec$ptr164;
          $45 = $incdec$ptr164;
          $48 = $45;
         }
         $46 = HEAP32[$shcnt167>>2]|0;
         $47 = HEAP32[$rend169>>2]|0;
         $sub$ptr$sub172 = (($46) + ($pos$0315))|0;
         $add173 = (($sub$ptr$sub172) + ($48))|0;
         $add174 = (($add173) - ($47))|0;
         $pos$1 = $add174;$width$1 = $width$0$lcssa;
        }
        }
        ___shlim($f,$width$1);
        $49 = HEAP32[$rpos144>>2]|0;
        $50 = HEAP32[$shend145>>2]|0;
        $cmp178 = ($49>>>0)<($50>>>0);
        if ($cmp178) {
         $incdec$ptr182 = ((($49)) + 1|0);
         HEAP32[$rpos144>>2] = $incdec$ptr182;
         $51 = $50;
        } else {
         $call185 = (___shgetc($f)|0);
         $cmp188 = ($call185|0)<(0);
         if ($cmp188) {
          $102 = $$;$narrow350 = $narrow;$s$7 = $$s$0;
          label = 137;
          break L6;
         }
         $$pre386 = HEAP32[$shend145>>2]|0;
         $51 = $$pre386;
        }
        $tobool193 = ($51|0)==(0|0);
        if (!($tobool193)) {
         $52 = HEAP32[$rpos144>>2]|0;
         $incdec$ptr196 = ((($52)) + -1|0);
         HEAP32[$rpos144>>2] = $incdec$ptr196;
        }
        L55: do {
         switch ($trunc<<24>>24) {
         case 91: case 99: case 115:  {
          $cmp200 = ($or$conv130|0)==(99);
          $53 = $or$conv130 | 16;
          $54 = ($53|0)==(115);
          L57: do {
           if ($54) {
            $cmp203 = ($or$conv130|0)==(115);
            _memset(($2|0),-1,256)|0;
            HEAP8[$scanset>>0] = 0;
            if ($cmp203) {
             HEAP8[$arrayidx215>>0] = 0;
             ;HEAP8[$arrayidx210>>0]=0|0;HEAP8[$arrayidx210+1>>0]=0|0;HEAP8[$arrayidx210+2>>0]=0|0;HEAP8[$arrayidx210+3>>0]=0|0;HEAP8[$arrayidx210+4>>0]=0|0;
             $p$9 = $p$5;
            } else {
             $p$9 = $p$5;
            }
           } else {
            $incdec$ptr218 = ((($p$5)) + 1|0);
            $55 = HEAP8[$incdec$ptr218>>0]|0;
            $cmp220 = ($55<<24>>24)==(94);
            $incdec$ptr223 = ((($p$5)) + 2|0);
            $invert$0 = $cmp220&1;
            $p$6 = $cmp220 ? $incdec$ptr223 : $incdec$ptr218;
            $56 = $cmp220&1;
            _memset(($3|0),($56|0),256)|0;
            HEAP8[$scanset>>0] = 0;
            $57 = HEAP8[$p$6>>0]|0;
            switch ($57<<24>>24) {
            case 45:  {
             $arrayidx244$sink = $arrayidx235;
             label = 64;
             break;
            }
            case 93:  {
             $arrayidx244$sink = $arrayidx244;
             label = 64;
             break;
            }
            default: {
             $$pre391 = $invert$0 ^ 1;
             $$pre392 = $$pre391&255;
             $conv285$pre$phiZ2D = $$pre392;$p$7$ph = $p$6;
            }
            }
            if ((label|0) == 64) {
             label = 0;
             $incdec$ptr241 = ((($p$6)) + 1|0);
             $sub242 = $invert$0 ^ 1;
             $conv243 = $sub242&255;
             HEAP8[$arrayidx244$sink>>0] = $conv243;
             $conv285$pre$phiZ2D = $conv243;$p$7$ph = $incdec$ptr241;
            }
            $p$7 = $p$7$ph;
            while(1) {
             $58 = HEAP8[$p$7>>0]|0;
             L69: do {
              switch ($58<<24>>24) {
              case 0:  {
               $102 = $$;$narrow350 = $narrow;$s$7 = $$s$0;
               label = 137;
               break L6;
               break;
              }
              case 93:  {
               $p$9 = $p$7;
               break L57;
               break;
              }
              case 45:  {
               $arrayidx259 = ((($p$7)) + 1|0);
               $59 = HEAP8[$arrayidx259>>0]|0;
               switch ($59<<24>>24) {
               case 93: case 0:  {
                $62 = 45;$p$8 = $p$7;
                break L69;
                break;
               }
               default: {
               }
               }
               $arrayidx269 = ((($p$7)) + -1|0);
               $60 = HEAP8[$arrayidx269>>0]|0;
               $cmp273307 = ($60&255)<($59&255);
               if ($cmp273307) {
                $conv270 = $60&255;
                $c$0308 = $conv270;
                while(1) {
                 $add278 = (($c$0308) + 1)|0;
                 $arrayidx279 = (($scanset) + ($add278)|0);
                 HEAP8[$arrayidx279>>0] = $conv285$pre$phiZ2D;
                 $61 = HEAP8[$arrayidx259>>0]|0;
                 $conv272 = $61&255;
                 $cmp273 = ($add278|0)<($conv272|0);
                 if ($cmp273) {
                  $c$0308 = $add278;
                 } else {
                  $62 = $61;$p$8 = $arrayidx259;
                  break;
                 }
                }
               } else {
                $62 = $59;$p$8 = $arrayidx259;
               }
               break;
              }
              default: {
               $62 = $58;$p$8 = $p$7;
              }
              }
             } while(0);
             $conv286 = $62&255;
             $add287 = (($conv286) + 1)|0;
             $arrayidx288 = (($scanset) + ($add287)|0);
             HEAP8[$arrayidx288>>0] = $conv285$pre$phiZ2D;
             $incdec$ptr290 = ((($p$8)) + 1|0);
             $p$7 = $incdec$ptr290;
            }
           }
          } while(0);
          $add296 = (($width$1) + 1)|0;
          $cond299 = $cmp200 ? $add296 : 31;
          $cmp300 = ($$size$0|0)==(1);
          L77: do {
           if ($cmp300) {
            if ($narrow) {
             $mul305 = $cond299 << 2;
             $call306 = (_malloc($mul305)|0);
             $tobool307 = ($call306|0)==(0|0);
             if ($tobool307) {
              $102 = 0;$narrow350 = 1;$s$7 = 0;
              label = 137;
              break L6;
             } else {
              $104 = $call306;
             }
            } else {
             $104 = $dest$0;
            }
            HEAP32[$st>>2] = 0;
            HEAP32[$$compoundliteral$sroa$2$0$$sroa_idx8>>2] = 0;
            $$ph = $104;$i$0$ph = 0;$k$0$ph = $cond299;
            L82: while(1) {
             $tobool335 = ($$ph|0)==(0|0);
             $i$0$ph236 = $i$0$ph;
             while(1) {
              L86: while(1) {
               $63 = HEAP32[$rpos144>>2]|0;
               $64 = HEAP32[$shend145>>2]|0;
               $cmp315 = ($63>>>0)<($64>>>0);
               if ($cmp315) {
                $incdec$ptr319 = ((($63)) + 1|0);
                HEAP32[$rpos144>>2] = $incdec$ptr319;
                $65 = HEAP8[$63>>0]|0;
                $conv320 = $65&255;
                $cond324 = $conv320;
               } else {
                $call322 = (___shgetc($f)|0);
                $cond324 = $call322;
               }
               $add325 = (($cond324) + 1)|0;
               $arrayidx326 = (($scanset) + ($add325)|0);
               $66 = HEAP8[$arrayidx326>>0]|0;
               $tobool327 = ($66<<24>>24)==(0);
               if ($tobool327) {
                break L82;
               }
               $conv330 = $cond324&255;
               HEAP8[$$compoundliteral329>>0] = $conv330;
               $call331 = (_mbrtowc($wc,$$compoundliteral329,1,$st)|0);
               switch ($call331|0) {
               case -1:  {
                $102 = $$ph;$narrow350 = $narrow;$s$7 = 0;
                label = 137;
                break L6;
                break;
               }
               case -2:  {
                break;
               }
               default: {
                break L86;
               }
               }
              }
              if ($tobool335) {
               $i$1 = $i$0$ph236;
              } else {
               $arrayidx338 = (($$ph) + ($i$0$ph236<<2)|0);
               $inc337 = (($i$0$ph236) + 1)|0;
               $67 = HEAP32[$wc>>2]|0;
               HEAP32[$arrayidx338>>2] = $67;
               $i$1 = $inc337;
              }
              $cmp342 = ($i$1|0)==($k$0$ph|0);
              $or$cond = $narrow & $cmp342;
              if ($or$cond) {
               break;
              } else {
               $i$0$ph236 = $i$1;
              }
             }
             $factor232 = $k$0$ph << 1;
             $add346 = $factor232 | 1;
             $mul347 = $add346 << 2;
             $call348 = (_realloc($$ph,$mul347)|0);
             $tobool349 = ($call348|0)==(0|0);
             if ($tobool349) {
              $102 = $$ph;$narrow350 = 1;$s$7 = 0;
              label = 137;
              break L6;
             } else {
              $i$0$ph$phi = $k$0$ph;$$ph = $call348;$k$0$ph = $add346;$i$0$ph = $i$0$ph$phi;
             }
            }
            $call354 = (_mbsinit($st)|0);
            $tobool355 = ($call354|0)==(0);
            if ($tobool355) {
             $102 = $$ph;$narrow350 = $narrow;$s$7 = 0;
             label = 137;
             break L6;
            } else {
             $105 = $$ph;$i$4 = $i$0$ph236;$s$4 = 0;$wcs$5 = $$ph;
            }
           } else {
            if ($narrow) {
             $call361 = (_malloc($cond299)|0);
             $tobool362 = ($call361|0)==(0|0);
             if ($tobool362) {
              $102 = 0;$narrow350 = 1;$s$7 = 0;
              label = 137;
              break L6;
             } else {
              $i$2$ph = 0;$k$1$ph = $cond299;$s$2$ph = $call361;
             }
             while(1) {
              $i$2 = $i$2$ph;
              while(1) {
               $68 = HEAP32[$rpos144>>2]|0;
               $69 = HEAP32[$shend145>>2]|0;
               $cmp368 = ($68>>>0)<($69>>>0);
               if ($cmp368) {
                $incdec$ptr372 = ((($68)) + 1|0);
                HEAP32[$rpos144>>2] = $incdec$ptr372;
                $70 = HEAP8[$68>>0]|0;
                $conv373 = $70&255;
                $cond377 = $conv373;
               } else {
                $call375 = (___shgetc($f)|0);
                $cond377 = $call375;
               }
               $add378 = (($cond377) + 1)|0;
               $arrayidx379 = (($scanset) + ($add378)|0);
               $71 = HEAP8[$arrayidx379>>0]|0;
               $tobool380 = ($71<<24>>24)==(0);
               if ($tobool380) {
                $105 = 0;$i$4 = $i$2;$s$4 = $s$2$ph;$wcs$5 = 0;
                break L77;
               }
               $conv382 = $cond377&255;
               $inc383 = (($i$2) + 1)|0;
               $arrayidx384 = (($s$2$ph) + ($i$2)|0);
               HEAP8[$arrayidx384>>0] = $conv382;
               $cmp385 = ($inc383|0)==($k$1$ph|0);
               if ($cmp385) {
                break;
               } else {
                $i$2 = $inc383;
               }
              }
              $factor = $k$1$ph << 1;
              $add389 = $factor | 1;
              $call392 = (_realloc($s$2$ph,$add389)|0);
              $tobool393 = ($call392|0)==(0|0);
              if ($tobool393) {
               $102 = 0;$narrow350 = 1;$s$7 = $s$2$ph;
               label = 137;
               break L6;
              } else {
               $i$2$ph$phi = $k$1$ph;$k$1$ph = $add389;$s$2$ph = $call392;$i$2$ph = $i$2$ph$phi;
              }
             }
            }
            $tobool402 = ($dest$0|0)==(0|0);
            if ($tobool402) {
             $77 = $51;
             while(1) {
              $76 = HEAP32[$rpos144>>2]|0;
              $cmp429 = ($76>>>0)<($77>>>0);
              if ($cmp429) {
               $incdec$ptr433 = ((($76)) + 1|0);
               HEAP32[$rpos144>>2] = $incdec$ptr433;
               $78 = HEAP8[$76>>0]|0;
               $conv434 = $78&255;
               $cond438 = $conv434;
              } else {
               $call436 = (___shgetc($f)|0);
               $cond438 = $call436;
              }
              $add439 = (($cond438) + 1)|0;
              $arrayidx440 = (($scanset) + ($add439)|0);
              $79 = HEAP8[$arrayidx440>>0]|0;
              $tobool441 = ($79<<24>>24)==(0);
              if ($tobool441) {
               $105 = 0;$i$4 = 0;$s$4 = 0;$wcs$5 = 0;
               break L77;
              }
              $$pre389 = HEAP32[$shend145>>2]|0;
              $77 = $$pre389;
             }
            } else {
             $73 = $51;$i$3 = 0;
             while(1) {
              $72 = HEAP32[$rpos144>>2]|0;
              $cmp407 = ($72>>>0)<($73>>>0);
              if ($cmp407) {
               $incdec$ptr411 = ((($72)) + 1|0);
               HEAP32[$rpos144>>2] = $incdec$ptr411;
               $74 = HEAP8[$72>>0]|0;
               $conv412 = $74&255;
               $cond416 = $conv412;
              } else {
               $call414 = (___shgetc($f)|0);
               $cond416 = $call414;
              }
              $add417 = (($cond416) + 1)|0;
              $arrayidx418 = (($scanset) + ($add417)|0);
              $75 = HEAP8[$arrayidx418>>0]|0;
              $tobool419 = ($75<<24>>24)==(0);
              if ($tobool419) {
               $105 = 0;$i$4 = $i$3;$s$4 = $dest$0;$wcs$5 = 0;
               break L77;
              }
              $conv421 = $cond416&255;
              $inc422 = (($i$3) + 1)|0;
              $arrayidx423 = (($dest$0) + ($i$3)|0);
              HEAP8[$arrayidx423>>0] = $conv421;
              $$pre388 = HEAP32[$shend145>>2]|0;
              $73 = $$pre388;$i$3 = $inc422;
             }
            }
           }
          } while(0);
          $80 = HEAP32[$shend145>>2]|0;
          $tobool448 = ($80|0)==(0|0);
          if ($tobool448) {
           $$pre390 = HEAP32[$rpos144>>2]|0;
           $85 = $$pre390;
          } else {
           $81 = HEAP32[$rpos144>>2]|0;
           $incdec$ptr451 = ((($81)) + -1|0);
           HEAP32[$rpos144>>2] = $incdec$ptr451;
           $82 = $incdec$ptr451;
           $85 = $82;
          }
          $83 = HEAP32[$shcnt167>>2]|0;
          $84 = HEAP32[$rend169>>2]|0;
          $sub$ptr$sub459 = (($85) - ($84))|0;
          $add460 = (($sub$ptr$sub459) + ($83))|0;
          $tobool461 = ($add460|0)==(0);
          if ($tobool461) {
           $$ph245 = $105;$s$9$ph = $s$4;
           label = 139;
           break L6;
          }
          $cmp200$not = $cmp200 ^ 1;
          $cmp474 = ($add460|0)==($width$1|0);
          $or$cond223 = $cmp474 | $cmp200$not;
          if (!($or$cond223)) {
           $$ph245 = $105;$s$9$ph = $s$4;
           label = 139;
           break L6;
          }
          do {
           if ($narrow) {
            if ($cmp300) {
             HEAP32[$dest$0>>2] = $wcs$5;
             break;
            } else {
             HEAP32[$dest$0>>2] = $s$4;
             break;
            }
           }
          } while(0);
          if ($cmp200) {
           $103 = $105;$p$10 = $p$9;$s$5 = $s$4;
          } else {
           $tobool489 = ($wcs$5|0)==(0|0);
           if (!($tobool489)) {
            $arrayidx491 = (($wcs$5) + ($i$4<<2)|0);
            HEAP32[$arrayidx491>>2] = 0;
           }
           $tobool493 = ($s$4|0)==(0|0);
           if ($tobool493) {
            $103 = $105;$p$10 = $p$9;$s$5 = 0;
            break L55;
           }
           $arrayidx495 = (($s$4) + ($i$4)|0);
           HEAP8[$arrayidx495>>0] = 0;
           $103 = $105;$p$10 = $p$9;$s$5 = $s$4;
          }
          break;
         }
         case 120: case 88: case 112:  {
          $base$0 = 16;
          label = 125;
          break;
         }
         case 111:  {
          $base$0 = 8;
          label = 125;
          break;
         }
         case 117: case 100:  {
          $base$0 = 10;
          label = 125;
          break;
         }
         case 105:  {
          $base$0 = 0;
          label = 125;
          break;
         }
         case 71: case 103: case 70: case 102: case 69: case 101: case 65: case 97:  {
          $call522 = (+___floatscan($f,$$size$0,0));
          $92 = HEAP32[$shcnt167>>2]|0;
          $93 = HEAP32[$rpos144>>2]|0;
          $94 = HEAP32[$rend169>>2]|0;
          $sub$ptr$sub528221 = (($94) - ($93))|0;
          $tobool530 = ($92|0)==($sub$ptr$sub528221|0);
          if ($tobool530) {
           $$ph245 = $$;$s$9$ph = $$s$0;
           label = 139;
           break L6;
          }
          $tobool533 = ($dest$0|0)==(0|0);
          if ($tobool533) {
           $103 = $$;$p$10 = $p$5;$s$5 = $$s$0;
          } else {
           switch ($$size$0|0) {
           case 0:  {
            $conv536 = $call522;
            HEAPF32[$dest$0>>2] = $conv536;
            $103 = $$;$p$10 = $p$5;$s$5 = $$s$0;
            break L55;
            break;
           }
           case 1:  {
            HEAPF64[$dest$0>>3] = $call522;
            $103 = $$;$p$10 = $p$5;$s$5 = $$s$0;
            break L55;
            break;
           }
           case 2:  {
            HEAPF64[$dest$0>>3] = $call522;
            $103 = $$;$p$10 = $p$5;$s$5 = $$s$0;
            break L55;
            break;
           }
           default: {
            $103 = $$;$p$10 = $p$5;$s$5 = $$s$0;
            break L55;
           }
           }
          }
          break;
         }
         default: {
          $103 = $$;$p$10 = $p$5;$s$5 = $$s$0;
         }
         }
        } while(0);
        do {
         if ((label|0) == 125) {
          label = 0;
          $86 = (___intscan($f,$base$0,0,-1,-1)|0);
          $87 = tempRet0;
          $88 = HEAP32[$shcnt167>>2]|0;
          $89 = HEAP32[$rpos144>>2]|0;
          $90 = HEAP32[$rend169>>2]|0;
          $sub$ptr$sub508222 = (($90) - ($89))|0;
          $tobool510 = ($88|0)==($sub$ptr$sub508222|0);
          if ($tobool510) {
           $$ph245 = $$;$s$9$ph = $$s$0;
           label = 139;
           break L6;
          }
          $cmp513 = ($or$conv130|0)==(112);
          $or$cond1 = $tobool103 & $cmp513;
          if ($or$cond1) {
           $91 = $86;
           HEAP32[$dest$0>>2] = $91;
           $103 = $$;$p$10 = $p$5;$s$5 = $$s$0;
           break;
          } else {
           _store_int($dest$0,$$size$0,$86,$87);
           $103 = $$;$p$10 = $p$5;$s$5 = $$s$0;
           break;
          }
         }
        } while(0);
        $95 = HEAP32[$shcnt167>>2]|0;
        $96 = HEAP32[$rpos144>>2]|0;
        $97 = HEAP32[$rend169>>2]|0;
        $sub$ptr$sub547 = (($95) + ($pos$1))|0;
        $add548 = (($sub$ptr$sub547) + ($96))|0;
        $add549 = (($add548) - ($97))|0;
        $inc552 = $tobool103&1;
        $matches$0$inc552 = (($inc552) + ($matches$0312))|0;
        $100 = $103;$matches$1 = $matches$0$inc552;$p$11 = $p$10;$pos$2 = $add549;$s$6 = $s$5;
        break L8;
       }
      } while(0);
      $conv40 = $cmp31&1;
      $add$ptr = (($p$0316) + ($conv40)|0);
      ___shlim($f,0);
      $16 = HEAP32[$rpos144>>2]|0;
      $17 = HEAP32[$shend145>>2]|0;
      $cmp43 = ($16>>>0)<($17>>>0);
      if ($cmp43) {
       $incdec$ptr47 = ((($16)) + 1|0);
       HEAP32[$rpos144>>2] = $incdec$ptr47;
       $18 = HEAP8[$16>>0]|0;
       $conv48 = $18&255;
       $cond52 = $conv48;
      } else {
       $call50 = (___shgetc($f)|0);
       $cond52 = $call50;
      }
      $19 = HEAP8[$add$ptr>>0]|0;
      $conv53 = $19&255;
      $cmp54 = ($cond52|0)==($conv53|0);
      if (!($cmp54)) {
       label = 22;
       break L6;
      }
      $inc = (($pos$0315) + 1)|0;
      $100 = $32;$matches$1 = $matches$0312;$p$11 = $add$ptr;$pos$2 = $inc;$s$6 = $s$0310;
     } else {
      $p$1 = $p$0316;
      while(1) {
       $arrayidx = ((($p$1)) + 1|0);
       $5 = HEAP8[$arrayidx>>0]|0;
       $conv3 = $5&255;
       $call4 = (_isspace($conv3)|0);
       $tobool5 = ($call4|0)==(0);
       if ($tobool5) {
        break;
       } else {
        $p$1 = $arrayidx;
       }
      }
      ___shlim($f,0);
      while(1) {
       $6 = HEAP32[$rpos144>>2]|0;
       $7 = HEAP32[$shend145>>2]|0;
       $cmp7 = ($6>>>0)<($7>>>0);
       if ($cmp7) {
        $incdec$ptr11 = ((($6)) + 1|0);
        HEAP32[$rpos144>>2] = $incdec$ptr11;
        $8 = HEAP8[$6>>0]|0;
        $conv12 = $8&255;
        $cond16 = $conv12;
       } else {
        $call14 = (___shgetc($f)|0);
        $cond16 = $call14;
       }
       $call17 = (_isspace($cond16)|0);
       $tobool18 = ($call17|0)==(0);
       if ($tobool18) {
        break;
       }
      }
      $9 = HEAP32[$shend145>>2]|0;
      $tobool22 = ($9|0)==(0|0);
      if ($tobool22) {
       $$pre = HEAP32[$rpos144>>2]|0;
       $14 = $$pre;
      } else {
       $10 = HEAP32[$rpos144>>2]|0;
       $incdec$ptr25 = ((($10)) + -1|0);
       HEAP32[$rpos144>>2] = $incdec$ptr25;
       $11 = $incdec$ptr25;
       $14 = $11;
      }
      $12 = HEAP32[$shcnt167>>2]|0;
      $13 = HEAP32[$rend169>>2]|0;
      $sub$ptr$sub = (($12) + ($pos$0315))|0;
      $add = (($sub$ptr$sub) + ($14))|0;
      $add29 = (($add) - ($13))|0;
      $100 = $32;$matches$1 = $matches$0312;$p$11 = $p$1;$pos$2 = $add29;$s$6 = $s$0310;
     }
    } while(0);
    $incdec$ptr555 = ((($p$11)) + 1|0);
    $98 = HEAP8[$incdec$ptr555>>0]|0;
    $tobool = ($98<<24>>24)==(0);
    if ($tobool) {
     $matches$3 = $matches$1;
     break L4;
    } else {
     $32 = $100;$4 = $98;$matches$0312 = $matches$1;$p$0316 = $incdec$ptr555;$pos$0315 = $pos$2;$s$0310 = $s$6;
    }
   }
   if ((label|0) == 22) {
    $20 = HEAP32[$shend145>>2]|0;
    $tobool58 = ($20|0)==(0|0);
    if (!($tobool58)) {
     $21 = HEAP32[$rpos144>>2]|0;
     $incdec$ptr61 = ((($21)) + -1|0);
     HEAP32[$rpos144>>2] = $incdec$ptr61;
    }
    $cmp64 = ($cond52|0)>(-1);
    $tobool558 = ($matches$0312|0)!=(0);
    $or$cond2 = $tobool558 | $cmp64;
    if ($or$cond2) {
     $matches$3 = $matches$0312;
     break;
    } else {
     $101 = $32;$alloc$1 = 0;$s$8 = $s$0310;
     label = 138;
    }
   }
   else if ((label|0) == 137) {
    $lnot$ext$$le326 = $narrow350&1;
    $tobool558$old = ($matches$0312|0)==(0);
    if ($tobool558$old) {
     $101 = $102;$alloc$1 = $lnot$ext$$le326;$s$8 = $s$7;
     label = 138;
    } else {
     $99 = $102;$alloc$2 = $lnot$ext$$le326;$matches$2 = $matches$0312;$s$9 = $s$7;
    }
   }
   else if ((label|0) == 139) {
    $lnot$ext$$le324 = $narrow&1;
    $99 = $$ph245;$alloc$2 = $lnot$ext$$le324;$matches$2 = $matches$0312;$s$9 = $s$9$ph;
   }
   if ((label|0) == 138) {
    $99 = $101;$alloc$2 = $alloc$1;$matches$2 = -1;$s$9 = $s$8;
   }
   $tobool561 = ($alloc$2|0)==(0);
   if ($tobool561) {
    $matches$3 = $matches$2;
   } else {
    _free($s$9);
    _free($99);
    $matches$3 = $matches$2;
   }
  }
 } while(0);
 $tobool565 = ($cond|0)==(0);
 if (!($tobool565)) {
  ___unlockfile($f);
 }
 STACKTOP = sp;return ($matches$3|0);
}
function _arg_n($ap,$n) {
 $ap = $ap|0;
 $n = $n|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $ap2 = 0, $arglist_current = 0, $arglist_next = 0, $cmp = 0, $dec = 0, $expanded = 0, $expanded1 = 0, $expanded3 = 0, $expanded4 = 0, $expanded5 = 0, $i$0 = 0, $vacopy_currentptr = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $ap2 = sp;
 $vacopy_currentptr = HEAP32[$ap>>2]|0;
 HEAP32[$ap2>>2] = $vacopy_currentptr;
 $i$0 = $n;
 while(1) {
  $cmp = ($i$0>>>0)>(1);
  $arglist_current = HEAP32[$ap2>>2]|0;
  $0 = $arglist_current;
  $1 = ((0) + 4|0);
  $expanded1 = $1;
  $expanded = (($expanded1) - 1)|0;
  $2 = (($0) + ($expanded))|0;
  $3 = ((0) + 4|0);
  $expanded5 = $3;
  $expanded4 = (($expanded5) - 1)|0;
  $expanded3 = $expanded4 ^ -1;
  $4 = $2 & $expanded3;
  $5 = $4;
  $6 = HEAP32[$5>>2]|0;
  $arglist_next = ((($5)) + 4|0);
  HEAP32[$ap2>>2] = $arglist_next;
  $dec = (($i$0) + -1)|0;
  if ($cmp) {
   $i$0 = $dec;
  } else {
   break;
  }
 }
 STACKTOP = sp;return ($6|0);
}
function _store_int($dest,$size,$0,$1) {
 $dest = $dest|0;
 $size = $size|0;
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $tobool = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $tobool = ($dest|0)==(0|0);
 L1: do {
  if (!($tobool)) {
   switch ($size|0) {
   case -2:  {
    $2 = $0&255;
    HEAP8[$dest>>0] = $2;
    break L1;
    break;
   }
   case -1:  {
    $3 = $0&65535;
    HEAP16[$dest>>1] = $3;
    break L1;
    break;
   }
   case 0:  {
    HEAP32[$dest>>2] = $0;
    break L1;
    break;
   }
   case 1:  {
    HEAP32[$dest>>2] = $0;
    break L1;
    break;
   }
   case 3:  {
    $4 = $dest;
    $5 = $4;
    HEAP32[$5>>2] = $0;
    $6 = (($4) + 4)|0;
    $7 = $6;
    HEAP32[$7>>2] = $1;
    break L1;
    break;
   }
   default: {
    break L1;
   }
   }
  }
 } while(0);
 return;
}
function _mbsinit($st) {
 $st = $st|0;
 var $0 = 0, $1 = 0, $lnot = 0, $lor$ext = 0, $tobool = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $tobool = ($st|0)==(0|0);
 if ($tobool) {
  $1 = 1;
 } else {
  $0 = HEAP32[$st>>2]|0;
  $lnot = ($0|0)==(0);
  $1 = $lnot;
 }
 $lor$ext = $1&1;
 return ($lor$ext|0);
}
function ___string_read($f,$buf,$len) {
 $f = $f|0;
 $buf = $buf|0;
 $len = $len|0;
 var $0 = 0, $add = 0, $add$ptr = 0, $add$ptr3 = 0, $call = 0, $cmp = 0, $cookie = 0, $k$0 = 0, $k$0$len = 0, $rend = 0, $rpos = 0, $sub$ptr$lhs$cast = 0, $sub$ptr$rhs$cast = 0, $sub$ptr$sub = 0, $tobool = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $cookie = ((($f)) + 84|0);
 $0 = HEAP32[$cookie>>2]|0;
 $add = (($len) + 256)|0;
 $call = (_memchr($0,0,$add)|0);
 $tobool = ($call|0)==(0|0);
 $sub$ptr$lhs$cast = $call;
 $sub$ptr$rhs$cast = $0;
 $sub$ptr$sub = (($sub$ptr$lhs$cast) - ($sub$ptr$rhs$cast))|0;
 $k$0 = $tobool ? $add : $sub$ptr$sub;
 $cmp = ($k$0>>>0)<($len>>>0);
 $k$0$len = $cmp ? $k$0 : $len;
 _memcpy(($buf|0),($0|0),($k$0$len|0))|0;
 $add$ptr = (($0) + ($k$0$len)|0);
 $rpos = ((($f)) + 4|0);
 HEAP32[$rpos>>2] = $add$ptr;
 $add$ptr3 = (($0) + ($k$0)|0);
 $rend = ((($f)) + 8|0);
 HEAP32[$rend>>2] = $add$ptr3;
 HEAP32[$cookie>>2] = $add$ptr3;
 return ($k$0$len|0);
}
function _socket($domain,$type,$protocol) {
 $domain = $domain|0;
 $type = $type|0;
 $protocol = $protocol|0;
 var $$compoundliteral = 0, $$compoundliteral11 = 0, $$old = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $and = 0, $and14 = 0, $and24 = 0, $and29 = 0, $arrayinit$element = 0, $arrayinit$element1 = 0, $arrayinit$element13 = 0, $arrayinit$element15 = 0, $arrayinit$element16 = 0, $arrayinit$element17 = 0, $arrayinit$element18 = 0, $arrayinit$element2 = 0, $arrayinit$element3 = 0;
 var $arrayinit$element4 = 0, $call = 0, $call20 = 0, $call21 = 0, $call5 = 0, $call6 = 0, $call8 = 0, $cmp = 0, $cmp22 = 0, $cmp7 = 0, $cmp9 = 0, $or$cond = 0, $retval$0 = 0, $tobool = 0, $tobool$old = 0, $tobool25 = 0, $tobool30 = 0, $vararg_buffer = 0, $vararg_buffer11 = 0, $vararg_buffer2 = 0;
 var $vararg_buffer6 = 0, $vararg_ptr1 = 0, $vararg_ptr10 = 0, $vararg_ptr14 = 0, $vararg_ptr15 = 0, $vararg_ptr5 = 0, $vararg_ptr9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(96|0);
 $vararg_buffer11 = sp + 32|0;
 $vararg_buffer6 = sp + 16|0;
 $vararg_buffer2 = sp + 8|0;
 $vararg_buffer = sp;
 $$compoundliteral = sp + 72|0;
 $$compoundliteral11 = sp + 48|0;
 HEAP32[$$compoundliteral>>2] = $domain;
 $arrayinit$element = ((($$compoundliteral)) + 4|0);
 HEAP32[$arrayinit$element>>2] = $type;
 $arrayinit$element1 = ((($$compoundliteral)) + 8|0);
 HEAP32[$arrayinit$element1>>2] = $protocol;
 $arrayinit$element2 = ((($$compoundliteral)) + 12|0);
 HEAP32[$arrayinit$element2>>2] = 0;
 $arrayinit$element3 = ((($$compoundliteral)) + 16|0);
 HEAP32[$arrayinit$element3>>2] = 0;
 $arrayinit$element4 = ((($$compoundliteral)) + 20|0);
 HEAP32[$arrayinit$element4>>2] = 0;
 $0 = $$compoundliteral;
 HEAP32[$vararg_buffer>>2] = 1;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $0;
 $call = (___syscall102(102,($vararg_buffer|0))|0);
 $call5 = (___syscall_ret($call)|0);
 $cmp = ($call5|0)<(0);
 do {
  if ($cmp) {
   $call6 = (___errno_location()|0);
   $1 = HEAP32[$call6>>2]|0;
   $cmp7 = ($1|0)==(22);
   if ($cmp7) {
    $$old = $type & 526336;
    $tobool$old = ($$old|0)==(0);
    if ($tobool$old) {
     $retval$0 = $call5;
     break;
    }
   } else {
    $call8 = (___errno_location()|0);
    $2 = HEAP32[$call8>>2]|0;
    $cmp9 = ($2|0)!=(93);
    $and = $type & 526336;
    $tobool = ($and|0)==(0);
    $or$cond = $tobool | $cmp9;
    if ($or$cond) {
     $retval$0 = $call5;
     break;
    }
   }
   HEAP32[$$compoundliteral11>>2] = $domain;
   $arrayinit$element13 = ((($$compoundliteral11)) + 4|0);
   $and14 = $type & -526337;
   HEAP32[$arrayinit$element13>>2] = $and14;
   $arrayinit$element15 = ((($$compoundliteral11)) + 8|0);
   HEAP32[$arrayinit$element15>>2] = $protocol;
   $arrayinit$element16 = ((($$compoundliteral11)) + 12|0);
   HEAP32[$arrayinit$element16>>2] = 0;
   $arrayinit$element17 = ((($$compoundliteral11)) + 16|0);
   HEAP32[$arrayinit$element17>>2] = 0;
   $arrayinit$element18 = ((($$compoundliteral11)) + 20|0);
   HEAP32[$arrayinit$element18>>2] = 0;
   $3 = $$compoundliteral11;
   HEAP32[$vararg_buffer2>>2] = 1;
   $vararg_ptr5 = ((($vararg_buffer2)) + 4|0);
   HEAP32[$vararg_ptr5>>2] = $3;
   $call20 = (___syscall102(102,($vararg_buffer2|0))|0);
   $call21 = (___syscall_ret($call20)|0);
   $cmp22 = ($call21|0)<(0);
   if ($cmp22) {
    $retval$0 = $call21;
   } else {
    $and24 = $type & 524288;
    $tobool25 = ($and24|0)==(0);
    if (!($tobool25)) {
     HEAP32[$vararg_buffer6>>2] = $call21;
     $vararg_ptr9 = ((($vararg_buffer6)) + 4|0);
     HEAP32[$vararg_ptr9>>2] = 2;
     $vararg_ptr10 = ((($vararg_buffer6)) + 8|0);
     HEAP32[$vararg_ptr10>>2] = 1;
     (___syscall221(221,($vararg_buffer6|0))|0);
    }
    $and29 = $type & 2048;
    $tobool30 = ($and29|0)==(0);
    if ($tobool30) {
     $retval$0 = $call21;
    } else {
     HEAP32[$vararg_buffer11>>2] = $call21;
     $vararg_ptr14 = ((($vararg_buffer11)) + 4|0);
     HEAP32[$vararg_ptr14>>2] = 4;
     $vararg_ptr15 = ((($vararg_buffer11)) + 8|0);
     HEAP32[$vararg_ptr15>>2] = 2048;
     (___syscall221(221,($vararg_buffer11|0))|0);
     $retval$0 = $call21;
    }
   }
  } else {
   $retval$0 = $call5;
  }
 } while(0);
 STACKTOP = sp;return ($retval$0|0);
}
function _sendto($fd,$buf,$len,$flags,$addr,$alen) {
 $fd = $fd|0;
 $buf = $buf|0;
 $len = $len|0;
 $flags = $flags|0;
 $addr = $addr|0;
 $alen = $alen|0;
 var $$compoundliteral = 0, $0 = 0, $1 = 0, $2 = 0, $arrayinit$element = 0, $arrayinit$element1 = 0, $arrayinit$element2 = 0, $arrayinit$element3 = 0, $arrayinit$element4 = 0, $call = 0, $call5 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $vararg_buffer = sp;
 $$compoundliteral = sp + 8|0;
 HEAP32[$$compoundliteral>>2] = $fd;
 $arrayinit$element = ((($$compoundliteral)) + 4|0);
 $0 = $buf;
 HEAP32[$arrayinit$element>>2] = $0;
 $arrayinit$element1 = ((($$compoundliteral)) + 8|0);
 HEAP32[$arrayinit$element1>>2] = $len;
 $arrayinit$element2 = ((($$compoundliteral)) + 12|0);
 HEAP32[$arrayinit$element2>>2] = $flags;
 $arrayinit$element3 = ((($$compoundliteral)) + 16|0);
 $1 = $addr;
 HEAP32[$arrayinit$element3>>2] = $1;
 $arrayinit$element4 = ((($$compoundliteral)) + 20|0);
 HEAP32[$arrayinit$element4>>2] = $alen;
 $2 = $$compoundliteral;
 HEAP32[$vararg_buffer>>2] = 11;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $2;
 $call = (___syscall102(102,($vararg_buffer|0))|0);
 $call5 = (___syscall_ret($call)|0);
 STACKTOP = sp;return ($call5|0);
}
function _mbrlen($s,$n,$st) {
 $s = $s|0;
 $n = $n|0;
 $st = $st|0;
 var $call = 0, $cond = 0, $tobool = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $tobool = ($st|0)!=(0|0);
 $cond = $tobool ? $st : 19580;
 $call = (_mbrtowc(0,$s,$n,$cond)|0);
 return ($call|0);
}
function _mbsnrtowcs($wcs,$src,$n,$wn,$st) {
 $wcs = $wcs|0;
 $src = $src|0;
 $n = $n|0;
 $wn = $wn|0;
 $st = $st|0;
 var $$cast = 0, $$pr$pre = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $add$ptr = 0, $add$ptr36 = 0, $add15 = 0, $add25 = 0, $call = 0, $call24 = 0, $cmp = 0, $cmp11 = 0;
 var $cmp26 = 0, $cmp3 = 0, $cnt$055 = 0, $cnt$1 = 0, $cnt$248 = 0, $cnt$3 = 0, $dec = 0, $div = 0, $inc = 0, $incdec$ptr = 0, $n$addr$054 = 0, $n$addr$1 = 0, $n$addr$247 = 0, $or$cond = 0, $or$cond52 = 0, $s = 0, $sub = 0, $sub13 = 0, $sub37 = 0, $tobool = 0;
 var $tobool1 = 0, $tobool150 = 0, $tobool16 = 0, $tobool19 = 0, $tobool1944 = 0, $tobool2 = 0, $tobool21 = 0, $tobool2145 = 0, $tobool251 = 0, $tobool7 = 0, $wbuf = 0, $wcs$arraydecay = 0, $wn$ = 0, $wn$addr$0$div = 0, $wn$addr$053 = 0, $wn$addr$1 = 0, $wn$addr$2 = 0, $wn$addr$346 = 0, $ws$040 = 0, $ws$056 = 0;
 var $ws$1 = 0, $ws$249 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1040|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(1040|0);
 $wbuf = sp + 8|0;
 $s = sp;
 $0 = HEAP32[$src>>2]|0;
 HEAP32[$s>>2] = $0;
 $tobool = ($wcs|0)!=(0|0);
 $wn$ = $tobool ? $wn : 256;
 $wcs$arraydecay = $tobool ? $wcs : $wbuf;
 $$cast = $0;
 $tobool150 = ($0|0)!=(0);
 $tobool251 = ($wn$|0)!=(0);
 $or$cond52 = $tobool251 & $tobool150;
 L1: do {
  if ($or$cond52) {
   $9 = $$cast;$cnt$055 = 0;$n$addr$054 = $n;$wn$addr$053 = $wn$;$ws$056 = $wcs$arraydecay;
   while(1) {
    $div = $n$addr$054 >>> 2;
    $cmp = ($div>>>0)>=($wn$addr$053>>>0);
    $cmp3 = ($n$addr$054>>>0)>(131);
    $1 = $cmp3 | $cmp;
    if (!($1)) {
     $3 = $9;$cnt$1 = $cnt$055;$n$addr$1 = $n$addr$054;$wn$addr$2 = $wn$addr$053;$ws$040 = $ws$056;
     break L1;
    }
    $wn$addr$0$div = $cmp ? $wn$addr$053 : $div;
    $sub = (($n$addr$054) - ($wn$addr$0$div))|0;
    $call = (_mbsrtowcs($ws$056,$s,$wn$addr$0$div,$st)|0);
    $tobool7 = ($call|0)==(-1);
    if ($tobool7) {
     break;
    }
    $cmp11 = ($ws$056|0)==($wbuf|0);
    $add$ptr = (($ws$056) + ($call<<2)|0);
    $sub13 = $cmp11 ? 0 : $call;
    $wn$addr$1 = (($wn$addr$053) - ($sub13))|0;
    $ws$1 = $cmp11 ? $ws$056 : $add$ptr;
    $add15 = (($call) + ($cnt$055))|0;
    $2 = HEAP32[$s>>2]|0;
    $tobool1 = ($2|0)!=(0|0);
    $tobool2 = ($wn$addr$1|0)!=(0);
    $or$cond = $tobool2 & $tobool1;
    if ($or$cond) {
     $9 = $2;$cnt$055 = $add15;$n$addr$054 = $sub;$wn$addr$053 = $wn$addr$1;$ws$056 = $ws$1;
    } else {
     $3 = $2;$cnt$1 = $add15;$n$addr$1 = $sub;$wn$addr$2 = $wn$addr$1;$ws$040 = $ws$1;
     break L1;
    }
   }
   $$pr$pre = HEAP32[$s>>2]|0;
   $3 = $$pr$pre;$cnt$1 = -1;$n$addr$1 = $sub;$wn$addr$2 = 0;$ws$040 = $ws$056;
  } else {
   $3 = $$cast;$cnt$1 = 0;$n$addr$1 = $n;$wn$addr$2 = $wn$;$ws$040 = $wcs$arraydecay;
  }
 } while(0);
 $tobool16 = ($3|0)==(0|0);
 L8: do {
  if ($tobool16) {
   $cnt$3 = $cnt$1;
  } else {
   $tobool1944 = ($wn$addr$2|0)!=(0);
   $tobool2145 = ($n$addr$1|0)!=(0);
   $4 = $tobool1944 & $tobool2145;
   if ($4) {
    $5 = $3;$cnt$248 = $cnt$1;$n$addr$247 = $n$addr$1;$wn$addr$346 = $wn$addr$2;$ws$249 = $ws$040;
    while(1) {
     $call24 = (_mbrtowc($ws$249,$5,$n$addr$247,$st)|0);
     $add25 = (($call24) + 2)|0;
     $cmp26 = ($add25>>>0)<(3);
     if ($cmp26) {
      break;
     }
     $6 = HEAP32[$s>>2]|0;
     $add$ptr36 = (($6) + ($call24)|0);
     HEAP32[$s>>2] = $add$ptr36;
     $sub37 = (($n$addr$247) - ($call24))|0;
     $incdec$ptr = ((($ws$249)) + 4|0);
     $dec = (($wn$addr$346) + -1)|0;
     $inc = (($cnt$248) + 1)|0;
     $tobool19 = ($dec|0)!=(0);
     $tobool21 = ($sub37|0)!=(0);
     $7 = $tobool19 & $tobool21;
     if ($7) {
      $5 = $add$ptr36;$cnt$248 = $inc;$n$addr$247 = $sub37;$wn$addr$346 = $dec;$ws$249 = $incdec$ptr;
     } else {
      $cnt$3 = $inc;
      break L8;
     }
    }
    switch ($call24|0) {
    case -1:  {
     $cnt$3 = -1;
     break L8;
     break;
    }
    case 0:  {
     HEAP32[$s>>2] = 0;
     $cnt$3 = $cnt$248;
     break L8;
     break;
    }
    default: {
     HEAP32[$st>>2] = 0;
     $cnt$3 = $cnt$248;
     break L8;
    }
    }
   } else {
    $cnt$3 = $cnt$1;
   }
  }
 } while(0);
 if ($tobool) {
  $8 = HEAP32[$s>>2]|0;
  HEAP32[$src>>2] = $8;
 }
 STACKTOP = sp;return ($cnt$3|0);
}
function _mbsrtowcs($ws,$src,$wn,$st) {
 $ws = $ws|0;
 $src = $src|0;
 $wn = $wn|0;
 $st = $st|0;
 var $$pre$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $add = 0, $add$ptr = 0, $add$ptr177 = 0, $add$ptr192 = 0, $add158 = 0, $and = 0, $and113 = 0, $and33 = 0;
 var $and33110 = 0, $and68 = 0, $and79 = 0, $arrayidx151 = 0, $arrayidx55 = 0, $c$2 = 0, $c$4 = 0, $c$5 = 0, $c$6 = 0, $call = 0, $call214 = 0, $call9 = 0, $cmp101 = 0, $cmp105 = 0, $cmp109 = 0, $cmp109$old = 0, $cmp134 = 0, $cmp144 = 0, $cmp174 = 0, $cmp189 = 0;
 var $cmp26 = 0, $cmp29 = 0, $cmp40 = 0, $cmp48 = 0, $cmp73 = 0, $cmp84 = 0, $conv118 = 0, $conv121 = 0, $conv124 = 0, $conv127 = 0, $conv132 = 0, $conv152 = 0, $conv172 = 0, $conv18 = 0, $conv187 = 0, $conv24 = 0, $conv38 = 0, $conv56 = 0, $conv99 = 0, $dec = 0;
 var $dec140 = 0, $dec202 = 0, $dec44 = 0, $dec92 = 0, $incdec$ptr = 0, $incdec$ptr117 = 0, $incdec$ptr119 = 0, $incdec$ptr120 = 0, $incdec$ptr122 = 0, $incdec$ptr123 = 0, $incdec$ptr125 = 0, $incdec$ptr126 = 0, $incdec$ptr128 = 0, $incdec$ptr137 = 0, $incdec$ptr139 = 0, $incdec$ptr148 = 0, $incdec$ptr163 = 0, $incdec$ptr165 = 0, $incdec$ptr180 = 0, $incdec$ptr19 = 0;
 var $incdec$ptr195 = 0, $incdec$ptr201 = 0, $incdec$ptr43 = 0, $incdec$ptr52 = 0, $incdec$ptr67 = 0, $incdec$ptr78 = 0, $incdec$ptr89 = 0, $lnot115 = 0, $lnot35 = 0, $lnot35111 = 0, $locale = 0, $not$tobool4 = 0, $or = 0, $or$cond = 0, $or109 = 0, $or112 = 0, $or159 = 0, $or168 = 0, $or183 = 0, $or198 = 0;
 var $or61 = 0, $rem = 0, $rem104 = 0, $retval$0 = 0, $s$0$lcssa = 0, $s$0102 = 0, $s$1 = 0, $s$1$ph = 0, $s$10 = 0, $s$11126 = 0, $s$1194 = 0, $s$2113 = 0, $s$3 = 0, $s$4 = 0, $s$5 = 0, $s$6$lcssa = 0, $s$6$ph = 0, $s$6106 = 0, $s$7 = 0, $s$8 = 0;
 var $s$9 = 0, $s$9$sink = 0, $shl = 0, $shl179 = 0, $shl194 = 0, $shr15391 = 0, $shr157 = 0, $shr60 = 0, $shr90 = 0, $sub = 0, $sub100 = 0, $sub111 = 0, $sub129 = 0, $sub133 = 0, $sub143 = 0, $sub154 = 0, $sub167 = 0, $sub173 = 0, $sub188 = 0, $sub212 = 0;
 var $sub25 = 0, $sub32 = 0, $sub32108 = 0, $sub36 = 0, $sub39 = 0, $sub47 = 0, $sub57 = 0, $tobool = 0, $tobool1 = 0, $tobool11 = 0, $tobool1199 = 0, $tobool14 = 0, $tobool161 = 0, $tobool170 = 0, $tobool185 = 0, $tobool2 = 0, $tobool205 = 0, $tobool207 = 0, $tobool209 = 0, $tobool215 = 0;
 var $tobool63 = 0, $tobool69 = 0, $tobool7 = 0, $tobool80 = 0, $tobool96 = 0, $tobool96103 = 0, $wn$addr$0100 = 0, $wn$addr$1 = 0, $wn$addr$1$ph = 0, $wn$addr$2112 = 0, $wn$addr$3 = 0, $wn$addr$4 = 0, $wn$addr$5$ph = 0, $wn$addr$5104 = 0, $wn$addr$6 = 0, $wn$addr$7 = 0, $wn$addr$8 = 0, $wn$addr$9 = 0, $wn$addr$9124 = 0, $ws$addr$0101 = 0;
 var $ws$addr$1$ph = 0, $ws$addr$1105 = 0, $ws$addr$2 = 0, $ws$addr$3 = 0, $ws$addr$4 = 0, $ws$addr$5 = 0, $ws$addr$5125 = 0, $ws$addr$593 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$src>>2]|0;
 $tobool = ($st|0)==(0|0);
 if ($tobool) {
  label = 5;
 } else {
  $1 = HEAP32[$st>>2]|0;
  $tobool1 = ($1|0)==(0);
  if ($tobool1) {
   label = 5;
  } else {
   $tobool2 = ($ws|0)==(0|0);
   if ($tobool2) {
    $c$2 = $1;$s$4 = $0;$wn$addr$4 = $wn;
    label = 25;
   } else {
    HEAP32[$st>>2] = 0;
    $c$4 = $1;$s$9 = $0;$wn$addr$8 = $wn;$ws$addr$4 = $ws;
    label = 43;
   }
  }
 }
 L5: do {
  if ((label|0) == 5) {
   $call = (___pthread_self_425()|0);
   $locale = ((($call)) + 188|0);
   $2 = HEAP32[$locale>>2]|0;
   $3 = HEAP32[$2>>2]|0;
   $not$tobool4 = ($3|0)==(0|0);
   $tobool7 = ($ws|0)!=(0|0);
   if (!($not$tobool4)) {
    if ($tobool7) {
     $s$6$ph = $0;$wn$addr$5$ph = $wn;$ws$addr$1$ph = $ws;
     label = 15;
     break;
    } else {
     $s$1$ph = $0;$wn$addr$1$ph = $wn;
     label = 14;
     break;
    }
   }
   if (!($tobool7)) {
    $call9 = (_strlen($0)|0);
    $retval$0 = $call9;
    label = 59;
    break;
   }
   $tobool1199 = ($wn|0)==(0);
   L13: do {
    if ($tobool1199) {
     $s$0$lcssa = $0;
    } else {
     $s$0102 = $0;$wn$addr$0100 = $wn;$ws$addr$0101 = $ws;
     while(1) {
      $4 = HEAP8[$s$0102>>0]|0;
      $tobool14 = ($4<<24>>24)==(0);
      if ($tobool14) {
       break;
      }
      $incdec$ptr = ((($s$0102)) + 1|0);
      $conv18 = $4 << 24 >> 24;
      $and = $conv18 & 57343;
      $incdec$ptr19 = ((($ws$addr$0101)) + 4|0);
      HEAP32[$ws$addr$0101>>2] = $and;
      $dec = (($wn$addr$0100) + -1)|0;
      $tobool11 = ($dec|0)==(0);
      if ($tobool11) {
       $s$0$lcssa = $incdec$ptr;
       break L13;
      } else {
       $s$0102 = $incdec$ptr;$wn$addr$0100 = $dec;$ws$addr$0101 = $incdec$ptr19;
      }
     }
     HEAP32[$ws$addr$0101>>2] = 0;
     HEAP32[$src>>2] = 0;
     $sub = (($wn) - ($wn$addr$0100))|0;
     $retval$0 = $sub;
     label = 59;
     break L5;
    }
   } while(0);
   HEAP32[$src>>2] = $s$0$lcssa;
   $retval$0 = $wn;
   label = 59;
  }
 } while(0);
 L19: while(1) {
  L20: do {
   if ((label|0) == 14) {
    label = 0;
    $s$1 = $s$1$ph;$wn$addr$1 = $wn$addr$1$ph;
    while(1) {
     $5 = HEAP8[$s$1>>0]|0;
     $conv24 = $5&255;
     $sub25 = (($conv24) + -1)|0;
     $cmp26 = ($sub25>>>0)<(127);
     if ($cmp26) {
      $6 = $s$1;
      $rem = $6 & 3;
      $cmp29 = ($rem|0)==(0);
      if ($cmp29) {
       $7 = HEAP32[$s$1>>2]|0;
       $sub32108 = (($7) + -16843009)|0;
       $or109 = $sub32108 | $7;
       $and33110 = $or109 & -2139062144;
       $lnot35111 = ($and33110|0)==(0);
       $8 = $7&255;
       if ($lnot35111) {
        $s$2113 = $s$1;$wn$addr$2112 = $wn$addr$1;
        while(1) {
         $add$ptr = ((($s$2113)) + 4|0);
         $sub36 = (($wn$addr$2112) + -4)|0;
         $9 = HEAP32[$add$ptr>>2]|0;
         $sub32 = (($9) + -16843009)|0;
         $or = $sub32 | $9;
         $and33 = $or & -2139062144;
         $lnot35 = ($and33|0)==(0);
         if ($lnot35) {
          $s$2113 = $add$ptr;$wn$addr$2112 = $sub36;
         } else {
          break;
         }
        }
        $10 = $9&255;
        $11 = $10;$s$3 = $add$ptr;$wn$addr$3 = $sub36;
       } else {
        $11 = $8;$s$3 = $s$1;$wn$addr$3 = $wn$addr$1;
       }
      } else {
       $11 = $5;$s$3 = $s$1;$wn$addr$3 = $wn$addr$1;
      }
     } else {
      $11 = $5;$s$3 = $s$1;$wn$addr$3 = $wn$addr$1;
     }
     $conv38 = $11&255;
     $sub39 = (($conv38) + -1)|0;
     $cmp40 = ($sub39>>>0)<(127);
     if (!($cmp40)) {
      break;
     }
     $incdec$ptr43 = ((($s$3)) + 1|0);
     $dec44 = (($wn$addr$3) + -1)|0;
     $s$1 = $incdec$ptr43;$wn$addr$1 = $dec44;
    }
    $sub47 = (($conv38) + -194)|0;
    $cmp48 = ($sub47>>>0)>(50);
    if ($cmp48) {
     $s$11126 = $s$3;$wn$addr$9124 = $wn$addr$3;$ws$addr$5125 = $ws;
     label = 53;
    } else {
     $incdec$ptr52 = ((($s$3)) + 1|0);
     $arrayidx55 = (2424 + ($sub47<<2)|0);
     $12 = HEAP32[$arrayidx55>>2]|0;
     $c$2 = $12;$s$4 = $incdec$ptr52;$wn$addr$4 = $wn$addr$3;
     label = 25;
     continue L19;
    }
   }
   else if ((label|0) == 15) {
    label = 0;
    $tobool96103 = ($wn$addr$5$ph|0)==(0);
    L22: do {
     if ($tobool96103) {
      $s$6$lcssa = $s$6$ph;
     } else {
      $s$6106 = $s$6$ph;$wn$addr$5104 = $wn$addr$5$ph;$ws$addr$1105 = $ws$addr$1$ph;
      while(1) {
       $18 = HEAP8[$s$6106>>0]|0;
       $conv99 = $18&255;
       $sub100 = (($conv99) + -1)|0;
       $cmp101 = ($sub100>>>0)<(127);
       do {
        if ($cmp101) {
         $19 = $s$6106;
         $rem104 = $19 & 3;
         $cmp105 = ($rem104|0)==(0);
         $cmp109 = ($wn$addr$5104>>>0)>(4);
         $or$cond = $cmp109 & $cmp105;
         if ($or$cond) {
          $s$7 = $s$6106;$wn$addr$6 = $wn$addr$5104;$ws$addr$2 = $ws$addr$1105;
          while(1) {
           $20 = HEAP32[$s$7>>2]|0;
           $sub111 = (($20) + -16843009)|0;
           $or112 = $sub111 | $20;
           $and113 = $or112 & -2139062144;
           $lnot115 = ($and113|0)==(0);
           if (!($lnot115)) {
            label = 38;
            break;
           }
           $incdec$ptr117 = ((($s$7)) + 1|0);
           $conv118 = $20 & 255;
           $incdec$ptr119 = ((($ws$addr$2)) + 4|0);
           HEAP32[$ws$addr$2>>2] = $conv118;
           $incdec$ptr120 = ((($s$7)) + 2|0);
           $21 = HEAP8[$incdec$ptr117>>0]|0;
           $conv121 = $21&255;
           $incdec$ptr122 = ((($ws$addr$2)) + 8|0);
           HEAP32[$incdec$ptr119>>2] = $conv121;
           $incdec$ptr123 = ((($s$7)) + 3|0);
           $22 = HEAP8[$incdec$ptr120>>0]|0;
           $conv124 = $22&255;
           $incdec$ptr125 = ((($ws$addr$2)) + 12|0);
           HEAP32[$incdec$ptr122>>2] = $conv124;
           $incdec$ptr126 = ((($s$7)) + 4|0);
           $23 = HEAP8[$incdec$ptr123>>0]|0;
           $conv127 = $23&255;
           $incdec$ptr128 = ((($ws$addr$2)) + 16|0);
           HEAP32[$incdec$ptr125>>2] = $conv127;
           $sub129 = (($wn$addr$6) + -4)|0;
           $cmp109$old = ($sub129>>>0)>(4);
           if ($cmp109$old) {
            $s$7 = $incdec$ptr126;$wn$addr$6 = $sub129;$ws$addr$2 = $incdec$ptr128;
           } else {
            label = 37;
            break;
           }
          }
          if ((label|0) == 37) {
           label = 0;
           $$pre$pre = HEAP8[$incdec$ptr126>>0]|0;
           $25 = $$pre$pre;$s$8 = $incdec$ptr126;$wn$addr$7 = $sub129;$ws$addr$3 = $incdec$ptr128;
           break;
          }
          else if ((label|0) == 38) {
           label = 0;
           $24 = $20&255;
           $25 = $24;$s$8 = $s$7;$wn$addr$7 = $wn$addr$6;$ws$addr$3 = $ws$addr$2;
           break;
          }
         } else {
          $25 = $18;$s$8 = $s$6106;$wn$addr$7 = $wn$addr$5104;$ws$addr$3 = $ws$addr$1105;
         }
        } else {
         $25 = $18;$s$8 = $s$6106;$wn$addr$7 = $wn$addr$5104;$ws$addr$3 = $ws$addr$1105;
        }
       } while(0);
       $conv132 = $25&255;
       $sub133 = (($conv132) + -1)|0;
       $cmp134 = ($sub133>>>0)<(127);
       if (!($cmp134)) {
        break;
       }
       $incdec$ptr137 = ((($s$8)) + 1|0);
       $incdec$ptr139 = ((($ws$addr$3)) + 4|0);
       HEAP32[$ws$addr$3>>2] = $conv132;
       $dec140 = (($wn$addr$7) + -1)|0;
       $tobool96 = ($dec140|0)==(0);
       if ($tobool96) {
        $s$6$lcssa = $incdec$ptr137;
        break L22;
       } else {
        $s$6106 = $incdec$ptr137;$wn$addr$5104 = $dec140;$ws$addr$1105 = $incdec$ptr139;
       }
      }
      $sub143 = (($conv132) + -194)|0;
      $cmp144 = ($sub143>>>0)>(50);
      if ($cmp144) {
       $s$11126 = $s$8;$wn$addr$9124 = $wn$addr$7;$ws$addr$5125 = $ws$addr$3;
       label = 53;
       break L20;
      }
      $incdec$ptr148 = ((($s$8)) + 1|0);
      $arrayidx151 = (2424 + ($sub143<<2)|0);
      $26 = HEAP32[$arrayidx151>>2]|0;
      $c$4 = $26;$s$9 = $incdec$ptr148;$wn$addr$8 = $wn$addr$7;$ws$addr$4 = $ws$addr$3;
      label = 43;
      continue L19;
     }
    } while(0);
    HEAP32[$src>>2] = $s$6$lcssa;
    $retval$0 = $wn;
    label = 59;
    continue L19;
   }
   else if ((label|0) == 25) {
    label = 0;
    $13 = HEAP8[$s$4>>0]|0;
    $conv56 = $13&255;
    $shr90 = $conv56 >>> 3;
    $sub57 = (($shr90) + -16)|0;
    $shr60 = $c$2 >> 26;
    $add = (($shr90) + ($shr60))|0;
    $or61 = $sub57 | $add;
    $tobool63 = ($or61>>>0)>(7);
    if ($tobool63) {
     $c$6 = $c$2;$s$9$sink = $s$4;$wn$addr$9 = $wn$addr$4;$ws$addr$5 = $ws;
     label = 52;
    } else {
     $incdec$ptr67 = ((($s$4)) + 1|0);
     $and68 = $c$2 & 33554432;
     $tobool69 = ($and68|0)==(0);
     if ($tobool69) {
      $s$5 = $incdec$ptr67;
     } else {
      $14 = HEAP8[$incdec$ptr67>>0]|0;
      $15 = $14 & -64;
      $cmp73 = ($15<<24>>24)==(-128);
      if (!($cmp73)) {
       $c$6 = $c$2;$s$9$sink = $s$4;$wn$addr$9 = $wn$addr$4;$ws$addr$5 = $ws;
       label = 52;
       break;
      }
      $incdec$ptr78 = ((($s$4)) + 2|0);
      $and79 = $c$2 & 524288;
      $tobool80 = ($and79|0)==(0);
      if ($tobool80) {
       $s$5 = $incdec$ptr78;
      } else {
       $16 = HEAP8[$incdec$ptr78>>0]|0;
       $17 = $16 & -64;
       $cmp84 = ($17<<24>>24)==(-128);
       if (!($cmp84)) {
        $c$6 = $c$2;$s$9$sink = $s$4;$wn$addr$9 = $wn$addr$4;$ws$addr$5 = $ws;
        label = 52;
        break;
       }
       $incdec$ptr89 = ((($s$4)) + 3|0);
       $s$5 = $incdec$ptr89;
      }
     }
     $dec92 = (($wn$addr$4) + -1)|0;
     $s$1$ph = $s$5;$wn$addr$1$ph = $dec92;
     label = 14;
     continue L19;
    }
   }
   else if ((label|0) == 43) {
    label = 0;
    $27 = HEAP8[$s$9>>0]|0;
    $conv152 = $27&255;
    $shr15391 = $conv152 >>> 3;
    $sub154 = (($shr15391) + -16)|0;
    $shr157 = $c$4 >> 26;
    $add158 = (($shr15391) + ($shr157))|0;
    $or159 = $sub154 | $add158;
    $tobool161 = ($or159>>>0)>(7);
    if ($tobool161) {
     $c$6 = $c$4;$s$9$sink = $s$9;$wn$addr$9 = $wn$addr$8;$ws$addr$5 = $ws$addr$4;
     label = 52;
    } else {
     $shl = $c$4 << 6;
     $incdec$ptr165 = ((($s$9)) + 1|0);
     $sub167 = (($conv152) + -128)|0;
     $or168 = $sub167 | $shl;
     $tobool170 = ($or168|0)<(0);
     do {
      if ($tobool170) {
       $28 = HEAP8[$incdec$ptr165>>0]|0;
       $conv172 = $28&255;
       $sub173 = (($conv172) + -128)|0;
       $cmp174 = ($sub173>>>0)>(63);
       if ($cmp174) {
        $add$ptr177 = ((($s$9)) + -1|0);
        $s$1194 = $add$ptr177;$ws$addr$593 = $ws$addr$4;
        break L20;
       }
       $shl179 = $or168 << 6;
       $incdec$ptr180 = ((($s$9)) + 2|0);
       $or183 = $sub173 | $shl179;
       $tobool185 = ($or183|0)<(0);
       if ($tobool185) {
        $29 = HEAP8[$incdec$ptr180>>0]|0;
        $conv187 = $29&255;
        $sub188 = (($conv187) + -128)|0;
        $cmp189 = ($sub188>>>0)>(63);
        if ($cmp189) {
         $add$ptr192 = ((($s$9)) + -1|0);
         $s$1194 = $add$ptr192;$ws$addr$593 = $ws$addr$4;
         break L20;
        } else {
         $shl194 = $or183 << 6;
         $incdec$ptr195 = ((($s$9)) + 3|0);
         $or198 = $sub188 | $shl194;
         $c$5 = $or198;$s$10 = $incdec$ptr195;
         break;
        }
       } else {
        $c$5 = $or183;$s$10 = $incdec$ptr180;
       }
      } else {
       $c$5 = $or168;$s$10 = $incdec$ptr165;
      }
     } while(0);
     $incdec$ptr201 = ((($ws$addr$4)) + 4|0);
     HEAP32[$ws$addr$4>>2] = $c$5;
     $dec202 = (($wn$addr$8) + -1)|0;
     $s$6$ph = $s$10;$wn$addr$5$ph = $dec202;$ws$addr$1$ph = $incdec$ptr201;
     label = 15;
     continue L19;
    }
   }
   else if ((label|0) == 59) {
    label = 0;
    return ($retval$0|0);
   }
  } while(0);
  if ((label|0) == 52) {
   label = 0;
   $incdec$ptr163 = ((($s$9$sink)) + -1|0);
   $tobool205 = ($c$6|0)==(0);
   if ($tobool205) {
    $s$11126 = $incdec$ptr163;$wn$addr$9124 = $wn$addr$9;$ws$addr$5125 = $ws$addr$5;
    label = 53;
   } else {
    $s$1194 = $incdec$ptr163;$ws$addr$593 = $ws$addr$5;
   }
  }
  if ((label|0) == 53) {
   label = 0;
   $30 = HEAP8[$s$11126>>0]|0;
   $tobool207 = ($30<<24>>24)==(0);
   if ($tobool207) {
    $tobool209 = ($ws$addr$5125|0)==(0|0);
    if (!($tobool209)) {
     HEAP32[$ws$addr$5125>>2] = 0;
     HEAP32[$src>>2] = 0;
    }
    $sub212 = (($wn) - ($wn$addr$9124))|0;
    $retval$0 = $sub212;
    label = 59;
    continue;
   } else {
    $s$1194 = $s$11126;$ws$addr$593 = $ws$addr$5125;
   }
  }
  $call214 = (___errno_location()|0);
  HEAP32[$call214>>2] = 84;
  $tobool215 = ($ws$addr$593|0)==(0|0);
  if ($tobool215) {
   $retval$0 = -1;
   label = 59;
   continue;
  }
  HEAP32[$src>>2] = $s$1194;
  $retval$0 = -1;
  label = 59;
 }
 return (0)|0;
}
function ___pthread_self_425() {
 var $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = (_pthread_self()|0);
 return ($call|0);
}
function _wcsnrtombs($dst,$wcs,$wn,$n,$st) {
 $dst = $dst|0;
 $wcs = $wcs|0;
 $wn = $wn|0;
 $n = $n|0;
 $st = $st|0;
 var $$cast = 0, $$pr$pre = 0, $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $add$ptr = 0, $add$ptr33 = 0, $add15 = 0, $add25 = 0, $add35 = 0, $buf = 0, $call = 0;
 var $call24 = 0, $cmp = 0, $cmp11 = 0, $cmp26 = 0, $cmp3 = 0, $cnt$054 = 0, $cnt$1 = 0, $cnt$247 = 0, $cnt$3 = 0, $dec = 0, $dst$arraydecay = 0, $incdec$ptr = 0, $n$ = 0, $n$addr$0$wn$addr$0 = 0, $n$addr$052 = 0, $n$addr$1 = 0, $n$addr$2 = 0, $n$addr$345 = 0, $or$cond = 0, $or$cond51 = 0;
 var $s$039 = 0, $s$055 = 0, $s$1 = 0, $s$248 = 0, $sub = 0, $sub13 = 0, $sub34 = 0, $tobool = 0, $tobool1 = 0, $tobool149 = 0, $tobool16 = 0, $tobool19 = 0, $tobool1943 = 0, $tobool2 = 0, $tobool21 = 0, $tobool2144 = 0, $tobool250 = 0, $tobool28 = 0, $tobool7 = 0, $wn$addr$053 = 0;
 var $wn$addr$1 = 0, $wn$addr$246 = 0, $ws = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 272|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(272|0);
 $buf = sp + 8|0;
 $ws = sp;
 $0 = HEAP32[$wcs>>2]|0;
 HEAP32[$ws>>2] = $0;
 $tobool = ($dst|0)!=(0|0);
 $n$ = $tobool ? $n : 256;
 $dst$arraydecay = $tobool ? $dst : $buf;
 $$cast = $0;
 $tobool149 = ($0|0)!=(0);
 $tobool250 = ($n$|0)!=(0);
 $or$cond51 = $tobool250 & $tobool149;
 L1: do {
  if ($or$cond51) {
   $10 = $$cast;$cnt$054 = 0;$n$addr$052 = $n$;$s$055 = $dst$arraydecay;$wn$addr$053 = $wn;
   while(1) {
    $cmp = ($wn$addr$053>>>0)>=($n$addr$052>>>0);
    $cmp3 = ($wn$addr$053>>>0)>(32);
    $1 = $cmp | $cmp3;
    if (!($1)) {
     $3 = $10;$cnt$1 = $cnt$054;$n$addr$2 = $n$addr$052;$s$039 = $s$055;$wn$addr$1 = $wn$addr$053;
     break L1;
    }
    $n$addr$0$wn$addr$0 = $cmp ? $n$addr$052 : $wn$addr$053;
    $sub = (($wn$addr$053) - ($n$addr$0$wn$addr$0))|0;
    $call = (_wcsrtombs($s$055,$ws,$n$addr$0$wn$addr$0,0)|0);
    $tobool7 = ($call|0)==(-1);
    if ($tobool7) {
     break;
    }
    $cmp11 = ($s$055|0)==($buf|0);
    $add$ptr = (($s$055) + ($call)|0);
    $sub13 = $cmp11 ? 0 : $call;
    $n$addr$1 = (($n$addr$052) - ($sub13))|0;
    $s$1 = $cmp11 ? $s$055 : $add$ptr;
    $add15 = (($call) + ($cnt$054))|0;
    $2 = HEAP32[$ws>>2]|0;
    $tobool1 = ($2|0)!=(0|0);
    $tobool2 = ($n$addr$1|0)!=(0);
    $or$cond = $tobool2 & $tobool1;
    if ($or$cond) {
     $10 = $2;$cnt$054 = $add15;$n$addr$052 = $n$addr$1;$s$055 = $s$1;$wn$addr$053 = $sub;
    } else {
     $3 = $2;$cnt$1 = $add15;$n$addr$2 = $n$addr$1;$s$039 = $s$1;$wn$addr$1 = $sub;
     break L1;
    }
   }
   $$pr$pre = HEAP32[$ws>>2]|0;
   $3 = $$pr$pre;$cnt$1 = -1;$n$addr$2 = 0;$s$039 = $s$055;$wn$addr$1 = $sub;
  } else {
   $3 = $$cast;$cnt$1 = 0;$n$addr$2 = $n$;$s$039 = $dst$arraydecay;$wn$addr$1 = $wn;
  }
 } while(0);
 $tobool16 = ($3|0)==(0|0);
 L8: do {
  if ($tobool16) {
   $cnt$3 = $cnt$1;
  } else {
   $tobool1943 = ($n$addr$2|0)!=(0);
   $tobool2144 = ($wn$addr$1|0)!=(0);
   $4 = $tobool1943 & $tobool2144;
   if ($4) {
    $6 = $3;$cnt$247 = $cnt$1;$n$addr$345 = $n$addr$2;$s$248 = $s$039;$wn$addr$246 = $wn$addr$1;
    while(1) {
     $5 = HEAP32[$6>>2]|0;
     $call24 = (_wcrtomb($s$248,$5,0)|0);
     $add25 = (($call24) + 1)|0;
     $cmp26 = ($add25>>>0)<(2);
     if ($cmp26) {
      break;
     }
     $7 = HEAP32[$ws>>2]|0;
     $incdec$ptr = ((($7)) + 4|0);
     HEAP32[$ws>>2] = $incdec$ptr;
     $dec = (($wn$addr$246) + -1)|0;
     $add$ptr33 = (($s$248) + ($call24)|0);
     $sub34 = (($n$addr$345) - ($call24))|0;
     $add35 = (($call24) + ($cnt$247))|0;
     $tobool19 = ($sub34|0)!=(0);
     $tobool21 = ($dec|0)!=(0);
     $8 = $tobool19 & $tobool21;
     if ($8) {
      $6 = $incdec$ptr;$cnt$247 = $add35;$n$addr$345 = $sub34;$s$248 = $add$ptr33;$wn$addr$246 = $dec;
     } else {
      $cnt$3 = $add35;
      break L8;
     }
    }
    $tobool28 = ($call24|0)==(0);
    if ($tobool28) {
     HEAP32[$ws>>2] = 0;
     $cnt$3 = $cnt$247;
    } else {
     $cnt$3 = -1;
    }
   } else {
    $cnt$3 = $cnt$1;
   }
  }
 } while(0);
 if ($tobool) {
  $9 = HEAP32[$ws>>2]|0;
  HEAP32[$wcs>>2] = $9;
 }
 STACKTOP = sp;return ($cnt$3|0);
}
function _wcsrtombs($s,$ws,$n,$st) {
 $s = $s|0;
 $ws = $ws|0;
 $n = $n|0;
 $st = $st|0;
 var $$pre = 0, $$pre85 = 0, $$pre86 = 0, $$pre87 = 0, $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $add$ptr = 0, $add$ptr48 = 0, $buf = 0, $call = 0, $call$pn = 0;
 var $call15 = 0, $call37 = 0, $cmp = 0, $cmp29 = 0, $cmp42 = 0, $cmp8 = 0, $cmp869 = 0, $cmp9 = 0, $conv = 0, $conv51 = 0, $dec = 0, $dec53 = 0, $incdec$ptr = 0, $incdec$ptr22 = 0, $incdec$ptr24 = 0, $incdec$ptr52 = 0, $incdec$ptr55 = 0, $n$addr$061 = 0, $n$addr$1 = 0, $n$addr$2$lcssa = 0;
 var $n$addr$270 = 0, $n$addr$3 = 0, $n$addr$465 = 0, $n$addr$5 = 0, $retval$0 = 0, $s$addr$0$lcssa = 0, $s$addr$071 = 0, $s$addr$1 = 0, $s$addr$266 = 0, $s$addr$3 = 0, $sub = 0, $sub13 = 0, $sub20 = 0, $sub28 = 0, $sub34 = 0, $sub45 = 0, $sub49 = 0, $tobool = 0, $tobool1 = 0, $tobool11 = 0;
 var $tobool160 = 0, $tobool17 = 0, $tobool26 = 0, $tobool2664 = 0, $tobool3 = 0, $tobool32 = 0, $tobool39 = 0, $ws2$062 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $buf = sp;
 $tobool = ($s|0)==(0|0);
 L1: do {
  if ($tobool) {
   $0 = HEAP32[$ws>>2]|0;
   $1 = HEAP32[$0>>2]|0;
   $tobool160 = ($1|0)==(0);
   if ($tobool160) {
    $retval$0 = 0;
   } else {
    $2 = $1;$n$addr$061 = 0;$ws2$062 = $0;
    while(1) {
     $cmp = ($2>>>0)>(127);
     if ($cmp) {
      $call = (_wcrtomb($buf,$2,0)|0);
      $tobool3 = ($call|0)==(-1);
      if ($tobool3) {
       $retval$0 = -1;
       break L1;
      } else {
       $call$pn = $call;
      }
     } else {
      $call$pn = 1;
     }
     $n$addr$1 = (($call$pn) + ($n$addr$061))|0;
     $incdec$ptr = ((($ws2$062)) + 4|0);
     $3 = HEAP32[$incdec$ptr>>2]|0;
     $tobool1 = ($3|0)==(0);
     if ($tobool1) {
      $retval$0 = $n$addr$1;
      break;
     } else {
      $2 = $3;$n$addr$061 = $n$addr$1;$ws2$062 = $incdec$ptr;
     }
    }
   }
  } else {
   $cmp869 = ($n>>>0)>(3);
   L9: do {
    if ($cmp869) {
     $$pre = HEAP32[$ws>>2]|0;
     $5 = $$pre;$n$addr$270 = $n;$s$addr$071 = $s;
     while(1) {
      $4 = HEAP32[$5>>2]|0;
      $sub = (($4) + -1)|0;
      $cmp9 = ($sub>>>0)>(126);
      if ($cmp9) {
       $tobool11 = ($4|0)==(0);
       if ($tobool11) {
        break;
       }
       $call15 = (_wcrtomb($s$addr$071,$4,0)|0);
       $tobool17 = ($call15|0)==(-1);
       if ($tobool17) {
        $retval$0 = -1;
        break L1;
       }
       $add$ptr = (($s$addr$071) + ($call15)|0);
       $sub20 = (($n$addr$270) - ($call15))|0;
       $6 = $5;$n$addr$3 = $sub20;$s$addr$1 = $add$ptr;
      } else {
       $conv = $4&255;
       $incdec$ptr22 = ((($s$addr$071)) + 1|0);
       HEAP8[$s$addr$071>>0] = $conv;
       $dec = (($n$addr$270) + -1)|0;
       $$pre85 = HEAP32[$ws>>2]|0;
       $6 = $$pre85;$n$addr$3 = $dec;$s$addr$1 = $incdec$ptr22;
      }
      $incdec$ptr24 = ((($6)) + 4|0);
      HEAP32[$ws>>2] = $incdec$ptr24;
      $cmp8 = ($n$addr$3>>>0)>(3);
      if ($cmp8) {
       $5 = $incdec$ptr24;$n$addr$270 = $n$addr$3;$s$addr$071 = $s$addr$1;
      } else {
       $n$addr$2$lcssa = $n$addr$3;$s$addr$0$lcssa = $s$addr$1;
       break L9;
      }
     }
     HEAP8[$s$addr$071>>0] = 0;
     HEAP32[$ws>>2] = 0;
     $sub13 = (($n) - ($n$addr$270))|0;
     $retval$0 = $sub13;
     break L1;
    } else {
     $n$addr$2$lcssa = $n;$s$addr$0$lcssa = $s;
    }
   } while(0);
   $tobool2664 = ($n$addr$2$lcssa|0)==(0);
   if ($tobool2664) {
    $retval$0 = $n;
   } else {
    $$pre86 = HEAP32[$ws>>2]|0;
    $8 = $$pre86;$n$addr$465 = $n$addr$2$lcssa;$s$addr$266 = $s$addr$0$lcssa;
    while(1) {
     $7 = HEAP32[$8>>2]|0;
     $sub28 = (($7) + -1)|0;
     $cmp29 = ($sub28>>>0)>(126);
     if ($cmp29) {
      $tobool32 = ($7|0)==(0);
      if ($tobool32) {
       label = 19;
       break;
      }
      $call37 = (_wcrtomb($buf,$7,0)|0);
      $tobool39 = ($call37|0)==(-1);
      if ($tobool39) {
       $retval$0 = -1;
       break L1;
      }
      $cmp42 = ($n$addr$465>>>0)<($call37>>>0);
      if ($cmp42) {
       label = 22;
       break;
      }
      $9 = HEAP32[$8>>2]|0;
      (_wcrtomb($s$addr$266,$9,0)|0);
      $add$ptr48 = (($s$addr$266) + ($call37)|0);
      $sub49 = (($n$addr$465) - ($call37))|0;
      $10 = $8;$n$addr$5 = $sub49;$s$addr$3 = $add$ptr48;
     } else {
      $conv51 = $7&255;
      $incdec$ptr52 = ((($s$addr$266)) + 1|0);
      HEAP8[$s$addr$266>>0] = $conv51;
      $dec53 = (($n$addr$465) + -1)|0;
      $$pre87 = HEAP32[$ws>>2]|0;
      $10 = $$pre87;$n$addr$5 = $dec53;$s$addr$3 = $incdec$ptr52;
     }
     $incdec$ptr55 = ((($10)) + 4|0);
     HEAP32[$ws>>2] = $incdec$ptr55;
     $tobool26 = ($n$addr$5|0)==(0);
     if ($tobool26) {
      $retval$0 = $n;
      break L1;
     } else {
      $8 = $incdec$ptr55;$n$addr$465 = $n$addr$5;$s$addr$266 = $s$addr$3;
     }
    }
    if ((label|0) == 19) {
     HEAP8[$s$addr$266>>0] = 0;
     HEAP32[$ws>>2] = 0;
     $sub34 = (($n) - ($n$addr$465))|0;
     $retval$0 = $sub34;
     break;
    }
    else if ((label|0) == 22) {
     $sub45 = (($n) - ($n$addr$465))|0;
     $retval$0 = $sub45;
     break;
    }
   }
  }
 } while(0);
 STACKTOP = sp;return ($retval$0|0);
}
function _htons($n) {
 $n = $n|0;
 var $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = (___bswap_16($n)|0);
 return ($call|0);
}
function _htonl($n) {
 $n = $n|0;
 var $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = (___bswap_32($n)|0);
 return ($call|0);
}
function _bind($fd,$addr,$len) {
 $fd = $fd|0;
 $addr = $addr|0;
 $len = $len|0;
 var $$compoundliteral = 0, $0 = 0, $1 = 0, $arrayinit$element = 0, $arrayinit$element1 = 0, $arrayinit$element2 = 0, $arrayinit$element3 = 0, $arrayinit$element4 = 0, $call = 0, $call5 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $vararg_buffer = sp;
 $$compoundliteral = sp + 8|0;
 HEAP32[$$compoundliteral>>2] = $fd;
 $arrayinit$element = ((($$compoundliteral)) + 4|0);
 $0 = $addr;
 HEAP32[$arrayinit$element>>2] = $0;
 $arrayinit$element1 = ((($$compoundliteral)) + 8|0);
 HEAP32[$arrayinit$element1>>2] = $len;
 $arrayinit$element2 = ((($$compoundliteral)) + 12|0);
 HEAP32[$arrayinit$element2>>2] = 0;
 $arrayinit$element3 = ((($$compoundliteral)) + 16|0);
 HEAP32[$arrayinit$element3>>2] = 0;
 $arrayinit$element4 = ((($$compoundliteral)) + 20|0);
 HEAP32[$arrayinit$element4>>2] = 0;
 $1 = $$compoundliteral;
 HEAP32[$vararg_buffer>>2] = 2;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $1;
 $call = (___syscall102(102,($vararg_buffer|0))|0);
 $call5 = (___syscall_ret($call)|0);
 STACKTOP = sp;return ($call5|0);
}
function _recvfrom($fd,$buf,$len,$flags,$addr,$alen) {
 $fd = $fd|0;
 $buf = $buf|0;
 $len = $len|0;
 $flags = $flags|0;
 $addr = $addr|0;
 $alen = $alen|0;
 var $$compoundliteral = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $arrayinit$element = 0, $arrayinit$element1 = 0, $arrayinit$element2 = 0, $arrayinit$element3 = 0, $arrayinit$element4 = 0, $call = 0, $call5 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $vararg_buffer = sp;
 $$compoundliteral = sp + 8|0;
 HEAP32[$$compoundliteral>>2] = $fd;
 $arrayinit$element = ((($$compoundliteral)) + 4|0);
 $0 = $buf;
 HEAP32[$arrayinit$element>>2] = $0;
 $arrayinit$element1 = ((($$compoundliteral)) + 8|0);
 HEAP32[$arrayinit$element1>>2] = $len;
 $arrayinit$element2 = ((($$compoundliteral)) + 12|0);
 HEAP32[$arrayinit$element2>>2] = $flags;
 $arrayinit$element3 = ((($$compoundliteral)) + 16|0);
 $1 = $addr;
 HEAP32[$arrayinit$element3>>2] = $1;
 $arrayinit$element4 = ((($$compoundliteral)) + 20|0);
 $2 = $alen;
 HEAP32[$arrayinit$element4>>2] = $2;
 $3 = $$compoundliteral;
 HEAP32[$vararg_buffer>>2] = 12;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $3;
 $call = (___syscall102(102,($vararg_buffer|0))|0);
 $call5 = (___syscall_ret($call)|0);
 STACKTOP = sp;return ($call5|0);
}
function ___bswap_32($__x) {
 $__x = $__x|0;
 var $or5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $or5 = (_llvm_bswap_i32(($__x|0))|0);
 return ($or5|0);
}
function ___bswap_16($__x) {
 $__x = $__x|0;
 var $rev = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $rev = (_llvm_bswap_i16(($__x|0))|0);
 return ($rev|0);
}
function ___inet_aton($s0,$dest) {
 $s0 = $s0|0;
 $dest = $dest|0;
 var $$pre = 0, $$pre21 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $a = 0, $add$ptr = 0, $and = 0, $and21 = 0, $and27 = 0, $arrayidx = 0, $arrayidx17 = 0, $arrayidx20$phi$trans$insert = 0, $arrayidx20$pre$phiZ2D = 0, $arrayidx22 = 0, $arrayidx26$phi$trans$insert = 0;
 var $arrayidx26$pre$phiZ2D = 0, $arrayidx28 = 0, $arrayidx35 = 0, $arrayidx42 = 0, $call = 0, $cmp = 0, $cmp1 = 0, $cmp32 = 0, $cmp36 = 0, $conv41 = 0, $conv6 = 0, $i$0$lcssa = 0, $i$019 = 0, $i$117 = 0, $inc = 0, $inc44 = 0, $isdigit = 0, $isdigittmp = 0, $retval$0 = 0, $s$018 = 0;
 var $shr = 0, $shr24 = 0, $shr30 = 0, $tobool9 = 0, $z = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $a = sp + 8|0;
 $z = sp;
 ;HEAP32[$a>>2]=0|0;HEAP32[$a+4>>2]=0|0;HEAP32[$a+8>>2]=0|0;HEAP32[$a+12>>2]=0|0;
 $i$019 = 0;$s$018 = $s0;
 L1: while(1) {
  $call = (_strtoul($s$018,$z,0)|0);
  $arrayidx = (($a) + ($i$019<<2)|0);
  HEAP32[$arrayidx>>2] = $call;
  $0 = HEAP32[$z>>2]|0;
  $cmp1 = ($0|0)==($s$018|0);
  if ($cmp1) {
   $retval$0 = 0;
   break;
  }
  $1 = HEAP8[$0>>0]|0;
  switch ($1<<24>>24) {
  case 46: case 0:  {
   break;
  }
  default: {
   $retval$0 = 0;
   break L1;
  }
  }
  $2 = HEAP8[$s$018>>0]|0;
  $conv6 = $2 << 24 >> 24;
  $isdigittmp = (($conv6) + -48)|0;
  $isdigit = ($isdigittmp>>>0)<(10);
  if (!($isdigit)) {
   $retval$0 = 0;
   break;
  }
  $tobool9 = ($1<<24>>24)==(0);
  if ($tobool9) {
   $i$0$lcssa = $i$019;
   label = 7;
   break;
  }
  $add$ptr = ((($0)) + 1|0);
  $inc = (($i$019) + 1)|0;
  $cmp = ($inc|0)<(4);
  if ($cmp) {
   $i$019 = $inc;$s$018 = $add$ptr;
  } else {
   $i$0$lcssa = $inc;
   label = 7;
   break;
  }
 }
 L7: do {
  if ((label|0) == 7) {
   switch ($i$0$lcssa|0) {
   case 4:  {
    $retval$0 = 0;
    break L7;
    break;
   }
   case 0:  {
    $3 = HEAP32[$a>>2]|0;
    $and = $3 & 16777215;
    $arrayidx17 = ((($a)) + 4|0);
    HEAP32[$arrayidx17>>2] = $and;
    $shr = $3 >>> 24;
    HEAP32[$a>>2] = $shr;
    $4 = $and;$arrayidx20$pre$phiZ2D = $arrayidx17;
    label = 11;
    break;
   }
   case 1:  {
    $arrayidx20$phi$trans$insert = ((($a)) + 4|0);
    $$pre = HEAP32[$arrayidx20$phi$trans$insert>>2]|0;
    $4 = $$pre;$arrayidx20$pre$phiZ2D = $arrayidx20$phi$trans$insert;
    label = 11;
    break;
   }
   case 2:  {
    $arrayidx26$phi$trans$insert = ((($a)) + 8|0);
    $$pre21 = HEAP32[$arrayidx26$phi$trans$insert>>2]|0;
    $5 = $$pre21;$arrayidx26$pre$phiZ2D = $arrayidx26$phi$trans$insert;
    label = 12;
    break;
   }
   default: {
    $i$117 = 0;
   }
   }
   if ((label|0) == 11) {
    $and21 = $4 & 65535;
    $arrayidx22 = ((($a)) + 8|0);
    HEAP32[$arrayidx22>>2] = $and21;
    $shr24 = $4 >>> 16;
    HEAP32[$arrayidx20$pre$phiZ2D>>2] = $shr24;
    $5 = $and21;$arrayidx26$pre$phiZ2D = $arrayidx22;
    label = 12;
   }
   if ((label|0) == 12) {
    $and27 = $5 & 255;
    $arrayidx28 = ((($a)) + 12|0);
    HEAP32[$arrayidx28>>2] = $and27;
    $shr30 = $5 >>> 8;
    HEAP32[$arrayidx26$pre$phiZ2D>>2] = $shr30;
    $i$117 = 0;
   }
   while(1) {
    $arrayidx35 = (($a) + ($i$117<<2)|0);
    $6 = HEAP32[$arrayidx35>>2]|0;
    $cmp36 = ($6>>>0)>(255);
    if ($cmp36) {
     $retval$0 = 0;
     break L7;
    }
    $conv41 = $6&255;
    $arrayidx42 = (($dest) + ($i$117)|0);
    HEAP8[$arrayidx42>>0] = $conv41;
    $inc44 = (($i$117) + 1)|0;
    $cmp32 = ($inc44|0)<(4);
    if ($cmp32) {
     $i$117 = $inc44;
    } else {
     $retval$0 = 1;
     break;
    }
   }
  }
 } while(0);
 STACKTOP = sp;return ($retval$0|0);
}
function _inet_ntoa($in) {
 $in = $in|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $arrayidx1 = 0, $arrayidx3 = 0, $arrayidx5 = 0, $conv = 0, $conv2 = 0, $conv4 = 0, $conv6 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 $0 = HEAP8[$in>>0]|0;
 $conv = $0&255;
 $arrayidx1 = ((($in)) + 1|0);
 $1 = HEAP8[$arrayidx1>>0]|0;
 $conv2 = $1&255;
 $arrayidx3 = ((($in)) + 2|0);
 $2 = HEAP8[$arrayidx3>>0]|0;
 $conv4 = $2&255;
 $arrayidx5 = ((($in)) + 3|0);
 $3 = HEAP8[$arrayidx5>>0]|0;
 $conv6 = $3&255;
 HEAP32[$vararg_buffer>>2] = $conv;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $conv2;
 $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
 HEAP32[$vararg_ptr2>>2] = $conv4;
 $vararg_ptr3 = ((($vararg_buffer)) + 12|0);
 HEAP32[$vararg_ptr3>>2] = $conv6;
 (_snprintf(23066,16,15248,$vararg_buffer)|0);
 STACKTOP = sp;return (23066|0);
}
function _ntohs($n) {
 $n = $n|0;
 var $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = (___bswap_16_490($n)|0);
 return ($call|0);
}
function ___bswap_16_490($__x) {
 $__x = $__x|0;
 var $rev = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $rev = (_llvm_bswap_i16(($__x|0))|0);
 return ($rev|0);
}
function _shutdown($fd,$how) {
 $fd = $fd|0;
 $how = $how|0;
 var $$compoundliteral = 0, $0 = 0, $arrayinit$element = 0, $arrayinit$element1 = 0, $call = 0, $call5 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $vararg_buffer = sp;
 $$compoundliteral = sp + 8|0;
 HEAP32[$$compoundliteral>>2] = $fd;
 $arrayinit$element = ((($$compoundliteral)) + 4|0);
 HEAP32[$arrayinit$element>>2] = $how;
 $arrayinit$element1 = ((($$compoundliteral)) + 8|0);
 $0 = $$compoundliteral;
 ;HEAP32[$arrayinit$element1>>2]=0|0;HEAP32[$arrayinit$element1+4>>2]=0|0;HEAP32[$arrayinit$element1+8>>2]=0|0;HEAP32[$arrayinit$element1+12>>2]=0|0;
 HEAP32[$vararg_buffer>>2] = 13;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $0;
 $call = (___syscall102(102,($vararg_buffer|0))|0);
 $call5 = (___syscall_ret($call)|0);
 STACKTOP = sp;return ($call5|0);
}
function _vasprintf($s,$fmt,$ap) {
 $s = $s|0;
 $fmt = $fmt|0;
 $ap = $ap|0;
 var $add = 0, $ap2 = 0, $call = 0, $call4 = 0, $call6 = 0, $cmp = 0, $retval$0 = 0, $tobool = 0, $vacopy_currentptr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $ap2 = sp;
 $vacopy_currentptr = HEAP32[$ap>>2]|0;
 HEAP32[$ap2>>2] = $vacopy_currentptr;
 $call = (_vsnprintf(0,0,$fmt,$ap2)|0);
 $cmp = ($call|0)<(0);
 if ($cmp) {
  $retval$0 = -1;
 } else {
  $add = (($call) + 1)|0;
  $call4 = (_malloc($add)|0);
  HEAP32[$s>>2] = $call4;
  $tobool = ($call4|0)==(0|0);
  if ($tobool) {
   $retval$0 = -1;
  } else {
   $call6 = (_vsnprintf($call4,$add,$fmt,$ap)|0);
   $retval$0 = $call6;
  }
 }
 STACKTOP = sp;return ($retval$0|0);
}
function _fputc($c,$f) {
 $c = $c|0;
 $f = $f|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $call = 0, $call10 = 0, $call28 = 0, $cmp = 0, $cmp15 = 0, $cmp20 = 0, $cmp3 = 0, $cmp5 = 0, $cond30 = 0, $conv = 0, $conv1 = 0, $conv14 = 0, $conv2 = 0;
 var $incdec$ptr = 0, $incdec$ptr25 = 0, $lbf = 0, $lbf13 = 0, $lock = 0, $retval$0 = 0, $tobool = 0, $wend = 0, $wend19 = 0, $wpos = 0, $wpos18 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $lock = ((($f)) + 76|0);
 $0 = HEAP32[$lock>>2]|0;
 $cmp = ($0|0)<(0);
 $conv = $c&255;
 $conv1 = $c & 255;
 if ($cmp) {
  label = 3;
 } else {
  $call = (___lockfile($f)|0);
  $tobool = ($call|0)==(0);
  if ($tobool) {
   label = 3;
  } else {
   $lbf13 = ((($f)) + 75|0);
   $4 = HEAP8[$lbf13>>0]|0;
   $conv14 = $4 << 24 >> 24;
   $cmp15 = ($conv1|0)==($conv14|0);
   if ($cmp15) {
    label = 10;
   } else {
    $wpos18 = ((($f)) + 20|0);
    $5 = HEAP32[$wpos18>>2]|0;
    $wend19 = ((($f)) + 16|0);
    $6 = HEAP32[$wend19>>2]|0;
    $cmp20 = ($5>>>0)<($6>>>0);
    if ($cmp20) {
     $incdec$ptr25 = ((($5)) + 1|0);
     HEAP32[$wpos18>>2] = $incdec$ptr25;
     HEAP8[$5>>0] = $conv;
     $cond30 = $conv1;
    } else {
     label = 10;
    }
   }
   if ((label|0) == 10) {
    $call28 = (___overflow($f,$c)|0);
    $cond30 = $call28;
   }
   ___unlockfile($f);
   $retval$0 = $cond30;
  }
 }
 do {
  if ((label|0) == 3) {
   $lbf = ((($f)) + 75|0);
   $1 = HEAP8[$lbf>>0]|0;
   $conv2 = $1 << 24 >> 24;
   $cmp3 = ($conv1|0)==($conv2|0);
   if (!($cmp3)) {
    $wpos = ((($f)) + 20|0);
    $2 = HEAP32[$wpos>>2]|0;
    $wend = ((($f)) + 16|0);
    $3 = HEAP32[$wend>>2]|0;
    $cmp5 = ($2>>>0)<($3>>>0);
    if ($cmp5) {
     $incdec$ptr = ((($2)) + 1|0);
     HEAP32[$wpos>>2] = $incdec$ptr;
     HEAP8[$2>>0] = $conv;
     $retval$0 = $conv1;
     break;
    }
   }
   $call10 = (___overflow($f,$c)|0);
   $retval$0 = $call10;
  }
 } while(0);
 return ($retval$0|0);
}
function _strtox($s,$p,$prec) {
 $s = $s|0;
 $p = $p|0;
 $prec = $prec|0;
 var $0 = 0, $1 = 0, $2 = 0, $add = 0, $add$ptr = 0, $buf = 0, $call = 0.0, $cond = 0, $f = 0, $lock = 0, $rend = 0, $rpos = 0, $shcnt = 0, $sub$ptr$sub = 0, $tobool = 0, $tobool3 = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(128|0);
 $f = sp;
 dest=$f; stop=dest+124|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 $rpos = ((($f)) + 4|0);
 HEAP32[$rpos>>2] = $s;
 $rend = ((($f)) + 8|0);
 HEAP32[$rend>>2] = (-1);
 $buf = ((($f)) + 44|0);
 HEAP32[$buf>>2] = $s;
 $lock = ((($f)) + 76|0);
 HEAP32[$lock>>2] = -1;
 ___shlim($f,0);
 $call = (+___floatscan($f,$prec,1));
 $shcnt = ((($f)) + 108|0);
 $0 = HEAP32[$shcnt>>2]|0;
 $1 = HEAP32[$rpos>>2]|0;
 $2 = HEAP32[$rend>>2]|0;
 $sub$ptr$sub = (($1) - ($2))|0;
 $add = (($sub$ptr$sub) + ($0))|0;
 $tobool = ($p|0)==(0|0);
 if (!($tobool)) {
  $tobool3 = ($add|0)!=(0);
  $add$ptr = (($s) + ($add)|0);
  $cond = $tobool3 ? $add$ptr : $s;
  HEAP32[$p>>2] = $cond;
 }
 STACKTOP = sp;return (+$call);
}
function _strtold($s,$p) {
 $s = $s|0;
 $p = $p|0;
 var $call = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = (+_strtox($s,$p,2));
 return (+$call);
}
function _strtold_l($s,$p,$l) {
 $s = $s|0;
 $p = $p|0;
 $l = $l|0;
 var $call = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = (+_strtold($s,$p));
 return (+$call);
}
function _wmemset($d,$c,$n) {
 $d = $d|0;
 $c = $c|0;
 $n = $n|0;
 var $d$addr$05 = 0, $dec = 0, $incdec$ptr = 0, $n$addr$04 = 0, $tobool = 0, $tobool3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $tobool3 = ($n|0)==(0);
 if (!($tobool3)) {
  $d$addr$05 = $d;$n$addr$04 = $n;
  while(1) {
   $dec = (($n$addr$04) + -1)|0;
   $incdec$ptr = ((($d$addr$05)) + 4|0);
   HEAP32[$d$addr$05>>2] = $c;
   $tobool = ($dec|0)==(0);
   if ($tobool) {
    break;
   } else {
    $d$addr$05 = $incdec$ptr;$n$addr$04 = $dec;
   }
  }
 }
 return ($d|0);
}
function _wmemmove($d,$s,$n) {
 $d = $d|0;
 $s = $s|0;
 $n = $n|0;
 var $0 = 0, $1 = 0, $arrayidx = 0, $arrayidx1 = 0, $cmp = 0, $d$addr$018 = 0, $dec14 = 0, $dec14$in = 0, $dec3 = 0, $incdec$ptr = 0, $incdec$ptr6 = 0, $n$addr$117 = 0, $s$addr$016 = 0, $sub$ptr$div = 0, $sub$ptr$lhs$cast = 0, $sub$ptr$rhs$cast = 0, $sub$ptr$sub = 0, $tobool = 0, $tobool4 = 0, $tobool415 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $sub$ptr$lhs$cast = $d;
 $sub$ptr$rhs$cast = $s;
 $sub$ptr$sub = (($sub$ptr$lhs$cast) - ($sub$ptr$rhs$cast))|0;
 $sub$ptr$div = $sub$ptr$sub >> 2;
 $cmp = ($sub$ptr$div>>>0)<($n>>>0);
 if ($cmp) {
  $dec14$in = $n;
  while(1) {
   $dec14 = (($dec14$in) + -1)|0;
   $arrayidx = (($s) + ($dec14<<2)|0);
   $0 = HEAP32[$arrayidx>>2]|0;
   $arrayidx1 = (($d) + ($dec14<<2)|0);
   HEAP32[$arrayidx1>>2] = $0;
   $tobool = ($dec14|0)==(0);
   if ($tobool) {
    break;
   } else {
    $dec14$in = $dec14;
   }
  }
 } else {
  $tobool415 = ($n|0)==(0);
  if (!($tobool415)) {
   $d$addr$018 = $d;$n$addr$117 = $n;$s$addr$016 = $s;
   while(1) {
    $dec3 = (($n$addr$117) + -1)|0;
    $incdec$ptr = ((($s$addr$016)) + 4|0);
    $1 = HEAP32[$s$addr$016>>2]|0;
    $incdec$ptr6 = ((($d$addr$018)) + 4|0);
    HEAP32[$d$addr$018>>2] = $1;
    $tobool4 = ($dec3|0)==(0);
    if ($tobool4) {
     break;
    } else {
     $d$addr$018 = $incdec$ptr6;$n$addr$117 = $dec3;$s$addr$016 = $incdec$ptr;
    }
   }
  }
 }
 return ($d|0);
}
function _malloc($bytes) {
 $bytes = $bytes|0;
 var $$pre = 0, $$pre$i = 0, $$pre$i$i = 0, $$pre$i175 = 0, $$pre$i178 = 0, $$pre$i45$i = 0, $$pre$phi$i$iZ2D = 0, $$pre$phi$i176Z2D = 0, $$pre$phi$i46$iZ2D = 0, $$pre$phi$iZ2D = 0, $$pre$phiZ2D = 0, $$pre5$i$i = 0, $$sink$i = 0, $$sink$i$i = 0, $$sink$i154 = 0, $$sink2$i = 0, $$sink2$i172 = 0, $$sink5$i = 0, $$v$0$i = 0, $0 = 0;
 var $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0;
 var $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0;
 var $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0;
 var $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0;
 var $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0;
 var $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0;
 var $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $F$0$i$i = 0, $F104$0 = 0, $F197$0$i = 0, $F224$0$i$i = 0, $F290$0$i = 0, $I252$0$i$i = 0, $I316$0$i = 0, $I57$0$i$i = 0, $K105$0$i$i = 0, $K305$0$i$i = 0, $K373$0$i = 0, $R$1$i = 0, $R$1$i$i = 0, $R$1$i165 = 0, $R$3$i = 0;
 var $R$3$i$i = 0, $R$3$i168 = 0, $RP$1$i = 0, $RP$1$i$i = 0, $RP$1$i164 = 0, $T$0$i = 0, $T$0$i$i = 0, $T$0$i47$i = 0, $add$i = 0, $add$i$i = 0, $add$i145 = 0, $add$i179 = 0, $add$ptr = 0, $add$ptr$i = 0, $add$ptr$i$i = 0, $add$ptr$i$i$i = 0, $add$ptr$i158 = 0, $add$ptr$i16$i = 0, $add$ptr$i192 = 0, $add$ptr$i2$i$i = 0;
 var $add$ptr$i21$i = 0, $add$ptr$i49$i = 0, $add$ptr14$i$i = 0, $add$ptr15$i$i = 0, $add$ptr16$i$i = 0, $add$ptr166 = 0, $add$ptr169 = 0, $add$ptr17$i$i = 0, $add$ptr178 = 0, $add$ptr181$i = 0, $add$ptr182 = 0, $add$ptr189$i = 0, $add$ptr190$i = 0, $add$ptr193 = 0, $add$ptr199 = 0, $add$ptr2$i$i = 0, $add$ptr205$i$i = 0, $add$ptr212$i$i = 0, $add$ptr225$i = 0, $add$ptr227$i = 0;
 var $add$ptr24$i$i = 0, $add$ptr262$i = 0, $add$ptr269$i = 0, $add$ptr273$i = 0, $add$ptr282$i = 0, $add$ptr3$i$i = 0, $add$ptr30$i$i = 0, $add$ptr369$i$i = 0, $add$ptr4$i$i = 0, $add$ptr4$i$i$i = 0, $add$ptr4$i26$i = 0, $add$ptr4$i54$i = 0, $add$ptr441$i = 0, $add$ptr5$i$i = 0, $add$ptr6$i$i = 0, $add$ptr6$i$i$i = 0, $add$ptr6$i58$i = 0, $add$ptr7$i$i = 0, $add$ptr81$i$i = 0, $add$ptr95 = 0;
 var $add$ptr98 = 0, $add10$i = 0, $add101$i = 0, $add110$i = 0, $add13$i = 0, $add14$i = 0, $add140$i = 0, $add144 = 0, $add150$i = 0, $add17$i = 0, $add17$i182 = 0, $add177$i = 0, $add18$i = 0, $add19$i = 0, $add2 = 0, $add20$i = 0, $add206$i$i = 0, $add212$i = 0, $add215$i = 0, $add22$i = 0;
 var $add246$i = 0, $add26$i$i = 0, $add268$i = 0, $add269$i$i = 0, $add274$i$i = 0, $add278$i$i = 0, $add280$i$i = 0, $add283$i$i = 0, $add337$i = 0, $add342$i = 0, $add346$i = 0, $add348$i = 0, $add351$i = 0, $add46$i = 0, $add50 = 0, $add51$i = 0, $add54 = 0, $add54$i = 0, $add58 = 0, $add62 = 0;
 var $add64 = 0, $add74$i$i = 0, $add77$i = 0, $add78$i = 0, $add79$i$i = 0, $add8 = 0, $add82$i = 0, $add83$i$i = 0, $add85$i$i = 0, $add86$i = 0, $add88$i$i = 0, $add9$i = 0, $add90$i = 0, $add92$i = 0, $and = 0, $and$i = 0, $and$i$i = 0, $and$i$i$i = 0, $and$i142 = 0, $and$i17$i = 0;
 var $and$i22$i = 0, $and$i50$i = 0, $and100$i = 0, $and103$i = 0, $and104$i = 0, $and106 = 0, $and11$add51$i = 0, $and11$i = 0, $and119$i$i = 0, $and12$i = 0, $and13$i = 0, $and13$i$i = 0, $and133$i$i = 0, $and14 = 0, $and145 = 0, $and17$i = 0, $and194$i = 0, $and194$i203 = 0, $and199$i = 0, $and209$i$i = 0;
 var $and21$i = 0, $and21$i148 = 0, $and227$i$i = 0, $and236$i = 0, $and264$i$i = 0, $and268$i$i = 0, $and273$i$i = 0, $and282$i$i = 0, $and29$i = 0, $and292$i = 0, $and295$i$i = 0, $and3$i = 0, $and3$i$i = 0, $and3$i$i$i = 0, $and3$i24$i = 0, $and3$i52$i = 0, $and30$i = 0, $and318$i$i = 0, $and32$i = 0, $and32$i$i = 0;
 var $and33$i$i = 0, $and331$i = 0, $and336$i = 0, $and341$i = 0, $and350$i = 0, $and363$i = 0, $and37$i$i = 0, $and387$i = 0, $and4 = 0, $and40$i$i = 0, $and41 = 0, $and42$i = 0, $and43 = 0, $and46 = 0, $and49 = 0, $and49$i = 0, $and49$i$i = 0, $and53 = 0, $and57 = 0, $and6$i = 0;
 var $and6$i$i = 0, $and6$i10$i = 0, $and6$i27$i = 0, $and61 = 0, $and64$i = 0, $and68$i = 0, $and69$i$i = 0, $and7 = 0, $and73$i = 0, $and73$i$i = 0, $and74 = 0, $and77$i = 0, $and78$i$i = 0, $and8$i = 0, $and80$i = 0, $and81$i = 0, $and85$i = 0, $and87$i$i = 0, $and89$i = 0, $and9$i = 0;
 var $and96$i$i = 0, $arrayidx = 0, $arrayidx$i = 0, $arrayidx$i$i = 0, $arrayidx$i14$i = 0, $arrayidx$i149 = 0, $arrayidx$i37$i = 0, $arrayidx103 = 0, $arrayidx103$i$i = 0, $arrayidx106$i = 0, $arrayidx107$i$i = 0, $arrayidx113$i = 0, $arrayidx113$i155 = 0, $arrayidx121$i = 0, $arrayidx123$i$i = 0, $arrayidx126$i$i = 0, $arrayidx137$i = 0, $arrayidx143$i$i = 0, $arrayidx148$i = 0, $arrayidx151$i = 0;
 var $arrayidx151$i$i = 0, $arrayidx154$i = 0, $arrayidx155$i = 0, $arrayidx161$i = 0, $arrayidx165$i = 0, $arrayidx165$i166 = 0, $arrayidx178$i$i = 0, $arrayidx184$i = 0, $arrayidx184$i$i = 0, $arrayidx195$i$i = 0, $arrayidx196$i = 0, $arrayidx204$i = 0, $arrayidx212$i = 0, $arrayidx223$i$i = 0, $arrayidx228$i = 0, $arrayidx23$i = 0, $arrayidx233$i = 0, $arrayidx239$i = 0, $arrayidx245$i = 0, $arrayidx256$i = 0;
 var $arrayidx27$i = 0, $arrayidx276$i = 0, $arrayidx287$i$i = 0, $arrayidx289$i = 0, $arrayidx290$i$i = 0, $arrayidx325$i$i = 0, $arrayidx355$i = 0, $arrayidx358$i = 0, $arrayidx394$i = 0, $arrayidx40$i = 0, $arrayidx44$i = 0, $arrayidx61$i = 0, $arrayidx65$i = 0, $arrayidx66 = 0, $arrayidx71$i = 0, $arrayidx75$i = 0, $arrayidx91$i$i = 0, $arrayidx92$i$i = 0, $arrayidx94$i = 0, $arrayidx94$i153 = 0;
 var $arrayidx96$i$i = 0, $bk = 0, $bk$i = 0, $bk$i$i = 0, $bk$i160 = 0, $bk$i35$i = 0, $bk102$i$i = 0, $bk122 = 0, $bk124 = 0, $bk136$i = 0, $bk139$i$i = 0, $bk158$i$i = 0, $bk161$i$i = 0, $bk218$i = 0, $bk220$i = 0, $bk246$i$i = 0, $bk248$i$i = 0, $bk302$i$i = 0, $bk311$i = 0, $bk313$i = 0;
 var $bk338$i$i = 0, $bk357$i$i = 0, $bk360$i$i = 0, $bk370$i = 0, $bk407$i = 0, $bk429$i = 0, $bk43$i$i = 0, $bk432$i = 0, $bk47$i = 0, $bk55$i$i = 0, $bk67$i$i = 0, $bk74$i$i = 0, $bk78 = 0, $bk82$i$i = 0, $br$2$ph$i = 0, $call107$i = 0, $call131$i = 0, $call132$i = 0, $call275$i = 0, $call37$i = 0;
 var $call68$i = 0, $call83$i = 0, $child$i$i = 0, $child166$i$i = 0, $child289$i$i = 0, $child357$i = 0, $cmp = 0, $cmp$i = 0, $cmp$i$i$i = 0, $cmp$i11$i = 0, $cmp$i177 = 0, $cmp$i18$i = 0, $cmp$i23$i = 0, $cmp$i3$i$i = 0, $cmp$i51$i = 0, $cmp$i9$i = 0, $cmp1 = 0, $cmp1$i = 0, $cmp10 = 0, $cmp100$i$i = 0;
 var $cmp102$i = 0, $cmp104$i$i = 0, $cmp105$i = 0, $cmp106$i$i = 0, $cmp107$i = 0, $cmp108$i = 0, $cmp108$i$i = 0, $cmp112$i$i = 0, $cmp113 = 0, $cmp116$i = 0, $cmp118$i = 0, $cmp119$i = 0, $cmp12$i = 0, $cmp120$i$i = 0, $cmp120$i42$i = 0, $cmp121$i = 0, $cmp123$i = 0, $cmp124$i$i = 0, $cmp126$i = 0, $cmp127$i = 0;
 var $cmp128 = 0, $cmp128$i = 0, $cmp128$i$i = 0, $cmp130$i = 0, $cmp133$i = 0, $cmp133$i$i = 0, $cmp133$i195 = 0, $cmp135$i = 0, $cmp137$i = 0, $cmp137$i$i = 0, $cmp137$i196 = 0, $cmp138$i = 0, $cmp139 = 0, $cmp140$i = 0, $cmp141$i = 0, $cmp142$i = 0, $cmp146 = 0, $cmp147$i = 0, $cmp14799$i = 0, $cmp15 = 0;
 var $cmp15$i = 0, $cmp151$i = 0, $cmp152$i = 0, $cmp153$i$i = 0, $cmp155$i = 0, $cmp156 = 0, $cmp156$i = 0, $cmp156$i$i = 0, $cmp157$i = 0, $cmp159$i = 0, $cmp159$i198 = 0, $cmp16 = 0, $cmp160$i$i = 0, $cmp162 = 0, $cmp162$i = 0, $cmp162$i199 = 0, $cmp166$i = 0, $cmp168$i$i = 0, $cmp171$i = 0, $cmp172$i$i = 0;
 var $cmp174$i = 0, $cmp180$i = 0, $cmp185$i = 0, $cmp185$i$i = 0, $cmp186 = 0, $cmp186$i = 0, $cmp189$i$i = 0, $cmp19$i = 0, $cmp190$i = 0, $cmp191$i = 0, $cmp198$i = 0, $cmp2$i$i = 0, $cmp2$i$i$i = 0, $cmp20$i$i = 0, $cmp203$i = 0, $cmp208$i = 0, $cmp209$i = 0, $cmp21$i = 0, $cmp215$i$i = 0, $cmp217$i = 0;
 var $cmp218$i = 0, $cmp221$i = 0, $cmp224$i = 0, $cmp228$i = 0, $cmp229$i = 0, $cmp233$i = 0, $cmp236$i$i = 0, $cmp24$i = 0, $cmp24$i$i = 0, $cmp246$i = 0, $cmp250$i = 0, $cmp254$i$i = 0, $cmp257$i = 0, $cmp258$i$i = 0, $cmp26$i = 0, $cmp265$i = 0, $cmp27$i$i = 0, $cmp28$i = 0, $cmp28$i$i = 0, $cmp284$i = 0;
 var $cmp287$i = 0, $cmp29 = 0, $cmp3$i$i = 0, $cmp301$i = 0, $cmp306$i$i = 0, $cmp31 = 0, $cmp319$i = 0, $cmp319$i$i = 0, $cmp32$i = 0, $cmp32$i184 = 0, $cmp323$i = 0, $cmp327$i$i = 0, $cmp33$i = 0, $cmp332$i$i = 0, $cmp34$i = 0, $cmp34$i$i = 0, $cmp35$i = 0, $cmp350$i$i = 0, $cmp36$i = 0, $cmp36$i$i = 0;
 var $cmp374$i = 0, $cmp38$i = 0, $cmp38$i$i = 0, $cmp388$i = 0, $cmp396$i = 0, $cmp40$i = 0, $cmp401$i = 0, $cmp41$i$i = 0, $cmp42$i$i = 0, $cmp422$i = 0, $cmp43$i = 0, $cmp44$i$i = 0, $cmp45$i = 0, $cmp45$i152 = 0, $cmp46$i = 0, $cmp46$i$i = 0, $cmp46$i38$i = 0, $cmp48$i = 0, $cmp49$i = 0, $cmp5 = 0;
 var $cmp51$i = 0, $cmp54$i$i = 0, $cmp55$i = 0, $cmp55$i185 = 0, $cmp57$i = 0, $cmp57$i$i = 0, $cmp57$i186 = 0, $cmp59$i$i = 0, $cmp60$i = 0, $cmp60$i$i = 0, $cmp62$i = 0, $cmp63$i = 0, $cmp63$i$i = 0, $cmp65$i = 0, $cmp66$i = 0, $cmp66$i189 = 0, $cmp69$i = 0, $cmp7$i$i = 0, $cmp70 = 0, $cmp72$i = 0;
 var $cmp75$i$i = 0, $cmp76 = 0, $cmp76$i = 0, $cmp79 = 0, $cmp81$i = 0, $cmp81$i$i = 0, $cmp81$i190 = 0, $cmp83$i$i = 0, $cmp85$i = 0, $cmp86$i$i = 0, $cmp89$i = 0, $cmp9$i$i = 0, $cmp90$i = 0, $cmp91$i = 0, $cmp93$i = 0, $cmp95$i = 0, $cmp96$i = 0, $cmp97$i = 0, $cmp97$i$i = 0, $cmp977$i = 0;
 var $cmp99 = 0, $cond = 0, $cond$i = 0, $cond$i$i = 0, $cond$i$i$i = 0, $cond$i150 = 0, $cond$i19$i = 0, $cond$i25$i = 0, $cond$i53$i = 0, $cond115$i$i = 0, $cond13$i$i = 0, $cond15$i$i = 0, $cond2$i$i = 0, $cond3$i = 0, $cond315$i$i = 0, $cond383$i = 0, $exitcond$i$i = 0, $fd$i = 0, $fd$i$i = 0, $fd$i161 = 0;
 var $fd103$i$i = 0, $fd123 = 0, $fd139$i = 0, $fd140$i$i = 0, $fd148$i$i = 0, $fd160$i$i = 0, $fd219$i = 0, $fd247$i$i = 0, $fd303$i$i = 0, $fd312$i = 0, $fd339$i$i = 0, $fd344$i$i = 0, $fd359$i$i = 0, $fd371$i = 0, $fd408$i = 0, $fd416$i = 0, $fd431$i = 0, $fd50$i = 0, $fd54$i$i = 0, $fd59$i$i = 0;
 var $fd68$pre$phi$i$iZ2D = 0, $fd69 = 0, $fd78$i$i = 0, $fd85$i$i = 0, $fd9 = 0, $head = 0, $head$i = 0, $head$i$i = 0, $head$i$i$i = 0, $head$i151 = 0, $head$i20$i = 0, $head$i31$i = 0, $head$i57$i = 0, $head118$i$i = 0, $head168 = 0, $head173 = 0, $head177 = 0, $head179 = 0, $head179$i = 0, $head182$i = 0;
 var $head187$i = 0, $head189$i = 0, $head195 = 0, $head198 = 0, $head208$i$i = 0, $head211$i$i = 0, $head23$i$i = 0, $head25 = 0, $head26$i$i = 0, $head265$i = 0, $head268$i = 0, $head271$i = 0, $head274$i = 0, $head279$i = 0, $head281$i = 0, $head29$i = 0, $head29$i$i = 0, $head317$i$i = 0, $head32$i$i = 0, $head34$i$i = 0;
 var $head386$i = 0, $head7$i$i = 0, $head7$i$i$i = 0, $head7$i59$i = 0, $head94 = 0, $head97 = 0, $head99$i = 0, $i$01$i$i = 0, $idx$0$i = 0, $inc$i$i = 0, $index$i = 0, $index$i$i = 0, $index$i169 = 0, $index$i43$i = 0, $index288$i$i = 0, $index356$i = 0, $magic$i$i = 0, $nb$0 = 0, $neg = 0, $neg$i = 0;
 var $neg$i$i = 0, $neg$i170 = 0, $neg$i181 = 0, $neg103$i = 0, $neg13 = 0, $neg132$i$i = 0, $neg48$i = 0, $neg73 = 0, $next$i = 0, $next$i$i = 0, $next$i$i$i = 0, $next231$i = 0, $not$cmp$i = 0, $not$cmp107$i = 0, $not$cmp114$i = 0, $not$cmp141$i = 0, $not$cmp144$i$i = 0, $not$cmp150$i$i = 0, $not$cmp205$i = 0, $not$cmp346$i$i = 0;
 var $not$cmp4$i = 0, $not$cmp418$i = 0, $not$cmp494$i = 0, $oldfirst$0$i$i = 0, $or$cond$i = 0, $or$cond$i187 = 0, $or$cond1$i = 0, $or$cond1$i183 = 0, $or$cond2$i = 0, $or$cond3$i = 0, $or$cond4$i = 0, $or$cond5$i = 0, $or$cond7$i = 0, $or$cond7$not$i = 0, $or$cond8$i = 0, $or$cond97$i = 0, $or$cond98$i = 0, $or$i = 0, $or$i$i = 0, $or$i$i$i = 0;
 var $or$i194 = 0, $or$i56$i = 0, $or101$i$i = 0, $or110 = 0, $or167 = 0, $or172 = 0, $or176 = 0, $or178$i = 0, $or180 = 0, $or183$i = 0, $or186$i = 0, $or188$i = 0, $or19$i$i = 0, $or194 = 0, $or197 = 0, $or204$i = 0, $or210$i$i = 0, $or22$i$i = 0, $or23 = 0, $or232$i$i = 0;
 var $or26 = 0, $or264$i = 0, $or267$i = 0, $or270$i = 0, $or275$i = 0, $or278$i = 0, $or28$i$i = 0, $or280$i = 0, $or297$i = 0, $or300$i$i = 0, $or33$i$i = 0, $or368$i = 0, $or40 = 0, $or44$i$i = 0, $or93 = 0, $or96 = 0, $parent$i = 0, $parent$i$i = 0, $parent$i159 = 0, $parent$i40$i = 0;
 var $parent135$i = 0, $parent138$i$i = 0, $parent149$i = 0, $parent162$i$i = 0, $parent165$i$i = 0, $parent166$i = 0, $parent179$i$i = 0, $parent196$i$i = 0, $parent226$i = 0, $parent240$i = 0, $parent257$i = 0, $parent301$i$i = 0, $parent337$i$i = 0, $parent361$i$i = 0, $parent369$i = 0, $parent406$i = 0, $parent433$i = 0, $qsize$0$i$i = 0, $retval$0 = 0, $rsize$0$i = 0;
 var $rsize$0$lcssa$i = 0, $rsize$08$i = 0, $rsize$1$i = 0, $rsize$3$i = 0, $rsize$4$lcssa$i = 0, $rsize$49$i = 0, $rst$0$i = 0, $rst$1$i = 0, $sflags193$i = 0, $sflags235$i = 0, $shl = 0, $shl$i = 0, $shl$i$i = 0, $shl$i13$i = 0, $shl$i143 = 0, $shl$i36$i = 0, $shl102 = 0, $shl105 = 0, $shl116$i$i = 0, $shl12 = 0;
 var $shl127$i$i = 0, $shl131$i$i = 0, $shl15$i = 0, $shl18$i = 0, $shl192$i = 0, $shl195$i = 0, $shl198$i = 0, $shl22 = 0, $shl222$i$i = 0, $shl226$i$i = 0, $shl265$i$i = 0, $shl270$i$i = 0, $shl276$i$i = 0, $shl279$i$i = 0, $shl288$i = 0, $shl291$i = 0, $shl294$i$i = 0, $shl31$i = 0, $shl316$i$i = 0, $shl326$i$i = 0;
 var $shl333$i = 0, $shl338$i = 0, $shl344$i = 0, $shl347$i = 0, $shl35 = 0, $shl362$i = 0, $shl37 = 0, $shl384$i = 0, $shl39$i$i = 0, $shl395$i = 0, $shl48$i$i = 0, $shl52$i = 0, $shl60$i = 0, $shl65 = 0, $shl70$i$i = 0, $shl72 = 0, $shl75$i$i = 0, $shl81$i$i = 0, $shl84$i$i = 0, $shl9$i = 0;
 var $shl90 = 0, $shl95$i$i = 0, $shr = 0, $shr$i = 0, $shr$i$i = 0, $shr$i139 = 0, $shr$i34$i = 0, $shr101 = 0, $shr11$i = 0, $shr11$i146 = 0, $shr110$i$i = 0, $shr12$i = 0, $shr124$i$i = 0, $shr15$i = 0, $shr16$i = 0, $shr16$i147 = 0, $shr19$i = 0, $shr194$i = 0, $shr20$i = 0, $shr214$i$i = 0;
 var $shr253$i$i = 0, $shr263$i$i = 0, $shr267$i$i = 0, $shr27$i = 0, $shr272$i$i = 0, $shr277$i$i = 0, $shr281$i$i = 0, $shr283$i = 0, $shr3 = 0, $shr310$i$i = 0, $shr318$i = 0, $shr323$i$i = 0, $shr330$i = 0, $shr335$i = 0, $shr340$i = 0, $shr345$i = 0, $shr349$i = 0, $shr378$i = 0, $shr392$i = 0, $shr4$i = 0;
 var $shr42$i = 0, $shr45 = 0, $shr47 = 0, $shr48 = 0, $shr5$i = 0, $shr5$i141 = 0, $shr51 = 0, $shr52 = 0, $shr55 = 0, $shr56 = 0, $shr58$i$i = 0, $shr59 = 0, $shr60 = 0, $shr63 = 0, $shr68$i$i = 0, $shr7$i = 0, $shr7$i144 = 0, $shr72$i = 0, $shr72$i$i = 0, $shr75$i = 0;
 var $shr76$i = 0, $shr77$i$i = 0, $shr79$i = 0, $shr8$i = 0, $shr80$i = 0, $shr82$i$i = 0, $shr83$i = 0, $shr84$i = 0, $shr86$i$i = 0, $shr87$i = 0, $shr88$i = 0, $shr91$i = 0, $size$i$i = 0, $size$i$i$i = 0, $size188$i = 0, $size245$i = 0, $sizebits$0$i = 0, $sizebits$0$shl52$i = 0, $sp$0$i$i = 0, $sp$0$i$i$i = 0;
 var $sp$0108$i = 0, $sp$1107$i = 0, $ssize$2$ph$i = 0, $sub = 0, $sub$i = 0, $sub$i138 = 0, $sub$i180 = 0, $sub$ptr$lhs$cast$i = 0, $sub$ptr$lhs$cast$i$i = 0, $sub$ptr$lhs$cast$i28$i = 0, $sub$ptr$rhs$cast$i = 0, $sub$ptr$rhs$cast$i$i = 0, $sub$ptr$rhs$cast$i29$i = 0, $sub$ptr$sub$i = 0, $sub$ptr$sub$i$i = 0, $sub$ptr$sub$i30$i = 0, $sub$ptr$sub$tsize$4$i = 0, $sub10$i = 0, $sub101$i = 0, $sub101$rsize$4$i = 0;
 var $sub112$i = 0, $sub113$i$i = 0, $sub118$i = 0, $sub14$i = 0, $sub16$i$i = 0, $sub160 = 0, $sub172$i = 0, $sub18$i$i = 0, $sub190 = 0, $sub2$i = 0, $sub22$i = 0, $sub260$i = 0, $sub262$i$i = 0, $sub266$i$i = 0, $sub271$i$i = 0, $sub275$i$i = 0, $sub30$i = 0, $sub31$i = 0, $sub31$rsize$0$i = 0, $sub313$i$i = 0;
 var $sub329$i = 0, $sub33$i = 0, $sub334$i = 0, $sub339$i = 0, $sub343$i = 0, $sub381$i = 0, $sub4$i = 0, $sub41$i = 0, $sub42 = 0, $sub44 = 0, $sub5$i$i = 0, $sub5$i$i$i = 0, $sub5$i55$i = 0, $sub50$i = 0, $sub6$i = 0, $sub63$i = 0, $sub67$i = 0, $sub67$i$i = 0, $sub70$i = 0, $sub71$i$i = 0;
 var $sub76$i$i = 0, $sub80$i$i = 0, $sub91 = 0, $sub99$i = 0, $t$0$i = 0, $t$2$i = 0, $t$4$ph$i = 0, $t$4$v$4$i = 0, $t$48$i = 0, $tbase$796$i = 0, $tobool$i$i = 0, $tobool107 = 0, $tobool195$i = 0, $tobool200$i = 0, $tobool228$i$i = 0, $tobool237$i = 0, $tobool293$i = 0, $tobool296$i$i = 0, $tobool30$i = 0, $tobool364$i = 0;
 var $tobool97$i$i = 0, $tsize$2657583$i = 0, $tsize$4$i = 0, $tsize$795$i = 0, $v$0$i = 0, $v$0$lcssa$i = 0, $v$09$i = 0, $v$1$i = 0, $v$3$i = 0, $v$4$lcssa$i = 0, $v$4$ph$i = 0, $v$410$i = 0, $xor$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $magic$i$i = sp;
 $cmp = ($bytes>>>0)<(245);
 do {
  if ($cmp) {
   $cmp1 = ($bytes>>>0)<(11);
   $add2 = (($bytes) + 11)|0;
   $and = $add2 & -8;
   $cond = $cmp1 ? 16 : $and;
   $shr = $cond >>> 3;
   $0 = HEAP32[4896]|0;
   $shr3 = $0 >>> $shr;
   $and4 = $shr3 & 3;
   $cmp5 = ($and4|0)==(0);
   if (!($cmp5)) {
    $neg = $shr3 & 1;
    $and7 = $neg ^ 1;
    $add8 = (($and7) + ($shr))|0;
    $shl = $add8 << 1;
    $arrayidx = (19624 + ($shl<<2)|0);
    $1 = ((($arrayidx)) + 8|0);
    $2 = HEAP32[$1>>2]|0;
    $fd9 = ((($2)) + 8|0);
    $3 = HEAP32[$fd9>>2]|0;
    $cmp10 = ($arrayidx|0)==($3|0);
    do {
     if ($cmp10) {
      $shl12 = 1 << $add8;
      $neg13 = $shl12 ^ -1;
      $and14 = $0 & $neg13;
      HEAP32[4896] = $and14;
     } else {
      $4 = HEAP32[(19600)>>2]|0;
      $cmp15 = ($3>>>0)<($4>>>0);
      if ($cmp15) {
       _abort();
       // unreachable;
      }
      $bk = ((($3)) + 12|0);
      $5 = HEAP32[$bk>>2]|0;
      $cmp16 = ($5|0)==($2|0);
      if ($cmp16) {
       HEAP32[$bk>>2] = $arrayidx;
       HEAP32[$1>>2] = $3;
       break;
      } else {
       _abort();
       // unreachable;
      }
     }
    } while(0);
    $shl22 = $add8 << 3;
    $or23 = $shl22 | 3;
    $head = ((($2)) + 4|0);
    HEAP32[$head>>2] = $or23;
    $add$ptr = (($2) + ($shl22)|0);
    $head25 = ((($add$ptr)) + 4|0);
    $6 = HEAP32[$head25>>2]|0;
    $or26 = $6 | 1;
    HEAP32[$head25>>2] = $or26;
    $retval$0 = $fd9;
    STACKTOP = sp;return ($retval$0|0);
   }
   $7 = HEAP32[(19592)>>2]|0;
   $cmp29 = ($cond>>>0)>($7>>>0);
   if ($cmp29) {
    $cmp31 = ($shr3|0)==(0);
    if (!($cmp31)) {
     $shl35 = $shr3 << $shr;
     $shl37 = 2 << $shr;
     $sub = (0 - ($shl37))|0;
     $or40 = $shl37 | $sub;
     $and41 = $shl35 & $or40;
     $sub42 = (0 - ($and41))|0;
     $and43 = $and41 & $sub42;
     $sub44 = (($and43) + -1)|0;
     $shr45 = $sub44 >>> 12;
     $and46 = $shr45 & 16;
     $shr47 = $sub44 >>> $and46;
     $shr48 = $shr47 >>> 5;
     $and49 = $shr48 & 8;
     $add50 = $and49 | $and46;
     $shr51 = $shr47 >>> $and49;
     $shr52 = $shr51 >>> 2;
     $and53 = $shr52 & 4;
     $add54 = $add50 | $and53;
     $shr55 = $shr51 >>> $and53;
     $shr56 = $shr55 >>> 1;
     $and57 = $shr56 & 2;
     $add58 = $add54 | $and57;
     $shr59 = $shr55 >>> $and57;
     $shr60 = $shr59 >>> 1;
     $and61 = $shr60 & 1;
     $add62 = $add58 | $and61;
     $shr63 = $shr59 >>> $and61;
     $add64 = (($add62) + ($shr63))|0;
     $shl65 = $add64 << 1;
     $arrayidx66 = (19624 + ($shl65<<2)|0);
     $8 = ((($arrayidx66)) + 8|0);
     $9 = HEAP32[$8>>2]|0;
     $fd69 = ((($9)) + 8|0);
     $10 = HEAP32[$fd69>>2]|0;
     $cmp70 = ($arrayidx66|0)==($10|0);
     do {
      if ($cmp70) {
       $shl72 = 1 << $add64;
       $neg73 = $shl72 ^ -1;
       $and74 = $0 & $neg73;
       HEAP32[4896] = $and74;
       $14 = $and74;
      } else {
       $11 = HEAP32[(19600)>>2]|0;
       $cmp76 = ($10>>>0)<($11>>>0);
       if ($cmp76) {
        _abort();
        // unreachable;
       }
       $bk78 = ((($10)) + 12|0);
       $12 = HEAP32[$bk78>>2]|0;
       $cmp79 = ($12|0)==($9|0);
       if ($cmp79) {
        HEAP32[$bk78>>2] = $arrayidx66;
        HEAP32[$8>>2] = $10;
        $14 = $0;
        break;
       } else {
        _abort();
        // unreachable;
       }
      }
     } while(0);
     $shl90 = $add64 << 3;
     $sub91 = (($shl90) - ($cond))|0;
     $or93 = $cond | 3;
     $head94 = ((($9)) + 4|0);
     HEAP32[$head94>>2] = $or93;
     $add$ptr95 = (($9) + ($cond)|0);
     $or96 = $sub91 | 1;
     $head97 = ((($add$ptr95)) + 4|0);
     HEAP32[$head97>>2] = $or96;
     $add$ptr98 = (($add$ptr95) + ($sub91)|0);
     HEAP32[$add$ptr98>>2] = $sub91;
     $cmp99 = ($7|0)==(0);
     if (!($cmp99)) {
      $13 = HEAP32[(19604)>>2]|0;
      $shr101 = $7 >>> 3;
      $shl102 = $shr101 << 1;
      $arrayidx103 = (19624 + ($shl102<<2)|0);
      $shl105 = 1 << $shr101;
      $and106 = $14 & $shl105;
      $tobool107 = ($and106|0)==(0);
      if ($tobool107) {
       $or110 = $14 | $shl105;
       HEAP32[4896] = $or110;
       $$pre = ((($arrayidx103)) + 8|0);
       $$pre$phiZ2D = $$pre;$F104$0 = $arrayidx103;
      } else {
       $15 = ((($arrayidx103)) + 8|0);
       $16 = HEAP32[$15>>2]|0;
       $17 = HEAP32[(19600)>>2]|0;
       $cmp113 = ($16>>>0)<($17>>>0);
       if ($cmp113) {
        _abort();
        // unreachable;
       } else {
        $$pre$phiZ2D = $15;$F104$0 = $16;
       }
      }
      HEAP32[$$pre$phiZ2D>>2] = $13;
      $bk122 = ((($F104$0)) + 12|0);
      HEAP32[$bk122>>2] = $13;
      $fd123 = ((($13)) + 8|0);
      HEAP32[$fd123>>2] = $F104$0;
      $bk124 = ((($13)) + 12|0);
      HEAP32[$bk124>>2] = $arrayidx103;
     }
     HEAP32[(19592)>>2] = $sub91;
     HEAP32[(19604)>>2] = $add$ptr95;
     $retval$0 = $fd69;
     STACKTOP = sp;return ($retval$0|0);
    }
    $18 = HEAP32[(19588)>>2]|0;
    $cmp128 = ($18|0)==(0);
    if ($cmp128) {
     $nb$0 = $cond;
    } else {
     $sub$i = (0 - ($18))|0;
     $and$i = $18 & $sub$i;
     $sub2$i = (($and$i) + -1)|0;
     $shr$i = $sub2$i >>> 12;
     $and3$i = $shr$i & 16;
     $shr4$i = $sub2$i >>> $and3$i;
     $shr5$i = $shr4$i >>> 5;
     $and6$i = $shr5$i & 8;
     $add$i = $and6$i | $and3$i;
     $shr7$i = $shr4$i >>> $and6$i;
     $shr8$i = $shr7$i >>> 2;
     $and9$i = $shr8$i & 4;
     $add10$i = $add$i | $and9$i;
     $shr11$i = $shr7$i >>> $and9$i;
     $shr12$i = $shr11$i >>> 1;
     $and13$i = $shr12$i & 2;
     $add14$i = $add10$i | $and13$i;
     $shr15$i = $shr11$i >>> $and13$i;
     $shr16$i = $shr15$i >>> 1;
     $and17$i = $shr16$i & 1;
     $add18$i = $add14$i | $and17$i;
     $shr19$i = $shr15$i >>> $and17$i;
     $add20$i = (($add18$i) + ($shr19$i))|0;
     $arrayidx$i = (19888 + ($add20$i<<2)|0);
     $19 = HEAP32[$arrayidx$i>>2]|0;
     $head$i = ((($19)) + 4|0);
     $20 = HEAP32[$head$i>>2]|0;
     $and21$i = $20 & -8;
     $sub22$i = (($and21$i) - ($cond))|0;
     $arrayidx233$i = ((($19)) + 16|0);
     $21 = HEAP32[$arrayidx233$i>>2]|0;
     $not$cmp4$i = ($21|0)==(0|0);
     $$sink5$i = $not$cmp4$i&1;
     $arrayidx276$i = (((($19)) + 16|0) + ($$sink5$i<<2)|0);
     $22 = HEAP32[$arrayidx276$i>>2]|0;
     $cmp287$i = ($22|0)==(0|0);
     if ($cmp287$i) {
      $rsize$0$lcssa$i = $sub22$i;$v$0$lcssa$i = $19;
     } else {
      $23 = $22;$rsize$08$i = $sub22$i;$v$09$i = $19;
      while(1) {
       $head29$i = ((($23)) + 4|0);
       $24 = HEAP32[$head29$i>>2]|0;
       $and30$i = $24 & -8;
       $sub31$i = (($and30$i) - ($cond))|0;
       $cmp32$i = ($sub31$i>>>0)<($rsize$08$i>>>0);
       $sub31$rsize$0$i = $cmp32$i ? $sub31$i : $rsize$08$i;
       $$v$0$i = $cmp32$i ? $23 : $v$09$i;
       $arrayidx23$i = ((($23)) + 16|0);
       $25 = HEAP32[$arrayidx23$i>>2]|0;
       $not$cmp$i = ($25|0)==(0|0);
       $$sink$i = $not$cmp$i&1;
       $arrayidx27$i = (((($23)) + 16|0) + ($$sink$i<<2)|0);
       $26 = HEAP32[$arrayidx27$i>>2]|0;
       $cmp28$i = ($26|0)==(0|0);
       if ($cmp28$i) {
        $rsize$0$lcssa$i = $sub31$rsize$0$i;$v$0$lcssa$i = $$v$0$i;
        break;
       } else {
        $23 = $26;$rsize$08$i = $sub31$rsize$0$i;$v$09$i = $$v$0$i;
       }
      }
     }
     $27 = HEAP32[(19600)>>2]|0;
     $cmp33$i = ($v$0$lcssa$i>>>0)<($27>>>0);
     if ($cmp33$i) {
      _abort();
      // unreachable;
     }
     $add$ptr$i = (($v$0$lcssa$i) + ($cond)|0);
     $cmp35$i = ($v$0$lcssa$i>>>0)<($add$ptr$i>>>0);
     if (!($cmp35$i)) {
      _abort();
      // unreachable;
     }
     $parent$i = ((($v$0$lcssa$i)) + 24|0);
     $28 = HEAP32[$parent$i>>2]|0;
     $bk$i = ((($v$0$lcssa$i)) + 12|0);
     $29 = HEAP32[$bk$i>>2]|0;
     $cmp40$i = ($29|0)==($v$0$lcssa$i|0);
     do {
      if ($cmp40$i) {
       $arrayidx61$i = ((($v$0$lcssa$i)) + 20|0);
       $33 = HEAP32[$arrayidx61$i>>2]|0;
       $cmp62$i = ($33|0)==(0|0);
       if ($cmp62$i) {
        $arrayidx65$i = ((($v$0$lcssa$i)) + 16|0);
        $34 = HEAP32[$arrayidx65$i>>2]|0;
        $cmp66$i = ($34|0)==(0|0);
        if ($cmp66$i) {
         $R$3$i = 0;
         break;
        } else {
         $R$1$i = $34;$RP$1$i = $arrayidx65$i;
        }
       } else {
        $R$1$i = $33;$RP$1$i = $arrayidx61$i;
       }
       while(1) {
        $arrayidx71$i = ((($R$1$i)) + 20|0);
        $35 = HEAP32[$arrayidx71$i>>2]|0;
        $cmp72$i = ($35|0)==(0|0);
        if (!($cmp72$i)) {
         $R$1$i = $35;$RP$1$i = $arrayidx71$i;
         continue;
        }
        $arrayidx75$i = ((($R$1$i)) + 16|0);
        $36 = HEAP32[$arrayidx75$i>>2]|0;
        $cmp76$i = ($36|0)==(0|0);
        if ($cmp76$i) {
         break;
        } else {
         $R$1$i = $36;$RP$1$i = $arrayidx75$i;
        }
       }
       $cmp81$i = ($RP$1$i>>>0)<($27>>>0);
       if ($cmp81$i) {
        _abort();
        // unreachable;
       } else {
        HEAP32[$RP$1$i>>2] = 0;
        $R$3$i = $R$1$i;
        break;
       }
      } else {
       $fd$i = ((($v$0$lcssa$i)) + 8|0);
       $30 = HEAP32[$fd$i>>2]|0;
       $cmp45$i = ($30>>>0)<($27>>>0);
       if ($cmp45$i) {
        _abort();
        // unreachable;
       }
       $bk47$i = ((($30)) + 12|0);
       $31 = HEAP32[$bk47$i>>2]|0;
       $cmp48$i = ($31|0)==($v$0$lcssa$i|0);
       if (!($cmp48$i)) {
        _abort();
        // unreachable;
       }
       $fd50$i = ((($29)) + 8|0);
       $32 = HEAP32[$fd50$i>>2]|0;
       $cmp51$i = ($32|0)==($v$0$lcssa$i|0);
       if ($cmp51$i) {
        HEAP32[$bk47$i>>2] = $29;
        HEAP32[$fd50$i>>2] = $30;
        $R$3$i = $29;
        break;
       } else {
        _abort();
        // unreachable;
       }
      }
     } while(0);
     $cmp90$i = ($28|0)==(0|0);
     L73: do {
      if (!($cmp90$i)) {
       $index$i = ((($v$0$lcssa$i)) + 28|0);
       $37 = HEAP32[$index$i>>2]|0;
       $arrayidx94$i = (19888 + ($37<<2)|0);
       $38 = HEAP32[$arrayidx94$i>>2]|0;
       $cmp95$i = ($v$0$lcssa$i|0)==($38|0);
       do {
        if ($cmp95$i) {
         HEAP32[$arrayidx94$i>>2] = $R$3$i;
         $cond$i = ($R$3$i|0)==(0|0);
         if ($cond$i) {
          $shl$i = 1 << $37;
          $neg$i = $shl$i ^ -1;
          $and103$i = $18 & $neg$i;
          HEAP32[(19588)>>2] = $and103$i;
          break L73;
         }
        } else {
         $39 = HEAP32[(19600)>>2]|0;
         $cmp107$i = ($28>>>0)<($39>>>0);
         if ($cmp107$i) {
          _abort();
          // unreachable;
         } else {
          $arrayidx113$i = ((($28)) + 16|0);
          $40 = HEAP32[$arrayidx113$i>>2]|0;
          $not$cmp114$i = ($40|0)!=($v$0$lcssa$i|0);
          $$sink2$i = $not$cmp114$i&1;
          $arrayidx121$i = (((($28)) + 16|0) + ($$sink2$i<<2)|0);
          HEAP32[$arrayidx121$i>>2] = $R$3$i;
          $cmp126$i = ($R$3$i|0)==(0|0);
          if ($cmp126$i) {
           break L73;
          } else {
           break;
          }
         }
        }
       } while(0);
       $41 = HEAP32[(19600)>>2]|0;
       $cmp130$i = ($R$3$i>>>0)<($41>>>0);
       if ($cmp130$i) {
        _abort();
        // unreachable;
       }
       $parent135$i = ((($R$3$i)) + 24|0);
       HEAP32[$parent135$i>>2] = $28;
       $arrayidx137$i = ((($v$0$lcssa$i)) + 16|0);
       $42 = HEAP32[$arrayidx137$i>>2]|0;
       $cmp138$i = ($42|0)==(0|0);
       do {
        if (!($cmp138$i)) {
         $cmp142$i = ($42>>>0)<($41>>>0);
         if ($cmp142$i) {
          _abort();
          // unreachable;
         } else {
          $arrayidx148$i = ((($R$3$i)) + 16|0);
          HEAP32[$arrayidx148$i>>2] = $42;
          $parent149$i = ((($42)) + 24|0);
          HEAP32[$parent149$i>>2] = $R$3$i;
          break;
         }
        }
       } while(0);
       $arrayidx154$i = ((($v$0$lcssa$i)) + 20|0);
       $43 = HEAP32[$arrayidx154$i>>2]|0;
       $cmp155$i = ($43|0)==(0|0);
       if (!($cmp155$i)) {
        $44 = HEAP32[(19600)>>2]|0;
        $cmp159$i = ($43>>>0)<($44>>>0);
        if ($cmp159$i) {
         _abort();
         // unreachable;
        } else {
         $arrayidx165$i = ((($R$3$i)) + 20|0);
         HEAP32[$arrayidx165$i>>2] = $43;
         $parent166$i = ((($43)) + 24|0);
         HEAP32[$parent166$i>>2] = $R$3$i;
         break;
        }
       }
      }
     } while(0);
     $cmp174$i = ($rsize$0$lcssa$i>>>0)<(16);
     if ($cmp174$i) {
      $add177$i = (($rsize$0$lcssa$i) + ($cond))|0;
      $or178$i = $add177$i | 3;
      $head179$i = ((($v$0$lcssa$i)) + 4|0);
      HEAP32[$head179$i>>2] = $or178$i;
      $add$ptr181$i = (($v$0$lcssa$i) + ($add177$i)|0);
      $head182$i = ((($add$ptr181$i)) + 4|0);
      $45 = HEAP32[$head182$i>>2]|0;
      $or183$i = $45 | 1;
      HEAP32[$head182$i>>2] = $or183$i;
     } else {
      $or186$i = $cond | 3;
      $head187$i = ((($v$0$lcssa$i)) + 4|0);
      HEAP32[$head187$i>>2] = $or186$i;
      $or188$i = $rsize$0$lcssa$i | 1;
      $head189$i = ((($add$ptr$i)) + 4|0);
      HEAP32[$head189$i>>2] = $or188$i;
      $add$ptr190$i = (($add$ptr$i) + ($rsize$0$lcssa$i)|0);
      HEAP32[$add$ptr190$i>>2] = $rsize$0$lcssa$i;
      $cmp191$i = ($7|0)==(0);
      if (!($cmp191$i)) {
       $46 = HEAP32[(19604)>>2]|0;
       $shr194$i = $7 >>> 3;
       $shl195$i = $shr194$i << 1;
       $arrayidx196$i = (19624 + ($shl195$i<<2)|0);
       $shl198$i = 1 << $shr194$i;
       $and199$i = $0 & $shl198$i;
       $tobool200$i = ($and199$i|0)==(0);
       if ($tobool200$i) {
        $or204$i = $0 | $shl198$i;
        HEAP32[4896] = $or204$i;
        $$pre$i = ((($arrayidx196$i)) + 8|0);
        $$pre$phi$iZ2D = $$pre$i;$F197$0$i = $arrayidx196$i;
       } else {
        $47 = ((($arrayidx196$i)) + 8|0);
        $48 = HEAP32[$47>>2]|0;
        $49 = HEAP32[(19600)>>2]|0;
        $cmp208$i = ($48>>>0)<($49>>>0);
        if ($cmp208$i) {
         _abort();
         // unreachable;
        } else {
         $$pre$phi$iZ2D = $47;$F197$0$i = $48;
        }
       }
       HEAP32[$$pre$phi$iZ2D>>2] = $46;
       $bk218$i = ((($F197$0$i)) + 12|0);
       HEAP32[$bk218$i>>2] = $46;
       $fd219$i = ((($46)) + 8|0);
       HEAP32[$fd219$i>>2] = $F197$0$i;
       $bk220$i = ((($46)) + 12|0);
       HEAP32[$bk220$i>>2] = $arrayidx196$i;
      }
      HEAP32[(19592)>>2] = $rsize$0$lcssa$i;
      HEAP32[(19604)>>2] = $add$ptr$i;
     }
     $add$ptr225$i = ((($v$0$lcssa$i)) + 8|0);
     $retval$0 = $add$ptr225$i;
     STACKTOP = sp;return ($retval$0|0);
    }
   } else {
    $nb$0 = $cond;
   }
  } else {
   $cmp139 = ($bytes>>>0)>(4294967231);
   if ($cmp139) {
    $nb$0 = -1;
   } else {
    $add144 = (($bytes) + 11)|0;
    $and145 = $add144 & -8;
    $50 = HEAP32[(19588)>>2]|0;
    $cmp146 = ($50|0)==(0);
    if ($cmp146) {
     $nb$0 = $and145;
    } else {
     $sub$i138 = (0 - ($and145))|0;
     $shr$i139 = $add144 >>> 8;
     $cmp$i = ($shr$i139|0)==(0);
     if ($cmp$i) {
      $idx$0$i = 0;
     } else {
      $cmp1$i = ($and145>>>0)>(16777215);
      if ($cmp1$i) {
       $idx$0$i = 31;
      } else {
       $sub4$i = (($shr$i139) + 1048320)|0;
       $shr5$i141 = $sub4$i >>> 16;
       $and$i142 = $shr5$i141 & 8;
       $shl$i143 = $shr$i139 << $and$i142;
       $sub6$i = (($shl$i143) + 520192)|0;
       $shr7$i144 = $sub6$i >>> 16;
       $and8$i = $shr7$i144 & 4;
       $add$i145 = $and8$i | $and$i142;
       $shl9$i = $shl$i143 << $and8$i;
       $sub10$i = (($shl9$i) + 245760)|0;
       $shr11$i146 = $sub10$i >>> 16;
       $and12$i = $shr11$i146 & 2;
       $add13$i = $add$i145 | $and12$i;
       $sub14$i = (14 - ($add13$i))|0;
       $shl15$i = $shl9$i << $and12$i;
       $shr16$i147 = $shl15$i >>> 15;
       $add17$i = (($sub14$i) + ($shr16$i147))|0;
       $shl18$i = $add17$i << 1;
       $add19$i = (($add17$i) + 7)|0;
       $shr20$i = $and145 >>> $add19$i;
       $and21$i148 = $shr20$i & 1;
       $add22$i = $and21$i148 | $shl18$i;
       $idx$0$i = $add22$i;
      }
     }
     $arrayidx$i149 = (19888 + ($idx$0$i<<2)|0);
     $51 = HEAP32[$arrayidx$i149>>2]|0;
     $cmp24$i = ($51|0)==(0|0);
     L117: do {
      if ($cmp24$i) {
       $rsize$3$i = $sub$i138;$t$2$i = 0;$v$3$i = 0;
       label = 81;
      } else {
       $cmp26$i = ($idx$0$i|0)==(31);
       $shr27$i = $idx$0$i >>> 1;
       $sub30$i = (25 - ($shr27$i))|0;
       $cond$i150 = $cmp26$i ? 0 : $sub30$i;
       $shl31$i = $and145 << $cond$i150;
       $rsize$0$i = $sub$i138;$rst$0$i = 0;$sizebits$0$i = $shl31$i;$t$0$i = $51;$v$0$i = 0;
       while(1) {
        $head$i151 = ((($t$0$i)) + 4|0);
        $52 = HEAP32[$head$i151>>2]|0;
        $and32$i = $52 & -8;
        $sub33$i = (($and32$i) - ($and145))|0;
        $cmp34$i = ($sub33$i>>>0)<($rsize$0$i>>>0);
        if ($cmp34$i) {
         $cmp36$i = ($sub33$i|0)==(0);
         if ($cmp36$i) {
          $rsize$49$i = 0;$t$48$i = $t$0$i;$v$410$i = $t$0$i;
          label = 85;
          break L117;
         } else {
          $rsize$1$i = $sub33$i;$v$1$i = $t$0$i;
         }
        } else {
         $rsize$1$i = $rsize$0$i;$v$1$i = $v$0$i;
        }
        $arrayidx40$i = ((($t$0$i)) + 20|0);
        $53 = HEAP32[$arrayidx40$i>>2]|0;
        $shr42$i = $sizebits$0$i >>> 31;
        $arrayidx44$i = (((($t$0$i)) + 16|0) + ($shr42$i<<2)|0);
        $54 = HEAP32[$arrayidx44$i>>2]|0;
        $cmp45$i152 = ($53|0)==(0|0);
        $cmp46$i = ($53|0)==($54|0);
        $or$cond1$i = $cmp45$i152 | $cmp46$i;
        $rst$1$i = $or$cond1$i ? $rst$0$i : $53;
        $cmp49$i = ($54|0)==(0|0);
        $not$cmp494$i = $cmp49$i ^ 1;
        $shl52$i = $not$cmp494$i&1;
        $sizebits$0$shl52$i = $sizebits$0$i << $shl52$i;
        if ($cmp49$i) {
         $rsize$3$i = $rsize$1$i;$t$2$i = $rst$1$i;$v$3$i = $v$1$i;
         label = 81;
         break;
        } else {
         $rsize$0$i = $rsize$1$i;$rst$0$i = $rst$1$i;$sizebits$0$i = $sizebits$0$shl52$i;$t$0$i = $54;$v$0$i = $v$1$i;
        }
       }
      }
     } while(0);
     if ((label|0) == 81) {
      $cmp55$i = ($t$2$i|0)==(0|0);
      $cmp57$i = ($v$3$i|0)==(0|0);
      $or$cond$i = $cmp55$i & $cmp57$i;
      if ($or$cond$i) {
       $shl60$i = 2 << $idx$0$i;
       $sub63$i = (0 - ($shl60$i))|0;
       $or$i = $shl60$i | $sub63$i;
       $and64$i = $50 & $or$i;
       $cmp65$i = ($and64$i|0)==(0);
       if ($cmp65$i) {
        $nb$0 = $and145;
        break;
       }
       $sub67$i = (0 - ($and64$i))|0;
       $and68$i = $and64$i & $sub67$i;
       $sub70$i = (($and68$i) + -1)|0;
       $shr72$i = $sub70$i >>> 12;
       $and73$i = $shr72$i & 16;
       $shr75$i = $sub70$i >>> $and73$i;
       $shr76$i = $shr75$i >>> 5;
       $and77$i = $shr76$i & 8;
       $add78$i = $and77$i | $and73$i;
       $shr79$i = $shr75$i >>> $and77$i;
       $shr80$i = $shr79$i >>> 2;
       $and81$i = $shr80$i & 4;
       $add82$i = $add78$i | $and81$i;
       $shr83$i = $shr79$i >>> $and81$i;
       $shr84$i = $shr83$i >>> 1;
       $and85$i = $shr84$i & 2;
       $add86$i = $add82$i | $and85$i;
       $shr87$i = $shr83$i >>> $and85$i;
       $shr88$i = $shr87$i >>> 1;
       $and89$i = $shr88$i & 1;
       $add90$i = $add86$i | $and89$i;
       $shr91$i = $shr87$i >>> $and89$i;
       $add92$i = (($add90$i) + ($shr91$i))|0;
       $arrayidx94$i153 = (19888 + ($add92$i<<2)|0);
       $55 = HEAP32[$arrayidx94$i153>>2]|0;
       $t$4$ph$i = $55;$v$4$ph$i = 0;
      } else {
       $t$4$ph$i = $t$2$i;$v$4$ph$i = $v$3$i;
      }
      $cmp977$i = ($t$4$ph$i|0)==(0|0);
      if ($cmp977$i) {
       $rsize$4$lcssa$i = $rsize$3$i;$v$4$lcssa$i = $v$4$ph$i;
      } else {
       $rsize$49$i = $rsize$3$i;$t$48$i = $t$4$ph$i;$v$410$i = $v$4$ph$i;
       label = 85;
      }
     }
     if ((label|0) == 85) {
      while(1) {
       label = 0;
       $head99$i = ((($t$48$i)) + 4|0);
       $56 = HEAP32[$head99$i>>2]|0;
       $and100$i = $56 & -8;
       $sub101$i = (($and100$i) - ($and145))|0;
       $cmp102$i = ($sub101$i>>>0)<($rsize$49$i>>>0);
       $sub101$rsize$4$i = $cmp102$i ? $sub101$i : $rsize$49$i;
       $t$4$v$4$i = $cmp102$i ? $t$48$i : $v$410$i;
       $arrayidx106$i = ((($t$48$i)) + 16|0);
       $57 = HEAP32[$arrayidx106$i>>2]|0;
       $not$cmp107$i = ($57|0)==(0|0);
       $$sink$i154 = $not$cmp107$i&1;
       $arrayidx113$i155 = (((($t$48$i)) + 16|0) + ($$sink$i154<<2)|0);
       $58 = HEAP32[$arrayidx113$i155>>2]|0;
       $cmp97$i = ($58|0)==(0|0);
       if ($cmp97$i) {
        $rsize$4$lcssa$i = $sub101$rsize$4$i;$v$4$lcssa$i = $t$4$v$4$i;
        break;
       } else {
        $rsize$49$i = $sub101$rsize$4$i;$t$48$i = $58;$v$410$i = $t$4$v$4$i;
        label = 85;
       }
      }
     }
     $cmp116$i = ($v$4$lcssa$i|0)==(0|0);
     if ($cmp116$i) {
      $nb$0 = $and145;
     } else {
      $59 = HEAP32[(19592)>>2]|0;
      $sub118$i = (($59) - ($and145))|0;
      $cmp119$i = ($rsize$4$lcssa$i>>>0)<($sub118$i>>>0);
      if ($cmp119$i) {
       $60 = HEAP32[(19600)>>2]|0;
       $cmp121$i = ($v$4$lcssa$i>>>0)<($60>>>0);
       if ($cmp121$i) {
        _abort();
        // unreachable;
       }
       $add$ptr$i158 = (($v$4$lcssa$i) + ($and145)|0);
       $cmp123$i = ($v$4$lcssa$i>>>0)<($add$ptr$i158>>>0);
       if (!($cmp123$i)) {
        _abort();
        // unreachable;
       }
       $parent$i159 = ((($v$4$lcssa$i)) + 24|0);
       $61 = HEAP32[$parent$i159>>2]|0;
       $bk$i160 = ((($v$4$lcssa$i)) + 12|0);
       $62 = HEAP32[$bk$i160>>2]|0;
       $cmp128$i = ($62|0)==($v$4$lcssa$i|0);
       do {
        if ($cmp128$i) {
         $arrayidx151$i = ((($v$4$lcssa$i)) + 20|0);
         $66 = HEAP32[$arrayidx151$i>>2]|0;
         $cmp152$i = ($66|0)==(0|0);
         if ($cmp152$i) {
          $arrayidx155$i = ((($v$4$lcssa$i)) + 16|0);
          $67 = HEAP32[$arrayidx155$i>>2]|0;
          $cmp156$i = ($67|0)==(0|0);
          if ($cmp156$i) {
           $R$3$i168 = 0;
           break;
          } else {
           $R$1$i165 = $67;$RP$1$i164 = $arrayidx155$i;
          }
         } else {
          $R$1$i165 = $66;$RP$1$i164 = $arrayidx151$i;
         }
         while(1) {
          $arrayidx161$i = ((($R$1$i165)) + 20|0);
          $68 = HEAP32[$arrayidx161$i>>2]|0;
          $cmp162$i = ($68|0)==(0|0);
          if (!($cmp162$i)) {
           $R$1$i165 = $68;$RP$1$i164 = $arrayidx161$i;
           continue;
          }
          $arrayidx165$i166 = ((($R$1$i165)) + 16|0);
          $69 = HEAP32[$arrayidx165$i166>>2]|0;
          $cmp166$i = ($69|0)==(0|0);
          if ($cmp166$i) {
           break;
          } else {
           $R$1$i165 = $69;$RP$1$i164 = $arrayidx165$i166;
          }
         }
         $cmp171$i = ($RP$1$i164>>>0)<($60>>>0);
         if ($cmp171$i) {
          _abort();
          // unreachable;
         } else {
          HEAP32[$RP$1$i164>>2] = 0;
          $R$3$i168 = $R$1$i165;
          break;
         }
        } else {
         $fd$i161 = ((($v$4$lcssa$i)) + 8|0);
         $63 = HEAP32[$fd$i161>>2]|0;
         $cmp133$i = ($63>>>0)<($60>>>0);
         if ($cmp133$i) {
          _abort();
          // unreachable;
         }
         $bk136$i = ((($63)) + 12|0);
         $64 = HEAP32[$bk136$i>>2]|0;
         $cmp137$i = ($64|0)==($v$4$lcssa$i|0);
         if (!($cmp137$i)) {
          _abort();
          // unreachable;
         }
         $fd139$i = ((($62)) + 8|0);
         $65 = HEAP32[$fd139$i>>2]|0;
         $cmp140$i = ($65|0)==($v$4$lcssa$i|0);
         if ($cmp140$i) {
          HEAP32[$bk136$i>>2] = $62;
          HEAP32[$fd139$i>>2] = $63;
          $R$3$i168 = $62;
          break;
         } else {
          _abort();
          // unreachable;
         }
        }
       } while(0);
       $cmp180$i = ($61|0)==(0|0);
       L164: do {
        if ($cmp180$i) {
         $83 = $50;
        } else {
         $index$i169 = ((($v$4$lcssa$i)) + 28|0);
         $70 = HEAP32[$index$i169>>2]|0;
         $arrayidx184$i = (19888 + ($70<<2)|0);
         $71 = HEAP32[$arrayidx184$i>>2]|0;
         $cmp185$i = ($v$4$lcssa$i|0)==($71|0);
         do {
          if ($cmp185$i) {
           HEAP32[$arrayidx184$i>>2] = $R$3$i168;
           $cond3$i = ($R$3$i168|0)==(0|0);
           if ($cond3$i) {
            $shl192$i = 1 << $70;
            $neg$i170 = $shl192$i ^ -1;
            $and194$i = $50 & $neg$i170;
            HEAP32[(19588)>>2] = $and194$i;
            $83 = $and194$i;
            break L164;
           }
          } else {
           $72 = HEAP32[(19600)>>2]|0;
           $cmp198$i = ($61>>>0)<($72>>>0);
           if ($cmp198$i) {
            _abort();
            // unreachable;
           } else {
            $arrayidx204$i = ((($61)) + 16|0);
            $73 = HEAP32[$arrayidx204$i>>2]|0;
            $not$cmp205$i = ($73|0)!=($v$4$lcssa$i|0);
            $$sink2$i172 = $not$cmp205$i&1;
            $arrayidx212$i = (((($61)) + 16|0) + ($$sink2$i172<<2)|0);
            HEAP32[$arrayidx212$i>>2] = $R$3$i168;
            $cmp217$i = ($R$3$i168|0)==(0|0);
            if ($cmp217$i) {
             $83 = $50;
             break L164;
            } else {
             break;
            }
           }
          }
         } while(0);
         $74 = HEAP32[(19600)>>2]|0;
         $cmp221$i = ($R$3$i168>>>0)<($74>>>0);
         if ($cmp221$i) {
          _abort();
          // unreachable;
         }
         $parent226$i = ((($R$3$i168)) + 24|0);
         HEAP32[$parent226$i>>2] = $61;
         $arrayidx228$i = ((($v$4$lcssa$i)) + 16|0);
         $75 = HEAP32[$arrayidx228$i>>2]|0;
         $cmp229$i = ($75|0)==(0|0);
         do {
          if (!($cmp229$i)) {
           $cmp233$i = ($75>>>0)<($74>>>0);
           if ($cmp233$i) {
            _abort();
            // unreachable;
           } else {
            $arrayidx239$i = ((($R$3$i168)) + 16|0);
            HEAP32[$arrayidx239$i>>2] = $75;
            $parent240$i = ((($75)) + 24|0);
            HEAP32[$parent240$i>>2] = $R$3$i168;
            break;
           }
          }
         } while(0);
         $arrayidx245$i = ((($v$4$lcssa$i)) + 20|0);
         $76 = HEAP32[$arrayidx245$i>>2]|0;
         $cmp246$i = ($76|0)==(0|0);
         if ($cmp246$i) {
          $83 = $50;
         } else {
          $77 = HEAP32[(19600)>>2]|0;
          $cmp250$i = ($76>>>0)<($77>>>0);
          if ($cmp250$i) {
           _abort();
           // unreachable;
          } else {
           $arrayidx256$i = ((($R$3$i168)) + 20|0);
           HEAP32[$arrayidx256$i>>2] = $76;
           $parent257$i = ((($76)) + 24|0);
           HEAP32[$parent257$i>>2] = $R$3$i168;
           $83 = $50;
           break;
          }
         }
        }
       } while(0);
       $cmp265$i = ($rsize$4$lcssa$i>>>0)<(16);
       do {
        if ($cmp265$i) {
         $add268$i = (($rsize$4$lcssa$i) + ($and145))|0;
         $or270$i = $add268$i | 3;
         $head271$i = ((($v$4$lcssa$i)) + 4|0);
         HEAP32[$head271$i>>2] = $or270$i;
         $add$ptr273$i = (($v$4$lcssa$i) + ($add268$i)|0);
         $head274$i = ((($add$ptr273$i)) + 4|0);
         $78 = HEAP32[$head274$i>>2]|0;
         $or275$i = $78 | 1;
         HEAP32[$head274$i>>2] = $or275$i;
        } else {
         $or278$i = $and145 | 3;
         $head279$i = ((($v$4$lcssa$i)) + 4|0);
         HEAP32[$head279$i>>2] = $or278$i;
         $or280$i = $rsize$4$lcssa$i | 1;
         $head281$i = ((($add$ptr$i158)) + 4|0);
         HEAP32[$head281$i>>2] = $or280$i;
         $add$ptr282$i = (($add$ptr$i158) + ($rsize$4$lcssa$i)|0);
         HEAP32[$add$ptr282$i>>2] = $rsize$4$lcssa$i;
         $shr283$i = $rsize$4$lcssa$i >>> 3;
         $cmp284$i = ($rsize$4$lcssa$i>>>0)<(256);
         if ($cmp284$i) {
          $shl288$i = $shr283$i << 1;
          $arrayidx289$i = (19624 + ($shl288$i<<2)|0);
          $79 = HEAP32[4896]|0;
          $shl291$i = 1 << $shr283$i;
          $and292$i = $79 & $shl291$i;
          $tobool293$i = ($and292$i|0)==(0);
          if ($tobool293$i) {
           $or297$i = $79 | $shl291$i;
           HEAP32[4896] = $or297$i;
           $$pre$i175 = ((($arrayidx289$i)) + 8|0);
           $$pre$phi$i176Z2D = $$pre$i175;$F290$0$i = $arrayidx289$i;
          } else {
           $80 = ((($arrayidx289$i)) + 8|0);
           $81 = HEAP32[$80>>2]|0;
           $82 = HEAP32[(19600)>>2]|0;
           $cmp301$i = ($81>>>0)<($82>>>0);
           if ($cmp301$i) {
            _abort();
            // unreachable;
           } else {
            $$pre$phi$i176Z2D = $80;$F290$0$i = $81;
           }
          }
          HEAP32[$$pre$phi$i176Z2D>>2] = $add$ptr$i158;
          $bk311$i = ((($F290$0$i)) + 12|0);
          HEAP32[$bk311$i>>2] = $add$ptr$i158;
          $fd312$i = ((($add$ptr$i158)) + 8|0);
          HEAP32[$fd312$i>>2] = $F290$0$i;
          $bk313$i = ((($add$ptr$i158)) + 12|0);
          HEAP32[$bk313$i>>2] = $arrayidx289$i;
          break;
         }
         $shr318$i = $rsize$4$lcssa$i >>> 8;
         $cmp319$i = ($shr318$i|0)==(0);
         if ($cmp319$i) {
          $I316$0$i = 0;
         } else {
          $cmp323$i = ($rsize$4$lcssa$i>>>0)>(16777215);
          if ($cmp323$i) {
           $I316$0$i = 31;
          } else {
           $sub329$i = (($shr318$i) + 1048320)|0;
           $shr330$i = $sub329$i >>> 16;
           $and331$i = $shr330$i & 8;
           $shl333$i = $shr318$i << $and331$i;
           $sub334$i = (($shl333$i) + 520192)|0;
           $shr335$i = $sub334$i >>> 16;
           $and336$i = $shr335$i & 4;
           $add337$i = $and336$i | $and331$i;
           $shl338$i = $shl333$i << $and336$i;
           $sub339$i = (($shl338$i) + 245760)|0;
           $shr340$i = $sub339$i >>> 16;
           $and341$i = $shr340$i & 2;
           $add342$i = $add337$i | $and341$i;
           $sub343$i = (14 - ($add342$i))|0;
           $shl344$i = $shl338$i << $and341$i;
           $shr345$i = $shl344$i >>> 15;
           $add346$i = (($sub343$i) + ($shr345$i))|0;
           $shl347$i = $add346$i << 1;
           $add348$i = (($add346$i) + 7)|0;
           $shr349$i = $rsize$4$lcssa$i >>> $add348$i;
           $and350$i = $shr349$i & 1;
           $add351$i = $and350$i | $shl347$i;
           $I316$0$i = $add351$i;
          }
         }
         $arrayidx355$i = (19888 + ($I316$0$i<<2)|0);
         $index356$i = ((($add$ptr$i158)) + 28|0);
         HEAP32[$index356$i>>2] = $I316$0$i;
         $child357$i = ((($add$ptr$i158)) + 16|0);
         $arrayidx358$i = ((($child357$i)) + 4|0);
         HEAP32[$arrayidx358$i>>2] = 0;
         HEAP32[$child357$i>>2] = 0;
         $shl362$i = 1 << $I316$0$i;
         $and363$i = $83 & $shl362$i;
         $tobool364$i = ($and363$i|0)==(0);
         if ($tobool364$i) {
          $or368$i = $83 | $shl362$i;
          HEAP32[(19588)>>2] = $or368$i;
          HEAP32[$arrayidx355$i>>2] = $add$ptr$i158;
          $parent369$i = ((($add$ptr$i158)) + 24|0);
          HEAP32[$parent369$i>>2] = $arrayidx355$i;
          $bk370$i = ((($add$ptr$i158)) + 12|0);
          HEAP32[$bk370$i>>2] = $add$ptr$i158;
          $fd371$i = ((($add$ptr$i158)) + 8|0);
          HEAP32[$fd371$i>>2] = $add$ptr$i158;
          break;
         }
         $84 = HEAP32[$arrayidx355$i>>2]|0;
         $cmp374$i = ($I316$0$i|0)==(31);
         $shr378$i = $I316$0$i >>> 1;
         $sub381$i = (25 - ($shr378$i))|0;
         $cond383$i = $cmp374$i ? 0 : $sub381$i;
         $shl384$i = $rsize$4$lcssa$i << $cond383$i;
         $K373$0$i = $shl384$i;$T$0$i = $84;
         while(1) {
          $head386$i = ((($T$0$i)) + 4|0);
          $85 = HEAP32[$head386$i>>2]|0;
          $and387$i = $85 & -8;
          $cmp388$i = ($and387$i|0)==($rsize$4$lcssa$i|0);
          if ($cmp388$i) {
           label = 139;
           break;
          }
          $shr392$i = $K373$0$i >>> 31;
          $arrayidx394$i = (((($T$0$i)) + 16|0) + ($shr392$i<<2)|0);
          $shl395$i = $K373$0$i << 1;
          $86 = HEAP32[$arrayidx394$i>>2]|0;
          $cmp396$i = ($86|0)==(0|0);
          if ($cmp396$i) {
           label = 136;
           break;
          } else {
           $K373$0$i = $shl395$i;$T$0$i = $86;
          }
         }
         if ((label|0) == 136) {
          $87 = HEAP32[(19600)>>2]|0;
          $cmp401$i = ($arrayidx394$i>>>0)<($87>>>0);
          if ($cmp401$i) {
           _abort();
           // unreachable;
          } else {
           HEAP32[$arrayidx394$i>>2] = $add$ptr$i158;
           $parent406$i = ((($add$ptr$i158)) + 24|0);
           HEAP32[$parent406$i>>2] = $T$0$i;
           $bk407$i = ((($add$ptr$i158)) + 12|0);
           HEAP32[$bk407$i>>2] = $add$ptr$i158;
           $fd408$i = ((($add$ptr$i158)) + 8|0);
           HEAP32[$fd408$i>>2] = $add$ptr$i158;
           break;
          }
         }
         else if ((label|0) == 139) {
          $fd416$i = ((($T$0$i)) + 8|0);
          $88 = HEAP32[$fd416$i>>2]|0;
          $89 = HEAP32[(19600)>>2]|0;
          $cmp422$i = ($88>>>0)>=($89>>>0);
          $not$cmp418$i = ($T$0$i>>>0)>=($89>>>0);
          $90 = $cmp422$i & $not$cmp418$i;
          if ($90) {
           $bk429$i = ((($88)) + 12|0);
           HEAP32[$bk429$i>>2] = $add$ptr$i158;
           HEAP32[$fd416$i>>2] = $add$ptr$i158;
           $fd431$i = ((($add$ptr$i158)) + 8|0);
           HEAP32[$fd431$i>>2] = $88;
           $bk432$i = ((($add$ptr$i158)) + 12|0);
           HEAP32[$bk432$i>>2] = $T$0$i;
           $parent433$i = ((($add$ptr$i158)) + 24|0);
           HEAP32[$parent433$i>>2] = 0;
           break;
          } else {
           _abort();
           // unreachable;
          }
         }
        }
       } while(0);
       $add$ptr441$i = ((($v$4$lcssa$i)) + 8|0);
       $retval$0 = $add$ptr441$i;
       STACKTOP = sp;return ($retval$0|0);
      } else {
       $nb$0 = $and145;
      }
     }
    }
   }
  }
 } while(0);
 $91 = HEAP32[(19592)>>2]|0;
 $cmp156 = ($91>>>0)<($nb$0>>>0);
 if (!($cmp156)) {
  $sub160 = (($91) - ($nb$0))|0;
  $92 = HEAP32[(19604)>>2]|0;
  $cmp162 = ($sub160>>>0)>(15);
  if ($cmp162) {
   $add$ptr166 = (($92) + ($nb$0)|0);
   HEAP32[(19604)>>2] = $add$ptr166;
   HEAP32[(19592)>>2] = $sub160;
   $or167 = $sub160 | 1;
   $head168 = ((($add$ptr166)) + 4|0);
   HEAP32[$head168>>2] = $or167;
   $add$ptr169 = (($add$ptr166) + ($sub160)|0);
   HEAP32[$add$ptr169>>2] = $sub160;
   $or172 = $nb$0 | 3;
   $head173 = ((($92)) + 4|0);
   HEAP32[$head173>>2] = $or172;
  } else {
   HEAP32[(19592)>>2] = 0;
   HEAP32[(19604)>>2] = 0;
   $or176 = $91 | 3;
   $head177 = ((($92)) + 4|0);
   HEAP32[$head177>>2] = $or176;
   $add$ptr178 = (($92) + ($91)|0);
   $head179 = ((($add$ptr178)) + 4|0);
   $93 = HEAP32[$head179>>2]|0;
   $or180 = $93 | 1;
   HEAP32[$head179>>2] = $or180;
  }
  $add$ptr182 = ((($92)) + 8|0);
  $retval$0 = $add$ptr182;
  STACKTOP = sp;return ($retval$0|0);
 }
 $94 = HEAP32[(19596)>>2]|0;
 $cmp186 = ($94>>>0)>($nb$0>>>0);
 if ($cmp186) {
  $sub190 = (($94) - ($nb$0))|0;
  HEAP32[(19596)>>2] = $sub190;
  $95 = HEAP32[(19608)>>2]|0;
  $add$ptr193 = (($95) + ($nb$0)|0);
  HEAP32[(19608)>>2] = $add$ptr193;
  $or194 = $sub190 | 1;
  $head195 = ((($add$ptr193)) + 4|0);
  HEAP32[$head195>>2] = $or194;
  $or197 = $nb$0 | 3;
  $head198 = ((($95)) + 4|0);
  HEAP32[$head198>>2] = $or197;
  $add$ptr199 = ((($95)) + 8|0);
  $retval$0 = $add$ptr199;
  STACKTOP = sp;return ($retval$0|0);
 }
 $96 = HEAP32[5014]|0;
 $cmp$i177 = ($96|0)==(0);
 if ($cmp$i177) {
  HEAP32[(20064)>>2] = 4096;
  HEAP32[(20060)>>2] = 4096;
  HEAP32[(20068)>>2] = -1;
  HEAP32[(20072)>>2] = -1;
  HEAP32[(20076)>>2] = 0;
  HEAP32[(20028)>>2] = 0;
  $97 = $magic$i$i;
  $xor$i$i = $97 & -16;
  $and6$i$i = $xor$i$i ^ 1431655768;
  HEAP32[$magic$i$i>>2] = $and6$i$i;
  HEAP32[5014] = $and6$i$i;
  $98 = 4096;
 } else {
  $$pre$i178 = HEAP32[(20064)>>2]|0;
  $98 = $$pre$i178;
 }
 $add$i179 = (($nb$0) + 48)|0;
 $sub$i180 = (($nb$0) + 47)|0;
 $add9$i = (($98) + ($sub$i180))|0;
 $neg$i181 = (0 - ($98))|0;
 $and11$i = $add9$i & $neg$i181;
 $cmp12$i = ($and11$i>>>0)>($nb$0>>>0);
 if (!($cmp12$i)) {
  $retval$0 = 0;
  STACKTOP = sp;return ($retval$0|0);
 }
 $99 = HEAP32[(20024)>>2]|0;
 $cmp15$i = ($99|0)==(0);
 if (!($cmp15$i)) {
  $100 = HEAP32[(20016)>>2]|0;
  $add17$i182 = (($100) + ($and11$i))|0;
  $cmp19$i = ($add17$i182>>>0)<=($100>>>0);
  $cmp21$i = ($add17$i182>>>0)>($99>>>0);
  $or$cond1$i183 = $cmp19$i | $cmp21$i;
  if ($or$cond1$i183) {
   $retval$0 = 0;
   STACKTOP = sp;return ($retval$0|0);
  }
 }
 $101 = HEAP32[(20028)>>2]|0;
 $and29$i = $101 & 4;
 $tobool30$i = ($and29$i|0)==(0);
 L244: do {
  if ($tobool30$i) {
   $102 = HEAP32[(19608)>>2]|0;
   $cmp32$i184 = ($102|0)==(0|0);
   L246: do {
    if ($cmp32$i184) {
     label = 163;
    } else {
     $sp$0$i$i = (20032);
     while(1) {
      $103 = HEAP32[$sp$0$i$i>>2]|0;
      $cmp$i11$i = ($103>>>0)>($102>>>0);
      if (!($cmp$i11$i)) {
       $size$i$i = ((($sp$0$i$i)) + 4|0);
       $104 = HEAP32[$size$i$i>>2]|0;
       $add$ptr$i$i = (($103) + ($104)|0);
       $cmp2$i$i = ($add$ptr$i$i>>>0)>($102>>>0);
       if ($cmp2$i$i) {
        break;
       }
      }
      $next$i$i = ((($sp$0$i$i)) + 8|0);
      $105 = HEAP32[$next$i$i>>2]|0;
      $cmp3$i$i = ($105|0)==(0|0);
      if ($cmp3$i$i) {
       label = 163;
       break L246;
      } else {
       $sp$0$i$i = $105;
      }
     }
     $add77$i = (($add9$i) - ($94))|0;
     $and80$i = $add77$i & $neg$i181;
     $cmp81$i190 = ($and80$i>>>0)<(2147483647);
     if ($cmp81$i190) {
      $call83$i = (_sbrk(($and80$i|0))|0);
      $110 = HEAP32[$sp$0$i$i>>2]|0;
      $111 = HEAP32[$size$i$i>>2]|0;
      $add$ptr$i192 = (($110) + ($111)|0);
      $cmp85$i = ($call83$i|0)==($add$ptr$i192|0);
      if ($cmp85$i) {
       $cmp89$i = ($call83$i|0)==((-1)|0);
       if ($cmp89$i) {
        $tsize$2657583$i = $and80$i;
       } else {
        $tbase$796$i = $call83$i;$tsize$795$i = $and80$i;
        label = 180;
        break L244;
       }
      } else {
       $br$2$ph$i = $call83$i;$ssize$2$ph$i = $and80$i;
       label = 171;
      }
     } else {
      $tsize$2657583$i = 0;
     }
    }
   } while(0);
   do {
    if ((label|0) == 163) {
     $call37$i = (_sbrk(0)|0);
     $cmp38$i = ($call37$i|0)==((-1)|0);
     if ($cmp38$i) {
      $tsize$2657583$i = 0;
     } else {
      $106 = $call37$i;
      $107 = HEAP32[(20060)>>2]|0;
      $sub41$i = (($107) + -1)|0;
      $and42$i = $sub41$i & $106;
      $cmp43$i = ($and42$i|0)==(0);
      $add46$i = (($sub41$i) + ($106))|0;
      $neg48$i = (0 - ($107))|0;
      $and49$i = $add46$i & $neg48$i;
      $sub50$i = (($and49$i) - ($106))|0;
      $add51$i = $cmp43$i ? 0 : $sub50$i;
      $and11$add51$i = (($add51$i) + ($and11$i))|0;
      $108 = HEAP32[(20016)>>2]|0;
      $add54$i = (($and11$add51$i) + ($108))|0;
      $cmp55$i185 = ($and11$add51$i>>>0)>($nb$0>>>0);
      $cmp57$i186 = ($and11$add51$i>>>0)<(2147483647);
      $or$cond$i187 = $cmp55$i185 & $cmp57$i186;
      if ($or$cond$i187) {
       $109 = HEAP32[(20024)>>2]|0;
       $cmp60$i = ($109|0)==(0);
       if (!($cmp60$i)) {
        $cmp63$i = ($add54$i>>>0)<=($108>>>0);
        $cmp66$i189 = ($add54$i>>>0)>($109>>>0);
        $or$cond2$i = $cmp63$i | $cmp66$i189;
        if ($or$cond2$i) {
         $tsize$2657583$i = 0;
         break;
        }
       }
       $call68$i = (_sbrk(($and11$add51$i|0))|0);
       $cmp69$i = ($call68$i|0)==($call37$i|0);
       if ($cmp69$i) {
        $tbase$796$i = $call37$i;$tsize$795$i = $and11$add51$i;
        label = 180;
        break L244;
       } else {
        $br$2$ph$i = $call68$i;$ssize$2$ph$i = $and11$add51$i;
        label = 171;
       }
      } else {
       $tsize$2657583$i = 0;
      }
     }
    }
   } while(0);
   do {
    if ((label|0) == 171) {
     $sub112$i = (0 - ($ssize$2$ph$i))|0;
     $cmp91$i = ($br$2$ph$i|0)!=((-1)|0);
     $cmp93$i = ($ssize$2$ph$i>>>0)<(2147483647);
     $or$cond5$i = $cmp93$i & $cmp91$i;
     $cmp96$i = ($add$i179>>>0)>($ssize$2$ph$i>>>0);
     $or$cond3$i = $cmp96$i & $or$cond5$i;
     if (!($or$cond3$i)) {
      $cmp118$i = ($br$2$ph$i|0)==((-1)|0);
      if ($cmp118$i) {
       $tsize$2657583$i = 0;
       break;
      } else {
       $tbase$796$i = $br$2$ph$i;$tsize$795$i = $ssize$2$ph$i;
       label = 180;
       break L244;
      }
     }
     $112 = HEAP32[(20064)>>2]|0;
     $sub99$i = (($sub$i180) - ($ssize$2$ph$i))|0;
     $add101$i = (($sub99$i) + ($112))|0;
     $neg103$i = (0 - ($112))|0;
     $and104$i = $add101$i & $neg103$i;
     $cmp105$i = ($and104$i>>>0)<(2147483647);
     if (!($cmp105$i)) {
      $tbase$796$i = $br$2$ph$i;$tsize$795$i = $ssize$2$ph$i;
      label = 180;
      break L244;
     }
     $call107$i = (_sbrk(($and104$i|0))|0);
     $cmp108$i = ($call107$i|0)==((-1)|0);
     if ($cmp108$i) {
      (_sbrk(($sub112$i|0))|0);
      $tsize$2657583$i = 0;
      break;
     } else {
      $add110$i = (($and104$i) + ($ssize$2$ph$i))|0;
      $tbase$796$i = $br$2$ph$i;$tsize$795$i = $add110$i;
      label = 180;
      break L244;
     }
    }
   } while(0);
   $113 = HEAP32[(20028)>>2]|0;
   $or$i194 = $113 | 4;
   HEAP32[(20028)>>2] = $or$i194;
   $tsize$4$i = $tsize$2657583$i;
   label = 178;
  } else {
   $tsize$4$i = 0;
   label = 178;
  }
 } while(0);
 if ((label|0) == 178) {
  $cmp127$i = ($and11$i>>>0)<(2147483647);
  if ($cmp127$i) {
   $call131$i = (_sbrk(($and11$i|0))|0);
   $call132$i = (_sbrk(0)|0);
   $cmp133$i195 = ($call131$i|0)!=((-1)|0);
   $cmp135$i = ($call132$i|0)!=((-1)|0);
   $or$cond4$i = $cmp133$i195 & $cmp135$i;
   $cmp137$i196 = ($call131$i>>>0)<($call132$i>>>0);
   $or$cond7$i = $cmp137$i196 & $or$cond4$i;
   $sub$ptr$lhs$cast$i = $call132$i;
   $sub$ptr$rhs$cast$i = $call131$i;
   $sub$ptr$sub$i = (($sub$ptr$lhs$cast$i) - ($sub$ptr$rhs$cast$i))|0;
   $add140$i = (($nb$0) + 40)|0;
   $cmp141$i = ($sub$ptr$sub$i>>>0)>($add140$i>>>0);
   $sub$ptr$sub$tsize$4$i = $cmp141$i ? $sub$ptr$sub$i : $tsize$4$i;
   $or$cond7$not$i = $or$cond7$i ^ 1;
   $cmp14799$i = ($call131$i|0)==((-1)|0);
   $not$cmp141$i = $cmp141$i ^ 1;
   $cmp147$i = $cmp14799$i | $not$cmp141$i;
   $or$cond97$i = $cmp147$i | $or$cond7$not$i;
   if (!($or$cond97$i)) {
    $tbase$796$i = $call131$i;$tsize$795$i = $sub$ptr$sub$tsize$4$i;
    label = 180;
   }
  }
 }
 if ((label|0) == 180) {
  $114 = HEAP32[(20016)>>2]|0;
  $add150$i = (($114) + ($tsize$795$i))|0;
  HEAP32[(20016)>>2] = $add150$i;
  $115 = HEAP32[(20020)>>2]|0;
  $cmp151$i = ($add150$i>>>0)>($115>>>0);
  if ($cmp151$i) {
   HEAP32[(20020)>>2] = $add150$i;
  }
  $116 = HEAP32[(19608)>>2]|0;
  $cmp157$i = ($116|0)==(0|0);
  do {
   if ($cmp157$i) {
    $117 = HEAP32[(19600)>>2]|0;
    $cmp159$i198 = ($117|0)==(0|0);
    $cmp162$i199 = ($tbase$796$i>>>0)<($117>>>0);
    $or$cond8$i = $cmp159$i198 | $cmp162$i199;
    if ($or$cond8$i) {
     HEAP32[(19600)>>2] = $tbase$796$i;
    }
    HEAP32[(20032)>>2] = $tbase$796$i;
    HEAP32[(20036)>>2] = $tsize$795$i;
    HEAP32[(20044)>>2] = 0;
    $118 = HEAP32[5014]|0;
    HEAP32[(19620)>>2] = $118;
    HEAP32[(19616)>>2] = -1;
    $i$01$i$i = 0;
    while(1) {
     $shl$i13$i = $i$01$i$i << 1;
     $arrayidx$i14$i = (19624 + ($shl$i13$i<<2)|0);
     $119 = ((($arrayidx$i14$i)) + 12|0);
     HEAP32[$119>>2] = $arrayidx$i14$i;
     $120 = ((($arrayidx$i14$i)) + 8|0);
     HEAP32[$120>>2] = $arrayidx$i14$i;
     $inc$i$i = (($i$01$i$i) + 1)|0;
     $exitcond$i$i = ($inc$i$i|0)==(32);
     if ($exitcond$i$i) {
      break;
     } else {
      $i$01$i$i = $inc$i$i;
     }
    }
    $sub172$i = (($tsize$795$i) + -40)|0;
    $add$ptr$i16$i = ((($tbase$796$i)) + 8|0);
    $121 = $add$ptr$i16$i;
    $and$i17$i = $121 & 7;
    $cmp$i18$i = ($and$i17$i|0)==(0);
    $122 = (0 - ($121))|0;
    $and3$i$i = $122 & 7;
    $cond$i19$i = $cmp$i18$i ? 0 : $and3$i$i;
    $add$ptr4$i$i = (($tbase$796$i) + ($cond$i19$i)|0);
    $sub5$i$i = (($sub172$i) - ($cond$i19$i))|0;
    HEAP32[(19608)>>2] = $add$ptr4$i$i;
    HEAP32[(19596)>>2] = $sub5$i$i;
    $or$i$i = $sub5$i$i | 1;
    $head$i20$i = ((($add$ptr4$i$i)) + 4|0);
    HEAP32[$head$i20$i>>2] = $or$i$i;
    $add$ptr6$i$i = (($add$ptr4$i$i) + ($sub5$i$i)|0);
    $head7$i$i = ((($add$ptr6$i$i)) + 4|0);
    HEAP32[$head7$i$i>>2] = 40;
    $123 = HEAP32[(20072)>>2]|0;
    HEAP32[(19612)>>2] = $123;
   } else {
    $sp$0108$i = (20032);
    while(1) {
     $124 = HEAP32[$sp$0108$i>>2]|0;
     $size188$i = ((($sp$0108$i)) + 4|0);
     $125 = HEAP32[$size188$i>>2]|0;
     $add$ptr189$i = (($124) + ($125)|0);
     $cmp190$i = ($tbase$796$i|0)==($add$ptr189$i|0);
     if ($cmp190$i) {
      label = 190;
      break;
     }
     $next$i = ((($sp$0108$i)) + 8|0);
     $126 = HEAP32[$next$i>>2]|0;
     $cmp186$i = ($126|0)==(0|0);
     if ($cmp186$i) {
      break;
     } else {
      $sp$0108$i = $126;
     }
    }
    if ((label|0) == 190) {
     $sflags193$i = ((($sp$0108$i)) + 12|0);
     $127 = HEAP32[$sflags193$i>>2]|0;
     $and194$i203 = $127 & 8;
     $tobool195$i = ($and194$i203|0)==(0);
     if ($tobool195$i) {
      $cmp203$i = ($116>>>0)>=($124>>>0);
      $cmp209$i = ($116>>>0)<($tbase$796$i>>>0);
      $or$cond98$i = $cmp209$i & $cmp203$i;
      if ($or$cond98$i) {
       $add212$i = (($125) + ($tsize$795$i))|0;
       HEAP32[$size188$i>>2] = $add212$i;
       $128 = HEAP32[(19596)>>2]|0;
       $add$ptr$i49$i = ((($116)) + 8|0);
       $129 = $add$ptr$i49$i;
       $and$i50$i = $129 & 7;
       $cmp$i51$i = ($and$i50$i|0)==(0);
       $130 = (0 - ($129))|0;
       $and3$i52$i = $130 & 7;
       $cond$i53$i = $cmp$i51$i ? 0 : $and3$i52$i;
       $add$ptr4$i54$i = (($116) + ($cond$i53$i)|0);
       $add215$i = (($tsize$795$i) - ($cond$i53$i))|0;
       $sub5$i55$i = (($128) + ($add215$i))|0;
       HEAP32[(19608)>>2] = $add$ptr4$i54$i;
       HEAP32[(19596)>>2] = $sub5$i55$i;
       $or$i56$i = $sub5$i55$i | 1;
       $head$i57$i = ((($add$ptr4$i54$i)) + 4|0);
       HEAP32[$head$i57$i>>2] = $or$i56$i;
       $add$ptr6$i58$i = (($add$ptr4$i54$i) + ($sub5$i55$i)|0);
       $head7$i59$i = ((($add$ptr6$i58$i)) + 4|0);
       HEAP32[$head7$i59$i>>2] = 40;
       $131 = HEAP32[(20072)>>2]|0;
       HEAP32[(19612)>>2] = $131;
       break;
      }
     }
    }
    $132 = HEAP32[(19600)>>2]|0;
    $cmp218$i = ($tbase$796$i>>>0)<($132>>>0);
    if ($cmp218$i) {
     HEAP32[(19600)>>2] = $tbase$796$i;
     $147 = $tbase$796$i;
    } else {
     $147 = $132;
    }
    $add$ptr227$i = (($tbase$796$i) + ($tsize$795$i)|0);
    $sp$1107$i = (20032);
    while(1) {
     $133 = HEAP32[$sp$1107$i>>2]|0;
     $cmp228$i = ($133|0)==($add$ptr227$i|0);
     if ($cmp228$i) {
      label = 198;
      break;
     }
     $next231$i = ((($sp$1107$i)) + 8|0);
     $134 = HEAP32[$next231$i>>2]|0;
     $cmp224$i = ($134|0)==(0|0);
     if ($cmp224$i) {
      break;
     } else {
      $sp$1107$i = $134;
     }
    }
    if ((label|0) == 198) {
     $sflags235$i = ((($sp$1107$i)) + 12|0);
     $135 = HEAP32[$sflags235$i>>2]|0;
     $and236$i = $135 & 8;
     $tobool237$i = ($and236$i|0)==(0);
     if ($tobool237$i) {
      HEAP32[$sp$1107$i>>2] = $tbase$796$i;
      $size245$i = ((($sp$1107$i)) + 4|0);
      $136 = HEAP32[$size245$i>>2]|0;
      $add246$i = (($136) + ($tsize$795$i))|0;
      HEAP32[$size245$i>>2] = $add246$i;
      $add$ptr$i21$i = ((($tbase$796$i)) + 8|0);
      $137 = $add$ptr$i21$i;
      $and$i22$i = $137 & 7;
      $cmp$i23$i = ($and$i22$i|0)==(0);
      $138 = (0 - ($137))|0;
      $and3$i24$i = $138 & 7;
      $cond$i25$i = $cmp$i23$i ? 0 : $and3$i24$i;
      $add$ptr4$i26$i = (($tbase$796$i) + ($cond$i25$i)|0);
      $add$ptr5$i$i = ((($add$ptr227$i)) + 8|0);
      $139 = $add$ptr5$i$i;
      $and6$i27$i = $139 & 7;
      $cmp7$i$i = ($and6$i27$i|0)==(0);
      $140 = (0 - ($139))|0;
      $and13$i$i = $140 & 7;
      $cond15$i$i = $cmp7$i$i ? 0 : $and13$i$i;
      $add$ptr16$i$i = (($add$ptr227$i) + ($cond15$i$i)|0);
      $sub$ptr$lhs$cast$i28$i = $add$ptr16$i$i;
      $sub$ptr$rhs$cast$i29$i = $add$ptr4$i26$i;
      $sub$ptr$sub$i30$i = (($sub$ptr$lhs$cast$i28$i) - ($sub$ptr$rhs$cast$i29$i))|0;
      $add$ptr17$i$i = (($add$ptr4$i26$i) + ($nb$0)|0);
      $sub18$i$i = (($sub$ptr$sub$i30$i) - ($nb$0))|0;
      $or19$i$i = $nb$0 | 3;
      $head$i31$i = ((($add$ptr4$i26$i)) + 4|0);
      HEAP32[$head$i31$i>>2] = $or19$i$i;
      $cmp20$i$i = ($add$ptr16$i$i|0)==($116|0);
      do {
       if ($cmp20$i$i) {
        $141 = HEAP32[(19596)>>2]|0;
        $add$i$i = (($141) + ($sub18$i$i))|0;
        HEAP32[(19596)>>2] = $add$i$i;
        HEAP32[(19608)>>2] = $add$ptr17$i$i;
        $or22$i$i = $add$i$i | 1;
        $head23$i$i = ((($add$ptr17$i$i)) + 4|0);
        HEAP32[$head23$i$i>>2] = $or22$i$i;
       } else {
        $142 = HEAP32[(19604)>>2]|0;
        $cmp24$i$i = ($add$ptr16$i$i|0)==($142|0);
        if ($cmp24$i$i) {
         $143 = HEAP32[(19592)>>2]|0;
         $add26$i$i = (($143) + ($sub18$i$i))|0;
         HEAP32[(19592)>>2] = $add26$i$i;
         HEAP32[(19604)>>2] = $add$ptr17$i$i;
         $or28$i$i = $add26$i$i | 1;
         $head29$i$i = ((($add$ptr17$i$i)) + 4|0);
         HEAP32[$head29$i$i>>2] = $or28$i$i;
         $add$ptr30$i$i = (($add$ptr17$i$i) + ($add26$i$i)|0);
         HEAP32[$add$ptr30$i$i>>2] = $add26$i$i;
         break;
        }
        $head32$i$i = ((($add$ptr16$i$i)) + 4|0);
        $144 = HEAP32[$head32$i$i>>2]|0;
        $and33$i$i = $144 & 3;
        $cmp34$i$i = ($and33$i$i|0)==(1);
        if ($cmp34$i$i) {
         $and37$i$i = $144 & -8;
         $shr$i34$i = $144 >>> 3;
         $cmp38$i$i = ($144>>>0)<(256);
         L314: do {
          if ($cmp38$i$i) {
           $fd$i$i = ((($add$ptr16$i$i)) + 8|0);
           $145 = HEAP32[$fd$i$i>>2]|0;
           $bk$i35$i = ((($add$ptr16$i$i)) + 12|0);
           $146 = HEAP32[$bk$i35$i>>2]|0;
           $shl$i36$i = $shr$i34$i << 1;
           $arrayidx$i37$i = (19624 + ($shl$i36$i<<2)|0);
           $cmp41$i$i = ($145|0)==($arrayidx$i37$i|0);
           do {
            if (!($cmp41$i$i)) {
             $cmp42$i$i = ($145>>>0)<($147>>>0);
             if ($cmp42$i$i) {
              _abort();
              // unreachable;
             }
             $bk43$i$i = ((($145)) + 12|0);
             $148 = HEAP32[$bk43$i$i>>2]|0;
             $cmp44$i$i = ($148|0)==($add$ptr16$i$i|0);
             if ($cmp44$i$i) {
              break;
             }
             _abort();
             // unreachable;
            }
           } while(0);
           $cmp46$i38$i = ($146|0)==($145|0);
           if ($cmp46$i38$i) {
            $shl48$i$i = 1 << $shr$i34$i;
            $neg$i$i = $shl48$i$i ^ -1;
            $149 = HEAP32[4896]|0;
            $and49$i$i = $149 & $neg$i$i;
            HEAP32[4896] = $and49$i$i;
            break;
           }
           $cmp54$i$i = ($146|0)==($arrayidx$i37$i|0);
           do {
            if ($cmp54$i$i) {
             $$pre5$i$i = ((($146)) + 8|0);
             $fd68$pre$phi$i$iZ2D = $$pre5$i$i;
            } else {
             $cmp57$i$i = ($146>>>0)<($147>>>0);
             if ($cmp57$i$i) {
              _abort();
              // unreachable;
             }
             $fd59$i$i = ((($146)) + 8|0);
             $150 = HEAP32[$fd59$i$i>>2]|0;
             $cmp60$i$i = ($150|0)==($add$ptr16$i$i|0);
             if ($cmp60$i$i) {
              $fd68$pre$phi$i$iZ2D = $fd59$i$i;
              break;
             }
             _abort();
             // unreachable;
            }
           } while(0);
           $bk67$i$i = ((($145)) + 12|0);
           HEAP32[$bk67$i$i>>2] = $146;
           HEAP32[$fd68$pre$phi$i$iZ2D>>2] = $145;
          } else {
           $parent$i40$i = ((($add$ptr16$i$i)) + 24|0);
           $151 = HEAP32[$parent$i40$i>>2]|0;
           $bk74$i$i = ((($add$ptr16$i$i)) + 12|0);
           $152 = HEAP32[$bk74$i$i>>2]|0;
           $cmp75$i$i = ($152|0)==($add$ptr16$i$i|0);
           do {
            if ($cmp75$i$i) {
             $child$i$i = ((($add$ptr16$i$i)) + 16|0);
             $arrayidx96$i$i = ((($child$i$i)) + 4|0);
             $156 = HEAP32[$arrayidx96$i$i>>2]|0;
             $cmp97$i$i = ($156|0)==(0|0);
             if ($cmp97$i$i) {
              $157 = HEAP32[$child$i$i>>2]|0;
              $cmp100$i$i = ($157|0)==(0|0);
              if ($cmp100$i$i) {
               $R$3$i$i = 0;
               break;
              } else {
               $R$1$i$i = $157;$RP$1$i$i = $child$i$i;
              }
             } else {
              $R$1$i$i = $156;$RP$1$i$i = $arrayidx96$i$i;
             }
             while(1) {
              $arrayidx103$i$i = ((($R$1$i$i)) + 20|0);
              $158 = HEAP32[$arrayidx103$i$i>>2]|0;
              $cmp104$i$i = ($158|0)==(0|0);
              if (!($cmp104$i$i)) {
               $R$1$i$i = $158;$RP$1$i$i = $arrayidx103$i$i;
               continue;
              }
              $arrayidx107$i$i = ((($R$1$i$i)) + 16|0);
              $159 = HEAP32[$arrayidx107$i$i>>2]|0;
              $cmp108$i$i = ($159|0)==(0|0);
              if ($cmp108$i$i) {
               break;
              } else {
               $R$1$i$i = $159;$RP$1$i$i = $arrayidx107$i$i;
              }
             }
             $cmp112$i$i = ($RP$1$i$i>>>0)<($147>>>0);
             if ($cmp112$i$i) {
              _abort();
              // unreachable;
             } else {
              HEAP32[$RP$1$i$i>>2] = 0;
              $R$3$i$i = $R$1$i$i;
              break;
             }
            } else {
             $fd78$i$i = ((($add$ptr16$i$i)) + 8|0);
             $153 = HEAP32[$fd78$i$i>>2]|0;
             $cmp81$i$i = ($153>>>0)<($147>>>0);
             if ($cmp81$i$i) {
              _abort();
              // unreachable;
             }
             $bk82$i$i = ((($153)) + 12|0);
             $154 = HEAP32[$bk82$i$i>>2]|0;
             $cmp83$i$i = ($154|0)==($add$ptr16$i$i|0);
             if (!($cmp83$i$i)) {
              _abort();
              // unreachable;
             }
             $fd85$i$i = ((($152)) + 8|0);
             $155 = HEAP32[$fd85$i$i>>2]|0;
             $cmp86$i$i = ($155|0)==($add$ptr16$i$i|0);
             if ($cmp86$i$i) {
              HEAP32[$bk82$i$i>>2] = $152;
              HEAP32[$fd85$i$i>>2] = $153;
              $R$3$i$i = $152;
              break;
             } else {
              _abort();
              // unreachable;
             }
            }
           } while(0);
           $cmp120$i42$i = ($151|0)==(0|0);
           if ($cmp120$i42$i) {
            break;
           }
           $index$i43$i = ((($add$ptr16$i$i)) + 28|0);
           $160 = HEAP32[$index$i43$i>>2]|0;
           $arrayidx123$i$i = (19888 + ($160<<2)|0);
           $161 = HEAP32[$arrayidx123$i$i>>2]|0;
           $cmp124$i$i = ($add$ptr16$i$i|0)==($161|0);
           do {
            if ($cmp124$i$i) {
             HEAP32[$arrayidx123$i$i>>2] = $R$3$i$i;
             $cond2$i$i = ($R$3$i$i|0)==(0|0);
             if (!($cond2$i$i)) {
              break;
             }
             $shl131$i$i = 1 << $160;
             $neg132$i$i = $shl131$i$i ^ -1;
             $162 = HEAP32[(19588)>>2]|0;
             $and133$i$i = $162 & $neg132$i$i;
             HEAP32[(19588)>>2] = $and133$i$i;
             break L314;
            } else {
             $163 = HEAP32[(19600)>>2]|0;
             $cmp137$i$i = ($151>>>0)<($163>>>0);
             if ($cmp137$i$i) {
              _abort();
              // unreachable;
             } else {
              $arrayidx143$i$i = ((($151)) + 16|0);
              $164 = HEAP32[$arrayidx143$i$i>>2]|0;
              $not$cmp144$i$i = ($164|0)!=($add$ptr16$i$i|0);
              $$sink$i$i = $not$cmp144$i$i&1;
              $arrayidx151$i$i = (((($151)) + 16|0) + ($$sink$i$i<<2)|0);
              HEAP32[$arrayidx151$i$i>>2] = $R$3$i$i;
              $cmp156$i$i = ($R$3$i$i|0)==(0|0);
              if ($cmp156$i$i) {
               break L314;
              } else {
               break;
              }
             }
            }
           } while(0);
           $165 = HEAP32[(19600)>>2]|0;
           $cmp160$i$i = ($R$3$i$i>>>0)<($165>>>0);
           if ($cmp160$i$i) {
            _abort();
            // unreachable;
           }
           $parent165$i$i = ((($R$3$i$i)) + 24|0);
           HEAP32[$parent165$i$i>>2] = $151;
           $child166$i$i = ((($add$ptr16$i$i)) + 16|0);
           $166 = HEAP32[$child166$i$i>>2]|0;
           $cmp168$i$i = ($166|0)==(0|0);
           do {
            if (!($cmp168$i$i)) {
             $cmp172$i$i = ($166>>>0)<($165>>>0);
             if ($cmp172$i$i) {
              _abort();
              // unreachable;
             } else {
              $arrayidx178$i$i = ((($R$3$i$i)) + 16|0);
              HEAP32[$arrayidx178$i$i>>2] = $166;
              $parent179$i$i = ((($166)) + 24|0);
              HEAP32[$parent179$i$i>>2] = $R$3$i$i;
              break;
             }
            }
           } while(0);
           $arrayidx184$i$i = ((($child166$i$i)) + 4|0);
           $167 = HEAP32[$arrayidx184$i$i>>2]|0;
           $cmp185$i$i = ($167|0)==(0|0);
           if ($cmp185$i$i) {
            break;
           }
           $168 = HEAP32[(19600)>>2]|0;
           $cmp189$i$i = ($167>>>0)<($168>>>0);
           if ($cmp189$i$i) {
            _abort();
            // unreachable;
           } else {
            $arrayidx195$i$i = ((($R$3$i$i)) + 20|0);
            HEAP32[$arrayidx195$i$i>>2] = $167;
            $parent196$i$i = ((($167)) + 24|0);
            HEAP32[$parent196$i$i>>2] = $R$3$i$i;
            break;
           }
          }
         } while(0);
         $add$ptr205$i$i = (($add$ptr16$i$i) + ($and37$i$i)|0);
         $add206$i$i = (($and37$i$i) + ($sub18$i$i))|0;
         $oldfirst$0$i$i = $add$ptr205$i$i;$qsize$0$i$i = $add206$i$i;
        } else {
         $oldfirst$0$i$i = $add$ptr16$i$i;$qsize$0$i$i = $sub18$i$i;
        }
        $head208$i$i = ((($oldfirst$0$i$i)) + 4|0);
        $169 = HEAP32[$head208$i$i>>2]|0;
        $and209$i$i = $169 & -2;
        HEAP32[$head208$i$i>>2] = $and209$i$i;
        $or210$i$i = $qsize$0$i$i | 1;
        $head211$i$i = ((($add$ptr17$i$i)) + 4|0);
        HEAP32[$head211$i$i>>2] = $or210$i$i;
        $add$ptr212$i$i = (($add$ptr17$i$i) + ($qsize$0$i$i)|0);
        HEAP32[$add$ptr212$i$i>>2] = $qsize$0$i$i;
        $shr214$i$i = $qsize$0$i$i >>> 3;
        $cmp215$i$i = ($qsize$0$i$i>>>0)<(256);
        if ($cmp215$i$i) {
         $shl222$i$i = $shr214$i$i << 1;
         $arrayidx223$i$i = (19624 + ($shl222$i$i<<2)|0);
         $170 = HEAP32[4896]|0;
         $shl226$i$i = 1 << $shr214$i$i;
         $and227$i$i = $170 & $shl226$i$i;
         $tobool228$i$i = ($and227$i$i|0)==(0);
         do {
          if ($tobool228$i$i) {
           $or232$i$i = $170 | $shl226$i$i;
           HEAP32[4896] = $or232$i$i;
           $$pre$i45$i = ((($arrayidx223$i$i)) + 8|0);
           $$pre$phi$i46$iZ2D = $$pre$i45$i;$F224$0$i$i = $arrayidx223$i$i;
          } else {
           $171 = ((($arrayidx223$i$i)) + 8|0);
           $172 = HEAP32[$171>>2]|0;
           $173 = HEAP32[(19600)>>2]|0;
           $cmp236$i$i = ($172>>>0)<($173>>>0);
           if (!($cmp236$i$i)) {
            $$pre$phi$i46$iZ2D = $171;$F224$0$i$i = $172;
            break;
           }
           _abort();
           // unreachable;
          }
         } while(0);
         HEAP32[$$pre$phi$i46$iZ2D>>2] = $add$ptr17$i$i;
         $bk246$i$i = ((($F224$0$i$i)) + 12|0);
         HEAP32[$bk246$i$i>>2] = $add$ptr17$i$i;
         $fd247$i$i = ((($add$ptr17$i$i)) + 8|0);
         HEAP32[$fd247$i$i>>2] = $F224$0$i$i;
         $bk248$i$i = ((($add$ptr17$i$i)) + 12|0);
         HEAP32[$bk248$i$i>>2] = $arrayidx223$i$i;
         break;
        }
        $shr253$i$i = $qsize$0$i$i >>> 8;
        $cmp254$i$i = ($shr253$i$i|0)==(0);
        do {
         if ($cmp254$i$i) {
          $I252$0$i$i = 0;
         } else {
          $cmp258$i$i = ($qsize$0$i$i>>>0)>(16777215);
          if ($cmp258$i$i) {
           $I252$0$i$i = 31;
           break;
          }
          $sub262$i$i = (($shr253$i$i) + 1048320)|0;
          $shr263$i$i = $sub262$i$i >>> 16;
          $and264$i$i = $shr263$i$i & 8;
          $shl265$i$i = $shr253$i$i << $and264$i$i;
          $sub266$i$i = (($shl265$i$i) + 520192)|0;
          $shr267$i$i = $sub266$i$i >>> 16;
          $and268$i$i = $shr267$i$i & 4;
          $add269$i$i = $and268$i$i | $and264$i$i;
          $shl270$i$i = $shl265$i$i << $and268$i$i;
          $sub271$i$i = (($shl270$i$i) + 245760)|0;
          $shr272$i$i = $sub271$i$i >>> 16;
          $and273$i$i = $shr272$i$i & 2;
          $add274$i$i = $add269$i$i | $and273$i$i;
          $sub275$i$i = (14 - ($add274$i$i))|0;
          $shl276$i$i = $shl270$i$i << $and273$i$i;
          $shr277$i$i = $shl276$i$i >>> 15;
          $add278$i$i = (($sub275$i$i) + ($shr277$i$i))|0;
          $shl279$i$i = $add278$i$i << 1;
          $add280$i$i = (($add278$i$i) + 7)|0;
          $shr281$i$i = $qsize$0$i$i >>> $add280$i$i;
          $and282$i$i = $shr281$i$i & 1;
          $add283$i$i = $and282$i$i | $shl279$i$i;
          $I252$0$i$i = $add283$i$i;
         }
        } while(0);
        $arrayidx287$i$i = (19888 + ($I252$0$i$i<<2)|0);
        $index288$i$i = ((($add$ptr17$i$i)) + 28|0);
        HEAP32[$index288$i$i>>2] = $I252$0$i$i;
        $child289$i$i = ((($add$ptr17$i$i)) + 16|0);
        $arrayidx290$i$i = ((($child289$i$i)) + 4|0);
        HEAP32[$arrayidx290$i$i>>2] = 0;
        HEAP32[$child289$i$i>>2] = 0;
        $174 = HEAP32[(19588)>>2]|0;
        $shl294$i$i = 1 << $I252$0$i$i;
        $and295$i$i = $174 & $shl294$i$i;
        $tobool296$i$i = ($and295$i$i|0)==(0);
        if ($tobool296$i$i) {
         $or300$i$i = $174 | $shl294$i$i;
         HEAP32[(19588)>>2] = $or300$i$i;
         HEAP32[$arrayidx287$i$i>>2] = $add$ptr17$i$i;
         $parent301$i$i = ((($add$ptr17$i$i)) + 24|0);
         HEAP32[$parent301$i$i>>2] = $arrayidx287$i$i;
         $bk302$i$i = ((($add$ptr17$i$i)) + 12|0);
         HEAP32[$bk302$i$i>>2] = $add$ptr17$i$i;
         $fd303$i$i = ((($add$ptr17$i$i)) + 8|0);
         HEAP32[$fd303$i$i>>2] = $add$ptr17$i$i;
         break;
        }
        $175 = HEAP32[$arrayidx287$i$i>>2]|0;
        $cmp306$i$i = ($I252$0$i$i|0)==(31);
        $shr310$i$i = $I252$0$i$i >>> 1;
        $sub313$i$i = (25 - ($shr310$i$i))|0;
        $cond315$i$i = $cmp306$i$i ? 0 : $sub313$i$i;
        $shl316$i$i = $qsize$0$i$i << $cond315$i$i;
        $K305$0$i$i = $shl316$i$i;$T$0$i47$i = $175;
        while(1) {
         $head317$i$i = ((($T$0$i47$i)) + 4|0);
         $176 = HEAP32[$head317$i$i>>2]|0;
         $and318$i$i = $176 & -8;
         $cmp319$i$i = ($and318$i$i|0)==($qsize$0$i$i|0);
         if ($cmp319$i$i) {
          label = 265;
          break;
         }
         $shr323$i$i = $K305$0$i$i >>> 31;
         $arrayidx325$i$i = (((($T$0$i47$i)) + 16|0) + ($shr323$i$i<<2)|0);
         $shl326$i$i = $K305$0$i$i << 1;
         $177 = HEAP32[$arrayidx325$i$i>>2]|0;
         $cmp327$i$i = ($177|0)==(0|0);
         if ($cmp327$i$i) {
          label = 262;
          break;
         } else {
          $K305$0$i$i = $shl326$i$i;$T$0$i47$i = $177;
         }
        }
        if ((label|0) == 262) {
         $178 = HEAP32[(19600)>>2]|0;
         $cmp332$i$i = ($arrayidx325$i$i>>>0)<($178>>>0);
         if ($cmp332$i$i) {
          _abort();
          // unreachable;
         } else {
          HEAP32[$arrayidx325$i$i>>2] = $add$ptr17$i$i;
          $parent337$i$i = ((($add$ptr17$i$i)) + 24|0);
          HEAP32[$parent337$i$i>>2] = $T$0$i47$i;
          $bk338$i$i = ((($add$ptr17$i$i)) + 12|0);
          HEAP32[$bk338$i$i>>2] = $add$ptr17$i$i;
          $fd339$i$i = ((($add$ptr17$i$i)) + 8|0);
          HEAP32[$fd339$i$i>>2] = $add$ptr17$i$i;
          break;
         }
        }
        else if ((label|0) == 265) {
         $fd344$i$i = ((($T$0$i47$i)) + 8|0);
         $179 = HEAP32[$fd344$i$i>>2]|0;
         $180 = HEAP32[(19600)>>2]|0;
         $cmp350$i$i = ($179>>>0)>=($180>>>0);
         $not$cmp346$i$i = ($T$0$i47$i>>>0)>=($180>>>0);
         $181 = $cmp350$i$i & $not$cmp346$i$i;
         if ($181) {
          $bk357$i$i = ((($179)) + 12|0);
          HEAP32[$bk357$i$i>>2] = $add$ptr17$i$i;
          HEAP32[$fd344$i$i>>2] = $add$ptr17$i$i;
          $fd359$i$i = ((($add$ptr17$i$i)) + 8|0);
          HEAP32[$fd359$i$i>>2] = $179;
          $bk360$i$i = ((($add$ptr17$i$i)) + 12|0);
          HEAP32[$bk360$i$i>>2] = $T$0$i47$i;
          $parent361$i$i = ((($add$ptr17$i$i)) + 24|0);
          HEAP32[$parent361$i$i>>2] = 0;
          break;
         } else {
          _abort();
          // unreachable;
         }
        }
       }
      } while(0);
      $add$ptr369$i$i = ((($add$ptr4$i26$i)) + 8|0);
      $retval$0 = $add$ptr369$i$i;
      STACKTOP = sp;return ($retval$0|0);
     }
    }
    $sp$0$i$i$i = (20032);
    while(1) {
     $182 = HEAP32[$sp$0$i$i$i>>2]|0;
     $cmp$i$i$i = ($182>>>0)>($116>>>0);
     if (!($cmp$i$i$i)) {
      $size$i$i$i = ((($sp$0$i$i$i)) + 4|0);
      $183 = HEAP32[$size$i$i$i>>2]|0;
      $add$ptr$i$i$i = (($182) + ($183)|0);
      $cmp2$i$i$i = ($add$ptr$i$i$i>>>0)>($116>>>0);
      if ($cmp2$i$i$i) {
       break;
      }
     }
     $next$i$i$i = ((($sp$0$i$i$i)) + 8|0);
     $184 = HEAP32[$next$i$i$i>>2]|0;
     $sp$0$i$i$i = $184;
    }
    $add$ptr2$i$i = ((($add$ptr$i$i$i)) + -47|0);
    $add$ptr3$i$i = ((($add$ptr2$i$i)) + 8|0);
    $185 = $add$ptr3$i$i;
    $and$i$i = $185 & 7;
    $cmp$i9$i = ($and$i$i|0)==(0);
    $186 = (0 - ($185))|0;
    $and6$i10$i = $186 & 7;
    $cond$i$i = $cmp$i9$i ? 0 : $and6$i10$i;
    $add$ptr7$i$i = (($add$ptr2$i$i) + ($cond$i$i)|0);
    $add$ptr81$i$i = ((($116)) + 16|0);
    $cmp9$i$i = ($add$ptr7$i$i>>>0)<($add$ptr81$i$i>>>0);
    $cond13$i$i = $cmp9$i$i ? $116 : $add$ptr7$i$i;
    $add$ptr14$i$i = ((($cond13$i$i)) + 8|0);
    $add$ptr15$i$i = ((($cond13$i$i)) + 24|0);
    $sub16$i$i = (($tsize$795$i) + -40)|0;
    $add$ptr$i2$i$i = ((($tbase$796$i)) + 8|0);
    $187 = $add$ptr$i2$i$i;
    $and$i$i$i = $187 & 7;
    $cmp$i3$i$i = ($and$i$i$i|0)==(0);
    $188 = (0 - ($187))|0;
    $and3$i$i$i = $188 & 7;
    $cond$i$i$i = $cmp$i3$i$i ? 0 : $and3$i$i$i;
    $add$ptr4$i$i$i = (($tbase$796$i) + ($cond$i$i$i)|0);
    $sub5$i$i$i = (($sub16$i$i) - ($cond$i$i$i))|0;
    HEAP32[(19608)>>2] = $add$ptr4$i$i$i;
    HEAP32[(19596)>>2] = $sub5$i$i$i;
    $or$i$i$i = $sub5$i$i$i | 1;
    $head$i$i$i = ((($add$ptr4$i$i$i)) + 4|0);
    HEAP32[$head$i$i$i>>2] = $or$i$i$i;
    $add$ptr6$i$i$i = (($add$ptr4$i$i$i) + ($sub5$i$i$i)|0);
    $head7$i$i$i = ((($add$ptr6$i$i$i)) + 4|0);
    HEAP32[$head7$i$i$i>>2] = 40;
    $189 = HEAP32[(20072)>>2]|0;
    HEAP32[(19612)>>2] = $189;
    $head$i$i = ((($cond13$i$i)) + 4|0);
    HEAP32[$head$i$i>>2] = 27;
    ;HEAP32[$add$ptr14$i$i>>2]=HEAP32[(20032)>>2]|0;HEAP32[$add$ptr14$i$i+4>>2]=HEAP32[(20032)+4>>2]|0;HEAP32[$add$ptr14$i$i+8>>2]=HEAP32[(20032)+8>>2]|0;HEAP32[$add$ptr14$i$i+12>>2]=HEAP32[(20032)+12>>2]|0;
    HEAP32[(20032)>>2] = $tbase$796$i;
    HEAP32[(20036)>>2] = $tsize$795$i;
    HEAP32[(20044)>>2] = 0;
    HEAP32[(20040)>>2] = $add$ptr14$i$i;
    $190 = $add$ptr15$i$i;
    while(1) {
     $add$ptr24$i$i = ((($190)) + 4|0);
     HEAP32[$add$ptr24$i$i>>2] = 7;
     $head26$i$i = ((($190)) + 8|0);
     $cmp27$i$i = ($head26$i$i>>>0)<($add$ptr$i$i$i>>>0);
     if ($cmp27$i$i) {
      $190 = $add$ptr24$i$i;
     } else {
      break;
     }
    }
    $cmp28$i$i = ($cond13$i$i|0)==($116|0);
    if (!($cmp28$i$i)) {
     $sub$ptr$lhs$cast$i$i = $cond13$i$i;
     $sub$ptr$rhs$cast$i$i = $116;
     $sub$ptr$sub$i$i = (($sub$ptr$lhs$cast$i$i) - ($sub$ptr$rhs$cast$i$i))|0;
     $191 = HEAP32[$head$i$i>>2]|0;
     $and32$i$i = $191 & -2;
     HEAP32[$head$i$i>>2] = $and32$i$i;
     $or33$i$i = $sub$ptr$sub$i$i | 1;
     $head34$i$i = ((($116)) + 4|0);
     HEAP32[$head34$i$i>>2] = $or33$i$i;
     HEAP32[$cond13$i$i>>2] = $sub$ptr$sub$i$i;
     $shr$i$i = $sub$ptr$sub$i$i >>> 3;
     $cmp36$i$i = ($sub$ptr$sub$i$i>>>0)<(256);
     if ($cmp36$i$i) {
      $shl$i$i = $shr$i$i << 1;
      $arrayidx$i$i = (19624 + ($shl$i$i<<2)|0);
      $192 = HEAP32[4896]|0;
      $shl39$i$i = 1 << $shr$i$i;
      $and40$i$i = $192 & $shl39$i$i;
      $tobool$i$i = ($and40$i$i|0)==(0);
      if ($tobool$i$i) {
       $or44$i$i = $192 | $shl39$i$i;
       HEAP32[4896] = $or44$i$i;
       $$pre$i$i = ((($arrayidx$i$i)) + 8|0);
       $$pre$phi$i$iZ2D = $$pre$i$i;$F$0$i$i = $arrayidx$i$i;
      } else {
       $193 = ((($arrayidx$i$i)) + 8|0);
       $194 = HEAP32[$193>>2]|0;
       $195 = HEAP32[(19600)>>2]|0;
       $cmp46$i$i = ($194>>>0)<($195>>>0);
       if ($cmp46$i$i) {
        _abort();
        // unreachable;
       } else {
        $$pre$phi$i$iZ2D = $193;$F$0$i$i = $194;
       }
      }
      HEAP32[$$pre$phi$i$iZ2D>>2] = $116;
      $bk$i$i = ((($F$0$i$i)) + 12|0);
      HEAP32[$bk$i$i>>2] = $116;
      $fd54$i$i = ((($116)) + 8|0);
      HEAP32[$fd54$i$i>>2] = $F$0$i$i;
      $bk55$i$i = ((($116)) + 12|0);
      HEAP32[$bk55$i$i>>2] = $arrayidx$i$i;
      break;
     }
     $shr58$i$i = $sub$ptr$sub$i$i >>> 8;
     $cmp59$i$i = ($shr58$i$i|0)==(0);
     if ($cmp59$i$i) {
      $I57$0$i$i = 0;
     } else {
      $cmp63$i$i = ($sub$ptr$sub$i$i>>>0)>(16777215);
      if ($cmp63$i$i) {
       $I57$0$i$i = 31;
      } else {
       $sub67$i$i = (($shr58$i$i) + 1048320)|0;
       $shr68$i$i = $sub67$i$i >>> 16;
       $and69$i$i = $shr68$i$i & 8;
       $shl70$i$i = $shr58$i$i << $and69$i$i;
       $sub71$i$i = (($shl70$i$i) + 520192)|0;
       $shr72$i$i = $sub71$i$i >>> 16;
       $and73$i$i = $shr72$i$i & 4;
       $add74$i$i = $and73$i$i | $and69$i$i;
       $shl75$i$i = $shl70$i$i << $and73$i$i;
       $sub76$i$i = (($shl75$i$i) + 245760)|0;
       $shr77$i$i = $sub76$i$i >>> 16;
       $and78$i$i = $shr77$i$i & 2;
       $add79$i$i = $add74$i$i | $and78$i$i;
       $sub80$i$i = (14 - ($add79$i$i))|0;
       $shl81$i$i = $shl75$i$i << $and78$i$i;
       $shr82$i$i = $shl81$i$i >>> 15;
       $add83$i$i = (($sub80$i$i) + ($shr82$i$i))|0;
       $shl84$i$i = $add83$i$i << 1;
       $add85$i$i = (($add83$i$i) + 7)|0;
       $shr86$i$i = $sub$ptr$sub$i$i >>> $add85$i$i;
       $and87$i$i = $shr86$i$i & 1;
       $add88$i$i = $and87$i$i | $shl84$i$i;
       $I57$0$i$i = $add88$i$i;
      }
     }
     $arrayidx91$i$i = (19888 + ($I57$0$i$i<<2)|0);
     $index$i$i = ((($116)) + 28|0);
     HEAP32[$index$i$i>>2] = $I57$0$i$i;
     $arrayidx92$i$i = ((($116)) + 20|0);
     HEAP32[$arrayidx92$i$i>>2] = 0;
     HEAP32[$add$ptr81$i$i>>2] = 0;
     $196 = HEAP32[(19588)>>2]|0;
     $shl95$i$i = 1 << $I57$0$i$i;
     $and96$i$i = $196 & $shl95$i$i;
     $tobool97$i$i = ($and96$i$i|0)==(0);
     if ($tobool97$i$i) {
      $or101$i$i = $196 | $shl95$i$i;
      HEAP32[(19588)>>2] = $or101$i$i;
      HEAP32[$arrayidx91$i$i>>2] = $116;
      $parent$i$i = ((($116)) + 24|0);
      HEAP32[$parent$i$i>>2] = $arrayidx91$i$i;
      $bk102$i$i = ((($116)) + 12|0);
      HEAP32[$bk102$i$i>>2] = $116;
      $fd103$i$i = ((($116)) + 8|0);
      HEAP32[$fd103$i$i>>2] = $116;
      break;
     }
     $197 = HEAP32[$arrayidx91$i$i>>2]|0;
     $cmp106$i$i = ($I57$0$i$i|0)==(31);
     $shr110$i$i = $I57$0$i$i >>> 1;
     $sub113$i$i = (25 - ($shr110$i$i))|0;
     $cond115$i$i = $cmp106$i$i ? 0 : $sub113$i$i;
     $shl116$i$i = $sub$ptr$sub$i$i << $cond115$i$i;
     $K105$0$i$i = $shl116$i$i;$T$0$i$i = $197;
     while(1) {
      $head118$i$i = ((($T$0$i$i)) + 4|0);
      $198 = HEAP32[$head118$i$i>>2]|0;
      $and119$i$i = $198 & -8;
      $cmp120$i$i = ($and119$i$i|0)==($sub$ptr$sub$i$i|0);
      if ($cmp120$i$i) {
       label = 292;
       break;
      }
      $shr124$i$i = $K105$0$i$i >>> 31;
      $arrayidx126$i$i = (((($T$0$i$i)) + 16|0) + ($shr124$i$i<<2)|0);
      $shl127$i$i = $K105$0$i$i << 1;
      $199 = HEAP32[$arrayidx126$i$i>>2]|0;
      $cmp128$i$i = ($199|0)==(0|0);
      if ($cmp128$i$i) {
       label = 289;
       break;
      } else {
       $K105$0$i$i = $shl127$i$i;$T$0$i$i = $199;
      }
     }
     if ((label|0) == 289) {
      $200 = HEAP32[(19600)>>2]|0;
      $cmp133$i$i = ($arrayidx126$i$i>>>0)<($200>>>0);
      if ($cmp133$i$i) {
       _abort();
       // unreachable;
      } else {
       HEAP32[$arrayidx126$i$i>>2] = $116;
       $parent138$i$i = ((($116)) + 24|0);
       HEAP32[$parent138$i$i>>2] = $T$0$i$i;
       $bk139$i$i = ((($116)) + 12|0);
       HEAP32[$bk139$i$i>>2] = $116;
       $fd140$i$i = ((($116)) + 8|0);
       HEAP32[$fd140$i$i>>2] = $116;
       break;
      }
     }
     else if ((label|0) == 292) {
      $fd148$i$i = ((($T$0$i$i)) + 8|0);
      $201 = HEAP32[$fd148$i$i>>2]|0;
      $202 = HEAP32[(19600)>>2]|0;
      $cmp153$i$i = ($201>>>0)>=($202>>>0);
      $not$cmp150$i$i = ($T$0$i$i>>>0)>=($202>>>0);
      $203 = $cmp153$i$i & $not$cmp150$i$i;
      if ($203) {
       $bk158$i$i = ((($201)) + 12|0);
       HEAP32[$bk158$i$i>>2] = $116;
       HEAP32[$fd148$i$i>>2] = $116;
       $fd160$i$i = ((($116)) + 8|0);
       HEAP32[$fd160$i$i>>2] = $201;
       $bk161$i$i = ((($116)) + 12|0);
       HEAP32[$bk161$i$i>>2] = $T$0$i$i;
       $parent162$i$i = ((($116)) + 24|0);
       HEAP32[$parent162$i$i>>2] = 0;
       break;
      } else {
       _abort();
       // unreachable;
      }
     }
    }
   }
  } while(0);
  $204 = HEAP32[(19596)>>2]|0;
  $cmp257$i = ($204>>>0)>($nb$0>>>0);
  if ($cmp257$i) {
   $sub260$i = (($204) - ($nb$0))|0;
   HEAP32[(19596)>>2] = $sub260$i;
   $205 = HEAP32[(19608)>>2]|0;
   $add$ptr262$i = (($205) + ($nb$0)|0);
   HEAP32[(19608)>>2] = $add$ptr262$i;
   $or264$i = $sub260$i | 1;
   $head265$i = ((($add$ptr262$i)) + 4|0);
   HEAP32[$head265$i>>2] = $or264$i;
   $or267$i = $nb$0 | 3;
   $head268$i = ((($205)) + 4|0);
   HEAP32[$head268$i>>2] = $or267$i;
   $add$ptr269$i = ((($205)) + 8|0);
   $retval$0 = $add$ptr269$i;
   STACKTOP = sp;return ($retval$0|0);
  }
 }
 $call275$i = (___errno_location()|0);
 HEAP32[$call275$i>>2] = 12;
 $retval$0 = 0;
 STACKTOP = sp;return ($retval$0|0);
}
function _free($mem) {
 $mem = $mem|0;
 var $$pre = 0, $$pre$phiZ2D = 0, $$pre308 = 0, $$pre309 = 0, $$sink = 0, $$sink4 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0;
 var $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $8 = 0;
 var $9 = 0, $F510$0 = 0, $I534$0 = 0, $K583$0 = 0, $R$1 = 0, $R$3 = 0, $R332$1 = 0, $R332$3 = 0, $RP$1 = 0, $RP360$1 = 0, $T$0 = 0, $add$ptr = 0, $add$ptr16 = 0, $add$ptr217 = 0, $add$ptr261 = 0, $add$ptr482 = 0, $add$ptr498 = 0, $add$ptr6 = 0, $add17 = 0, $add246 = 0;
 var $add258 = 0, $add267 = 0, $add550 = 0, $add555 = 0, $add559 = 0, $add561 = 0, $add564 = 0, $and = 0, $and140 = 0, $and210 = 0, $and215 = 0, $and232 = 0, $and240 = 0, $and266 = 0, $and301 = 0, $and410 = 0, $and46 = 0, $and495 = 0, $and5 = 0, $and512 = 0;
 var $and545 = 0, $and549 = 0, $and554 = 0, $and563 = 0, $and574 = 0, $and592 = 0, $and8 = 0, $arrayidx = 0, $arrayidx108 = 0, $arrayidx113 = 0, $arrayidx130 = 0, $arrayidx149 = 0, $arrayidx157 = 0, $arrayidx182 = 0, $arrayidx188 = 0, $arrayidx198 = 0, $arrayidx279 = 0, $arrayidx362 = 0, $arrayidx374 = 0, $arrayidx379 = 0;
 var $arrayidx400 = 0, $arrayidx419 = 0, $arrayidx427 = 0, $arrayidx454 = 0, $arrayidx460 = 0, $arrayidx470 = 0, $arrayidx509 = 0, $arrayidx567 = 0, $arrayidx570 = 0, $arrayidx599 = 0, $arrayidx99 = 0, $bk = 0, $bk275 = 0, $bk286 = 0, $bk321 = 0, $bk333 = 0, $bk34 = 0, $bk343 = 0, $bk529 = 0, $bk531 = 0;
 var $bk580 = 0, $bk611 = 0, $bk631 = 0, $bk634 = 0, $bk66 = 0, $bk73 = 0, $bk82 = 0, $child = 0, $child171 = 0, $child361 = 0, $child443 = 0, $child569 = 0, $cmp = 0, $cmp$i = 0, $cmp1 = 0, $cmp100 = 0, $cmp104 = 0, $cmp109 = 0, $cmp114 = 0, $cmp118 = 0;
 var $cmp127 = 0, $cmp13 = 0, $cmp131 = 0, $cmp143 = 0, $cmp162 = 0, $cmp165 = 0, $cmp173 = 0, $cmp176 = 0, $cmp18 = 0, $cmp189 = 0, $cmp192 = 0, $cmp2 = 0, $cmp211 = 0, $cmp22 = 0, $cmp228 = 0, $cmp243 = 0, $cmp249 = 0, $cmp25 = 0, $cmp255 = 0, $cmp269 = 0;
 var $cmp280 = 0, $cmp283 = 0, $cmp287 = 0, $cmp29 = 0, $cmp296 = 0, $cmp305 = 0, $cmp308 = 0, $cmp31 = 0, $cmp312 = 0, $cmp334 = 0, $cmp340 = 0, $cmp344 = 0, $cmp348 = 0, $cmp35 = 0, $cmp363 = 0, $cmp368 = 0, $cmp375 = 0, $cmp380 = 0, $cmp386 = 0, $cmp395 = 0;
 var $cmp401 = 0, $cmp413 = 0, $cmp42 = 0, $cmp432 = 0, $cmp435 = 0, $cmp445 = 0, $cmp448 = 0, $cmp461 = 0, $cmp464 = 0, $cmp484 = 0, $cmp50 = 0, $cmp502 = 0, $cmp519 = 0, $cmp53 = 0, $cmp536 = 0, $cmp540 = 0, $cmp57 = 0, $cmp584 = 0, $cmp593 = 0, $cmp601 = 0;
 var $cmp605 = 0, $cmp624 = 0, $cmp640 = 0, $cmp74 = 0, $cmp80 = 0, $cmp83 = 0, $cmp87 = 0, $cond = 0, $cond292 = 0, $cond293 = 0, $dec = 0, $fd = 0, $fd273 = 0, $fd311 = 0, $fd322$pre$phiZ2D = 0, $fd338 = 0, $fd347 = 0, $fd530 = 0, $fd56 = 0, $fd581 = 0;
 var $fd612 = 0, $fd620 = 0, $fd633 = 0, $fd67$pre$phiZ2D = 0, $fd78 = 0, $fd86 = 0, $head = 0, $head209 = 0, $head216 = 0, $head231 = 0, $head248 = 0, $head260 = 0, $head481 = 0, $head497 = 0, $head591 = 0, $idx$neg = 0, $index = 0, $index399 = 0, $index568 = 0, $neg = 0;
 var $neg139 = 0, $neg300 = 0, $neg409 = 0, $next4$i = 0, $not$cmp150 = 0, $not$cmp420 = 0, $not$cmp621 = 0, $or = 0, $or247 = 0, $or259 = 0, $or480 = 0, $or496 = 0, $or516 = 0, $or578 = 0, $p$1 = 0, $parent = 0, $parent170 = 0, $parent183 = 0, $parent199 = 0, $parent331 = 0;
 var $parent442 = 0, $parent455 = 0, $parent471 = 0, $parent579 = 0, $parent610 = 0, $parent635 = 0, $psize$1 = 0, $psize$2 = 0, $shl = 0, $shl138 = 0, $shl278 = 0, $shl299 = 0, $shl408 = 0, $shl45 = 0, $shl508 = 0, $shl511 = 0, $shl546 = 0, $shl551 = 0, $shl557 = 0, $shl560 = 0;
 var $shl573 = 0, $shl590 = 0, $shl600 = 0, $shr = 0, $shr268 = 0, $shr501 = 0, $shr535 = 0, $shr544 = 0, $shr548 = 0, $shr553 = 0, $shr558 = 0, $shr562 = 0, $shr586 = 0, $shr597 = 0, $sp$0$i = 0, $sp$0$in$i = 0, $sub = 0, $sub547 = 0, $sub552 = 0, $sub556 = 0;
 var $sub589 = 0, $tobool233 = 0, $tobool241 = 0, $tobool513 = 0, $tobool575 = 0, $tobool9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $cmp = ($mem|0)==(0|0);
 if ($cmp) {
  return;
 }
 $add$ptr = ((($mem)) + -8|0);
 $0 = HEAP32[(19600)>>2]|0;
 $cmp1 = ($add$ptr>>>0)<($0>>>0);
 if ($cmp1) {
  _abort();
  // unreachable;
 }
 $head = ((($mem)) + -4|0);
 $1 = HEAP32[$head>>2]|0;
 $and = $1 & 3;
 $cmp2 = ($and|0)==(1);
 if ($cmp2) {
  _abort();
  // unreachable;
 }
 $and5 = $1 & -8;
 $add$ptr6 = (($add$ptr) + ($and5)|0);
 $and8 = $1 & 1;
 $tobool9 = ($and8|0)==(0);
 L10: do {
  if ($tobool9) {
   $2 = HEAP32[$add$ptr>>2]|0;
   $cmp13 = ($and|0)==(0);
   if ($cmp13) {
    return;
   }
   $idx$neg = (0 - ($2))|0;
   $add$ptr16 = (($add$ptr) + ($idx$neg)|0);
   $add17 = (($2) + ($and5))|0;
   $cmp18 = ($add$ptr16>>>0)<($0>>>0);
   if ($cmp18) {
    _abort();
    // unreachable;
   }
   $3 = HEAP32[(19604)>>2]|0;
   $cmp22 = ($add$ptr16|0)==($3|0);
   if ($cmp22) {
    $head209 = ((($add$ptr6)) + 4|0);
    $27 = HEAP32[$head209>>2]|0;
    $and210 = $27 & 3;
    $cmp211 = ($and210|0)==(3);
    if (!($cmp211)) {
     $28 = $add$ptr16;$p$1 = $add$ptr16;$psize$1 = $add17;
     break;
    }
    $add$ptr217 = (($add$ptr16) + ($add17)|0);
    $head216 = ((($add$ptr16)) + 4|0);
    $or = $add17 | 1;
    $and215 = $27 & -2;
    HEAP32[(19592)>>2] = $add17;
    HEAP32[$head209>>2] = $and215;
    HEAP32[$head216>>2] = $or;
    HEAP32[$add$ptr217>>2] = $add17;
    return;
   }
   $shr = $2 >>> 3;
   $cmp25 = ($2>>>0)<(256);
   if ($cmp25) {
    $fd = ((($add$ptr16)) + 8|0);
    $4 = HEAP32[$fd>>2]|0;
    $bk = ((($add$ptr16)) + 12|0);
    $5 = HEAP32[$bk>>2]|0;
    $shl = $shr << 1;
    $arrayidx = (19624 + ($shl<<2)|0);
    $cmp29 = ($4|0)==($arrayidx|0);
    if (!($cmp29)) {
     $cmp31 = ($4>>>0)<($0>>>0);
     if ($cmp31) {
      _abort();
      // unreachable;
     }
     $bk34 = ((($4)) + 12|0);
     $6 = HEAP32[$bk34>>2]|0;
     $cmp35 = ($6|0)==($add$ptr16|0);
     if (!($cmp35)) {
      _abort();
      // unreachable;
     }
    }
    $cmp42 = ($5|0)==($4|0);
    if ($cmp42) {
     $shl45 = 1 << $shr;
     $neg = $shl45 ^ -1;
     $7 = HEAP32[4896]|0;
     $and46 = $7 & $neg;
     HEAP32[4896] = $and46;
     $28 = $add$ptr16;$p$1 = $add$ptr16;$psize$1 = $add17;
     break;
    }
    $cmp50 = ($5|0)==($arrayidx|0);
    if ($cmp50) {
     $$pre309 = ((($5)) + 8|0);
     $fd67$pre$phiZ2D = $$pre309;
    } else {
     $cmp53 = ($5>>>0)<($0>>>0);
     if ($cmp53) {
      _abort();
      // unreachable;
     }
     $fd56 = ((($5)) + 8|0);
     $8 = HEAP32[$fd56>>2]|0;
     $cmp57 = ($8|0)==($add$ptr16|0);
     if ($cmp57) {
      $fd67$pre$phiZ2D = $fd56;
     } else {
      _abort();
      // unreachable;
     }
    }
    $bk66 = ((($4)) + 12|0);
    HEAP32[$bk66>>2] = $5;
    HEAP32[$fd67$pre$phiZ2D>>2] = $4;
    $28 = $add$ptr16;$p$1 = $add$ptr16;$psize$1 = $add17;
    break;
   }
   $parent = ((($add$ptr16)) + 24|0);
   $9 = HEAP32[$parent>>2]|0;
   $bk73 = ((($add$ptr16)) + 12|0);
   $10 = HEAP32[$bk73>>2]|0;
   $cmp74 = ($10|0)==($add$ptr16|0);
   do {
    if ($cmp74) {
     $child = ((($add$ptr16)) + 16|0);
     $arrayidx99 = ((($child)) + 4|0);
     $14 = HEAP32[$arrayidx99>>2]|0;
     $cmp100 = ($14|0)==(0|0);
     if ($cmp100) {
      $15 = HEAP32[$child>>2]|0;
      $cmp104 = ($15|0)==(0|0);
      if ($cmp104) {
       $R$3 = 0;
       break;
      } else {
       $R$1 = $15;$RP$1 = $child;
      }
     } else {
      $R$1 = $14;$RP$1 = $arrayidx99;
     }
     while(1) {
      $arrayidx108 = ((($R$1)) + 20|0);
      $16 = HEAP32[$arrayidx108>>2]|0;
      $cmp109 = ($16|0)==(0|0);
      if (!($cmp109)) {
       $R$1 = $16;$RP$1 = $arrayidx108;
       continue;
      }
      $arrayidx113 = ((($R$1)) + 16|0);
      $17 = HEAP32[$arrayidx113>>2]|0;
      $cmp114 = ($17|0)==(0|0);
      if ($cmp114) {
       break;
      } else {
       $R$1 = $17;$RP$1 = $arrayidx113;
      }
     }
     $cmp118 = ($RP$1>>>0)<($0>>>0);
     if ($cmp118) {
      _abort();
      // unreachable;
     } else {
      HEAP32[$RP$1>>2] = 0;
      $R$3 = $R$1;
      break;
     }
    } else {
     $fd78 = ((($add$ptr16)) + 8|0);
     $11 = HEAP32[$fd78>>2]|0;
     $cmp80 = ($11>>>0)<($0>>>0);
     if ($cmp80) {
      _abort();
      // unreachable;
     }
     $bk82 = ((($11)) + 12|0);
     $12 = HEAP32[$bk82>>2]|0;
     $cmp83 = ($12|0)==($add$ptr16|0);
     if (!($cmp83)) {
      _abort();
      // unreachable;
     }
     $fd86 = ((($10)) + 8|0);
     $13 = HEAP32[$fd86>>2]|0;
     $cmp87 = ($13|0)==($add$ptr16|0);
     if ($cmp87) {
      HEAP32[$bk82>>2] = $10;
      HEAP32[$fd86>>2] = $11;
      $R$3 = $10;
      break;
     } else {
      _abort();
      // unreachable;
     }
    }
   } while(0);
   $cmp127 = ($9|0)==(0|0);
   if ($cmp127) {
    $28 = $add$ptr16;$p$1 = $add$ptr16;$psize$1 = $add17;
   } else {
    $index = ((($add$ptr16)) + 28|0);
    $18 = HEAP32[$index>>2]|0;
    $arrayidx130 = (19888 + ($18<<2)|0);
    $19 = HEAP32[$arrayidx130>>2]|0;
    $cmp131 = ($add$ptr16|0)==($19|0);
    do {
     if ($cmp131) {
      HEAP32[$arrayidx130>>2] = $R$3;
      $cond292 = ($R$3|0)==(0|0);
      if ($cond292) {
       $shl138 = 1 << $18;
       $neg139 = $shl138 ^ -1;
       $20 = HEAP32[(19588)>>2]|0;
       $and140 = $20 & $neg139;
       HEAP32[(19588)>>2] = $and140;
       $28 = $add$ptr16;$p$1 = $add$ptr16;$psize$1 = $add17;
       break L10;
      }
     } else {
      $21 = HEAP32[(19600)>>2]|0;
      $cmp143 = ($9>>>0)<($21>>>0);
      if ($cmp143) {
       _abort();
       // unreachable;
      } else {
       $arrayidx149 = ((($9)) + 16|0);
       $22 = HEAP32[$arrayidx149>>2]|0;
       $not$cmp150 = ($22|0)!=($add$ptr16|0);
       $$sink = $not$cmp150&1;
       $arrayidx157 = (((($9)) + 16|0) + ($$sink<<2)|0);
       HEAP32[$arrayidx157>>2] = $R$3;
       $cmp162 = ($R$3|0)==(0|0);
       if ($cmp162) {
        $28 = $add$ptr16;$p$1 = $add$ptr16;$psize$1 = $add17;
        break L10;
       } else {
        break;
       }
      }
     }
    } while(0);
    $23 = HEAP32[(19600)>>2]|0;
    $cmp165 = ($R$3>>>0)<($23>>>0);
    if ($cmp165) {
     _abort();
     // unreachable;
    }
    $parent170 = ((($R$3)) + 24|0);
    HEAP32[$parent170>>2] = $9;
    $child171 = ((($add$ptr16)) + 16|0);
    $24 = HEAP32[$child171>>2]|0;
    $cmp173 = ($24|0)==(0|0);
    do {
     if (!($cmp173)) {
      $cmp176 = ($24>>>0)<($23>>>0);
      if ($cmp176) {
       _abort();
       // unreachable;
      } else {
       $arrayidx182 = ((($R$3)) + 16|0);
       HEAP32[$arrayidx182>>2] = $24;
       $parent183 = ((($24)) + 24|0);
       HEAP32[$parent183>>2] = $R$3;
       break;
      }
     }
    } while(0);
    $arrayidx188 = ((($child171)) + 4|0);
    $25 = HEAP32[$arrayidx188>>2]|0;
    $cmp189 = ($25|0)==(0|0);
    if ($cmp189) {
     $28 = $add$ptr16;$p$1 = $add$ptr16;$psize$1 = $add17;
    } else {
     $26 = HEAP32[(19600)>>2]|0;
     $cmp192 = ($25>>>0)<($26>>>0);
     if ($cmp192) {
      _abort();
      // unreachable;
     } else {
      $arrayidx198 = ((($R$3)) + 20|0);
      HEAP32[$arrayidx198>>2] = $25;
      $parent199 = ((($25)) + 24|0);
      HEAP32[$parent199>>2] = $R$3;
      $28 = $add$ptr16;$p$1 = $add$ptr16;$psize$1 = $add17;
      break;
     }
    }
   }
  } else {
   $28 = $add$ptr;$p$1 = $add$ptr;$psize$1 = $and5;
  }
 } while(0);
 $cmp228 = ($28>>>0)<($add$ptr6>>>0);
 if (!($cmp228)) {
  _abort();
  // unreachable;
 }
 $head231 = ((($add$ptr6)) + 4|0);
 $29 = HEAP32[$head231>>2]|0;
 $and232 = $29 & 1;
 $tobool233 = ($and232|0)==(0);
 if ($tobool233) {
  _abort();
  // unreachable;
 }
 $and240 = $29 & 2;
 $tobool241 = ($and240|0)==(0);
 if ($tobool241) {
  $30 = HEAP32[(19608)>>2]|0;
  $cmp243 = ($add$ptr6|0)==($30|0);
  $31 = HEAP32[(19604)>>2]|0;
  if ($cmp243) {
   $32 = HEAP32[(19596)>>2]|0;
   $add246 = (($32) + ($psize$1))|0;
   HEAP32[(19596)>>2] = $add246;
   HEAP32[(19608)>>2] = $p$1;
   $or247 = $add246 | 1;
   $head248 = ((($p$1)) + 4|0);
   HEAP32[$head248>>2] = $or247;
   $cmp249 = ($p$1|0)==($31|0);
   if (!($cmp249)) {
    return;
   }
   HEAP32[(19604)>>2] = 0;
   HEAP32[(19592)>>2] = 0;
   return;
  }
  $cmp255 = ($add$ptr6|0)==($31|0);
  if ($cmp255) {
   $33 = HEAP32[(19592)>>2]|0;
   $add258 = (($33) + ($psize$1))|0;
   HEAP32[(19592)>>2] = $add258;
   HEAP32[(19604)>>2] = $28;
   $or259 = $add258 | 1;
   $head260 = ((($p$1)) + 4|0);
   HEAP32[$head260>>2] = $or259;
   $add$ptr261 = (($28) + ($add258)|0);
   HEAP32[$add$ptr261>>2] = $add258;
   return;
  }
  $and266 = $29 & -8;
  $add267 = (($and266) + ($psize$1))|0;
  $shr268 = $29 >>> 3;
  $cmp269 = ($29>>>0)<(256);
  L108: do {
   if ($cmp269) {
    $fd273 = ((($add$ptr6)) + 8|0);
    $34 = HEAP32[$fd273>>2]|0;
    $bk275 = ((($add$ptr6)) + 12|0);
    $35 = HEAP32[$bk275>>2]|0;
    $shl278 = $shr268 << 1;
    $arrayidx279 = (19624 + ($shl278<<2)|0);
    $cmp280 = ($34|0)==($arrayidx279|0);
    if (!($cmp280)) {
     $36 = HEAP32[(19600)>>2]|0;
     $cmp283 = ($34>>>0)<($36>>>0);
     if ($cmp283) {
      _abort();
      // unreachable;
     }
     $bk286 = ((($34)) + 12|0);
     $37 = HEAP32[$bk286>>2]|0;
     $cmp287 = ($37|0)==($add$ptr6|0);
     if (!($cmp287)) {
      _abort();
      // unreachable;
     }
    }
    $cmp296 = ($35|0)==($34|0);
    if ($cmp296) {
     $shl299 = 1 << $shr268;
     $neg300 = $shl299 ^ -1;
     $38 = HEAP32[4896]|0;
     $and301 = $38 & $neg300;
     HEAP32[4896] = $and301;
     break;
    }
    $cmp305 = ($35|0)==($arrayidx279|0);
    if ($cmp305) {
     $$pre308 = ((($35)) + 8|0);
     $fd322$pre$phiZ2D = $$pre308;
    } else {
     $39 = HEAP32[(19600)>>2]|0;
     $cmp308 = ($35>>>0)<($39>>>0);
     if ($cmp308) {
      _abort();
      // unreachable;
     }
     $fd311 = ((($35)) + 8|0);
     $40 = HEAP32[$fd311>>2]|0;
     $cmp312 = ($40|0)==($add$ptr6|0);
     if ($cmp312) {
      $fd322$pre$phiZ2D = $fd311;
     } else {
      _abort();
      // unreachable;
     }
    }
    $bk321 = ((($34)) + 12|0);
    HEAP32[$bk321>>2] = $35;
    HEAP32[$fd322$pre$phiZ2D>>2] = $34;
   } else {
    $parent331 = ((($add$ptr6)) + 24|0);
    $41 = HEAP32[$parent331>>2]|0;
    $bk333 = ((($add$ptr6)) + 12|0);
    $42 = HEAP32[$bk333>>2]|0;
    $cmp334 = ($42|0)==($add$ptr6|0);
    do {
     if ($cmp334) {
      $child361 = ((($add$ptr6)) + 16|0);
      $arrayidx362 = ((($child361)) + 4|0);
      $47 = HEAP32[$arrayidx362>>2]|0;
      $cmp363 = ($47|0)==(0|0);
      if ($cmp363) {
       $48 = HEAP32[$child361>>2]|0;
       $cmp368 = ($48|0)==(0|0);
       if ($cmp368) {
        $R332$3 = 0;
        break;
       } else {
        $R332$1 = $48;$RP360$1 = $child361;
       }
      } else {
       $R332$1 = $47;$RP360$1 = $arrayidx362;
      }
      while(1) {
       $arrayidx374 = ((($R332$1)) + 20|0);
       $49 = HEAP32[$arrayidx374>>2]|0;
       $cmp375 = ($49|0)==(0|0);
       if (!($cmp375)) {
        $R332$1 = $49;$RP360$1 = $arrayidx374;
        continue;
       }
       $arrayidx379 = ((($R332$1)) + 16|0);
       $50 = HEAP32[$arrayidx379>>2]|0;
       $cmp380 = ($50|0)==(0|0);
       if ($cmp380) {
        break;
       } else {
        $R332$1 = $50;$RP360$1 = $arrayidx379;
       }
      }
      $51 = HEAP32[(19600)>>2]|0;
      $cmp386 = ($RP360$1>>>0)<($51>>>0);
      if ($cmp386) {
       _abort();
       // unreachable;
      } else {
       HEAP32[$RP360$1>>2] = 0;
       $R332$3 = $R332$1;
       break;
      }
     } else {
      $fd338 = ((($add$ptr6)) + 8|0);
      $43 = HEAP32[$fd338>>2]|0;
      $44 = HEAP32[(19600)>>2]|0;
      $cmp340 = ($43>>>0)<($44>>>0);
      if ($cmp340) {
       _abort();
       // unreachable;
      }
      $bk343 = ((($43)) + 12|0);
      $45 = HEAP32[$bk343>>2]|0;
      $cmp344 = ($45|0)==($add$ptr6|0);
      if (!($cmp344)) {
       _abort();
       // unreachable;
      }
      $fd347 = ((($42)) + 8|0);
      $46 = HEAP32[$fd347>>2]|0;
      $cmp348 = ($46|0)==($add$ptr6|0);
      if ($cmp348) {
       HEAP32[$bk343>>2] = $42;
       HEAP32[$fd347>>2] = $43;
       $R332$3 = $42;
       break;
      } else {
       _abort();
       // unreachable;
      }
     }
    } while(0);
    $cmp395 = ($41|0)==(0|0);
    if (!($cmp395)) {
     $index399 = ((($add$ptr6)) + 28|0);
     $52 = HEAP32[$index399>>2]|0;
     $arrayidx400 = (19888 + ($52<<2)|0);
     $53 = HEAP32[$arrayidx400>>2]|0;
     $cmp401 = ($add$ptr6|0)==($53|0);
     do {
      if ($cmp401) {
       HEAP32[$arrayidx400>>2] = $R332$3;
       $cond293 = ($R332$3|0)==(0|0);
       if ($cond293) {
        $shl408 = 1 << $52;
        $neg409 = $shl408 ^ -1;
        $54 = HEAP32[(19588)>>2]|0;
        $and410 = $54 & $neg409;
        HEAP32[(19588)>>2] = $and410;
        break L108;
       }
      } else {
       $55 = HEAP32[(19600)>>2]|0;
       $cmp413 = ($41>>>0)<($55>>>0);
       if ($cmp413) {
        _abort();
        // unreachable;
       } else {
        $arrayidx419 = ((($41)) + 16|0);
        $56 = HEAP32[$arrayidx419>>2]|0;
        $not$cmp420 = ($56|0)!=($add$ptr6|0);
        $$sink4 = $not$cmp420&1;
        $arrayidx427 = (((($41)) + 16|0) + ($$sink4<<2)|0);
        HEAP32[$arrayidx427>>2] = $R332$3;
        $cmp432 = ($R332$3|0)==(0|0);
        if ($cmp432) {
         break L108;
        } else {
         break;
        }
       }
      }
     } while(0);
     $57 = HEAP32[(19600)>>2]|0;
     $cmp435 = ($R332$3>>>0)<($57>>>0);
     if ($cmp435) {
      _abort();
      // unreachable;
     }
     $parent442 = ((($R332$3)) + 24|0);
     HEAP32[$parent442>>2] = $41;
     $child443 = ((($add$ptr6)) + 16|0);
     $58 = HEAP32[$child443>>2]|0;
     $cmp445 = ($58|0)==(0|0);
     do {
      if (!($cmp445)) {
       $cmp448 = ($58>>>0)<($57>>>0);
       if ($cmp448) {
        _abort();
        // unreachable;
       } else {
        $arrayidx454 = ((($R332$3)) + 16|0);
        HEAP32[$arrayidx454>>2] = $58;
        $parent455 = ((($58)) + 24|0);
        HEAP32[$parent455>>2] = $R332$3;
        break;
       }
      }
     } while(0);
     $arrayidx460 = ((($child443)) + 4|0);
     $59 = HEAP32[$arrayidx460>>2]|0;
     $cmp461 = ($59|0)==(0|0);
     if (!($cmp461)) {
      $60 = HEAP32[(19600)>>2]|0;
      $cmp464 = ($59>>>0)<($60>>>0);
      if ($cmp464) {
       _abort();
       // unreachable;
      } else {
       $arrayidx470 = ((($R332$3)) + 20|0);
       HEAP32[$arrayidx470>>2] = $59;
       $parent471 = ((($59)) + 24|0);
       HEAP32[$parent471>>2] = $R332$3;
       break;
      }
     }
    }
   }
  } while(0);
  $or480 = $add267 | 1;
  $head481 = ((($p$1)) + 4|0);
  HEAP32[$head481>>2] = $or480;
  $add$ptr482 = (($28) + ($add267)|0);
  HEAP32[$add$ptr482>>2] = $add267;
  $61 = HEAP32[(19604)>>2]|0;
  $cmp484 = ($p$1|0)==($61|0);
  if ($cmp484) {
   HEAP32[(19592)>>2] = $add267;
   return;
  } else {
   $psize$2 = $add267;
  }
 } else {
  $and495 = $29 & -2;
  HEAP32[$head231>>2] = $and495;
  $or496 = $psize$1 | 1;
  $head497 = ((($p$1)) + 4|0);
  HEAP32[$head497>>2] = $or496;
  $add$ptr498 = (($28) + ($psize$1)|0);
  HEAP32[$add$ptr498>>2] = $psize$1;
  $psize$2 = $psize$1;
 }
 $shr501 = $psize$2 >>> 3;
 $cmp502 = ($psize$2>>>0)<(256);
 if ($cmp502) {
  $shl508 = $shr501 << 1;
  $arrayidx509 = (19624 + ($shl508<<2)|0);
  $62 = HEAP32[4896]|0;
  $shl511 = 1 << $shr501;
  $and512 = $62 & $shl511;
  $tobool513 = ($and512|0)==(0);
  if ($tobool513) {
   $or516 = $62 | $shl511;
   HEAP32[4896] = $or516;
   $$pre = ((($arrayidx509)) + 8|0);
   $$pre$phiZ2D = $$pre;$F510$0 = $arrayidx509;
  } else {
   $63 = ((($arrayidx509)) + 8|0);
   $64 = HEAP32[$63>>2]|0;
   $65 = HEAP32[(19600)>>2]|0;
   $cmp519 = ($64>>>0)<($65>>>0);
   if ($cmp519) {
    _abort();
    // unreachable;
   } else {
    $$pre$phiZ2D = $63;$F510$0 = $64;
   }
  }
  HEAP32[$$pre$phiZ2D>>2] = $p$1;
  $bk529 = ((($F510$0)) + 12|0);
  HEAP32[$bk529>>2] = $p$1;
  $fd530 = ((($p$1)) + 8|0);
  HEAP32[$fd530>>2] = $F510$0;
  $bk531 = ((($p$1)) + 12|0);
  HEAP32[$bk531>>2] = $arrayidx509;
  return;
 }
 $shr535 = $psize$2 >>> 8;
 $cmp536 = ($shr535|0)==(0);
 if ($cmp536) {
  $I534$0 = 0;
 } else {
  $cmp540 = ($psize$2>>>0)>(16777215);
  if ($cmp540) {
   $I534$0 = 31;
  } else {
   $sub = (($shr535) + 1048320)|0;
   $shr544 = $sub >>> 16;
   $and545 = $shr544 & 8;
   $shl546 = $shr535 << $and545;
   $sub547 = (($shl546) + 520192)|0;
   $shr548 = $sub547 >>> 16;
   $and549 = $shr548 & 4;
   $add550 = $and549 | $and545;
   $shl551 = $shl546 << $and549;
   $sub552 = (($shl551) + 245760)|0;
   $shr553 = $sub552 >>> 16;
   $and554 = $shr553 & 2;
   $add555 = $add550 | $and554;
   $sub556 = (14 - ($add555))|0;
   $shl557 = $shl551 << $and554;
   $shr558 = $shl557 >>> 15;
   $add559 = (($sub556) + ($shr558))|0;
   $shl560 = $add559 << 1;
   $add561 = (($add559) + 7)|0;
   $shr562 = $psize$2 >>> $add561;
   $and563 = $shr562 & 1;
   $add564 = $and563 | $shl560;
   $I534$0 = $add564;
  }
 }
 $arrayidx567 = (19888 + ($I534$0<<2)|0);
 $index568 = ((($p$1)) + 28|0);
 HEAP32[$index568>>2] = $I534$0;
 $child569 = ((($p$1)) + 16|0);
 $arrayidx570 = ((($p$1)) + 20|0);
 HEAP32[$arrayidx570>>2] = 0;
 HEAP32[$child569>>2] = 0;
 $66 = HEAP32[(19588)>>2]|0;
 $shl573 = 1 << $I534$0;
 $and574 = $66 & $shl573;
 $tobool575 = ($and574|0)==(0);
 do {
  if ($tobool575) {
   $or578 = $66 | $shl573;
   HEAP32[(19588)>>2] = $or578;
   HEAP32[$arrayidx567>>2] = $p$1;
   $parent579 = ((($p$1)) + 24|0);
   HEAP32[$parent579>>2] = $arrayidx567;
   $bk580 = ((($p$1)) + 12|0);
   HEAP32[$bk580>>2] = $p$1;
   $fd581 = ((($p$1)) + 8|0);
   HEAP32[$fd581>>2] = $p$1;
  } else {
   $67 = HEAP32[$arrayidx567>>2]|0;
   $cmp584 = ($I534$0|0)==(31);
   $shr586 = $I534$0 >>> 1;
   $sub589 = (25 - ($shr586))|0;
   $cond = $cmp584 ? 0 : $sub589;
   $shl590 = $psize$2 << $cond;
   $K583$0 = $shl590;$T$0 = $67;
   while(1) {
    $head591 = ((($T$0)) + 4|0);
    $68 = HEAP32[$head591>>2]|0;
    $and592 = $68 & -8;
    $cmp593 = ($and592|0)==($psize$2|0);
    if ($cmp593) {
     label = 124;
     break;
    }
    $shr597 = $K583$0 >>> 31;
    $arrayidx599 = (((($T$0)) + 16|0) + ($shr597<<2)|0);
    $shl600 = $K583$0 << 1;
    $69 = HEAP32[$arrayidx599>>2]|0;
    $cmp601 = ($69|0)==(0|0);
    if ($cmp601) {
     label = 121;
     break;
    } else {
     $K583$0 = $shl600;$T$0 = $69;
    }
   }
   if ((label|0) == 121) {
    $70 = HEAP32[(19600)>>2]|0;
    $cmp605 = ($arrayidx599>>>0)<($70>>>0);
    if ($cmp605) {
     _abort();
     // unreachable;
    } else {
     HEAP32[$arrayidx599>>2] = $p$1;
     $parent610 = ((($p$1)) + 24|0);
     HEAP32[$parent610>>2] = $T$0;
     $bk611 = ((($p$1)) + 12|0);
     HEAP32[$bk611>>2] = $p$1;
     $fd612 = ((($p$1)) + 8|0);
     HEAP32[$fd612>>2] = $p$1;
     break;
    }
   }
   else if ((label|0) == 124) {
    $fd620 = ((($T$0)) + 8|0);
    $71 = HEAP32[$fd620>>2]|0;
    $72 = HEAP32[(19600)>>2]|0;
    $cmp624 = ($71>>>0)>=($72>>>0);
    $not$cmp621 = ($T$0>>>0)>=($72>>>0);
    $73 = $cmp624 & $not$cmp621;
    if ($73) {
     $bk631 = ((($71)) + 12|0);
     HEAP32[$bk631>>2] = $p$1;
     HEAP32[$fd620>>2] = $p$1;
     $fd633 = ((($p$1)) + 8|0);
     HEAP32[$fd633>>2] = $71;
     $bk634 = ((($p$1)) + 12|0);
     HEAP32[$bk634>>2] = $T$0;
     $parent635 = ((($p$1)) + 24|0);
     HEAP32[$parent635>>2] = 0;
     break;
    } else {
     _abort();
     // unreachable;
    }
   }
  }
 } while(0);
 $74 = HEAP32[(19616)>>2]|0;
 $dec = (($74) + -1)|0;
 HEAP32[(19616)>>2] = $dec;
 $cmp640 = ($dec|0)==(0);
 if ($cmp640) {
  $sp$0$in$i = (20040);
 } else {
  return;
 }
 while(1) {
  $sp$0$i = HEAP32[$sp$0$in$i>>2]|0;
  $cmp$i = ($sp$0$i|0)==(0|0);
  $next4$i = ((($sp$0$i)) + 8|0);
  if ($cmp$i) {
   break;
  } else {
   $sp$0$in$i = $next4$i;
  }
 }
 HEAP32[(19616)>>2] = -1;
 return;
}
function _realloc($oldmem,$bytes) {
 $oldmem = $oldmem|0;
 $bytes = $bytes|0;
 var $0 = 0, $add$ptr = 0, $add$ptr10 = 0, $add6 = 0, $and = 0, $and15 = 0, $and17 = 0, $call = 0, $call12 = 0, $call3 = 0, $call7 = 0, $cmp = 0, $cmp1 = 0, $cmp13 = 0, $cmp18 = 0, $cmp20 = 0, $cmp5 = 0, $cmp8 = 0, $cond = 0, $cond19 = 0;
 var $cond24 = 0, $head = 0, $mem$1 = 0, $sub = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $cmp = ($oldmem|0)==(0|0);
 if ($cmp) {
  $call = (_malloc($bytes)|0);
  $mem$1 = $call;
  return ($mem$1|0);
 }
 $cmp1 = ($bytes>>>0)>(4294967231);
 if ($cmp1) {
  $call3 = (___errno_location()|0);
  HEAP32[$call3>>2] = 12;
  $mem$1 = 0;
  return ($mem$1|0);
 }
 $cmp5 = ($bytes>>>0)<(11);
 $add6 = (($bytes) + 11)|0;
 $and = $add6 & -8;
 $cond = $cmp5 ? 16 : $and;
 $add$ptr = ((($oldmem)) + -8|0);
 $call7 = (_try_realloc_chunk($add$ptr,$cond)|0);
 $cmp8 = ($call7|0)==(0|0);
 if (!($cmp8)) {
  $add$ptr10 = ((($call7)) + 8|0);
  $mem$1 = $add$ptr10;
  return ($mem$1|0);
 }
 $call12 = (_malloc($bytes)|0);
 $cmp13 = ($call12|0)==(0|0);
 if ($cmp13) {
  $mem$1 = 0;
  return ($mem$1|0);
 }
 $head = ((($oldmem)) + -4|0);
 $0 = HEAP32[$head>>2]|0;
 $and15 = $0 & -8;
 $and17 = $0 & 3;
 $cmp18 = ($and17|0)==(0);
 $cond19 = $cmp18 ? 8 : 4;
 $sub = (($and15) - ($cond19))|0;
 $cmp20 = ($sub>>>0)<($bytes>>>0);
 $cond24 = $cmp20 ? $sub : $bytes;
 _memcpy(($call12|0),($oldmem|0),($cond24|0))|0;
 _free($oldmem);
 $mem$1 = $call12;
 return ($mem$1|0);
}
function _try_realloc_chunk($p,$nb) {
 $p = $p|0;
 $nb = $nb|0;
 var $$pre = 0, $$sink = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $R$1 = 0, $R$3 = 0;
 var $RP$1 = 0, $add = 0, $add$i = 0, $add$ptr = 0, $add$ptr17 = 0, $add$ptr298 = 0, $add$ptr30 = 0, $add$ptr303 = 0, $add$ptr317 = 0, $add$ptr41 = 0, $add$ptr66 = 0, $add$ptr67 = 0, $add$ptr91 = 0, $add105 = 0, $add58 = 0, $and = 0, $and100 = 0, $and104 = 0, $and128 = 0, $and19 = 0;
 var $and2 = 0, $and216 = 0, $and294 = 0, $and43 = 0, $and69 = 0, $and7 = 0, $and80 = 0, $arrayidx = 0, $arrayidx179 = 0, $arrayidx186 = 0, $arrayidx190 = 0, $arrayidx206 = 0, $arrayidx226 = 0, $arrayidx234 = 0, $arrayidx261 = 0, $arrayidx267 = 0, $arrayidx278 = 0, $bk = 0, $bk118 = 0, $bk147 = 0;
 var $bk155 = 0, $bk164 = 0, $child = 0, $child249 = 0, $cmp$i = 0, $cmp1$i = 0, $cmp106 = 0, $cmp11 = 0, $cmp111 = 0, $cmp114 = 0, $cmp116 = 0, $cmp119 = 0, $cmp125 = 0, $cmp13 = 0, $cmp133 = 0, $cmp136 = 0, $cmp139 = 0, $cmp15 = 0, $cmp156 = 0, $cmp162 = 0;
 var $cmp165 = 0, $cmp168 = 0, $cmp180 = 0, $cmp183 = 0, $cmp187 = 0, $cmp191 = 0, $cmp195 = 0, $cmp2$i = 0, $cmp203 = 0, $cmp207 = 0, $cmp220 = 0, $cmp239 = 0, $cmp243 = 0, $cmp251 = 0, $cmp255 = 0, $cmp268 = 0, $cmp272 = 0, $cmp288 = 0, $cmp34 = 0, $cmp36 = 0;
 var $cmp5 = 0, $cmp56 = 0, $cmp59 = 0, $cmp63 = 0, $cond = 0, $fd = 0, $fd138 = 0, $fd148$pre$phiZ2D = 0, $fd159 = 0, $fd167 = 0, $head = 0, $head23 = 0, $head299 = 0, $head31 = 0, $head310 = 0, $head318 = 0, $head48 = 0, $head6 = 0, $head74 = 0, $head79 = 0;
 var $head92 = 0, $index = 0, $neg = 0, $neg215 = 0, $newp$2 = 0, $not$cmp227 = 0, $notlhs = 0, $notrhs = 0, $or = 0, $or$cond$not = 0, $or$cond2 = 0, $or20 = 0, $or28 = 0, $or295 = 0, $or296 = 0, $or300 = 0, $or306 = 0, $or307 = 0, $or315 = 0, $or319 = 0;
 var $or32 = 0, $or44 = 0, $or45 = 0, $or50 = 0, $or70 = 0, $or71 = 0, $or76 = 0, $or88 = 0, $or89 = 0, $or93 = 0, $parent = 0, $parent248 = 0, $parent262 = 0, $parent279 = 0, $shl = 0, $shl$i = 0, $shl127 = 0, $shl214 = 0, $shr = 0, $storemerge = 0;
 var $storemerge1 = 0, $sub = 0, $sub$i = 0, $sub110 = 0, $sub40 = 0, $sub62 = 0, $tobool = 0, $tobool101 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $head = ((($p)) + 4|0);
 $0 = HEAP32[$head>>2]|0;
 $and = $0 & -8;
 $add$ptr = (($p) + ($and)|0);
 $1 = HEAP32[(19600)>>2]|0;
 $and2 = $0 & 3;
 $notlhs = ($p>>>0)>=($1>>>0);
 $notrhs = ($and2|0)!=(1);
 $or$cond$not = $notrhs & $notlhs;
 $cmp5 = ($p>>>0)<($add$ptr>>>0);
 $or$cond2 = $or$cond$not & $cmp5;
 if (!($or$cond2)) {
  _abort();
  // unreachable;
 }
 $head6 = ((($add$ptr)) + 4|0);
 $2 = HEAP32[$head6>>2]|0;
 $and7 = $2 & 1;
 $tobool = ($and7|0)==(0);
 if ($tobool) {
  _abort();
  // unreachable;
 }
 $cmp11 = ($and2|0)==(0);
 if ($cmp11) {
  $cmp$i = ($nb>>>0)<(256);
  if ($cmp$i) {
   $newp$2 = 0;
   return ($newp$2|0);
  }
  $add$i = (($nb) + 4)|0;
  $cmp1$i = ($and>>>0)<($add$i>>>0);
  if (!($cmp1$i)) {
   $sub$i = (($and) - ($nb))|0;
   $3 = HEAP32[(20064)>>2]|0;
   $shl$i = $3 << 1;
   $cmp2$i = ($sub$i>>>0)>($shl$i>>>0);
   if (!($cmp2$i)) {
    $newp$2 = $p;
    return ($newp$2|0);
   }
  }
  $newp$2 = 0;
  return ($newp$2|0);
 }
 $cmp13 = ($and>>>0)<($nb>>>0);
 if (!($cmp13)) {
  $sub = (($and) - ($nb))|0;
  $cmp15 = ($sub>>>0)>(15);
  if (!($cmp15)) {
   $newp$2 = $p;
   return ($newp$2|0);
  }
  $add$ptr17 = (($p) + ($nb)|0);
  $and19 = $0 & 1;
  $or = $and19 | $nb;
  $or20 = $or | 2;
  HEAP32[$head>>2] = $or20;
  $head23 = ((($add$ptr17)) + 4|0);
  $or28 = $sub | 3;
  HEAP32[$head23>>2] = $or28;
  $add$ptr30 = (($add$ptr17) + ($sub)|0);
  $head31 = ((($add$ptr30)) + 4|0);
  $4 = HEAP32[$head31>>2]|0;
  $or32 = $4 | 1;
  HEAP32[$head31>>2] = $or32;
  _dispose_chunk($add$ptr17,$sub);
  $newp$2 = $p;
  return ($newp$2|0);
 }
 $5 = HEAP32[(19608)>>2]|0;
 $cmp34 = ($add$ptr|0)==($5|0);
 if ($cmp34) {
  $6 = HEAP32[(19596)>>2]|0;
  $add = (($6) + ($and))|0;
  $cmp36 = ($add>>>0)>($nb>>>0);
  $sub40 = (($add) - ($nb))|0;
  $add$ptr41 = (($p) + ($nb)|0);
  if (!($cmp36)) {
   $newp$2 = 0;
   return ($newp$2|0);
  }
  $or50 = $sub40 | 1;
  $head48 = ((($add$ptr41)) + 4|0);
  $and43 = $0 & 1;
  $or44 = $and43 | $nb;
  $or45 = $or44 | 2;
  HEAP32[$head>>2] = $or45;
  HEAP32[$head48>>2] = $or50;
  HEAP32[(19608)>>2] = $add$ptr41;
  HEAP32[(19596)>>2] = $sub40;
  $newp$2 = $p;
  return ($newp$2|0);
 }
 $7 = HEAP32[(19604)>>2]|0;
 $cmp56 = ($add$ptr|0)==($7|0);
 if ($cmp56) {
  $8 = HEAP32[(19592)>>2]|0;
  $add58 = (($8) + ($and))|0;
  $cmp59 = ($add58>>>0)<($nb>>>0);
  if ($cmp59) {
   $newp$2 = 0;
   return ($newp$2|0);
  }
  $sub62 = (($add58) - ($nb))|0;
  $cmp63 = ($sub62>>>0)>(15);
  $and69 = $0 & 1;
  if ($cmp63) {
   $add$ptr66 = (($p) + ($nb)|0);
   $add$ptr67 = (($add$ptr66) + ($sub62)|0);
   $or70 = $and69 | $nb;
   $or71 = $or70 | 2;
   HEAP32[$head>>2] = $or71;
   $head74 = ((($add$ptr66)) + 4|0);
   $or76 = $sub62 | 1;
   HEAP32[$head74>>2] = $or76;
   HEAP32[$add$ptr67>>2] = $sub62;
   $head79 = ((($add$ptr67)) + 4|0);
   $9 = HEAP32[$head79>>2]|0;
   $and80 = $9 & -2;
   HEAP32[$head79>>2] = $and80;
   $storemerge = $add$ptr66;$storemerge1 = $sub62;
  } else {
   $or88 = $and69 | $add58;
   $or89 = $or88 | 2;
   HEAP32[$head>>2] = $or89;
   $add$ptr91 = (($p) + ($add58)|0);
   $head92 = ((($add$ptr91)) + 4|0);
   $10 = HEAP32[$head92>>2]|0;
   $or93 = $10 | 1;
   HEAP32[$head92>>2] = $or93;
   $storemerge = 0;$storemerge1 = 0;
  }
  HEAP32[(19592)>>2] = $storemerge1;
  HEAP32[(19604)>>2] = $storemerge;
  $newp$2 = $p;
  return ($newp$2|0);
 }
 $and100 = $2 & 2;
 $tobool101 = ($and100|0)==(0);
 if (!($tobool101)) {
  $newp$2 = 0;
  return ($newp$2|0);
 }
 $and104 = $2 & -8;
 $add105 = (($and104) + ($and))|0;
 $cmp106 = ($add105>>>0)<($nb>>>0);
 if ($cmp106) {
  $newp$2 = 0;
  return ($newp$2|0);
 }
 $sub110 = (($add105) - ($nb))|0;
 $shr = $2 >>> 3;
 $cmp111 = ($2>>>0)<(256);
 L49: do {
  if ($cmp111) {
   $fd = ((($add$ptr)) + 8|0);
   $11 = HEAP32[$fd>>2]|0;
   $bk = ((($add$ptr)) + 12|0);
   $12 = HEAP32[$bk>>2]|0;
   $shl = $shr << 1;
   $arrayidx = (19624 + ($shl<<2)|0);
   $cmp114 = ($11|0)==($arrayidx|0);
   if (!($cmp114)) {
    $cmp116 = ($11>>>0)<($1>>>0);
    if ($cmp116) {
     _abort();
     // unreachable;
    }
    $bk118 = ((($11)) + 12|0);
    $13 = HEAP32[$bk118>>2]|0;
    $cmp119 = ($13|0)==($add$ptr|0);
    if (!($cmp119)) {
     _abort();
     // unreachable;
    }
   }
   $cmp125 = ($12|0)==($11|0);
   if ($cmp125) {
    $shl127 = 1 << $shr;
    $neg = $shl127 ^ -1;
    $14 = HEAP32[4896]|0;
    $and128 = $14 & $neg;
    HEAP32[4896] = $and128;
    break;
   }
   $cmp133 = ($12|0)==($arrayidx|0);
   if ($cmp133) {
    $$pre = ((($12)) + 8|0);
    $fd148$pre$phiZ2D = $$pre;
   } else {
    $cmp136 = ($12>>>0)<($1>>>0);
    if ($cmp136) {
     _abort();
     // unreachable;
    }
    $fd138 = ((($12)) + 8|0);
    $15 = HEAP32[$fd138>>2]|0;
    $cmp139 = ($15|0)==($add$ptr|0);
    if ($cmp139) {
     $fd148$pre$phiZ2D = $fd138;
    } else {
     _abort();
     // unreachable;
    }
   }
   $bk147 = ((($11)) + 12|0);
   HEAP32[$bk147>>2] = $12;
   HEAP32[$fd148$pre$phiZ2D>>2] = $11;
  } else {
   $parent = ((($add$ptr)) + 24|0);
   $16 = HEAP32[$parent>>2]|0;
   $bk155 = ((($add$ptr)) + 12|0);
   $17 = HEAP32[$bk155>>2]|0;
   $cmp156 = ($17|0)==($add$ptr|0);
   do {
    if ($cmp156) {
     $child = ((($add$ptr)) + 16|0);
     $arrayidx179 = ((($child)) + 4|0);
     $21 = HEAP32[$arrayidx179>>2]|0;
     $cmp180 = ($21|0)==(0|0);
     if ($cmp180) {
      $22 = HEAP32[$child>>2]|0;
      $cmp183 = ($22|0)==(0|0);
      if ($cmp183) {
       $R$3 = 0;
       break;
      } else {
       $R$1 = $22;$RP$1 = $child;
      }
     } else {
      $R$1 = $21;$RP$1 = $arrayidx179;
     }
     while(1) {
      $arrayidx186 = ((($R$1)) + 20|0);
      $23 = HEAP32[$arrayidx186>>2]|0;
      $cmp187 = ($23|0)==(0|0);
      if (!($cmp187)) {
       $R$1 = $23;$RP$1 = $arrayidx186;
       continue;
      }
      $arrayidx190 = ((($R$1)) + 16|0);
      $24 = HEAP32[$arrayidx190>>2]|0;
      $cmp191 = ($24|0)==(0|0);
      if ($cmp191) {
       break;
      } else {
       $R$1 = $24;$RP$1 = $arrayidx190;
      }
     }
     $cmp195 = ($RP$1>>>0)<($1>>>0);
     if ($cmp195) {
      _abort();
      // unreachable;
     } else {
      HEAP32[$RP$1>>2] = 0;
      $R$3 = $R$1;
      break;
     }
    } else {
     $fd159 = ((($add$ptr)) + 8|0);
     $18 = HEAP32[$fd159>>2]|0;
     $cmp162 = ($18>>>0)<($1>>>0);
     if ($cmp162) {
      _abort();
      // unreachable;
     }
     $bk164 = ((($18)) + 12|0);
     $19 = HEAP32[$bk164>>2]|0;
     $cmp165 = ($19|0)==($add$ptr|0);
     if (!($cmp165)) {
      _abort();
      // unreachable;
     }
     $fd167 = ((($17)) + 8|0);
     $20 = HEAP32[$fd167>>2]|0;
     $cmp168 = ($20|0)==($add$ptr|0);
     if ($cmp168) {
      HEAP32[$bk164>>2] = $17;
      HEAP32[$fd167>>2] = $18;
      $R$3 = $17;
      break;
     } else {
      _abort();
      // unreachable;
     }
    }
   } while(0);
   $cmp203 = ($16|0)==(0|0);
   if (!($cmp203)) {
    $index = ((($add$ptr)) + 28|0);
    $25 = HEAP32[$index>>2]|0;
    $arrayidx206 = (19888 + ($25<<2)|0);
    $26 = HEAP32[$arrayidx206>>2]|0;
    $cmp207 = ($add$ptr|0)==($26|0);
    do {
     if ($cmp207) {
      HEAP32[$arrayidx206>>2] = $R$3;
      $cond = ($R$3|0)==(0|0);
      if ($cond) {
       $shl214 = 1 << $25;
       $neg215 = $shl214 ^ -1;
       $27 = HEAP32[(19588)>>2]|0;
       $and216 = $27 & $neg215;
       HEAP32[(19588)>>2] = $and216;
       break L49;
      }
     } else {
      $28 = HEAP32[(19600)>>2]|0;
      $cmp220 = ($16>>>0)<($28>>>0);
      if ($cmp220) {
       _abort();
       // unreachable;
      } else {
       $arrayidx226 = ((($16)) + 16|0);
       $29 = HEAP32[$arrayidx226>>2]|0;
       $not$cmp227 = ($29|0)!=($add$ptr|0);
       $$sink = $not$cmp227&1;
       $arrayidx234 = (((($16)) + 16|0) + ($$sink<<2)|0);
       HEAP32[$arrayidx234>>2] = $R$3;
       $cmp239 = ($R$3|0)==(0|0);
       if ($cmp239) {
        break L49;
       } else {
        break;
       }
      }
     }
    } while(0);
    $30 = HEAP32[(19600)>>2]|0;
    $cmp243 = ($R$3>>>0)<($30>>>0);
    if ($cmp243) {
     _abort();
     // unreachable;
    }
    $parent248 = ((($R$3)) + 24|0);
    HEAP32[$parent248>>2] = $16;
    $child249 = ((($add$ptr)) + 16|0);
    $31 = HEAP32[$child249>>2]|0;
    $cmp251 = ($31|0)==(0|0);
    do {
     if (!($cmp251)) {
      $cmp255 = ($31>>>0)<($30>>>0);
      if ($cmp255) {
       _abort();
       // unreachable;
      } else {
       $arrayidx261 = ((($R$3)) + 16|0);
       HEAP32[$arrayidx261>>2] = $31;
       $parent262 = ((($31)) + 24|0);
       HEAP32[$parent262>>2] = $R$3;
       break;
      }
     }
    } while(0);
    $arrayidx267 = ((($child249)) + 4|0);
    $32 = HEAP32[$arrayidx267>>2]|0;
    $cmp268 = ($32|0)==(0|0);
    if (!($cmp268)) {
     $33 = HEAP32[(19600)>>2]|0;
     $cmp272 = ($32>>>0)<($33>>>0);
     if ($cmp272) {
      _abort();
      // unreachable;
     } else {
      $arrayidx278 = ((($R$3)) + 20|0);
      HEAP32[$arrayidx278>>2] = $32;
      $parent279 = ((($32)) + 24|0);
      HEAP32[$parent279>>2] = $R$3;
      break;
     }
    }
   }
  }
 } while(0);
 $cmp288 = ($sub110>>>0)<(16);
 $and294 = $0 & 1;
 if ($cmp288) {
  $or295 = $add105 | $and294;
  $or296 = $or295 | 2;
  HEAP32[$head>>2] = $or296;
  $add$ptr298 = (($p) + ($add105)|0);
  $head299 = ((($add$ptr298)) + 4|0);
  $34 = HEAP32[$head299>>2]|0;
  $or300 = $34 | 1;
  HEAP32[$head299>>2] = $or300;
  $newp$2 = $p;
  return ($newp$2|0);
 } else {
  $add$ptr303 = (($p) + ($nb)|0);
  $or306 = $and294 | $nb;
  $or307 = $or306 | 2;
  HEAP32[$head>>2] = $or307;
  $head310 = ((($add$ptr303)) + 4|0);
  $or315 = $sub110 | 3;
  HEAP32[$head310>>2] = $or315;
  $add$ptr317 = (($add$ptr303) + ($sub110)|0);
  $head318 = ((($add$ptr317)) + 4|0);
  $35 = HEAP32[$head318>>2]|0;
  $or319 = $35 | 1;
  HEAP32[$head318>>2] = $or319;
  _dispose_chunk($add$ptr303,$sub110);
  $newp$2 = $p;
  return ($newp$2|0);
 }
 return (0)|0;
}
function _dispose_chunk($p,$psize) {
 $p = $p|0;
 $psize = $psize|0;
 var $$pre = 0, $$pre$phiZ2D = 0, $$pre8 = 0, $$pre9 = 0, $$sink = 0, $$sink3 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0;
 var $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $8 = 0, $9 = 0, $F517$0 = 0, $I545$0 = 0, $K597$0 = 0, $R$1 = 0;
 var $R$3 = 0, $R328$1 = 0, $R328$3 = 0, $RP$1 = 0, $RP357$1 = 0, $T$0 = 0, $add$ptr = 0, $add$ptr209 = 0, $add$ptr252 = 0, $add$ptr486 = 0, $add$ptr5 = 0, $add$ptr504 = 0, $add230 = 0, $add248 = 0, $add258 = 0, $add561 = 0, $add566 = 0, $add570 = 0, $add572 = 0, $add575 = 0;
 var $add6 = 0, $and = 0, $and128 = 0, $and2 = 0, $and202 = 0, $and207 = 0, $and224 = 0, $and257 = 0, $and295 = 0, $and32 = 0, $and410 = 0, $and501 = 0, $and520 = 0, $and556 = 0, $and560 = 0, $and565 = 0, $and574 = 0, $and587 = 0, $and606 = 0, $arrayidx = 0;
 var $arrayidx100 = 0, $arrayidx118 = 0, $arrayidx138 = 0, $arrayidx146 = 0, $arrayidx173 = 0, $arrayidx179 = 0, $arrayidx190 = 0, $arrayidx271 = 0, $arrayidx359 = 0, $arrayidx371 = 0, $arrayidx376 = 0, $arrayidx399 = 0, $arrayidx420 = 0, $arrayidx428 = 0, $arrayidx457 = 0, $arrayidx463 = 0, $arrayidx474 = 0, $arrayidx516 = 0, $arrayidx579 = 0, $arrayidx582 = 0;
 var $arrayidx613 = 0, $arrayidx86 = 0, $arrayidx95 = 0, $bk = 0, $bk22 = 0, $bk266 = 0, $bk279 = 0, $bk317 = 0, $bk329 = 0, $bk340 = 0, $bk52 = 0, $bk539 = 0, $bk541 = 0, $bk594 = 0, $bk60 = 0, $bk626 = 0, $bk648 = 0, $bk651 = 0, $bk70 = 0, $child = 0;
 var $child161 = 0, $child358 = 0, $child445 = 0, $child581 = 0, $cmp = 0, $cmp10 = 0, $cmp101 = 0, $cmp106 = 0, $cmp115 = 0, $cmp119 = 0, $cmp13 = 0, $cmp132 = 0, $cmp151 = 0, $cmp155 = 0, $cmp163 = 0, $cmp167 = 0, $cmp17 = 0, $cmp180 = 0, $cmp184 = 0, $cmp20 = 0;
 var $cmp203 = 0, $cmp218 = 0, $cmp227 = 0, $cmp23 = 0, $cmp235 = 0, $cmp244 = 0, $cmp260 = 0, $cmp272 = 0, $cmp276 = 0, $cmp28 = 0, $cmp280 = 0, $cmp289 = 0, $cmp300 = 0, $cmp304 = 0, $cmp308 = 0, $cmp330 = 0, $cmp337 = 0, $cmp341 = 0, $cmp345 = 0, $cmp36 = 0;
 var $cmp360 = 0, $cmp365 = 0, $cmp372 = 0, $cmp377 = 0, $cmp384 = 0, $cmp393 = 0, $cmp40 = 0, $cmp400 = 0, $cmp414 = 0, $cmp433 = 0, $cmp437 = 0, $cmp44 = 0, $cmp447 = 0, $cmp451 = 0, $cmp464 = 0, $cmp468 = 0, $cmp489 = 0, $cmp508 = 0, $cmp529 = 0, $cmp547 = 0;
 var $cmp551 = 0, $cmp598 = 0, $cmp607 = 0, $cmp61 = 0, $cmp615 = 0, $cmp620 = 0, $cmp641 = 0, $cmp68 = 0, $cmp7 = 0, $cmp71 = 0, $cmp75 = 0, $cmp87 = 0, $cmp91 = 0, $cmp96 = 0, $cond = 0, $cond4 = 0, $cond5 = 0, $fd = 0, $fd264 = 0, $fd307 = 0;
 var $fd318$pre$phiZ2D = 0, $fd334 = 0, $fd344 = 0, $fd43 = 0, $fd53$pre$phiZ2D = 0, $fd540 = 0, $fd595 = 0, $fd627 = 0, $fd635 = 0, $fd65 = 0, $fd650 = 0, $fd74 = 0, $head = 0, $head201 = 0, $head208 = 0, $head223 = 0, $head233 = 0, $head251 = 0, $head485 = 0, $head503 = 0;
 var $head605 = 0, $idx$neg = 0, $index = 0, $index398 = 0, $index580 = 0, $neg = 0, $neg127 = 0, $neg293 = 0, $neg408 = 0, $not$cmp139 = 0, $not$cmp421 = 0, $not$cmp637 = 0, $or = 0, $or232 = 0, $or250 = 0, $or484 = 0, $or502 = 0, $or525 = 0, $or592 = 0, $p$addr$1 = 0;
 var $parent = 0, $parent160 = 0, $parent174 = 0, $parent191 = 0, $parent327 = 0, $parent444 = 0, $parent458 = 0, $parent475 = 0, $parent593 = 0, $parent625 = 0, $parent652 = 0, $psize$addr$1 = 0, $psize$addr$2 = 0, $shl = 0, $shl126 = 0, $shl270 = 0, $shl292 = 0, $shl31 = 0, $shl407 = 0, $shl515 = 0;
 var $shl519 = 0, $shl557 = 0, $shl562 = 0, $shl568 = 0, $shl571 = 0, $shl586 = 0, $shl604 = 0, $shl614 = 0, $shr = 0, $shr259 = 0, $shr507 = 0, $shr546 = 0, $shr555 = 0, $shr559 = 0, $shr564 = 0, $shr569 = 0, $shr573 = 0, $shr600 = 0, $shr611 = 0, $sub = 0;
 var $sub558 = 0, $sub563 = 0, $sub567 = 0, $sub603 = 0, $tobool = 0, $tobool225 = 0, $tobool521 = 0, $tobool588 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $add$ptr = (($p) + ($psize)|0);
 $head = ((($p)) + 4|0);
 $0 = HEAP32[$head>>2]|0;
 $and = $0 & 1;
 $tobool = ($and|0)==(0);
 L1: do {
  if ($tobool) {
   $1 = HEAP32[$p>>2]|0;
   $and2 = $0 & 3;
   $cmp = ($and2|0)==(0);
   if ($cmp) {
    return;
   }
   $idx$neg = (0 - ($1))|0;
   $add$ptr5 = (($p) + ($idx$neg)|0);
   $add6 = (($1) + ($psize))|0;
   $2 = HEAP32[(19600)>>2]|0;
   $cmp7 = ($add$ptr5>>>0)<($2>>>0);
   if ($cmp7) {
    _abort();
    // unreachable;
   }
   $3 = HEAP32[(19604)>>2]|0;
   $cmp10 = ($add$ptr5|0)==($3|0);
   if ($cmp10) {
    $head201 = ((($add$ptr)) + 4|0);
    $27 = HEAP32[$head201>>2]|0;
    $and202 = $27 & 3;
    $cmp203 = ($and202|0)==(3);
    if (!($cmp203)) {
     $p$addr$1 = $add$ptr5;$psize$addr$1 = $add6;
     break;
    }
    $add$ptr209 = (($add$ptr5) + ($add6)|0);
    $head208 = ((($add$ptr5)) + 4|0);
    $or = $add6 | 1;
    $and207 = $27 & -2;
    HEAP32[(19592)>>2] = $add6;
    HEAP32[$head201>>2] = $and207;
    HEAP32[$head208>>2] = $or;
    HEAP32[$add$ptr209>>2] = $add6;
    return;
   }
   $shr = $1 >>> 3;
   $cmp13 = ($1>>>0)<(256);
   if ($cmp13) {
    $fd = ((($add$ptr5)) + 8|0);
    $4 = HEAP32[$fd>>2]|0;
    $bk = ((($add$ptr5)) + 12|0);
    $5 = HEAP32[$bk>>2]|0;
    $shl = $shr << 1;
    $arrayidx = (19624 + ($shl<<2)|0);
    $cmp17 = ($4|0)==($arrayidx|0);
    if (!($cmp17)) {
     $cmp20 = ($4>>>0)<($2>>>0);
     if ($cmp20) {
      _abort();
      // unreachable;
     }
     $bk22 = ((($4)) + 12|0);
     $6 = HEAP32[$bk22>>2]|0;
     $cmp23 = ($6|0)==($add$ptr5|0);
     if (!($cmp23)) {
      _abort();
      // unreachable;
     }
    }
    $cmp28 = ($5|0)==($4|0);
    if ($cmp28) {
     $shl31 = 1 << $shr;
     $neg = $shl31 ^ -1;
     $7 = HEAP32[4896]|0;
     $and32 = $7 & $neg;
     HEAP32[4896] = $and32;
     $p$addr$1 = $add$ptr5;$psize$addr$1 = $add6;
     break;
    }
    $cmp36 = ($5|0)==($arrayidx|0);
    if ($cmp36) {
     $$pre9 = ((($5)) + 8|0);
     $fd53$pre$phiZ2D = $$pre9;
    } else {
     $cmp40 = ($5>>>0)<($2>>>0);
     if ($cmp40) {
      _abort();
      // unreachable;
     }
     $fd43 = ((($5)) + 8|0);
     $8 = HEAP32[$fd43>>2]|0;
     $cmp44 = ($8|0)==($add$ptr5|0);
     if ($cmp44) {
      $fd53$pre$phiZ2D = $fd43;
     } else {
      _abort();
      // unreachable;
     }
    }
    $bk52 = ((($4)) + 12|0);
    HEAP32[$bk52>>2] = $5;
    HEAP32[$fd53$pre$phiZ2D>>2] = $4;
    $p$addr$1 = $add$ptr5;$psize$addr$1 = $add6;
    break;
   }
   $parent = ((($add$ptr5)) + 24|0);
   $9 = HEAP32[$parent>>2]|0;
   $bk60 = ((($add$ptr5)) + 12|0);
   $10 = HEAP32[$bk60>>2]|0;
   $cmp61 = ($10|0)==($add$ptr5|0);
   do {
    if ($cmp61) {
     $child = ((($add$ptr5)) + 16|0);
     $arrayidx86 = ((($child)) + 4|0);
     $14 = HEAP32[$arrayidx86>>2]|0;
     $cmp87 = ($14|0)==(0|0);
     if ($cmp87) {
      $15 = HEAP32[$child>>2]|0;
      $cmp91 = ($15|0)==(0|0);
      if ($cmp91) {
       $R$3 = 0;
       break;
      } else {
       $R$1 = $15;$RP$1 = $child;
      }
     } else {
      $R$1 = $14;$RP$1 = $arrayidx86;
     }
     while(1) {
      $arrayidx95 = ((($R$1)) + 20|0);
      $16 = HEAP32[$arrayidx95>>2]|0;
      $cmp96 = ($16|0)==(0|0);
      if (!($cmp96)) {
       $R$1 = $16;$RP$1 = $arrayidx95;
       continue;
      }
      $arrayidx100 = ((($R$1)) + 16|0);
      $17 = HEAP32[$arrayidx100>>2]|0;
      $cmp101 = ($17|0)==(0|0);
      if ($cmp101) {
       break;
      } else {
       $R$1 = $17;$RP$1 = $arrayidx100;
      }
     }
     $cmp106 = ($RP$1>>>0)<($2>>>0);
     if ($cmp106) {
      _abort();
      // unreachable;
     } else {
      HEAP32[$RP$1>>2] = 0;
      $R$3 = $R$1;
      break;
     }
    } else {
     $fd65 = ((($add$ptr5)) + 8|0);
     $11 = HEAP32[$fd65>>2]|0;
     $cmp68 = ($11>>>0)<($2>>>0);
     if ($cmp68) {
      _abort();
      // unreachable;
     }
     $bk70 = ((($11)) + 12|0);
     $12 = HEAP32[$bk70>>2]|0;
     $cmp71 = ($12|0)==($add$ptr5|0);
     if (!($cmp71)) {
      _abort();
      // unreachable;
     }
     $fd74 = ((($10)) + 8|0);
     $13 = HEAP32[$fd74>>2]|0;
     $cmp75 = ($13|0)==($add$ptr5|0);
     if ($cmp75) {
      HEAP32[$bk70>>2] = $10;
      HEAP32[$fd74>>2] = $11;
      $R$3 = $10;
      break;
     } else {
      _abort();
      // unreachable;
     }
    }
   } while(0);
   $cmp115 = ($9|0)==(0|0);
   if ($cmp115) {
    $p$addr$1 = $add$ptr5;$psize$addr$1 = $add6;
   } else {
    $index = ((($add$ptr5)) + 28|0);
    $18 = HEAP32[$index>>2]|0;
    $arrayidx118 = (19888 + ($18<<2)|0);
    $19 = HEAP32[$arrayidx118>>2]|0;
    $cmp119 = ($add$ptr5|0)==($19|0);
    do {
     if ($cmp119) {
      HEAP32[$arrayidx118>>2] = $R$3;
      $cond4 = ($R$3|0)==(0|0);
      if ($cond4) {
       $shl126 = 1 << $18;
       $neg127 = $shl126 ^ -1;
       $20 = HEAP32[(19588)>>2]|0;
       $and128 = $20 & $neg127;
       HEAP32[(19588)>>2] = $and128;
       $p$addr$1 = $add$ptr5;$psize$addr$1 = $add6;
       break L1;
      }
     } else {
      $21 = HEAP32[(19600)>>2]|0;
      $cmp132 = ($9>>>0)<($21>>>0);
      if ($cmp132) {
       _abort();
       // unreachable;
      } else {
       $arrayidx138 = ((($9)) + 16|0);
       $22 = HEAP32[$arrayidx138>>2]|0;
       $not$cmp139 = ($22|0)!=($add$ptr5|0);
       $$sink = $not$cmp139&1;
       $arrayidx146 = (((($9)) + 16|0) + ($$sink<<2)|0);
       HEAP32[$arrayidx146>>2] = $R$3;
       $cmp151 = ($R$3|0)==(0|0);
       if ($cmp151) {
        $p$addr$1 = $add$ptr5;$psize$addr$1 = $add6;
        break L1;
       } else {
        break;
       }
      }
     }
    } while(0);
    $23 = HEAP32[(19600)>>2]|0;
    $cmp155 = ($R$3>>>0)<($23>>>0);
    if ($cmp155) {
     _abort();
     // unreachable;
    }
    $parent160 = ((($R$3)) + 24|0);
    HEAP32[$parent160>>2] = $9;
    $child161 = ((($add$ptr5)) + 16|0);
    $24 = HEAP32[$child161>>2]|0;
    $cmp163 = ($24|0)==(0|0);
    do {
     if (!($cmp163)) {
      $cmp167 = ($24>>>0)<($23>>>0);
      if ($cmp167) {
       _abort();
       // unreachable;
      } else {
       $arrayidx173 = ((($R$3)) + 16|0);
       HEAP32[$arrayidx173>>2] = $24;
       $parent174 = ((($24)) + 24|0);
       HEAP32[$parent174>>2] = $R$3;
       break;
      }
     }
    } while(0);
    $arrayidx179 = ((($child161)) + 4|0);
    $25 = HEAP32[$arrayidx179>>2]|0;
    $cmp180 = ($25|0)==(0|0);
    if ($cmp180) {
     $p$addr$1 = $add$ptr5;$psize$addr$1 = $add6;
    } else {
     $26 = HEAP32[(19600)>>2]|0;
     $cmp184 = ($25>>>0)<($26>>>0);
     if ($cmp184) {
      _abort();
      // unreachable;
     } else {
      $arrayidx190 = ((($R$3)) + 20|0);
      HEAP32[$arrayidx190>>2] = $25;
      $parent191 = ((($25)) + 24|0);
      HEAP32[$parent191>>2] = $R$3;
      $p$addr$1 = $add$ptr5;$psize$addr$1 = $add6;
      break;
     }
    }
   }
  } else {
   $p$addr$1 = $p;$psize$addr$1 = $psize;
  }
 } while(0);
 $28 = HEAP32[(19600)>>2]|0;
 $cmp218 = ($add$ptr>>>0)<($28>>>0);
 if ($cmp218) {
  _abort();
  // unreachable;
 }
 $head223 = ((($add$ptr)) + 4|0);
 $29 = HEAP32[$head223>>2]|0;
 $and224 = $29 & 2;
 $tobool225 = ($and224|0)==(0);
 if ($tobool225) {
  $30 = HEAP32[(19608)>>2]|0;
  $cmp227 = ($add$ptr|0)==($30|0);
  $31 = HEAP32[(19604)>>2]|0;
  if ($cmp227) {
   $32 = HEAP32[(19596)>>2]|0;
   $add230 = (($32) + ($psize$addr$1))|0;
   HEAP32[(19596)>>2] = $add230;
   HEAP32[(19608)>>2] = $p$addr$1;
   $or232 = $add230 | 1;
   $head233 = ((($p$addr$1)) + 4|0);
   HEAP32[$head233>>2] = $or232;
   $cmp235 = ($p$addr$1|0)==($31|0);
   if (!($cmp235)) {
    return;
   }
   HEAP32[(19604)>>2] = 0;
   HEAP32[(19592)>>2] = 0;
   return;
  }
  $cmp244 = ($add$ptr|0)==($31|0);
  if ($cmp244) {
   $33 = HEAP32[(19592)>>2]|0;
   $add248 = (($33) + ($psize$addr$1))|0;
   HEAP32[(19592)>>2] = $add248;
   HEAP32[(19604)>>2] = $p$addr$1;
   $or250 = $add248 | 1;
   $head251 = ((($p$addr$1)) + 4|0);
   HEAP32[$head251>>2] = $or250;
   $add$ptr252 = (($p$addr$1) + ($add248)|0);
   HEAP32[$add$ptr252>>2] = $add248;
   return;
  }
  $and257 = $29 & -8;
  $add258 = (($and257) + ($psize$addr$1))|0;
  $shr259 = $29 >>> 3;
  $cmp260 = ($29>>>0)<(256);
  L96: do {
   if ($cmp260) {
    $fd264 = ((($add$ptr)) + 8|0);
    $34 = HEAP32[$fd264>>2]|0;
    $bk266 = ((($add$ptr)) + 12|0);
    $35 = HEAP32[$bk266>>2]|0;
    $shl270 = $shr259 << 1;
    $arrayidx271 = (19624 + ($shl270<<2)|0);
    $cmp272 = ($34|0)==($arrayidx271|0);
    if (!($cmp272)) {
     $cmp276 = ($34>>>0)<($28>>>0);
     if ($cmp276) {
      _abort();
      // unreachable;
     }
     $bk279 = ((($34)) + 12|0);
     $36 = HEAP32[$bk279>>2]|0;
     $cmp280 = ($36|0)==($add$ptr|0);
     if (!($cmp280)) {
      _abort();
      // unreachable;
     }
    }
    $cmp289 = ($35|0)==($34|0);
    if ($cmp289) {
     $shl292 = 1 << $shr259;
     $neg293 = $shl292 ^ -1;
     $37 = HEAP32[4896]|0;
     $and295 = $37 & $neg293;
     HEAP32[4896] = $and295;
     break;
    }
    $cmp300 = ($35|0)==($arrayidx271|0);
    if ($cmp300) {
     $$pre8 = ((($35)) + 8|0);
     $fd318$pre$phiZ2D = $$pre8;
    } else {
     $cmp304 = ($35>>>0)<($28>>>0);
     if ($cmp304) {
      _abort();
      // unreachable;
     }
     $fd307 = ((($35)) + 8|0);
     $38 = HEAP32[$fd307>>2]|0;
     $cmp308 = ($38|0)==($add$ptr|0);
     if ($cmp308) {
      $fd318$pre$phiZ2D = $fd307;
     } else {
      _abort();
      // unreachable;
     }
    }
    $bk317 = ((($34)) + 12|0);
    HEAP32[$bk317>>2] = $35;
    HEAP32[$fd318$pre$phiZ2D>>2] = $34;
   } else {
    $parent327 = ((($add$ptr)) + 24|0);
    $39 = HEAP32[$parent327>>2]|0;
    $bk329 = ((($add$ptr)) + 12|0);
    $40 = HEAP32[$bk329>>2]|0;
    $cmp330 = ($40|0)==($add$ptr|0);
    do {
     if ($cmp330) {
      $child358 = ((($add$ptr)) + 16|0);
      $arrayidx359 = ((($child358)) + 4|0);
      $44 = HEAP32[$arrayidx359>>2]|0;
      $cmp360 = ($44|0)==(0|0);
      if ($cmp360) {
       $45 = HEAP32[$child358>>2]|0;
       $cmp365 = ($45|0)==(0|0);
       if ($cmp365) {
        $R328$3 = 0;
        break;
       } else {
        $R328$1 = $45;$RP357$1 = $child358;
       }
      } else {
       $R328$1 = $44;$RP357$1 = $arrayidx359;
      }
      while(1) {
       $arrayidx371 = ((($R328$1)) + 20|0);
       $46 = HEAP32[$arrayidx371>>2]|0;
       $cmp372 = ($46|0)==(0|0);
       if (!($cmp372)) {
        $R328$1 = $46;$RP357$1 = $arrayidx371;
        continue;
       }
       $arrayidx376 = ((($R328$1)) + 16|0);
       $47 = HEAP32[$arrayidx376>>2]|0;
       $cmp377 = ($47|0)==(0|0);
       if ($cmp377) {
        break;
       } else {
        $R328$1 = $47;$RP357$1 = $arrayidx376;
       }
      }
      $cmp384 = ($RP357$1>>>0)<($28>>>0);
      if ($cmp384) {
       _abort();
       // unreachable;
      } else {
       HEAP32[$RP357$1>>2] = 0;
       $R328$3 = $R328$1;
       break;
      }
     } else {
      $fd334 = ((($add$ptr)) + 8|0);
      $41 = HEAP32[$fd334>>2]|0;
      $cmp337 = ($41>>>0)<($28>>>0);
      if ($cmp337) {
       _abort();
       // unreachable;
      }
      $bk340 = ((($41)) + 12|0);
      $42 = HEAP32[$bk340>>2]|0;
      $cmp341 = ($42|0)==($add$ptr|0);
      if (!($cmp341)) {
       _abort();
       // unreachable;
      }
      $fd344 = ((($40)) + 8|0);
      $43 = HEAP32[$fd344>>2]|0;
      $cmp345 = ($43|0)==($add$ptr|0);
      if ($cmp345) {
       HEAP32[$bk340>>2] = $40;
       HEAP32[$fd344>>2] = $41;
       $R328$3 = $40;
       break;
      } else {
       _abort();
       // unreachable;
      }
     }
    } while(0);
    $cmp393 = ($39|0)==(0|0);
    if (!($cmp393)) {
     $index398 = ((($add$ptr)) + 28|0);
     $48 = HEAP32[$index398>>2]|0;
     $arrayidx399 = (19888 + ($48<<2)|0);
     $49 = HEAP32[$arrayidx399>>2]|0;
     $cmp400 = ($add$ptr|0)==($49|0);
     do {
      if ($cmp400) {
       HEAP32[$arrayidx399>>2] = $R328$3;
       $cond5 = ($R328$3|0)==(0|0);
       if ($cond5) {
        $shl407 = 1 << $48;
        $neg408 = $shl407 ^ -1;
        $50 = HEAP32[(19588)>>2]|0;
        $and410 = $50 & $neg408;
        HEAP32[(19588)>>2] = $and410;
        break L96;
       }
      } else {
       $51 = HEAP32[(19600)>>2]|0;
       $cmp414 = ($39>>>0)<($51>>>0);
       if ($cmp414) {
        _abort();
        // unreachable;
       } else {
        $arrayidx420 = ((($39)) + 16|0);
        $52 = HEAP32[$arrayidx420>>2]|0;
        $not$cmp421 = ($52|0)!=($add$ptr|0);
        $$sink3 = $not$cmp421&1;
        $arrayidx428 = (((($39)) + 16|0) + ($$sink3<<2)|0);
        HEAP32[$arrayidx428>>2] = $R328$3;
        $cmp433 = ($R328$3|0)==(0|0);
        if ($cmp433) {
         break L96;
        } else {
         break;
        }
       }
      }
     } while(0);
     $53 = HEAP32[(19600)>>2]|0;
     $cmp437 = ($R328$3>>>0)<($53>>>0);
     if ($cmp437) {
      _abort();
      // unreachable;
     }
     $parent444 = ((($R328$3)) + 24|0);
     HEAP32[$parent444>>2] = $39;
     $child445 = ((($add$ptr)) + 16|0);
     $54 = HEAP32[$child445>>2]|0;
     $cmp447 = ($54|0)==(0|0);
     do {
      if (!($cmp447)) {
       $cmp451 = ($54>>>0)<($53>>>0);
       if ($cmp451) {
        _abort();
        // unreachable;
       } else {
        $arrayidx457 = ((($R328$3)) + 16|0);
        HEAP32[$arrayidx457>>2] = $54;
        $parent458 = ((($54)) + 24|0);
        HEAP32[$parent458>>2] = $R328$3;
        break;
       }
      }
     } while(0);
     $arrayidx463 = ((($child445)) + 4|0);
     $55 = HEAP32[$arrayidx463>>2]|0;
     $cmp464 = ($55|0)==(0|0);
     if (!($cmp464)) {
      $56 = HEAP32[(19600)>>2]|0;
      $cmp468 = ($55>>>0)<($56>>>0);
      if ($cmp468) {
       _abort();
       // unreachable;
      } else {
       $arrayidx474 = ((($R328$3)) + 20|0);
       HEAP32[$arrayidx474>>2] = $55;
       $parent475 = ((($55)) + 24|0);
       HEAP32[$parent475>>2] = $R328$3;
       break;
      }
     }
    }
   }
  } while(0);
  $or484 = $add258 | 1;
  $head485 = ((($p$addr$1)) + 4|0);
  HEAP32[$head485>>2] = $or484;
  $add$ptr486 = (($p$addr$1) + ($add258)|0);
  HEAP32[$add$ptr486>>2] = $add258;
  $57 = HEAP32[(19604)>>2]|0;
  $cmp489 = ($p$addr$1|0)==($57|0);
  if ($cmp489) {
   HEAP32[(19592)>>2] = $add258;
   return;
  } else {
   $psize$addr$2 = $add258;
  }
 } else {
  $and501 = $29 & -2;
  HEAP32[$head223>>2] = $and501;
  $or502 = $psize$addr$1 | 1;
  $head503 = ((($p$addr$1)) + 4|0);
  HEAP32[$head503>>2] = $or502;
  $add$ptr504 = (($p$addr$1) + ($psize$addr$1)|0);
  HEAP32[$add$ptr504>>2] = $psize$addr$1;
  $psize$addr$2 = $psize$addr$1;
 }
 $shr507 = $psize$addr$2 >>> 3;
 $cmp508 = ($psize$addr$2>>>0)<(256);
 if ($cmp508) {
  $shl515 = $shr507 << 1;
  $arrayidx516 = (19624 + ($shl515<<2)|0);
  $58 = HEAP32[4896]|0;
  $shl519 = 1 << $shr507;
  $and520 = $58 & $shl519;
  $tobool521 = ($and520|0)==(0);
  if ($tobool521) {
   $or525 = $58 | $shl519;
   HEAP32[4896] = $or525;
   $$pre = ((($arrayidx516)) + 8|0);
   $$pre$phiZ2D = $$pre;$F517$0 = $arrayidx516;
  } else {
   $59 = ((($arrayidx516)) + 8|0);
   $60 = HEAP32[$59>>2]|0;
   $61 = HEAP32[(19600)>>2]|0;
   $cmp529 = ($60>>>0)<($61>>>0);
   if ($cmp529) {
    _abort();
    // unreachable;
   } else {
    $$pre$phiZ2D = $59;$F517$0 = $60;
   }
  }
  HEAP32[$$pre$phiZ2D>>2] = $p$addr$1;
  $bk539 = ((($F517$0)) + 12|0);
  HEAP32[$bk539>>2] = $p$addr$1;
  $fd540 = ((($p$addr$1)) + 8|0);
  HEAP32[$fd540>>2] = $F517$0;
  $bk541 = ((($p$addr$1)) + 12|0);
  HEAP32[$bk541>>2] = $arrayidx516;
  return;
 }
 $shr546 = $psize$addr$2 >>> 8;
 $cmp547 = ($shr546|0)==(0);
 if ($cmp547) {
  $I545$0 = 0;
 } else {
  $cmp551 = ($psize$addr$2>>>0)>(16777215);
  if ($cmp551) {
   $I545$0 = 31;
  } else {
   $sub = (($shr546) + 1048320)|0;
   $shr555 = $sub >>> 16;
   $and556 = $shr555 & 8;
   $shl557 = $shr546 << $and556;
   $sub558 = (($shl557) + 520192)|0;
   $shr559 = $sub558 >>> 16;
   $and560 = $shr559 & 4;
   $add561 = $and560 | $and556;
   $shl562 = $shl557 << $and560;
   $sub563 = (($shl562) + 245760)|0;
   $shr564 = $sub563 >>> 16;
   $and565 = $shr564 & 2;
   $add566 = $add561 | $and565;
   $sub567 = (14 - ($add566))|0;
   $shl568 = $shl562 << $and565;
   $shr569 = $shl568 >>> 15;
   $add570 = (($sub567) + ($shr569))|0;
   $shl571 = $add570 << 1;
   $add572 = (($add570) + 7)|0;
   $shr573 = $psize$addr$2 >>> $add572;
   $and574 = $shr573 & 1;
   $add575 = $and574 | $shl571;
   $I545$0 = $add575;
  }
 }
 $arrayidx579 = (19888 + ($I545$0<<2)|0);
 $index580 = ((($p$addr$1)) + 28|0);
 HEAP32[$index580>>2] = $I545$0;
 $child581 = ((($p$addr$1)) + 16|0);
 $arrayidx582 = ((($p$addr$1)) + 20|0);
 HEAP32[$arrayidx582>>2] = 0;
 HEAP32[$child581>>2] = 0;
 $62 = HEAP32[(19588)>>2]|0;
 $shl586 = 1 << $I545$0;
 $and587 = $62 & $shl586;
 $tobool588 = ($and587|0)==(0);
 if ($tobool588) {
  $or592 = $62 | $shl586;
  HEAP32[(19588)>>2] = $or592;
  HEAP32[$arrayidx579>>2] = $p$addr$1;
  $parent593 = ((($p$addr$1)) + 24|0);
  HEAP32[$parent593>>2] = $arrayidx579;
  $bk594 = ((($p$addr$1)) + 12|0);
  HEAP32[$bk594>>2] = $p$addr$1;
  $fd595 = ((($p$addr$1)) + 8|0);
  HEAP32[$fd595>>2] = $p$addr$1;
  return;
 }
 $63 = HEAP32[$arrayidx579>>2]|0;
 $cmp598 = ($I545$0|0)==(31);
 $shr600 = $I545$0 >>> 1;
 $sub603 = (25 - ($shr600))|0;
 $cond = $cmp598 ? 0 : $sub603;
 $shl604 = $psize$addr$2 << $cond;
 $K597$0 = $shl604;$T$0 = $63;
 while(1) {
  $head605 = ((($T$0)) + 4|0);
  $64 = HEAP32[$head605>>2]|0;
  $and606 = $64 & -8;
  $cmp607 = ($and606|0)==($psize$addr$2|0);
  if ($cmp607) {
   label = 121;
   break;
  }
  $shr611 = $K597$0 >>> 31;
  $arrayidx613 = (((($T$0)) + 16|0) + ($shr611<<2)|0);
  $shl614 = $K597$0 << 1;
  $65 = HEAP32[$arrayidx613>>2]|0;
  $cmp615 = ($65|0)==(0|0);
  if ($cmp615) {
   label = 118;
   break;
  } else {
   $K597$0 = $shl614;$T$0 = $65;
  }
 }
 if ((label|0) == 118) {
  $66 = HEAP32[(19600)>>2]|0;
  $cmp620 = ($arrayidx613>>>0)<($66>>>0);
  if ($cmp620) {
   _abort();
   // unreachable;
  }
  HEAP32[$arrayidx613>>2] = $p$addr$1;
  $parent625 = ((($p$addr$1)) + 24|0);
  HEAP32[$parent625>>2] = $T$0;
  $bk626 = ((($p$addr$1)) + 12|0);
  HEAP32[$bk626>>2] = $p$addr$1;
  $fd627 = ((($p$addr$1)) + 8|0);
  HEAP32[$fd627>>2] = $p$addr$1;
  return;
 }
 else if ((label|0) == 121) {
  $fd635 = ((($T$0)) + 8|0);
  $67 = HEAP32[$fd635>>2]|0;
  $68 = HEAP32[(19600)>>2]|0;
  $cmp641 = ($67>>>0)>=($68>>>0);
  $not$cmp637 = ($T$0>>>0)>=($68>>>0);
  $69 = $cmp641 & $not$cmp637;
  if (!($69)) {
   _abort();
   // unreachable;
  }
  $bk648 = ((($67)) + 12|0);
  HEAP32[$bk648>>2] = $p$addr$1;
  HEAP32[$fd635>>2] = $p$addr$1;
  $fd650 = ((($p$addr$1)) + 8|0);
  HEAP32[$fd650>>2] = $67;
  $bk651 = ((($p$addr$1)) + 12|0);
  HEAP32[$bk651>>2] = $T$0;
  $parent652 = ((($p$addr$1)) + 24|0);
  HEAP32[$parent652>>2] = 0;
  return;
 }
}
function __ZNSt3__29basic_iosIcNS_11char_traitsIcEEED2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__28ios_baseD2Ev($this);
 return;
}
function __ZNSt3__29basic_iosIcNS_11char_traitsIcEEED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__29basic_iosIcNS_11char_traitsIcEEED2Ev($this);
 __ZdlPv($this);
 return;
}
function __ZNSt3__28ios_baseD2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $__fn_ = 0, $__iarray_ = 0, $__index_ = 0, $__loc_ = 0, $__parray_ = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = (6400);
 __THREW__ = 0;
 invoke_vii(388,($this|0),0);
 $0 = __THREW__; __THREW__ = 0;
 $1 = $0&1;
 if ($1) {
  $6 = ___cxa_find_matching_catch_3(0|0)|0;
  $7 = tempRet0;
  ___clang_call_terminate($6);
  // unreachable;
 } else {
  $__loc_ = ((($this)) + 28|0);
  __ZNSt3__26localeD2Ev($__loc_);
  $__fn_ = ((($this)) + 32|0);
  $2 = HEAP32[$__fn_>>2]|0;
  _free($2);
  $__index_ = ((($this)) + 36|0);
  $3 = HEAP32[$__index_>>2]|0;
  _free($3);
  $__iarray_ = ((($this)) + 48|0);
  $4 = HEAP32[$__iarray_>>2]|0;
  _free($4);
  $__parray_ = ((($this)) + 60|0);
  $5 = HEAP32[$__parray_>>2]|0;
  _free($5);
  return;
 }
}
function __ZNSt3__28ios_base16__call_callbacksENS0_5eventE($this,$ev) {
 $this = $this|0;
 $ev = $ev|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $__event_size_ = 0, $__fn_ = 0, $__index_ = 0, $arrayidx = 0, $arrayidx2 = 0, $dec = 0, $i$0 = 0, $tobool = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $__event_size_ = ((($this)) + 40|0);
 $0 = HEAP32[$__event_size_>>2]|0;
 $__fn_ = ((($this)) + 32|0);
 $__index_ = ((($this)) + 36|0);
 $i$0 = $0;
 while(1) {
  $tobool = ($i$0|0)==(0);
  if ($tobool) {
   break;
  }
  $dec = (($i$0) + -1)|0;
  $1 = HEAP32[$__fn_>>2]|0;
  $arrayidx = (($1) + ($dec<<2)|0);
  $2 = HEAP32[$arrayidx>>2]|0;
  $3 = HEAP32[$__index_>>2]|0;
  $arrayidx2 = (($3) + ($dec<<2)|0);
  $4 = HEAP32[$arrayidx2>>2]|0;
  FUNCTION_TABLE_viii[$2 & 1023]($ev,$this,$4);
  $i$0 = $dec;
 }
 return;
}
function __ZNSt3__28ios_baseD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__28ios_baseD2Ev($this);
 __ZdlPv($this);
 return;
}
function __ZNSt3__215basic_streambufIcNS_11char_traitsIcEEED2Ev($this) {
 $this = $this|0;
 var $__loc_ = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = (6416);
 $__loc_ = ((($this)) + 4|0);
 __ZNSt3__26localeD2Ev($__loc_);
 return;
}
function __ZNSt3__215basic_streambufIcNS_11char_traitsIcEEED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__215basic_streambufIcNS_11char_traitsIcEEED2Ev($this);
 __ZdlPv($this);
 return;
}
function __ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE5imbueERKNS_6localeE($this,$0) {
 $this = $this|0;
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE6setbufEPci($this,$0,$1) {
 $this = $this|0;
 $0 = $0|0;
 $1 = $1|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return ($this|0);
}
function __ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE7seekoffExNS_8ios_base7seekdirEj($agg$result,$this,$0,$1,$2,$3) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__off_$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = $agg$result;
 $5 = $4;
 HEAP32[$5>>2] = 0;
 $6 = (($4) + 4)|0;
 $7 = $6;
 HEAP32[$7>>2] = 0;
 $__off_$i = ((($agg$result)) + 8|0);
 $8 = $__off_$i;
 $9 = $8;
 HEAP32[$9>>2] = -1;
 $10 = (($8) + 4)|0;
 $11 = $10;
 HEAP32[$11>>2] = -1;
 return;
}
function __ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE7seekposENS_4fposI11__mbstate_tEEj($agg$result,$this,$0,$1) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__off_$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = $agg$result;
 $3 = $2;
 HEAP32[$3>>2] = 0;
 $4 = (($2) + 4)|0;
 $5 = $4;
 HEAP32[$5>>2] = 0;
 $__off_$i = ((($agg$result)) + 8|0);
 $6 = $__off_$i;
 $7 = $6;
 HEAP32[$7>>2] = -1;
 $8 = (($6) + 4)|0;
 $9 = $8;
 HEAP32[$9>>2] = -1;
 return;
}
function __ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE4syncEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 0;
}
function __ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE9showmanycEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 0;
}
function __ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE6xsgetnEPci($this,$__s,$__n) {
 $this = $this|0;
 $__s = $__s|0;
 $__n = $__n|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $__einp_ = 0, $__i$0 = 0, $__ninp_ = 0, $__s$addr$0 = 0, $call4 = 0, $call7 = 0, $cmp = 0, $cmp2 = 0, $cmp5 = 0, $inc = 0, $incdec$ptr = 0, $incdec$ptr10 = 0, $storemerge = 0, $vfn = 0, $vtable = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 (__ZNSt3__211char_traitsIcE3eofEv()|0);
 $__ninp_ = ((($this)) + 12|0);
 $__einp_ = ((($this)) + 16|0);
 $__i$0 = 0;$__s$addr$0 = $__s;
 while(1) {
  $cmp = ($__i$0|0)<($__n|0);
  if (!($cmp)) {
   break;
  }
  $0 = HEAP32[$__ninp_>>2]|0;
  $1 = HEAP32[$__einp_>>2]|0;
  $cmp2 = ($0>>>0)<($1>>>0);
  if ($cmp2) {
   $incdec$ptr = ((($0)) + 1|0);
   HEAP32[$__ninp_>>2] = $incdec$ptr;
   $2 = HEAP8[$0>>0]|0;
   $storemerge = $2;
  } else {
   $vtable = HEAP32[$this>>2]|0;
   $vfn = ((($vtable)) + 40|0);
   $3 = HEAP32[$vfn>>2]|0;
   $call4 = (FUNCTION_TABLE_ii[$3 & 1023]($this)|0);
   $cmp5 = ($call4|0)==(-1);
   if ($cmp5) {
    break;
   }
   $call7 = (__ZNSt3__211char_traitsIcE12to_char_typeEi($call4)|0);
   $storemerge = $call7;
  }
  HEAP8[$__s$addr$0>>0] = $storemerge;
  $inc = (($__i$0) + 1)|0;
  $incdec$ptr10 = ((($__s$addr$0)) + 1|0);
  $__i$0 = $inc;$__s$addr$0 = $incdec$ptr10;
 }
 return ($__i$0|0);
}
function __ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE9underflowEv($this) {
 $this = $this|0;
 var $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = (__ZNSt3__211char_traitsIcE3eofEv()|0);
 return ($call|0);
}
function __ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE5uflowEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $__ninp_ = 0, $call = 0, $call2 = 0, $call3 = 0, $call4 = 0, $cmp = 0, $incdec$ptr = 0, $retval$0 = 0, $vfn = 0, $vtable = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $vtable = HEAP32[$this>>2]|0;
 $vfn = ((($vtable)) + 36|0);
 $0 = HEAP32[$vfn>>2]|0;
 $call = (FUNCTION_TABLE_ii[$0 & 1023]($this)|0);
 $call2 = (__ZNSt3__211char_traitsIcE3eofEv()|0);
 $cmp = ($call|0)==($call2|0);
 if ($cmp) {
  $call3 = (__ZNSt3__211char_traitsIcE3eofEv()|0);
  $retval$0 = $call3;
 } else {
  $__ninp_ = ((($this)) + 12|0);
  $1 = HEAP32[$__ninp_>>2]|0;
  $incdec$ptr = ((($1)) + 1|0);
  HEAP32[$__ninp_>>2] = $incdec$ptr;
  $2 = HEAP8[$1>>0]|0;
  $call4 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($2)|0);
  $retval$0 = $call4;
 }
 return ($retval$0|0);
}
function __ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE9pbackfailEi($this,$0) {
 $this = $this|0;
 $0 = $0|0;
 var $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = (__ZNSt3__211char_traitsIcE3eofEv()|0);
 return ($call|0);
}
function __ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE6xsputnEPKci($this,$__s,$__n) {
 $this = $this|0;
 $__s = $__s|0;
 $__n = $__n|0;
 var $$sroa$speculated = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $__eout_ = 0, $__i$0 = 0, $__nout_ = 0, $__s$addr$0 = 0, $add = 0, $add$ptr = 0, $add$ptr14 = 0, $call = 0, $call3 = 0, $call4 = 0, $cmp = 0, $cmp$i$i$i = 0, $cmp2 = 0, $cmp5 = 0;
 var $inc = 0, $incdec$ptr = 0, $sub = 0, $sub$ptr$lhs$cast = 0, $sub$ptr$rhs$cast = 0, $sub$ptr$sub = 0, $vfn = 0, $vtable = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = (__ZNSt3__211char_traitsIcE3eofEv()|0);
 $__nout_ = ((($this)) + 24|0);
 $__eout_ = ((($this)) + 28|0);
 $__i$0 = 0;$__s$addr$0 = $__s;
 while(1) {
  $cmp = ($__i$0|0)<($__n|0);
  if (!($cmp)) {
   break;
  }
  $0 = HEAP32[$__nout_>>2]|0;
  $1 = HEAP32[$__eout_>>2]|0;
  $cmp2 = ($0>>>0)<($1>>>0);
  if ($cmp2) {
   $sub$ptr$lhs$cast = $1;
   $sub$ptr$rhs$cast = $0;
   $sub$ptr$sub = (($sub$ptr$lhs$cast) - ($sub$ptr$rhs$cast))|0;
   $sub = (($__n) - ($__i$0))|0;
   $cmp$i$i$i = ($sub|0)<($sub$ptr$sub|0);
   $$sroa$speculated = $cmp$i$i$i ? $sub : $sub$ptr$sub;
   (__ZNSt3__211char_traitsIcE4copyEPcPKcj($0,$__s$addr$0,$$sroa$speculated)|0);
   $4 = HEAP32[$__nout_>>2]|0;
   $add$ptr = (($4) + ($$sroa$speculated)|0);
   HEAP32[$__nout_>>2] = $add$ptr;
   $add$ptr14 = (($__s$addr$0) + ($$sroa$speculated)|0);
   $add = (($$sroa$speculated) + ($__i$0))|0;
   $__i$0 = $add;$__s$addr$0 = $add$ptr14;
   continue;
  }
  $vtable = HEAP32[$this>>2]|0;
  $vfn = ((($vtable)) + 52|0);
  $2 = HEAP32[$vfn>>2]|0;
  $3 = HEAP8[$__s$addr$0>>0]|0;
  $call3 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($3)|0);
  $call4 = (FUNCTION_TABLE_iii[$2 & 511]($this,$call3)|0);
  $cmp5 = ($call4|0)==($call|0);
  if ($cmp5) {
   break;
  }
  $incdec$ptr = ((($__s$addr$0)) + 1|0);
  $inc = (($__i$0) + 1)|0;
  $__i$0 = $inc;$__s$addr$0 = $incdec$ptr;
 }
 return ($__i$0|0);
}
function __ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE8overflowEi($this,$0) {
 $this = $this|0;
 $0 = $0|0;
 var $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = (__ZNSt3__211char_traitsIcE3eofEv()|0);
 return ($call|0);
}
function __ZNSt3__211char_traitsIcE4copyEPcPKcj($__s1,$__s2,$__n) {
 $__s1 = $__s1|0;
 $__s2 = $__s2|0;
 $__n = $__n|0;
 var $cmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $cmp = ($__n|0)==(0);
 if (!($cmp)) {
  _memcpy(($__s1|0),($__s2|0),($__n|0))|0;
 }
 return ($__s1|0);
}
function __ZNSt3__211char_traitsIwE3eofEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return -1;
}
function __ZNSt3__211char_traitsIwE11to_int_typeEw($__c) {
 $__c = $__c|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return ($__c|0);
}
function __ZNSt3__211char_traitsIwE4copyEPwPKwj($__s1,$__s2,$__n) {
 $__s1 = $__s1|0;
 $__s2 = $__s2|0;
 $__n = $__n|0;
 var $call = 0, $cmp = 0, $cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $cmp = ($__n|0)==(0);
 if ($cmp) {
  $cond = $__s1;
 } else {
  $call = (_wmemcpy($__s1,$__s2,$__n)|0);
  $cond = $__s1;
 }
 return ($cond|0);
}
function __ZNSt3__213basic_istreamIcNS_11char_traitsIcEEED1Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__213basic_istreamIcNS_11char_traitsIcEEED2Ev($this,6512);
 $0 = ((($this)) + 8|0);
 __ZNSt3__29basic_iosIcNS_11char_traitsIcEEED2Ev($0);
 return;
}
function __ZNSt3__213basic_istreamIcNS_11char_traitsIcEEED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__213basic_istreamIcNS_11char_traitsIcEEED1Ev($this);
 __ZdlPv($this);
 return;
}
function __ZTv0_n12_NSt3__213basic_istreamIcNS_11char_traitsIcEEED1Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$this>>2]|0;
 $1 = ((($0)) + -12|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (($this) + ($2)|0);
 __ZNSt3__213basic_istreamIcNS_11char_traitsIcEEED1Ev($3);
 return;
}
function __ZTv0_n12_NSt3__213basic_istreamIcNS_11char_traitsIcEEED0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$this>>2]|0;
 $1 = ((($0)) + -12|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (($this) + ($2)|0);
 __ZNSt3__213basic_istreamIcNS_11char_traitsIcEEED0Ev($3);
 return;
}
function __ZNSt3__213basic_istreamIcNS_11char_traitsIcEEED2Ev($this,$vtt) {
 $this = $this|0;
 $vtt = $vtt|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEED1Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEED2Ev($this,6520);
 $0 = ((($this)) + 4|0);
 __ZNSt3__29basic_iosIcNS_11char_traitsIcEEED2Ev($0);
 return;
}
function __ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEED1Ev($this);
 __ZdlPv($this);
 return;
}
function __ZTv0_n12_NSt3__213basic_ostreamIcNS_11char_traitsIcEEED1Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$this>>2]|0;
 $1 = ((($0)) + -12|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (($this) + ($2)|0);
 __ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEED1Ev($3);
 return;
}
function __ZTv0_n12_NSt3__213basic_ostreamIcNS_11char_traitsIcEEED0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$this>>2]|0;
 $1 = ((($0)) + -12|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (($this) + ($2)|0);
 __ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEED0Ev($3);
 return;
}
function __ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEED2Ev($this,$vtt) {
 $this = $this|0;
 $vtt = $vtt|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNSt3__214basic_iostreamIcNS_11char_traitsIcEEED1Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__214basic_iostreamIcNS_11char_traitsIcEEED2Ev($this,6588);
 $0 = ((($this)) + 12|0);
 __ZNSt3__29basic_iosIcNS_11char_traitsIcEEED2Ev($0);
 return;
}
function __ZNSt3__214basic_iostreamIcNS_11char_traitsIcEEED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__214basic_iostreamIcNS_11char_traitsIcEEED1Ev($this);
 __ZdlPv($this);
 return;
}
function __ZThn8_NSt3__214basic_iostreamIcNS_11char_traitsIcEEED1Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + -8|0);
 __ZNSt3__214basic_iostreamIcNS_11char_traitsIcEEED1Ev($0);
 return;
}
function __ZThn8_NSt3__214basic_iostreamIcNS_11char_traitsIcEEED0Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + -8|0);
 __ZNSt3__214basic_iostreamIcNS_11char_traitsIcEEED0Ev($0);
 return;
}
function __ZTv0_n12_NSt3__214basic_iostreamIcNS_11char_traitsIcEEED1Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$this>>2]|0;
 $1 = ((($0)) + -12|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (($this) + ($2)|0);
 __ZNSt3__214basic_iostreamIcNS_11char_traitsIcEEED1Ev($3);
 return;
}
function __ZTv0_n12_NSt3__214basic_iostreamIcNS_11char_traitsIcEEED0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$this>>2]|0;
 $1 = ((($0)) + -12|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (($this) + ($2)|0);
 __ZNSt3__214basic_iostreamIcNS_11char_traitsIcEEED0Ev($3);
 return;
}
function __ZNSt3__214basic_iostreamIcNS_11char_traitsIcEEED2Ev($this,$vtt) {
 $this = $this|0;
 $vtt = $vtt|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + 8|0);
 $1 = ((($vtt)) + 12|0);
 __ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEED2Ev($0,$1);
 $2 = ((($vtt)) + 4|0);
 __ZNSt3__213basic_istreamIcNS_11char_traitsIcEEED2Ev($this,$2);
 return;
}
function __ZNSt3__219__iostream_categoryD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 return;
}
function __ZNKSt3__219__iostream_category4nameEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (15547|0);
}
function __ZNKSt3__219__iostream_category7messageEi($agg$result,$this,$ev) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $ev = $ev|0;
 var $call$i = 0, $cmp = 0, $cmp2 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $cmp = ($ev|0)!=(1);
 $cmp2 = ($ev|0)<(257);
 $or$cond = $cmp & $cmp2;
 if ($or$cond) {
  __ZNKSt3__212__do_message7messageEi($agg$result,$this,$ev);
 } else {
  ;HEAP32[$agg$result>>2]=0|0;HEAP32[$agg$result+4>>2]=0|0;HEAP32[$agg$result+8>>2]=0|0;
  $call$i = (__ZNSt3__211char_traitsIcE6lengthEPKc(15511)|0);
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($agg$result,15511,$call$i);
 }
 return;
}
function __ZNSt3__28ios_base7failureD2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__212system_errorD2Ev($this);
 return;
}
function __ZNSt3__28ios_base7failureD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__28ios_base7failureD2Ev($this);
 __ZdlPv($this);
 return;
}
function __ZNSt3__28ios_base5clearEj($this,$state) {
 $this = $this|0;
 $state = $state|0;
 var $$index = 0, $$index2 = 0, $$sroa_idx2$i = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $__exceptions_ = 0, $__rdbuf_ = 0, $__rdstate_2 = 0, $and = 0, $cmp = 0, $exception = 0, $not$tobool = 0, $or = 0;
 var $or$sink = 0, $ref$tmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $ref$tmp = sp;
 $__rdbuf_ = ((($this)) + 24|0);
 $0 = HEAP32[$__rdbuf_>>2]|0;
 $not$tobool = ($0|0)==(0|0);
 $or = $not$tobool&1;
 $or$sink = $or | $state;
 $__rdstate_2 = ((($this)) + 16|0);
 HEAP32[$__rdstate_2>>2] = $or$sink;
 $__exceptions_ = ((($this)) + 20|0);
 $1 = HEAP32[$__exceptions_>>2]|0;
 $and = $or$sink & $1;
 $cmp = ($and|0)==(0);
 if ($cmp) {
  STACKTOP = sp;return;
 }
 $exception = (___cxa_allocate_exception(16)|0);
 (__ZNSt3__217iostream_categoryEv()|0);
 HEAP32[$ref$tmp>>2] = 1;
 $$sroa_idx2$i = ((($ref$tmp)) + 4|0);
 HEAP32[$$sroa_idx2$i>>2] = (6672);
 __THREW__ = 0;
 invoke_viii(389,($exception|0),(15612|0),($ref$tmp|0));
 $2 = __THREW__; __THREW__ = 0;
 $3 = $2&1;
 if ($3) {
  $7 = ___cxa_find_matching_catch_2()|0;
  $8 = tempRet0;
  ___cxa_free_exception(($exception|0));
  $$index = $7;$$index2 = $8;
 } else {
  __THREW__ = 0;
  invoke_viii(341,($exception|0),(640|0),(59|0));
  $4 = __THREW__; __THREW__ = 0;
  $5 = ___cxa_find_matching_catch_2()|0;
  $6 = tempRet0;
  $$index = $5;$$index2 = $6;
 }
 ___resumeException($$index|0);
 // unreachable;
}
function __ZNSt3__217iostream_categoryEv() {
 var $0 = 0, $1 = 0, $guard$uninitialized = 0, $tobool = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[18800]|0;
 $guard$uninitialized = ($0<<24>>24)==(0);
 if ($guard$uninitialized) {
  $1 = (___cxa_guard_acquire(18800)|0);
  $tobool = ($1|0)==(0);
  if (!($tobool)) {
   (___cxa_atexit((52|0),(6672|0),(___dso_handle|0))|0);
  }
 }
 return (6672|0);
}
function __ZNSt3__28ios_base7failureC2EPKcRKNS_10error_codeE($this,$msg,$ec) {
 $this = $this|0;
 $msg = $msg|0;
 $ec = $ec|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $agg$tmp = 0, $tmpcast$byval_copy = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $tmpcast$byval_copy = sp + 8|0;
 $agg$tmp = sp;
 $0 = $ec;
 $1 = $0;
 $2 = HEAP32[$1>>2]|0;
 $3 = (($0) + 4)|0;
 $4 = $3;
 $5 = HEAP32[$4>>2]|0;
 $6 = $agg$tmp;
 $7 = $6;
 HEAP32[$7>>2] = $2;
 $8 = (($6) + 4)|0;
 $9 = $8;
 HEAP32[$9>>2] = $5;
 ;HEAP32[$tmpcast$byval_copy>>2]=HEAP32[$agg$tmp>>2]|0;HEAP32[$tmpcast$byval_copy+4>>2]=HEAP32[$agg$tmp+4>>2]|0;
 __ZNSt3__212system_errorC2ENS_10error_codeEPKc($this,$tmpcast$byval_copy,$msg);
 HEAP32[$this>>2] = (6660);
 STACKTOP = sp;return;
}
function __ZNSt3__28ios_base4initEPv($this,$sb) {
 $this = $this|0;
 $sb = $sb|0;
 var $__exceptions_ = 0, $__fmtflags_ = 0, $__fn_ = 0, $__loc_ = 0, $__precision_ = 0, $__rdbuf_ = 0, $__rdstate_ = 0, $__width_ = 0, $cond = 0, $not$tobool = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 $__rdbuf_ = ((($this)) + 24|0);
 HEAP32[$__rdbuf_>>2] = $sb;
 $not$tobool = ($sb|0)==(0|0);
 $cond = $not$tobool&1;
 $__rdstate_ = ((($this)) + 16|0);
 HEAP32[$__rdstate_>>2] = $cond;
 $__exceptions_ = ((($this)) + 20|0);
 HEAP32[$__exceptions_>>2] = 0;
 $__fmtflags_ = ((($this)) + 4|0);
 HEAP32[$__fmtflags_>>2] = 4098;
 $__width_ = ((($this)) + 12|0);
 HEAP32[$__width_>>2] = 0;
 $__precision_ = ((($this)) + 8|0);
 HEAP32[$__precision_>>2] = 6;
 $__fn_ = ((($this)) + 32|0);
 $__loc_ = ((($this)) + 28|0);
 dest=$__fn_; stop=dest+40|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 __ZNSt3__26localeC2Ev($__loc_);
 return;
}
function __ZNKSt3__28ios_base6getlocEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var $__loc_ = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $__loc_ = ((($this)) + 28|0);
 __ZNSt3__26localeC2ERKS0_($agg$result,$__loc_);
 return;
}
function __ZNSt3__211char_traitsIwE11eq_int_typeEjj($__c1,$__c2) {
 $__c1 = $__c1|0;
 $__c2 = $__c2|0;
 var $cmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $cmp = ($__c1|0)==($__c2|0);
 return ($cmp|0);
}
function __ZNSt3__215basic_streambufIcNS_11char_traitsIcEEEC2Ev($this) {
 $this = $this|0;
 var $__binp_ = 0, $__loc_ = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = (6416);
 $__loc_ = ((($this)) + 4|0);
 __ZNSt3__26localeC2Ev($__loc_);
 $__binp_ = ((($this)) + 8|0);
 ;HEAP32[$__binp_>>2]=0|0;HEAP32[$__binp_+4>>2]=0|0;HEAP32[$__binp_+8>>2]=0|0;HEAP32[$__binp_+12>>2]=0|0;HEAP32[$__binp_+16>>2]=0|0;HEAP32[$__binp_+20>>2]=0|0;
 return;
}
function __ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEE5flushEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $__rdbuf_$i$i = 0, $__rdbuf_$i$i1 = 0, $__rdstate_$i$i = 0, $__s = 0, $add$ptr = 0, $add$ptr10 = 0, $add$ptr19 = 0, $add$ptr26 = 0, $call$i2 = 0, $cmp = 0, $exn$slot$0 = 0, $or$i$i = 0, $tobool = 0, $tobool$i = 0, $vbase$offset = 0, $vbase$offset$ptr = 0, $vbase$offset$ptr17 = 0;
 var $vbase$offset$ptr24 = 0, $vbase$offset$ptr8 = 0, $vbase$offset18 = 0, $vbase$offset25 = 0, $vbase$offset9 = 0, $vfn$i = 0, $vtable = 0, $vtable$i = 0, $vtable16 = 0, $vtable23 = 0, $vtable7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $__s = sp;
 $vtable = HEAP32[$this>>2]|0;
 $vbase$offset$ptr = ((($vtable)) + -12|0);
 $vbase$offset = HEAP32[$vbase$offset$ptr>>2]|0;
 $add$ptr = (($this) + ($vbase$offset)|0);
 $__rdbuf_$i$i = ((($add$ptr)) + 24|0);
 $0 = HEAP32[$__rdbuf_$i$i>>2]|0;
 $tobool = ($0|0)==(0|0);
 L1: do {
  if (!($tobool)) {
   __THREW__ = 0;
   invoke_vii(378,($__s|0),($this|0));
   $1 = __THREW__; __THREW__ = 0;
   $2 = $1&1;
   L3: do {
    if ($2) {
     $11 = ___cxa_find_matching_catch_3(0|0)|0;
     $12 = tempRet0;
     $exn$slot$0 = $11;
    } else {
     $3 = HEAP8[$__s>>0]|0;
     $tobool$i = ($3<<24>>24)==(0);
     do {
      if (!($tobool$i)) {
       $vtable7 = HEAP32[$this>>2]|0;
       $vbase$offset$ptr8 = ((($vtable7)) + -12|0);
       $vbase$offset9 = HEAP32[$vbase$offset$ptr8>>2]|0;
       $add$ptr10 = (($this) + ($vbase$offset9)|0);
       $__rdbuf_$i$i1 = ((($add$ptr10)) + 24|0);
       $4 = HEAP32[$__rdbuf_$i$i1>>2]|0;
       $vtable$i = HEAP32[$4>>2]|0;
       $vfn$i = ((($vtable$i)) + 24|0);
       $5 = HEAP32[$vfn$i>>2]|0;
       __THREW__ = 0;
       $call$i2 = (invoke_ii($5|0,($4|0))|0);
       $6 = __THREW__; __THREW__ = 0;
       $7 = $6&1;
       if (!($7)) {
        $cmp = ($call$i2|0)==(-1);
        if (!($cmp)) {
         break;
        }
        $vtable16 = HEAP32[$this>>2]|0;
        $vbase$offset$ptr17 = ((($vtable16)) + -12|0);
        $vbase$offset18 = HEAP32[$vbase$offset$ptr17>>2]|0;
        $add$ptr19 = (($this) + ($vbase$offset18)|0);
        $__rdstate_$i$i = ((($add$ptr19)) + 16|0);
        $8 = HEAP32[$__rdstate_$i$i>>2]|0;
        $or$i$i = $8 | 1;
        __THREW__ = 0;
        invoke_vii(382,($add$ptr19|0),($or$i$i|0));
        $9 = __THREW__; __THREW__ = 0;
        $10 = $9&1;
        if (!($10)) {
         break;
        }
       }
       $13 = ___cxa_find_matching_catch_3(0|0)|0;
       $14 = tempRet0;
       __ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEE6sentryD2Ev($__s);
       $exn$slot$0 = $13;
       break L3;
      }
     } while(0);
     __ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEE6sentryD2Ev($__s);
     break L1;
    }
   } while(0);
   (___cxa_begin_catch(($exn$slot$0|0))|0);
   $vtable23 = HEAP32[$this>>2]|0;
   $vbase$offset$ptr24 = ((($vtable23)) + -12|0);
   $vbase$offset25 = HEAP32[$vbase$offset$ptr24>>2]|0;
   $add$ptr26 = (($this) + ($vbase$offset25)|0);
   __THREW__ = 0;
   invoke_vi(383,($add$ptr26|0));
   $15 = __THREW__; __THREW__ = 0;
   $16 = $15&1;
   if (!($16)) {
    ___cxa_end_catch();
    break;
   }
   $17 = ___cxa_find_matching_catch_2()|0;
   $18 = tempRet0;
   __THREW__ = 0;
   invoke_v(375);
   $19 = __THREW__; __THREW__ = 0;
   $20 = $19&1;
   if ($20) {
    $21 = ___cxa_find_matching_catch_3(0|0)|0;
    $22 = tempRet0;
    ___clang_call_terminate($21);
    // unreachable;
   } else {
    ___resumeException($17|0);
    // unreachable;
   }
  }
 } while(0);
 STACKTOP = sp;return ($this|0);
}
function __ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEE6sentryC2ERS3_($this,$__os) {
 $this = $this|0;
 $__os = $__os|0;
 var $0 = 0, $1 = 0, $__os_ = 0, $__rdstate_$i$i = 0, $__tie_$i = 0, $add$ptr = 0, $cmp$i$i = 0, $tobool = 0, $vbase$offset = 0, $vbase$offset$ptr = 0, $vtable = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP8[$this>>0] = 0;
 $__os_ = ((($this)) + 4|0);
 HEAP32[$__os_>>2] = $__os;
 $vtable = HEAP32[$__os>>2]|0;
 $vbase$offset$ptr = ((($vtable)) + -12|0);
 $vbase$offset = HEAP32[$vbase$offset$ptr>>2]|0;
 $add$ptr = (($__os) + ($vbase$offset)|0);
 $__rdstate_$i$i = ((($add$ptr)) + 16|0);
 $0 = HEAP32[$__rdstate_$i$i>>2]|0;
 $cmp$i$i = ($0|0)==(0);
 if ($cmp$i$i) {
  $__tie_$i = ((($add$ptr)) + 72|0);
  $1 = HEAP32[$__tie_$i>>2]|0;
  $tobool = ($1|0)==(0|0);
  if (!($tobool)) {
   (__ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEE5flushEv($1)|0);
  }
  HEAP8[$this>>0] = 1;
 }
 return;
}
function __ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEE6sentryD2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__fmtflags_$i = 0, $__os_ = 0, $__rdbuf_$i$i = 0, $__rdbuf_$i$i3 = 0;
 var $__rdstate_$i$i = 0, $__rdstate_$i$i1 = 0, $add$ptr = 0, $add$ptr27 = 0, $add$ptr38 = 0, $and = 0, $call$i2 = 0, $call21 = 0, $cmp = 0, $cmp$i$i = 0, $or$i$i = 0, $ref = 0, $ref23 = 0, $ref34 = 0, $tobool = 0, $tobool19 = 0, $vbase$offset = 0, $vbase$offset$ptr = 0, $vbase$offset$ptr25 = 0, $vbase$offset$ptr36 = 0;
 var $vbase$offset26 = 0, $vbase$offset37 = 0, $vfn$i = 0, $vtable = 0, $vtable$i = 0, $vtable24 = 0, $vtable35 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $__os_ = ((($this)) + 4|0);
 $ref = HEAP32[$__os_>>2]|0;
 $vtable = HEAP32[$ref>>2]|0;
 $vbase$offset$ptr = ((($vtable)) + -12|0);
 $vbase$offset = HEAP32[$vbase$offset$ptr>>2]|0;
 $add$ptr = (($ref) + ($vbase$offset)|0);
 $__rdbuf_$i$i = ((($add$ptr)) + 24|0);
 $0 = HEAP32[$__rdbuf_$i$i>>2]|0;
 $tobool = ($0|0)==(0|0);
 do {
  if (!($tobool)) {
   $__rdstate_$i$i = ((($add$ptr)) + 16|0);
   $1 = HEAP32[$__rdstate_$i$i>>2]|0;
   $cmp$i$i = ($1|0)==(0);
   if ($cmp$i$i) {
    $__fmtflags_$i = ((($add$ptr)) + 4|0);
    $2 = HEAP32[$__fmtflags_$i>>2]|0;
    $and = $2 & 8192;
    $tobool19 = ($and|0)==(0);
    if (!($tobool19)) {
     $call21 = (__ZSt18uncaught_exceptionv()|0);
     if (!($call21)) {
      $ref23 = HEAP32[$__os_>>2]|0;
      $vtable24 = HEAP32[$ref23>>2]|0;
      $vbase$offset$ptr25 = ((($vtable24)) + -12|0);
      $vbase$offset26 = HEAP32[$vbase$offset$ptr25>>2]|0;
      $add$ptr27 = (($ref23) + ($vbase$offset26)|0);
      $__rdbuf_$i$i3 = ((($add$ptr27)) + 24|0);
      $3 = HEAP32[$__rdbuf_$i$i3>>2]|0;
      $vtable$i = HEAP32[$3>>2]|0;
      $vfn$i = ((($vtable$i)) + 24|0);
      $4 = HEAP32[$vfn$i>>2]|0;
      __THREW__ = 0;
      $call$i2 = (invoke_ii($4|0,($3|0))|0);
      $5 = __THREW__; __THREW__ = 0;
      $6 = $5&1;
      if (!($6)) {
       $cmp = ($call$i2|0)==(-1);
       if (!($cmp)) {
        break;
       }
       $ref34 = HEAP32[$__os_>>2]|0;
       $vtable35 = HEAP32[$ref34>>2]|0;
       $vbase$offset$ptr36 = ((($vtable35)) + -12|0);
       $vbase$offset37 = HEAP32[$vbase$offset$ptr36>>2]|0;
       $add$ptr38 = (($ref34) + ($vbase$offset37)|0);
       $__rdstate_$i$i1 = ((($add$ptr38)) + 16|0);
       $7 = HEAP32[$__rdstate_$i$i1>>2]|0;
       $or$i$i = $7 | 1;
       __THREW__ = 0;
       invoke_vii(382,($add$ptr38|0),($or$i$i|0));
       $8 = __THREW__; __THREW__ = 0;
       $9 = $8&1;
       if (!($9)) {
        break;
       }
      }
      $10 = ___cxa_find_matching_catch_3(0|0)|0;
      $11 = tempRet0;
      (___cxa_begin_catch(($10|0))|0);
      __THREW__ = 0;
      invoke_v(375);
      $12 = __THREW__; __THREW__ = 0;
      $13 = $12&1;
      if ($13) {
       $14 = ___cxa_find_matching_catch_3(0|0)|0;
       $15 = tempRet0;
       ___clang_call_terminate($14);
       // unreachable;
      }
     }
    }
   }
  }
 } while(0);
 return;
}
function __ZNSt3__28ios_base33__set_badbit_and_consider_rethrowEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $__exceptions_ = 0, $__rdstate_ = 0, $and = 0, $or = 0, $tobool = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $__rdstate_ = ((($this)) + 16|0);
 $0 = HEAP32[$__rdstate_>>2]|0;
 $or = $0 | 1;
 HEAP32[$__rdstate_>>2] = $or;
 $__exceptions_ = ((($this)) + 20|0);
 $1 = HEAP32[$__exceptions_>>2]|0;
 $and = $1 & 1;
 $tobool = ($and|0)==(0);
 if ($tobool) {
  return;
 } else {
  ___cxa_rethrow();
  // unreachable;
 }
}
function __ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEElsEj($this,$__n) {
 $this = $this|0;
 $__n = $__n|0;
 var $$pre$i = 0, $$pre$phiZ2D = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__fill_$i = 0;
 var $__rdbuf_$i$i$i = 0, $__rdstate_$i$i = 0, $__s = 0, $add$ptr = 0, $add$ptr$i = 0, $add$ptr29 = 0, $add$ptr39 = 0, $agg$tmp$i = 0, $agg$tmp$i$byval_copy = 0, $call$i = 0, $call$i1$i$i = 0, $call$i2$i$i = 0, $call$i3 = 0, $call$i67 = 0, $call2$i = 0, $cmp$i = 0, $conv$i = 0, $conv6$i = 0, $eh$lpad$body$indexZ2D = 0, $exn$slot$1 = 0;
 var $exn$slot$2 = 0, $or$i$i = 0, $ref$tmp = 0, $ref$tmp$i$i = 0, $tobool$i = 0, $vbase$offset = 0, $vbase$offset$i = 0, $vbase$offset$ptr = 0, $vbase$offset$ptr$i = 0, $vbase$offset$ptr27 = 0, $vbase$offset$ptr37 = 0, $vbase$offset28 = 0, $vbase$offset38 = 0, $vfn$i = 0, $vfn$i$i$i = 0, $vtable = 0, $vtable$i = 0, $vtable$i$i$i = 0, $vtable$i5 = 0, $vtable26 = 0;
 var $vtable36 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $agg$tmp$i$byval_copy = sp + 24|0;
 $agg$tmp$i = sp + 20|0;
 $ref$tmp$i$i = sp + 16|0;
 $__s = sp + 8|0;
 $ref$tmp = sp;
 __THREW__ = 0;
 invoke_vii(378,($__s|0),($this|0));
 $0 = __THREW__; __THREW__ = 0;
 $1 = $0&1;
 L1: do {
  if ($1) {
   $21 = ___cxa_find_matching_catch_3(0|0)|0;
   $22 = tempRet0;
   $exn$slot$2 = $21;
   label = 20;
  } else {
   $2 = HEAP8[$__s>>0]|0;
   $tobool$i = ($2<<24>>24)==(0);
   L4: do {
    if (!($tobool$i)) {
     $vtable = HEAP32[$this>>2]|0;
     $vbase$offset$ptr = ((($vtable)) + -12|0);
     $vbase$offset = HEAP32[$vbase$offset$ptr>>2]|0;
     $add$ptr = (($this) + ($vbase$offset)|0);
     __ZNKSt3__28ios_base6getlocEv($ref$tmp,$add$ptr);
     __THREW__ = 0;
     $call$i3 = (invoke_iii(380,($ref$tmp|0),(20152|0))|0);
     $3 = __THREW__; __THREW__ = 0;
     $4 = $3&1;
     L6: do {
      if ($4) {
       $23 = ___cxa_find_matching_catch_3(0|0)|0;
       $24 = tempRet0;
       __ZNSt3__26localeD2Ev($ref$tmp);
       $exn$slot$1 = $23;
      } else {
       __ZNSt3__26localeD2Ev($ref$tmp);
       $vtable$i = HEAP32[$this>>2]|0;
       $vbase$offset$ptr$i = ((($vtable$i)) + -12|0);
       $vbase$offset$i = HEAP32[$vbase$offset$ptr$i>>2]|0;
       $add$ptr$i = (($this) + ($vbase$offset$i)|0);
       $__rdbuf_$i$i$i = ((($add$ptr$i)) + 24|0);
       $5 = HEAP32[$__rdbuf_$i$i$i>>2]|0;
       $call$i = (__ZNSt3__211char_traitsIcE3eofEv()|0);
       $__fill_$i = ((($add$ptr$i)) + 76|0);
       $6 = HEAP32[$__fill_$i>>2]|0;
       $call2$i = (__ZNSt3__211char_traitsIcE11eq_int_typeEii($call$i,$6)|0);
       do {
        if ($call2$i) {
         __ZNKSt3__28ios_base6getlocEv($ref$tmp$i$i,$add$ptr$i);
         __THREW__ = 0;
         $call$i1$i$i = (invoke_iii(380,($ref$tmp$i$i|0),(20096|0))|0);
         $7 = __THREW__; __THREW__ = 0;
         $8 = $7&1;
         if (!($8)) {
          $vtable$i$i$i = HEAP32[$call$i1$i$i>>2]|0;
          $vfn$i$i$i = ((($vtable$i$i$i)) + 28|0);
          $9 = HEAP32[$vfn$i$i$i>>2]|0;
          __THREW__ = 0;
          $call$i2$i$i = (invoke_iii($9|0,($call$i1$i$i|0),32)|0);
          $10 = __THREW__; __THREW__ = 0;
          $11 = $10&1;
          if (!($11)) {
           __ZNSt3__26localeD2Ev($ref$tmp$i$i);
           $conv$i = $call$i2$i$i << 24 >> 24;
           HEAP32[$__fill_$i>>2] = $conv$i;
           $$pre$phiZ2D = $add$ptr$i;$14 = $conv$i;
           label = 10;
           break;
          }
         }
         $12 = ___cxa_find_matching_catch_3(0|0)|0;
         $13 = tempRet0;
         __ZNSt3__26localeD2Ev($ref$tmp$i$i);
         $eh$lpad$body$indexZ2D = $12;
        } else {
         $$pre$i = HEAP32[$__fill_$i>>2]|0;
         $$pre$phiZ2D = $add$ptr$i;$14 = $$pre$i;
         label = 10;
        }
       } while(0);
       do {
        if ((label|0) == 10) {
         $conv6$i = $14&255;
         $vtable$i5 = HEAP32[$call$i3>>2]|0;
         $vfn$i = ((($vtable$i5)) + 24|0);
         $15 = HEAP32[$vfn$i>>2]|0;
         HEAP32[$agg$tmp$i>>2] = $5;
         __THREW__ = 0;
         ;HEAP32[$agg$tmp$i$byval_copy>>2]=HEAP32[$agg$tmp$i>>2]|0;
         $call$i67 = (invoke_iiiiii($15|0,($call$i3|0),($agg$tmp$i$byval_copy|0),($$pre$phiZ2D|0),($conv6$i|0),($__n|0))|0);
         $16 = __THREW__; __THREW__ = 0;
         $17 = $16&1;
         if ($17) {
          $25 = ___cxa_find_matching_catch_3(0|0)|0;
          $26 = tempRet0;
          $eh$lpad$body$indexZ2D = $25;
          break;
         }
         $cmp$i = ($call$i67|0)==(0|0);
         if (!($cmp$i)) {
          break L4;
         }
         $vtable26 = HEAP32[$this>>2]|0;
         $vbase$offset$ptr27 = ((($vtable26)) + -12|0);
         $vbase$offset28 = HEAP32[$vbase$offset$ptr27>>2]|0;
         $add$ptr29 = (($this) + ($vbase$offset28)|0);
         $__rdstate_$i$i = ((($add$ptr29)) + 16|0);
         $18 = HEAP32[$__rdstate_$i$i>>2]|0;
         $or$i$i = $18 | 5;
         __THREW__ = 0;
         invoke_vii(382,($add$ptr29|0),($or$i$i|0));
         $19 = __THREW__; __THREW__ = 0;
         $20 = $19&1;
         if (!($20)) {
          break L4;
         }
         $27 = ___cxa_find_matching_catch_3(0|0)|0;
         $28 = tempRet0;
         $exn$slot$1 = $27;
         break L6;
        }
       } while(0);
       $exn$slot$1 = $eh$lpad$body$indexZ2D;
      }
     } while(0);
     __ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEE6sentryD2Ev($__s);
     $exn$slot$2 = $exn$slot$1;
     label = 20;
     break L1;
    }
   } while(0);
   __ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEE6sentryD2Ev($__s);
  }
 } while(0);
 do {
  if ((label|0) == 20) {
   (___cxa_begin_catch(($exn$slot$2|0))|0);
   $vtable36 = HEAP32[$this>>2]|0;
   $vbase$offset$ptr37 = ((($vtable36)) + -12|0);
   $vbase$offset38 = HEAP32[$vbase$offset$ptr37>>2]|0;
   $add$ptr39 = (($this) + ($vbase$offset38)|0);
   __THREW__ = 0;
   invoke_vi(383,($add$ptr39|0));
   $29 = __THREW__; __THREW__ = 0;
   $30 = $29&1;
   if (!($30)) {
    ___cxa_end_catch();
    break;
   }
   $31 = ___cxa_find_matching_catch_2()|0;
   $32 = tempRet0;
   __THREW__ = 0;
   invoke_v(375);
   $33 = __THREW__; __THREW__ = 0;
   $34 = $33&1;
   if ($34) {
    $35 = ___cxa_find_matching_catch_3(0|0)|0;
    $36 = tempRet0;
    ___clang_call_terminate($35);
    // unreachable;
   } else {
    ___resumeException($31|0);
    // unreachable;
   }
  }
 } while(0);
 STACKTOP = sp;return ($this|0);
}
function __ZNSt3__27collateIcED2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__26locale5facetD2Ev($this);
 return;
}
function __ZNSt3__27collateIcED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__27collateIcED2Ev($this);
 __ZdlPv($this);
 return;
}
function __ZNSt3__26locale5facet16__on_zero_sharedEv($this) {
 $this = $this|0;
 var $0 = 0, $isnull = 0, $vfn = 0, $vtable = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $isnull = ($this|0)==(0|0);
 if (!($isnull)) {
  $vtable = HEAP32[$this>>2]|0;
  $vfn = ((($vtable)) + 4|0);
  $0 = HEAP32[$vfn>>2]|0;
  FUNCTION_TABLE_vi[$0 & 1023]($this);
 }
 return;
}
function __ZNKSt3__27collateIcE10do_compareEPKcS3_S3_S3_($this,$__lo1,$__hi1,$__lo2,$__hi2) {
 $this = $this|0;
 $__lo1 = $__lo1|0;
 $__hi1 = $__hi1|0;
 $__lo2 = $__lo2|0;
 $__hi2 = $__hi2|0;
 var $0 = 0, $1 = 0, $__lo1$addr$0 = 0, $__lo2$addr$0 = 0, $cmp = 0, $cmp11 = 0, $cmp2 = 0, $cmp4 = 0, $cmp7 = 0, $conv12 = 0, $incdec$ptr = 0, $incdec$ptr10 = 0, $retval$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $__lo1$addr$0 = $__lo1;$__lo2$addr$0 = $__lo2;
 while(1) {
  $cmp = ($__lo2$addr$0|0)==($__hi2|0);
  if ($cmp) {
   label = 7;
   break;
  }
  $cmp2 = ($__lo1$addr$0|0)==($__hi1|0);
  if ($cmp2) {
   $retval$0 = -1;
   break;
  }
  $0 = HEAP8[$__lo1$addr$0>>0]|0;
  $1 = HEAP8[$__lo2$addr$0>>0]|0;
  $cmp4 = ($0<<24>>24)<($1<<24>>24);
  if ($cmp4) {
   $retval$0 = -1;
   break;
  }
  $cmp7 = ($1<<24>>24)<($0<<24>>24);
  if ($cmp7) {
   $retval$0 = 1;
   break;
  }
  $incdec$ptr = ((($__lo1$addr$0)) + 1|0);
  $incdec$ptr10 = ((($__lo2$addr$0)) + 1|0);
  $__lo1$addr$0 = $incdec$ptr;$__lo2$addr$0 = $incdec$ptr10;
 }
 if ((label|0) == 7) {
  $cmp11 = ($__lo1$addr$0|0)!=($__hi1|0);
  $conv12 = $cmp11&1;
  $retval$0 = $conv12;
 }
 return ($retval$0|0);
}
function __ZNKSt3__27collateIcE12do_transformEPKcS3_($agg$result,$this,$__lo,$__hi) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__lo = $__lo|0;
 $__hi = $__hi|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 ;HEAP32[$agg$result>>2]=0|0;HEAP32[$agg$result+4>>2]=0|0;HEAP32[$agg$result+8>>2]=0|0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initIPKcEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeESA_SA_($agg$result,$__lo,$__hi);
 return;
}
function __ZNKSt3__27collateIcE7do_hashEPKcS3_($this,$__lo,$__hi) {
 $this = $this|0;
 $__lo = $__lo|0;
 $__hi = $__hi|0;
 var $0 = 0, $__h$0 = 0, $__p$0 = 0, $add = 0, $and = 0, $cmp = 0, $conv = 0, $incdec$ptr = 0, $or = 0, $shl = 0, $shr = 0, $xor = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $__h$0 = 0;$__p$0 = $__lo;
 while(1) {
  $cmp = ($__p$0|0)==($__hi|0);
  if ($cmp) {
   break;
  }
  $shl = $__h$0 << 4;
  $0 = HEAP8[$__p$0>>0]|0;
  $conv = $0 << 24 >> 24;
  $add = (($conv) + ($shl))|0;
  $and = $add & -268435456;
  $shr = $and >>> 24;
  $or = $shr | $and;
  $xor = $or ^ $add;
  $incdec$ptr = ((($__p$0)) + 1|0);
  $__h$0 = $xor;$__p$0 = $incdec$ptr;
 }
 return ($__h$0|0);
}
function __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initIPKcEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeESA_SA_($this,$__first,$__last) {
 $this = $this|0;
 $__first = $__first|0;
 $__last = $__last|0;
 var $0 = 0, $1 = 0, $__cap_$i = 0, $__first$addr$0 = 0, $__p$0 = 0, $__p$0$ph = 0, $__size_$i = 0, $__size_$i15 = 0, $add$i$i = 0, $and$i$i = 0, $call$i$i$i = 0, $cmp = 0, $cmp11 = 0, $cmp3 = 0, $conv$i = 0, $incdec$ptr = 0, $incdec$ptr12 = 0, $or$i = 0, $ref$tmp = 0, $scevgep18 = 0;
 var $sub$ptr$lhs$cast$i$i = 0, $sub$ptr$rhs$cast$i$i = 0, $sub$ptr$sub$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $sub$ptr$rhs$cast$i$i = $__first;
 $ref$tmp = sp;
 $sub$ptr$lhs$cast$i$i = $__last;
 $sub$ptr$sub$i$i = (($sub$ptr$lhs$cast$i$i) - ($sub$ptr$rhs$cast$i$i))|0;
 $cmp = ($sub$ptr$sub$i$i>>>0)>(4294967279);
 if ($cmp) {
  __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv($this);
  label = 5;
 } else {
  $cmp3 = ($sub$ptr$sub$i$i>>>0)<(11);
  if ($cmp3) {
   $conv$i = $sub$ptr$sub$i$i&255;
   $__size_$i = ((($this)) + 11|0);
   HEAP8[$__size_$i>>0] = $conv$i;
   $__p$0$ph = $this;
  } else {
   label = 5;
  }
 }
 if ((label|0) == 5) {
  $add$i$i = (($sub$ptr$sub$i$i) + 16)|0;
  $and$i$i = $add$i$i & -16;
  $call$i$i$i = (__Znwj($and$i$i)|0);
  HEAP32[$this>>2] = $call$i$i$i;
  $or$i = $and$i$i | -2147483648;
  $__cap_$i = ((($this)) + 8|0);
  HEAP32[$__cap_$i>>2] = $or$i;
  $__size_$i15 = ((($this)) + 4|0);
  HEAP32[$__size_$i15>>2] = $sub$ptr$sub$i$i;
  $__p$0$ph = $call$i$i$i;
 }
 $0 = $__last;
 $1 = (($0) - ($sub$ptr$rhs$cast$i$i))|0;
 $__first$addr$0 = $__first;$__p$0 = $__p$0$ph;
 while(1) {
  $cmp11 = ($__first$addr$0|0)==($__last|0);
  if ($cmp11) {
   break;
  }
  __ZNSt3__211char_traitsIcE6assignERcRKc($__p$0,$__first$addr$0);
  $incdec$ptr = ((($__first$addr$0)) + 1|0);
  $incdec$ptr12 = ((($__p$0)) + 1|0);
  $__first$addr$0 = $incdec$ptr;$__p$0 = $incdec$ptr12;
 }
 $scevgep18 = (($__p$0$ph) + ($1)|0);
 HEAP8[$ref$tmp>>0] = 0;
 __ZNSt3__211char_traitsIcE6assignERcRKc($scevgep18,$ref$tmp);
 STACKTOP = sp;return;
}
function __ZNSt3__26locale5facetD2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNSt3__27collateIwED2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__26locale5facetD2Ev($this);
 return;
}
function __ZNSt3__27collateIwED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__27collateIwED2Ev($this);
 __ZdlPv($this);
 return;
}
function __ZNKSt3__27collateIwE10do_compareEPKwS3_S3_S3_($this,$__lo1,$__hi1,$__lo2,$__hi2) {
 $this = $this|0;
 $__lo1 = $__lo1|0;
 $__hi1 = $__hi1|0;
 $__lo2 = $__lo2|0;
 $__hi2 = $__hi2|0;
 var $0 = 0, $1 = 0, $__lo1$addr$0 = 0, $__lo2$addr$0 = 0, $cmp = 0, $cmp2 = 0, $cmp3 = 0, $cmp4 = 0, $cmp8 = 0, $conv = 0, $incdec$ptr = 0, $incdec$ptr7 = 0, $retval$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $__lo1$addr$0 = $__lo1;$__lo2$addr$0 = $__lo2;
 while(1) {
  $cmp = ($__lo2$addr$0|0)==($__hi2|0);
  if ($cmp) {
   label = 7;
   break;
  }
  $cmp2 = ($__lo1$addr$0|0)==($__hi1|0);
  if ($cmp2) {
   $retval$0 = -1;
   break;
  }
  $0 = HEAP32[$__lo1$addr$0>>2]|0;
  $1 = HEAP32[$__lo2$addr$0>>2]|0;
  $cmp3 = ($0|0)<($1|0);
  if ($cmp3) {
   $retval$0 = -1;
   break;
  }
  $cmp4 = ($1|0)<($0|0);
  if ($cmp4) {
   $retval$0 = 1;
   break;
  }
  $incdec$ptr = ((($__lo1$addr$0)) + 4|0);
  $incdec$ptr7 = ((($__lo2$addr$0)) + 4|0);
  $__lo1$addr$0 = $incdec$ptr;$__lo2$addr$0 = $incdec$ptr7;
 }
 if ((label|0) == 7) {
  $cmp8 = ($__lo1$addr$0|0)!=($__hi1|0);
  $conv = $cmp8&1;
  $retval$0 = $conv;
 }
 return ($retval$0|0);
}
function __ZNKSt3__27collateIwE12do_transformEPKwS3_($agg$result,$this,$__lo,$__hi) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__lo = $__lo|0;
 $__hi = $__hi|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 ;HEAP32[$agg$result>>2]=0|0;HEAP32[$agg$result+4>>2]=0|0;HEAP32[$agg$result+8>>2]=0|0;
 __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initIPKwEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeESA_SA_($agg$result,$__lo,$__hi);
 return;
}
function __ZNKSt3__27collateIwE7do_hashEPKwS3_($this,$__lo,$__hi) {
 $this = $this|0;
 $__lo = $__lo|0;
 $__hi = $__hi|0;
 var $0 = 0, $__h$0 = 0, $__p$0 = 0, $add = 0, $and = 0, $cmp = 0, $incdec$ptr = 0, $or = 0, $shl = 0, $shr = 0, $xor = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $__h$0 = 0;$__p$0 = $__lo;
 while(1) {
  $cmp = ($__p$0|0)==($__hi|0);
  if ($cmp) {
   break;
  }
  $shl = $__h$0 << 4;
  $0 = HEAP32[$__p$0>>2]|0;
  $add = (($0) + ($shl))|0;
  $and = $add & -268435456;
  $shr = $and >>> 24;
  $or = $shr | $and;
  $xor = $or ^ $add;
  $incdec$ptr = ((($__p$0)) + 4|0);
  $__h$0 = $xor;$__p$0 = $incdec$ptr;
 }
 return ($__h$0|0);
}
function __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initIPKwEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeESA_SA_($this,$__first,$__last) {
 $this = $this|0;
 $__first = $__first|0;
 $__last = $__last|0;
 var $0 = 0, $__cap_$i = 0, $__first$addr$0 = 0, $__p$0 = 0, $__size_$i = 0, $__size_$i15 = 0, $add$i$i = 0, $and$i$i = 0, $call$i$i$i = 0, $cmp = 0, $cmp$i$i = 0, $cmp11 = 0, $cmp3 = 0, $conv$i = 0, $exception$i$i = 0, $incdec$ptr = 0, $incdec$ptr12 = 0, $mul$i$i = 0, $or$i = 0, $ref$tmp = 0;
 var $sub$ptr$div$i$i = 0, $sub$ptr$lhs$cast$i$i = 0, $sub$ptr$rhs$cast$i$i = 0, $sub$ptr$sub$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $ref$tmp = sp;
 $sub$ptr$lhs$cast$i$i = $__last;
 $sub$ptr$rhs$cast$i$i = $__first;
 $sub$ptr$sub$i$i = (($sub$ptr$lhs$cast$i$i) - ($sub$ptr$rhs$cast$i$i))|0;
 $sub$ptr$div$i$i = $sub$ptr$sub$i$i >> 2;
 $cmp = ($sub$ptr$div$i$i>>>0)>(1073741807);
 if ($cmp) {
  __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv($this);
  label = 5;
 } else {
  $cmp3 = ($sub$ptr$div$i$i>>>0)<(2);
  if ($cmp3) {
   $conv$i = $sub$ptr$div$i$i&255;
   $0 = ((($this)) + 8|0);
   $__size_$i = ((($0)) + 3|0);
   HEAP8[$__size_$i>>0] = $conv$i;
   $__first$addr$0 = $__first;$__p$0 = $this;
  } else {
   label = 5;
  }
 }
 do {
  if ((label|0) == 5) {
   $add$i$i = (($sub$ptr$div$i$i) + 4)|0;
   $and$i$i = $add$i$i & -4;
   $cmp$i$i = ($and$i$i>>>0)>(1073741823);
   if ($cmp$i$i) {
    $exception$i$i = (___cxa_allocate_exception(4)|0);
    __ZNSt9bad_allocC2Ev($exception$i$i);
    ___cxa_throw(($exception$i$i|0),(1888|0),(318|0));
    // unreachable;
   } else {
    $mul$i$i = $and$i$i << 2;
    $call$i$i$i = (__Znwj($mul$i$i)|0);
    HEAP32[$this>>2] = $call$i$i$i;
    $or$i = $and$i$i | -2147483648;
    $__cap_$i = ((($this)) + 8|0);
    HEAP32[$__cap_$i>>2] = $or$i;
    $__size_$i15 = ((($this)) + 4|0);
    HEAP32[$__size_$i15>>2] = $sub$ptr$div$i$i;
    $__first$addr$0 = $__first;$__p$0 = $call$i$i$i;
    break;
   }
  }
 } while(0);
 while(1) {
  $cmp11 = ($__first$addr$0|0)==($__last|0);
  if ($cmp11) {
   break;
  }
  __ZNSt3__211char_traitsIwE6assignERwRKw($__p$0,$__first$addr$0);
  $incdec$ptr = ((($__first$addr$0)) + 4|0);
  $incdec$ptr12 = ((($__p$0)) + 4|0);
  $__first$addr$0 = $incdec$ptr;$__p$0 = $incdec$ptr12;
 }
 HEAP32[$ref$tmp>>2] = 0;
 __ZNSt3__211char_traitsIwE6assignERwRKw($__p$0,$ref$tmp);
 STACKTOP = sp;return;
}
function __ZNSt3__211char_traitsIwE6assignERwRKw($__c1,$__c2) {
 $__c1 = $__c1|0;
 $__c2 = $__c2|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$__c2>>2]|0;
 HEAP32[$__c1>>2] = $0;
 return;
}
function __ZNSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__26locale5facetD2Ev($this);
 return;
}
function __ZNSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__26locale5facetD2Ev($this);
 __ZdlPv($this);
 return;
}
function __ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRb($this,$__b,$__e,$__iob,$__err,$__v) {
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__fmtflags_$i = 0, $__lv = 0, $__names = 0, $add$ptr = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $agg$tmp15 = 0, $agg$tmp15$byval_copy = 0, $agg$tmp2 = 0, $agg$tmp2$byval_copy = 0, $and = 0, $arraydestroy$done25 = 0;
 var $arraydestroy$done31 = 0, $arraydestroy$element24 = 0, $arraydestroy$element30 = 0, $arraydestroy$elementPast23 = 0, $arraydestroy$elementPast29 = 0, $arrayinit$element$ptr = 0, $call$i18 = 0, $call$i19 = 0, $call19 = 0, $call3 = 0, $cmp = 0, $cmp21 = 0, $ehselector$slot$2 = 0, $exn$slot$2 = 0, $frombool = 0, $ref$tmp5 = 0, $ref$tmp7 = 0, $retval$sroa$0$0 = 0, $retval$sroa$0$0$copyload = 0, $retval$sroa$0$0$copyload17 = 0;
 var $vfn = 0, $vfn$i = 0, $vfn$i21 = 0, $vtable = 0, $vtable$i = 0, $vtable$i20 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $agg$tmp15$byval_copy = sp + 60|0;
 $agg$tmp2$byval_copy = sp + 56|0;
 $agg$tmp$byval_copy = sp + 52|0;
 $__lv = sp + 48|0;
 $agg$tmp = sp + 44|0;
 $agg$tmp2 = sp + 40|0;
 $ref$tmp5 = sp + 36|0;
 $ref$tmp7 = sp + 32|0;
 $__names = sp + 8|0;
 $agg$tmp15 = sp;
 $__fmtflags_$i = ((($__iob)) + 4|0);
 $0 = HEAP32[$__fmtflags_$i>>2]|0;
 $and = $0 & 1;
 $cmp = ($and|0)==(0);
 L1: do {
  if ($cmp) {
   HEAP32[$__lv>>2] = -1;
   $vtable = HEAP32[$this>>2]|0;
   $vfn = ((($vtable)) + 16|0);
   $1 = HEAP32[$vfn>>2]|0;
   $2 = HEAP32[$__b>>2]|0;
   HEAP32[$agg$tmp>>2] = $2;
   $3 = HEAP32[$__e>>2]|0;
   HEAP32[$agg$tmp2>>2] = $3;
   ;HEAP32[$agg$tmp$byval_copy>>2]=HEAP32[$agg$tmp>>2]|0;
   ;HEAP32[$agg$tmp2$byval_copy>>2]=HEAP32[$agg$tmp2>>2]|0;
   $call3 = (FUNCTION_TABLE_iiiiiii[$1 & 511]($this,$agg$tmp$byval_copy,$agg$tmp2$byval_copy,$__iob,$__err,$__lv)|0);
   HEAP32[$__b>>2] = $call3;
   $4 = HEAP32[$__lv>>2]|0;
   switch ($4|0) {
   case 0:  {
    HEAP8[$__v>>0] = 0;
    break;
   }
   case 1:  {
    HEAP8[$__v>>0] = 1;
    break;
   }
   default: {
    HEAP8[$__v>>0] = 1;
    HEAP32[$__err>>2] = 4;
   }
   }
   $retval$sroa$0$0$copyload = HEAP32[$__b>>2]|0;
   $retval$sroa$0$0 = $retval$sroa$0$0$copyload;
  } else {
   __ZNKSt3__28ios_base6getlocEv($ref$tmp5,$__iob);
   __THREW__ = 0;
   $call$i18 = (invoke_iii(380,($ref$tmp5|0),(20096|0))|0);
   $5 = __THREW__; __THREW__ = 0;
   $6 = $5&1;
   do {
    if ($6) {
     $20 = ___cxa_find_matching_catch_2()|0;
     $21 = tempRet0;
     __ZNSt3__26localeD2Ev($ref$tmp5);
     $ehselector$slot$2 = $21;$exn$slot$2 = $20;
    } else {
     __ZNSt3__26localeD2Ev($ref$tmp5);
     __ZNKSt3__28ios_base6getlocEv($ref$tmp7,$__iob);
     __THREW__ = 0;
     $call$i19 = (invoke_iii(380,($ref$tmp7|0),(20112|0))|0);
     $7 = __THREW__; __THREW__ = 0;
     $8 = $7&1;
     if ($8) {
      $22 = ___cxa_find_matching_catch_2()|0;
      $23 = tempRet0;
      __ZNSt3__26localeD2Ev($ref$tmp7);
      $ehselector$slot$2 = $23;$exn$slot$2 = $22;
      break;
     }
     __ZNSt3__26localeD2Ev($ref$tmp7);
     $vtable$i = HEAP32[$call$i19>>2]|0;
     $vfn$i = ((($vtable$i)) + 24|0);
     $9 = HEAP32[$vfn$i>>2]|0;
     __THREW__ = 0;
     invoke_vii($9|0,($__names|0),($call$i19|0));
     $10 = __THREW__; __THREW__ = 0;
     $11 = $10&1;
     if ($11) {
      $12 = ___cxa_find_matching_catch_2()|0;
      $13 = tempRet0;
      $ehselector$slot$2 = $13;$exn$slot$2 = $12;
      break;
     }
     $arrayinit$element$ptr = ((($__names)) + 12|0);
     $vtable$i20 = HEAP32[$call$i19>>2]|0;
     $vfn$i21 = ((($vtable$i20)) + 28|0);
     $14 = HEAP32[$vfn$i21>>2]|0;
     __THREW__ = 0;
     invoke_vii($14|0,($arrayinit$element$ptr|0),($call$i19|0));
     $15 = __THREW__; __THREW__ = 0;
     $16 = $15&1;
     if ($16) {
      $26 = ___cxa_find_matching_catch_2()|0;
      $27 = tempRet0;
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__names);
      $ehselector$slot$2 = $27;$exn$slot$2 = $26;
      break;
     }
     $17 = HEAP32[$__e>>2]|0;
     HEAP32[$agg$tmp15>>2] = $17;
     $add$ptr = ((($__names)) + 24|0);
     __THREW__ = 0;
     ;HEAP32[$agg$tmp15$byval_copy>>2]=HEAP32[$agg$tmp15>>2]|0;
     $call19 = (invoke_iiiiiiii(390,($__b|0),($agg$tmp15$byval_copy|0),($__names|0),($add$ptr|0),($call$i18|0),($__err|0),1)|0);
     $18 = __THREW__; __THREW__ = 0;
     $19 = $18&1;
     if ($19) {
      $24 = ___cxa_find_matching_catch_2()|0;
      $25 = tempRet0;
      $arraydestroy$elementPast29 = $add$ptr;
      while(1) {
       $arraydestroy$element30 = ((($arraydestroy$elementPast29)) + -12|0);
       __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($arraydestroy$element30);
       $arraydestroy$done31 = ($arraydestroy$element30|0)==($__names|0);
       if ($arraydestroy$done31) {
        break;
       } else {
        $arraydestroy$elementPast29 = $arraydestroy$element30;
       }
      }
      $ehselector$slot$2 = $25;$exn$slot$2 = $24;
      break;
     } else {
      $cmp21 = ($call19|0)==($__names|0);
      $frombool = $cmp21&1;
      HEAP8[$__v>>0] = $frombool;
      $retval$sroa$0$0$copyload17 = HEAP32[$__b>>2]|0;
      $arraydestroy$elementPast23 = $add$ptr;
      while(1) {
       $arraydestroy$element24 = ((($arraydestroy$elementPast23)) + -12|0);
       __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($arraydestroy$element24);
       $arraydestroy$done25 = ($arraydestroy$element24|0)==($__names|0);
       if ($arraydestroy$done25) {
        break;
       } else {
        $arraydestroy$elementPast23 = $arraydestroy$element24;
       }
      }
      $retval$sroa$0$0 = $retval$sroa$0$0$copyload17;
      break L1;
     }
    }
   } while(0);
   ___resumeException($exn$slot$2|0);
   // unreachable;
  }
 } while(0);
 STACKTOP = sp;return ($retval$sroa$0$0|0);
}
function __ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRl($this,$__b,$__e,$__iob,$__err,$__v) {
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $0 = 0, $1 = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $agg$tmp2 = 0, $agg$tmp2$byval_copy = 0, $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $agg$tmp2$byval_copy = sp + 12|0;
 $agg$tmp$byval_copy = sp + 8|0;
 $agg$tmp = sp + 4|0;
 $agg$tmp2 = sp;
 $0 = HEAP32[$__b>>2]|0;
 HEAP32[$agg$tmp>>2] = $0;
 $1 = HEAP32[$__e>>2]|0;
 HEAP32[$agg$tmp2>>2] = $1;
 ;HEAP32[$agg$tmp$byval_copy>>2]=HEAP32[$agg$tmp>>2]|0;
 ;HEAP32[$agg$tmp2$byval_copy>>2]=HEAP32[$agg$tmp2>>2]|0;
 $call = (__ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE15__do_get_signedIlEES4_S4_S4_RNS_8ios_baseERjRT_($this,$agg$tmp$byval_copy,$agg$tmp2$byval_copy,$__iob,$__err,$__v)|0);
 STACKTOP = sp;return ($call|0);
}
function __ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRx($this,$__b,$__e,$__iob,$__err,$__v) {
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $0 = 0, $1 = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $agg$tmp2 = 0, $agg$tmp2$byval_copy = 0, $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $agg$tmp2$byval_copy = sp + 12|0;
 $agg$tmp$byval_copy = sp + 8|0;
 $agg$tmp = sp + 4|0;
 $agg$tmp2 = sp;
 $0 = HEAP32[$__b>>2]|0;
 HEAP32[$agg$tmp>>2] = $0;
 $1 = HEAP32[$__e>>2]|0;
 HEAP32[$agg$tmp2>>2] = $1;
 ;HEAP32[$agg$tmp$byval_copy>>2]=HEAP32[$agg$tmp>>2]|0;
 ;HEAP32[$agg$tmp2$byval_copy>>2]=HEAP32[$agg$tmp2>>2]|0;
 $call = (__ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE15__do_get_signedIxEES4_S4_S4_RNS_8ios_baseERjRT_($this,$agg$tmp$byval_copy,$agg$tmp2$byval_copy,$__iob,$__err,$__v)|0);
 STACKTOP = sp;return ($call|0);
}
function __ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRt($this,$__b,$__e,$__iob,$__err,$__v) {
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $0 = 0, $1 = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $agg$tmp2 = 0, $agg$tmp2$byval_copy = 0, $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $agg$tmp2$byval_copy = sp + 12|0;
 $agg$tmp$byval_copy = sp + 8|0;
 $agg$tmp = sp + 4|0;
 $agg$tmp2 = sp;
 $0 = HEAP32[$__b>>2]|0;
 HEAP32[$agg$tmp>>2] = $0;
 $1 = HEAP32[$__e>>2]|0;
 HEAP32[$agg$tmp2>>2] = $1;
 ;HEAP32[$agg$tmp$byval_copy>>2]=HEAP32[$agg$tmp>>2]|0;
 ;HEAP32[$agg$tmp2$byval_copy>>2]=HEAP32[$agg$tmp2>>2]|0;
 $call = (__ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__do_get_unsignedItEES4_S4_S4_RNS_8ios_baseERjRT_($this,$agg$tmp$byval_copy,$agg$tmp2$byval_copy,$__iob,$__err,$__v)|0);
 STACKTOP = sp;return ($call|0);
}
function __ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjS8_($this,$__b,$__e,$__iob,$__err,$__v) {
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $0 = 0, $1 = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $agg$tmp2 = 0, $agg$tmp2$byval_copy = 0, $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $agg$tmp2$byval_copy = sp + 12|0;
 $agg$tmp$byval_copy = sp + 8|0;
 $agg$tmp = sp + 4|0;
 $agg$tmp2 = sp;
 $0 = HEAP32[$__b>>2]|0;
 HEAP32[$agg$tmp>>2] = $0;
 $1 = HEAP32[$__e>>2]|0;
 HEAP32[$agg$tmp2>>2] = $1;
 ;HEAP32[$agg$tmp$byval_copy>>2]=HEAP32[$agg$tmp>>2]|0;
 ;HEAP32[$agg$tmp2$byval_copy>>2]=HEAP32[$agg$tmp2>>2]|0;
 $call = (__ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__do_get_unsignedIjEES4_S4_S4_RNS_8ios_baseERjRT_($this,$agg$tmp$byval_copy,$agg$tmp2$byval_copy,$__iob,$__err,$__v)|0);
 STACKTOP = sp;return ($call|0);
}
function __ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRm($this,$__b,$__e,$__iob,$__err,$__v) {
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $0 = 0, $1 = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $agg$tmp2 = 0, $agg$tmp2$byval_copy = 0, $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $agg$tmp2$byval_copy = sp + 12|0;
 $agg$tmp$byval_copy = sp + 8|0;
 $agg$tmp = sp + 4|0;
 $agg$tmp2 = sp;
 $0 = HEAP32[$__b>>2]|0;
 HEAP32[$agg$tmp>>2] = $0;
 $1 = HEAP32[$__e>>2]|0;
 HEAP32[$agg$tmp2>>2] = $1;
 ;HEAP32[$agg$tmp$byval_copy>>2]=HEAP32[$agg$tmp>>2]|0;
 ;HEAP32[$agg$tmp2$byval_copy>>2]=HEAP32[$agg$tmp2>>2]|0;
 $call = (__ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__do_get_unsignedImEES4_S4_S4_RNS_8ios_baseERjRT_($this,$agg$tmp$byval_copy,$agg$tmp2$byval_copy,$__iob,$__err,$__v)|0);
 STACKTOP = sp;return ($call|0);
}
function __ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRy($this,$__b,$__e,$__iob,$__err,$__v) {
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $0 = 0, $1 = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $agg$tmp2 = 0, $agg$tmp2$byval_copy = 0, $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $agg$tmp2$byval_copy = sp + 12|0;
 $agg$tmp$byval_copy = sp + 8|0;
 $agg$tmp = sp + 4|0;
 $agg$tmp2 = sp;
 $0 = HEAP32[$__b>>2]|0;
 HEAP32[$agg$tmp>>2] = $0;
 $1 = HEAP32[$__e>>2]|0;
 HEAP32[$agg$tmp2>>2] = $1;
 ;HEAP32[$agg$tmp$byval_copy>>2]=HEAP32[$agg$tmp>>2]|0;
 ;HEAP32[$agg$tmp2$byval_copy>>2]=HEAP32[$agg$tmp2>>2]|0;
 $call = (__ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__do_get_unsignedIyEES4_S4_S4_RNS_8ios_baseERjRT_($this,$agg$tmp$byval_copy,$agg$tmp2$byval_copy,$__iob,$__err,$__v)|0);
 STACKTOP = sp;return ($call|0);
}
function __ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRf($this,$__b,$__e,$__iob,$__err,$__v) {
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $0 = 0, $1 = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $agg$tmp2 = 0, $agg$tmp2$byval_copy = 0, $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $agg$tmp2$byval_copy = sp + 12|0;
 $agg$tmp$byval_copy = sp + 8|0;
 $agg$tmp = sp + 4|0;
 $agg$tmp2 = sp;
 $0 = HEAP32[$__b>>2]|0;
 HEAP32[$agg$tmp>>2] = $0;
 $1 = HEAP32[$__e>>2]|0;
 HEAP32[$agg$tmp2>>2] = $1;
 ;HEAP32[$agg$tmp$byval_copy>>2]=HEAP32[$agg$tmp>>2]|0;
 ;HEAP32[$agg$tmp2$byval_copy>>2]=HEAP32[$agg$tmp2>>2]|0;
 $call = (__ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE23__do_get_floating_pointIfEES4_S4_S4_RNS_8ios_baseERjRT_($this,$agg$tmp$byval_copy,$agg$tmp2$byval_copy,$__iob,$__err,$__v)|0);
 STACKTOP = sp;return ($call|0);
}
function __ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRd($this,$__b,$__e,$__iob,$__err,$__v) {
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $0 = 0, $1 = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $agg$tmp2 = 0, $agg$tmp2$byval_copy = 0, $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $agg$tmp2$byval_copy = sp + 12|0;
 $agg$tmp$byval_copy = sp + 8|0;
 $agg$tmp = sp + 4|0;
 $agg$tmp2 = sp;
 $0 = HEAP32[$__b>>2]|0;
 HEAP32[$agg$tmp>>2] = $0;
 $1 = HEAP32[$__e>>2]|0;
 HEAP32[$agg$tmp2>>2] = $1;
 ;HEAP32[$agg$tmp$byval_copy>>2]=HEAP32[$agg$tmp>>2]|0;
 ;HEAP32[$agg$tmp2$byval_copy>>2]=HEAP32[$agg$tmp2>>2]|0;
 $call = (__ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE23__do_get_floating_pointIdEES4_S4_S4_RNS_8ios_baseERjRT_($this,$agg$tmp$byval_copy,$agg$tmp2$byval_copy,$__iob,$__err,$__v)|0);
 STACKTOP = sp;return ($call|0);
}
function __ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRe($this,$__b,$__e,$__iob,$__err,$__v) {
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $0 = 0, $1 = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $agg$tmp2 = 0, $agg$tmp2$byval_copy = 0, $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $agg$tmp2$byval_copy = sp + 12|0;
 $agg$tmp$byval_copy = sp + 8|0;
 $agg$tmp = sp + 4|0;
 $agg$tmp2 = sp;
 $0 = HEAP32[$__b>>2]|0;
 HEAP32[$agg$tmp>>2] = $0;
 $1 = HEAP32[$__e>>2]|0;
 HEAP32[$agg$tmp2>>2] = $1;
 ;HEAP32[$agg$tmp$byval_copy>>2]=HEAP32[$agg$tmp>>2]|0;
 ;HEAP32[$agg$tmp2$byval_copy>>2]=HEAP32[$agg$tmp2>>2]|0;
 $call = (__ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE23__do_get_floating_pointIeEES4_S4_S4_RNS_8ios_baseERjRT_($this,$agg$tmp$byval_copy,$agg$tmp2$byval_copy,$__iob,$__err,$__v)|0);
 STACKTOP = sp;return ($call|0);
}
function __ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRPv($this,$__b,$__e,$__iob,$__err,$__v) {
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$pre = 0, $$pre$i$i$i = 0, $$pre$i$i$i41 = 0, $$pre$i17$i$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $9 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__a_end = 0, $__atoms = 0, $__buf = 0, $__cap_$i$i = 0, $__cap_$i$i97 = 0, $__dc = 0, $__einp_$i$i = 0;
 var $__einp_$i$i$i$i = 0, $__einp_$i$i$i$i29 = 0, $__einp_$i$i4$i$i = 0, $__einp_$i$i4$i$i49 = 0, $__g = 0, $__g_end = 0, $__grouping = 0, $__i$0$i$i = 0, $__i$0$i$i18 = 0, $__ninp_$i$i = 0, $__ninp_$i$i$i$i = 0, $__ninp_$i$i$i$i28 = 0, $__ninp_$i$i3$i$i = 0, $__ninp_$i$i3$i$i48 = 0, $__size_$i$i = 0, $__size_$i3$i = 0, $add$ptr = 0, $add$ptr24 = 0, $and$i$i = 0, $and$i$i98 = 0;
 var $arrayidx$i$i = 0, $arrayidx$i$i21 = 0, $call$i$i$i$i13 = 0, $call$i$i$i$i67 = 0, $call$i$i114 = 0, $call$i$i9$i$i14 = 0, $call$i$i9$i$i69 = 0, $call$i15 = 0, $call3$i$i = 0, $call3$i$i$i = 0, $call3$i$i$i$i = 0, $call3$i$i$i$i35 = 0, $call3$i$i$i38 = 0, $call3$i$i11$i$i = 0, $call3$i$i11$i$i55 = 0, $call3$i14$i$i = 0, $call3$i14$i$i58 = 0, $call31 = 0, $call39 = 0, $call4$i$i$i = 0;
 var $call4$i$i$i39 = 0, $call4$i15$i$i = 0, $call4$i15$i$i59 = 0, $call41 = 0, $cmp = 0, $cmp$i$i$i$i = 0, $cmp$i$i$i$i30 = 0, $cmp$i$i113 = 0, $cmp$i$i118 = 0, $cmp$i$i5$i$i = 0, $cmp$i$i5$i$i50 = 0, $cmp42 = 0, $cond$i = 0, $cond$i$i = 0, $cond$i$i$i = 0, $cond$i$i111 = 0, $cond$i101 = 0, $cond$i74 = 0, $conv$i = 0, $conv$i$i = 0;
 var $ehselector$slot$0 = 0, $ehselector$slot$2 = 0, $ehselector$slot$3 = 0, $exitcond$i$i = 0, $exitcond$i$i19 = 0, $exn$slot$0 = 0, $exn$slot$2 = 0, $exn$slot$3 = 0, $inc$i$i = 0, $inc$i$i22 = 0, $incdec$ptr$i$i = 0, $mul = 0, $or = 0, $phitmp$i = 0, $phitmp$i99 = 0, $ref$tmp = 0, $retval$0$i$i = 0, $retval$0$i$i$i$i = 0, $retval$0$i$i$i$i37 = 0, $retval$0$i$i13$i$i = 0;
 var $retval$0$i$i13$i$i57 = 0, $retval$sroa$0$0$copyload = 0, $sub$ptr$rhs$cast = 0, $sub$ptr$sub = 0, $tobool = 0, $tobool$i$i = 0, $tobool$i$i$i = 0, $tobool$i$i$i$i = 0, $tobool$i$i$i106 = 0, $tobool$i$i$i25 = 0, $tobool$i$i$i27 = 0, $tobool$i$i72 = 0, $tobool$i$i96 = 0, $tobool$i2$i$i = 0, $tobool$i2$i$i46 = 0, $vararg_buffer = 0, $vfn$i = 0, $vfn$i$i = 0, $vfn$i$i$i$i = 0, $vfn$i$i$i$i33 = 0;
 var $vfn$i$i120 = 0, $vfn$i$i8$i$i = 0, $vfn$i$i8$i$i53 = 0, $vtable$i = 0, $vtable$i$i = 0, $vtable$i$i$i$i = 0, $vtable$i$i$i$i32 = 0, $vtable$i$i119 = 0, $vtable$i$i7$i$i = 0, $vtable$i$i7$i$i52 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 240|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(240|0);
 $vararg_buffer = sp;
 $__atoms = sp + 208|0;
 $__grouping = sp + 196|0;
 $ref$tmp = sp + 192|0;
 $__buf = sp + 180|0;
 $__a_end = sp + 176|0;
 $__g = sp + 16|0;
 $__g_end = sp + 8|0;
 $__dc = sp + 4|0;
 ;HEAP32[$__grouping>>2]=0|0;HEAP32[$__grouping+4>>2]=0|0;HEAP32[$__grouping+8>>2]=0|0;
 $__i$0$i$i = 0;
 while(1) {
  $exitcond$i$i = ($__i$0$i$i|0)==(3);
  if ($exitcond$i$i) {
   break;
  }
  $arrayidx$i$i = (($__grouping) + ($__i$0$i$i<<2)|0);
  HEAP32[$arrayidx$i$i>>2] = 0;
  $inc$i$i = (($__i$0$i$i) + 1)|0;
  $__i$0$i$i = $inc$i$i;
 }
 __THREW__ = 0;
 invoke_vii(379,($ref$tmp|0),($__iob|0));
 $0 = __THREW__; __THREW__ = 0;
 $1 = $0&1;
 do {
  if ($1) {
   $37 = ___cxa_find_matching_catch_2()|0;
   $38 = tempRet0;
   $ehselector$slot$0 = $38;$exn$slot$0 = $37;
   label = 36;
  } else {
   __THREW__ = 0;
   $call$i15 = (invoke_iii(380,($ref$tmp|0),(20096|0))|0);
   $2 = __THREW__; __THREW__ = 0;
   $3 = $2&1;
   if (!($3)) {
    $vtable$i = HEAP32[$call$i15>>2]|0;
    $vfn$i = ((($vtable$i)) + 32|0);
    $4 = HEAP32[$vfn$i>>2]|0;
    __THREW__ = 0;
    (invoke_iiiii($4|0,($call$i15|0),(15690|0),((15716)|0),($__atoms|0))|0);
    $5 = __THREW__; __THREW__ = 0;
    $6 = $5&1;
    if (!($6)) {
     __ZNSt3__26localeD2Ev($ref$tmp);
     ;HEAP32[$__buf>>2]=0|0;HEAP32[$__buf+4>>2]=0|0;HEAP32[$__buf+8>>2]=0|0;
     $__i$0$i$i18 = 0;
     while(1) {
      $exitcond$i$i19 = ($__i$0$i$i18|0)==(3);
      if ($exitcond$i$i19) {
       break;
      }
      $arrayidx$i$i21 = (($__buf) + ($__i$0$i$i18<<2)|0);
      HEAP32[$arrayidx$i$i21>>2] = 0;
      $inc$i$i22 = (($__i$0$i$i18) + 1)|0;
      $__i$0$i$i18 = $inc$i$i22;
     }
     $__size_$i$i = ((($__buf)) + 11|0);
     $7 = HEAP8[$__size_$i$i>>0]|0;
     $tobool$i$i = ($7<<24>>24)<(0);
     if ($tobool$i$i) {
      $__cap_$i$i = ((($__buf)) + 8|0);
      $8 = HEAP32[$__cap_$i$i>>2]|0;
      $and$i$i = $8 & 2147483647;
      $phitmp$i = (($and$i$i) + -1)|0;
      $cond$i = $phitmp$i;
     } else {
      $cond$i = 10;
     }
     __THREW__ = 0;
     invoke_viii(377,($__buf|0),($cond$i|0),0);
     $9 = __THREW__; __THREW__ = 0;
     $10 = $9&1;
     if ($10) {
      $41 = ___cxa_find_matching_catch_2()|0;
      $42 = tempRet0;
      $ehselector$slot$2 = $42;$exn$slot$2 = $41;
     } else {
      $11 = HEAP8[$__size_$i$i>>0]|0;
      $tobool$i$i$i25 = ($11<<24>>24)<(0);
      $12 = HEAP32[$__buf>>2]|0;
      $cond$i$i = $tobool$i$i$i25 ? $12 : $__buf;
      HEAP32[$__a_end>>2] = $cond$i$i;
      HEAP32[$__g_end>>2] = $__g;
      HEAP32[$__dc>>2] = 0;
      $__size_$i3$i = ((($__buf)) + 4|0);
      $__cap_$i$i97 = ((($__buf)) + 8|0);
      $$pre = HEAP32[$__b>>2]|0;
      $$pre$i$i$i41 = $$pre;$82 = $$pre;$__a$0 = $cond$i$i;
      L21: while(1) {
       $tobool$i$i$i27 = ($$pre$i$i$i41|0)==(0|0);
       if ($tobool$i$i$i27) {
        $$pre$i$i$i = 0;$68 = 0;$83 = 1;
       } else {
        $__ninp_$i$i$i$i28 = ((($$pre$i$i$i41)) + 12|0);
        $13 = HEAP32[$__ninp_$i$i$i$i28>>2]|0;
        $__einp_$i$i$i$i29 = ((($$pre$i$i$i41)) + 16|0);
        $14 = HEAP32[$__einp_$i$i$i$i29>>2]|0;
        $cmp$i$i$i$i30 = ($13|0)==($14|0);
        if ($cmp$i$i$i$i30) {
         $vtable$i$i$i$i32 = HEAP32[$$pre$i$i$i41>>2]|0;
         $vfn$i$i$i$i33 = ((($vtable$i$i$i$i32)) + 36|0);
         $15 = HEAP32[$vfn$i$i$i$i33>>2]|0;
         __THREW__ = 0;
         $call$i$i$i$i67 = (invoke_ii($15|0,($$pre$i$i$i41|0))|0);
         $16 = __THREW__; __THREW__ = 0;
         $17 = $16&1;
         if ($17) {
          break;
         } else {
          $retval$0$i$i$i$i37 = $call$i$i$i$i67;
         }
        } else {
         $18 = HEAP8[$13>>0]|0;
         $call3$i$i$i$i35 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($18)|0);
         $retval$0$i$i$i$i37 = $call3$i$i$i$i35;
        }
        $call3$i$i$i38 = (__ZNSt3__211char_traitsIcE3eofEv()|0);
        $call4$i$i$i39 = (__ZNSt3__211char_traitsIcE11eq_int_typeEii($retval$0$i$i$i$i37,$call3$i$i$i38)|0);
        if ($call4$i$i$i39) {
         HEAP32[$__b>>2] = 0;
         $$pre$i$i$i = 0;$68 = 0;$83 = 1;
        } else {
         $$pre$i$i$i = $$pre$i$i$i41;$68 = $82;$83 = 0;
        }
       }
       $19 = HEAP32[$__e>>2]|0;
       $tobool$i2$i$i46 = ($19|0)==(0|0);
       do {
        if ($tobool$i2$i$i46) {
         label = 26;
        } else {
         $__ninp_$i$i3$i$i48 = ((($19)) + 12|0);
         $20 = HEAP32[$__ninp_$i$i3$i$i48>>2]|0;
         $__einp_$i$i4$i$i49 = ((($19)) + 16|0);
         $21 = HEAP32[$__einp_$i$i4$i$i49>>2]|0;
         $cmp$i$i5$i$i50 = ($20|0)==($21|0);
         if ($cmp$i$i5$i$i50) {
          $vtable$i$i7$i$i52 = HEAP32[$19>>2]|0;
          $vfn$i$i8$i$i53 = ((($vtable$i$i7$i$i52)) + 36|0);
          $22 = HEAP32[$vfn$i$i8$i$i53>>2]|0;
          __THREW__ = 0;
          $call$i$i9$i$i69 = (invoke_ii($22|0,($19|0))|0);
          $23 = __THREW__; __THREW__ = 0;
          $24 = $23&1;
          if ($24) {
           break L21;
          } else {
           $retval$0$i$i13$i$i57 = $call$i$i9$i$i69;
          }
         } else {
          $25 = HEAP8[$20>>0]|0;
          $call3$i$i11$i$i55 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($25)|0);
          $retval$0$i$i13$i$i57 = $call3$i$i11$i$i55;
         }
         $call3$i14$i$i58 = (__ZNSt3__211char_traitsIcE3eofEv()|0);
         $call4$i15$i$i59 = (__ZNSt3__211char_traitsIcE11eq_int_typeEii($retval$0$i$i13$i$i57,$call3$i14$i$i58)|0);
         if ($call4$i15$i$i59) {
          HEAP32[$__e>>2] = 0;
          label = 26;
          break;
         } else {
          if ($83) {
           $84 = $19;
           break;
          } else {
           $$pre$i17$i$i = $19;$__a$2 = $__a$0;
           label = 46;
           break L21;
          }
         }
        }
       } while(0);
       if ((label|0) == 26) {
        label = 0;
        if ($83) {
         $$pre$i17$i$i = 0;$__a$2 = $__a$0;
         label = 46;
         break;
        } else {
         $84 = 0;
        }
       }
       $26 = HEAP32[$__a_end>>2]|0;
       $27 = HEAP8[$__size_$i$i>>0]|0;
       $tobool$i$i72 = ($27<<24>>24)<(0);
       $28 = HEAP32[$__size_$i3$i>>2]|0;
       $conv$i$i = $27&255;
       $cond$i74 = $tobool$i$i72 ? $28 : $conv$i$i;
       $add$ptr = (($__a$0) + ($cond$i74)|0);
       $cmp = ($26|0)==($add$ptr|0);
       if ($cmp) {
        $mul = $cond$i74 << 1;
        __THREW__ = 0;
        invoke_viii(377,($__buf|0),($mul|0),0);
        $29 = __THREW__; __THREW__ = 0;
        $30 = $29&1;
        if ($30) {
         break;
        }
        $31 = HEAP8[$__size_$i$i>>0]|0;
        $tobool$i$i96 = ($31<<24>>24)<(0);
        if ($tobool$i$i96) {
         $32 = HEAP32[$__cap_$i$i97>>2]|0;
         $and$i$i98 = $32 & 2147483647;
         $phitmp$i99 = (($and$i$i98) + -1)|0;
         $cond$i101 = $phitmp$i99;
        } else {
         $cond$i101 = 10;
        }
        __THREW__ = 0;
        invoke_viii(377,($__buf|0),($cond$i101|0),0);
        $33 = __THREW__; __THREW__ = 0;
        $34 = $33&1;
        if ($34) {
         break;
        }
        $35 = HEAP8[$__size_$i$i>>0]|0;
        $tobool$i$i$i106 = ($35<<24>>24)<(0);
        $36 = HEAP32[$__buf>>2]|0;
        $cond$i$i111 = $tobool$i$i$i106 ? $36 : $__buf;
        $add$ptr24 = (($cond$i$i111) + ($cond$i74)|0);
        HEAP32[$__a_end>>2] = $add$ptr24;
        $__a$1 = $cond$i$i111;
       } else {
        $__a$1 = $__a$0;
       }
       $__ninp_$i$i = ((($$pre$i$i$i)) + 12|0);
       $43 = HEAP32[$__ninp_$i$i>>2]|0;
       $__einp_$i$i = ((($$pre$i$i$i)) + 16|0);
       $44 = HEAP32[$__einp_$i$i>>2]|0;
       $cmp$i$i113 = ($43|0)==($44|0);
       if ($cmp$i$i113) {
        $vtable$i$i = HEAP32[$$pre$i$i$i>>2]|0;
        $vfn$i$i = ((($vtable$i$i)) + 36|0);
        $45 = HEAP32[$vfn$i$i>>2]|0;
        __THREW__ = 0;
        $call$i$i114 = (invoke_ii($45|0,($$pre$i$i$i|0))|0);
        $46 = __THREW__; __THREW__ = 0;
        $47 = $46&1;
        if ($47) {
         break;
        } else {
         $retval$0$i$i = $call$i$i114;
        }
       } else {
        $48 = HEAP8[$43>>0]|0;
        $call3$i$i = (__ZNSt3__211char_traitsIcE11to_int_typeEc($48)|0);
        $retval$0$i$i = $call3$i$i;
       }
       $conv$i = $retval$0$i$i&255;
       __THREW__ = 0;
       $call31 = (invoke_iiiiiiiiiii(391,($conv$i|0),16,($__a$1|0),($__a_end|0),($__dc|0),0,($__grouping|0),($__g|0),($__g_end|0),($__atoms|0))|0);
       $49 = __THREW__; __THREW__ = 0;
       $50 = $49&1;
       if ($50) {
        break;
       }
       $tobool = ($call31|0)==(0);
       if (!($tobool)) {
        $$pre$i17$i$i = $84;$__a$2 = $__a$1;
        label = 46;
        break;
       }
       $51 = HEAP32[$__ninp_$i$i>>2]|0;
       $52 = HEAP32[$__einp_$i$i>>2]|0;
       $cmp$i$i118 = ($51|0)==($52|0);
       if ($cmp$i$i118) {
        $vtable$i$i119 = HEAP32[$$pre$i$i$i>>2]|0;
        $vfn$i$i120 = ((($vtable$i$i119)) + 40|0);
        $53 = HEAP32[$vfn$i$i120>>2]|0;
        __THREW__ = 0;
        (invoke_ii($53|0,($$pre$i$i$i|0))|0);
        $54 = __THREW__; __THREW__ = 0;
        $55 = $54&1;
        if ($55) {
         break;
        } else {
         $$pre$i$i$i41 = $$pre$i$i$i;$82 = $68;$__a$0 = $__a$1;
         continue;
        }
       } else {
        $incdec$ptr$i$i = ((($51)) + 1|0);
        HEAP32[$__ninp_$i$i>>2] = $incdec$ptr$i$i;
        $56 = HEAP8[$51>>0]|0;
        (__ZNSt3__211char_traitsIcE11to_int_typeEc($56)|0);
        $$pre$i$i$i41 = $$pre$i$i$i;$82 = $68;$__a$0 = $__a$1;
        continue;
       }
      }
      L60: do {
       if ((label|0) == 46) {
        $57 = HEAP32[$__a_end>>2]|0;
        $sub$ptr$rhs$cast = $__a$2;
        $sub$ptr$sub = (($57) - ($sub$ptr$rhs$cast))|0;
        __THREW__ = 0;
        invoke_viii(377,($__buf|0),($sub$ptr$sub|0),0);
        $58 = __THREW__; __THREW__ = 0;
        $59 = $58&1;
        if (!($59)) {
         $60 = HEAP8[$__size_$i$i>>0]|0;
         $61 = HEAP32[$__buf>>2]|0;
         __THREW__ = 0;
         $call39 = (invoke_i(392)|0);
         $62 = __THREW__; __THREW__ = 0;
         $63 = $62&1;
         if (!($63)) {
          $tobool$i$i$i$i = ($60<<24>>24)<(0);
          $cond$i$i$i = $tobool$i$i$i$i ? $61 : $__buf;
          __THREW__ = 0;
          HEAP32[$vararg_buffer>>2] = $__v;
          $call41 = (invoke_iiiii(393,($cond$i$i$i|0),($call39|0),(15723|0),($vararg_buffer|0))|0);
          $64 = __THREW__; __THREW__ = 0;
          $65 = $64&1;
          if (!($65)) {
           $cmp42 = ($call41|0)==(1);
           if (!($cmp42)) {
            HEAP32[$__err>>2] = 4;
           }
           $tobool$i$i$i = ($$pre$i$i$i|0)==(0|0);
           if ($tobool$i$i$i) {
            $85 = 1;
           } else {
            $__ninp_$i$i$i$i = ((($$pre$i$i$i)) + 12|0);
            $66 = HEAP32[$__ninp_$i$i$i$i>>2]|0;
            $__einp_$i$i$i$i = ((($$pre$i$i$i)) + 16|0);
            $67 = HEAP32[$__einp_$i$i$i$i>>2]|0;
            $cmp$i$i$i$i = ($66|0)==($67|0);
            if ($cmp$i$i$i$i) {
             $vtable$i$i$i$i = HEAP32[$68>>2]|0;
             $vfn$i$i$i$i = ((($vtable$i$i$i$i)) + 36|0);
             $69 = HEAP32[$vfn$i$i$i$i>>2]|0;
             __THREW__ = 0;
             $call$i$i$i$i13 = (invoke_ii($69|0,($$pre$i$i$i|0))|0);
             $70 = __THREW__; __THREW__ = 0;
             $71 = $70&1;
             if ($71) {
              break;
             } else {
              $retval$0$i$i$i$i = $call$i$i$i$i13;
             }
            } else {
             $72 = HEAP8[$66>>0]|0;
             $call3$i$i$i$i = (__ZNSt3__211char_traitsIcE11to_int_typeEc($72)|0);
             $retval$0$i$i$i$i = $call3$i$i$i$i;
            }
            $call3$i$i$i = (__ZNSt3__211char_traitsIcE3eofEv()|0);
            $call4$i$i$i = (__ZNSt3__211char_traitsIcE11eq_int_typeEii($retval$0$i$i$i$i,$call3$i$i$i)|0);
            if ($call4$i$i$i) {
             HEAP32[$__b>>2] = 0;
             $85 = 1;
            } else {
             $85 = 0;
            }
           }
           $tobool$i2$i$i = ($$pre$i17$i$i|0)==(0|0);
           do {
            if ($tobool$i2$i$i) {
             label = 63;
            } else {
             $__ninp_$i$i3$i$i = ((($$pre$i17$i$i)) + 12|0);
             $73 = HEAP32[$__ninp_$i$i3$i$i>>2]|0;
             $__einp_$i$i4$i$i = ((($$pre$i17$i$i)) + 16|0);
             $74 = HEAP32[$__einp_$i$i4$i$i>>2]|0;
             $cmp$i$i5$i$i = ($73|0)==($74|0);
             if ($cmp$i$i5$i$i) {
              $vtable$i$i7$i$i = HEAP32[$$pre$i17$i$i>>2]|0;
              $vfn$i$i8$i$i = ((($vtable$i$i7$i$i)) + 36|0);
              $75 = HEAP32[$vfn$i$i8$i$i>>2]|0;
              __THREW__ = 0;
              $call$i$i9$i$i14 = (invoke_ii($75|0,($$pre$i17$i$i|0))|0);
              $76 = __THREW__; __THREW__ = 0;
              $77 = $76&1;
              if ($77) {
               break L60;
              } else {
               $retval$0$i$i13$i$i = $call$i$i9$i$i14;
              }
             } else {
              $78 = HEAP8[$73>>0]|0;
              $call3$i$i11$i$i = (__ZNSt3__211char_traitsIcE11to_int_typeEc($78)|0);
              $retval$0$i$i13$i$i = $call3$i$i11$i$i;
             }
             $call3$i14$i$i = (__ZNSt3__211char_traitsIcE3eofEv()|0);
             $call4$i15$i$i = (__ZNSt3__211char_traitsIcE11eq_int_typeEii($retval$0$i$i13$i$i,$call3$i14$i$i)|0);
             if ($call4$i15$i$i) {
              HEAP32[$__e>>2] = 0;
              label = 63;
              break;
             } else {
              if ($85) {
               break;
              } else {
               label = 65;
               break;
              }
             }
            }
           } while(0);
           if ((label|0) == 63) {
            if ($85) {
             label = 65;
            }
           }
           if ((label|0) == 65) {
            $79 = HEAP32[$__err>>2]|0;
            $or = $79 | 2;
            HEAP32[$__err>>2] = $or;
           }
           $retval$sroa$0$0$copyload = HEAP32[$__b>>2]|0;
           __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__buf);
           __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grouping);
           STACKTOP = sp;return ($retval$sroa$0$0$copyload|0);
          }
         }
        }
       }
      } while(0);
      $80 = ___cxa_find_matching_catch_2()|0;
      $81 = tempRet0;
      $ehselector$slot$2 = $81;$exn$slot$2 = $80;
     }
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__buf);
     $ehselector$slot$3 = $ehselector$slot$2;$exn$slot$3 = $exn$slot$2;
     break;
    }
   }
   $39 = ___cxa_find_matching_catch_2()|0;
   $40 = tempRet0;
   __ZNSt3__26localeD2Ev($ref$tmp);
   $ehselector$slot$0 = $40;$exn$slot$0 = $39;
   label = 36;
  }
 } while(0);
 if ((label|0) == 36) {
  $ehselector$slot$3 = $ehselector$slot$0;$exn$slot$3 = $exn$slot$0;
 }
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grouping);
 ___resumeException($exn$slot$3|0);
 // unreachable;
 return (0)|0;
}
function __ZNKSt3__26locale9use_facetERNS0_2idE($this,$x) {
 $this = $this|0;
 $x = $x|0;
 var $0 = 0, $call = 0, $call2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$this>>2]|0;
 $call = (__ZNSt3__26locale2id5__getEv($x)|0);
 $call2 = (__ZNKSt3__26locale5__imp9use_facetEl($0,$call)|0);
 return ($call2|0);
}
function __ZNSt3__26localeD2Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$this>>2]|0;
 (__ZNSt3__214__shared_count16__release_sharedEv($0)|0);
 return;
}
function __ZNSt3__29__num_getIcE17__stage2_int_loopEciPcRS2_RjcRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_S2_($__ct,$__base,$__a,$__a_end,$__dc,$__thousands_sep,$__grouping,$__g,$__g_end,$__atoms) {
 $__ct = $__ct|0;
 $__base = $__base|0;
 $__a = $__a|0;
 $__a_end = $__a_end|0;
 $__dc = $__dc|0;
 $__thousands_sep = $__thousands_sep|0;
 $__grouping = $__grouping|0;
 $__g = $__g|0;
 $__g_end = $__g_end|0;
 $__atoms = $__atoms|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__first$addr$0$i$add = 0, $__first$addr$0$i$idx = 0, $__first$addr$0$i$ptr = 0, $__first$addr$0$lcssa$i = 0, $__size_$i$i = 0, $__size_$i3$i = 0, $add$ptr = 0, $arrayidx = 0;
 var $arrayidx4 = 0, $arrayidx43 = 0, $arrayidx50 = 0, $cmp = 0, $cmp$i = 0, $cmp11 = 0, $cmp15 = 0, $cmp17 = 0, $cmp2 = 0, $cmp2$i = 0, $cmp26 = 0, $cmp29 = 0, $cmp33 = 0, $cmp41 = 0, $cmp45 = 0, $cmp6 = 0, $cond = 0, $cond$i = 0, $conv$i$i = 0, $inc = 0;
 var $incdec$ptr = 0, $incdec$ptr19 = 0, $incdec$ptr48 = 0, $incdec$ptr51 = 0, $or$cond = 0, $retval$1 = 0, $sub$ptr$lhs$cast = 0, $sub$ptr$lhs$cast23 = 0, $sub$ptr$lhs$cast38 = 0, $sub$ptr$rhs$cast = 0, $sub$ptr$rhs$cast24 = 0, $sub$ptr$rhs$cast39 = 0, $sub$ptr$sub = 0, $sub$ptr$sub25 = 0, $sub$ptr$sub40 = 0, $tobool$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$__a_end>>2]|0;
 $cmp = ($0|0)==($__a|0);
 do {
  if ($cmp) {
   $arrayidx = ((($__atoms)) + 24|0);
   $1 = HEAP8[$arrayidx>>0]|0;
   $cmp2 = ($1<<24>>24)==($__ct<<24>>24);
   if (!($cmp2)) {
    $arrayidx4 = ((($__atoms)) + 25|0);
    $2 = HEAP8[$arrayidx4>>0]|0;
    $cmp6 = ($2<<24>>24)==($__ct<<24>>24);
    if (!($cmp6)) {
     label = 5;
     break;
    }
   }
   $cond = $cmp2 ? 43 : 45;
   $incdec$ptr = ((($__a)) + 1|0);
   HEAP32[$__a_end>>2] = $incdec$ptr;
   HEAP8[$__a>>0] = $cond;
   HEAP32[$__dc>>2] = 0;
   $retval$1 = 0;
  } else {
   label = 5;
  }
 } while(0);
 L6: do {
  if ((label|0) == 5) {
   $__size_$i$i = ((($__grouping)) + 11|0);
   $3 = HEAP8[$__size_$i$i>>0]|0;
   $tobool$i$i = ($3<<24>>24)<(0);
   $__size_$i3$i = ((($__grouping)) + 4|0);
   $4 = HEAP32[$__size_$i3$i>>2]|0;
   $conv$i$i = $3&255;
   $cond$i = $tobool$i$i ? $4 : $conv$i$i;
   $cmp11 = ($cond$i|0)!=(0);
   $cmp15 = ($__ct<<24>>24)==($__thousands_sep<<24>>24);
   $or$cond = $cmp15 & $cmp11;
   if ($or$cond) {
    $5 = HEAP32[$__g_end>>2]|0;
    $sub$ptr$lhs$cast = $5;
    $sub$ptr$rhs$cast = $__g;
    $sub$ptr$sub = (($sub$ptr$lhs$cast) - ($sub$ptr$rhs$cast))|0;
    $cmp17 = ($sub$ptr$sub|0)<(160);
    if (!($cmp17)) {
     $retval$1 = 0;
     break;
    }
    $6 = HEAP32[$__dc>>2]|0;
    $incdec$ptr19 = ((($5)) + 4|0);
    HEAP32[$__g_end>>2] = $incdec$ptr19;
    HEAP32[$5>>2] = $6;
    HEAP32[$__dc>>2] = 0;
    $retval$1 = 0;
    break;
   }
   $add$ptr = ((($__atoms)) + 26|0);
   $__first$addr$0$i$idx = 0;
   while(1) {
    $__first$addr$0$i$ptr = (($__atoms) + ($__first$addr$0$i$idx)|0);
    $cmp$i = ($__first$addr$0$i$idx|0)==(26);
    if ($cmp$i) {
     $__first$addr$0$lcssa$i = $add$ptr;
     break;
    }
    $7 = HEAP8[$__first$addr$0$i$ptr>>0]|0;
    $cmp2$i = ($7<<24>>24)==($__ct<<24>>24);
    $__first$addr$0$i$add = (($__first$addr$0$i$idx) + 1)|0;
    if ($cmp2$i) {
     $__first$addr$0$lcssa$i = $__first$addr$0$i$ptr;
     break;
    } else {
     $__first$addr$0$i$idx = $__first$addr$0$i$add;
    }
   }
   $sub$ptr$lhs$cast23 = $__first$addr$0$lcssa$i;
   $sub$ptr$rhs$cast24 = $__atoms;
   $sub$ptr$sub25 = (($sub$ptr$lhs$cast23) - ($sub$ptr$rhs$cast24))|0;
   $cmp26 = ($sub$ptr$sub25|0)>(23);
   if ($cmp26) {
    $retval$1 = -1;
   } else {
    $arrayidx50 = (15690 + ($sub$ptr$sub25)|0);
    switch ($__base|0) {
    case 10: case 8:  {
     $cmp29 = ($sub$ptr$sub25|0)<($__base|0);
     if (!($cmp29)) {
      $retval$1 = -1;
      break L6;
     }
     break;
    }
    case 16:  {
     $cmp33 = ($sub$ptr$sub25|0)<(22);
     if (!($cmp33)) {
      if ($cmp) {
       $retval$1 = -1;
       break L6;
      }
      $sub$ptr$lhs$cast38 = $0;
      $sub$ptr$rhs$cast39 = $__a;
      $sub$ptr$sub40 = (($sub$ptr$lhs$cast38) - ($sub$ptr$rhs$cast39))|0;
      $cmp41 = ($sub$ptr$sub40|0)<(3);
      if (!($cmp41)) {
       $retval$1 = -1;
       break L6;
      }
      $arrayidx43 = ((($0)) + -1|0);
      $8 = HEAP8[$arrayidx43>>0]|0;
      $cmp45 = ($8<<24>>24)==(48);
      if (!($cmp45)) {
       $retval$1 = -1;
       break L6;
      }
      HEAP32[$__dc>>2] = 0;
      $9 = HEAP8[$arrayidx50>>0]|0;
      $incdec$ptr48 = ((($0)) + 1|0);
      HEAP32[$__a_end>>2] = $incdec$ptr48;
      HEAP8[$0>>0] = $9;
      $retval$1 = 0;
      break L6;
     }
     break;
    }
    default: {
    }
    }
    $10 = HEAP8[$arrayidx50>>0]|0;
    $incdec$ptr51 = ((($0)) + 1|0);
    HEAP32[$__a_end>>2] = $incdec$ptr51;
    HEAP8[$0>>0] = $10;
    $11 = HEAP32[$__dc>>2]|0;
    $inc = (($11) + 1)|0;
    HEAP32[$__dc>>2] = $inc;
    $retval$1 = 0;
   }
  }
 } while(0);
 return ($retval$1|0);
}
function __ZNSt3__26__clocEv() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $call = 0, $guard$uninitialized = 0, $tobool = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[18808]|0;
 $guard$uninitialized = ($0<<24>>24)==(0);
 do {
  if ($guard$uninitialized) {
   $1 = (___cxa_guard_acquire(18808)|0);
   $tobool = ($1|0)==(0);
   if (!($tobool)) {
    __THREW__ = 0;
    $call = (invoke_iiii(394,2147483647,(15726|0),(0|0))|0);
    $2 = __THREW__; __THREW__ = 0;
    $3 = $2&1;
    if ($3) {
     $5 = ___cxa_find_matching_catch_2()|0;
     $6 = tempRet0;
     ___resumeException($5|0);
     // unreachable;
    } else {
     HEAP32[5026] = $call;
     break;
    }
   }
  }
 } while(0);
 $4 = HEAP32[5026]|0;
 return ($4|0);
}
function __ZNSt3__217__libcpp_sscanf_lEPKcP15__locale_structS1_z($__s,$__l,$__format,$varargs) {
 $__s = $__s|0;
 $__l = $__l|0;
 $__format = $__format|0;
 $varargs = $varargs|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $__va = 0, $call = 0, $call3 = 0, $tobool$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $__va = sp;
 HEAP32[$__va>>2] = $varargs;
 $call = (___uselocale($__l)|0);
 $call3 = (_vsscanf($__s,$__format,$__va)|0);
 $tobool$i$i = ($call|0)==(0|0);
 if (!($tobool$i$i)) {
  __THREW__ = 0;
  (invoke_ii(395,($call|0))|0);
  $0 = __THREW__; __THREW__ = 0;
  $1 = $0&1;
  if ($1) {
   $2 = ___cxa_find_matching_catch_3(0|0)|0;
   $3 = tempRet0;
   ___clang_call_terminate($2);
   // unreachable;
  }
 }
 STACKTOP = sp;return ($call3|0);
}
function __ZNSt3__26locale2id5__getEv($this) {
 $this = $this|0;
 var $$fca$1$gep = 0, $0 = 0, $1 = 0, $__f$i = 0, $__id_ = 0, $__p$i = 0, $cmp$i = 0, $ref$tmp = 0, $sub = 0, $tmp = 0, $tmp$byval_copy = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $tmp$byval_copy = sp + 32|0;
 $__f$i = sp + 24|0;
 $__p$i = sp + 20|0;
 $ref$tmp = sp + 8|0;
 $tmp = sp;
 HEAP32[$tmp>>2] = (396);
 $$fca$1$gep = ((($tmp)) + 4|0);
 HEAP32[$$fca$1$gep>>2] = 0;
 ;HEAP32[$tmp$byval_copy>>2]=HEAP32[$tmp>>2]|0;HEAP32[$tmp$byval_copy+4>>2]=HEAP32[$tmp+4>>2]|0;
 __ZNSt3__212_GLOBAL__N_111__fake_bindC2EMNS_6locale2idEFvvEPS3_($ref$tmp,$tmp$byval_copy,$this);
 $0 = HEAP32[$this>>2]|0;
 $cmp$i = ($0|0)==(-1);
 if (!($cmp$i)) {
  HEAP32[$__f$i>>2] = $ref$tmp;
  HEAP32[$__p$i>>2] = $__f$i;
  __ZNSt3__211__call_onceERVmPvPFvS2_E($this,$__p$i,397);
 }
 $__id_ = ((($this)) + 4|0);
 $1 = HEAP32[$__id_>>2]|0;
 $sub = (($1) + -1)|0;
 STACKTOP = sp;return ($sub|0);
}
function __ZNKSt3__26locale5__imp9use_facetEl($this,$id) {
 $this = $this|0;
 $id = $id|0;
 var $0 = 0, $1 = 0, $__begin_$i = 0, $arrayidx$i = 0, $call = 0, $exception = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = (__ZNKSt3__26locale5__imp9has_facetEl($this,$id)|0);
 if ($call) {
  $__begin_$i = ((($this)) + 8|0);
  $0 = HEAP32[$__begin_$i>>2]|0;
  $arrayidx$i = (($0) + ($id<<2)|0);
  $1 = HEAP32[$arrayidx$i>>2]|0;
  return ($1|0);
 } else {
  $exception = (___cxa_allocate_exception(4)|0);
  __ZNSt8bad_castC2Ev($exception);
  ___cxa_throw(($exception|0),(1952|0),(327|0));
  // unreachable;
 }
 return (0)|0;
}
function __ZNKSt3__26locale5__imp9has_facetEl($this,$id) {
 $this = $this|0;
 $id = $id|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $__end_$i = 0, $arrayidx$i = 0, $cmp = 0, $facets_ = 0, $sub$ptr$div$i = 0, $sub$ptr$sub$i = 0, $tobool = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $facets_ = ((($this)) + 8|0);
 $__end_$i = ((($this)) + 12|0);
 $0 = HEAP32[$__end_$i>>2]|0;
 $1 = HEAP32[$facets_>>2]|0;
 $sub$ptr$sub$i = (($0) - ($1))|0;
 $sub$ptr$div$i = $sub$ptr$sub$i >> 2;
 $cmp = ($sub$ptr$div$i>>>0)>($id>>>0);
 if ($cmp) {
  $2 = $1;
  $arrayidx$i = (($2) + ($id<<2)|0);
  $3 = HEAP32[$arrayidx$i>>2]|0;
  $tobool = ($3|0)!=(0|0);
  $4 = $tobool;
 } else {
  $4 = 0;
 }
 return ($4|0);
}
function __ZNSt3__26locale2id6__initEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $__id_ = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[5027]|0;HEAP32[5027] = (($0+1)|0);
 $1 = (($0) + 1)|0;
 $__id_ = ((($this)) + 4|0);
 HEAP32[$__id_>>2] = $1;
 return;
}
function __ZNSt3__212_GLOBAL__N_111__fake_bindC2EMNS_6locale2idEFvvEPS3_($this,$0,$id) {
 $this = $this|0;
 $0 = $0|0;
 $id = $id|0;
 var $pmf$elt1 = 0, $pmf$unpack = 0, $pmf$unpack2 = 0, $pmf_$repack = 0, $pmf_$repack4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $pmf$unpack = HEAP32[$0>>2]|0;
 $pmf$elt1 = ((($0)) + 4|0);
 $pmf$unpack2 = HEAP32[$pmf$elt1>>2]|0;
 HEAP32[$this>>2] = $id;
 $pmf_$repack = ((($this)) + 4|0);
 HEAP32[$pmf_$repack>>2] = $pmf$unpack;
 $pmf_$repack4 = ((($this)) + 8|0);
 HEAP32[$pmf_$repack4>>2] = $pmf$unpack2;
 return;
}
function __ZNSt3__217__call_once_proxyINS_5tupleIJONS_12_GLOBAL__N_111__fake_bindEEEEEEvPv($__vp) {
 $__vp = $__vp|0;
 var $ref$i$i = 0, $ref$i$i$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $ref$i$i = HEAP32[$__vp>>2]|0;
 $ref$i$i$i$i = HEAP32[$ref$i$i>>2]|0;
 __ZNKSt3__212_GLOBAL__N_111__fake_bindclEv($ref$i$i$i$i);
 return;
}
function __ZNKSt3__212_GLOBAL__N_111__fake_bindclEv($this) {
 $this = $this|0;
 var $$elt = 0, $$elt1 = 0, $$unpack = 0, $$unpack2 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $memptr$adj$shifted = 0, $memptr$isvirtual = 0, $memptr$nonvirtualfn = 0, $memptr$virtualfn = 0, $vtable = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$this>>2]|0;
 $$elt = ((($this)) + 4|0);
 $$unpack = HEAP32[$$elt>>2]|0;
 $$elt1 = ((($this)) + 8|0);
 $$unpack2 = HEAP32[$$elt1>>2]|0;
 $memptr$adj$shifted = $$unpack2 >> 1;
 $1 = (($0) + ($memptr$adj$shifted)|0);
 $2 = $$unpack2 & 1;
 $memptr$isvirtual = ($2|0)==(0);
 if ($memptr$isvirtual) {
  $memptr$nonvirtualfn = $$unpack;
  $4 = $memptr$nonvirtualfn;
 } else {
  $vtable = HEAP32[$1>>2]|0;
  $3 = (($vtable) + ($$unpack)|0);
  $memptr$virtualfn = HEAP32[$3>>2]|0;
  $4 = $memptr$virtualfn;
 }
 FUNCTION_TABLE_vi[$4 & 1023]($1);
 return;
}
function __ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE23__do_get_floating_pointIeEES4_S4_S4_RNS_8ios_baseERjRT_($this,$__b,$__e,$__iob,$__err,$__v) {
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$pre = 0, $$pre$i$i$i = 0, $$pre$i$i$i30 = 0, $$pre$i17$i$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $8 = 0, $9 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__a_end = 0, $__atoms = 0, $__buf = 0, $__cap_$i$i = 0, $__cap_$i$i86 = 0, $__dc = 0, $__decimal_point = 0, $__einp_$i$i = 0, $__einp_$i$i$i$i = 0, $__einp_$i$i$i$i18 = 0, $__einp_$i$i4$i$i = 0, $__einp_$i$i4$i$i38 = 0, $__exp = 0, $__g = 0;
 var $__g_end = 0, $__grouping = 0, $__i$0$i$i = 0, $__in_units = 0, $__ninp_$i$i = 0, $__ninp_$i$i$i$i = 0, $__ninp_$i$i$i$i17 = 0, $__ninp_$i$i3$i$i = 0, $__ninp_$i$i3$i$i37 = 0, $__size_$i$i = 0, $__size_$i$i116 = 0, $__size_$i3$i = 0, $__size_$i3$i118 = 0, $__thousands_sep = 0, $add$ptr = 0, $add$ptr17 = 0, $and$i$i = 0, $and$i$i87 = 0, $arrayidx$i$i = 0, $call$i$i$i$i12 = 0;
 var $call$i$i$i$i56 = 0, $call$i$i103 = 0, $call$i$i9$i$i13 = 0, $call$i$i9$i$i58 = 0, $call23 = 0, $call3$i$i = 0, $call3$i$i$i = 0, $call3$i$i$i$i = 0, $call3$i$i$i$i24 = 0, $call3$i$i$i27 = 0, $call3$i$i11$i$i = 0, $call3$i$i11$i$i44 = 0, $call3$i14$i$i = 0, $call3$i14$i$i47 = 0, $call37 = 0.0, $call4$i$i$i = 0, $call4$i$i$i28 = 0, $call4$i15$i$i = 0, $call4$i15$i$i48 = 0, $cmp = 0;
 var $cmp$i$i$i$i = 0, $cmp$i$i$i$i19 = 0, $cmp$i$i102 = 0, $cmp$i$i107 = 0, $cmp$i$i5$i$i = 0, $cmp$i$i5$i$i39 = 0, $cmp29 = 0, $cmp33 = 0, $cond$i = 0, $cond$i$i = 0, $cond$i$i100 = 0, $cond$i122 = 0, $cond$i63 = 0, $cond$i90 = 0, $conv$i = 0, $conv$i$i = 0, $conv$i$i120 = 0, $ehselector$slot$1 = 0, $exitcond$i$i = 0, $exn$slot$1 = 0;
 var $inc$i$i = 0, $incdec$ptr = 0, $incdec$ptr$i$i = 0, $mul = 0, $or = 0, $or$cond = 0, $phitmp$i = 0, $phitmp$i88 = 0, $retval$0$i$i = 0, $retval$0$i$i$i$i = 0, $retval$0$i$i$i$i26 = 0, $retval$0$i$i13$i$i = 0, $retval$0$i$i13$i$i46 = 0, $retval$sroa$0$0$copyload = 0, $sub$ptr$lhs$cast = 0, $sub$ptr$rhs$cast = 0, $sub$ptr$sub = 0, $tobool = 0, $tobool$i$i = 0, $tobool$i$i$i = 0;
 var $tobool$i$i$i14 = 0, $tobool$i$i$i16 = 0, $tobool$i$i$i95 = 0, $tobool$i$i117 = 0, $tobool$i$i61 = 0, $tobool$i$i85 = 0, $tobool$i2$i$i = 0, $tobool$i2$i$i35 = 0, $tobool30 = 0, $vfn$i$i = 0, $vfn$i$i$i$i = 0, $vfn$i$i$i$i22 = 0, $vfn$i$i109 = 0, $vfn$i$i8$i$i = 0, $vfn$i$i8$i$i42 = 0, $vtable$i$i = 0, $vtable$i$i$i$i = 0, $vtable$i$i$i$i21 = 0, $vtable$i$i108 = 0, $vtable$i$i7$i$i = 0;
 var $vtable$i$i7$i$i41 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 240|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(240|0);
 $__atoms = sp + 200|0;
 $__decimal_point = sp + 199|0;
 $__thousands_sep = sp + 198|0;
 $__grouping = sp + 184|0;
 $__buf = sp + 172|0;
 $__a_end = sp + 168|0;
 $__g = sp + 8|0;
 $__g_end = sp + 4|0;
 $__dc = sp;
 $__in_units = sp + 197|0;
 $__exp = sp + 196|0;
 __ZNSt3__29__num_getIcE19__stage2_float_prepERNS_8ios_baseEPcRcS5_($__grouping,$__iob,$__atoms,$__decimal_point,$__thousands_sep);
 ;HEAP32[$__buf>>2]=0|0;HEAP32[$__buf+4>>2]=0|0;HEAP32[$__buf+8>>2]=0|0;
 $__i$0$i$i = 0;
 while(1) {
  $exitcond$i$i = ($__i$0$i$i|0)==(3);
  if ($exitcond$i$i) {
   break;
  }
  $arrayidx$i$i = (($__buf) + ($__i$0$i$i<<2)|0);
  HEAP32[$arrayidx$i$i>>2] = 0;
  $inc$i$i = (($__i$0$i$i) + 1)|0;
  $__i$0$i$i = $inc$i$i;
 }
 $__size_$i$i = ((($__buf)) + 11|0);
 $0 = HEAP8[$__size_$i$i>>0]|0;
 $tobool$i$i = ($0<<24>>24)<(0);
 if ($tobool$i$i) {
  $__cap_$i$i = ((($__buf)) + 8|0);
  $1 = HEAP32[$__cap_$i$i>>2]|0;
  $and$i$i = $1 & 2147483647;
  $phitmp$i = (($and$i$i) + -1)|0;
  $cond$i = $phitmp$i;
 } else {
  $cond$i = 10;
 }
 __THREW__ = 0;
 invoke_viii(377,($__buf|0),($cond$i|0),0);
 $2 = __THREW__; __THREW__ = 0;
 $3 = $2&1;
 if ($3) {
  $30 = ___cxa_find_matching_catch_2()|0;
  $31 = tempRet0;
  $ehselector$slot$1 = $31;$exn$slot$1 = $30;
 } else {
  $4 = HEAP8[$__size_$i$i>>0]|0;
  $tobool$i$i$i14 = ($4<<24>>24)<(0);
  $5 = HEAP32[$__buf>>2]|0;
  $cond$i$i = $tobool$i$i$i14 ? $5 : $__buf;
  HEAP32[$__a_end>>2] = $cond$i$i;
  HEAP32[$__g_end>>2] = $__g;
  HEAP32[$__dc>>2] = 0;
  HEAP8[$__in_units>>0] = 1;
  HEAP8[$__exp>>0] = 69;
  $__size_$i3$i = ((($__buf)) + 4|0);
  $__cap_$i$i86 = ((($__buf)) + 8|0);
  $$pre = HEAP32[$__b>>2]|0;
  $$pre$i$i$i30 = $$pre;$75 = $$pre;$__a$0 = $cond$i$i;
  L11: while(1) {
   $tobool$i$i$i16 = ($$pre$i$i$i30|0)==(0|0);
   if ($tobool$i$i$i16) {
    $$pre$i$i$i = 0;$61 = 0;$76 = 1;
   } else {
    $__ninp_$i$i$i$i17 = ((($$pre$i$i$i30)) + 12|0);
    $6 = HEAP32[$__ninp_$i$i$i$i17>>2]|0;
    $__einp_$i$i$i$i18 = ((($$pre$i$i$i30)) + 16|0);
    $7 = HEAP32[$__einp_$i$i$i$i18>>2]|0;
    $cmp$i$i$i$i19 = ($6|0)==($7|0);
    if ($cmp$i$i$i$i19) {
     $vtable$i$i$i$i21 = HEAP32[$$pre$i$i$i30>>2]|0;
     $vfn$i$i$i$i22 = ((($vtable$i$i$i$i21)) + 36|0);
     $8 = HEAP32[$vfn$i$i$i$i22>>2]|0;
     __THREW__ = 0;
     $call$i$i$i$i56 = (invoke_ii($8|0,($$pre$i$i$i30|0))|0);
     $9 = __THREW__; __THREW__ = 0;
     $10 = $9&1;
     if ($10) {
      break;
     } else {
      $retval$0$i$i$i$i26 = $call$i$i$i$i56;
     }
    } else {
     $11 = HEAP8[$6>>0]|0;
     $call3$i$i$i$i24 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($11)|0);
     $retval$0$i$i$i$i26 = $call3$i$i$i$i24;
    }
    $call3$i$i$i27 = (__ZNSt3__211char_traitsIcE3eofEv()|0);
    $call4$i$i$i28 = (__ZNSt3__211char_traitsIcE11eq_int_typeEii($retval$0$i$i$i$i26,$call3$i$i$i27)|0);
    if ($call4$i$i$i28) {
     HEAP32[$__b>>2] = 0;
     $$pre$i$i$i = 0;$61 = 0;$76 = 1;
    } else {
     $$pre$i$i$i = $$pre$i$i$i30;$61 = $75;$76 = 0;
    }
   }
   $12 = HEAP32[$__e>>2]|0;
   $tobool$i2$i$i35 = ($12|0)==(0|0);
   do {
    if ($tobool$i2$i$i35) {
     label = 20;
    } else {
     $__ninp_$i$i3$i$i37 = ((($12)) + 12|0);
     $13 = HEAP32[$__ninp_$i$i3$i$i37>>2]|0;
     $__einp_$i$i4$i$i38 = ((($12)) + 16|0);
     $14 = HEAP32[$__einp_$i$i4$i$i38>>2]|0;
     $cmp$i$i5$i$i39 = ($13|0)==($14|0);
     if ($cmp$i$i5$i$i39) {
      $vtable$i$i7$i$i41 = HEAP32[$12>>2]|0;
      $vfn$i$i8$i$i42 = ((($vtable$i$i7$i$i41)) + 36|0);
      $15 = HEAP32[$vfn$i$i8$i$i42>>2]|0;
      __THREW__ = 0;
      $call$i$i9$i$i58 = (invoke_ii($15|0,($12|0))|0);
      $16 = __THREW__; __THREW__ = 0;
      $17 = $16&1;
      if ($17) {
       break L11;
      } else {
       $retval$0$i$i13$i$i46 = $call$i$i9$i$i58;
      }
     } else {
      $18 = HEAP8[$13>>0]|0;
      $call3$i$i11$i$i44 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($18)|0);
      $retval$0$i$i13$i$i46 = $call3$i$i11$i$i44;
     }
     $call3$i14$i$i47 = (__ZNSt3__211char_traitsIcE3eofEv()|0);
     $call4$i15$i$i48 = (__ZNSt3__211char_traitsIcE11eq_int_typeEii($retval$0$i$i13$i$i46,$call3$i14$i$i47)|0);
     if ($call4$i15$i$i48) {
      HEAP32[$__e>>2] = 0;
      label = 20;
      break;
     } else {
      if ($76) {
       $77 = $12;
       break;
      } else {
       $$pre$i17$i$i = $12;$__a$2 = $__a$0;
       label = 37;
       break L11;
      }
     }
    }
   } while(0);
   if ((label|0) == 20) {
    label = 0;
    if ($76) {
     $$pre$i17$i$i = 0;$__a$2 = $__a$0;
     label = 37;
     break;
    } else {
     $77 = 0;
    }
   }
   $19 = HEAP32[$__a_end>>2]|0;
   $20 = HEAP8[$__size_$i$i>>0]|0;
   $tobool$i$i61 = ($20<<24>>24)<(0);
   $21 = HEAP32[$__size_$i3$i>>2]|0;
   $conv$i$i = $20&255;
   $cond$i63 = $tobool$i$i61 ? $21 : $conv$i$i;
   $add$ptr = (($__a$0) + ($cond$i63)|0);
   $cmp = ($19|0)==($add$ptr|0);
   if ($cmp) {
    $mul = $cond$i63 << 1;
    __THREW__ = 0;
    invoke_viii(377,($__buf|0),($mul|0),0);
    $22 = __THREW__; __THREW__ = 0;
    $23 = $22&1;
    if ($23) {
     break;
    }
    $24 = HEAP8[$__size_$i$i>>0]|0;
    $tobool$i$i85 = ($24<<24>>24)<(0);
    if ($tobool$i$i85) {
     $25 = HEAP32[$__cap_$i$i86>>2]|0;
     $and$i$i87 = $25 & 2147483647;
     $phitmp$i88 = (($and$i$i87) + -1)|0;
     $cond$i90 = $phitmp$i88;
    } else {
     $cond$i90 = 10;
    }
    __THREW__ = 0;
    invoke_viii(377,($__buf|0),($cond$i90|0),0);
    $26 = __THREW__; __THREW__ = 0;
    $27 = $26&1;
    if ($27) {
     break;
    }
    $28 = HEAP8[$__size_$i$i>>0]|0;
    $tobool$i$i$i95 = ($28<<24>>24)<(0);
    $29 = HEAP32[$__buf>>2]|0;
    $cond$i$i100 = $tobool$i$i$i95 ? $29 : $__buf;
    $add$ptr17 = (($cond$i$i100) + ($cond$i63)|0);
    HEAP32[$__a_end>>2] = $add$ptr17;
    $__a$1 = $cond$i$i100;
   } else {
    $__a$1 = $__a$0;
   }
   $__ninp_$i$i = ((($$pre$i$i$i)) + 12|0);
   $32 = HEAP32[$__ninp_$i$i>>2]|0;
   $__einp_$i$i = ((($$pre$i$i$i)) + 16|0);
   $33 = HEAP32[$__einp_$i$i>>2]|0;
   $cmp$i$i102 = ($32|0)==($33|0);
   if ($cmp$i$i102) {
    $vtable$i$i = HEAP32[$$pre$i$i$i>>2]|0;
    $vfn$i$i = ((($vtable$i$i)) + 36|0);
    $34 = HEAP32[$vfn$i$i>>2]|0;
    __THREW__ = 0;
    $call$i$i103 = (invoke_ii($34|0,($$pre$i$i$i|0))|0);
    $35 = __THREW__; __THREW__ = 0;
    $36 = $35&1;
    if ($36) {
     break;
    } else {
     $retval$0$i$i = $call$i$i103;
    }
   } else {
    $37 = HEAP8[$32>>0]|0;
    $call3$i$i = (__ZNSt3__211char_traitsIcE11to_int_typeEc($37)|0);
    $retval$0$i$i = $call3$i$i;
   }
   $conv$i = $retval$0$i$i&255;
   $38 = HEAP8[$__decimal_point>>0]|0;
   $39 = HEAP8[$__thousands_sep>>0]|0;
   __THREW__ = 0;
   $call23 = (invoke_iiiiiiiiiiiii(398,($conv$i|0),($__in_units|0),($__exp|0),($__a$1|0),($__a_end|0),($38|0),($39|0),($__grouping|0),($__g|0),($__g_end|0),($__dc|0),($__atoms|0))|0);
   $40 = __THREW__; __THREW__ = 0;
   $41 = $40&1;
   if ($41) {
    break;
   }
   $tobool = ($call23|0)==(0);
   if (!($tobool)) {
    $$pre$i17$i$i = $77;$__a$2 = $__a$1;
    label = 37;
    break;
   }
   $42 = HEAP32[$__ninp_$i$i>>2]|0;
   $43 = HEAP32[$__einp_$i$i>>2]|0;
   $cmp$i$i107 = ($42|0)==($43|0);
   if ($cmp$i$i107) {
    $vtable$i$i108 = HEAP32[$$pre$i$i$i>>2]|0;
    $vfn$i$i109 = ((($vtable$i$i108)) + 40|0);
    $44 = HEAP32[$vfn$i$i109>>2]|0;
    __THREW__ = 0;
    (invoke_ii($44|0,($$pre$i$i$i|0))|0);
    $45 = __THREW__; __THREW__ = 0;
    $46 = $45&1;
    if ($46) {
     break;
    } else {
     $$pre$i$i$i30 = $$pre$i$i$i;$75 = $61;$__a$0 = $__a$1;
     continue;
    }
   } else {
    $incdec$ptr$i$i = ((($42)) + 1|0);
    HEAP32[$__ninp_$i$i>>2] = $incdec$ptr$i$i;
    $47 = HEAP8[$42>>0]|0;
    (__ZNSt3__211char_traitsIcE11to_int_typeEc($47)|0);
    $$pre$i$i$i30 = $$pre$i$i$i;$75 = $61;$__a$0 = $__a$1;
    continue;
   }
  }
  L50: do {
   if ((label|0) == 37) {
    $__size_$i$i116 = ((($__grouping)) + 11|0);
    $48 = HEAP8[$__size_$i$i116>>0]|0;
    $tobool$i$i117 = ($48<<24>>24)<(0);
    $__size_$i3$i118 = ((($__grouping)) + 4|0);
    $49 = HEAP32[$__size_$i3$i118>>2]|0;
    $conv$i$i120 = $48&255;
    $cond$i122 = $tobool$i$i117 ? $49 : $conv$i$i120;
    $cmp29 = ($cond$i122|0)==(0);
    $50 = HEAP8[$__in_units>>0]|0;
    $tobool30 = ($50<<24>>24)==(0);
    $or$cond = $cmp29 | $tobool30;
    if (!($or$cond)) {
     $51 = HEAP32[$__g_end>>2]|0;
     $sub$ptr$lhs$cast = $51;
     $sub$ptr$rhs$cast = $__g;
     $sub$ptr$sub = (($sub$ptr$lhs$cast) - ($sub$ptr$rhs$cast))|0;
     $cmp33 = ($sub$ptr$sub|0)<(160);
     if ($cmp33) {
      $52 = HEAP32[$__dc>>2]|0;
      $incdec$ptr = ((($51)) + 4|0);
      HEAP32[$__g_end>>2] = $incdec$ptr;
      HEAP32[$51>>2] = $52;
     }
    }
    $53 = HEAP32[$__a_end>>2]|0;
    __THREW__ = 0;
    $call37 = (+invoke_diii(399,($__a$2|0),($53|0),($__err|0)));
    $54 = __THREW__; __THREW__ = 0;
    $55 = $54&1;
    if (!($55)) {
     HEAPF64[$__v>>3] = $call37;
     $56 = HEAP32[$__g_end>>2]|0;
     __THREW__ = 0;
     invoke_viiii(400,($__grouping|0),($__g|0),($56|0),($__err|0));
     $57 = __THREW__; __THREW__ = 0;
     $58 = $57&1;
     if (!($58)) {
      $tobool$i$i$i = ($$pre$i$i$i|0)==(0|0);
      if ($tobool$i$i$i) {
       $78 = 1;
      } else {
       $__ninp_$i$i$i$i = ((($$pre$i$i$i)) + 12|0);
       $59 = HEAP32[$__ninp_$i$i$i$i>>2]|0;
       $__einp_$i$i$i$i = ((($$pre$i$i$i)) + 16|0);
       $60 = HEAP32[$__einp_$i$i$i$i>>2]|0;
       $cmp$i$i$i$i = ($59|0)==($60|0);
       if ($cmp$i$i$i$i) {
        $vtable$i$i$i$i = HEAP32[$61>>2]|0;
        $vfn$i$i$i$i = ((($vtable$i$i$i$i)) + 36|0);
        $62 = HEAP32[$vfn$i$i$i$i>>2]|0;
        __THREW__ = 0;
        $call$i$i$i$i12 = (invoke_ii($62|0,($$pre$i$i$i|0))|0);
        $63 = __THREW__; __THREW__ = 0;
        $64 = $63&1;
        if ($64) {
         break;
        } else {
         $retval$0$i$i$i$i = $call$i$i$i$i12;
        }
       } else {
        $65 = HEAP8[$59>>0]|0;
        $call3$i$i$i$i = (__ZNSt3__211char_traitsIcE11to_int_typeEc($65)|0);
        $retval$0$i$i$i$i = $call3$i$i$i$i;
       }
       $call3$i$i$i = (__ZNSt3__211char_traitsIcE3eofEv()|0);
       $call4$i$i$i = (__ZNSt3__211char_traitsIcE11eq_int_typeEii($retval$0$i$i$i$i,$call3$i$i$i)|0);
       if ($call4$i$i$i) {
        HEAP32[$__b>>2] = 0;
        $78 = 1;
       } else {
        $78 = 0;
       }
      }
      $tobool$i2$i$i = ($$pre$i17$i$i|0)==(0|0);
      do {
       if ($tobool$i2$i$i) {
        label = 54;
       } else {
        $__ninp_$i$i3$i$i = ((($$pre$i17$i$i)) + 12|0);
        $66 = HEAP32[$__ninp_$i$i3$i$i>>2]|0;
        $__einp_$i$i4$i$i = ((($$pre$i17$i$i)) + 16|0);
        $67 = HEAP32[$__einp_$i$i4$i$i>>2]|0;
        $cmp$i$i5$i$i = ($66|0)==($67|0);
        if ($cmp$i$i5$i$i) {
         $vtable$i$i7$i$i = HEAP32[$$pre$i17$i$i>>2]|0;
         $vfn$i$i8$i$i = ((($vtable$i$i7$i$i)) + 36|0);
         $68 = HEAP32[$vfn$i$i8$i$i>>2]|0;
         __THREW__ = 0;
         $call$i$i9$i$i13 = (invoke_ii($68|0,($$pre$i17$i$i|0))|0);
         $69 = __THREW__; __THREW__ = 0;
         $70 = $69&1;
         if ($70) {
          break L50;
         } else {
          $retval$0$i$i13$i$i = $call$i$i9$i$i13;
         }
        } else {
         $71 = HEAP8[$66>>0]|0;
         $call3$i$i11$i$i = (__ZNSt3__211char_traitsIcE11to_int_typeEc($71)|0);
         $retval$0$i$i13$i$i = $call3$i$i11$i$i;
        }
        $call3$i14$i$i = (__ZNSt3__211char_traitsIcE3eofEv()|0);
        $call4$i15$i$i = (__ZNSt3__211char_traitsIcE11eq_int_typeEii($retval$0$i$i13$i$i,$call3$i14$i$i)|0);
        if ($call4$i15$i$i) {
         HEAP32[$__e>>2] = 0;
         label = 54;
         break;
        } else {
         if ($78) {
          break;
         } else {
          label = 56;
          break;
         }
        }
       }
      } while(0);
      if ((label|0) == 54) {
       if ($78) {
        label = 56;
       }
      }
      if ((label|0) == 56) {
       $72 = HEAP32[$__err>>2]|0;
       $or = $72 | 2;
       HEAP32[$__err>>2] = $or;
      }
      $retval$sroa$0$0$copyload = HEAP32[$__b>>2]|0;
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__buf);
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grouping);
      STACKTOP = sp;return ($retval$sroa$0$0$copyload|0);
     }
    }
   }
  } while(0);
  $73 = ___cxa_find_matching_catch_2()|0;
  $74 = tempRet0;
  $ehselector$slot$1 = $74;$exn$slot$1 = $73;
 }
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__buf);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grouping);
 ___resumeException($exn$slot$1|0);
 // unreachable;
 return (0)|0;
}
function __ZNSt3__29__num_getIcE19__stage2_float_prepERNS_8ios_baseEPcRcS5_($agg$result,$__iob,$__atoms,$__decimal_point,$__thousands_sep) {
 $agg$result = $agg$result|0;
 $__iob = $__iob|0;
 $__atoms = $__atoms|0;
 $__decimal_point = $__decimal_point|0;
 $__thousands_sep = $__thousands_sep|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__loc = 0, $call$i11 = 0;
 var $call$i14 = 0, $call$i6 = 0, $call$i8 = 0, $vfn$i = 0, $vfn$i10 = 0, $vfn$i13 = 0, $vfn$i16 = 0, $vtable$i = 0, $vtable$i12 = 0, $vtable$i15 = 0, $vtable$i9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $__loc = sp;
 __ZNKSt3__28ios_base6getlocEv($__loc,$__iob);
 __THREW__ = 0;
 $call$i6 = (invoke_iii(380,($__loc|0),(20096|0))|0);
 $0 = __THREW__; __THREW__ = 0;
 $1 = $0&1;
 if (!($1)) {
  $vtable$i = HEAP32[$call$i6>>2]|0;
  $vfn$i = ((($vtable$i)) + 32|0);
  $2 = HEAP32[$vfn$i>>2]|0;
  __THREW__ = 0;
  (invoke_iiiii($2|0,($call$i6|0),(15690|0),((15722)|0),($__atoms|0))|0);
  $3 = __THREW__; __THREW__ = 0;
  $4 = $3&1;
  if (!($4)) {
   __THREW__ = 0;
   $call$i8 = (invoke_iii(380,($__loc|0),(20112|0))|0);
   $5 = __THREW__; __THREW__ = 0;
   $6 = $5&1;
   if (!($6)) {
    $vtable$i9 = HEAP32[$call$i8>>2]|0;
    $vfn$i10 = ((($vtable$i9)) + 12|0);
    $7 = HEAP32[$vfn$i10>>2]|0;
    __THREW__ = 0;
    $call$i11 = (invoke_ii($7|0,($call$i8|0))|0);
    $8 = __THREW__; __THREW__ = 0;
    $9 = $8&1;
    if (!($9)) {
     HEAP8[$__decimal_point>>0] = $call$i11;
     $vtable$i12 = HEAP32[$call$i8>>2]|0;
     $vfn$i13 = ((($vtable$i12)) + 16|0);
     $10 = HEAP32[$vfn$i13>>2]|0;
     __THREW__ = 0;
     $call$i14 = (invoke_ii($10|0,($call$i8|0))|0);
     $11 = __THREW__; __THREW__ = 0;
     $12 = $11&1;
     if (!($12)) {
      HEAP8[$__thousands_sep>>0] = $call$i14;
      $vtable$i15 = HEAP32[$call$i8>>2]|0;
      $vfn$i16 = ((($vtable$i15)) + 20|0);
      $13 = HEAP32[$vfn$i16>>2]|0;
      __THREW__ = 0;
      invoke_vii($13|0,($agg$result|0),($call$i8|0));
      $14 = __THREW__; __THREW__ = 0;
      $15 = $14&1;
      if (!($15)) {
       __ZNSt3__26localeD2Ev($__loc);
       STACKTOP = sp;return;
      }
     }
    }
   }
  }
 }
 $16 = ___cxa_find_matching_catch_2()|0;
 $17 = tempRet0;
 __ZNSt3__26localeD2Ev($__loc);
 ___resumeException($16|0);
 // unreachable;
}
function __ZNSt3__29__num_getIcE19__stage2_float_loopEcRbRcPcRS4_ccRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSE_RjS4_($__ct,$__in_units,$__exp,$__a,$__a_end,$__decimal_point,$__thousands_sep,$__grouping,$__g,$__g_end,$__dc,$__atoms) {
 $__ct = $__ct|0;
 $__in_units = $__in_units|0;
 $__exp = $__exp|0;
 $__a = $__a|0;
 $__a_end = $__a_end|0;
 $__decimal_point = $__decimal_point|0;
 $__thousands_sep = $__thousands_sep|0;
 $__grouping = $__grouping|0;
 $__g = $__g|0;
 $__g_end = $__g_end|0;
 $__dc = $__dc|0;
 $__atoms = $__atoms|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__first$addr$0$i$add = 0, $__first$addr$0$i$idx = 0, $__first$addr$0$i$ptr = 0, $__first$addr$0$lcssa$i = 0, $__size_$i$i = 0, $__size_$i$i40 = 0, $__size_$i$i49 = 0, $__size_$i3$i = 0, $__size_$i3$i42 = 0, $__size_$i3$i51 = 0, $add$ptr = 0, $and58 = 0;
 var $arrayidx = 0, $arrayidx42 = 0, $cmp = 0, $cmp$i = 0, $cmp11 = 0, $cmp14 = 0, $cmp2$i = 0, $cmp23 = 0, $cmp3 = 0, $cmp32 = 0, $cmp4 = 0, $cmp40 = 0, $cmp46 = 0, $cmp60 = 0, $cmp67 = 0, $cmp73 = 0, $cmp81 = 0, $cond$i = 0, $cond$i46 = 0, $cond$i55 = 0;
 var $conv$i$i = 0, $conv$i$i44 = 0, $conv$i$i53 = 0, $conv59 = 0, $conv63 = 0, $inc = 0, $incdec$ptr = 0, $incdec$ptr25 = 0, $incdec$ptr48 = 0, $incdec$ptr6 = 0, $incdec$ptr75 = 0, $incdec$ptr80 = 0, $incdec$ptr8057 = 0, $or = 0, $retval$2 = 0, $sub$ptr$lhs$cast = 0, $sub$ptr$lhs$cast19 = 0, $sub$ptr$lhs$cast29 = 0, $sub$ptr$lhs$cast69 = 0, $sub$ptr$rhs$cast = 0;
 var $sub$ptr$rhs$cast30 = 0, $sub$ptr$sub = 0, $sub$ptr$sub21 = 0, $sub$ptr$sub31 = 0, $sub$ptr$sub71 = 0, $tobool = 0, $tobool$i$i = 0, $tobool$i$i41 = 0, $tobool$i$i50 = 0, $tobool16 = 0, $tobool64 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $cmp = ($__ct<<24>>24)==($__decimal_point<<24>>24);
 $sub$ptr$rhs$cast = $__g;
 L1: do {
  if ($cmp) {
   $0 = HEAP8[$__in_units>>0]|0;
   $tobool = ($0<<24>>24)==(0);
   if ($tobool) {
    $retval$2 = -1;
   } else {
    HEAP8[$__in_units>>0] = 0;
    $1 = HEAP32[$__a_end>>2]|0;
    $incdec$ptr = ((($1)) + 1|0);
    HEAP32[$__a_end>>2] = $incdec$ptr;
    HEAP8[$1>>0] = 46;
    $__size_$i$i = ((($__grouping)) + 11|0);
    $2 = HEAP8[$__size_$i$i>>0]|0;
    $tobool$i$i = ($2<<24>>24)<(0);
    $__size_$i3$i = ((($__grouping)) + 4|0);
    $3 = HEAP32[$__size_$i3$i>>2]|0;
    $conv$i$i = $2&255;
    $cond$i = $tobool$i$i ? $3 : $conv$i$i;
    $cmp3 = ($cond$i|0)==(0);
    if ($cmp3) {
     $retval$2 = 0;
    } else {
     $4 = HEAP32[$__g_end>>2]|0;
     $sub$ptr$lhs$cast = $4;
     $sub$ptr$sub = (($sub$ptr$lhs$cast) - ($sub$ptr$rhs$cast))|0;
     $cmp4 = ($sub$ptr$sub|0)<(160);
     if ($cmp4) {
      $5 = HEAP32[$__dc>>2]|0;
      $incdec$ptr6 = ((($4)) + 4|0);
      HEAP32[$__g_end>>2] = $incdec$ptr6;
      HEAP32[$4>>2] = $5;
      $retval$2 = 0;
     } else {
      $retval$2 = 0;
     }
    }
   }
  } else {
   $cmp11 = ($__ct<<24>>24)==($__thousands_sep<<24>>24);
   if ($cmp11) {
    $__size_$i$i49 = ((($__grouping)) + 11|0);
    $6 = HEAP8[$__size_$i$i49>>0]|0;
    $tobool$i$i50 = ($6<<24>>24)<(0);
    $__size_$i3$i51 = ((($__grouping)) + 4|0);
    $7 = HEAP32[$__size_$i3$i51>>2]|0;
    $conv$i$i53 = $6&255;
    $cond$i55 = $tobool$i$i50 ? $7 : $conv$i$i53;
    $cmp14 = ($cond$i55|0)==(0);
    if (!($cmp14)) {
     $8 = HEAP8[$__in_units>>0]|0;
     $tobool16 = ($8<<24>>24)==(0);
     if ($tobool16) {
      $retval$2 = -1;
      break;
     }
     $9 = HEAP32[$__g_end>>2]|0;
     $sub$ptr$lhs$cast19 = $9;
     $sub$ptr$sub21 = (($sub$ptr$lhs$cast19) - ($sub$ptr$rhs$cast))|0;
     $cmp23 = ($sub$ptr$sub21|0)<(160);
     if (!($cmp23)) {
      $retval$2 = 0;
      break;
     }
     $10 = HEAP32[$__dc>>2]|0;
     $incdec$ptr25 = ((($9)) + 4|0);
     HEAP32[$__g_end>>2] = $incdec$ptr25;
     HEAP32[$9>>2] = $10;
     HEAP32[$__dc>>2] = 0;
     $retval$2 = 0;
     break;
    }
   }
   $add$ptr = ((($__atoms)) + 32|0);
   $__first$addr$0$i$idx = 0;
   while(1) {
    $__first$addr$0$i$ptr = (($__atoms) + ($__first$addr$0$i$idx)|0);
    $cmp$i = ($__first$addr$0$i$idx|0)==(32);
    if ($cmp$i) {
     $__first$addr$0$lcssa$i = $add$ptr;
     break;
    }
    $11 = HEAP8[$__first$addr$0$i$ptr>>0]|0;
    $cmp2$i = ($11<<24>>24)==($__ct<<24>>24);
    $__first$addr$0$i$add = (($__first$addr$0$i$idx) + 1)|0;
    if ($cmp2$i) {
     $__first$addr$0$lcssa$i = $__first$addr$0$i$ptr;
     break;
    } else {
     $__first$addr$0$i$idx = $__first$addr$0$i$add;
    }
   }
   $sub$ptr$lhs$cast29 = $__first$addr$0$lcssa$i;
   $sub$ptr$rhs$cast30 = $__atoms;
   $sub$ptr$sub31 = (($sub$ptr$lhs$cast29) - ($sub$ptr$rhs$cast30))|0;
   $cmp32 = ($sub$ptr$sub31|0)>(31);
   if ($cmp32) {
    $retval$2 = -1;
   } else {
    $arrayidx = (15690 + ($sub$ptr$sub31)|0);
    $12 = HEAP8[$arrayidx>>0]|0;
    switch ($sub$ptr$sub31|0) {
    case 24: case 25:  {
     $13 = HEAP32[$__a_end>>2]|0;
     $cmp40 = ($13|0)==($__a|0);
     if (!($cmp40)) {
      $arrayidx42 = ((($13)) + -1|0);
      $14 = HEAP8[$arrayidx42>>0]|0;
      $15 = $14 & 95;
      $16 = HEAP8[$__exp>>0]|0;
      $17 = $16 & 127;
      $cmp46 = ($15<<24>>24)==($17<<24>>24);
      if (!($cmp46)) {
       $retval$2 = -1;
       break L1;
      }
     }
     $incdec$ptr48 = ((($13)) + 1|0);
     HEAP32[$__a_end>>2] = $incdec$ptr48;
     HEAP8[$13>>0] = $12;
     $retval$2 = 0;
     break L1;
     break;
    }
    case 23: case 22:  {
     HEAP8[$__exp>>0] = 80;
     $18 = HEAP32[$__a_end>>2]|0;
     $incdec$ptr8057 = ((($18)) + 1|0);
     HEAP32[$__a_end>>2] = $incdec$ptr8057;
     HEAP8[$18>>0] = $12;
     $retval$2 = 0;
     break L1;
     break;
    }
    default: {
     $19 = $12 & 95;
     $and58 = $19&255;
     $20 = HEAP8[$__exp>>0]|0;
     $conv59 = $20 << 24 >> 24;
     $cmp60 = ($and58|0)==($conv59|0);
     if ($cmp60) {
      $or = $and58 | 128;
      $conv63 = $or&255;
      HEAP8[$__exp>>0] = $conv63;
      $21 = HEAP8[$__in_units>>0]|0;
      $tobool64 = ($21<<24>>24)==(0);
      if (!($tobool64)) {
       HEAP8[$__in_units>>0] = 0;
       $__size_$i$i40 = ((($__grouping)) + 11|0);
       $22 = HEAP8[$__size_$i$i40>>0]|0;
       $tobool$i$i41 = ($22<<24>>24)<(0);
       $__size_$i3$i42 = ((($__grouping)) + 4|0);
       $23 = HEAP32[$__size_$i3$i42>>2]|0;
       $conv$i$i44 = $22&255;
       $cond$i46 = $tobool$i$i41 ? $23 : $conv$i$i44;
       $cmp67 = ($cond$i46|0)==(0);
       if (!($cmp67)) {
        $24 = HEAP32[$__g_end>>2]|0;
        $sub$ptr$lhs$cast69 = $24;
        $sub$ptr$sub71 = (($sub$ptr$lhs$cast69) - ($sub$ptr$rhs$cast))|0;
        $cmp73 = ($sub$ptr$sub71|0)<(160);
        if ($cmp73) {
         $25 = HEAP32[$__dc>>2]|0;
         $incdec$ptr75 = ((($24)) + 4|0);
         HEAP32[$__g_end>>2] = $incdec$ptr75;
         HEAP32[$24>>2] = $25;
        }
       }
      }
     }
     $26 = HEAP32[$__a_end>>2]|0;
     $incdec$ptr80 = ((($26)) + 1|0);
     HEAP32[$__a_end>>2] = $incdec$ptr80;
     HEAP8[$26>>0] = $12;
     $cmp81 = ($sub$ptr$sub31|0)>(21);
     if ($cmp81) {
      $retval$2 = 0;
      break L1;
     }
     $27 = HEAP32[$__dc>>2]|0;
     $inc = (($27) + 1)|0;
     HEAP32[$__dc>>2] = $inc;
     $retval$2 = 0;
     break L1;
    }
    }
   }
  }
 } while(0);
 return ($retval$2|0);
}
function __ZNSt3__215__num_get_floatIeEET_PKcS3_Rj($__a,$__a_end,$__err) {
 $__a = $__a|0;
 $__a_end = $__a_end|0;
 $__err = $__err|0;
 var $0 = 0, $1 = 0, $2 = 0, $__p2 = 0, $call = 0, $call1 = 0, $call2 = 0, $call3 = 0.0, $call4 = 0, $call7 = 0, $cmp = 0, $cmp10 = 0, $cmp5 = 0, $cmp8 = 0, $retval$0 = 0.0, $retval$0$ph = 0.0, $retval$1 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $__p2 = sp;
 $cmp = ($__a|0)==($__a_end|0);
 if ($cmp) {
  HEAP32[$__err>>2] = 4;
  $retval$1 = 0.0;
 } else {
  $call = (___errno_location()|0);
  $0 = HEAP32[$call>>2]|0;
  $call1 = (___errno_location()|0);
  HEAP32[$call1>>2] = 0;
  $call2 = (__ZNSt3__26__clocEv()|0);
  $call3 = (+_strtold_l($__a,$__p2,$call2));
  $call4 = (___errno_location()|0);
  $1 = HEAP32[$call4>>2]|0;
  $cmp5 = ($1|0)==(0);
  if ($cmp5) {
   $call7 = (___errno_location()|0);
   HEAP32[$call7>>2] = $0;
  }
  $2 = HEAP32[$__p2>>2]|0;
  $cmp8 = ($2|0)==($__a_end|0);
  if ($cmp8) {
   $cmp10 = ($1|0)==(34);
   if ($cmp10) {
    $retval$0$ph = $call3;
    label = 6;
   } else {
    $retval$0 = $call3;
   }
  } else {
   $retval$0$ph = 0.0;
   label = 6;
  }
  if ((label|0) == 6) {
   HEAP32[$__err>>2] = 4;
   $retval$0 = $retval$0$ph;
  }
  $retval$1 = $retval$0;
 }
 STACKTOP = sp;return (+$retval$1);
}
function __ZNSt3__216__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping,$__g,$__g_end,$__err) {
 $__grouping = $__grouping|0;
 $__g = $__g|0;
 $__g_end = $__g_end|0;
 $__err = $__err|0;
 var $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__first$addr$0$i$i = 0, $__ig$0 = 0, $__last$addr$0$i$i = 0, $__r$0 = 0, $__size_$i$i = 0, $__size_$i3$i = 0, $add$ptr = 0, $add$ptr3 = 0;
 var $cmp = 0, $cmp$i$i = 0, $cmp1$i$i = 0, $cmp12 = 0, $cmp15 = 0, $cmp4 = 0, $cmp5 = 0, $cmp9 = 0, $cond$i = 0, $cond$i$i = 0, $cond$i28 = 0, $conv$i$i = 0, $conv11 = 0, $conv27 = 0, $incdec$ptr = 0, $incdec$ptr$__ig$0 = 0, $incdec$ptr$i$i = 0, $incdec$ptr18 = 0, $incdec$ptr2$i$i = 0, $or$cond30 = 0;
 var $sub$ptr$lhs$cast = 0, $sub$ptr$rhs$cast = 0, $sub$ptr$sub = 0, $tobool$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $__size_$i$i = ((($__grouping)) + 11|0);
 $0 = HEAP8[$__size_$i$i>>0]|0;
 $tobool$i$i = ($0<<24>>24)<(0);
 $__size_$i3$i = ((($__grouping)) + 4|0);
 $1 = HEAP32[$__size_$i3$i>>2]|0;
 $conv$i$i = $0&255;
 $cond$i = $tobool$i$i ? $1 : $conv$i$i;
 $cmp = ($cond$i|0)==(0);
 do {
  if (!($cmp)) {
   $cmp$i$i = ($__g|0)==($__g_end|0);
   if ($cmp$i$i) {
    $5 = $1;
   } else {
    $__first$addr$0$i$i = $__g;$__last$addr$0$i$i = $__g_end;
    while(1) {
     $incdec$ptr$i$i = ((($__last$addr$0$i$i)) + -4|0);
     $cmp1$i$i = ($__first$addr$0$i$i>>>0)<($incdec$ptr$i$i>>>0);
     if (!($cmp1$i$i)) {
      break;
     }
     $2 = HEAP32[$__first$addr$0$i$i>>2]|0;
     $3 = HEAP32[$incdec$ptr$i$i>>2]|0;
     HEAP32[$__first$addr$0$i$i>>2] = $3;
     HEAP32[$incdec$ptr$i$i>>2] = $2;
     $incdec$ptr2$i$i = ((($__first$addr$0$i$i)) + 4|0);
     $__first$addr$0$i$i = $incdec$ptr2$i$i;$__last$addr$0$i$i = $incdec$ptr$i$i;
    }
    $$pre = HEAP32[$__size_$i3$i>>2]|0;
    $5 = $$pre;
   }
   $4 = HEAP32[$__grouping>>2]|0;
   $cond$i$i = $tobool$i$i ? $4 : $__grouping;
   $cond$i28 = $tobool$i$i ? $5 : $conv$i$i;
   $add$ptr = (($cond$i$i) + ($cond$i28)|0);
   $add$ptr3 = ((($__g_end)) + -4|0);
   $sub$ptr$lhs$cast = $add$ptr;
   $__ig$0 = $cond$i$i;$__r$0 = $__g;
   while(1) {
    $cmp4 = ($__r$0>>>0)<($add$ptr3>>>0);
    $6 = HEAP8[$__ig$0>>0]|0;
    $cmp5 = ($6<<24>>24)>(0);
    $cmp9 = ($6<<24>>24)!=(127);
    $or$cond30 = $cmp5 & $cmp9;
    if (!($cmp4)) {
     break;
    }
    if ($or$cond30) {
     $conv11 = $6 << 24 >> 24;
     $7 = HEAP32[$__r$0>>2]|0;
     $cmp12 = ($conv11|0)==($7|0);
     if (!($cmp12)) {
      label = 10;
      break;
     }
    }
    $sub$ptr$rhs$cast = $__ig$0;
    $sub$ptr$sub = (($sub$ptr$lhs$cast) - ($sub$ptr$rhs$cast))|0;
    $cmp15 = ($sub$ptr$sub|0)>(1);
    $incdec$ptr = ((($__ig$0)) + 1|0);
    $incdec$ptr$__ig$0 = $cmp15 ? $incdec$ptr : $__ig$0;
    $incdec$ptr18 = ((($__r$0)) + 4|0);
    $__ig$0 = $incdec$ptr$__ig$0;$__r$0 = $incdec$ptr18;
   }
   if ((label|0) == 10) {
    HEAP32[$__err>>2] = 4;
    break;
   }
   if ($or$cond30) {
    $conv27 = $6 << 24 >> 24;
    $8 = HEAP32[$add$ptr3>>2]|0;
    $9 = (($8) + -1)|0;
    $10 = ($9>>>0)<($conv27>>>0);
    if (!($10)) {
     HEAP32[$__err>>2] = 4;
    }
   }
  }
 } while(0);
 return;
}
function __ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE23__do_get_floating_pointIdEES4_S4_S4_RNS_8ios_baseERjRT_($this,$__b,$__e,$__iob,$__err,$__v) {
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$pre = 0, $$pre$i$i$i = 0, $$pre$i$i$i30 = 0, $$pre$i17$i$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $8 = 0, $9 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__a_end = 0, $__atoms = 0, $__buf = 0, $__cap_$i$i = 0, $__cap_$i$i86 = 0, $__dc = 0, $__decimal_point = 0, $__einp_$i$i = 0, $__einp_$i$i$i$i = 0, $__einp_$i$i$i$i18 = 0, $__einp_$i$i4$i$i = 0, $__einp_$i$i4$i$i38 = 0, $__exp = 0, $__g = 0;
 var $__g_end = 0, $__grouping = 0, $__i$0$i$i = 0, $__in_units = 0, $__ninp_$i$i = 0, $__ninp_$i$i$i$i = 0, $__ninp_$i$i$i$i17 = 0, $__ninp_$i$i3$i$i = 0, $__ninp_$i$i3$i$i37 = 0, $__size_$i$i = 0, $__size_$i$i116 = 0, $__size_$i3$i = 0, $__size_$i3$i118 = 0, $__thousands_sep = 0, $add$ptr = 0, $add$ptr17 = 0, $and$i$i = 0, $and$i$i87 = 0, $arrayidx$i$i = 0, $call$i$i$i$i12 = 0;
 var $call$i$i$i$i56 = 0, $call$i$i103 = 0, $call$i$i9$i$i13 = 0, $call$i$i9$i$i58 = 0, $call23 = 0, $call3$i$i = 0, $call3$i$i$i = 0, $call3$i$i$i$i = 0, $call3$i$i$i$i24 = 0, $call3$i$i$i27 = 0, $call3$i$i11$i$i = 0, $call3$i$i11$i$i44 = 0, $call3$i14$i$i = 0, $call3$i14$i$i47 = 0, $call37 = 0.0, $call4$i$i$i = 0, $call4$i$i$i28 = 0, $call4$i15$i$i = 0, $call4$i15$i$i48 = 0, $cmp = 0;
 var $cmp$i$i$i$i = 0, $cmp$i$i$i$i19 = 0, $cmp$i$i102 = 0, $cmp$i$i107 = 0, $cmp$i$i5$i$i = 0, $cmp$i$i5$i$i39 = 0, $cmp29 = 0, $cmp33 = 0, $cond$i = 0, $cond$i$i = 0, $cond$i$i100 = 0, $cond$i122 = 0, $cond$i63 = 0, $cond$i90 = 0, $conv$i = 0, $conv$i$i = 0, $conv$i$i120 = 0, $ehselector$slot$1 = 0, $exitcond$i$i = 0, $exn$slot$1 = 0;
 var $inc$i$i = 0, $incdec$ptr = 0, $incdec$ptr$i$i = 0, $mul = 0, $or = 0, $or$cond = 0, $phitmp$i = 0, $phitmp$i88 = 0, $retval$0$i$i = 0, $retval$0$i$i$i$i = 0, $retval$0$i$i$i$i26 = 0, $retval$0$i$i13$i$i = 0, $retval$0$i$i13$i$i46 = 0, $retval$sroa$0$0$copyload = 0, $sub$ptr$lhs$cast = 0, $sub$ptr$rhs$cast = 0, $sub$ptr$sub = 0, $tobool = 0, $tobool$i$i = 0, $tobool$i$i$i = 0;
 var $tobool$i$i$i14 = 0, $tobool$i$i$i16 = 0, $tobool$i$i$i95 = 0, $tobool$i$i117 = 0, $tobool$i$i61 = 0, $tobool$i$i85 = 0, $tobool$i2$i$i = 0, $tobool$i2$i$i35 = 0, $tobool30 = 0, $vfn$i$i = 0, $vfn$i$i$i$i = 0, $vfn$i$i$i$i22 = 0, $vfn$i$i109 = 0, $vfn$i$i8$i$i = 0, $vfn$i$i8$i$i42 = 0, $vtable$i$i = 0, $vtable$i$i$i$i = 0, $vtable$i$i$i$i21 = 0, $vtable$i$i108 = 0, $vtable$i$i7$i$i = 0;
 var $vtable$i$i7$i$i41 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 240|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(240|0);
 $__atoms = sp + 200|0;
 $__decimal_point = sp + 199|0;
 $__thousands_sep = sp + 198|0;
 $__grouping = sp + 184|0;
 $__buf = sp + 172|0;
 $__a_end = sp + 168|0;
 $__g = sp + 8|0;
 $__g_end = sp + 4|0;
 $__dc = sp;
 $__in_units = sp + 197|0;
 $__exp = sp + 196|0;
 __ZNSt3__29__num_getIcE19__stage2_float_prepERNS_8ios_baseEPcRcS5_($__grouping,$__iob,$__atoms,$__decimal_point,$__thousands_sep);
 ;HEAP32[$__buf>>2]=0|0;HEAP32[$__buf+4>>2]=0|0;HEAP32[$__buf+8>>2]=0|0;
 $__i$0$i$i = 0;
 while(1) {
  $exitcond$i$i = ($__i$0$i$i|0)==(3);
  if ($exitcond$i$i) {
   break;
  }
  $arrayidx$i$i = (($__buf) + ($__i$0$i$i<<2)|0);
  HEAP32[$arrayidx$i$i>>2] = 0;
  $inc$i$i = (($__i$0$i$i) + 1)|0;
  $__i$0$i$i = $inc$i$i;
 }
 $__size_$i$i = ((($__buf)) + 11|0);
 $0 = HEAP8[$__size_$i$i>>0]|0;
 $tobool$i$i = ($0<<24>>24)<(0);
 if ($tobool$i$i) {
  $__cap_$i$i = ((($__buf)) + 8|0);
  $1 = HEAP32[$__cap_$i$i>>2]|0;
  $and$i$i = $1 & 2147483647;
  $phitmp$i = (($and$i$i) + -1)|0;
  $cond$i = $phitmp$i;
 } else {
  $cond$i = 10;
 }
 __THREW__ = 0;
 invoke_viii(377,($__buf|0),($cond$i|0),0);
 $2 = __THREW__; __THREW__ = 0;
 $3 = $2&1;
 if ($3) {
  $30 = ___cxa_find_matching_catch_2()|0;
  $31 = tempRet0;
  $ehselector$slot$1 = $31;$exn$slot$1 = $30;
 } else {
  $4 = HEAP8[$__size_$i$i>>0]|0;
  $tobool$i$i$i14 = ($4<<24>>24)<(0);
  $5 = HEAP32[$__buf>>2]|0;
  $cond$i$i = $tobool$i$i$i14 ? $5 : $__buf;
  HEAP32[$__a_end>>2] = $cond$i$i;
  HEAP32[$__g_end>>2] = $__g;
  HEAP32[$__dc>>2] = 0;
  HEAP8[$__in_units>>0] = 1;
  HEAP8[$__exp>>0] = 69;
  $__size_$i3$i = ((($__buf)) + 4|0);
  $__cap_$i$i86 = ((($__buf)) + 8|0);
  $$pre = HEAP32[$__b>>2]|0;
  $$pre$i$i$i30 = $$pre;$75 = $$pre;$__a$0 = $cond$i$i;
  L11: while(1) {
   $tobool$i$i$i16 = ($$pre$i$i$i30|0)==(0|0);
   if ($tobool$i$i$i16) {
    $$pre$i$i$i = 0;$61 = 0;$76 = 1;
   } else {
    $__ninp_$i$i$i$i17 = ((($$pre$i$i$i30)) + 12|0);
    $6 = HEAP32[$__ninp_$i$i$i$i17>>2]|0;
    $__einp_$i$i$i$i18 = ((($$pre$i$i$i30)) + 16|0);
    $7 = HEAP32[$__einp_$i$i$i$i18>>2]|0;
    $cmp$i$i$i$i19 = ($6|0)==($7|0);
    if ($cmp$i$i$i$i19) {
     $vtable$i$i$i$i21 = HEAP32[$$pre$i$i$i30>>2]|0;
     $vfn$i$i$i$i22 = ((($vtable$i$i$i$i21)) + 36|0);
     $8 = HEAP32[$vfn$i$i$i$i22>>2]|0;
     __THREW__ = 0;
     $call$i$i$i$i56 = (invoke_ii($8|0,($$pre$i$i$i30|0))|0);
     $9 = __THREW__; __THREW__ = 0;
     $10 = $9&1;
     if ($10) {
      break;
     } else {
      $retval$0$i$i$i$i26 = $call$i$i$i$i56;
     }
    } else {
     $11 = HEAP8[$6>>0]|0;
     $call3$i$i$i$i24 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($11)|0);
     $retval$0$i$i$i$i26 = $call3$i$i$i$i24;
    }
    $call3$i$i$i27 = (__ZNSt3__211char_traitsIcE3eofEv()|0);
    $call4$i$i$i28 = (__ZNSt3__211char_traitsIcE11eq_int_typeEii($retval$0$i$i$i$i26,$call3$i$i$i27)|0);
    if ($call4$i$i$i28) {
     HEAP32[$__b>>2] = 0;
     $$pre$i$i$i = 0;$61 = 0;$76 = 1;
    } else {
     $$pre$i$i$i = $$pre$i$i$i30;$61 = $75;$76 = 0;
    }
   }
   $12 = HEAP32[$__e>>2]|0;
   $tobool$i2$i$i35 = ($12|0)==(0|0);
   do {
    if ($tobool$i2$i$i35) {
     label = 20;
    } else {
     $__ninp_$i$i3$i$i37 = ((($12)) + 12|0);
     $13 = HEAP32[$__ninp_$i$i3$i$i37>>2]|0;
     $__einp_$i$i4$i$i38 = ((($12)) + 16|0);
     $14 = HEAP32[$__einp_$i$i4$i$i38>>2]|0;
     $cmp$i$i5$i$i39 = ($13|0)==($14|0);
     if ($cmp$i$i5$i$i39) {
      $vtable$i$i7$i$i41 = HEAP32[$12>>2]|0;
      $vfn$i$i8$i$i42 = ((($vtable$i$i7$i$i41)) + 36|0);
      $15 = HEAP32[$vfn$i$i8$i$i42>>2]|0;
      __THREW__ = 0;
      $call$i$i9$i$i58 = (invoke_ii($15|0,($12|0))|0);
      $16 = __THREW__; __THREW__ = 0;
      $17 = $16&1;
      if ($17) {
       break L11;
      } else {
       $retval$0$i$i13$i$i46 = $call$i$i9$i$i58;
      }
     } else {
      $18 = HEAP8[$13>>0]|0;
      $call3$i$i11$i$i44 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($18)|0);
      $retval$0$i$i13$i$i46 = $call3$i$i11$i$i44;
     }
     $call3$i14$i$i47 = (__ZNSt3__211char_traitsIcE3eofEv()|0);
     $call4$i15$i$i48 = (__ZNSt3__211char_traitsIcE11eq_int_typeEii($retval$0$i$i13$i$i46,$call3$i14$i$i47)|0);
     if ($call4$i15$i$i48) {
      HEAP32[$__e>>2] = 0;
      label = 20;
      break;
     } else {
      if ($76) {
       $77 = $12;
       break;
      } else {
       $$pre$i17$i$i = $12;$__a$2 = $__a$0;
       label = 37;
       break L11;
      }
     }
    }
   } while(0);
   if ((label|0) == 20) {
    label = 0;
    if ($76) {
     $$pre$i17$i$i = 0;$__a$2 = $__a$0;
     label = 37;
     break;
    } else {
     $77 = 0;
    }
   }
   $19 = HEAP32[$__a_end>>2]|0;
   $20 = HEAP8[$__size_$i$i>>0]|0;
   $tobool$i$i61 = ($20<<24>>24)<(0);
   $21 = HEAP32[$__size_$i3$i>>2]|0;
   $conv$i$i = $20&255;
   $cond$i63 = $tobool$i$i61 ? $21 : $conv$i$i;
   $add$ptr = (($__a$0) + ($cond$i63)|0);
   $cmp = ($19|0)==($add$ptr|0);
   if ($cmp) {
    $mul = $cond$i63 << 1;
    __THREW__ = 0;
    invoke_viii(377,($__buf|0),($mul|0),0);
    $22 = __THREW__; __THREW__ = 0;
    $23 = $22&1;
    if ($23) {
     break;
    }
    $24 = HEAP8[$__size_$i$i>>0]|0;
    $tobool$i$i85 = ($24<<24>>24)<(0);
    if ($tobool$i$i85) {
     $25 = HEAP32[$__cap_$i$i86>>2]|0;
     $and$i$i87 = $25 & 2147483647;
     $phitmp$i88 = (($and$i$i87) + -1)|0;
     $cond$i90 = $phitmp$i88;
    } else {
     $cond$i90 = 10;
    }
    __THREW__ = 0;
    invoke_viii(377,($__buf|0),($cond$i90|0),0);
    $26 = __THREW__; __THREW__ = 0;
    $27 = $26&1;
    if ($27) {
     break;
    }
    $28 = HEAP8[$__size_$i$i>>0]|0;
    $tobool$i$i$i95 = ($28<<24>>24)<(0);
    $29 = HEAP32[$__buf>>2]|0;
    $cond$i$i100 = $tobool$i$i$i95 ? $29 : $__buf;
    $add$ptr17 = (($cond$i$i100) + ($cond$i63)|0);
    HEAP32[$__a_end>>2] = $add$ptr17;
    $__a$1 = $cond$i$i100;
   } else {
    $__a$1 = $__a$0;
   }
   $__ninp_$i$i = ((($$pre$i$i$i)) + 12|0);
   $32 = HEAP32[$__ninp_$i$i>>2]|0;
   $__einp_$i$i = ((($$pre$i$i$i)) + 16|0);
   $33 = HEAP32[$__einp_$i$i>>2]|0;
   $cmp$i$i102 = ($32|0)==($33|0);
   if ($cmp$i$i102) {
    $vtable$i$i = HEAP32[$$pre$i$i$i>>2]|0;
    $vfn$i$i = ((($vtable$i$i)) + 36|0);
    $34 = HEAP32[$vfn$i$i>>2]|0;
    __THREW__ = 0;
    $call$i$i103 = (invoke_ii($34|0,($$pre$i$i$i|0))|0);
    $35 = __THREW__; __THREW__ = 0;
    $36 = $35&1;
    if ($36) {
     break;
    } else {
     $retval$0$i$i = $call$i$i103;
    }
   } else {
    $37 = HEAP8[$32>>0]|0;
    $call3$i$i = (__ZNSt3__211char_traitsIcE11to_int_typeEc($37)|0);
    $retval$0$i$i = $call3$i$i;
   }
   $conv$i = $retval$0$i$i&255;
   $38 = HEAP8[$__decimal_point>>0]|0;
   $39 = HEAP8[$__thousands_sep>>0]|0;
   __THREW__ = 0;
   $call23 = (invoke_iiiiiiiiiiiii(398,($conv$i|0),($__in_units|0),($__exp|0),($__a$1|0),($__a_end|0),($38|0),($39|0),($__grouping|0),($__g|0),($__g_end|0),($__dc|0),($__atoms|0))|0);
   $40 = __THREW__; __THREW__ = 0;
   $41 = $40&1;
   if ($41) {
    break;
   }
   $tobool = ($call23|0)==(0);
   if (!($tobool)) {
    $$pre$i17$i$i = $77;$__a$2 = $__a$1;
    label = 37;
    break;
   }
   $42 = HEAP32[$__ninp_$i$i>>2]|0;
   $43 = HEAP32[$__einp_$i$i>>2]|0;
   $cmp$i$i107 = ($42|0)==($43|0);
   if ($cmp$i$i107) {
    $vtable$i$i108 = HEAP32[$$pre$i$i$i>>2]|0;
    $vfn$i$i109 = ((($vtable$i$i108)) + 40|0);
    $44 = HEAP32[$vfn$i$i109>>2]|0;
    __THREW__ = 0;
    (invoke_ii($44|0,($$pre$i$i$i|0))|0);
    $45 = __THREW__; __THREW__ = 0;
    $46 = $45&1;
    if ($46) {
     break;
    } else {
     $$pre$i$i$i30 = $$pre$i$i$i;$75 = $61;$__a$0 = $__a$1;
     continue;
    }
   } else {
    $incdec$ptr$i$i = ((($42)) + 1|0);
    HEAP32[$__ninp_$i$i>>2] = $incdec$ptr$i$i;
    $47 = HEAP8[$42>>0]|0;
    (__ZNSt3__211char_traitsIcE11to_int_typeEc($47)|0);
    $$pre$i$i$i30 = $$pre$i$i$i;$75 = $61;$__a$0 = $__a$1;
    continue;
   }
  }
  L50: do {
   if ((label|0) == 37) {
    $__size_$i$i116 = ((($__grouping)) + 11|0);
    $48 = HEAP8[$__size_$i$i116>>0]|0;
    $tobool$i$i117 = ($48<<24>>24)<(0);
    $__size_$i3$i118 = ((($__grouping)) + 4|0);
    $49 = HEAP32[$__size_$i3$i118>>2]|0;
    $conv$i$i120 = $48&255;
    $cond$i122 = $tobool$i$i117 ? $49 : $conv$i$i120;
    $cmp29 = ($cond$i122|0)==(0);
    $50 = HEAP8[$__in_units>>0]|0;
    $tobool30 = ($50<<24>>24)==(0);
    $or$cond = $cmp29 | $tobool30;
    if (!($or$cond)) {
     $51 = HEAP32[$__g_end>>2]|0;
     $sub$ptr$lhs$cast = $51;
     $sub$ptr$rhs$cast = $__g;
     $sub$ptr$sub = (($sub$ptr$lhs$cast) - ($sub$ptr$rhs$cast))|0;
     $cmp33 = ($sub$ptr$sub|0)<(160);
     if ($cmp33) {
      $52 = HEAP32[$__dc>>2]|0;
      $incdec$ptr = ((($51)) + 4|0);
      HEAP32[$__g_end>>2] = $incdec$ptr;
      HEAP32[$51>>2] = $52;
     }
    }
    $53 = HEAP32[$__a_end>>2]|0;
    __THREW__ = 0;
    $call37 = (+invoke_diii(401,($__a$2|0),($53|0),($__err|0)));
    $54 = __THREW__; __THREW__ = 0;
    $55 = $54&1;
    if (!($55)) {
     HEAPF64[$__v>>3] = $call37;
     $56 = HEAP32[$__g_end>>2]|0;
     __THREW__ = 0;
     invoke_viiii(400,($__grouping|0),($__g|0),($56|0),($__err|0));
     $57 = __THREW__; __THREW__ = 0;
     $58 = $57&1;
     if (!($58)) {
      $tobool$i$i$i = ($$pre$i$i$i|0)==(0|0);
      if ($tobool$i$i$i) {
       $78 = 1;
      } else {
       $__ninp_$i$i$i$i = ((($$pre$i$i$i)) + 12|0);
       $59 = HEAP32[$__ninp_$i$i$i$i>>2]|0;
       $__einp_$i$i$i$i = ((($$pre$i$i$i)) + 16|0);
       $60 = HEAP32[$__einp_$i$i$i$i>>2]|0;
       $cmp$i$i$i$i = ($59|0)==($60|0);
       if ($cmp$i$i$i$i) {
        $vtable$i$i$i$i = HEAP32[$61>>2]|0;
        $vfn$i$i$i$i = ((($vtable$i$i$i$i)) + 36|0);
        $62 = HEAP32[$vfn$i$i$i$i>>2]|0;
        __THREW__ = 0;
        $call$i$i$i$i12 = (invoke_ii($62|0,($$pre$i$i$i|0))|0);
        $63 = __THREW__; __THREW__ = 0;
        $64 = $63&1;
        if ($64) {
         break;
        } else {
         $retval$0$i$i$i$i = $call$i$i$i$i12;
        }
       } else {
        $65 = HEAP8[$59>>0]|0;
        $call3$i$i$i$i = (__ZNSt3__211char_traitsIcE11to_int_typeEc($65)|0);
        $retval$0$i$i$i$i = $call3$i$i$i$i;
       }
       $call3$i$i$i = (__ZNSt3__211char_traitsIcE3eofEv()|0);
       $call4$i$i$i = (__ZNSt3__211char_traitsIcE11eq_int_typeEii($retval$0$i$i$i$i,$call3$i$i$i)|0);
       if ($call4$i$i$i) {
        HEAP32[$__b>>2] = 0;
        $78 = 1;
       } else {
        $78 = 0;
       }
      }
      $tobool$i2$i$i = ($$pre$i17$i$i|0)==(0|0);
      do {
       if ($tobool$i2$i$i) {
        label = 54;
       } else {
        $__ninp_$i$i3$i$i = ((($$pre$i17$i$i)) + 12|0);
        $66 = HEAP32[$__ninp_$i$i3$i$i>>2]|0;
        $__einp_$i$i4$i$i = ((($$pre$i17$i$i)) + 16|0);
        $67 = HEAP32[$__einp_$i$i4$i$i>>2]|0;
        $cmp$i$i5$i$i = ($66|0)==($67|0);
        if ($cmp$i$i5$i$i) {
         $vtable$i$i7$i$i = HEAP32[$$pre$i17$i$i>>2]|0;
         $vfn$i$i8$i$i = ((($vtable$i$i7$i$i)) + 36|0);
         $68 = HEAP32[$vfn$i$i8$i$i>>2]|0;
         __THREW__ = 0;
         $call$i$i9$i$i13 = (invoke_ii($68|0,($$pre$i17$i$i|0))|0);
         $69 = __THREW__; __THREW__ = 0;
         $70 = $69&1;
         if ($70) {
          break L50;
         } else {
          $retval$0$i$i13$i$i = $call$i$i9$i$i13;
         }
        } else {
         $71 = HEAP8[$66>>0]|0;
         $call3$i$i11$i$i = (__ZNSt3__211char_traitsIcE11to_int_typeEc($71)|0);
         $retval$0$i$i13$i$i = $call3$i$i11$i$i;
        }
        $call3$i14$i$i = (__ZNSt3__211char_traitsIcE3eofEv()|0);
        $call4$i15$i$i = (__ZNSt3__211char_traitsIcE11eq_int_typeEii($retval$0$i$i13$i$i,$call3$i14$i$i)|0);
        if ($call4$i15$i$i) {
         HEAP32[$__e>>2] = 0;
         label = 54;
         break;
        } else {
         if ($78) {
          break;
         } else {
          label = 56;
          break;
         }
        }
       }
      } while(0);
      if ((label|0) == 54) {
       if ($78) {
        label = 56;
       }
      }
      if ((label|0) == 56) {
       $72 = HEAP32[$__err>>2]|0;
       $or = $72 | 2;
       HEAP32[$__err>>2] = $or;
      }
      $retval$sroa$0$0$copyload = HEAP32[$__b>>2]|0;
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__buf);
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grouping);
      STACKTOP = sp;return ($retval$sroa$0$0$copyload|0);
     }
    }
   }
  } while(0);
  $73 = ___cxa_find_matching_catch_2()|0;
  $74 = tempRet0;
  $ehselector$slot$1 = $74;$exn$slot$1 = $73;
 }
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__buf);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grouping);
 ___resumeException($exn$slot$1|0);
 // unreachable;
 return (0)|0;
}
function __ZNSt3__215__num_get_floatIdEET_PKcS3_Rj($__a,$__a_end,$__err) {
 $__a = $__a|0;
 $__a_end = $__a_end|0;
 $__err = $__err|0;
 var $0 = 0, $1 = 0, $2 = 0, $__p2 = 0, $call = 0, $call1 = 0, $call2 = 0, $call3 = 0.0, $call4 = 0, $call7 = 0, $cmp = 0, $cmp10 = 0, $cmp5 = 0, $cmp8 = 0, $retval$0 = 0.0, $retval$0$ph = 0.0, $retval$1 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $__p2 = sp;
 $cmp = ($__a|0)==($__a_end|0);
 if ($cmp) {
  HEAP32[$__err>>2] = 4;
  $retval$1 = 0.0;
 } else {
  $call = (___errno_location()|0);
  $0 = HEAP32[$call>>2]|0;
  $call1 = (___errno_location()|0);
  HEAP32[$call1>>2] = 0;
  $call2 = (__ZNSt3__26__clocEv()|0);
  $call3 = (+_strtold_l($__a,$__p2,$call2));
  $call4 = (___errno_location()|0);
  $1 = HEAP32[$call4>>2]|0;
  $cmp5 = ($1|0)==(0);
  if ($cmp5) {
   $call7 = (___errno_location()|0);
   HEAP32[$call7>>2] = $0;
  }
  $2 = HEAP32[$__p2>>2]|0;
  $cmp8 = ($2|0)==($__a_end|0);
  if ($cmp8) {
   $cmp10 = ($1|0)==(34);
   if ($cmp10) {
    $retval$0$ph = $call3;
    label = 6;
   } else {
    $retval$0 = $call3;
   }
  } else {
   $retval$0$ph = 0.0;
   label = 6;
  }
  if ((label|0) == 6) {
   HEAP32[$__err>>2] = 4;
   $retval$0 = $retval$0$ph;
  }
  $retval$1 = $retval$0;
 }
 STACKTOP = sp;return (+$retval$1);
}
function __ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE23__do_get_floating_pointIfEES4_S4_S4_RNS_8ios_baseERjRT_($this,$__b,$__e,$__iob,$__err,$__v) {
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$pre = 0, $$pre$i$i$i = 0, $$pre$i$i$i30 = 0, $$pre$i17$i$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $8 = 0, $9 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__a_end = 0, $__atoms = 0, $__buf = 0, $__cap_$i$i = 0, $__cap_$i$i86 = 0, $__dc = 0, $__decimal_point = 0, $__einp_$i$i = 0, $__einp_$i$i$i$i = 0, $__einp_$i$i$i$i18 = 0, $__einp_$i$i4$i$i = 0, $__einp_$i$i4$i$i38 = 0, $__exp = 0, $__g = 0;
 var $__g_end = 0, $__grouping = 0, $__i$0$i$i = 0, $__in_units = 0, $__ninp_$i$i = 0, $__ninp_$i$i$i$i = 0, $__ninp_$i$i$i$i17 = 0, $__ninp_$i$i3$i$i = 0, $__ninp_$i$i3$i$i37 = 0, $__size_$i$i = 0, $__size_$i$i116 = 0, $__size_$i3$i = 0, $__size_$i3$i118 = 0, $__thousands_sep = 0, $add$ptr = 0, $add$ptr17 = 0, $and$i$i = 0, $and$i$i87 = 0, $arrayidx$i$i = 0, $call$i$i$i$i12 = 0;
 var $call$i$i$i$i56 = 0, $call$i$i103 = 0, $call$i$i9$i$i13 = 0, $call$i$i9$i$i58 = 0, $call23 = 0, $call3$i$i = 0, $call3$i$i$i = 0, $call3$i$i$i$i = 0, $call3$i$i$i$i24 = 0, $call3$i$i$i27 = 0, $call3$i$i11$i$i = 0, $call3$i$i11$i$i44 = 0, $call3$i14$i$i = 0, $call3$i14$i$i47 = 0, $call37 = 0.0, $call4$i$i$i = 0, $call4$i$i$i28 = 0, $call4$i15$i$i = 0, $call4$i15$i$i48 = 0, $cmp = 0;
 var $cmp$i$i$i$i = 0, $cmp$i$i$i$i19 = 0, $cmp$i$i102 = 0, $cmp$i$i107 = 0, $cmp$i$i5$i$i = 0, $cmp$i$i5$i$i39 = 0, $cmp29 = 0, $cmp33 = 0, $cond$i = 0, $cond$i$i = 0, $cond$i$i100 = 0, $cond$i122 = 0, $cond$i63 = 0, $cond$i90 = 0, $conv$i = 0, $conv$i$i = 0, $conv$i$i120 = 0, $ehselector$slot$1 = 0, $exitcond$i$i = 0, $exn$slot$1 = 0;
 var $inc$i$i = 0, $incdec$ptr = 0, $incdec$ptr$i$i = 0, $mul = 0, $or = 0, $or$cond = 0, $phitmp$i = 0, $phitmp$i88 = 0, $retval$0$i$i = 0, $retval$0$i$i$i$i = 0, $retval$0$i$i$i$i26 = 0, $retval$0$i$i13$i$i = 0, $retval$0$i$i13$i$i46 = 0, $retval$sroa$0$0$copyload = 0, $sub$ptr$lhs$cast = 0, $sub$ptr$rhs$cast = 0, $sub$ptr$sub = 0, $tobool = 0, $tobool$i$i = 0, $tobool$i$i$i = 0;
 var $tobool$i$i$i14 = 0, $tobool$i$i$i16 = 0, $tobool$i$i$i95 = 0, $tobool$i$i117 = 0, $tobool$i$i61 = 0, $tobool$i$i85 = 0, $tobool$i2$i$i = 0, $tobool$i2$i$i35 = 0, $tobool30 = 0, $vfn$i$i = 0, $vfn$i$i$i$i = 0, $vfn$i$i$i$i22 = 0, $vfn$i$i109 = 0, $vfn$i$i8$i$i = 0, $vfn$i$i8$i$i42 = 0, $vtable$i$i = 0, $vtable$i$i$i$i = 0, $vtable$i$i$i$i21 = 0, $vtable$i$i108 = 0, $vtable$i$i7$i$i = 0;
 var $vtable$i$i7$i$i41 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 240|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(240|0);
 $__atoms = sp + 200|0;
 $__decimal_point = sp + 199|0;
 $__thousands_sep = sp + 198|0;
 $__grouping = sp + 184|0;
 $__buf = sp + 172|0;
 $__a_end = sp + 168|0;
 $__g = sp + 8|0;
 $__g_end = sp + 4|0;
 $__dc = sp;
 $__in_units = sp + 197|0;
 $__exp = sp + 196|0;
 __ZNSt3__29__num_getIcE19__stage2_float_prepERNS_8ios_baseEPcRcS5_($__grouping,$__iob,$__atoms,$__decimal_point,$__thousands_sep);
 ;HEAP32[$__buf>>2]=0|0;HEAP32[$__buf+4>>2]=0|0;HEAP32[$__buf+8>>2]=0|0;
 $__i$0$i$i = 0;
 while(1) {
  $exitcond$i$i = ($__i$0$i$i|0)==(3);
  if ($exitcond$i$i) {
   break;
  }
  $arrayidx$i$i = (($__buf) + ($__i$0$i$i<<2)|0);
  HEAP32[$arrayidx$i$i>>2] = 0;
  $inc$i$i = (($__i$0$i$i) + 1)|0;
  $__i$0$i$i = $inc$i$i;
 }
 $__size_$i$i = ((($__buf)) + 11|0);
 $0 = HEAP8[$__size_$i$i>>0]|0;
 $tobool$i$i = ($0<<24>>24)<(0);
 if ($tobool$i$i) {
  $__cap_$i$i = ((($__buf)) + 8|0);
  $1 = HEAP32[$__cap_$i$i>>2]|0;
  $and$i$i = $1 & 2147483647;
  $phitmp$i = (($and$i$i) + -1)|0;
  $cond$i = $phitmp$i;
 } else {
  $cond$i = 10;
 }
 __THREW__ = 0;
 invoke_viii(377,($__buf|0),($cond$i|0),0);
 $2 = __THREW__; __THREW__ = 0;
 $3 = $2&1;
 if ($3) {
  $30 = ___cxa_find_matching_catch_2()|0;
  $31 = tempRet0;
  $ehselector$slot$1 = $31;$exn$slot$1 = $30;
 } else {
  $4 = HEAP8[$__size_$i$i>>0]|0;
  $tobool$i$i$i14 = ($4<<24>>24)<(0);
  $5 = HEAP32[$__buf>>2]|0;
  $cond$i$i = $tobool$i$i$i14 ? $5 : $__buf;
  HEAP32[$__a_end>>2] = $cond$i$i;
  HEAP32[$__g_end>>2] = $__g;
  HEAP32[$__dc>>2] = 0;
  HEAP8[$__in_units>>0] = 1;
  HEAP8[$__exp>>0] = 69;
  $__size_$i3$i = ((($__buf)) + 4|0);
  $__cap_$i$i86 = ((($__buf)) + 8|0);
  $$pre = HEAP32[$__b>>2]|0;
  $$pre$i$i$i30 = $$pre;$75 = $$pre;$__a$0 = $cond$i$i;
  L11: while(1) {
   $tobool$i$i$i16 = ($$pre$i$i$i30|0)==(0|0);
   if ($tobool$i$i$i16) {
    $$pre$i$i$i = 0;$61 = 0;$76 = 1;
   } else {
    $__ninp_$i$i$i$i17 = ((($$pre$i$i$i30)) + 12|0);
    $6 = HEAP32[$__ninp_$i$i$i$i17>>2]|0;
    $__einp_$i$i$i$i18 = ((($$pre$i$i$i30)) + 16|0);
    $7 = HEAP32[$__einp_$i$i$i$i18>>2]|0;
    $cmp$i$i$i$i19 = ($6|0)==($7|0);
    if ($cmp$i$i$i$i19) {
     $vtable$i$i$i$i21 = HEAP32[$$pre$i$i$i30>>2]|0;
     $vfn$i$i$i$i22 = ((($vtable$i$i$i$i21)) + 36|0);
     $8 = HEAP32[$vfn$i$i$i$i22>>2]|0;
     __THREW__ = 0;
     $call$i$i$i$i56 = (invoke_ii($8|0,($$pre$i$i$i30|0))|0);
     $9 = __THREW__; __THREW__ = 0;
     $10 = $9&1;
     if ($10) {
      break;
     } else {
      $retval$0$i$i$i$i26 = $call$i$i$i$i56;
     }
    } else {
     $11 = HEAP8[$6>>0]|0;
     $call3$i$i$i$i24 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($11)|0);
     $retval$0$i$i$i$i26 = $call3$i$i$i$i24;
    }
    $call3$i$i$i27 = (__ZNSt3__211char_traitsIcE3eofEv()|0);
    $call4$i$i$i28 = (__ZNSt3__211char_traitsIcE11eq_int_typeEii($retval$0$i$i$i$i26,$call3$i$i$i27)|0);
    if ($call4$i$i$i28) {
     HEAP32[$__b>>2] = 0;
     $$pre$i$i$i = 0;$61 = 0;$76 = 1;
    } else {
     $$pre$i$i$i = $$pre$i$i$i30;$61 = $75;$76 = 0;
    }
   }
   $12 = HEAP32[$__e>>2]|0;
   $tobool$i2$i$i35 = ($12|0)==(0|0);
   do {
    if ($tobool$i2$i$i35) {
     label = 20;
    } else {
     $__ninp_$i$i3$i$i37 = ((($12)) + 12|0);
     $13 = HEAP32[$__ninp_$i$i3$i$i37>>2]|0;
     $__einp_$i$i4$i$i38 = ((($12)) + 16|0);
     $14 = HEAP32[$__einp_$i$i4$i$i38>>2]|0;
     $cmp$i$i5$i$i39 = ($13|0)==($14|0);
     if ($cmp$i$i5$i$i39) {
      $vtable$i$i7$i$i41 = HEAP32[$12>>2]|0;
      $vfn$i$i8$i$i42 = ((($vtable$i$i7$i$i41)) + 36|0);
      $15 = HEAP32[$vfn$i$i8$i$i42>>2]|0;
      __THREW__ = 0;
      $call$i$i9$i$i58 = (invoke_ii($15|0,($12|0))|0);
      $16 = __THREW__; __THREW__ = 0;
      $17 = $16&1;
      if ($17) {
       break L11;
      } else {
       $retval$0$i$i13$i$i46 = $call$i$i9$i$i58;
      }
     } else {
      $18 = HEAP8[$13>>0]|0;
      $call3$i$i11$i$i44 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($18)|0);
      $retval$0$i$i13$i$i46 = $call3$i$i11$i$i44;
     }
     $call3$i14$i$i47 = (__ZNSt3__211char_traitsIcE3eofEv()|0);
     $call4$i15$i$i48 = (__ZNSt3__211char_traitsIcE11eq_int_typeEii($retval$0$i$i13$i$i46,$call3$i14$i$i47)|0);
     if ($call4$i15$i$i48) {
      HEAP32[$__e>>2] = 0;
      label = 20;
      break;
     } else {
      if ($76) {
       $77 = $12;
       break;
      } else {
       $$pre$i17$i$i = $12;$__a$2 = $__a$0;
       label = 37;
       break L11;
      }
     }
    }
   } while(0);
   if ((label|0) == 20) {
    label = 0;
    if ($76) {
     $$pre$i17$i$i = 0;$__a$2 = $__a$0;
     label = 37;
     break;
    } else {
     $77 = 0;
    }
   }
   $19 = HEAP32[$__a_end>>2]|0;
   $20 = HEAP8[$__size_$i$i>>0]|0;
   $tobool$i$i61 = ($20<<24>>24)<(0);
   $21 = HEAP32[$__size_$i3$i>>2]|0;
   $conv$i$i = $20&255;
   $cond$i63 = $tobool$i$i61 ? $21 : $conv$i$i;
   $add$ptr = (($__a$0) + ($cond$i63)|0);
   $cmp = ($19|0)==($add$ptr|0);
   if ($cmp) {
    $mul = $cond$i63 << 1;
    __THREW__ = 0;
    invoke_viii(377,($__buf|0),($mul|0),0);
    $22 = __THREW__; __THREW__ = 0;
    $23 = $22&1;
    if ($23) {
     break;
    }
    $24 = HEAP8[$__size_$i$i>>0]|0;
    $tobool$i$i85 = ($24<<24>>24)<(0);
    if ($tobool$i$i85) {
     $25 = HEAP32[$__cap_$i$i86>>2]|0;
     $and$i$i87 = $25 & 2147483647;
     $phitmp$i88 = (($and$i$i87) + -1)|0;
     $cond$i90 = $phitmp$i88;
    } else {
     $cond$i90 = 10;
    }
    __THREW__ = 0;
    invoke_viii(377,($__buf|0),($cond$i90|0),0);
    $26 = __THREW__; __THREW__ = 0;
    $27 = $26&1;
    if ($27) {
     break;
    }
    $28 = HEAP8[$__size_$i$i>>0]|0;
    $tobool$i$i$i95 = ($28<<24>>24)<(0);
    $29 = HEAP32[$__buf>>2]|0;
    $cond$i$i100 = $tobool$i$i$i95 ? $29 : $__buf;
    $add$ptr17 = (($cond$i$i100) + ($cond$i63)|0);
    HEAP32[$__a_end>>2] = $add$ptr17;
    $__a$1 = $cond$i$i100;
   } else {
    $__a$1 = $__a$0;
   }
   $__ninp_$i$i = ((($$pre$i$i$i)) + 12|0);
   $32 = HEAP32[$__ninp_$i$i>>2]|0;
   $__einp_$i$i = ((($$pre$i$i$i)) + 16|0);
   $33 = HEAP32[$__einp_$i$i>>2]|0;
   $cmp$i$i102 = ($32|0)==($33|0);
   if ($cmp$i$i102) {
    $vtable$i$i = HEAP32[$$pre$i$i$i>>2]|0;
    $vfn$i$i = ((($vtable$i$i)) + 36|0);
    $34 = HEAP32[$vfn$i$i>>2]|0;
    __THREW__ = 0;
    $call$i$i103 = (invoke_ii($34|0,($$pre$i$i$i|0))|0);
    $35 = __THREW__; __THREW__ = 0;
    $36 = $35&1;
    if ($36) {
     break;
    } else {
     $retval$0$i$i = $call$i$i103;
    }
   } else {
    $37 = HEAP8[$32>>0]|0;
    $call3$i$i = (__ZNSt3__211char_traitsIcE11to_int_typeEc($37)|0);
    $retval$0$i$i = $call3$i$i;
   }
   $conv$i = $retval$0$i$i&255;
   $38 = HEAP8[$__decimal_point>>0]|0;
   $39 = HEAP8[$__thousands_sep>>0]|0;
   __THREW__ = 0;
   $call23 = (invoke_iiiiiiiiiiiii(398,($conv$i|0),($__in_units|0),($__exp|0),($__a$1|0),($__a_end|0),($38|0),($39|0),($__grouping|0),($__g|0),($__g_end|0),($__dc|0),($__atoms|0))|0);
   $40 = __THREW__; __THREW__ = 0;
   $41 = $40&1;
   if ($41) {
    break;
   }
   $tobool = ($call23|0)==(0);
   if (!($tobool)) {
    $$pre$i17$i$i = $77;$__a$2 = $__a$1;
    label = 37;
    break;
   }
   $42 = HEAP32[$__ninp_$i$i>>2]|0;
   $43 = HEAP32[$__einp_$i$i>>2]|0;
   $cmp$i$i107 = ($42|0)==($43|0);
   if ($cmp$i$i107) {
    $vtable$i$i108 = HEAP32[$$pre$i$i$i>>2]|0;
    $vfn$i$i109 = ((($vtable$i$i108)) + 40|0);
    $44 = HEAP32[$vfn$i$i109>>2]|0;
    __THREW__ = 0;
    (invoke_ii($44|0,($$pre$i$i$i|0))|0);
    $45 = __THREW__; __THREW__ = 0;
    $46 = $45&1;
    if ($46) {
     break;
    } else {
     $$pre$i$i$i30 = $$pre$i$i$i;$75 = $61;$__a$0 = $__a$1;
     continue;
    }
   } else {
    $incdec$ptr$i$i = ((($42)) + 1|0);
    HEAP32[$__ninp_$i$i>>2] = $incdec$ptr$i$i;
    $47 = HEAP8[$42>>0]|0;
    (__ZNSt3__211char_traitsIcE11to_int_typeEc($47)|0);
    $$pre$i$i$i30 = $$pre$i$i$i;$75 = $61;$__a$0 = $__a$1;
    continue;
   }
  }
  L50: do {
   if ((label|0) == 37) {
    $__size_$i$i116 = ((($__grouping)) + 11|0);
    $48 = HEAP8[$__size_$i$i116>>0]|0;
    $tobool$i$i117 = ($48<<24>>24)<(0);
    $__size_$i3$i118 = ((($__grouping)) + 4|0);
    $49 = HEAP32[$__size_$i3$i118>>2]|0;
    $conv$i$i120 = $48&255;
    $cond$i122 = $tobool$i$i117 ? $49 : $conv$i$i120;
    $cmp29 = ($cond$i122|0)==(0);
    $50 = HEAP8[$__in_units>>0]|0;
    $tobool30 = ($50<<24>>24)==(0);
    $or$cond = $cmp29 | $tobool30;
    if (!($or$cond)) {
     $51 = HEAP32[$__g_end>>2]|0;
     $sub$ptr$lhs$cast = $51;
     $sub$ptr$rhs$cast = $__g;
     $sub$ptr$sub = (($sub$ptr$lhs$cast) - ($sub$ptr$rhs$cast))|0;
     $cmp33 = ($sub$ptr$sub|0)<(160);
     if ($cmp33) {
      $52 = HEAP32[$__dc>>2]|0;
      $incdec$ptr = ((($51)) + 4|0);
      HEAP32[$__g_end>>2] = $incdec$ptr;
      HEAP32[$51>>2] = $52;
     }
    }
    $53 = HEAP32[$__a_end>>2]|0;
    __THREW__ = 0;
    $call37 = (+invoke_diii(402,($__a$2|0),($53|0),($__err|0)));
    $54 = __THREW__; __THREW__ = 0;
    $55 = $54&1;
    if (!($55)) {
     HEAPF32[$__v>>2] = $call37;
     $56 = HEAP32[$__g_end>>2]|0;
     __THREW__ = 0;
     invoke_viiii(400,($__grouping|0),($__g|0),($56|0),($__err|0));
     $57 = __THREW__; __THREW__ = 0;
     $58 = $57&1;
     if (!($58)) {
      $tobool$i$i$i = ($$pre$i$i$i|0)==(0|0);
      if ($tobool$i$i$i) {
       $78 = 1;
      } else {
       $__ninp_$i$i$i$i = ((($$pre$i$i$i)) + 12|0);
       $59 = HEAP32[$__ninp_$i$i$i$i>>2]|0;
       $__einp_$i$i$i$i = ((($$pre$i$i$i)) + 16|0);
       $60 = HEAP32[$__einp_$i$i$i$i>>2]|0;
       $cmp$i$i$i$i = ($59|0)==($60|0);
       if ($cmp$i$i$i$i) {
        $vtable$i$i$i$i = HEAP32[$61>>2]|0;
        $vfn$i$i$i$i = ((($vtable$i$i$i$i)) + 36|0);
        $62 = HEAP32[$vfn$i$i$i$i>>2]|0;
        __THREW__ = 0;
        $call$i$i$i$i12 = (invoke_ii($62|0,($$pre$i$i$i|0))|0);
        $63 = __THREW__; __THREW__ = 0;
        $64 = $63&1;
        if ($64) {
         break;
        } else {
         $retval$0$i$i$i$i = $call$i$i$i$i12;
        }
       } else {
        $65 = HEAP8[$59>>0]|0;
        $call3$i$i$i$i = (__ZNSt3__211char_traitsIcE11to_int_typeEc($65)|0);
        $retval$0$i$i$i$i = $call3$i$i$i$i;
       }
       $call3$i$i$i = (__ZNSt3__211char_traitsIcE3eofEv()|0);
       $call4$i$i$i = (__ZNSt3__211char_traitsIcE11eq_int_typeEii($retval$0$i$i$i$i,$call3$i$i$i)|0);
       if ($call4$i$i$i) {
        HEAP32[$__b>>2] = 0;
        $78 = 1;
       } else {
        $78 = 0;
       }
      }
      $tobool$i2$i$i = ($$pre$i17$i$i|0)==(0|0);
      do {
       if ($tobool$i2$i$i) {
        label = 54;
       } else {
        $__ninp_$i$i3$i$i = ((($$pre$i17$i$i)) + 12|0);
        $66 = HEAP32[$__ninp_$i$i3$i$i>>2]|0;
        $__einp_$i$i4$i$i = ((($$pre$i17$i$i)) + 16|0);
        $67 = HEAP32[$__einp_$i$i4$i$i>>2]|0;
        $cmp$i$i5$i$i = ($66|0)==($67|0);
        if ($cmp$i$i5$i$i) {
         $vtable$i$i7$i$i = HEAP32[$$pre$i17$i$i>>2]|0;
         $vfn$i$i8$i$i = ((($vtable$i$i7$i$i)) + 36|0);
         $68 = HEAP32[$vfn$i$i8$i$i>>2]|0;
         __THREW__ = 0;
         $call$i$i9$i$i13 = (invoke_ii($68|0,($$pre$i17$i$i|0))|0);
         $69 = __THREW__; __THREW__ = 0;
         $70 = $69&1;
         if ($70) {
          break L50;
         } else {
          $retval$0$i$i13$i$i = $call$i$i9$i$i13;
         }
        } else {
         $71 = HEAP8[$66>>0]|0;
         $call3$i$i11$i$i = (__ZNSt3__211char_traitsIcE11to_int_typeEc($71)|0);
         $retval$0$i$i13$i$i = $call3$i$i11$i$i;
        }
        $call3$i14$i$i = (__ZNSt3__211char_traitsIcE3eofEv()|0);
        $call4$i15$i$i = (__ZNSt3__211char_traitsIcE11eq_int_typeEii($retval$0$i$i13$i$i,$call3$i14$i$i)|0);
        if ($call4$i15$i$i) {
         HEAP32[$__e>>2] = 0;
         label = 54;
         break;
        } else {
         if ($78) {
          break;
         } else {
          label = 56;
          break;
         }
        }
       }
      } while(0);
      if ((label|0) == 54) {
       if ($78) {
        label = 56;
       }
      }
      if ((label|0) == 56) {
       $72 = HEAP32[$__err>>2]|0;
       $or = $72 | 2;
       HEAP32[$__err>>2] = $or;
      }
      $retval$sroa$0$0$copyload = HEAP32[$__b>>2]|0;
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__buf);
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grouping);
      STACKTOP = sp;return ($retval$sroa$0$0$copyload|0);
     }
    }
   }
  } while(0);
  $73 = ___cxa_find_matching_catch_2()|0;
  $74 = tempRet0;
  $ehselector$slot$1 = $74;$exn$slot$1 = $73;
 }
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__buf);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grouping);
 ___resumeException($exn$slot$1|0);
 // unreachable;
 return (0)|0;
}
function __ZNSt3__215__num_get_floatIfEET_PKcS3_Rj($__a,$__a_end,$__err) {
 $__a = $__a|0;
 $__a_end = $__a_end|0;
 $__err = $__err|0;
 var $0 = 0, $1 = 0, $2 = 0, $__p2 = 0, $call = 0, $call1 = 0, $call2 = 0, $call3 = 0.0, $call4 = 0, $call7 = 0, $cmp = 0, $cmp10 = 0, $cmp5 = 0, $cmp8 = 0, $conv = 0.0, $retval$0 = 0.0, $retval$1 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $__p2 = sp;
 $cmp = ($__a|0)==($__a_end|0);
 if ($cmp) {
  HEAP32[$__err>>2] = 4;
  $retval$1 = 0.0;
 } else {
  $call = (___errno_location()|0);
  $0 = HEAP32[$call>>2]|0;
  $call1 = (___errno_location()|0);
  HEAP32[$call1>>2] = 0;
  $call2 = (__ZNSt3__26__clocEv()|0);
  $call3 = (+_strtold_l($__a,$__p2,$call2));
  $call4 = (___errno_location()|0);
  $1 = HEAP32[$call4>>2]|0;
  $cmp5 = ($1|0)==(0);
  if ($cmp5) {
   $call7 = (___errno_location()|0);
   HEAP32[$call7>>2] = $0;
  }
  $2 = HEAP32[$__p2>>2]|0;
  $cmp8 = ($2|0)==($__a_end|0);
  if ($cmp8) {
   $cmp10 = ($1|0)==(34);
   if ($cmp10) {
    HEAP32[$__err>>2] = 4;
   }
   $conv = $call3;
   $retval$0 = $conv;
  } else {
   HEAP32[$__err>>2] = 4;
   $retval$0 = 0.0;
  }
  $retval$1 = $retval$0;
 }
 STACKTOP = sp;return (+$retval$1);
}
function __ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__do_get_unsignedIyEES4_S4_S4_RNS_8ios_baseERjRT_($this,$__b,$__e,$__iob,$__err,$__v) {
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$pre = 0, $$pre$i$i$i = 0, $$pre$i$i$i34 = 0, $$pre$i17$i$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $9 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__a_end = 0, $__atoms = 0, $__buf = 0, $__cap_$i$i = 0, $__cap_$i$i90 = 0, $__dc = 0, $__einp_$i$i = 0, $__einp_$i$i$i$i = 0, $__einp_$i$i$i$i22 = 0, $__einp_$i$i4$i$i = 0;
 var $__einp_$i$i4$i$i42 = 0, $__g = 0, $__g_end = 0, $__grouping = 0, $__i$0$i$i = 0, $__ninp_$i$i = 0, $__ninp_$i$i$i$i = 0, $__ninp_$i$i$i$i21 = 0, $__ninp_$i$i3$i$i = 0, $__ninp_$i$i3$i$i41 = 0, $__size_$i$i = 0, $__size_$i$i120 = 0, $__size_$i3$i = 0, $__size_$i3$i122 = 0, $__thousands_sep = 0, $add$ptr = 0, $add$ptr18 = 0, $and$i$i = 0, $and$i$i91 = 0, $arrayidx$i$i = 0;
 var $call = 0, $call$i$i$i$i16 = 0, $call$i$i$i$i60 = 0, $call$i$i107 = 0, $call$i$i9$i$i17 = 0, $call$i$i9$i$i62 = 0, $call24 = 0, $call3$i$i = 0, $call3$i$i$i = 0, $call3$i$i$i$i = 0, $call3$i$i$i$i28 = 0, $call3$i$i$i31 = 0, $call3$i$i11$i$i = 0, $call3$i$i11$i$i48 = 0, $call3$i14$i$i = 0, $call3$i14$i$i51 = 0, $call4$i$i$i = 0, $call4$i$i$i32 = 0, $call4$i15$i$i = 0, $call4$i15$i$i52 = 0;
 var $cmp = 0, $cmp$i$i$i$i = 0, $cmp$i$i$i$i23 = 0, $cmp$i$i106 = 0, $cmp$i$i111 = 0, $cmp$i$i5$i$i = 0, $cmp$i$i5$i$i43 = 0, $cmp30 = 0, $cmp32 = 0, $cond$i = 0, $cond$i$i = 0, $cond$i$i104 = 0, $cond$i126 = 0, $cond$i67 = 0, $cond$i94 = 0, $conv$i = 0, $conv$i$i = 0, $conv$i$i124 = 0, $ehselector$slot$1 = 0, $exitcond$i$i = 0;
 var $exn$slot$1 = 0, $inc$i$i = 0, $incdec$ptr = 0, $incdec$ptr$i$i = 0, $mul = 0, $or = 0, $phitmp$i = 0, $phitmp$i92 = 0, $retval$0$i$i = 0, $retval$0$i$i$i$i = 0, $retval$0$i$i$i$i30 = 0, $retval$0$i$i13$i$i = 0, $retval$0$i$i13$i$i50 = 0, $retval$sroa$0$0$copyload = 0, $sub$ptr$lhs$cast = 0, $sub$ptr$rhs$cast = 0, $sub$ptr$sub = 0, $tobool = 0, $tobool$i$i = 0, $tobool$i$i$i = 0;
 var $tobool$i$i$i18 = 0, $tobool$i$i$i20 = 0, $tobool$i$i$i99 = 0, $tobool$i$i121 = 0, $tobool$i$i65 = 0, $tobool$i$i89 = 0, $tobool$i2$i$i = 0, $tobool$i2$i$i39 = 0, $vfn$i$i = 0, $vfn$i$i$i$i = 0, $vfn$i$i$i$i26 = 0, $vfn$i$i113 = 0, $vfn$i$i8$i$i = 0, $vfn$i$i8$i$i46 = 0, $vtable$i$i = 0, $vtable$i$i$i$i = 0, $vtable$i$i$i$i25 = 0, $vtable$i$i112 = 0, $vtable$i$i7$i$i = 0, $vtable$i$i7$i$i45 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(224|0);
 $__atoms = sp + 198|0;
 $__thousands_sep = sp + 196|0;
 $__grouping = sp + 184|0;
 $__buf = sp + 172|0;
 $__a_end = sp + 168|0;
 $__g = sp + 8|0;
 $__g_end = sp + 4|0;
 $__dc = sp;
 $call = (__ZNSt3__214__num_get_base10__get_baseERNS_8ios_baseE($__iob)|0);
 __ZNSt3__29__num_getIcE17__stage2_int_prepERNS_8ios_baseEPcRc($__grouping,$__iob,$__atoms,$__thousands_sep);
 ;HEAP32[$__buf>>2]=0|0;HEAP32[$__buf+4>>2]=0|0;HEAP32[$__buf+8>>2]=0|0;
 $__i$0$i$i = 0;
 while(1) {
  $exitcond$i$i = ($__i$0$i$i|0)==(3);
  if ($exitcond$i$i) {
   break;
  }
  $arrayidx$i$i = (($__buf) + ($__i$0$i$i<<2)|0);
  HEAP32[$arrayidx$i$i>>2] = 0;
  $inc$i$i = (($__i$0$i$i) + 1)|0;
  $__i$0$i$i = $inc$i$i;
 }
 $__size_$i$i = ((($__buf)) + 11|0);
 $0 = HEAP8[$__size_$i$i>>0]|0;
 $tobool$i$i = ($0<<24>>24)<(0);
 if ($tobool$i$i) {
  $__cap_$i$i = ((($__buf)) + 8|0);
  $1 = HEAP32[$__cap_$i$i>>2]|0;
  $and$i$i = $1 & 2147483647;
  $phitmp$i = (($and$i$i) + -1)|0;
  $cond$i = $phitmp$i;
 } else {
  $cond$i = 10;
 }
 __THREW__ = 0;
 invoke_viii(377,($__buf|0),($cond$i|0),0);
 $2 = __THREW__; __THREW__ = 0;
 $3 = $2&1;
 if ($3) {
  $30 = ___cxa_find_matching_catch_2()|0;
  $31 = tempRet0;
  $ehselector$slot$1 = $31;$exn$slot$1 = $30;
 } else {
  $4 = HEAP8[$__size_$i$i>>0]|0;
  $tobool$i$i$i18 = ($4<<24>>24)<(0);
  $5 = HEAP32[$__buf>>2]|0;
  $cond$i$i = $tobool$i$i$i18 ? $5 : $__buf;
  HEAP32[$__a_end>>2] = $cond$i$i;
  HEAP32[$__g_end>>2] = $__g;
  HEAP32[$__dc>>2] = 0;
  $__size_$i3$i = ((($__buf)) + 4|0);
  $__cap_$i$i90 = ((($__buf)) + 8|0);
  $$pre = HEAP32[$__b>>2]|0;
  $$pre$i$i$i34 = $$pre;$79 = $$pre;$__a$0 = $cond$i$i;
  L11: while(1) {
   $tobool$i$i$i20 = ($$pre$i$i$i34|0)==(0|0);
   if ($tobool$i$i$i20) {
    $$pre$i$i$i = 0;$65 = 0;$80 = 1;
   } else {
    $__ninp_$i$i$i$i21 = ((($$pre$i$i$i34)) + 12|0);
    $6 = HEAP32[$__ninp_$i$i$i$i21>>2]|0;
    $__einp_$i$i$i$i22 = ((($$pre$i$i$i34)) + 16|0);
    $7 = HEAP32[$__einp_$i$i$i$i22>>2]|0;
    $cmp$i$i$i$i23 = ($6|0)==($7|0);
    if ($cmp$i$i$i$i23) {
     $vtable$i$i$i$i25 = HEAP32[$$pre$i$i$i34>>2]|0;
     $vfn$i$i$i$i26 = ((($vtable$i$i$i$i25)) + 36|0);
     $8 = HEAP32[$vfn$i$i$i$i26>>2]|0;
     __THREW__ = 0;
     $call$i$i$i$i60 = (invoke_ii($8|0,($$pre$i$i$i34|0))|0);
     $9 = __THREW__; __THREW__ = 0;
     $10 = $9&1;
     if ($10) {
      break;
     } else {
      $retval$0$i$i$i$i30 = $call$i$i$i$i60;
     }
    } else {
     $11 = HEAP8[$6>>0]|0;
     $call3$i$i$i$i28 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($11)|0);
     $retval$0$i$i$i$i30 = $call3$i$i$i$i28;
    }
    $call3$i$i$i31 = (__ZNSt3__211char_traitsIcE3eofEv()|0);
    $call4$i$i$i32 = (__ZNSt3__211char_traitsIcE11eq_int_typeEii($retval$0$i$i$i$i30,$call3$i$i$i31)|0);
    if ($call4$i$i$i32) {
     HEAP32[$__b>>2] = 0;
     $$pre$i$i$i = 0;$65 = 0;$80 = 1;
    } else {
     $$pre$i$i$i = $$pre$i$i$i34;$65 = $79;$80 = 0;
    }
   }
   $12 = HEAP32[$__e>>2]|0;
   $tobool$i2$i$i39 = ($12|0)==(0|0);
   do {
    if ($tobool$i2$i$i39) {
     label = 20;
    } else {
     $__ninp_$i$i3$i$i41 = ((($12)) + 12|0);
     $13 = HEAP32[$__ninp_$i$i3$i$i41>>2]|0;
     $__einp_$i$i4$i$i42 = ((($12)) + 16|0);
     $14 = HEAP32[$__einp_$i$i4$i$i42>>2]|0;
     $cmp$i$i5$i$i43 = ($13|0)==($14|0);
     if ($cmp$i$i5$i$i43) {
      $vtable$i$i7$i$i45 = HEAP32[$12>>2]|0;
      $vfn$i$i8$i$i46 = ((($vtable$i$i7$i$i45)) + 36|0);
      $15 = HEAP32[$vfn$i$i8$i$i46>>2]|0;
      __THREW__ = 0;
      $call$i$i9$i$i62 = (invoke_ii($15|0,($12|0))|0);
      $16 = __THREW__; __THREW__ = 0;
      $17 = $16&1;
      if ($17) {
       break L11;
      } else {
       $retval$0$i$i13$i$i50 = $call$i$i9$i$i62;
      }
     } else {
      $18 = HEAP8[$13>>0]|0;
      $call3$i$i11$i$i48 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($18)|0);
      $retval$0$i$i13$i$i50 = $call3$i$i11$i$i48;
     }
     $call3$i14$i$i51 = (__ZNSt3__211char_traitsIcE3eofEv()|0);
     $call4$i15$i$i52 = (__ZNSt3__211char_traitsIcE11eq_int_typeEii($retval$0$i$i13$i$i50,$call3$i14$i$i51)|0);
     if ($call4$i15$i$i52) {
      HEAP32[$__e>>2] = 0;
      label = 20;
      break;
     } else {
      if ($80) {
       $81 = $12;
       break;
      } else {
       $$pre$i17$i$i = $12;$__a$2 = $__a$0;
       label = 37;
       break L11;
      }
     }
    }
   } while(0);
   if ((label|0) == 20) {
    label = 0;
    if ($80) {
     $$pre$i17$i$i = 0;$__a$2 = $__a$0;
     label = 37;
     break;
    } else {
     $81 = 0;
    }
   }
   $19 = HEAP32[$__a_end>>2]|0;
   $20 = HEAP8[$__size_$i$i>>0]|0;
   $tobool$i$i65 = ($20<<24>>24)<(0);
   $21 = HEAP32[$__size_$i3$i>>2]|0;
   $conv$i$i = $20&255;
   $cond$i67 = $tobool$i$i65 ? $21 : $conv$i$i;
   $add$ptr = (($__a$0) + ($cond$i67)|0);
   $cmp = ($19|0)==($add$ptr|0);
   if ($cmp) {
    $mul = $cond$i67 << 1;
    __THREW__ = 0;
    invoke_viii(377,($__buf|0),($mul|0),0);
    $22 = __THREW__; __THREW__ = 0;
    $23 = $22&1;
    if ($23) {
     break;
    }
    $24 = HEAP8[$__size_$i$i>>0]|0;
    $tobool$i$i89 = ($24<<24>>24)<(0);
    if ($tobool$i$i89) {
     $25 = HEAP32[$__cap_$i$i90>>2]|0;
     $and$i$i91 = $25 & 2147483647;
     $phitmp$i92 = (($and$i$i91) + -1)|0;
     $cond$i94 = $phitmp$i92;
    } else {
     $cond$i94 = 10;
    }
    __THREW__ = 0;
    invoke_viii(377,($__buf|0),($cond$i94|0),0);
    $26 = __THREW__; __THREW__ = 0;
    $27 = $26&1;
    if ($27) {
     break;
    }
    $28 = HEAP8[$__size_$i$i>>0]|0;
    $tobool$i$i$i99 = ($28<<24>>24)<(0);
    $29 = HEAP32[$__buf>>2]|0;
    $cond$i$i104 = $tobool$i$i$i99 ? $29 : $__buf;
    $add$ptr18 = (($cond$i$i104) + ($cond$i67)|0);
    HEAP32[$__a_end>>2] = $add$ptr18;
    $__a$1 = $cond$i$i104;
   } else {
    $__a$1 = $__a$0;
   }
   $__ninp_$i$i = ((($$pre$i$i$i)) + 12|0);
   $32 = HEAP32[$__ninp_$i$i>>2]|0;
   $__einp_$i$i = ((($$pre$i$i$i)) + 16|0);
   $33 = HEAP32[$__einp_$i$i>>2]|0;
   $cmp$i$i106 = ($32|0)==($33|0);
   if ($cmp$i$i106) {
    $vtable$i$i = HEAP32[$$pre$i$i$i>>2]|0;
    $vfn$i$i = ((($vtable$i$i)) + 36|0);
    $34 = HEAP32[$vfn$i$i>>2]|0;
    __THREW__ = 0;
    $call$i$i107 = (invoke_ii($34|0,($$pre$i$i$i|0))|0);
    $35 = __THREW__; __THREW__ = 0;
    $36 = $35&1;
    if ($36) {
     break;
    } else {
     $retval$0$i$i = $call$i$i107;
    }
   } else {
    $37 = HEAP8[$32>>0]|0;
    $call3$i$i = (__ZNSt3__211char_traitsIcE11to_int_typeEc($37)|0);
    $retval$0$i$i = $call3$i$i;
   }
   $conv$i = $retval$0$i$i&255;
   $38 = HEAP8[$__thousands_sep>>0]|0;
   __THREW__ = 0;
   $call24 = (invoke_iiiiiiiiiii(391,($conv$i|0),($call|0),($__a$1|0),($__a_end|0),($__dc|0),($38|0),($__grouping|0),($__g|0),($__g_end|0),($__atoms|0))|0);
   $39 = __THREW__; __THREW__ = 0;
   $40 = $39&1;
   if ($40) {
    break;
   }
   $tobool = ($call24|0)==(0);
   if (!($tobool)) {
    $$pre$i17$i$i = $81;$__a$2 = $__a$1;
    label = 37;
    break;
   }
   $41 = HEAP32[$__ninp_$i$i>>2]|0;
   $42 = HEAP32[$__einp_$i$i>>2]|0;
   $cmp$i$i111 = ($41|0)==($42|0);
   if ($cmp$i$i111) {
    $vtable$i$i112 = HEAP32[$$pre$i$i$i>>2]|0;
    $vfn$i$i113 = ((($vtable$i$i112)) + 40|0);
    $43 = HEAP32[$vfn$i$i113>>2]|0;
    __THREW__ = 0;
    (invoke_ii($43|0,($$pre$i$i$i|0))|0);
    $44 = __THREW__; __THREW__ = 0;
    $45 = $44&1;
    if ($45) {
     break;
    } else {
     $$pre$i$i$i34 = $$pre$i$i$i;$79 = $65;$__a$0 = $__a$1;
     continue;
    }
   } else {
    $incdec$ptr$i$i = ((($41)) + 1|0);
    HEAP32[$__ninp_$i$i>>2] = $incdec$ptr$i$i;
    $46 = HEAP8[$41>>0]|0;
    (__ZNSt3__211char_traitsIcE11to_int_typeEc($46)|0);
    $$pre$i$i$i34 = $$pre$i$i$i;$79 = $65;$__a$0 = $__a$1;
    continue;
   }
  }
  L50: do {
   if ((label|0) == 37) {
    $__size_$i$i120 = ((($__grouping)) + 11|0);
    $47 = HEAP8[$__size_$i$i120>>0]|0;
    $tobool$i$i121 = ($47<<24>>24)<(0);
    $__size_$i3$i122 = ((($__grouping)) + 4|0);
    $48 = HEAP32[$__size_$i3$i122>>2]|0;
    $conv$i$i124 = $47&255;
    $cond$i126 = $tobool$i$i121 ? $48 : $conv$i$i124;
    $cmp30 = ($cond$i126|0)==(0);
    if (!($cmp30)) {
     $49 = HEAP32[$__g_end>>2]|0;
     $sub$ptr$lhs$cast = $49;
     $sub$ptr$rhs$cast = $__g;
     $sub$ptr$sub = (($sub$ptr$lhs$cast) - ($sub$ptr$rhs$cast))|0;
     $cmp32 = ($sub$ptr$sub|0)<(160);
     if ($cmp32) {
      $50 = HEAP32[$__dc>>2]|0;
      $incdec$ptr = ((($49)) + 4|0);
      HEAP32[$__g_end>>2] = $incdec$ptr;
      HEAP32[$49>>2] = $50;
     }
    }
    $51 = HEAP32[$__a_end>>2]|0;
    __THREW__ = 0;
    $52 = (invoke_iiiii(403,($__a$2|0),($51|0),($__err|0),($call|0))|0);
    $53 = tempRet0;
    $54 = __THREW__; __THREW__ = 0;
    $55 = $54&1;
    if (!($55)) {
     $56 = $__v;
     $57 = $56;
     HEAP32[$57>>2] = $52;
     $58 = (($56) + 4)|0;
     $59 = $58;
     HEAP32[$59>>2] = $53;
     $60 = HEAP32[$__g_end>>2]|0;
     __THREW__ = 0;
     invoke_viiii(400,($__grouping|0),($__g|0),($60|0),($__err|0));
     $61 = __THREW__; __THREW__ = 0;
     $62 = $61&1;
     if (!($62)) {
      $tobool$i$i$i = ($$pre$i$i$i|0)==(0|0);
      if ($tobool$i$i$i) {
       $82 = 1;
      } else {
       $__ninp_$i$i$i$i = ((($$pre$i$i$i)) + 12|0);
       $63 = HEAP32[$__ninp_$i$i$i$i>>2]|0;
       $__einp_$i$i$i$i = ((($$pre$i$i$i)) + 16|0);
       $64 = HEAP32[$__einp_$i$i$i$i>>2]|0;
       $cmp$i$i$i$i = ($63|0)==($64|0);
       if ($cmp$i$i$i$i) {
        $vtable$i$i$i$i = HEAP32[$65>>2]|0;
        $vfn$i$i$i$i = ((($vtable$i$i$i$i)) + 36|0);
        $66 = HEAP32[$vfn$i$i$i$i>>2]|0;
        __THREW__ = 0;
        $call$i$i$i$i16 = (invoke_ii($66|0,($$pre$i$i$i|0))|0);
        $67 = __THREW__; __THREW__ = 0;
        $68 = $67&1;
        if ($68) {
         break;
        } else {
         $retval$0$i$i$i$i = $call$i$i$i$i16;
        }
       } else {
        $69 = HEAP8[$63>>0]|0;
        $call3$i$i$i$i = (__ZNSt3__211char_traitsIcE11to_int_typeEc($69)|0);
        $retval$0$i$i$i$i = $call3$i$i$i$i;
       }
       $call3$i$i$i = (__ZNSt3__211char_traitsIcE3eofEv()|0);
       $call4$i$i$i = (__ZNSt3__211char_traitsIcE11eq_int_typeEii($retval$0$i$i$i$i,$call3$i$i$i)|0);
       if ($call4$i$i$i) {
        HEAP32[$__b>>2] = 0;
        $82 = 1;
       } else {
        $82 = 0;
       }
      }
      $tobool$i2$i$i = ($$pre$i17$i$i|0)==(0|0);
      do {
       if ($tobool$i2$i$i) {
        label = 54;
       } else {
        $__ninp_$i$i3$i$i = ((($$pre$i17$i$i)) + 12|0);
        $70 = HEAP32[$__ninp_$i$i3$i$i>>2]|0;
        $__einp_$i$i4$i$i = ((($$pre$i17$i$i)) + 16|0);
        $71 = HEAP32[$__einp_$i$i4$i$i>>2]|0;
        $cmp$i$i5$i$i = ($70|0)==($71|0);
        if ($cmp$i$i5$i$i) {
         $vtable$i$i7$i$i = HEAP32[$$pre$i17$i$i>>2]|0;
         $vfn$i$i8$i$i = ((($vtable$i$i7$i$i)) + 36|0);
         $72 = HEAP32[$vfn$i$i8$i$i>>2]|0;
         __THREW__ = 0;
         $call$i$i9$i$i17 = (invoke_ii($72|0,($$pre$i17$i$i|0))|0);
         $73 = __THREW__; __THREW__ = 0;
         $74 = $73&1;
         if ($74) {
          break L50;
         } else {
          $retval$0$i$i13$i$i = $call$i$i9$i$i17;
         }
        } else {
         $75 = HEAP8[$70>>0]|0;
         $call3$i$i11$i$i = (__ZNSt3__211char_traitsIcE11to_int_typeEc($75)|0);
         $retval$0$i$i13$i$i = $call3$i$i11$i$i;
        }
        $call3$i14$i$i = (__ZNSt3__211char_traitsIcE3eofEv()|0);
        $call4$i15$i$i = (__ZNSt3__211char_traitsIcE11eq_int_typeEii($retval$0$i$i13$i$i,$call3$i14$i$i)|0);
        if ($call4$i15$i$i) {
         HEAP32[$__e>>2] = 0;
         label = 54;
         break;
        } else {
         if ($82) {
          break;
         } else {
          label = 56;
          break;
         }
        }
       }
      } while(0);
      if ((label|0) == 54) {
       if ($82) {
        label = 56;
       }
      }
      if ((label|0) == 56) {
       $76 = HEAP32[$__err>>2]|0;
       $or = $76 | 2;
       HEAP32[$__err>>2] = $or;
      }
      $retval$sroa$0$0$copyload = HEAP32[$__b>>2]|0;
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__buf);
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grouping);
      STACKTOP = sp;return ($retval$sroa$0$0$copyload|0);
     }
    }
   }
  } while(0);
  $77 = ___cxa_find_matching_catch_2()|0;
  $78 = tempRet0;
  $ehselector$slot$1 = $78;$exn$slot$1 = $77;
 }
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__buf);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grouping);
 ___resumeException($exn$slot$1|0);
 // unreachable;
 return (0)|0;
}
function __ZNSt3__214__num_get_base10__get_baseERNS_8ios_baseE($iob) {
 $iob = $iob|0;
 var $0 = 0, $__fmtflags_$i = 0, $and = 0, $retval$0 = 0, $trunc = 0, $trunc$clear = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $__fmtflags_$i = ((($iob)) + 4|0);
 $0 = HEAP32[$__fmtflags_$i>>2]|0;
 $and = $0 & 74;
 $trunc = $and&255;
 $trunc$clear = $trunc & 127;
 switch ($trunc$clear<<24>>24) {
 case 64:  {
  $retval$0 = 8;
  break;
 }
 case 8:  {
  $retval$0 = 16;
  break;
 }
 case 0:  {
  $retval$0 = 0;
  break;
 }
 default: {
  $retval$0 = 10;
 }
 }
 return ($retval$0|0);
}
function __ZNSt3__29__num_getIcE17__stage2_int_prepERNS_8ios_baseEPcRc($agg$result,$__iob,$__atoms,$__thousands_sep) {
 $agg$result = $agg$result|0;
 $__iob = $__iob|0;
 $__atoms = $__atoms|0;
 $__thousands_sep = $__thousands_sep|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__loc = 0, $call$i10 = 0, $call$i5 = 0, $call$i7 = 0, $vfn$i = 0;
 var $vfn$i12 = 0, $vfn$i9 = 0, $vtable$i = 0, $vtable$i11 = 0, $vtable$i8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $__loc = sp;
 __ZNKSt3__28ios_base6getlocEv($__loc,$__iob);
 __THREW__ = 0;
 $call$i5 = (invoke_iii(380,($__loc|0),(20096|0))|0);
 $0 = __THREW__; __THREW__ = 0;
 $1 = $0&1;
 if (!($1)) {
  $vtable$i = HEAP32[$call$i5>>2]|0;
  $vfn$i = ((($vtable$i)) + 32|0);
  $2 = HEAP32[$vfn$i>>2]|0;
  __THREW__ = 0;
  (invoke_iiiii($2|0,($call$i5|0),(15690|0),((15716)|0),($__atoms|0))|0);
  $3 = __THREW__; __THREW__ = 0;
  $4 = $3&1;
  if (!($4)) {
   __THREW__ = 0;
   $call$i7 = (invoke_iii(380,($__loc|0),(20112|0))|0);
   $5 = __THREW__; __THREW__ = 0;
   $6 = $5&1;
   if (!($6)) {
    $vtable$i8 = HEAP32[$call$i7>>2]|0;
    $vfn$i9 = ((($vtable$i8)) + 16|0);
    $7 = HEAP32[$vfn$i9>>2]|0;
    __THREW__ = 0;
    $call$i10 = (invoke_ii($7|0,($call$i7|0))|0);
    $8 = __THREW__; __THREW__ = 0;
    $9 = $8&1;
    if (!($9)) {
     HEAP8[$__thousands_sep>>0] = $call$i10;
     $vtable$i11 = HEAP32[$call$i7>>2]|0;
     $vfn$i12 = ((($vtable$i11)) + 20|0);
     $10 = HEAP32[$vfn$i12>>2]|0;
     __THREW__ = 0;
     invoke_vii($10|0,($agg$result|0),($call$i7|0));
     $11 = __THREW__; __THREW__ = 0;
     $12 = $11&1;
     if (!($12)) {
      __ZNSt3__26localeD2Ev($__loc);
      STACKTOP = sp;return;
     }
    }
   }
  }
 }
 $13 = ___cxa_find_matching_catch_2()|0;
 $14 = tempRet0;
 __ZNSt3__26localeD2Ev($__loc);
 ___resumeException($13|0);
 // unreachable;
}
function __ZNSt3__227__num_get_unsigned_integralIyEET_PKcS3_Rji($__a,$__a_end,$__err,$__base) {
 $__a = $__a|0;
 $__a_end = $__a_end|0;
 $__err = $__err|0;
 $__base = $__base|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__p2 = 0, $call = 0, $call3 = 0, $call4 = 0, $call6 = 0, $call9 = 0, $cmp = 0, $cmp1 = 0;
 var $cmp11 = 0, $cmp13 = 0, $cmp7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $__p2 = sp;
 $cmp = ($__a|0)==($__a_end|0);
 do {
  if ($cmp) {
   HEAP32[$__err>>2] = 4;
   $6 = 0;$7 = 0;
  } else {
   $0 = HEAP8[$__a>>0]|0;
   $cmp1 = ($0<<24>>24)==(45);
   if ($cmp1) {
    HEAP32[$__err>>2] = 4;
    $6 = 0;$7 = 0;
    break;
   }
   $call = (___errno_location()|0);
   $1 = HEAP32[$call>>2]|0;
   $call3 = (___errno_location()|0);
   HEAP32[$call3>>2] = 0;
   $call4 = (__ZNSt3__26__clocEv()|0);
   $2 = (_strtoull_l($__a,$__p2,$__base,$call4)|0);
   $3 = tempRet0;
   $call6 = (___errno_location()|0);
   $4 = HEAP32[$call6>>2]|0;
   $cmp7 = ($4|0)==(0);
   if ($cmp7) {
    $call9 = (___errno_location()|0);
    HEAP32[$call9>>2] = $1;
   }
   $5 = HEAP32[$__p2>>2]|0;
   $cmp11 = ($5|0)==($__a_end|0);
   if ($cmp11) {
    $cmp13 = ($4|0)==(34);
    if ($cmp13) {
     $8 = -1;$9 = -1;
     label = 8;
    } else {
     $10 = $2;$11 = $3;
    }
   } else {
    $8 = 0;$9 = 0;
    label = 8;
   }
   if ((label|0) == 8) {
    HEAP32[$__err>>2] = 4;
    $10 = $8;$11 = $9;
   }
   $6 = $11;$7 = $10;
  }
 } while(0);
 tempRet0 = ($6);
 STACKTOP = sp;return ($7|0);
}
function __ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__do_get_unsignedImEES4_S4_S4_RNS_8ios_baseERjRT_($this,$__b,$__e,$__iob,$__err,$__v) {
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$pre = 0, $$pre$i$i$i = 0, $$pre$i$i$i34 = 0, $$pre$i17$i$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $8 = 0;
 var $9 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__a_end = 0, $__atoms = 0, $__buf = 0, $__cap_$i$i = 0, $__cap_$i$i90 = 0, $__dc = 0, $__einp_$i$i = 0, $__einp_$i$i$i$i = 0, $__einp_$i$i$i$i22 = 0, $__einp_$i$i4$i$i = 0, $__einp_$i$i4$i$i42 = 0, $__g = 0, $__g_end = 0, $__grouping = 0, $__i$0$i$i = 0, $__ninp_$i$i = 0;
 var $__ninp_$i$i$i$i = 0, $__ninp_$i$i$i$i21 = 0, $__ninp_$i$i3$i$i = 0, $__ninp_$i$i3$i$i41 = 0, $__size_$i$i = 0, $__size_$i$i120 = 0, $__size_$i3$i = 0, $__size_$i3$i122 = 0, $__thousands_sep = 0, $add$ptr = 0, $add$ptr18 = 0, $and$i$i = 0, $and$i$i91 = 0, $arrayidx$i$i = 0, $call = 0, $call$i$i$i$i16 = 0, $call$i$i$i$i60 = 0, $call$i$i107 = 0, $call$i$i9$i$i17 = 0, $call$i$i9$i$i62 = 0;
 var $call24 = 0, $call3$i$i = 0, $call3$i$i$i = 0, $call3$i$i$i$i = 0, $call3$i$i$i$i28 = 0, $call3$i$i$i31 = 0, $call3$i$i11$i$i = 0, $call3$i$i11$i$i48 = 0, $call3$i14$i$i = 0, $call3$i14$i$i51 = 0, $call36 = 0, $call4$i$i$i = 0, $call4$i$i$i32 = 0, $call4$i15$i$i = 0, $call4$i15$i$i52 = 0, $cmp = 0, $cmp$i$i$i$i = 0, $cmp$i$i$i$i23 = 0, $cmp$i$i106 = 0, $cmp$i$i111 = 0;
 var $cmp$i$i5$i$i = 0, $cmp$i$i5$i$i43 = 0, $cmp30 = 0, $cmp32 = 0, $cond$i = 0, $cond$i$i = 0, $cond$i$i104 = 0, $cond$i126 = 0, $cond$i67 = 0, $cond$i94 = 0, $conv$i = 0, $conv$i$i = 0, $conv$i$i124 = 0, $ehselector$slot$1 = 0, $exitcond$i$i = 0, $exn$slot$1 = 0, $inc$i$i = 0, $incdec$ptr = 0, $incdec$ptr$i$i = 0, $mul = 0;
 var $or = 0, $phitmp$i = 0, $phitmp$i92 = 0, $retval$0$i$i = 0, $retval$0$i$i$i$i = 0, $retval$0$i$i$i$i30 = 0, $retval$0$i$i13$i$i = 0, $retval$0$i$i13$i$i50 = 0, $retval$sroa$0$0$copyload = 0, $sub$ptr$lhs$cast = 0, $sub$ptr$rhs$cast = 0, $sub$ptr$sub = 0, $tobool = 0, $tobool$i$i = 0, $tobool$i$i$i = 0, $tobool$i$i$i18 = 0, $tobool$i$i$i20 = 0, $tobool$i$i$i99 = 0, $tobool$i$i121 = 0, $tobool$i$i65 = 0;
 var $tobool$i$i89 = 0, $tobool$i2$i$i = 0, $tobool$i2$i$i39 = 0, $vfn$i$i = 0, $vfn$i$i$i$i = 0, $vfn$i$i$i$i26 = 0, $vfn$i$i113 = 0, $vfn$i$i8$i$i = 0, $vfn$i$i8$i$i46 = 0, $vtable$i$i = 0, $vtable$i$i$i$i = 0, $vtable$i$i$i$i25 = 0, $vtable$i$i112 = 0, $vtable$i$i7$i$i = 0, $vtable$i$i7$i$i45 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(224|0);
 $__atoms = sp + 198|0;
 $__thousands_sep = sp + 196|0;
 $__grouping = sp + 184|0;
 $__buf = sp + 172|0;
 $__a_end = sp + 168|0;
 $__g = sp + 8|0;
 $__g_end = sp + 4|0;
 $__dc = sp;
 $call = (__ZNSt3__214__num_get_base10__get_baseERNS_8ios_baseE($__iob)|0);
 __ZNSt3__29__num_getIcE17__stage2_int_prepERNS_8ios_baseEPcRc($__grouping,$__iob,$__atoms,$__thousands_sep);
 ;HEAP32[$__buf>>2]=0|0;HEAP32[$__buf+4>>2]=0|0;HEAP32[$__buf+8>>2]=0|0;
 $__i$0$i$i = 0;
 while(1) {
  $exitcond$i$i = ($__i$0$i$i|0)==(3);
  if ($exitcond$i$i) {
   break;
  }
  $arrayidx$i$i = (($__buf) + ($__i$0$i$i<<2)|0);
  HEAP32[$arrayidx$i$i>>2] = 0;
  $inc$i$i = (($__i$0$i$i) + 1)|0;
  $__i$0$i$i = $inc$i$i;
 }
 $__size_$i$i = ((($__buf)) + 11|0);
 $0 = HEAP8[$__size_$i$i>>0]|0;
 $tobool$i$i = ($0<<24>>24)<(0);
 if ($tobool$i$i) {
  $__cap_$i$i = ((($__buf)) + 8|0);
  $1 = HEAP32[$__cap_$i$i>>2]|0;
  $and$i$i = $1 & 2147483647;
  $phitmp$i = (($and$i$i) + -1)|0;
  $cond$i = $phitmp$i;
 } else {
  $cond$i = 10;
 }
 __THREW__ = 0;
 invoke_viii(377,($__buf|0),($cond$i|0),0);
 $2 = __THREW__; __THREW__ = 0;
 $3 = $2&1;
 if ($3) {
  $30 = ___cxa_find_matching_catch_2()|0;
  $31 = tempRet0;
  $ehselector$slot$1 = $31;$exn$slot$1 = $30;
 } else {
  $4 = HEAP8[$__size_$i$i>>0]|0;
  $tobool$i$i$i18 = ($4<<24>>24)<(0);
  $5 = HEAP32[$__buf>>2]|0;
  $cond$i$i = $tobool$i$i$i18 ? $5 : $__buf;
  HEAP32[$__a_end>>2] = $cond$i$i;
  HEAP32[$__g_end>>2] = $__g;
  HEAP32[$__dc>>2] = 0;
  $__size_$i3$i = ((($__buf)) + 4|0);
  $__cap_$i$i90 = ((($__buf)) + 8|0);
  $$pre = HEAP32[$__b>>2]|0;
  $$pre$i$i$i34 = $$pre;$73 = $$pre;$__a$0 = $cond$i$i;
  L11: while(1) {
   $tobool$i$i$i20 = ($$pre$i$i$i34|0)==(0|0);
   if ($tobool$i$i$i20) {
    $$pre$i$i$i = 0;$59 = 0;$74 = 1;
   } else {
    $__ninp_$i$i$i$i21 = ((($$pre$i$i$i34)) + 12|0);
    $6 = HEAP32[$__ninp_$i$i$i$i21>>2]|0;
    $__einp_$i$i$i$i22 = ((($$pre$i$i$i34)) + 16|0);
    $7 = HEAP32[$__einp_$i$i$i$i22>>2]|0;
    $cmp$i$i$i$i23 = ($6|0)==($7|0);
    if ($cmp$i$i$i$i23) {
     $vtable$i$i$i$i25 = HEAP32[$$pre$i$i$i34>>2]|0;
     $vfn$i$i$i$i26 = ((($vtable$i$i$i$i25)) + 36|0);
     $8 = HEAP32[$vfn$i$i$i$i26>>2]|0;
     __THREW__ = 0;
     $call$i$i$i$i60 = (invoke_ii($8|0,($$pre$i$i$i34|0))|0);
     $9 = __THREW__; __THREW__ = 0;
     $10 = $9&1;
     if ($10) {
      break;
     } else {
      $retval$0$i$i$i$i30 = $call$i$i$i$i60;
     }
    } else {
     $11 = HEAP8[$6>>0]|0;
     $call3$i$i$i$i28 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($11)|0);
     $retval$0$i$i$i$i30 = $call3$i$i$i$i28;
    }
    $call3$i$i$i31 = (__ZNSt3__211char_traitsIcE3eofEv()|0);
    $call4$i$i$i32 = (__ZNSt3__211char_traitsIcE11eq_int_typeEii($retval$0$i$i$i$i30,$call3$i$i$i31)|0);
    if ($call4$i$i$i32) {
     HEAP32[$__b>>2] = 0;
     $$pre$i$i$i = 0;$59 = 0;$74 = 1;
    } else {
     $$pre$i$i$i = $$pre$i$i$i34;$59 = $73;$74 = 0;
    }
   }
   $12 = HEAP32[$__e>>2]|0;
   $tobool$i2$i$i39 = ($12|0)==(0|0);
   do {
    if ($tobool$i2$i$i39) {
     label = 20;
    } else {
     $__ninp_$i$i3$i$i41 = ((($12)) + 12|0);
     $13 = HEAP32[$__ninp_$i$i3$i$i41>>2]|0;
     $__einp_$i$i4$i$i42 = ((($12)) + 16|0);
     $14 = HEAP32[$__einp_$i$i4$i$i42>>2]|0;
     $cmp$i$i5$i$i43 = ($13|0)==($14|0);
     if ($cmp$i$i5$i$i43) {
      $vtable$i$i7$i$i45 = HEAP32[$12>>2]|0;
      $vfn$i$i8$i$i46 = ((($vtable$i$i7$i$i45)) + 36|0);
      $15 = HEAP32[$vfn$i$i8$i$i46>>2]|0;
      __THREW__ = 0;
      $call$i$i9$i$i62 = (invoke_ii($15|0,($12|0))|0);
      $16 = __THREW__; __THREW__ = 0;
      $17 = $16&1;
      if ($17) {
       break L11;
      } else {
       $retval$0$i$i13$i$i50 = $call$i$i9$i$i62;
      }
     } else {
      $18 = HEAP8[$13>>0]|0;
      $call3$i$i11$i$i48 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($18)|0);
      $retval$0$i$i13$i$i50 = $call3$i$i11$i$i48;
     }
     $call3$i14$i$i51 = (__ZNSt3__211char_traitsIcE3eofEv()|0);
     $call4$i15$i$i52 = (__ZNSt3__211char_traitsIcE11eq_int_typeEii($retval$0$i$i13$i$i50,$call3$i14$i$i51)|0);
     if ($call4$i15$i$i52) {
      HEAP32[$__e>>2] = 0;
      label = 20;
      break;
     } else {
      if ($74) {
       $75 = $12;
       break;
      } else {
       $$pre$i17$i$i = $12;$__a$2 = $__a$0;
       label = 37;
       break L11;
      }
     }
    }
   } while(0);
   if ((label|0) == 20) {
    label = 0;
    if ($74) {
     $$pre$i17$i$i = 0;$__a$2 = $__a$0;
     label = 37;
     break;
    } else {
     $75 = 0;
    }
   }
   $19 = HEAP32[$__a_end>>2]|0;
   $20 = HEAP8[$__size_$i$i>>0]|0;
   $tobool$i$i65 = ($20<<24>>24)<(0);
   $21 = HEAP32[$__size_$i3$i>>2]|0;
   $conv$i$i = $20&255;
   $cond$i67 = $tobool$i$i65 ? $21 : $conv$i$i;
   $add$ptr = (($__a$0) + ($cond$i67)|0);
   $cmp = ($19|0)==($add$ptr|0);
   if ($cmp) {
    $mul = $cond$i67 << 1;
    __THREW__ = 0;
    invoke_viii(377,($__buf|0),($mul|0),0);
    $22 = __THREW__; __THREW__ = 0;
    $23 = $22&1;
    if ($23) {
     break;
    }
    $24 = HEAP8[$__size_$i$i>>0]|0;
    $tobool$i$i89 = ($24<<24>>24)<(0);
    if ($tobool$i$i89) {
     $25 = HEAP32[$__cap_$i$i90>>2]|0;
     $and$i$i91 = $25 & 2147483647;
     $phitmp$i92 = (($and$i$i91) + -1)|0;
     $cond$i94 = $phitmp$i92;
    } else {
     $cond$i94 = 10;
    }
    __THREW__ = 0;
    invoke_viii(377,($__buf|0),($cond$i94|0),0);
    $26 = __THREW__; __THREW__ = 0;
    $27 = $26&1;
    if ($27) {
     break;
    }
    $28 = HEAP8[$__size_$i$i>>0]|0;
    $tobool$i$i$i99 = ($28<<24>>24)<(0);
    $29 = HEAP32[$__buf>>2]|0;
    $cond$i$i104 = $tobool$i$i$i99 ? $29 : $__buf;
    $add$ptr18 = (($cond$i$i104) + ($cond$i67)|0);
    HEAP32[$__a_end>>2] = $add$ptr18;
    $__a$1 = $cond$i$i104;
   } else {
    $__a$1 = $__a$0;
   }
   $__ninp_$i$i = ((($$pre$i$i$i)) + 12|0);
   $32 = HEAP32[$__ninp_$i$i>>2]|0;
   $__einp_$i$i = ((($$pre$i$i$i)) + 16|0);
   $33 = HEAP32[$__einp_$i$i>>2]|0;
   $cmp$i$i106 = ($32|0)==($33|0);
   if ($cmp$i$i106) {
    $vtable$i$i = HEAP32[$$pre$i$i$i>>2]|0;
    $vfn$i$i = ((($vtable$i$i)) + 36|0);
    $34 = HEAP32[$vfn$i$i>>2]|0;
    __THREW__ = 0;
    $call$i$i107 = (invoke_ii($34|0,($$pre$i$i$i|0))|0);
    $35 = __THREW__; __THREW__ = 0;
    $36 = $35&1;
    if ($36) {
     break;
    } else {
     $retval$0$i$i = $call$i$i107;
    }
   } else {
    $37 = HEAP8[$32>>0]|0;
    $call3$i$i = (__ZNSt3__211char_traitsIcE11to_int_typeEc($37)|0);
    $retval$0$i$i = $call3$i$i;
   }
   $conv$i = $retval$0$i$i&255;
   $38 = HEAP8[$__thousands_sep>>0]|0;
   __THREW__ = 0;
   $call24 = (invoke_iiiiiiiiiii(391,($conv$i|0),($call|0),($__a$1|0),($__a_end|0),($__dc|0),($38|0),($__grouping|0),($__g|0),($__g_end|0),($__atoms|0))|0);
   $39 = __THREW__; __THREW__ = 0;
   $40 = $39&1;
   if ($40) {
    break;
   }
   $tobool = ($call24|0)==(0);
   if (!($tobool)) {
    $$pre$i17$i$i = $75;$__a$2 = $__a$1;
    label = 37;
    break;
   }
   $41 = HEAP32[$__ninp_$i$i>>2]|0;
   $42 = HEAP32[$__einp_$i$i>>2]|0;
   $cmp$i$i111 = ($41|0)==($42|0);
   if ($cmp$i$i111) {
    $vtable$i$i112 = HEAP32[$$pre$i$i$i>>2]|0;
    $vfn$i$i113 = ((($vtable$i$i112)) + 40|0);
    $43 = HEAP32[$vfn$i$i113>>2]|0;
    __THREW__ = 0;
    (invoke_ii($43|0,($$pre$i$i$i|0))|0);
    $44 = __THREW__; __THREW__ = 0;
    $45 = $44&1;
    if ($45) {
     break;
    } else {
     $$pre$i$i$i34 = $$pre$i$i$i;$73 = $59;$__a$0 = $__a$1;
     continue;
    }
   } else {
    $incdec$ptr$i$i = ((($41)) + 1|0);
    HEAP32[$__ninp_$i$i>>2] = $incdec$ptr$i$i;
    $46 = HEAP8[$41>>0]|0;
    (__ZNSt3__211char_traitsIcE11to_int_typeEc($46)|0);
    $$pre$i$i$i34 = $$pre$i$i$i;$73 = $59;$__a$0 = $__a$1;
    continue;
   }
  }
  L50: do {
   if ((label|0) == 37) {
    $__size_$i$i120 = ((($__grouping)) + 11|0);
    $47 = HEAP8[$__size_$i$i120>>0]|0;
    $tobool$i$i121 = ($47<<24>>24)<(0);
    $__size_$i3$i122 = ((($__grouping)) + 4|0);
    $48 = HEAP32[$__size_$i3$i122>>2]|0;
    $conv$i$i124 = $47&255;
    $cond$i126 = $tobool$i$i121 ? $48 : $conv$i$i124;
    $cmp30 = ($cond$i126|0)==(0);
    if (!($cmp30)) {
     $49 = HEAP32[$__g_end>>2]|0;
     $sub$ptr$lhs$cast = $49;
     $sub$ptr$rhs$cast = $__g;
     $sub$ptr$sub = (($sub$ptr$lhs$cast) - ($sub$ptr$rhs$cast))|0;
     $cmp32 = ($sub$ptr$sub|0)<(160);
     if ($cmp32) {
      $50 = HEAP32[$__dc>>2]|0;
      $incdec$ptr = ((($49)) + 4|0);
      HEAP32[$__g_end>>2] = $incdec$ptr;
      HEAP32[$49>>2] = $50;
     }
    }
    $51 = HEAP32[$__a_end>>2]|0;
    __THREW__ = 0;
    $call36 = (invoke_iiiii(404,($__a$2|0),($51|0),($__err|0),($call|0))|0);
    $52 = __THREW__; __THREW__ = 0;
    $53 = $52&1;
    if (!($53)) {
     HEAP32[$__v>>2] = $call36;
     $54 = HEAP32[$__g_end>>2]|0;
     __THREW__ = 0;
     invoke_viiii(400,($__grouping|0),($__g|0),($54|0),($__err|0));
     $55 = __THREW__; __THREW__ = 0;
     $56 = $55&1;
     if (!($56)) {
      $tobool$i$i$i = ($$pre$i$i$i|0)==(0|0);
      if ($tobool$i$i$i) {
       $76 = 1;
      } else {
       $__ninp_$i$i$i$i = ((($$pre$i$i$i)) + 12|0);
       $57 = HEAP32[$__ninp_$i$i$i$i>>2]|0;
       $__einp_$i$i$i$i = ((($$pre$i$i$i)) + 16|0);
       $58 = HEAP32[$__einp_$i$i$i$i>>2]|0;
       $cmp$i$i$i$i = ($57|0)==($58|0);
       if ($cmp$i$i$i$i) {
        $vtable$i$i$i$i = HEAP32[$59>>2]|0;
        $vfn$i$i$i$i = ((($vtable$i$i$i$i)) + 36|0);
        $60 = HEAP32[$vfn$i$i$i$i>>2]|0;
        __THREW__ = 0;
        $call$i$i$i$i16 = (invoke_ii($60|0,($$pre$i$i$i|0))|0);
        $61 = __THREW__; __THREW__ = 0;
        $62 = $61&1;
        if ($62) {
         break;
        } else {
         $retval$0$i$i$i$i = $call$i$i$i$i16;
        }
       } else {
        $63 = HEAP8[$57>>0]|0;
        $call3$i$i$i$i = (__ZNSt3__211char_traitsIcE11to_int_typeEc($63)|0);
        $retval$0$i$i$i$i = $call3$i$i$i$i;
       }
       $call3$i$i$i = (__ZNSt3__211char_traitsIcE3eofEv()|0);
       $call4$i$i$i = (__ZNSt3__211char_traitsIcE11eq_int_typeEii($retval$0$i$i$i$i,$call3$i$i$i)|0);
       if ($call4$i$i$i) {
        HEAP32[$__b>>2] = 0;
        $76 = 1;
       } else {
        $76 = 0;
       }
      }
      $tobool$i2$i$i = ($$pre$i17$i$i|0)==(0|0);
      do {
       if ($tobool$i2$i$i) {
        label = 54;
       } else {
        $__ninp_$i$i3$i$i = ((($$pre$i17$i$i)) + 12|0);
        $64 = HEAP32[$__ninp_$i$i3$i$i>>2]|0;
        $__einp_$i$i4$i$i = ((($$pre$i17$i$i)) + 16|0);
        $65 = HEAP32[$__einp_$i$i4$i$i>>2]|0;
        $cmp$i$i5$i$i = ($64|0)==($65|0);
        if ($cmp$i$i5$i$i) {
         $vtable$i$i7$i$i = HEAP32[$$pre$i17$i$i>>2]|0;
         $vfn$i$i8$i$i = ((($vtable$i$i7$i$i)) + 36|0);
         $66 = HEAP32[$vfn$i$i8$i$i>>2]|0;
         __THREW__ = 0;
         $call$i$i9$i$i17 = (invoke_ii($66|0,($$pre$i17$i$i|0))|0);
         $67 = __THREW__; __THREW__ = 0;
         $68 = $67&1;
         if ($68) {
          break L50;
         } else {
          $retval$0$i$i13$i$i = $call$i$i9$i$i17;
         }
        } else {
         $69 = HEAP8[$64>>0]|0;
         $call3$i$i11$i$i = (__ZNSt3__211char_traitsIcE11to_int_typeEc($69)|0);
         $retval$0$i$i13$i$i = $call3$i$i11$i$i;
        }
        $call3$i14$i$i = (__ZNSt3__211char_traitsIcE3eofEv()|0);
        $call4$i15$i$i = (__ZNSt3__211char_traitsIcE11eq_int_typeEii($retval$0$i$i13$i$i,$call3$i14$i$i)|0);
        if ($call4$i15$i$i) {
         HEAP32[$__e>>2] = 0;
         label = 54;
         break;
        } else {
         if ($76) {
          break;
         } else {
          label = 56;
          break;
         }
        }
       }
      } while(0);
      if ((label|0) == 54) {
       if ($76) {
        label = 56;
       }
      }
      if ((label|0) == 56) {
       $70 = HEAP32[$__err>>2]|0;
       $or = $70 | 2;
       HEAP32[$__err>>2] = $or;
      }
      $retval$sroa$0$0$copyload = HEAP32[$__b>>2]|0;
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__buf);
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grouping);
      STACKTOP = sp;return ($retval$sroa$0$0$copyload|0);
     }
    }
   }
  } while(0);
  $71 = ___cxa_find_matching_catch_2()|0;
  $72 = tempRet0;
  $ehselector$slot$1 = $72;$exn$slot$1 = $71;
 }
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__buf);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grouping);
 ___resumeException($exn$slot$1|0);
 // unreachable;
 return (0)|0;
}
function __ZNSt3__227__num_get_unsigned_integralImEET_PKcS3_Rji($__a,$__a_end,$__err,$__base) {
 $__a = $__a|0;
 $__a_end = $__a_end|0;
 $__err = $__err|0;
 $__base = $__base|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__p2 = 0, $call = 0, $call3 = 0, $call4 = 0, $call6 = 0, $call9 = 0, $cmp = 0, $cmp1 = 0, $cmp11 = 0;
 var $cmp13 = 0, $cmp7 = 0, $or$cond = 0, $retval$0 = 0, $retval$1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $__p2 = sp;
 $cmp = ($__a|0)==($__a_end|0);
 do {
  if ($cmp) {
   HEAP32[$__err>>2] = 4;
   $retval$1 = 0;
  } else {
   $0 = HEAP8[$__a>>0]|0;
   $cmp1 = ($0<<24>>24)==(45);
   if ($cmp1) {
    HEAP32[$__err>>2] = 4;
    $retval$1 = 0;
    break;
   }
   $call = (___errno_location()|0);
   $1 = HEAP32[$call>>2]|0;
   $call3 = (___errno_location()|0);
   HEAP32[$call3>>2] = 0;
   $call4 = (__ZNSt3__26__clocEv()|0);
   $2 = (_strtoull_l($__a,$__p2,$__base,$call4)|0);
   $3 = tempRet0;
   $call6 = (___errno_location()|0);
   $4 = HEAP32[$call6>>2]|0;
   $cmp7 = ($4|0)==(0);
   if ($cmp7) {
    $call9 = (___errno_location()|0);
    HEAP32[$call9>>2] = $1;
   }
   $5 = HEAP32[$__p2>>2]|0;
   $cmp11 = ($5|0)==($__a_end|0);
   do {
    if ($cmp11) {
     $cmp13 = ($4|0)==(34);
     $6 = ($3>>>0)>(0);
     $7 = ($2>>>0)>(4294967295);
     $8 = ($3|0)==(0);
     $9 = $8 & $7;
     $10 = $6 | $9;
     $or$cond = $10 | $cmp13;
     if ($or$cond) {
      HEAP32[$__err>>2] = 4;
      $retval$0 = -1;
      break;
     } else {
      $retval$0 = $2;
      break;
     }
    } else {
     HEAP32[$__err>>2] = 4;
     $retval$0 = 0;
    }
   } while(0);
   $retval$1 = $retval$0;
  }
 } while(0);
 STACKTOP = sp;return ($retval$1|0);
}
function __ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__do_get_unsignedIjEES4_S4_S4_RNS_8ios_baseERjRT_($this,$__b,$__e,$__iob,$__err,$__v) {
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$pre = 0, $$pre$i$i$i = 0, $$pre$i$i$i34 = 0, $$pre$i17$i$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $8 = 0;
 var $9 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__a_end = 0, $__atoms = 0, $__buf = 0, $__cap_$i$i = 0, $__cap_$i$i90 = 0, $__dc = 0, $__einp_$i$i = 0, $__einp_$i$i$i$i = 0, $__einp_$i$i$i$i22 = 0, $__einp_$i$i4$i$i = 0, $__einp_$i$i4$i$i42 = 0, $__g = 0, $__g_end = 0, $__grouping = 0, $__i$0$i$i = 0, $__ninp_$i$i = 0;
 var $__ninp_$i$i$i$i = 0, $__ninp_$i$i$i$i21 = 0, $__ninp_$i$i3$i$i = 0, $__ninp_$i$i3$i$i41 = 0, $__size_$i$i = 0, $__size_$i$i120 = 0, $__size_$i3$i = 0, $__size_$i3$i122 = 0, $__thousands_sep = 0, $add$ptr = 0, $add$ptr18 = 0, $and$i$i = 0, $and$i$i91 = 0, $arrayidx$i$i = 0, $call = 0, $call$i$i$i$i16 = 0, $call$i$i$i$i60 = 0, $call$i$i107 = 0, $call$i$i9$i$i17 = 0, $call$i$i9$i$i62 = 0;
 var $call24 = 0, $call3$i$i = 0, $call3$i$i$i = 0, $call3$i$i$i$i = 0, $call3$i$i$i$i28 = 0, $call3$i$i$i31 = 0, $call3$i$i11$i$i = 0, $call3$i$i11$i$i48 = 0, $call3$i14$i$i = 0, $call3$i14$i$i51 = 0, $call36 = 0, $call4$i$i$i = 0, $call4$i$i$i32 = 0, $call4$i15$i$i = 0, $call4$i15$i$i52 = 0, $cmp = 0, $cmp$i$i$i$i = 0, $cmp$i$i$i$i23 = 0, $cmp$i$i106 = 0, $cmp$i$i111 = 0;
 var $cmp$i$i5$i$i = 0, $cmp$i$i5$i$i43 = 0, $cmp30 = 0, $cmp32 = 0, $cond$i = 0, $cond$i$i = 0, $cond$i$i104 = 0, $cond$i126 = 0, $cond$i67 = 0, $cond$i94 = 0, $conv$i = 0, $conv$i$i = 0, $conv$i$i124 = 0, $ehselector$slot$1 = 0, $exitcond$i$i = 0, $exn$slot$1 = 0, $inc$i$i = 0, $incdec$ptr = 0, $incdec$ptr$i$i = 0, $mul = 0;
 var $or = 0, $phitmp$i = 0, $phitmp$i92 = 0, $retval$0$i$i = 0, $retval$0$i$i$i$i = 0, $retval$0$i$i$i$i30 = 0, $retval$0$i$i13$i$i = 0, $retval$0$i$i13$i$i50 = 0, $retval$sroa$0$0$copyload = 0, $sub$ptr$lhs$cast = 0, $sub$ptr$rhs$cast = 0, $sub$ptr$sub = 0, $tobool = 0, $tobool$i$i = 0, $tobool$i$i$i = 0, $tobool$i$i$i18 = 0, $tobool$i$i$i20 = 0, $tobool$i$i$i99 = 0, $tobool$i$i121 = 0, $tobool$i$i65 = 0;
 var $tobool$i$i89 = 0, $tobool$i2$i$i = 0, $tobool$i2$i$i39 = 0, $vfn$i$i = 0, $vfn$i$i$i$i = 0, $vfn$i$i$i$i26 = 0, $vfn$i$i113 = 0, $vfn$i$i8$i$i = 0, $vfn$i$i8$i$i46 = 0, $vtable$i$i = 0, $vtable$i$i$i$i = 0, $vtable$i$i$i$i25 = 0, $vtable$i$i112 = 0, $vtable$i$i7$i$i = 0, $vtable$i$i7$i$i45 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(224|0);
 $__atoms = sp + 198|0;
 $__thousands_sep = sp + 196|0;
 $__grouping = sp + 184|0;
 $__buf = sp + 172|0;
 $__a_end = sp + 168|0;
 $__g = sp + 8|0;
 $__g_end = sp + 4|0;
 $__dc = sp;
 $call = (__ZNSt3__214__num_get_base10__get_baseERNS_8ios_baseE($__iob)|0);
 __ZNSt3__29__num_getIcE17__stage2_int_prepERNS_8ios_baseEPcRc($__grouping,$__iob,$__atoms,$__thousands_sep);
 ;HEAP32[$__buf>>2]=0|0;HEAP32[$__buf+4>>2]=0|0;HEAP32[$__buf+8>>2]=0|0;
 $__i$0$i$i = 0;
 while(1) {
  $exitcond$i$i = ($__i$0$i$i|0)==(3);
  if ($exitcond$i$i) {
   break;
  }
  $arrayidx$i$i = (($__buf) + ($__i$0$i$i<<2)|0);
  HEAP32[$arrayidx$i$i>>2] = 0;
  $inc$i$i = (($__i$0$i$i) + 1)|0;
  $__i$0$i$i = $inc$i$i;
 }
 $__size_$i$i = ((($__buf)) + 11|0);
 $0 = HEAP8[$__size_$i$i>>0]|0;
 $tobool$i$i = ($0<<24>>24)<(0);
 if ($tobool$i$i) {
  $__cap_$i$i = ((($__buf)) + 8|0);
  $1 = HEAP32[$__cap_$i$i>>2]|0;
  $and$i$i = $1 & 2147483647;
  $phitmp$i = (($and$i$i) + -1)|0;
  $cond$i = $phitmp$i;
 } else {
  $cond$i = 10;
 }
 __THREW__ = 0;
 invoke_viii(377,($__buf|0),($cond$i|0),0);
 $2 = __THREW__; __THREW__ = 0;
 $3 = $2&1;
 if ($3) {
  $30 = ___cxa_find_matching_catch_2()|0;
  $31 = tempRet0;
  $ehselector$slot$1 = $31;$exn$slot$1 = $30;
 } else {
  $4 = HEAP8[$__size_$i$i>>0]|0;
  $tobool$i$i$i18 = ($4<<24>>24)<(0);
  $5 = HEAP32[$__buf>>2]|0;
  $cond$i$i = $tobool$i$i$i18 ? $5 : $__buf;
  HEAP32[$__a_end>>2] = $cond$i$i;
  HEAP32[$__g_end>>2] = $__g;
  HEAP32[$__dc>>2] = 0;
  $__size_$i3$i = ((($__buf)) + 4|0);
  $__cap_$i$i90 = ((($__buf)) + 8|0);
  $$pre = HEAP32[$__b>>2]|0;
  $$pre$i$i$i34 = $$pre;$73 = $$pre;$__a$0 = $cond$i$i;
  L11: while(1) {
   $tobool$i$i$i20 = ($$pre$i$i$i34|0)==(0|0);
   if ($tobool$i$i$i20) {
    $$pre$i$i$i = 0;$59 = 0;$74 = 1;
   } else {
    $__ninp_$i$i$i$i21 = ((($$pre$i$i$i34)) + 12|0);
    $6 = HEAP32[$__ninp_$i$i$i$i21>>2]|0;
    $__einp_$i$i$i$i22 = ((($$pre$i$i$i34)) + 16|0);
    $7 = HEAP32[$__einp_$i$i$i$i22>>2]|0;
    $cmp$i$i$i$i23 = ($6|0)==($7|0);
    if ($cmp$i$i$i$i23) {
     $vtable$i$i$i$i25 = HEAP32[$$pre$i$i$i34>>2]|0;
     $vfn$i$i$i$i26 = ((($vtable$i$i$i$i25)) + 36|0);
     $8 = HEAP32[$vfn$i$i$i$i26>>2]|0;
     __THREW__ = 0;
     $call$i$i$i$i60 = (invoke_ii($8|0,($$pre$i$i$i34|0))|0);
     $9 = __THREW__; __THREW__ = 0;
     $10 = $9&1;
     if ($10) {
      break;
     } else {
      $retval$0$i$i$i$i30 = $call$i$i$i$i60;
     }
    } else {
     $11 = HEAP8[$6>>0]|0;
     $call3$i$i$i$i28 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($11)|0);
     $retval$0$i$i$i$i30 = $call3$i$i$i$i28;
    }
    $call3$i$i$i31 = (__ZNSt3__211char_traitsIcE3eofEv()|0);
    $call4$i$i$i32 = (__ZNSt3__211char_traitsIcE11eq_int_typeEii($retval$0$i$i$i$i30,$call3$i$i$i31)|0);
    if ($call4$i$i$i32) {
     HEAP32[$__b>>2] = 0;
     $$pre$i$i$i = 0;$59 = 0;$74 = 1;
    } else {
     $$pre$i$i$i = $$pre$i$i$i34;$59 = $73;$74 = 0;
    }
   }
   $12 = HEAP32[$__e>>2]|0;
   $tobool$i2$i$i39 = ($12|0)==(0|0);
   do {
    if ($tobool$i2$i$i39) {
     label = 20;
    } else {
     $__ninp_$i$i3$i$i41 = ((($12)) + 12|0);
     $13 = HEAP32[$__ninp_$i$i3$i$i41>>2]|0;
     $__einp_$i$i4$i$i42 = ((($12)) + 16|0);
     $14 = HEAP32[$__einp_$i$i4$i$i42>>2]|0;
     $cmp$i$i5$i$i43 = ($13|0)==($14|0);
     if ($cmp$i$i5$i$i43) {
      $vtable$i$i7$i$i45 = HEAP32[$12>>2]|0;
      $vfn$i$i8$i$i46 = ((($vtable$i$i7$i$i45)) + 36|0);
      $15 = HEAP32[$vfn$i$i8$i$i46>>2]|0;
      __THREW__ = 0;
      $call$i$i9$i$i62 = (invoke_ii($15|0,($12|0))|0);
      $16 = __THREW__; __THREW__ = 0;
      $17 = $16&1;
      if ($17) {
       break L11;
      } else {
       $retval$0$i$i13$i$i50 = $call$i$i9$i$i62;
      }
     } else {
      $18 = HEAP8[$13>>0]|0;
      $call3$i$i11$i$i48 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($18)|0);
      $retval$0$i$i13$i$i50 = $call3$i$i11$i$i48;
     }
     $call3$i14$i$i51 = (__ZNSt3__211char_traitsIcE3eofEv()|0);
     $call4$i15$i$i52 = (__ZNSt3__211char_traitsIcE11eq_int_typeEii($retval$0$i$i13$i$i50,$call3$i14$i$i51)|0);
     if ($call4$i15$i$i52) {
      HEAP32[$__e>>2] = 0;
      label = 20;
      break;
     } else {
      if ($74) {
       $75 = $12;
       break;
      } else {
       $$pre$i17$i$i = $12;$__a$2 = $__a$0;
       label = 37;
       break L11;
      }
     }
    }
   } while(0);
   if ((label|0) == 20) {
    label = 0;
    if ($74) {
     $$pre$i17$i$i = 0;$__a$2 = $__a$0;
     label = 37;
     break;
    } else {
     $75 = 0;
    }
   }
   $19 = HEAP32[$__a_end>>2]|0;
   $20 = HEAP8[$__size_$i$i>>0]|0;
   $tobool$i$i65 = ($20<<24>>24)<(0);
   $21 = HEAP32[$__size_$i3$i>>2]|0;
   $conv$i$i = $20&255;
   $cond$i67 = $tobool$i$i65 ? $21 : $conv$i$i;
   $add$ptr = (($__a$0) + ($cond$i67)|0);
   $cmp = ($19|0)==($add$ptr|0);
   if ($cmp) {
    $mul = $cond$i67 << 1;
    __THREW__ = 0;
    invoke_viii(377,($__buf|0),($mul|0),0);
    $22 = __THREW__; __THREW__ = 0;
    $23 = $22&1;
    if ($23) {
     break;
    }
    $24 = HEAP8[$__size_$i$i>>0]|0;
    $tobool$i$i89 = ($24<<24>>24)<(0);
    if ($tobool$i$i89) {
     $25 = HEAP32[$__cap_$i$i90>>2]|0;
     $and$i$i91 = $25 & 2147483647;
     $phitmp$i92 = (($and$i$i91) + -1)|0;
     $cond$i94 = $phitmp$i92;
    } else {
     $cond$i94 = 10;
    }
    __THREW__ = 0;
    invoke_viii(377,($__buf|0),($cond$i94|0),0);
    $26 = __THREW__; __THREW__ = 0;
    $27 = $26&1;
    if ($27) {
     break;
    }
    $28 = HEAP8[$__size_$i$i>>0]|0;
    $tobool$i$i$i99 = ($28<<24>>24)<(0);
    $29 = HEAP32[$__buf>>2]|0;
    $cond$i$i104 = $tobool$i$i$i99 ? $29 : $__buf;
    $add$ptr18 = (($cond$i$i104) + ($cond$i67)|0);
    HEAP32[$__a_end>>2] = $add$ptr18;
    $__a$1 = $cond$i$i104;
   } else {
    $__a$1 = $__a$0;
   }
   $__ninp_$i$i = ((($$pre$i$i$i)) + 12|0);
   $32 = HEAP32[$__ninp_$i$i>>2]|0;
   $__einp_$i$i = ((($$pre$i$i$i)) + 16|0);
   $33 = HEAP32[$__einp_$i$i>>2]|0;
   $cmp$i$i106 = ($32|0)==($33|0);
   if ($cmp$i$i106) {
    $vtable$i$i = HEAP32[$$pre$i$i$i>>2]|0;
    $vfn$i$i = ((($vtable$i$i)) + 36|0);
    $34 = HEAP32[$vfn$i$i>>2]|0;
    __THREW__ = 0;
    $call$i$i107 = (invoke_ii($34|0,($$pre$i$i$i|0))|0);
    $35 = __THREW__; __THREW__ = 0;
    $36 = $35&1;
    if ($36) {
     break;
    } else {
     $retval$0$i$i = $call$i$i107;
    }
   } else {
    $37 = HEAP8[$32>>0]|0;
    $call3$i$i = (__ZNSt3__211char_traitsIcE11to_int_typeEc($37)|0);
    $retval$0$i$i = $call3$i$i;
   }
   $conv$i = $retval$0$i$i&255;
   $38 = HEAP8[$__thousands_sep>>0]|0;
   __THREW__ = 0;
   $call24 = (invoke_iiiiiiiiiii(391,($conv$i|0),($call|0),($__a$1|0),($__a_end|0),($__dc|0),($38|0),($__grouping|0),($__g|0),($__g_end|0),($__atoms|0))|0);
   $39 = __THREW__; __THREW__ = 0;
   $40 = $39&1;
   if ($40) {
    break;
   }
   $tobool = ($call24|0)==(0);
   if (!($tobool)) {
    $$pre$i17$i$i = $75;$__a$2 = $__a$1;
    label = 37;
    break;
   }
   $41 = HEAP32[$__ninp_$i$i>>2]|0;
   $42 = HEAP32[$__einp_$i$i>>2]|0;
   $cmp$i$i111 = ($41|0)==($42|0);
   if ($cmp$i$i111) {
    $vtable$i$i112 = HEAP32[$$pre$i$i$i>>2]|0;
    $vfn$i$i113 = ((($vtable$i$i112)) + 40|0);
    $43 = HEAP32[$vfn$i$i113>>2]|0;
    __THREW__ = 0;
    (invoke_ii($43|0,($$pre$i$i$i|0))|0);
    $44 = __THREW__; __THREW__ = 0;
    $45 = $44&1;
    if ($45) {
     break;
    } else {
     $$pre$i$i$i34 = $$pre$i$i$i;$73 = $59;$__a$0 = $__a$1;
     continue;
    }
   } else {
    $incdec$ptr$i$i = ((($41)) + 1|0);
    HEAP32[$__ninp_$i$i>>2] = $incdec$ptr$i$i;
    $46 = HEAP8[$41>>0]|0;
    (__ZNSt3__211char_traitsIcE11to_int_typeEc($46)|0);
    $$pre$i$i$i34 = $$pre$i$i$i;$73 = $59;$__a$0 = $__a$1;
    continue;
   }
  }
  L50: do {
   if ((label|0) == 37) {
    $__size_$i$i120 = ((($__grouping)) + 11|0);
    $47 = HEAP8[$__size_$i$i120>>0]|0;
    $tobool$i$i121 = ($47<<24>>24)<(0);
    $__size_$i3$i122 = ((($__grouping)) + 4|0);
    $48 = HEAP32[$__size_$i3$i122>>2]|0;
    $conv$i$i124 = $47&255;
    $cond$i126 = $tobool$i$i121 ? $48 : $conv$i$i124;
    $cmp30 = ($cond$i126|0)==(0);
    if (!($cmp30)) {
     $49 = HEAP32[$__g_end>>2]|0;
     $sub$ptr$lhs$cast = $49;
     $sub$ptr$rhs$cast = $__g;
     $sub$ptr$sub = (($sub$ptr$lhs$cast) - ($sub$ptr$rhs$cast))|0;
     $cmp32 = ($sub$ptr$sub|0)<(160);
     if ($cmp32) {
      $50 = HEAP32[$__dc>>2]|0;
      $incdec$ptr = ((($49)) + 4|0);
      HEAP32[$__g_end>>2] = $incdec$ptr;
      HEAP32[$49>>2] = $50;
     }
    }
    $51 = HEAP32[$__a_end>>2]|0;
    __THREW__ = 0;
    $call36 = (invoke_iiiii(405,($__a$2|0),($51|0),($__err|0),($call|0))|0);
    $52 = __THREW__; __THREW__ = 0;
    $53 = $52&1;
    if (!($53)) {
     HEAP32[$__v>>2] = $call36;
     $54 = HEAP32[$__g_end>>2]|0;
     __THREW__ = 0;
     invoke_viiii(400,($__grouping|0),($__g|0),($54|0),($__err|0));
     $55 = __THREW__; __THREW__ = 0;
     $56 = $55&1;
     if (!($56)) {
      $tobool$i$i$i = ($$pre$i$i$i|0)==(0|0);
      if ($tobool$i$i$i) {
       $76 = 1;
      } else {
       $__ninp_$i$i$i$i = ((($$pre$i$i$i)) + 12|0);
       $57 = HEAP32[$__ninp_$i$i$i$i>>2]|0;
       $__einp_$i$i$i$i = ((($$pre$i$i$i)) + 16|0);
       $58 = HEAP32[$__einp_$i$i$i$i>>2]|0;
       $cmp$i$i$i$i = ($57|0)==($58|0);
       if ($cmp$i$i$i$i) {
        $vtable$i$i$i$i = HEAP32[$59>>2]|0;
        $vfn$i$i$i$i = ((($vtable$i$i$i$i)) + 36|0);
        $60 = HEAP32[$vfn$i$i$i$i>>2]|0;
        __THREW__ = 0;
        $call$i$i$i$i16 = (invoke_ii($60|0,($$pre$i$i$i|0))|0);
        $61 = __THREW__; __THREW__ = 0;
        $62 = $61&1;
        if ($62) {
         break;
        } else {
         $retval$0$i$i$i$i = $call$i$i$i$i16;
        }
       } else {
        $63 = HEAP8[$57>>0]|0;
        $call3$i$i$i$i = (__ZNSt3__211char_traitsIcE11to_int_typeEc($63)|0);
        $retval$0$i$i$i$i = $call3$i$i$i$i;
       }
       $call3$i$i$i = (__ZNSt3__211char_traitsIcE3eofEv()|0);
       $call4$i$i$i = (__ZNSt3__211char_traitsIcE11eq_int_typeEii($retval$0$i$i$i$i,$call3$i$i$i)|0);
       if ($call4$i$i$i) {
        HEAP32[$__b>>2] = 0;
        $76 = 1;
       } else {
        $76 = 0;
       }
      }
      $tobool$i2$i$i = ($$pre$i17$i$i|0)==(0|0);
      do {
       if ($tobool$i2$i$i) {
        label = 54;
       } else {
        $__ninp_$i$i3$i$i = ((($$pre$i17$i$i)) + 12|0);
        $64 = HEAP32[$__ninp_$i$i3$i$i>>2]|0;
        $__einp_$i$i4$i$i = ((($$pre$i17$i$i)) + 16|0);
        $65 = HEAP32[$__einp_$i$i4$i$i>>2]|0;
        $cmp$i$i5$i$i = ($64|0)==($65|0);
        if ($cmp$i$i5$i$i) {
         $vtable$i$i7$i$i = HEAP32[$$pre$i17$i$i>>2]|0;
         $vfn$i$i8$i$i = ((($vtable$i$i7$i$i)) + 36|0);
         $66 = HEAP32[$vfn$i$i8$i$i>>2]|0;
         __THREW__ = 0;
         $call$i$i9$i$i17 = (invoke_ii($66|0,($$pre$i17$i$i|0))|0);
         $67 = __THREW__; __THREW__ = 0;
         $68 = $67&1;
         if ($68) {
          break L50;
         } else {
          $retval$0$i$i13$i$i = $call$i$i9$i$i17;
         }
        } else {
         $69 = HEAP8[$64>>0]|0;
         $call3$i$i11$i$i = (__ZNSt3__211char_traitsIcE11to_int_typeEc($69)|0);
         $retval$0$i$i13$i$i = $call3$i$i11$i$i;
        }
        $call3$i14$i$i = (__ZNSt3__211char_traitsIcE3eofEv()|0);
        $call4$i15$i$i = (__ZNSt3__211char_traitsIcE11eq_int_typeEii($retval$0$i$i13$i$i,$call3$i14$i$i)|0);
        if ($call4$i15$i$i) {
         HEAP32[$__e>>2] = 0;
         label = 54;
         break;
        } else {
         if ($76) {
          break;
         } else {
          label = 56;
          break;
         }
        }
       }
      } while(0);
      if ((label|0) == 54) {
       if ($76) {
        label = 56;
       }
      }
      if ((label|0) == 56) {
       $70 = HEAP32[$__err>>2]|0;
       $or = $70 | 2;
       HEAP32[$__err>>2] = $or;
      }
      $retval$sroa$0$0$copyload = HEAP32[$__b>>2]|0;
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__buf);
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grouping);
      STACKTOP = sp;return ($retval$sroa$0$0$copyload|0);
     }
    }
   }
  } while(0);
  $71 = ___cxa_find_matching_catch_2()|0;
  $72 = tempRet0;
  $ehselector$slot$1 = $72;$exn$slot$1 = $71;
 }
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__buf);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grouping);
 ___resumeException($exn$slot$1|0);
 // unreachable;
 return (0)|0;
}
function __ZNSt3__227__num_get_unsigned_integralIjEET_PKcS3_Rji($__a,$__a_end,$__err,$__base) {
 $__a = $__a|0;
 $__a_end = $__a_end|0;
 $__err = $__err|0;
 $__base = $__base|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__p2 = 0, $call = 0, $call3 = 0, $call4 = 0, $call6 = 0, $call9 = 0, $cmp = 0, $cmp1 = 0, $cmp11 = 0;
 var $cmp13 = 0, $cmp7 = 0, $or$cond = 0, $retval$0 = 0, $retval$1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $__p2 = sp;
 $cmp = ($__a|0)==($__a_end|0);
 do {
  if ($cmp) {
   HEAP32[$__err>>2] = 4;
   $retval$1 = 0;
  } else {
   $0 = HEAP8[$__a>>0]|0;
   $cmp1 = ($0<<24>>24)==(45);
   if ($cmp1) {
    HEAP32[$__err>>2] = 4;
    $retval$1 = 0;
    break;
   }
   $call = (___errno_location()|0);
   $1 = HEAP32[$call>>2]|0;
   $call3 = (___errno_location()|0);
   HEAP32[$call3>>2] = 0;
   $call4 = (__ZNSt3__26__clocEv()|0);
   $2 = (_strtoull_l($__a,$__p2,$__base,$call4)|0);
   $3 = tempRet0;
   $call6 = (___errno_location()|0);
   $4 = HEAP32[$call6>>2]|0;
   $cmp7 = ($4|0)==(0);
   if ($cmp7) {
    $call9 = (___errno_location()|0);
    HEAP32[$call9>>2] = $1;
   }
   $5 = HEAP32[$__p2>>2]|0;
   $cmp11 = ($5|0)==($__a_end|0);
   do {
    if ($cmp11) {
     $cmp13 = ($4|0)==(34);
     $6 = ($3>>>0)>(0);
     $7 = ($2>>>0)>(4294967295);
     $8 = ($3|0)==(0);
     $9 = $8 & $7;
     $10 = $6 | $9;
     $or$cond = $10 | $cmp13;
     if ($or$cond) {
      HEAP32[$__err>>2] = 4;
      $retval$0 = -1;
      break;
     } else {
      $retval$0 = $2;
      break;
     }
    } else {
     HEAP32[$__err>>2] = 4;
     $retval$0 = 0;
    }
   } while(0);
   $retval$1 = $retval$0;
  }
 } while(0);
 STACKTOP = sp;return ($retval$1|0);
}
function __ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__do_get_unsignedItEES4_S4_S4_RNS_8ios_baseERjRT_($this,$__b,$__e,$__iob,$__err,$__v) {
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$pre = 0, $$pre$i$i$i = 0, $$pre$i$i$i34 = 0, $$pre$i17$i$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $8 = 0;
 var $9 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__a_end = 0, $__atoms = 0, $__buf = 0, $__cap_$i$i = 0, $__cap_$i$i90 = 0, $__dc = 0, $__einp_$i$i = 0, $__einp_$i$i$i$i = 0, $__einp_$i$i$i$i22 = 0, $__einp_$i$i4$i$i = 0, $__einp_$i$i4$i$i42 = 0, $__g = 0, $__g_end = 0, $__grouping = 0, $__i$0$i$i = 0, $__ninp_$i$i = 0;
 var $__ninp_$i$i$i$i = 0, $__ninp_$i$i$i$i21 = 0, $__ninp_$i$i3$i$i = 0, $__ninp_$i$i3$i$i41 = 0, $__size_$i$i = 0, $__size_$i$i120 = 0, $__size_$i3$i = 0, $__size_$i3$i122 = 0, $__thousands_sep = 0, $add$ptr = 0, $add$ptr18 = 0, $and$i$i = 0, $and$i$i91 = 0, $arrayidx$i$i = 0, $call = 0, $call$i$i$i$i16 = 0, $call$i$i$i$i60 = 0, $call$i$i107 = 0, $call$i$i9$i$i17 = 0, $call$i$i9$i$i62 = 0;
 var $call24 = 0, $call3$i$i = 0, $call3$i$i$i = 0, $call3$i$i$i$i = 0, $call3$i$i$i$i28 = 0, $call3$i$i$i31 = 0, $call3$i$i11$i$i = 0, $call3$i$i11$i$i48 = 0, $call3$i14$i$i = 0, $call3$i14$i$i51 = 0, $call36 = 0, $call4$i$i$i = 0, $call4$i$i$i32 = 0, $call4$i15$i$i = 0, $call4$i15$i$i52 = 0, $cmp = 0, $cmp$i$i$i$i = 0, $cmp$i$i$i$i23 = 0, $cmp$i$i106 = 0, $cmp$i$i111 = 0;
 var $cmp$i$i5$i$i = 0, $cmp$i$i5$i$i43 = 0, $cmp30 = 0, $cmp32 = 0, $cond$i = 0, $cond$i$i = 0, $cond$i$i104 = 0, $cond$i126 = 0, $cond$i67 = 0, $cond$i94 = 0, $conv$i = 0, $conv$i$i = 0, $conv$i$i124 = 0, $ehselector$slot$1 = 0, $exitcond$i$i = 0, $exn$slot$1 = 0, $inc$i$i = 0, $incdec$ptr = 0, $incdec$ptr$i$i = 0, $mul = 0;
 var $or = 0, $phitmp$i = 0, $phitmp$i92 = 0, $retval$0$i$i = 0, $retval$0$i$i$i$i = 0, $retval$0$i$i$i$i30 = 0, $retval$0$i$i13$i$i = 0, $retval$0$i$i13$i$i50 = 0, $retval$sroa$0$0$copyload = 0, $sub$ptr$lhs$cast = 0, $sub$ptr$rhs$cast = 0, $sub$ptr$sub = 0, $tobool = 0, $tobool$i$i = 0, $tobool$i$i$i = 0, $tobool$i$i$i18 = 0, $tobool$i$i$i20 = 0, $tobool$i$i$i99 = 0, $tobool$i$i121 = 0, $tobool$i$i65 = 0;
 var $tobool$i$i89 = 0, $tobool$i2$i$i = 0, $tobool$i2$i$i39 = 0, $vfn$i$i = 0, $vfn$i$i$i$i = 0, $vfn$i$i$i$i26 = 0, $vfn$i$i113 = 0, $vfn$i$i8$i$i = 0, $vfn$i$i8$i$i46 = 0, $vtable$i$i = 0, $vtable$i$i$i$i = 0, $vtable$i$i$i$i25 = 0, $vtable$i$i112 = 0, $vtable$i$i7$i$i = 0, $vtable$i$i7$i$i45 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(224|0);
 $__atoms = sp + 198|0;
 $__thousands_sep = sp + 196|0;
 $__grouping = sp + 184|0;
 $__buf = sp + 172|0;
 $__a_end = sp + 168|0;
 $__g = sp + 8|0;
 $__g_end = sp + 4|0;
 $__dc = sp;
 $call = (__ZNSt3__214__num_get_base10__get_baseERNS_8ios_baseE($__iob)|0);
 __ZNSt3__29__num_getIcE17__stage2_int_prepERNS_8ios_baseEPcRc($__grouping,$__iob,$__atoms,$__thousands_sep);
 ;HEAP32[$__buf>>2]=0|0;HEAP32[$__buf+4>>2]=0|0;HEAP32[$__buf+8>>2]=0|0;
 $__i$0$i$i = 0;
 while(1) {
  $exitcond$i$i = ($__i$0$i$i|0)==(3);
  if ($exitcond$i$i) {
   break;
  }
  $arrayidx$i$i = (($__buf) + ($__i$0$i$i<<2)|0);
  HEAP32[$arrayidx$i$i>>2] = 0;
  $inc$i$i = (($__i$0$i$i) + 1)|0;
  $__i$0$i$i = $inc$i$i;
 }
 $__size_$i$i = ((($__buf)) + 11|0);
 $0 = HEAP8[$__size_$i$i>>0]|0;
 $tobool$i$i = ($0<<24>>24)<(0);
 if ($tobool$i$i) {
  $__cap_$i$i = ((($__buf)) + 8|0);
  $1 = HEAP32[$__cap_$i$i>>2]|0;
  $and$i$i = $1 & 2147483647;
  $phitmp$i = (($and$i$i) + -1)|0;
  $cond$i = $phitmp$i;
 } else {
  $cond$i = 10;
 }
 __THREW__ = 0;
 invoke_viii(377,($__buf|0),($cond$i|0),0);
 $2 = __THREW__; __THREW__ = 0;
 $3 = $2&1;
 if ($3) {
  $30 = ___cxa_find_matching_catch_2()|0;
  $31 = tempRet0;
  $ehselector$slot$1 = $31;$exn$slot$1 = $30;
 } else {
  $4 = HEAP8[$__size_$i$i>>0]|0;
  $tobool$i$i$i18 = ($4<<24>>24)<(0);
  $5 = HEAP32[$__buf>>2]|0;
  $cond$i$i = $tobool$i$i$i18 ? $5 : $__buf;
  HEAP32[$__a_end>>2] = $cond$i$i;
  HEAP32[$__g_end>>2] = $__g;
  HEAP32[$__dc>>2] = 0;
  $__size_$i3$i = ((($__buf)) + 4|0);
  $__cap_$i$i90 = ((($__buf)) + 8|0);
  $$pre = HEAP32[$__b>>2]|0;
  $$pre$i$i$i34 = $$pre;$73 = $$pre;$__a$0 = $cond$i$i;
  L11: while(1) {
   $tobool$i$i$i20 = ($$pre$i$i$i34|0)==(0|0);
   if ($tobool$i$i$i20) {
    $$pre$i$i$i = 0;$59 = 0;$74 = 1;
   } else {
    $__ninp_$i$i$i$i21 = ((($$pre$i$i$i34)) + 12|0);
    $6 = HEAP32[$__ninp_$i$i$i$i21>>2]|0;
    $__einp_$i$i$i$i22 = ((($$pre$i$i$i34)) + 16|0);
    $7 = HEAP32[$__einp_$i$i$i$i22>>2]|0;
    $cmp$i$i$i$i23 = ($6|0)==($7|0);
    if ($cmp$i$i$i$i23) {
     $vtable$i$i$i$i25 = HEAP32[$$pre$i$i$i34>>2]|0;
     $vfn$i$i$i$i26 = ((($vtable$i$i$i$i25)) + 36|0);
     $8 = HEAP32[$vfn$i$i$i$i26>>2]|0;
     __THREW__ = 0;
     $call$i$i$i$i60 = (invoke_ii($8|0,($$pre$i$i$i34|0))|0);
     $9 = __THREW__; __THREW__ = 0;
     $10 = $9&1;
     if ($10) {
      break;
     } else {
      $retval$0$i$i$i$i30 = $call$i$i$i$i60;
     }
    } else {
     $11 = HEAP8[$6>>0]|0;
     $call3$i$i$i$i28 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($11)|0);
     $retval$0$i$i$i$i30 = $call3$i$i$i$i28;
    }
    $call3$i$i$i31 = (__ZNSt3__211char_traitsIcE3eofEv()|0);
    $call4$i$i$i32 = (__ZNSt3__211char_traitsIcE11eq_int_typeEii($retval$0$i$i$i$i30,$call3$i$i$i31)|0);
    if ($call4$i$i$i32) {
     HEAP32[$__b>>2] = 0;
     $$pre$i$i$i = 0;$59 = 0;$74 = 1;
    } else {
     $$pre$i$i$i = $$pre$i$i$i34;$59 = $73;$74 = 0;
    }
   }
   $12 = HEAP32[$__e>>2]|0;
   $tobool$i2$i$i39 = ($12|0)==(0|0);
   do {
    if ($tobool$i2$i$i39) {
     label = 20;
    } else {
     $__ninp_$i$i3$i$i41 = ((($12)) + 12|0);
     $13 = HEAP32[$__ninp_$i$i3$i$i41>>2]|0;
     $__einp_$i$i4$i$i42 = ((($12)) + 16|0);
     $14 = HEAP32[$__einp_$i$i4$i$i42>>2]|0;
     $cmp$i$i5$i$i43 = ($13|0)==($14|0);
     if ($cmp$i$i5$i$i43) {
      $vtable$i$i7$i$i45 = HEAP32[$12>>2]|0;
      $vfn$i$i8$i$i46 = ((($vtable$i$i7$i$i45)) + 36|0);
      $15 = HEAP32[$vfn$i$i8$i$i46>>2]|0;
      __THREW__ = 0;
      $call$i$i9$i$i62 = (invoke_ii($15|0,($12|0))|0);
      $16 = __THREW__; __THREW__ = 0;
      $17 = $16&1;
      if ($17) {
       break L11;
      } else {
       $retval$0$i$i13$i$i50 = $call$i$i9$i$i62;
      }
     } else {
      $18 = HEAP8[$13>>0]|0;
      $call3$i$i11$i$i48 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($18)|0);
      $retval$0$i$i13$i$i50 = $call3$i$i11$i$i48;
     }
     $call3$i14$i$i51 = (__ZNSt3__211char_traitsIcE3eofEv()|0);
     $call4$i15$i$i52 = (__ZNSt3__211char_traitsIcE11eq_int_typeEii($retval$0$i$i13$i$i50,$call3$i14$i$i51)|0);
     if ($call4$i15$i$i52) {
      HEAP32[$__e>>2] = 0;
      label = 20;
      break;
     } else {
      if ($74) {
       $75 = $12;
       break;
      } else {
       $$pre$i17$i$i = $12;$__a$2 = $__a$0;
       label = 37;
       break L11;
      }
     }
    }
   } while(0);
   if ((label|0) == 20) {
    label = 0;
    if ($74) {
     $$pre$i17$i$i = 0;$__a$2 = $__a$0;
     label = 37;
     break;
    } else {
     $75 = 0;
    }
   }
   $19 = HEAP32[$__a_end>>2]|0;
   $20 = HEAP8[$__size_$i$i>>0]|0;
   $tobool$i$i65 = ($20<<24>>24)<(0);
   $21 = HEAP32[$__size_$i3$i>>2]|0;
   $conv$i$i = $20&255;
   $cond$i67 = $tobool$i$i65 ? $21 : $conv$i$i;
   $add$ptr = (($__a$0) + ($cond$i67)|0);
   $cmp = ($19|0)==($add$ptr|0);
   if ($cmp) {
    $mul = $cond$i67 << 1;
    __THREW__ = 0;
    invoke_viii(377,($__buf|0),($mul|0),0);
    $22 = __THREW__; __THREW__ = 0;
    $23 = $22&1;
    if ($23) {
     break;
    }
    $24 = HEAP8[$__size_$i$i>>0]|0;
    $tobool$i$i89 = ($24<<24>>24)<(0);
    if ($tobool$i$i89) {
     $25 = HEAP32[$__cap_$i$i90>>2]|0;
     $and$i$i91 = $25 & 2147483647;
     $phitmp$i92 = (($and$i$i91) + -1)|0;
     $cond$i94 = $phitmp$i92;
    } else {
     $cond$i94 = 10;
    }
    __THREW__ = 0;
    invoke_viii(377,($__buf|0),($cond$i94|0),0);
    $26 = __THREW__; __THREW__ = 0;
    $27 = $26&1;
    if ($27) {
     break;
    }
    $28 = HEAP8[$__size_$i$i>>0]|0;
    $tobool$i$i$i99 = ($28<<24>>24)<(0);
    $29 = HEAP32[$__buf>>2]|0;
    $cond$i$i104 = $tobool$i$i$i99 ? $29 : $__buf;
    $add$ptr18 = (($cond$i$i104) + ($cond$i67)|0);
    HEAP32[$__a_end>>2] = $add$ptr18;
    $__a$1 = $cond$i$i104;
   } else {
    $__a$1 = $__a$0;
   }
   $__ninp_$i$i = ((($$pre$i$i$i)) + 12|0);
   $32 = HEAP32[$__ninp_$i$i>>2]|0;
   $__einp_$i$i = ((($$pre$i$i$i)) + 16|0);
   $33 = HEAP32[$__einp_$i$i>>2]|0;
   $cmp$i$i106 = ($32|0)==($33|0);
   if ($cmp$i$i106) {
    $vtable$i$i = HEAP32[$$pre$i$i$i>>2]|0;
    $vfn$i$i = ((($vtable$i$i)) + 36|0);
    $34 = HEAP32[$vfn$i$i>>2]|0;
    __THREW__ = 0;
    $call$i$i107 = (invoke_ii($34|0,($$pre$i$i$i|0))|0);
    $35 = __THREW__; __THREW__ = 0;
    $36 = $35&1;
    if ($36) {
     break;
    } else {
     $retval$0$i$i = $call$i$i107;
    }
   } else {
    $37 = HEAP8[$32>>0]|0;
    $call3$i$i = (__ZNSt3__211char_traitsIcE11to_int_typeEc($37)|0);
    $retval$0$i$i = $call3$i$i;
   }
   $conv$i = $retval$0$i$i&255;
   $38 = HEAP8[$__thousands_sep>>0]|0;
   __THREW__ = 0;
   $call24 = (invoke_iiiiiiiiiii(391,($conv$i|0),($call|0),($__a$1|0),($__a_end|0),($__dc|0),($38|0),($__grouping|0),($__g|0),($__g_end|0),($__atoms|0))|0);
   $39 = __THREW__; __THREW__ = 0;
   $40 = $39&1;
   if ($40) {
    break;
   }
   $tobool = ($call24|0)==(0);
   if (!($tobool)) {
    $$pre$i17$i$i = $75;$__a$2 = $__a$1;
    label = 37;
    break;
   }
   $41 = HEAP32[$__ninp_$i$i>>2]|0;
   $42 = HEAP32[$__einp_$i$i>>2]|0;
   $cmp$i$i111 = ($41|0)==($42|0);
   if ($cmp$i$i111) {
    $vtable$i$i112 = HEAP32[$$pre$i$i$i>>2]|0;
    $vfn$i$i113 = ((($vtable$i$i112)) + 40|0);
    $43 = HEAP32[$vfn$i$i113>>2]|0;
    __THREW__ = 0;
    (invoke_ii($43|0,($$pre$i$i$i|0))|0);
    $44 = __THREW__; __THREW__ = 0;
    $45 = $44&1;
    if ($45) {
     break;
    } else {
     $$pre$i$i$i34 = $$pre$i$i$i;$73 = $59;$__a$0 = $__a$1;
     continue;
    }
   } else {
    $incdec$ptr$i$i = ((($41)) + 1|0);
    HEAP32[$__ninp_$i$i>>2] = $incdec$ptr$i$i;
    $46 = HEAP8[$41>>0]|0;
    (__ZNSt3__211char_traitsIcE11to_int_typeEc($46)|0);
    $$pre$i$i$i34 = $$pre$i$i$i;$73 = $59;$__a$0 = $__a$1;
    continue;
   }
  }
  L50: do {
   if ((label|0) == 37) {
    $__size_$i$i120 = ((($__grouping)) + 11|0);
    $47 = HEAP8[$__size_$i$i120>>0]|0;
    $tobool$i$i121 = ($47<<24>>24)<(0);
    $__size_$i3$i122 = ((($__grouping)) + 4|0);
    $48 = HEAP32[$__size_$i3$i122>>2]|0;
    $conv$i$i124 = $47&255;
    $cond$i126 = $tobool$i$i121 ? $48 : $conv$i$i124;
    $cmp30 = ($cond$i126|0)==(0);
    if (!($cmp30)) {
     $49 = HEAP32[$__g_end>>2]|0;
     $sub$ptr$lhs$cast = $49;
     $sub$ptr$rhs$cast = $__g;
     $sub$ptr$sub = (($sub$ptr$lhs$cast) - ($sub$ptr$rhs$cast))|0;
     $cmp32 = ($sub$ptr$sub|0)<(160);
     if ($cmp32) {
      $50 = HEAP32[$__dc>>2]|0;
      $incdec$ptr = ((($49)) + 4|0);
      HEAP32[$__g_end>>2] = $incdec$ptr;
      HEAP32[$49>>2] = $50;
     }
    }
    $51 = HEAP32[$__a_end>>2]|0;
    __THREW__ = 0;
    $call36 = (invoke_iiiii(406,($__a$2|0),($51|0),($__err|0),($call|0))|0);
    $52 = __THREW__; __THREW__ = 0;
    $53 = $52&1;
    if (!($53)) {
     HEAP16[$__v>>1] = $call36;
     $54 = HEAP32[$__g_end>>2]|0;
     __THREW__ = 0;
     invoke_viiii(400,($__grouping|0),($__g|0),($54|0),($__err|0));
     $55 = __THREW__; __THREW__ = 0;
     $56 = $55&1;
     if (!($56)) {
      $tobool$i$i$i = ($$pre$i$i$i|0)==(0|0);
      if ($tobool$i$i$i) {
       $76 = 1;
      } else {
       $__ninp_$i$i$i$i = ((($$pre$i$i$i)) + 12|0);
       $57 = HEAP32[$__ninp_$i$i$i$i>>2]|0;
       $__einp_$i$i$i$i = ((($$pre$i$i$i)) + 16|0);
       $58 = HEAP32[$__einp_$i$i$i$i>>2]|0;
       $cmp$i$i$i$i = ($57|0)==($58|0);
       if ($cmp$i$i$i$i) {
        $vtable$i$i$i$i = HEAP32[$59>>2]|0;
        $vfn$i$i$i$i = ((($vtable$i$i$i$i)) + 36|0);
        $60 = HEAP32[$vfn$i$i$i$i>>2]|0;
        __THREW__ = 0;
        $call$i$i$i$i16 = (invoke_ii($60|0,($$pre$i$i$i|0))|0);
        $61 = __THREW__; __THREW__ = 0;
        $62 = $61&1;
        if ($62) {
         break;
        } else {
         $retval$0$i$i$i$i = $call$i$i$i$i16;
        }
       } else {
        $63 = HEAP8[$57>>0]|0;
        $call3$i$i$i$i = (__ZNSt3__211char_traitsIcE11to_int_typeEc($63)|0);
        $retval$0$i$i$i$i = $call3$i$i$i$i;
       }
       $call3$i$i$i = (__ZNSt3__211char_traitsIcE3eofEv()|0);
       $call4$i$i$i = (__ZNSt3__211char_traitsIcE11eq_int_typeEii($retval$0$i$i$i$i,$call3$i$i$i)|0);
       if ($call4$i$i$i) {
        HEAP32[$__b>>2] = 0;
        $76 = 1;
       } else {
        $76 = 0;
       }
      }
      $tobool$i2$i$i = ($$pre$i17$i$i|0)==(0|0);
      do {
       if ($tobool$i2$i$i) {
        label = 54;
       } else {
        $__ninp_$i$i3$i$i = ((($$pre$i17$i$i)) + 12|0);
        $64 = HEAP32[$__ninp_$i$i3$i$i>>2]|0;
        $__einp_$i$i4$i$i = ((($$pre$i17$i$i)) + 16|0);
        $65 = HEAP32[$__einp_$i$i4$i$i>>2]|0;
        $cmp$i$i5$i$i = ($64|0)==($65|0);
        if ($cmp$i$i5$i$i) {
         $vtable$i$i7$i$i = HEAP32[$$pre$i17$i$i>>2]|0;
         $vfn$i$i8$i$i = ((($vtable$i$i7$i$i)) + 36|0);
         $66 = HEAP32[$vfn$i$i8$i$i>>2]|0;
         __THREW__ = 0;
         $call$i$i9$i$i17 = (invoke_ii($66|0,($$pre$i17$i$i|0))|0);
         $67 = __THREW__; __THREW__ = 0;
         $68 = $67&1;
         if ($68) {
          break L50;
         } else {
          $retval$0$i$i13$i$i = $call$i$i9$i$i17;
         }
        } else {
         $69 = HEAP8[$64>>0]|0;
         $call3$i$i11$i$i = (__ZNSt3__211char_traitsIcE11to_int_typeEc($69)|0);
         $retval$0$i$i13$i$i = $call3$i$i11$i$i;
        }
        $call3$i14$i$i = (__ZNSt3__211char_traitsIcE3eofEv()|0);
        $call4$i15$i$i = (__ZNSt3__211char_traitsIcE11eq_int_typeEii($retval$0$i$i13$i$i,$call3$i14$i$i)|0);
        if ($call4$i15$i$i) {
         HEAP32[$__e>>2] = 0;
         label = 54;
         break;
        } else {
         if ($76) {
          break;
         } else {
          label = 56;
          break;
         }
        }
       }
      } while(0);
      if ((label|0) == 54) {
       if ($76) {
        label = 56;
       }
      }
      if ((label|0) == 56) {
       $70 = HEAP32[$__err>>2]|0;
       $or = $70 | 2;
       HEAP32[$__err>>2] = $or;
      }
      $retval$sroa$0$0$copyload = HEAP32[$__b>>2]|0;
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__buf);
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grouping);
      STACKTOP = sp;return ($retval$sroa$0$0$copyload|0);
     }
    }
   }
  } while(0);
  $71 = ___cxa_find_matching_catch_2()|0;
  $72 = tempRet0;
  $ehselector$slot$1 = $72;$exn$slot$1 = $71;
 }
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__buf);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grouping);
 ___resumeException($exn$slot$1|0);
 // unreachable;
 return (0)|0;
}
function __ZNSt3__227__num_get_unsigned_integralItEET_PKcS3_Rji($__a,$__a_end,$__err,$__base) {
 $__a = $__a|0;
 $__a_end = $__a_end|0;
 $__err = $__err|0;
 $__base = $__base|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__p2 = 0, $call = 0, $call3 = 0, $call4 = 0, $call6 = 0, $call9 = 0, $cmp = 0, $cmp1 = 0;
 var $cmp11 = 0, $cmp13 = 0, $cmp7 = 0, $or$cond = 0, $retval$0 = 0, $retval$1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $__p2 = sp;
 $cmp = ($__a|0)==($__a_end|0);
 do {
  if ($cmp) {
   HEAP32[$__err>>2] = 4;
   $retval$1 = 0;
  } else {
   $0 = HEAP8[$__a>>0]|0;
   $cmp1 = ($0<<24>>24)==(45);
   if ($cmp1) {
    HEAP32[$__err>>2] = 4;
    $retval$1 = 0;
    break;
   }
   $call = (___errno_location()|0);
   $1 = HEAP32[$call>>2]|0;
   $call3 = (___errno_location()|0);
   HEAP32[$call3>>2] = 0;
   $call4 = (__ZNSt3__26__clocEv()|0);
   $2 = (_strtoull_l($__a,$__p2,$__base,$call4)|0);
   $3 = tempRet0;
   $call6 = (___errno_location()|0);
   $4 = HEAP32[$call6>>2]|0;
   $cmp7 = ($4|0)==(0);
   if ($cmp7) {
    $call9 = (___errno_location()|0);
    HEAP32[$call9>>2] = $1;
   }
   $5 = HEAP32[$__p2>>2]|0;
   $cmp11 = ($5|0)==($__a_end|0);
   do {
    if ($cmp11) {
     $cmp13 = ($4|0)==(34);
     $6 = ($3>>>0)>(0);
     $7 = ($2>>>0)>(65535);
     $8 = ($3|0)==(0);
     $9 = $8 & $7;
     $10 = $6 | $9;
     $or$cond = $10 | $cmp13;
     if ($or$cond) {
      HEAP32[$__err>>2] = 4;
      $retval$0 = -1;
      break;
     } else {
      $11 = $2&65535;
      $retval$0 = $11;
      break;
     }
    } else {
     HEAP32[$__err>>2] = 4;
     $retval$0 = 0;
    }
   } while(0);
   $retval$1 = $retval$0;
  }
 } while(0);
 STACKTOP = sp;return ($retval$1|0);
}
function __ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE15__do_get_signedIxEES4_S4_S4_RNS_8ios_baseERjRT_($this,$__b,$__e,$__iob,$__err,$__v) {
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$pre = 0, $$pre$i$i$i = 0, $$pre$i$i$i34 = 0, $$pre$i17$i$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $9 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__a_end = 0, $__atoms = 0, $__buf = 0, $__cap_$i$i = 0, $__cap_$i$i90 = 0, $__dc = 0, $__einp_$i$i = 0, $__einp_$i$i$i$i = 0, $__einp_$i$i$i$i22 = 0, $__einp_$i$i4$i$i = 0;
 var $__einp_$i$i4$i$i42 = 0, $__g = 0, $__g_end = 0, $__grouping = 0, $__i$0$i$i = 0, $__ninp_$i$i = 0, $__ninp_$i$i$i$i = 0, $__ninp_$i$i$i$i21 = 0, $__ninp_$i$i3$i$i = 0, $__ninp_$i$i3$i$i41 = 0, $__size_$i$i = 0, $__size_$i$i120 = 0, $__size_$i3$i = 0, $__size_$i3$i122 = 0, $__thousands_sep = 0, $add$ptr = 0, $add$ptr18 = 0, $and$i$i = 0, $and$i$i91 = 0, $arrayidx$i$i = 0;
 var $call = 0, $call$i$i$i$i16 = 0, $call$i$i$i$i60 = 0, $call$i$i107 = 0, $call$i$i9$i$i17 = 0, $call$i$i9$i$i62 = 0, $call24 = 0, $call3$i$i = 0, $call3$i$i$i = 0, $call3$i$i$i$i = 0, $call3$i$i$i$i28 = 0, $call3$i$i$i31 = 0, $call3$i$i11$i$i = 0, $call3$i$i11$i$i48 = 0, $call3$i14$i$i = 0, $call3$i14$i$i51 = 0, $call4$i$i$i = 0, $call4$i$i$i32 = 0, $call4$i15$i$i = 0, $call4$i15$i$i52 = 0;
 var $cmp = 0, $cmp$i$i$i$i = 0, $cmp$i$i$i$i23 = 0, $cmp$i$i106 = 0, $cmp$i$i111 = 0, $cmp$i$i5$i$i = 0, $cmp$i$i5$i$i43 = 0, $cmp30 = 0, $cmp32 = 0, $cond$i = 0, $cond$i$i = 0, $cond$i$i104 = 0, $cond$i126 = 0, $cond$i67 = 0, $cond$i94 = 0, $conv$i = 0, $conv$i$i = 0, $conv$i$i124 = 0, $ehselector$slot$1 = 0, $exitcond$i$i = 0;
 var $exn$slot$1 = 0, $inc$i$i = 0, $incdec$ptr = 0, $incdec$ptr$i$i = 0, $mul = 0, $or = 0, $phitmp$i = 0, $phitmp$i92 = 0, $retval$0$i$i = 0, $retval$0$i$i$i$i = 0, $retval$0$i$i$i$i30 = 0, $retval$0$i$i13$i$i = 0, $retval$0$i$i13$i$i50 = 0, $retval$sroa$0$0$copyload = 0, $sub$ptr$lhs$cast = 0, $sub$ptr$rhs$cast = 0, $sub$ptr$sub = 0, $tobool = 0, $tobool$i$i = 0, $tobool$i$i$i = 0;
 var $tobool$i$i$i18 = 0, $tobool$i$i$i20 = 0, $tobool$i$i$i99 = 0, $tobool$i$i121 = 0, $tobool$i$i65 = 0, $tobool$i$i89 = 0, $tobool$i2$i$i = 0, $tobool$i2$i$i39 = 0, $vfn$i$i = 0, $vfn$i$i$i$i = 0, $vfn$i$i$i$i26 = 0, $vfn$i$i113 = 0, $vfn$i$i8$i$i = 0, $vfn$i$i8$i$i46 = 0, $vtable$i$i = 0, $vtable$i$i$i$i = 0, $vtable$i$i$i$i25 = 0, $vtable$i$i112 = 0, $vtable$i$i7$i$i = 0, $vtable$i$i7$i$i45 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(224|0);
 $__atoms = sp + 198|0;
 $__thousands_sep = sp + 196|0;
 $__grouping = sp + 184|0;
 $__buf = sp + 172|0;
 $__a_end = sp + 168|0;
 $__g = sp + 8|0;
 $__g_end = sp + 4|0;
 $__dc = sp;
 $call = (__ZNSt3__214__num_get_base10__get_baseERNS_8ios_baseE($__iob)|0);
 __ZNSt3__29__num_getIcE17__stage2_int_prepERNS_8ios_baseEPcRc($__grouping,$__iob,$__atoms,$__thousands_sep);
 ;HEAP32[$__buf>>2]=0|0;HEAP32[$__buf+4>>2]=0|0;HEAP32[$__buf+8>>2]=0|0;
 $__i$0$i$i = 0;
 while(1) {
  $exitcond$i$i = ($__i$0$i$i|0)==(3);
  if ($exitcond$i$i) {
   break;
  }
  $arrayidx$i$i = (($__buf) + ($__i$0$i$i<<2)|0);
  HEAP32[$arrayidx$i$i>>2] = 0;
  $inc$i$i = (($__i$0$i$i) + 1)|0;
  $__i$0$i$i = $inc$i$i;
 }
 $__size_$i$i = ((($__buf)) + 11|0);
 $0 = HEAP8[$__size_$i$i>>0]|0;
 $tobool$i$i = ($0<<24>>24)<(0);
 if ($tobool$i$i) {
  $__cap_$i$i = ((($__buf)) + 8|0);
  $1 = HEAP32[$__cap_$i$i>>2]|0;
  $and$i$i = $1 & 2147483647;
  $phitmp$i = (($and$i$i) + -1)|0;
  $cond$i = $phitmp$i;
 } else {
  $cond$i = 10;
 }
 __THREW__ = 0;
 invoke_viii(377,($__buf|0),($cond$i|0),0);
 $2 = __THREW__; __THREW__ = 0;
 $3 = $2&1;
 if ($3) {
  $30 = ___cxa_find_matching_catch_2()|0;
  $31 = tempRet0;
  $ehselector$slot$1 = $31;$exn$slot$1 = $30;
 } else {
  $4 = HEAP8[$__size_$i$i>>0]|0;
  $tobool$i$i$i18 = ($4<<24>>24)<(0);
  $5 = HEAP32[$__buf>>2]|0;
  $cond$i$i = $tobool$i$i$i18 ? $5 : $__buf;
  HEAP32[$__a_end>>2] = $cond$i$i;
  HEAP32[$__g_end>>2] = $__g;
  HEAP32[$__dc>>2] = 0;
  $__size_$i3$i = ((($__buf)) + 4|0);
  $__cap_$i$i90 = ((($__buf)) + 8|0);
  $$pre = HEAP32[$__b>>2]|0;
  $$pre$i$i$i34 = $$pre;$79 = $$pre;$__a$0 = $cond$i$i;
  L11: while(1) {
   $tobool$i$i$i20 = ($$pre$i$i$i34|0)==(0|0);
   if ($tobool$i$i$i20) {
    $$pre$i$i$i = 0;$65 = 0;$80 = 1;
   } else {
    $__ninp_$i$i$i$i21 = ((($$pre$i$i$i34)) + 12|0);
    $6 = HEAP32[$__ninp_$i$i$i$i21>>2]|0;
    $__einp_$i$i$i$i22 = ((($$pre$i$i$i34)) + 16|0);
    $7 = HEAP32[$__einp_$i$i$i$i22>>2]|0;
    $cmp$i$i$i$i23 = ($6|0)==($7|0);
    if ($cmp$i$i$i$i23) {
     $vtable$i$i$i$i25 = HEAP32[$$pre$i$i$i34>>2]|0;
     $vfn$i$i$i$i26 = ((($vtable$i$i$i$i25)) + 36|0);
     $8 = HEAP32[$vfn$i$i$i$i26>>2]|0;
     __THREW__ = 0;
     $call$i$i$i$i60 = (invoke_ii($8|0,($$pre$i$i$i34|0))|0);
     $9 = __THREW__; __THREW__ = 0;
     $10 = $9&1;
     if ($10) {
      break;
     } else {
      $retval$0$i$i$i$i30 = $call$i$i$i$i60;
     }
    } else {
     $11 = HEAP8[$6>>0]|0;
     $call3$i$i$i$i28 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($11)|0);
     $retval$0$i$i$i$i30 = $call3$i$i$i$i28;
    }
    $call3$i$i$i31 = (__ZNSt3__211char_traitsIcE3eofEv()|0);
    $call4$i$i$i32 = (__ZNSt3__211char_traitsIcE11eq_int_typeEii($retval$0$i$i$i$i30,$call3$i$i$i31)|0);
    if ($call4$i$i$i32) {
     HEAP32[$__b>>2] = 0;
     $$pre$i$i$i = 0;$65 = 0;$80 = 1;
    } else {
     $$pre$i$i$i = $$pre$i$i$i34;$65 = $79;$80 = 0;
    }
   }
   $12 = HEAP32[$__e>>2]|0;
   $tobool$i2$i$i39 = ($12|0)==(0|0);
   do {
    if ($tobool$i2$i$i39) {
     label = 20;
    } else {
     $__ninp_$i$i3$i$i41 = ((($12)) + 12|0);
     $13 = HEAP32[$__ninp_$i$i3$i$i41>>2]|0;
     $__einp_$i$i4$i$i42 = ((($12)) + 16|0);
     $14 = HEAP32[$__einp_$i$i4$i$i42>>2]|0;
     $cmp$i$i5$i$i43 = ($13|0)==($14|0);
     if ($cmp$i$i5$i$i43) {
      $vtable$i$i7$i$i45 = HEAP32[$12>>2]|0;
      $vfn$i$i8$i$i46 = ((($vtable$i$i7$i$i45)) + 36|0);
      $15 = HEAP32[$vfn$i$i8$i$i46>>2]|0;
      __THREW__ = 0;
      $call$i$i9$i$i62 = (invoke_ii($15|0,($12|0))|0);
      $16 = __THREW__; __THREW__ = 0;
      $17 = $16&1;
      if ($17) {
       break L11;
      } else {
       $retval$0$i$i13$i$i50 = $call$i$i9$i$i62;
      }
     } else {
      $18 = HEAP8[$13>>0]|0;
      $call3$i$i11$i$i48 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($18)|0);
      $retval$0$i$i13$i$i50 = $call3$i$i11$i$i48;
     }
     $call3$i14$i$i51 = (__ZNSt3__211char_traitsIcE3eofEv()|0);
     $call4$i15$i$i52 = (__ZNSt3__211char_traitsIcE11eq_int_typeEii($retval$0$i$i13$i$i50,$call3$i14$i$i51)|0);
     if ($call4$i15$i$i52) {
      HEAP32[$__e>>2] = 0;
      label = 20;
      break;
     } else {
      if ($80) {
       $81 = $12;
       break;
      } else {
       $$pre$i17$i$i = $12;$__a$2 = $__a$0;
       label = 37;
       break L11;
      }
     }
    }
   } while(0);
   if ((label|0) == 20) {
    label = 0;
    if ($80) {
     $$pre$i17$i$i = 0;$__a$2 = $__a$0;
     label = 37;
     break;
    } else {
     $81 = 0;
    }
   }
   $19 = HEAP32[$__a_end>>2]|0;
   $20 = HEAP8[$__size_$i$i>>0]|0;
   $tobool$i$i65 = ($20<<24>>24)<(0);
   $21 = HEAP32[$__size_$i3$i>>2]|0;
   $conv$i$i = $20&255;
   $cond$i67 = $tobool$i$i65 ? $21 : $conv$i$i;
   $add$ptr = (($__a$0) + ($cond$i67)|0);
   $cmp = ($19|0)==($add$ptr|0);
   if ($cmp) {
    $mul = $cond$i67 << 1;
    __THREW__ = 0;
    invoke_viii(377,($__buf|0),($mul|0),0);
    $22 = __THREW__; __THREW__ = 0;
    $23 = $22&1;
    if ($23) {
     break;
    }
    $24 = HEAP8[$__size_$i$i>>0]|0;
    $tobool$i$i89 = ($24<<24>>24)<(0);
    if ($tobool$i$i89) {
     $25 = HEAP32[$__cap_$i$i90>>2]|0;
     $and$i$i91 = $25 & 2147483647;
     $phitmp$i92 = (($and$i$i91) + -1)|0;
     $cond$i94 = $phitmp$i92;
    } else {
     $cond$i94 = 10;
    }
    __THREW__ = 0;
    invoke_viii(377,($__buf|0),($cond$i94|0),0);
    $26 = __THREW__; __THREW__ = 0;
    $27 = $26&1;
    if ($27) {
     break;
    }
    $28 = HEAP8[$__size_$i$i>>0]|0;
    $tobool$i$i$i99 = ($28<<24>>24)<(0);
    $29 = HEAP32[$__buf>>2]|0;
    $cond$i$i104 = $tobool$i$i$i99 ? $29 : $__buf;
    $add$ptr18 = (($cond$i$i104) + ($cond$i67)|0);
    HEAP32[$__a_end>>2] = $add$ptr18;
    $__a$1 = $cond$i$i104;
   } else {
    $__a$1 = $__a$0;
   }
   $__ninp_$i$i = ((($$pre$i$i$i)) + 12|0);
   $32 = HEAP32[$__ninp_$i$i>>2]|0;
   $__einp_$i$i = ((($$pre$i$i$i)) + 16|0);
   $33 = HEAP32[$__einp_$i$i>>2]|0;
   $cmp$i$i106 = ($32|0)==($33|0);
   if ($cmp$i$i106) {
    $vtable$i$i = HEAP32[$$pre$i$i$i>>2]|0;
    $vfn$i$i = ((($vtable$i$i)) + 36|0);
    $34 = HEAP32[$vfn$i$i>>2]|0;
    __THREW__ = 0;
    $call$i$i107 = (invoke_ii($34|0,($$pre$i$i$i|0))|0);
    $35 = __THREW__; __THREW__ = 0;
    $36 = $35&1;
    if ($36) {
     break;
    } else {
     $retval$0$i$i = $call$i$i107;
    }
   } else {
    $37 = HEAP8[$32>>0]|0;
    $call3$i$i = (__ZNSt3__211char_traitsIcE11to_int_typeEc($37)|0);
    $retval$0$i$i = $call3$i$i;
   }
   $conv$i = $retval$0$i$i&255;
   $38 = HEAP8[$__thousands_sep>>0]|0;
   __THREW__ = 0;
   $call24 = (invoke_iiiiiiiiiii(391,($conv$i|0),($call|0),($__a$1|0),($__a_end|0),($__dc|0),($38|0),($__grouping|0),($__g|0),($__g_end|0),($__atoms|0))|0);
   $39 = __THREW__; __THREW__ = 0;
   $40 = $39&1;
   if ($40) {
    break;
   }
   $tobool = ($call24|0)==(0);
   if (!($tobool)) {
    $$pre$i17$i$i = $81;$__a$2 = $__a$1;
    label = 37;
    break;
   }
   $41 = HEAP32[$__ninp_$i$i>>2]|0;
   $42 = HEAP32[$__einp_$i$i>>2]|0;
   $cmp$i$i111 = ($41|0)==($42|0);
   if ($cmp$i$i111) {
    $vtable$i$i112 = HEAP32[$$pre$i$i$i>>2]|0;
    $vfn$i$i113 = ((($vtable$i$i112)) + 40|0);
    $43 = HEAP32[$vfn$i$i113>>2]|0;
    __THREW__ = 0;
    (invoke_ii($43|0,($$pre$i$i$i|0))|0);
    $44 = __THREW__; __THREW__ = 0;
    $45 = $44&1;
    if ($45) {
     break;
    } else {
     $$pre$i$i$i34 = $$pre$i$i$i;$79 = $65;$__a$0 = $__a$1;
     continue;
    }
   } else {
    $incdec$ptr$i$i = ((($41)) + 1|0);
    HEAP32[$__ninp_$i$i>>2] = $incdec$ptr$i$i;
    $46 = HEAP8[$41>>0]|0;
    (__ZNSt3__211char_traitsIcE11to_int_typeEc($46)|0);
    $$pre$i$i$i34 = $$pre$i$i$i;$79 = $65;$__a$0 = $__a$1;
    continue;
   }
  }
  L50: do {
   if ((label|0) == 37) {
    $__size_$i$i120 = ((($__grouping)) + 11|0);
    $47 = HEAP8[$__size_$i$i120>>0]|0;
    $tobool$i$i121 = ($47<<24>>24)<(0);
    $__size_$i3$i122 = ((($__grouping)) + 4|0);
    $48 = HEAP32[$__size_$i3$i122>>2]|0;
    $conv$i$i124 = $47&255;
    $cond$i126 = $tobool$i$i121 ? $48 : $conv$i$i124;
    $cmp30 = ($cond$i126|0)==(0);
    if (!($cmp30)) {
     $49 = HEAP32[$__g_end>>2]|0;
     $sub$ptr$lhs$cast = $49;
     $sub$ptr$rhs$cast = $__g;
     $sub$ptr$sub = (($sub$ptr$lhs$cast) - ($sub$ptr$rhs$cast))|0;
     $cmp32 = ($sub$ptr$sub|0)<(160);
     if ($cmp32) {
      $50 = HEAP32[$__dc>>2]|0;
      $incdec$ptr = ((($49)) + 4|0);
      HEAP32[$__g_end>>2] = $incdec$ptr;
      HEAP32[$49>>2] = $50;
     }
    }
    $51 = HEAP32[$__a_end>>2]|0;
    __THREW__ = 0;
    $52 = (invoke_iiiii(407,($__a$2|0),($51|0),($__err|0),($call|0))|0);
    $53 = tempRet0;
    $54 = __THREW__; __THREW__ = 0;
    $55 = $54&1;
    if (!($55)) {
     $56 = $__v;
     $57 = $56;
     HEAP32[$57>>2] = $52;
     $58 = (($56) + 4)|0;
     $59 = $58;
     HEAP32[$59>>2] = $53;
     $60 = HEAP32[$__g_end>>2]|0;
     __THREW__ = 0;
     invoke_viiii(400,($__grouping|0),($__g|0),($60|0),($__err|0));
     $61 = __THREW__; __THREW__ = 0;
     $62 = $61&1;
     if (!($62)) {
      $tobool$i$i$i = ($$pre$i$i$i|0)==(0|0);
      if ($tobool$i$i$i) {
       $82 = 1;
      } else {
       $__ninp_$i$i$i$i = ((($$pre$i$i$i)) + 12|0);
       $63 = HEAP32[$__ninp_$i$i$i$i>>2]|0;
       $__einp_$i$i$i$i = ((($$pre$i$i$i)) + 16|0);
       $64 = HEAP32[$__einp_$i$i$i$i>>2]|0;
       $cmp$i$i$i$i = ($63|0)==($64|0);
       if ($cmp$i$i$i$i) {
        $vtable$i$i$i$i = HEAP32[$65>>2]|0;
        $vfn$i$i$i$i = ((($vtable$i$i$i$i)) + 36|0);
        $66 = HEAP32[$vfn$i$i$i$i>>2]|0;
        __THREW__ = 0;
        $call$i$i$i$i16 = (invoke_ii($66|0,($$pre$i$i$i|0))|0);
        $67 = __THREW__; __THREW__ = 0;
        $68 = $67&1;
        if ($68) {
         break;
        } else {
         $retval$0$i$i$i$i = $call$i$i$i$i16;
        }
       } else {
        $69 = HEAP8[$63>>0]|0;
        $call3$i$i$i$i = (__ZNSt3__211char_traitsIcE11to_int_typeEc($69)|0);
        $retval$0$i$i$i$i = $call3$i$i$i$i;
       }
       $call3$i$i$i = (__ZNSt3__211char_traitsIcE3eofEv()|0);
       $call4$i$i$i = (__ZNSt3__211char_traitsIcE11eq_int_typeEii($retval$0$i$i$i$i,$call3$i$i$i)|0);
       if ($call4$i$i$i) {
        HEAP32[$__b>>2] = 0;
        $82 = 1;
       } else {
        $82 = 0;
       }
      }
      $tobool$i2$i$i = ($$pre$i17$i$i|0)==(0|0);
      do {
       if ($tobool$i2$i$i) {
        label = 54;
       } else {
        $__ninp_$i$i3$i$i = ((($$pre$i17$i$i)) + 12|0);
        $70 = HEAP32[$__ninp_$i$i3$i$i>>2]|0;
        $__einp_$i$i4$i$i = ((($$pre$i17$i$i)) + 16|0);
        $71 = HEAP32[$__einp_$i$i4$i$i>>2]|0;
        $cmp$i$i5$i$i = ($70|0)==($71|0);
        if ($cmp$i$i5$i$i) {
         $vtable$i$i7$i$i = HEAP32[$$pre$i17$i$i>>2]|0;
         $vfn$i$i8$i$i = ((($vtable$i$i7$i$i)) + 36|0);
         $72 = HEAP32[$vfn$i$i8$i$i>>2]|0;
         __THREW__ = 0;
         $call$i$i9$i$i17 = (invoke_ii($72|0,($$pre$i17$i$i|0))|0);
         $73 = __THREW__; __THREW__ = 0;
         $74 = $73&1;
         if ($74) {
          break L50;
         } else {
          $retval$0$i$i13$i$i = $call$i$i9$i$i17;
         }
        } else {
         $75 = HEAP8[$70>>0]|0;
         $call3$i$i11$i$i = (__ZNSt3__211char_traitsIcE11to_int_typeEc($75)|0);
         $retval$0$i$i13$i$i = $call3$i$i11$i$i;
        }
        $call3$i14$i$i = (__ZNSt3__211char_traitsIcE3eofEv()|0);
        $call4$i15$i$i = (__ZNSt3__211char_traitsIcE11eq_int_typeEii($retval$0$i$i13$i$i,$call3$i14$i$i)|0);
        if ($call4$i15$i$i) {
         HEAP32[$__e>>2] = 0;
         label = 54;
         break;
        } else {
         if ($82) {
          break;
         } else {
          label = 56;
          break;
         }
        }
       }
      } while(0);
      if ((label|0) == 54) {
       if ($82) {
        label = 56;
       }
      }
      if ((label|0) == 56) {
       $76 = HEAP32[$__err>>2]|0;
       $or = $76 | 2;
       HEAP32[$__err>>2] = $or;
      }
      $retval$sroa$0$0$copyload = HEAP32[$__b>>2]|0;
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__buf);
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grouping);
      STACKTOP = sp;return ($retval$sroa$0$0$copyload|0);
     }
    }
   }
  } while(0);
  $77 = ___cxa_find_matching_catch_2()|0;
  $78 = tempRet0;
  $ehselector$slot$1 = $78;$exn$slot$1 = $77;
 }
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__buf);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grouping);
 ___resumeException($exn$slot$1|0);
 // unreachable;
 return (0)|0;
}
function __ZNSt3__225__num_get_signed_integralIxEET_PKcS3_Rji($__a,$__a_end,$__err,$__base) {
 $__a = $__a|0;
 $__a_end = $__a_end|0;
 $__err = $__err|0;
 $__base = $__base|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__p2 = 0, $call = 0, $call1 = 0, $call2 = 0;
 var $call4 = 0, $call7 = 0, $cmp = 0, $cmp10 = 0, $cmp5 = 0, $cmp8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $__p2 = sp;
 $cmp = ($__a|0)==($__a_end|0);
 if ($cmp) {
  HEAP32[$__err>>2] = 4;
  $12 = 0;$13 = 0;
 } else {
  $call = (___errno_location()|0);
  $0 = HEAP32[$call>>2]|0;
  $call1 = (___errno_location()|0);
  HEAP32[$call1>>2] = 0;
  $call2 = (__ZNSt3__26__clocEv()|0);
  $1 = (_strtoll_l($__a,$__p2,$__base,$call2)|0);
  $2 = tempRet0;
  $call4 = (___errno_location()|0);
  $3 = HEAP32[$call4>>2]|0;
  $cmp5 = ($3|0)==(0);
  if ($cmp5) {
   $call7 = (___errno_location()|0);
   HEAP32[$call7>>2] = $0;
  }
  $4 = HEAP32[$__p2>>2]|0;
  $cmp8 = ($4|0)==($__a_end|0);
  if ($cmp8) {
   $cmp10 = ($3|0)==(34);
   if ($cmp10) {
    HEAP32[$__err>>2] = 4;
    $5 = ($2|0)>(0);
    $6 = ($1>>>0)>(0);
    $7 = ($2|0)==(0);
    $8 = $7 & $6;
    $9 = $5 | $8;
    $10 = $9 ? -1 : 0;
    $11 = $9 ? 2147483647 : -2147483648;
    $14 = $10;$15 = $11;
   } else {
    $14 = $1;$15 = $2;
   }
  } else {
   HEAP32[$__err>>2] = 4;
   $14 = 0;$15 = 0;
  }
  $12 = $15;$13 = $14;
 }
 tempRet0 = ($12);
 STACKTOP = sp;return ($13|0);
}
function __ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE15__do_get_signedIlEES4_S4_S4_RNS_8ios_baseERjRT_($this,$__b,$__e,$__iob,$__err,$__v) {
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$pre = 0, $$pre$i$i$i = 0, $$pre$i$i$i34 = 0, $$pre$i17$i$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $8 = 0;
 var $9 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__a_end = 0, $__atoms = 0, $__buf = 0, $__cap_$i$i = 0, $__cap_$i$i90 = 0, $__dc = 0, $__einp_$i$i = 0, $__einp_$i$i$i$i = 0, $__einp_$i$i$i$i22 = 0, $__einp_$i$i4$i$i = 0, $__einp_$i$i4$i$i42 = 0, $__g = 0, $__g_end = 0, $__grouping = 0, $__i$0$i$i = 0, $__ninp_$i$i = 0;
 var $__ninp_$i$i$i$i = 0, $__ninp_$i$i$i$i21 = 0, $__ninp_$i$i3$i$i = 0, $__ninp_$i$i3$i$i41 = 0, $__size_$i$i = 0, $__size_$i$i120 = 0, $__size_$i3$i = 0, $__size_$i3$i122 = 0, $__thousands_sep = 0, $add$ptr = 0, $add$ptr18 = 0, $and$i$i = 0, $and$i$i91 = 0, $arrayidx$i$i = 0, $call = 0, $call$i$i$i$i16 = 0, $call$i$i$i$i60 = 0, $call$i$i107 = 0, $call$i$i9$i$i17 = 0, $call$i$i9$i$i62 = 0;
 var $call24 = 0, $call3$i$i = 0, $call3$i$i$i = 0, $call3$i$i$i$i = 0, $call3$i$i$i$i28 = 0, $call3$i$i$i31 = 0, $call3$i$i11$i$i = 0, $call3$i$i11$i$i48 = 0, $call3$i14$i$i = 0, $call3$i14$i$i51 = 0, $call36 = 0, $call4$i$i$i = 0, $call4$i$i$i32 = 0, $call4$i15$i$i = 0, $call4$i15$i$i52 = 0, $cmp = 0, $cmp$i$i$i$i = 0, $cmp$i$i$i$i23 = 0, $cmp$i$i106 = 0, $cmp$i$i111 = 0;
 var $cmp$i$i5$i$i = 0, $cmp$i$i5$i$i43 = 0, $cmp30 = 0, $cmp32 = 0, $cond$i = 0, $cond$i$i = 0, $cond$i$i104 = 0, $cond$i126 = 0, $cond$i67 = 0, $cond$i94 = 0, $conv$i = 0, $conv$i$i = 0, $conv$i$i124 = 0, $ehselector$slot$1 = 0, $exitcond$i$i = 0, $exn$slot$1 = 0, $inc$i$i = 0, $incdec$ptr = 0, $incdec$ptr$i$i = 0, $mul = 0;
 var $or = 0, $phitmp$i = 0, $phitmp$i92 = 0, $retval$0$i$i = 0, $retval$0$i$i$i$i = 0, $retval$0$i$i$i$i30 = 0, $retval$0$i$i13$i$i = 0, $retval$0$i$i13$i$i50 = 0, $retval$sroa$0$0$copyload = 0, $sub$ptr$lhs$cast = 0, $sub$ptr$rhs$cast = 0, $sub$ptr$sub = 0, $tobool = 0, $tobool$i$i = 0, $tobool$i$i$i = 0, $tobool$i$i$i18 = 0, $tobool$i$i$i20 = 0, $tobool$i$i$i99 = 0, $tobool$i$i121 = 0, $tobool$i$i65 = 0;
 var $tobool$i$i89 = 0, $tobool$i2$i$i = 0, $tobool$i2$i$i39 = 0, $vfn$i$i = 0, $vfn$i$i$i$i = 0, $vfn$i$i$i$i26 = 0, $vfn$i$i113 = 0, $vfn$i$i8$i$i = 0, $vfn$i$i8$i$i46 = 0, $vtable$i$i = 0, $vtable$i$i$i$i = 0, $vtable$i$i$i$i25 = 0, $vtable$i$i112 = 0, $vtable$i$i7$i$i = 0, $vtable$i$i7$i$i45 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(224|0);
 $__atoms = sp + 198|0;
 $__thousands_sep = sp + 196|0;
 $__grouping = sp + 184|0;
 $__buf = sp + 172|0;
 $__a_end = sp + 168|0;
 $__g = sp + 8|0;
 $__g_end = sp + 4|0;
 $__dc = sp;
 $call = (__ZNSt3__214__num_get_base10__get_baseERNS_8ios_baseE($__iob)|0);
 __ZNSt3__29__num_getIcE17__stage2_int_prepERNS_8ios_baseEPcRc($__grouping,$__iob,$__atoms,$__thousands_sep);
 ;HEAP32[$__buf>>2]=0|0;HEAP32[$__buf+4>>2]=0|0;HEAP32[$__buf+8>>2]=0|0;
 $__i$0$i$i = 0;
 while(1) {
  $exitcond$i$i = ($__i$0$i$i|0)==(3);
  if ($exitcond$i$i) {
   break;
  }
  $arrayidx$i$i = (($__buf) + ($__i$0$i$i<<2)|0);
  HEAP32[$arrayidx$i$i>>2] = 0;
  $inc$i$i = (($__i$0$i$i) + 1)|0;
  $__i$0$i$i = $inc$i$i;
 }
 $__size_$i$i = ((($__buf)) + 11|0);
 $0 = HEAP8[$__size_$i$i>>0]|0;
 $tobool$i$i = ($0<<24>>24)<(0);
 if ($tobool$i$i) {
  $__cap_$i$i = ((($__buf)) + 8|0);
  $1 = HEAP32[$__cap_$i$i>>2]|0;
  $and$i$i = $1 & 2147483647;
  $phitmp$i = (($and$i$i) + -1)|0;
  $cond$i = $phitmp$i;
 } else {
  $cond$i = 10;
 }
 __THREW__ = 0;
 invoke_viii(377,($__buf|0),($cond$i|0),0);
 $2 = __THREW__; __THREW__ = 0;
 $3 = $2&1;
 if ($3) {
  $30 = ___cxa_find_matching_catch_2()|0;
  $31 = tempRet0;
  $ehselector$slot$1 = $31;$exn$slot$1 = $30;
 } else {
  $4 = HEAP8[$__size_$i$i>>0]|0;
  $tobool$i$i$i18 = ($4<<24>>24)<(0);
  $5 = HEAP32[$__buf>>2]|0;
  $cond$i$i = $tobool$i$i$i18 ? $5 : $__buf;
  HEAP32[$__a_end>>2] = $cond$i$i;
  HEAP32[$__g_end>>2] = $__g;
  HEAP32[$__dc>>2] = 0;
  $__size_$i3$i = ((($__buf)) + 4|0);
  $__cap_$i$i90 = ((($__buf)) + 8|0);
  $$pre = HEAP32[$__b>>2]|0;
  $$pre$i$i$i34 = $$pre;$73 = $$pre;$__a$0 = $cond$i$i;
  L11: while(1) {
   $tobool$i$i$i20 = ($$pre$i$i$i34|0)==(0|0);
   if ($tobool$i$i$i20) {
    $$pre$i$i$i = 0;$59 = 0;$74 = 1;
   } else {
    $__ninp_$i$i$i$i21 = ((($$pre$i$i$i34)) + 12|0);
    $6 = HEAP32[$__ninp_$i$i$i$i21>>2]|0;
    $__einp_$i$i$i$i22 = ((($$pre$i$i$i34)) + 16|0);
    $7 = HEAP32[$__einp_$i$i$i$i22>>2]|0;
    $cmp$i$i$i$i23 = ($6|0)==($7|0);
    if ($cmp$i$i$i$i23) {
     $vtable$i$i$i$i25 = HEAP32[$$pre$i$i$i34>>2]|0;
     $vfn$i$i$i$i26 = ((($vtable$i$i$i$i25)) + 36|0);
     $8 = HEAP32[$vfn$i$i$i$i26>>2]|0;
     __THREW__ = 0;
     $call$i$i$i$i60 = (invoke_ii($8|0,($$pre$i$i$i34|0))|0);
     $9 = __THREW__; __THREW__ = 0;
     $10 = $9&1;
     if ($10) {
      break;
     } else {
      $retval$0$i$i$i$i30 = $call$i$i$i$i60;
     }
    } else {
     $11 = HEAP8[$6>>0]|0;
     $call3$i$i$i$i28 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($11)|0);
     $retval$0$i$i$i$i30 = $call3$i$i$i$i28;
    }
    $call3$i$i$i31 = (__ZNSt3__211char_traitsIcE3eofEv()|0);
    $call4$i$i$i32 = (__ZNSt3__211char_traitsIcE11eq_int_typeEii($retval$0$i$i$i$i30,$call3$i$i$i31)|0);
    if ($call4$i$i$i32) {
     HEAP32[$__b>>2] = 0;
     $$pre$i$i$i = 0;$59 = 0;$74 = 1;
    } else {
     $$pre$i$i$i = $$pre$i$i$i34;$59 = $73;$74 = 0;
    }
   }
   $12 = HEAP32[$__e>>2]|0;
   $tobool$i2$i$i39 = ($12|0)==(0|0);
   do {
    if ($tobool$i2$i$i39) {
     label = 20;
    } else {
     $__ninp_$i$i3$i$i41 = ((($12)) + 12|0);
     $13 = HEAP32[$__ninp_$i$i3$i$i41>>2]|0;
     $__einp_$i$i4$i$i42 = ((($12)) + 16|0);
     $14 = HEAP32[$__einp_$i$i4$i$i42>>2]|0;
     $cmp$i$i5$i$i43 = ($13|0)==($14|0);
     if ($cmp$i$i5$i$i43) {
      $vtable$i$i7$i$i45 = HEAP32[$12>>2]|0;
      $vfn$i$i8$i$i46 = ((($vtable$i$i7$i$i45)) + 36|0);
      $15 = HEAP32[$vfn$i$i8$i$i46>>2]|0;
      __THREW__ = 0;
      $call$i$i9$i$i62 = (invoke_ii($15|0,($12|0))|0);
      $16 = __THREW__; __THREW__ = 0;
      $17 = $16&1;
      if ($17) {
       break L11;
      } else {
       $retval$0$i$i13$i$i50 = $call$i$i9$i$i62;
      }
     } else {
      $18 = HEAP8[$13>>0]|0;
      $call3$i$i11$i$i48 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($18)|0);
      $retval$0$i$i13$i$i50 = $call3$i$i11$i$i48;
     }
     $call3$i14$i$i51 = (__ZNSt3__211char_traitsIcE3eofEv()|0);
     $call4$i15$i$i52 = (__ZNSt3__211char_traitsIcE11eq_int_typeEii($retval$0$i$i13$i$i50,$call3$i14$i$i51)|0);
     if ($call4$i15$i$i52) {
      HEAP32[$__e>>2] = 0;
      label = 20;
      break;
     } else {
      if ($74) {
       $75 = $12;
       break;
      } else {
       $$pre$i17$i$i = $12;$__a$2 = $__a$0;
       label = 37;
       break L11;
      }
     }
    }
   } while(0);
   if ((label|0) == 20) {
    label = 0;
    if ($74) {
     $$pre$i17$i$i = 0;$__a$2 = $__a$0;
     label = 37;
     break;
    } else {
     $75 = 0;
    }
   }
   $19 = HEAP32[$__a_end>>2]|0;
   $20 = HEAP8[$__size_$i$i>>0]|0;
   $tobool$i$i65 = ($20<<24>>24)<(0);
   $21 = HEAP32[$__size_$i3$i>>2]|0;
   $conv$i$i = $20&255;
   $cond$i67 = $tobool$i$i65 ? $21 : $conv$i$i;
   $add$ptr = (($__a$0) + ($cond$i67)|0);
   $cmp = ($19|0)==($add$ptr|0);
   if ($cmp) {
    $mul = $cond$i67 << 1;
    __THREW__ = 0;
    invoke_viii(377,($__buf|0),($mul|0),0);
    $22 = __THREW__; __THREW__ = 0;
    $23 = $22&1;
    if ($23) {
     break;
    }
    $24 = HEAP8[$__size_$i$i>>0]|0;
    $tobool$i$i89 = ($24<<24>>24)<(0);
    if ($tobool$i$i89) {
     $25 = HEAP32[$__cap_$i$i90>>2]|0;
     $and$i$i91 = $25 & 2147483647;
     $phitmp$i92 = (($and$i$i91) + -1)|0;
     $cond$i94 = $phitmp$i92;
    } else {
     $cond$i94 = 10;
    }
    __THREW__ = 0;
    invoke_viii(377,($__buf|0),($cond$i94|0),0);
    $26 = __THREW__; __THREW__ = 0;
    $27 = $26&1;
    if ($27) {
     break;
    }
    $28 = HEAP8[$__size_$i$i>>0]|0;
    $tobool$i$i$i99 = ($28<<24>>24)<(0);
    $29 = HEAP32[$__buf>>2]|0;
    $cond$i$i104 = $tobool$i$i$i99 ? $29 : $__buf;
    $add$ptr18 = (($cond$i$i104) + ($cond$i67)|0);
    HEAP32[$__a_end>>2] = $add$ptr18;
    $__a$1 = $cond$i$i104;
   } else {
    $__a$1 = $__a$0;
   }
   $__ninp_$i$i = ((($$pre$i$i$i)) + 12|0);
   $32 = HEAP32[$__ninp_$i$i>>2]|0;
   $__einp_$i$i = ((($$pre$i$i$i)) + 16|0);
   $33 = HEAP32[$__einp_$i$i>>2]|0;
   $cmp$i$i106 = ($32|0)==($33|0);
   if ($cmp$i$i106) {
    $vtable$i$i = HEAP32[$$pre$i$i$i>>2]|0;
    $vfn$i$i = ((($vtable$i$i)) + 36|0);
    $34 = HEAP32[$vfn$i$i>>2]|0;
    __THREW__ = 0;
    $call$i$i107 = (invoke_ii($34|0,($$pre$i$i$i|0))|0);
    $35 = __THREW__; __THREW__ = 0;
    $36 = $35&1;
    if ($36) {
     break;
    } else {
     $retval$0$i$i = $call$i$i107;
    }
   } else {
    $37 = HEAP8[$32>>0]|0;
    $call3$i$i = (__ZNSt3__211char_traitsIcE11to_int_typeEc($37)|0);
    $retval$0$i$i = $call3$i$i;
   }
   $conv$i = $retval$0$i$i&255;
   $38 = HEAP8[$__thousands_sep>>0]|0;
   __THREW__ = 0;
   $call24 = (invoke_iiiiiiiiiii(391,($conv$i|0),($call|0),($__a$1|0),($__a_end|0),($__dc|0),($38|0),($__grouping|0),($__g|0),($__g_end|0),($__atoms|0))|0);
   $39 = __THREW__; __THREW__ = 0;
   $40 = $39&1;
   if ($40) {
    break;
   }
   $tobool = ($call24|0)==(0);
   if (!($tobool)) {
    $$pre$i17$i$i = $75;$__a$2 = $__a$1;
    label = 37;
    break;
   }
   $41 = HEAP32[$__ninp_$i$i>>2]|0;
   $42 = HEAP32[$__einp_$i$i>>2]|0;
   $cmp$i$i111 = ($41|0)==($42|0);
   if ($cmp$i$i111) {
    $vtable$i$i112 = HEAP32[$$pre$i$i$i>>2]|0;
    $vfn$i$i113 = ((($vtable$i$i112)) + 40|0);
    $43 = HEAP32[$vfn$i$i113>>2]|0;
    __THREW__ = 0;
    (invoke_ii($43|0,($$pre$i$i$i|0))|0);
    $44 = __THREW__; __THREW__ = 0;
    $45 = $44&1;
    if ($45) {
     break;
    } else {
     $$pre$i$i$i34 = $$pre$i$i$i;$73 = $59;$__a$0 = $__a$1;
     continue;
    }
   } else {
    $incdec$ptr$i$i = ((($41)) + 1|0);
    HEAP32[$__ninp_$i$i>>2] = $incdec$ptr$i$i;
    $46 = HEAP8[$41>>0]|0;
    (__ZNSt3__211char_traitsIcE11to_int_typeEc($46)|0);
    $$pre$i$i$i34 = $$pre$i$i$i;$73 = $59;$__a$0 = $__a$1;
    continue;
   }
  }
  L50: do {
   if ((label|0) == 37) {
    $__size_$i$i120 = ((($__grouping)) + 11|0);
    $47 = HEAP8[$__size_$i$i120>>0]|0;
    $tobool$i$i121 = ($47<<24>>24)<(0);
    $__size_$i3$i122 = ((($__grouping)) + 4|0);
    $48 = HEAP32[$__size_$i3$i122>>2]|0;
    $conv$i$i124 = $47&255;
    $cond$i126 = $tobool$i$i121 ? $48 : $conv$i$i124;
    $cmp30 = ($cond$i126|0)==(0);
    if (!($cmp30)) {
     $49 = HEAP32[$__g_end>>2]|0;
     $sub$ptr$lhs$cast = $49;
     $sub$ptr$rhs$cast = $__g;
     $sub$ptr$sub = (($sub$ptr$lhs$cast) - ($sub$ptr$rhs$cast))|0;
     $cmp32 = ($sub$ptr$sub|0)<(160);
     if ($cmp32) {
      $50 = HEAP32[$__dc>>2]|0;
      $incdec$ptr = ((($49)) + 4|0);
      HEAP32[$__g_end>>2] = $incdec$ptr;
      HEAP32[$49>>2] = $50;
     }
    }
    $51 = HEAP32[$__a_end>>2]|0;
    __THREW__ = 0;
    $call36 = (invoke_iiiii(408,($__a$2|0),($51|0),($__err|0),($call|0))|0);
    $52 = __THREW__; __THREW__ = 0;
    $53 = $52&1;
    if (!($53)) {
     HEAP32[$__v>>2] = $call36;
     $54 = HEAP32[$__g_end>>2]|0;
     __THREW__ = 0;
     invoke_viiii(400,($__grouping|0),($__g|0),($54|0),($__err|0));
     $55 = __THREW__; __THREW__ = 0;
     $56 = $55&1;
     if (!($56)) {
      $tobool$i$i$i = ($$pre$i$i$i|0)==(0|0);
      if ($tobool$i$i$i) {
       $76 = 1;
      } else {
       $__ninp_$i$i$i$i = ((($$pre$i$i$i)) + 12|0);
       $57 = HEAP32[$__ninp_$i$i$i$i>>2]|0;
       $__einp_$i$i$i$i = ((($$pre$i$i$i)) + 16|0);
       $58 = HEAP32[$__einp_$i$i$i$i>>2]|0;
       $cmp$i$i$i$i = ($57|0)==($58|0);
       if ($cmp$i$i$i$i) {
        $vtable$i$i$i$i = HEAP32[$59>>2]|0;
        $vfn$i$i$i$i = ((($vtable$i$i$i$i)) + 36|0);
        $60 = HEAP32[$vfn$i$i$i$i>>2]|0;
        __THREW__ = 0;
        $call$i$i$i$i16 = (invoke_ii($60|0,($$pre$i$i$i|0))|0);
        $61 = __THREW__; __THREW__ = 0;
        $62 = $61&1;
        if ($62) {
         break;
        } else {
         $retval$0$i$i$i$i = $call$i$i$i$i16;
        }
       } else {
        $63 = HEAP8[$57>>0]|0;
        $call3$i$i$i$i = (__ZNSt3__211char_traitsIcE11to_int_typeEc($63)|0);
        $retval$0$i$i$i$i = $call3$i$i$i$i;
       }
       $call3$i$i$i = (__ZNSt3__211char_traitsIcE3eofEv()|0);
       $call4$i$i$i = (__ZNSt3__211char_traitsIcE11eq_int_typeEii($retval$0$i$i$i$i,$call3$i$i$i)|0);
       if ($call4$i$i$i) {
        HEAP32[$__b>>2] = 0;
        $76 = 1;
       } else {
        $76 = 0;
       }
      }
      $tobool$i2$i$i = ($$pre$i17$i$i|0)==(0|0);
      do {
       if ($tobool$i2$i$i) {
        label = 54;
       } else {
        $__ninp_$i$i3$i$i = ((($$pre$i17$i$i)) + 12|0);
        $64 = HEAP32[$__ninp_$i$i3$i$i>>2]|0;
        $__einp_$i$i4$i$i = ((($$pre$i17$i$i)) + 16|0);
        $65 = HEAP32[$__einp_$i$i4$i$i>>2]|0;
        $cmp$i$i5$i$i = ($64|0)==($65|0);
        if ($cmp$i$i5$i$i) {
         $vtable$i$i7$i$i = HEAP32[$$pre$i17$i$i>>2]|0;
         $vfn$i$i8$i$i = ((($vtable$i$i7$i$i)) + 36|0);
         $66 = HEAP32[$vfn$i$i8$i$i>>2]|0;
         __THREW__ = 0;
         $call$i$i9$i$i17 = (invoke_ii($66|0,($$pre$i17$i$i|0))|0);
         $67 = __THREW__; __THREW__ = 0;
         $68 = $67&1;
         if ($68) {
          break L50;
         } else {
          $retval$0$i$i13$i$i = $call$i$i9$i$i17;
         }
        } else {
         $69 = HEAP8[$64>>0]|0;
         $call3$i$i11$i$i = (__ZNSt3__211char_traitsIcE11to_int_typeEc($69)|0);
         $retval$0$i$i13$i$i = $call3$i$i11$i$i;
        }
        $call3$i14$i$i = (__ZNSt3__211char_traitsIcE3eofEv()|0);
        $call4$i15$i$i = (__ZNSt3__211char_traitsIcE11eq_int_typeEii($retval$0$i$i13$i$i,$call3$i14$i$i)|0);
        if ($call4$i15$i$i) {
         HEAP32[$__e>>2] = 0;
         label = 54;
         break;
        } else {
         if ($76) {
          break;
         } else {
          label = 56;
          break;
         }
        }
       }
      } while(0);
      if ((label|0) == 54) {
       if ($76) {
        label = 56;
       }
      }
      if ((label|0) == 56) {
       $70 = HEAP32[$__err>>2]|0;
       $or = $70 | 2;
       HEAP32[$__err>>2] = $or;
      }
      $retval$sroa$0$0$copyload = HEAP32[$__b>>2]|0;
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__buf);
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grouping);
      STACKTOP = sp;return ($retval$sroa$0$0$copyload|0);
     }
    }
   }
  } while(0);
  $71 = ___cxa_find_matching_catch_2()|0;
  $72 = tempRet0;
  $ehselector$slot$1 = $72;$exn$slot$1 = $71;
 }
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__buf);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grouping);
 ___resumeException($exn$slot$1|0);
 // unreachable;
 return (0)|0;
}
function __ZNSt3__225__num_get_signed_integralIlEET_PKcS3_Rji($__a,$__a_end,$__err,$__base) {
 $__a = $__a|0;
 $__a_end = $__a_end|0;
 $__err = $__err|0;
 $__base = $__base|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $__p2 = 0, $call = 0, $call1 = 0, $call2 = 0, $call4 = 0, $call7 = 0, $cmp = 0, $cmp10 = 0, $cmp5 = 0, $cmp8 = 0, $retval$0 = 0, $retval$1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $__p2 = sp;
 $cmp = ($__a|0)==($__a_end|0);
 if ($cmp) {
  HEAP32[$__err>>2] = 4;
  $retval$1 = 0;
 } else {
  $call = (___errno_location()|0);
  $0 = HEAP32[$call>>2]|0;
  $call1 = (___errno_location()|0);
  HEAP32[$call1>>2] = 0;
  $call2 = (__ZNSt3__26__clocEv()|0);
  $1 = (_strtoll_l($__a,$__p2,$__base,$call2)|0);
  $2 = tempRet0;
  $call4 = (___errno_location()|0);
  $3 = HEAP32[$call4>>2]|0;
  $cmp5 = ($3|0)==(0);
  if ($cmp5) {
   $call7 = (___errno_location()|0);
   HEAP32[$call7>>2] = $0;
  }
  $4 = HEAP32[$__p2>>2]|0;
  $cmp8 = ($4|0)==($__a_end|0);
  L7: do {
   if ($cmp8) {
    $cmp10 = ($3|0)==(34);
    do {
     if ($cmp10) {
      HEAP32[$__err>>2] = 4;
      $15 = ($2|0)>(0);
      $16 = ($1>>>0)>(0);
      $17 = ($2|0)==(0);
      $18 = $17 & $16;
      $19 = $15 | $18;
      if ($19) {
       $retval$0 = 2147483647;
       break L7;
      }
     } else {
      $5 = ($2|0)<(-1);
      $6 = ($1>>>0)<(2147483648);
      $7 = ($2|0)==(-1);
      $8 = $7 & $6;
      $9 = $5 | $8;
      if ($9) {
       HEAP32[$__err>>2] = 4;
       break;
      }
      $10 = ($2|0)>(0);
      $11 = ($1>>>0)>(2147483647);
      $12 = ($2|0)==(0);
      $13 = $12 & $11;
      $14 = $10 | $13;
      if ($14) {
       HEAP32[$__err>>2] = 4;
       $retval$0 = 2147483647;
       break L7;
      } else {
       $retval$0 = $1;
       break L7;
      }
     }
    } while(0);
    $retval$0 = -2147483648;
   } else {
    HEAP32[$__err>>2] = 4;
    $retval$0 = 0;
   }
  } while(0);
  $retval$1 = $retval$0;
 }
 STACKTOP = sp;return ($retval$1|0);
}
function __ZNSt3__214__scan_keywordINS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEPKNS_12basic_stringIcS3_NS_9allocatorIcEEEENS_5ctypeIcEEEET0_RT_SE_SD_SD_RKT1_Rjb($__b,$__e,$__kb,$__ke,$__ct,$__err,$__case_sensitive) {
 $__b = $__b|0;
 $__e = $__e|0;
 $__kb = $__kb|0;
 $__ke = $__ke|0;
 $__ct = $__ct|0;
 $__err = $__err|0;
 $__case_sensitive = $__case_sensitive|0;
 var $$pre$i$i$i = 0, $$pre$i$i$i98 = 0, $$pre$i17$i$i118 = 0, $$sink77$sink78198$index = 0, $$sink77$sink78198$index5 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $8 = 0, $9 = 0, $__c$0 = 0, $__consume$0$off0 = 0;
 var $__consume$2$off0 = 0, $__einp_$i$i = 0, $__einp_$i$i$i$i = 0, $__einp_$i$i$i$i86 = 0, $__einp_$i$i138 = 0, $__einp_$i$i4$i$i = 0, $__einp_$i$i4$i$i106 = 0, $__indx$0 = 0, $__kb$addr$0 = 0, $__kb$addr$0189 = 0, $__kc$0 = 0, $__ky$0 = 0, $__ky25$0 = 0, $__ky67$0 = 0, $__n_does_match$0 = 0, $__n_does_match$1 = 0, $__n_does_match$2 = 0, $__n_does_match$3 = 0, $__n_does_match$5 = 0, $__n_does_match$6 = 0;
 var $__n_does_match$7 = 0, $__n_might_match$0 = 0, $__n_might_match$1 = 0, $__n_might_match$2 = 0, $__n_might_match$3 = 0, $__n_might_match$5 = 0, $__ninp_$i$i = 0, $__ninp_$i$i$i$i = 0, $__ninp_$i$i$i$i85 = 0, $__ninp_$i$i137 = 0, $__ninp_$i$i3$i$i = 0, $__ninp_$i$i3$i$i105 = 0, $__size_$i$i$i = 0, $__size_$i$i$i$i = 0, $__size_$i$i148 = 0, $__size_$i3$i = 0, $__size_$i3$i$i = 0, $__size_$i3$i150 = 0, $__st$0 = 0, $__st$1 = 0;
 var $__st$2 = 0, $__st$3 = 0, $__stat_hold$sroa$0$0 = 0, $__statbuf = 0, $__status$0 = 0, $add = 0, $add$ptr$i = 0, $add64 = 0, $call$i$i$i$i124 = 0, $call$i$i$i$i81 = 0, $call$i$i129 = 0, $call$i$i9$i$i126 = 0, $call$i$i9$i$i82 = 0, $call$i130 = 0, $call$i133 = 0, $call1 = 0, $call3$i$i = 0, $call3$i$i$i = 0, $call3$i$i$i$i = 0, $call3$i$i$i$i92 = 0;
 var $call3$i$i$i95 = 0, $call3$i$i11$i$i = 0, $call3$i$i11$i$i112 = 0, $call3$i14$i$i = 0, $call3$i14$i$i115 = 0, $call4$i$i$i = 0, $call4$i$i$i96 = 0, $call4$i15$i$i = 0, $call4$i15$i$i116 = 0, $cmp = 0, $cmp$i = 0, $cmp$i$i$i$i = 0, $cmp$i$i$i$i87 = 0, $cmp$i$i127 = 0, $cmp$i$i139 = 0, $cmp$i$i5$i$i = 0, $cmp$i$i5$i$i107 = 0, $cmp101 = 0, $cmp15 = 0, $cmp2 = 0;
 var $cmp27 = 0, $cmp30 = 0, $cmp43 = 0, $cmp46 = 0, $cmp6 = 0, $cmp65 = 0, $cmp69 = 0, $cmp73 = 0, $cmp76 = 0, $cmp98 = 0, $cmptmp$i$i = 0, $cond$i = 0, $cond$i$i = 0, $cond$i$i$i = 0, $cond$i154 = 0, $conv$i = 0, $conv$i$i = 0, $conv$i$i$i = 0, $conv$i$i152 = 0, $dec = 0;
 var $dec48 = 0, $dec78 = 0, $inc = 0, $inc49 = 0, $incdec$ptr = 0, $incdec$ptr$i$i = 0, $incdec$ptr10 = 0, $incdec$ptr105 = 0, $incdec$ptr106 = 0, $incdec$ptr56 = 0, $incdec$ptr57 = 0, $incdec$ptr81 = 0, $incdec$ptr82 = 0, $or = 0, $or110 = 0, $phitmp$i$i$i = 0, $phitmp$i$i$i99 = 0, $retval$0$i$i = 0, $retval$0$i$i$i$i = 0, $retval$0$i$i$i$i94 = 0;
 var $retval$0$i$i13$i$i = 0, $retval$0$i$i13$i$i114 = 0, $sub$ptr$div$i$i = 0, $sub$ptr$lhs$cast$i$i = 0, $sub$ptr$rhs$cast$i$i = 0, $sub$ptr$sub$i$i = 0, $tobool$i$i = 0, $tobool$i$i$i = 0, $tobool$i$i$i$i = 0, $tobool$i$i$i80 = 0, $tobool$i$i$i84 = 0, $tobool$i$i135 = 0, $tobool$i$i149 = 0, $tobool$i$i157 = 0, $tobool$i2$i$i = 0, $tobool$i2$i$i103 = 0, $vfn$i = 0, $vfn$i$i = 0, $vfn$i$i$i$i = 0, $vfn$i$i$i$i90 = 0;
 var $vfn$i$i141 = 0, $vfn$i$i8$i$i = 0, $vfn$i$i8$i$i110 = 0, $vfn$i132 = 0, $vtable$i = 0, $vtable$i$i = 0, $vtable$i$i$i$i = 0, $vtable$i$i$i$i89 = 0, $vtable$i$i140 = 0, $vtable$i$i7$i$i = 0, $vtable$i$i7$i$i109 = 0, $vtable$i131 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(112|0);
 $__statbuf = sp;
 $sub$ptr$lhs$cast$i$i = $__ke;
 $sub$ptr$rhs$cast$i$i = $__kb;
 $sub$ptr$sub$i$i = (($sub$ptr$lhs$cast$i$i) - ($sub$ptr$rhs$cast$i$i))|0;
 $sub$ptr$div$i$i = (($sub$ptr$sub$i$i|0) / 12)&-1;
 $cmp = ($sub$ptr$div$i$i>>>0)>(100);
 do {
  if ($cmp) {
   $call1 = (_malloc($sub$ptr$div$i$i)|0);
   $cmp2 = ($call1|0)==(0|0);
   if ($cmp2) {
    __THREW__ = 0;
    invoke_v(409);
    $0 = __THREW__; __THREW__ = 0;
    $1 = $0&1;
    if ($1) {
     $2 = ___cxa_find_matching_catch_2()|0;
     $3 = tempRet0;
     $$sink77$sink78198$index = $2;$$sink77$sink78198$index5 = $3;
     break;
    }
   }
   $4 = $call1;
   $__stat_hold$sroa$0$0 = $4;$__status$0 = $call1;
   label = 6;
  } else {
   $__stat_hold$sroa$0$0 = 0;$__status$0 = $__statbuf;
   label = 6;
  }
 } while(0);
 if ((label|0) == 6) {
  $__ky$0 = $__kb;$__n_does_match$0 = 0;$__n_might_match$0 = $sub$ptr$div$i$i;$__st$0 = $__status$0;
  while(1) {
   $cmp6 = ($__ky$0|0)==($__ke|0);
   if ($cmp6) {
    break;
   }
   $__size_$i$i$i = ((($__ky$0)) + 11|0);
   $5 = HEAP8[$__size_$i$i$i>>0]|0;
   $tobool$i$i$i = ($5<<24>>24)<(0);
   if ($tobool$i$i$i) {
    $__size_$i3$i$i = ((($__ky$0)) + 4|0);
    $6 = HEAP32[$__size_$i3$i$i>>2]|0;
    $cond$i$i = $6;
   } else {
    $conv$i$i$i = $5&255;
    $cond$i$i = $conv$i$i$i;
   }
   $cmp$i = ($cond$i$i|0)==(0);
   if ($cmp$i) {
    HEAP8[$__st$0>>0] = 2;
    $dec = (($__n_might_match$0) + -1)|0;
    $inc = (($__n_does_match$0) + 1)|0;
    $__n_does_match$1 = $inc;$__n_might_match$1 = $dec;
   } else {
    HEAP8[$__st$0>>0] = 1;
    $__n_does_match$1 = $__n_does_match$0;$__n_might_match$1 = $__n_might_match$0;
   }
   $incdec$ptr = ((($__ky$0)) + 12|0);
   $incdec$ptr10 = ((($__st$0)) + 1|0);
   $__ky$0 = $incdec$ptr;$__n_does_match$0 = $__n_does_match$1;$__n_might_match$0 = $__n_might_match$1;$__st$0 = $incdec$ptr10;
  }
  $__indx$0 = 0;$__n_does_match$2 = $__n_does_match$0;$__n_might_match$2 = $__n_might_match$0;
  L21: while(1) {
   $7 = HEAP32[$__b>>2]|0;
   $tobool$i$i$i80 = ($7|0)==(0|0);
   do {
    if ($tobool$i$i$i80) {
     $21 = 1;
    } else {
     $__ninp_$i$i$i$i = ((($7)) + 12|0);
     $8 = HEAP32[$__ninp_$i$i$i$i>>2]|0;
     $__einp_$i$i$i$i = ((($7)) + 16|0);
     $9 = HEAP32[$__einp_$i$i$i$i>>2]|0;
     $cmp$i$i$i$i = ($8|0)==($9|0);
     if ($cmp$i$i$i$i) {
      $vtable$i$i$i$i = HEAP32[$7>>2]|0;
      $vfn$i$i$i$i = ((($vtable$i$i$i$i)) + 36|0);
      $10 = HEAP32[$vfn$i$i$i$i>>2]|0;
      __THREW__ = 0;
      $call$i$i$i$i81 = (invoke_ii($10|0,($7|0))|0);
      $11 = __THREW__; __THREW__ = 0;
      $12 = $11&1;
      if ($12) {
       break L21;
      } else {
       $retval$0$i$i$i$i = $call$i$i$i$i81;
      }
     } else {
      $13 = HEAP8[$8>>0]|0;
      $call3$i$i$i$i = (__ZNSt3__211char_traitsIcE11to_int_typeEc($13)|0);
      $retval$0$i$i$i$i = $call3$i$i$i$i;
     }
     $call3$i$i$i = (__ZNSt3__211char_traitsIcE3eofEv()|0);
     $call4$i$i$i = (__ZNSt3__211char_traitsIcE11eq_int_typeEii($retval$0$i$i$i$i,$call3$i$i$i)|0);
     if ($call4$i$i$i) {
      HEAP32[$__b>>2] = 0;
      $21 = 1;
      break;
     } else {
      $$pre$i$i$i = HEAP32[$__b>>2]|0;
      $phitmp$i$i$i = ($$pre$i$i$i|0)==(0|0);
      $21 = $phitmp$i$i$i;
      break;
     }
    }
   } while(0);
   $14 = HEAP32[$__e>>2]|0;
   $tobool$i2$i$i = ($14|0)==(0|0);
   if ($tobool$i2$i$i) {
    $$pre$i17$i$i118 = 0;$22 = 1;
   } else {
    $__ninp_$i$i3$i$i = ((($14)) + 12|0);
    $15 = HEAP32[$__ninp_$i$i3$i$i>>2]|0;
    $__einp_$i$i4$i$i = ((($14)) + 16|0);
    $16 = HEAP32[$__einp_$i$i4$i$i>>2]|0;
    $cmp$i$i5$i$i = ($15|0)==($16|0);
    if ($cmp$i$i5$i$i) {
     $vtable$i$i7$i$i = HEAP32[$14>>2]|0;
     $vfn$i$i8$i$i = ((($vtable$i$i7$i$i)) + 36|0);
     $17 = HEAP32[$vfn$i$i8$i$i>>2]|0;
     __THREW__ = 0;
     $call$i$i9$i$i82 = (invoke_ii($17|0,($14|0))|0);
     $18 = __THREW__; __THREW__ = 0;
     $19 = $18&1;
     if ($19) {
      break;
     } else {
      $retval$0$i$i13$i$i = $call$i$i9$i$i82;
     }
    } else {
     $20 = HEAP8[$15>>0]|0;
     $call3$i$i11$i$i = (__ZNSt3__211char_traitsIcE11to_int_typeEc($20)|0);
     $retval$0$i$i13$i$i = $call3$i$i11$i$i;
    }
    $call3$i14$i$i = (__ZNSt3__211char_traitsIcE3eofEv()|0);
    $call4$i15$i$i = (__ZNSt3__211char_traitsIcE11eq_int_typeEii($retval$0$i$i13$i$i,$call3$i14$i$i)|0);
    if ($call4$i15$i$i) {
     HEAP32[$__e>>2] = 0;
     $$pre$i17$i$i118 = 0;$22 = 1;
    } else {
     $$pre$i17$i$i118 = $14;$22 = 0;
    }
   }
   $cmptmp$i$i = $21 ^ $22;
   $cmp15 = ($__n_might_match$2|0)!=(0);
   $23 = $cmp15 & $cmptmp$i$i;
   $24 = HEAP32[$__b>>2]|0;
   if (!($23)) {
    label = 30;
    break;
   }
   $__ninp_$i$i = ((($24)) + 12|0);
   $37 = HEAP32[$__ninp_$i$i>>2]|0;
   $__einp_$i$i = ((($24)) + 16|0);
   $38 = HEAP32[$__einp_$i$i>>2]|0;
   $cmp$i$i127 = ($37|0)==($38|0);
   if ($cmp$i$i127) {
    $vtable$i$i = HEAP32[$24>>2]|0;
    $vfn$i$i = ((($vtable$i$i)) + 36|0);
    $39 = HEAP32[$vfn$i$i>>2]|0;
    __THREW__ = 0;
    $call$i$i129 = (invoke_ii($39|0,($24|0))|0);
    $40 = __THREW__; __THREW__ = 0;
    $41 = $40&1;
    if ($41) {
     break;
    } else {
     $retval$0$i$i = $call$i$i129;
    }
   } else {
    $42 = HEAP8[$37>>0]|0;
    $call3$i$i = (__ZNSt3__211char_traitsIcE11to_int_typeEc($42)|0);
    $retval$0$i$i = $call3$i$i;
   }
   $conv$i = $retval$0$i$i&255;
   if ($__case_sensitive) {
    $__c$0 = $conv$i;
   } else {
    $vtable$i = HEAP32[$__ct>>2]|0;
    $vfn$i = ((($vtable$i)) + 12|0);
    $43 = HEAP32[$vfn$i>>2]|0;
    __THREW__ = 0;
    $call$i130 = (invoke_iii($43|0,($__ct|0),($conv$i|0))|0);
    $44 = __THREW__; __THREW__ = 0;
    $45 = $44&1;
    if ($45) {
     break;
    } else {
     $__c$0 = $call$i130;
    }
   }
   $add = (($__indx$0) + 1)|0;
   $__consume$0$off0 = 0;$__ky25$0 = $__kb;$__n_does_match$3 = $__n_does_match$2;$__n_might_match$3 = $__n_might_match$2;$__st$1 = $__status$0;
   while(1) {
    $cmp27 = ($__ky25$0|0)==($__ke|0);
    if ($cmp27) {
     break;
    }
    $46 = HEAP8[$__st$1>>0]|0;
    $cmp30 = ($46<<24>>24)==(1);
    do {
     if ($cmp30) {
      $__size_$i$i$i$i = ((($__ky25$0)) + 11|0);
      $47 = HEAP8[$__size_$i$i$i$i>>0]|0;
      $tobool$i$i$i$i = ($47<<24>>24)<(0);
      if ($tobool$i$i$i$i) {
       $48 = HEAP32[$__ky25$0>>2]|0;
       $cond$i$i$i = $48;
      } else {
       $cond$i$i$i = $__ky25$0;
      }
      $add$ptr$i = (($cond$i$i$i) + ($__indx$0)|0);
      $49 = HEAP8[$add$ptr$i>>0]|0;
      if ($__case_sensitive) {
       $__kc$0 = $49;
      } else {
       $vtable$i131 = HEAP32[$__ct>>2]|0;
       $vfn$i132 = ((($vtable$i131)) + 12|0);
       $50 = HEAP32[$vfn$i132>>2]|0;
       __THREW__ = 0;
       $call$i133 = (invoke_iii($50|0,($__ct|0),($49|0))|0);
       $51 = __THREW__; __THREW__ = 0;
       $52 = $51&1;
       if ($52) {
        break L21;
       } else {
        $__kc$0 = $call$i133;
       }
      }
      $cmp43 = ($__c$0<<24>>24)==($__kc$0<<24>>24);
      $dec48 = (($__n_might_match$3) + -1)|0;
      if (!($cmp43)) {
       HEAP8[$__st$1>>0] = 0;
       $__consume$2$off0 = $__consume$0$off0;$__n_does_match$5 = $__n_does_match$3;$__n_might_match$5 = $dec48;
       break;
      }
      $53 = HEAP8[$__size_$i$i$i$i>>0]|0;
      $tobool$i$i135 = ($53<<24>>24)<(0);
      if ($tobool$i$i135) {
       $__size_$i3$i = ((($__ky25$0)) + 4|0);
       $54 = HEAP32[$__size_$i3$i>>2]|0;
       $cond$i = $54;
      } else {
       $conv$i$i = $53&255;
       $cond$i = $conv$i$i;
      }
      $cmp46 = ($cond$i|0)==($add|0);
      if ($cmp46) {
       $inc49 = (($__n_does_match$3) + 1)|0;
       HEAP8[$__st$1>>0] = 2;
       $__consume$2$off0 = 1;$__n_does_match$5 = $inc49;$__n_might_match$5 = $dec48;
      } else {
       $__consume$2$off0 = 1;$__n_does_match$5 = $__n_does_match$3;$__n_might_match$5 = $__n_might_match$3;
      }
     } else {
      $__consume$2$off0 = $__consume$0$off0;$__n_does_match$5 = $__n_does_match$3;$__n_might_match$5 = $__n_might_match$3;
     }
    } while(0);
    $incdec$ptr56 = ((($__ky25$0)) + 12|0);
    $incdec$ptr57 = ((($__st$1)) + 1|0);
    $__consume$0$off0 = $__consume$2$off0;$__ky25$0 = $incdec$ptr56;$__n_does_match$3 = $__n_does_match$5;$__n_might_match$3 = $__n_might_match$5;$__st$1 = $incdec$ptr57;
   }
   if (!($__consume$0$off0)) {
    $__indx$0 = $add;$__n_does_match$2 = $__n_does_match$3;$__n_might_match$2 = $__n_might_match$3;
    continue;
   }
   $55 = HEAP32[$__b>>2]|0;
   $__ninp_$i$i137 = ((($55)) + 12|0);
   $56 = HEAP32[$__ninp_$i$i137>>2]|0;
   $__einp_$i$i138 = ((($55)) + 16|0);
   $57 = HEAP32[$__einp_$i$i138>>2]|0;
   $cmp$i$i139 = ($56|0)==($57|0);
   if ($cmp$i$i139) {
    $vtable$i$i140 = HEAP32[$55>>2]|0;
    $vfn$i$i141 = ((($vtable$i$i140)) + 40|0);
    $58 = HEAP32[$vfn$i$i141>>2]|0;
    __THREW__ = 0;
    (invoke_ii($58|0,($55|0))|0);
    $59 = __THREW__; __THREW__ = 0;
    $60 = $59&1;
    if ($60) {
     break;
    }
   } else {
    $incdec$ptr$i$i = ((($56)) + 1|0);
    HEAP32[$__ninp_$i$i137>>2] = $incdec$ptr$i$i;
    $61 = HEAP8[$56>>0]|0;
    (__ZNSt3__211char_traitsIcE11to_int_typeEc($61)|0);
   }
   $add64 = (($__n_does_match$3) + ($__n_might_match$3))|0;
   $cmp65 = ($add64>>>0)>(1);
   if ($cmp65) {
    $__ky67$0 = $__kb;$__n_does_match$6 = $__n_does_match$3;$__st$2 = $__status$0;
   } else {
    $__indx$0 = $add;$__n_does_match$2 = $__n_does_match$3;$__n_might_match$2 = $__n_might_match$3;
    continue;
   }
   while(1) {
    $cmp69 = ($__ky67$0|0)==($__ke|0);
    if ($cmp69) {
     $__indx$0 = $add;$__n_does_match$2 = $__n_does_match$6;$__n_might_match$2 = $__n_might_match$3;
     continue L21;
    }
    $62 = HEAP8[$__st$2>>0]|0;
    $cmp73 = ($62<<24>>24)==(2);
    if ($cmp73) {
     $__size_$i$i148 = ((($__ky67$0)) + 11|0);
     $63 = HEAP8[$__size_$i$i148>>0]|0;
     $tobool$i$i149 = ($63<<24>>24)<(0);
     if ($tobool$i$i149) {
      $__size_$i3$i150 = ((($__ky67$0)) + 4|0);
      $64 = HEAP32[$__size_$i3$i150>>2]|0;
      $cond$i154 = $64;
     } else {
      $conv$i$i152 = $63&255;
      $cond$i154 = $conv$i$i152;
     }
     $cmp76 = ($cond$i154|0)==($add|0);
     if ($cmp76) {
      $__n_does_match$7 = $__n_does_match$6;
     } else {
      $dec78 = (($__n_does_match$6) + -1)|0;
      HEAP8[$__st$2>>0] = 0;
      $__n_does_match$7 = $dec78;
     }
    } else {
     $__n_does_match$7 = $__n_does_match$6;
    }
    $incdec$ptr81 = ((($__ky67$0)) + 12|0);
    $incdec$ptr82 = ((($__st$2)) + 1|0);
    $__ky67$0 = $incdec$ptr81;$__n_does_match$6 = $__n_does_match$7;$__st$2 = $incdec$ptr82;
   }
  }
  L87: do {
   if ((label|0) == 30) {
    $tobool$i$i$i84 = ($24|0)==(0|0);
    do {
     if ($tobool$i$i$i84) {
      $72 = 1;
     } else {
      $__ninp_$i$i$i$i85 = ((($24)) + 12|0);
      $25 = HEAP32[$__ninp_$i$i$i$i85>>2]|0;
      $__einp_$i$i$i$i86 = ((($24)) + 16|0);
      $26 = HEAP32[$__einp_$i$i$i$i86>>2]|0;
      $cmp$i$i$i$i87 = ($25|0)==($26|0);
      if ($cmp$i$i$i$i87) {
       $vtable$i$i$i$i89 = HEAP32[$24>>2]|0;
       $vfn$i$i$i$i90 = ((($vtable$i$i$i$i89)) + 36|0);
       $27 = HEAP32[$vfn$i$i$i$i90>>2]|0;
       __THREW__ = 0;
       $call$i$i$i$i124 = (invoke_ii($27|0,($24|0))|0);
       $28 = __THREW__; __THREW__ = 0;
       $29 = $28&1;
       if ($29) {
        break L87;
       } else {
        $retval$0$i$i$i$i94 = $call$i$i$i$i124;
       }
      } else {
       $30 = HEAP8[$25>>0]|0;
       $call3$i$i$i$i92 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($30)|0);
       $retval$0$i$i$i$i94 = $call3$i$i$i$i92;
      }
      $call3$i$i$i95 = (__ZNSt3__211char_traitsIcE3eofEv()|0);
      $call4$i$i$i96 = (__ZNSt3__211char_traitsIcE11eq_int_typeEii($retval$0$i$i$i$i94,$call3$i$i$i95)|0);
      if ($call4$i$i$i96) {
       HEAP32[$__b>>2] = 0;
       $72 = 1;
       break;
      } else {
       $$pre$i$i$i98 = HEAP32[$__b>>2]|0;
       $phitmp$i$i$i99 = ($$pre$i$i$i98|0)==(0|0);
       $72 = $phitmp$i$i$i99;
       break;
      }
     }
    } while(0);
    $tobool$i2$i$i103 = ($$pre$i17$i$i118|0)==(0|0);
    do {
     if ($tobool$i2$i$i103) {
      label = 77;
     } else {
      $__ninp_$i$i3$i$i105 = ((($$pre$i17$i$i118)) + 12|0);
      $31 = HEAP32[$__ninp_$i$i3$i$i105>>2]|0;
      $__einp_$i$i4$i$i106 = ((($$pre$i17$i$i118)) + 16|0);
      $32 = HEAP32[$__einp_$i$i4$i$i106>>2]|0;
      $cmp$i$i5$i$i107 = ($31|0)==($32|0);
      if ($cmp$i$i5$i$i107) {
       $vtable$i$i7$i$i109 = HEAP32[$$pre$i17$i$i118>>2]|0;
       $vfn$i$i8$i$i110 = ((($vtable$i$i7$i$i109)) + 36|0);
       $33 = HEAP32[$vfn$i$i8$i$i110>>2]|0;
       __THREW__ = 0;
       $call$i$i9$i$i126 = (invoke_ii($33|0,($$pre$i17$i$i118|0))|0);
       $34 = __THREW__; __THREW__ = 0;
       $35 = $34&1;
       if ($35) {
        break L87;
       } else {
        $retval$0$i$i13$i$i114 = $call$i$i9$i$i126;
       }
      } else {
       $36 = HEAP8[$31>>0]|0;
       $call3$i$i11$i$i112 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($36)|0);
       $retval$0$i$i13$i$i114 = $call3$i$i11$i$i112;
      }
      $call3$i14$i$i115 = (__ZNSt3__211char_traitsIcE3eofEv()|0);
      $call4$i15$i$i116 = (__ZNSt3__211char_traitsIcE11eq_int_typeEii($retval$0$i$i13$i$i114,$call3$i14$i$i115)|0);
      if ($call4$i15$i$i116) {
       HEAP32[$__e>>2] = 0;
       label = 77;
       break;
      } else {
       if ($72) {
        $__kb$addr$0 = $__kb;$__st$3 = $__status$0;
        break;
       } else {
        label = 79;
        break;
       }
      }
     }
    } while(0);
    if ((label|0) == 77) {
     if ($72) {
      label = 79;
     } else {
      $__kb$addr$0 = $__kb;$__st$3 = $__status$0;
     }
    }
    if ((label|0) == 79) {
     $65 = HEAP32[$__err>>2]|0;
     $or = $65 | 2;
     HEAP32[$__err>>2] = $or;
     $__kb$addr$0 = $__kb;$__st$3 = $__status$0;
    }
    while(1) {
     $cmp98 = ($__kb$addr$0|0)==($__ke|0);
     if ($cmp98) {
      label = 83;
      break;
     }
     $66 = HEAP8[$__st$3>>0]|0;
     $cmp101 = ($66<<24>>24)==(2);
     if ($cmp101) {
      $__kb$addr$0189 = $__kb$addr$0;
      break;
     }
     $incdec$ptr105 = ((($__kb$addr$0)) + 12|0);
     $incdec$ptr106 = ((($__st$3)) + 1|0);
     $__kb$addr$0 = $incdec$ptr105;$__st$3 = $incdec$ptr106;
    }
    if ((label|0) == 83) {
     $67 = HEAP32[$__err>>2]|0;
     $or110 = $67 | 4;
     HEAP32[$__err>>2] = $or110;
     $__kb$addr$0189 = $__ke;
    }
    $tobool$i$i157 = ($__stat_hold$sroa$0$0|0)==(0);
    if (!($tobool$i$i157)) {
     $68 = $__stat_hold$sroa$0$0;
     _free($68);
    }
    STACKTOP = sp;return ($__kb$addr$0189|0);
   }
  } while(0);
  $69 = ___cxa_find_matching_catch_2()|0;
  $70 = tempRet0;
  $tobool$i$i = ($__stat_hold$sroa$0$0|0)==(0);
  if ($tobool$i$i) {
   $$sink77$sink78198$index = $69;$$sink77$sink78198$index5 = $70;
  } else {
   $71 = $__stat_hold$sroa$0$0;
   _free($71);
   $$sink77$sink78198$index = $69;$$sink77$sink78198$index5 = $70;
  }
 }
 ___resumeException($$sink77$sink78198$index|0);
 // unreachable;
 return (0)|0;
}
function __ZNSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__26locale5facetD2Ev($this);
 return;
}
function __ZNSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__26locale5facetD2Ev($this);
 __ZdlPv($this);
 return;
}
function __ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRb($this,$__b,$__e,$__iob,$__err,$__v) {
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__fmtflags_$i = 0, $__lv = 0, $__names = 0, $add$ptr = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $agg$tmp15 = 0, $agg$tmp15$byval_copy = 0, $agg$tmp2 = 0, $agg$tmp2$byval_copy = 0, $and = 0, $arraydestroy$done25 = 0;
 var $arraydestroy$done31 = 0, $arraydestroy$element24 = 0, $arraydestroy$element30 = 0, $arraydestroy$elementPast23 = 0, $arraydestroy$elementPast29 = 0, $arrayinit$element$ptr = 0, $call$i18 = 0, $call$i19 = 0, $call19 = 0, $call3 = 0, $cmp = 0, $cmp21 = 0, $ehselector$slot$2 = 0, $exn$slot$2 = 0, $frombool = 0, $ref$tmp5 = 0, $ref$tmp7 = 0, $retval$sroa$0$0 = 0, $retval$sroa$0$0$copyload = 0, $retval$sroa$0$0$copyload17 = 0;
 var $vfn = 0, $vfn$i = 0, $vfn$i21 = 0, $vtable = 0, $vtable$i = 0, $vtable$i20 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $agg$tmp15$byval_copy = sp + 60|0;
 $agg$tmp2$byval_copy = sp + 56|0;
 $agg$tmp$byval_copy = sp + 52|0;
 $__lv = sp + 48|0;
 $agg$tmp = sp + 44|0;
 $agg$tmp2 = sp + 40|0;
 $ref$tmp5 = sp + 36|0;
 $ref$tmp7 = sp + 32|0;
 $__names = sp + 8|0;
 $agg$tmp15 = sp;
 $__fmtflags_$i = ((($__iob)) + 4|0);
 $0 = HEAP32[$__fmtflags_$i>>2]|0;
 $and = $0 & 1;
 $cmp = ($and|0)==(0);
 L1: do {
  if ($cmp) {
   HEAP32[$__lv>>2] = -1;
   $vtable = HEAP32[$this>>2]|0;
   $vfn = ((($vtable)) + 16|0);
   $1 = HEAP32[$vfn>>2]|0;
   $2 = HEAP32[$__b>>2]|0;
   HEAP32[$agg$tmp>>2] = $2;
   $3 = HEAP32[$__e>>2]|0;
   HEAP32[$agg$tmp2>>2] = $3;
   ;HEAP32[$agg$tmp$byval_copy>>2]=HEAP32[$agg$tmp>>2]|0;
   ;HEAP32[$agg$tmp2$byval_copy>>2]=HEAP32[$agg$tmp2>>2]|0;
   $call3 = (FUNCTION_TABLE_iiiiiii[$1 & 511]($this,$agg$tmp$byval_copy,$agg$tmp2$byval_copy,$__iob,$__err,$__lv)|0);
   HEAP32[$__b>>2] = $call3;
   $4 = HEAP32[$__lv>>2]|0;
   switch ($4|0) {
   case 0:  {
    HEAP8[$__v>>0] = 0;
    break;
   }
   case 1:  {
    HEAP8[$__v>>0] = 1;
    break;
   }
   default: {
    HEAP8[$__v>>0] = 1;
    HEAP32[$__err>>2] = 4;
   }
   }
   $retval$sroa$0$0$copyload = HEAP32[$__b>>2]|0;
   $retval$sroa$0$0 = $retval$sroa$0$0$copyload;
  } else {
   __ZNKSt3__28ios_base6getlocEv($ref$tmp5,$__iob);
   __THREW__ = 0;
   $call$i18 = (invoke_iii(380,($ref$tmp5|0),(20128|0))|0);
   $5 = __THREW__; __THREW__ = 0;
   $6 = $5&1;
   do {
    if ($6) {
     $20 = ___cxa_find_matching_catch_2()|0;
     $21 = tempRet0;
     __ZNSt3__26localeD2Ev($ref$tmp5);
     $ehselector$slot$2 = $21;$exn$slot$2 = $20;
    } else {
     __ZNSt3__26localeD2Ev($ref$tmp5);
     __ZNKSt3__28ios_base6getlocEv($ref$tmp7,$__iob);
     __THREW__ = 0;
     $call$i19 = (invoke_iii(380,($ref$tmp7|0),(20136|0))|0);
     $7 = __THREW__; __THREW__ = 0;
     $8 = $7&1;
     if ($8) {
      $22 = ___cxa_find_matching_catch_2()|0;
      $23 = tempRet0;
      __ZNSt3__26localeD2Ev($ref$tmp7);
      $ehselector$slot$2 = $23;$exn$slot$2 = $22;
      break;
     }
     __ZNSt3__26localeD2Ev($ref$tmp7);
     $vtable$i = HEAP32[$call$i19>>2]|0;
     $vfn$i = ((($vtable$i)) + 24|0);
     $9 = HEAP32[$vfn$i>>2]|0;
     __THREW__ = 0;
     invoke_vii($9|0,($__names|0),($call$i19|0));
     $10 = __THREW__; __THREW__ = 0;
     $11 = $10&1;
     if ($11) {
      $12 = ___cxa_find_matching_catch_2()|0;
      $13 = tempRet0;
      $ehselector$slot$2 = $13;$exn$slot$2 = $12;
      break;
     }
     $arrayinit$element$ptr = ((($__names)) + 12|0);
     $vtable$i20 = HEAP32[$call$i19>>2]|0;
     $vfn$i21 = ((($vtable$i20)) + 28|0);
     $14 = HEAP32[$vfn$i21>>2]|0;
     __THREW__ = 0;
     invoke_vii($14|0,($arrayinit$element$ptr|0),($call$i19|0));
     $15 = __THREW__; __THREW__ = 0;
     $16 = $15&1;
     if ($16) {
      $26 = ___cxa_find_matching_catch_2()|0;
      $27 = tempRet0;
      __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($__names);
      $ehselector$slot$2 = $27;$exn$slot$2 = $26;
      break;
     }
     $17 = HEAP32[$__e>>2]|0;
     HEAP32[$agg$tmp15>>2] = $17;
     $add$ptr = ((($__names)) + 24|0);
     __THREW__ = 0;
     ;HEAP32[$agg$tmp15$byval_copy>>2]=HEAP32[$agg$tmp15>>2]|0;
     $call19 = (invoke_iiiiiiii(410,($__b|0),($agg$tmp15$byval_copy|0),($__names|0),($add$ptr|0),($call$i18|0),($__err|0),1)|0);
     $18 = __THREW__; __THREW__ = 0;
     $19 = $18&1;
     if ($19) {
      $24 = ___cxa_find_matching_catch_2()|0;
      $25 = tempRet0;
      $arraydestroy$elementPast29 = $add$ptr;
      while(1) {
       $arraydestroy$element30 = ((($arraydestroy$elementPast29)) + -12|0);
       __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($arraydestroy$element30);
       $arraydestroy$done31 = ($arraydestroy$element30|0)==($__names|0);
       if ($arraydestroy$done31) {
        break;
       } else {
        $arraydestroy$elementPast29 = $arraydestroy$element30;
       }
      }
      $ehselector$slot$2 = $25;$exn$slot$2 = $24;
      break;
     } else {
      $cmp21 = ($call19|0)==($__names|0);
      $frombool = $cmp21&1;
      HEAP8[$__v>>0] = $frombool;
      $retval$sroa$0$0$copyload17 = HEAP32[$__b>>2]|0;
      $arraydestroy$elementPast23 = $add$ptr;
      while(1) {
       $arraydestroy$element24 = ((($arraydestroy$elementPast23)) + -12|0);
       __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($arraydestroy$element24);
       $arraydestroy$done25 = ($arraydestroy$element24|0)==($__names|0);
       if ($arraydestroy$done25) {
        break;
       } else {
        $arraydestroy$elementPast23 = $arraydestroy$element24;
       }
      }
      $retval$sroa$0$0 = $retval$sroa$0$0$copyload17;
      break L1;
     }
    }
   } while(0);
   ___resumeException($exn$slot$2|0);
   // unreachable;
  }
 } while(0);
 STACKTOP = sp;return ($retval$sroa$0$0|0);
}
function __ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRl($this,$__b,$__e,$__iob,$__err,$__v) {
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $0 = 0, $1 = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $agg$tmp2 = 0, $agg$tmp2$byval_copy = 0, $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $agg$tmp2$byval_copy = sp + 12|0;
 $agg$tmp$byval_copy = sp + 8|0;
 $agg$tmp = sp + 4|0;
 $agg$tmp2 = sp;
 $0 = HEAP32[$__b>>2]|0;
 HEAP32[$agg$tmp>>2] = $0;
 $1 = HEAP32[$__e>>2]|0;
 HEAP32[$agg$tmp2>>2] = $1;
 ;HEAP32[$agg$tmp$byval_copy>>2]=HEAP32[$agg$tmp>>2]|0;
 ;HEAP32[$agg$tmp2$byval_copy>>2]=HEAP32[$agg$tmp2>>2]|0;
 $call = (__ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE15__do_get_signedIlEES4_S4_S4_RNS_8ios_baseERjRT_($this,$agg$tmp$byval_copy,$agg$tmp2$byval_copy,$__iob,$__err,$__v)|0);
 STACKTOP = sp;return ($call|0);
}
function __ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRx($this,$__b,$__e,$__iob,$__err,$__v) {
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $0 = 0, $1 = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $agg$tmp2 = 0, $agg$tmp2$byval_copy = 0, $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $agg$tmp2$byval_copy = sp + 12|0;
 $agg$tmp$byval_copy = sp + 8|0;
 $agg$tmp = sp + 4|0;
 $agg$tmp2 = sp;
 $0 = HEAP32[$__b>>2]|0;
 HEAP32[$agg$tmp>>2] = $0;
 $1 = HEAP32[$__e>>2]|0;
 HEAP32[$agg$tmp2>>2] = $1;
 ;HEAP32[$agg$tmp$byval_copy>>2]=HEAP32[$agg$tmp>>2]|0;
 ;HEAP32[$agg$tmp2$byval_copy>>2]=HEAP32[$agg$tmp2>>2]|0;
 $call = (__ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE15__do_get_signedIxEES4_S4_S4_RNS_8ios_baseERjRT_($this,$agg$tmp$byval_copy,$agg$tmp2$byval_copy,$__iob,$__err,$__v)|0);
 STACKTOP = sp;return ($call|0);
}
function __ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRt($this,$__b,$__e,$__iob,$__err,$__v) {
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $0 = 0, $1 = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $agg$tmp2 = 0, $agg$tmp2$byval_copy = 0, $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $agg$tmp2$byval_copy = sp + 12|0;
 $agg$tmp$byval_copy = sp + 8|0;
 $agg$tmp = sp + 4|0;
 $agg$tmp2 = sp;
 $0 = HEAP32[$__b>>2]|0;
 HEAP32[$agg$tmp>>2] = $0;
 $1 = HEAP32[$__e>>2]|0;
 HEAP32[$agg$tmp2>>2] = $1;
 ;HEAP32[$agg$tmp$byval_copy>>2]=HEAP32[$agg$tmp>>2]|0;
 ;HEAP32[$agg$tmp2$byval_copy>>2]=HEAP32[$agg$tmp2>>2]|0;
 $call = (__ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__do_get_unsignedItEES4_S4_S4_RNS_8ios_baseERjRT_($this,$agg$tmp$byval_copy,$agg$tmp2$byval_copy,$__iob,$__err,$__v)|0);
 STACKTOP = sp;return ($call|0);
}
function __ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjS8_($this,$__b,$__e,$__iob,$__err,$__v) {
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $0 = 0, $1 = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $agg$tmp2 = 0, $agg$tmp2$byval_copy = 0, $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $agg$tmp2$byval_copy = sp + 12|0;
 $agg$tmp$byval_copy = sp + 8|0;
 $agg$tmp = sp + 4|0;
 $agg$tmp2 = sp;
 $0 = HEAP32[$__b>>2]|0;
 HEAP32[$agg$tmp>>2] = $0;
 $1 = HEAP32[$__e>>2]|0;
 HEAP32[$agg$tmp2>>2] = $1;
 ;HEAP32[$agg$tmp$byval_copy>>2]=HEAP32[$agg$tmp>>2]|0;
 ;HEAP32[$agg$tmp2$byval_copy>>2]=HEAP32[$agg$tmp2>>2]|0;
 $call = (__ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__do_get_unsignedIjEES4_S4_S4_RNS_8ios_baseERjRT_($this,$agg$tmp$byval_copy,$agg$tmp2$byval_copy,$__iob,$__err,$__v)|0);
 STACKTOP = sp;return ($call|0);
}
function __ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRm($this,$__b,$__e,$__iob,$__err,$__v) {
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $0 = 0, $1 = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $agg$tmp2 = 0, $agg$tmp2$byval_copy = 0, $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $agg$tmp2$byval_copy = sp + 12|0;
 $agg$tmp$byval_copy = sp + 8|0;
 $agg$tmp = sp + 4|0;
 $agg$tmp2 = sp;
 $0 = HEAP32[$__b>>2]|0;
 HEAP32[$agg$tmp>>2] = $0;
 $1 = HEAP32[$__e>>2]|0;
 HEAP32[$agg$tmp2>>2] = $1;
 ;HEAP32[$agg$tmp$byval_copy>>2]=HEAP32[$agg$tmp>>2]|0;
 ;HEAP32[$agg$tmp2$byval_copy>>2]=HEAP32[$agg$tmp2>>2]|0;
 $call = (__ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__do_get_unsignedImEES4_S4_S4_RNS_8ios_baseERjRT_($this,$agg$tmp$byval_copy,$agg$tmp2$byval_copy,$__iob,$__err,$__v)|0);
 STACKTOP = sp;return ($call|0);
}
function __ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRy($this,$__b,$__e,$__iob,$__err,$__v) {
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $0 = 0, $1 = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $agg$tmp2 = 0, $agg$tmp2$byval_copy = 0, $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $agg$tmp2$byval_copy = sp + 12|0;
 $agg$tmp$byval_copy = sp + 8|0;
 $agg$tmp = sp + 4|0;
 $agg$tmp2 = sp;
 $0 = HEAP32[$__b>>2]|0;
 HEAP32[$agg$tmp>>2] = $0;
 $1 = HEAP32[$__e>>2]|0;
 HEAP32[$agg$tmp2>>2] = $1;
 ;HEAP32[$agg$tmp$byval_copy>>2]=HEAP32[$agg$tmp>>2]|0;
 ;HEAP32[$agg$tmp2$byval_copy>>2]=HEAP32[$agg$tmp2>>2]|0;
 $call = (__ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__do_get_unsignedIyEES4_S4_S4_RNS_8ios_baseERjRT_($this,$agg$tmp$byval_copy,$agg$tmp2$byval_copy,$__iob,$__err,$__v)|0);
 STACKTOP = sp;return ($call|0);
}
function __ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRf($this,$__b,$__e,$__iob,$__err,$__v) {
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $0 = 0, $1 = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $agg$tmp2 = 0, $agg$tmp2$byval_copy = 0, $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $agg$tmp2$byval_copy = sp + 12|0;
 $agg$tmp$byval_copy = sp + 8|0;
 $agg$tmp = sp + 4|0;
 $agg$tmp2 = sp;
 $0 = HEAP32[$__b>>2]|0;
 HEAP32[$agg$tmp>>2] = $0;
 $1 = HEAP32[$__e>>2]|0;
 HEAP32[$agg$tmp2>>2] = $1;
 ;HEAP32[$agg$tmp$byval_copy>>2]=HEAP32[$agg$tmp>>2]|0;
 ;HEAP32[$agg$tmp2$byval_copy>>2]=HEAP32[$agg$tmp2>>2]|0;
 $call = (__ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE23__do_get_floating_pointIfEES4_S4_S4_RNS_8ios_baseERjRT_($this,$agg$tmp$byval_copy,$agg$tmp2$byval_copy,$__iob,$__err,$__v)|0);
 STACKTOP = sp;return ($call|0);
}
function __ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRd($this,$__b,$__e,$__iob,$__err,$__v) {
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $0 = 0, $1 = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $agg$tmp2 = 0, $agg$tmp2$byval_copy = 0, $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $agg$tmp2$byval_copy = sp + 12|0;
 $agg$tmp$byval_copy = sp + 8|0;
 $agg$tmp = sp + 4|0;
 $agg$tmp2 = sp;
 $0 = HEAP32[$__b>>2]|0;
 HEAP32[$agg$tmp>>2] = $0;
 $1 = HEAP32[$__e>>2]|0;
 HEAP32[$agg$tmp2>>2] = $1;
 ;HEAP32[$agg$tmp$byval_copy>>2]=HEAP32[$agg$tmp>>2]|0;
 ;HEAP32[$agg$tmp2$byval_copy>>2]=HEAP32[$agg$tmp2>>2]|0;
 $call = (__ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE23__do_get_floating_pointIdEES4_S4_S4_RNS_8ios_baseERjRT_($this,$agg$tmp$byval_copy,$agg$tmp2$byval_copy,$__iob,$__err,$__v)|0);
 STACKTOP = sp;return ($call|0);
}
function __ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRe($this,$__b,$__e,$__iob,$__err,$__v) {
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $0 = 0, $1 = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $agg$tmp2 = 0, $agg$tmp2$byval_copy = 0, $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $agg$tmp2$byval_copy = sp + 12|0;
 $agg$tmp$byval_copy = sp + 8|0;
 $agg$tmp = sp + 4|0;
 $agg$tmp2 = sp;
 $0 = HEAP32[$__b>>2]|0;
 HEAP32[$agg$tmp>>2] = $0;
 $1 = HEAP32[$__e>>2]|0;
 HEAP32[$agg$tmp2>>2] = $1;
 ;HEAP32[$agg$tmp$byval_copy>>2]=HEAP32[$agg$tmp>>2]|0;
 ;HEAP32[$agg$tmp2$byval_copy>>2]=HEAP32[$agg$tmp2>>2]|0;
 $call = (__ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE23__do_get_floating_pointIeEES4_S4_S4_RNS_8ios_baseERjRT_($this,$agg$tmp$byval_copy,$agg$tmp2$byval_copy,$__iob,$__err,$__v)|0);
 STACKTOP = sp;return ($call|0);
}
function __ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRPv($this,$__b,$__e,$__iob,$__err,$__v) {
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$pre = 0, $$pre$i$i$i = 0, $$pre$i$i$i43 = 0, $$pre$i17$i$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $9 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__a_end = 0, $__atoms = 0, $__buf = 0, $__cap_$i$i = 0, $__cap_$i$i99 = 0, $__dc = 0, $__einp_$i$i = 0;
 var $__einp_$i$i$i$i = 0, $__einp_$i$i$i$i31 = 0, $__einp_$i$i4$i$i = 0, $__einp_$i$i4$i$i51 = 0, $__g = 0, $__g_end = 0, $__grouping = 0, $__i$0$i$i = 0, $__i$0$i$i20 = 0, $__ninp_$i$i = 0, $__ninp_$i$i$i$i = 0, $__ninp_$i$i$i$i30 = 0, $__ninp_$i$i3$i$i = 0, $__ninp_$i$i3$i$i50 = 0, $__size_$i$i = 0, $__size_$i3$i = 0, $add$ptr = 0, $add$ptr24 = 0, $and$i$i = 0, $and$i$i100 = 0;
 var $arrayidx$i$i = 0, $arrayidx$i$i23 = 0, $call$i$i$i$i15 = 0, $call$i$i$i$i69 = 0, $call$i$i116 = 0, $call$i$i9$i$i16 = 0, $call$i$i9$i$i71 = 0, $call$i17 = 0, $call3$i$i = 0, $call3$i$i$i = 0, $call3$i$i$i$i = 0, $call3$i$i$i$i37 = 0, $call3$i$i$i40 = 0, $call3$i$i11$i$i = 0, $call3$i$i11$i$i57 = 0, $call3$i14$i$i = 0, $call3$i14$i$i60 = 0, $call31 = 0, $call39 = 0, $call4$i$i$i = 0;
 var $call4$i$i$i41 = 0, $call4$i15$i$i = 0, $call4$i15$i$i61 = 0, $call41 = 0, $cmp = 0, $cmp$i$i$i$i = 0, $cmp$i$i$i$i32 = 0, $cmp$i$i115 = 0, $cmp$i$i120 = 0, $cmp$i$i5$i$i = 0, $cmp$i$i5$i$i52 = 0, $cmp42 = 0, $cond$i = 0, $cond$i$i = 0, $cond$i$i$i = 0, $cond$i$i113 = 0, $cond$i103 = 0, $cond$i76 = 0, $conv$i$i = 0, $ehselector$slot$0 = 0;
 var $ehselector$slot$2 = 0, $ehselector$slot$3 = 0, $exitcond$i$i = 0, $exitcond$i$i21 = 0, $exn$slot$0 = 0, $exn$slot$2 = 0, $exn$slot$3 = 0, $inc$i$i = 0, $inc$i$i24 = 0, $incdec$ptr$i$i = 0, $mul = 0, $or = 0, $phitmp$i = 0, $phitmp$i101 = 0, $ref$tmp = 0, $retval$0$i$i = 0, $retval$0$i$i$i$i = 0, $retval$0$i$i$i$i39 = 0, $retval$0$i$i13$i$i = 0, $retval$0$i$i13$i$i59 = 0;
 var $retval$sroa$0$0$copyload = 0, $sub$ptr$rhs$cast = 0, $sub$ptr$sub = 0, $tobool = 0, $tobool$i$i = 0, $tobool$i$i$i = 0, $tobool$i$i$i$i = 0, $tobool$i$i$i108 = 0, $tobool$i$i$i27 = 0, $tobool$i$i$i29 = 0, $tobool$i$i74 = 0, $tobool$i$i98 = 0, $tobool$i2$i$i = 0, $tobool$i2$i$i48 = 0, $vararg_buffer = 0, $vfn$i = 0, $vfn$i$i = 0, $vfn$i$i$i$i = 0, $vfn$i$i$i$i35 = 0, $vfn$i$i122 = 0;
 var $vfn$i$i8$i$i = 0, $vfn$i$i8$i$i55 = 0, $vtable$i = 0, $vtable$i$i = 0, $vtable$i$i$i$i = 0, $vtable$i$i$i$i34 = 0, $vtable$i$i121 = 0, $vtable$i$i7$i$i = 0, $vtable$i$i7$i$i54 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 320|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(320|0);
 $vararg_buffer = sp;
 $__atoms = sp + 208|0;
 $__grouping = sp + 196|0;
 $ref$tmp = sp + 192|0;
 $__buf = sp + 180|0;
 $__a_end = sp + 176|0;
 $__g = sp + 16|0;
 $__g_end = sp + 8|0;
 $__dc = sp + 4|0;
 ;HEAP32[$__grouping>>2]=0|0;HEAP32[$__grouping+4>>2]=0|0;HEAP32[$__grouping+8>>2]=0|0;
 $__i$0$i$i = 0;
 while(1) {
  $exitcond$i$i = ($__i$0$i$i|0)==(3);
  if ($exitcond$i$i) {
   break;
  }
  $arrayidx$i$i = (($__grouping) + ($__i$0$i$i<<2)|0);
  HEAP32[$arrayidx$i$i>>2] = 0;
  $inc$i$i = (($__i$0$i$i) + 1)|0;
  $__i$0$i$i = $inc$i$i;
 }
 __THREW__ = 0;
 invoke_vii(379,($ref$tmp|0),($__iob|0));
 $0 = __THREW__; __THREW__ = 0;
 $1 = $0&1;
 do {
  if ($1) {
   $37 = ___cxa_find_matching_catch_2()|0;
   $38 = tempRet0;
   $ehselector$slot$0 = $38;$exn$slot$0 = $37;
   label = 36;
  } else {
   __THREW__ = 0;
   $call$i17 = (invoke_iii(380,($ref$tmp|0),(20128|0))|0);
   $2 = __THREW__; __THREW__ = 0;
   $3 = $2&1;
   if (!($3)) {
    $vtable$i = HEAP32[$call$i17>>2]|0;
    $vfn$i = ((($vtable$i)) + 48|0);
    $4 = HEAP32[$vfn$i>>2]|0;
    __THREW__ = 0;
    (invoke_iiiii($4|0,($call$i17|0),(15690|0),((15716)|0),($__atoms|0))|0);
    $5 = __THREW__; __THREW__ = 0;
    $6 = $5&1;
    if (!($6)) {
     __ZNSt3__26localeD2Ev($ref$tmp);
     ;HEAP32[$__buf>>2]=0|0;HEAP32[$__buf+4>>2]=0|0;HEAP32[$__buf+8>>2]=0|0;
     $__i$0$i$i20 = 0;
     while(1) {
      $exitcond$i$i21 = ($__i$0$i$i20|0)==(3);
      if ($exitcond$i$i21) {
       break;
      }
      $arrayidx$i$i23 = (($__buf) + ($__i$0$i$i20<<2)|0);
      HEAP32[$arrayidx$i$i23>>2] = 0;
      $inc$i$i24 = (($__i$0$i$i20) + 1)|0;
      $__i$0$i$i20 = $inc$i$i24;
     }
     $__size_$i$i = ((($__buf)) + 11|0);
     $7 = HEAP8[$__size_$i$i>>0]|0;
     $tobool$i$i = ($7<<24>>24)<(0);
     if ($tobool$i$i) {
      $__cap_$i$i = ((($__buf)) + 8|0);
      $8 = HEAP32[$__cap_$i$i>>2]|0;
      $and$i$i = $8 & 2147483647;
      $phitmp$i = (($and$i$i) + -1)|0;
      $cond$i = $phitmp$i;
     } else {
      $cond$i = 10;
     }
     __THREW__ = 0;
     invoke_viii(377,($__buf|0),($cond$i|0),0);
     $9 = __THREW__; __THREW__ = 0;
     $10 = $9&1;
     if ($10) {
      $41 = ___cxa_find_matching_catch_2()|0;
      $42 = tempRet0;
      $ehselector$slot$2 = $42;$exn$slot$2 = $41;
     } else {
      $11 = HEAP8[$__size_$i$i>>0]|0;
      $tobool$i$i$i27 = ($11<<24>>24)<(0);
      $12 = HEAP32[$__buf>>2]|0;
      $cond$i$i = $tobool$i$i$i27 ? $12 : $__buf;
      HEAP32[$__a_end>>2] = $cond$i$i;
      HEAP32[$__g_end>>2] = $__g;
      HEAP32[$__dc>>2] = 0;
      $__size_$i3$i = ((($__buf)) + 4|0);
      $__cap_$i$i99 = ((($__buf)) + 8|0);
      $$pre = HEAP32[$__b>>2]|0;
      $$pre$i$i$i43 = $$pre;$82 = $$pre;$__a$0 = $cond$i$i;
      L21: while(1) {
       $tobool$i$i$i29 = ($$pre$i$i$i43|0)==(0|0);
       if ($tobool$i$i$i29) {
        $$pre$i$i$i = 0;$68 = 0;$83 = 1;
       } else {
        $__ninp_$i$i$i$i30 = ((($$pre$i$i$i43)) + 12|0);
        $13 = HEAP32[$__ninp_$i$i$i$i30>>2]|0;
        $__einp_$i$i$i$i31 = ((($$pre$i$i$i43)) + 16|0);
        $14 = HEAP32[$__einp_$i$i$i$i31>>2]|0;
        $cmp$i$i$i$i32 = ($13|0)==($14|0);
        if ($cmp$i$i$i$i32) {
         $vtable$i$i$i$i34 = HEAP32[$$pre$i$i$i43>>2]|0;
         $vfn$i$i$i$i35 = ((($vtable$i$i$i$i34)) + 36|0);
         $15 = HEAP32[$vfn$i$i$i$i35>>2]|0;
         __THREW__ = 0;
         $call$i$i$i$i69 = (invoke_ii($15|0,($$pre$i$i$i43|0))|0);
         $16 = __THREW__; __THREW__ = 0;
         $17 = $16&1;
         if ($17) {
          break;
         } else {
          $retval$0$i$i$i$i39 = $call$i$i$i$i69;
         }
        } else {
         $18 = HEAP32[$13>>2]|0;
         $call3$i$i$i$i37 = (__ZNSt3__211char_traitsIwE11to_int_typeEw($18)|0);
         $retval$0$i$i$i$i39 = $call3$i$i$i$i37;
        }
        $call3$i$i$i40 = (__ZNSt3__211char_traitsIwE3eofEv()|0);
        $call4$i$i$i41 = (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($retval$0$i$i$i$i39,$call3$i$i$i40)|0);
        if ($call4$i$i$i41) {
         HEAP32[$__b>>2] = 0;
         $$pre$i$i$i = 0;$68 = 0;$83 = 1;
        } else {
         $$pre$i$i$i = $$pre$i$i$i43;$68 = $82;$83 = 0;
        }
       }
       $19 = HEAP32[$__e>>2]|0;
       $tobool$i2$i$i48 = ($19|0)==(0|0);
       do {
        if ($tobool$i2$i$i48) {
         label = 26;
        } else {
         $__ninp_$i$i3$i$i50 = ((($19)) + 12|0);
         $20 = HEAP32[$__ninp_$i$i3$i$i50>>2]|0;
         $__einp_$i$i4$i$i51 = ((($19)) + 16|0);
         $21 = HEAP32[$__einp_$i$i4$i$i51>>2]|0;
         $cmp$i$i5$i$i52 = ($20|0)==($21|0);
         if ($cmp$i$i5$i$i52) {
          $vtable$i$i7$i$i54 = HEAP32[$19>>2]|0;
          $vfn$i$i8$i$i55 = ((($vtable$i$i7$i$i54)) + 36|0);
          $22 = HEAP32[$vfn$i$i8$i$i55>>2]|0;
          __THREW__ = 0;
          $call$i$i9$i$i71 = (invoke_ii($22|0,($19|0))|0);
          $23 = __THREW__; __THREW__ = 0;
          $24 = $23&1;
          if ($24) {
           break L21;
          } else {
           $retval$0$i$i13$i$i59 = $call$i$i9$i$i71;
          }
         } else {
          $25 = HEAP32[$20>>2]|0;
          $call3$i$i11$i$i57 = (__ZNSt3__211char_traitsIwE11to_int_typeEw($25)|0);
          $retval$0$i$i13$i$i59 = $call3$i$i11$i$i57;
         }
         $call3$i14$i$i60 = (__ZNSt3__211char_traitsIwE3eofEv()|0);
         $call4$i15$i$i61 = (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($retval$0$i$i13$i$i59,$call3$i14$i$i60)|0);
         if ($call4$i15$i$i61) {
          HEAP32[$__e>>2] = 0;
          label = 26;
          break;
         } else {
          if ($83) {
           $84 = $19;
           break;
          } else {
           $$pre$i17$i$i = $19;$__a$2 = $__a$0;
           label = 46;
           break L21;
          }
         }
        }
       } while(0);
       if ((label|0) == 26) {
        label = 0;
        if ($83) {
         $$pre$i17$i$i = 0;$__a$2 = $__a$0;
         label = 46;
         break;
        } else {
         $84 = 0;
        }
       }
       $26 = HEAP32[$__a_end>>2]|0;
       $27 = HEAP8[$__size_$i$i>>0]|0;
       $tobool$i$i74 = ($27<<24>>24)<(0);
       $28 = HEAP32[$__size_$i3$i>>2]|0;
       $conv$i$i = $27&255;
       $cond$i76 = $tobool$i$i74 ? $28 : $conv$i$i;
       $add$ptr = (($__a$0) + ($cond$i76)|0);
       $cmp = ($26|0)==($add$ptr|0);
       if ($cmp) {
        $mul = $cond$i76 << 1;
        __THREW__ = 0;
        invoke_viii(377,($__buf|0),($mul|0),0);
        $29 = __THREW__; __THREW__ = 0;
        $30 = $29&1;
        if ($30) {
         break;
        }
        $31 = HEAP8[$__size_$i$i>>0]|0;
        $tobool$i$i98 = ($31<<24>>24)<(0);
        if ($tobool$i$i98) {
         $32 = HEAP32[$__cap_$i$i99>>2]|0;
         $and$i$i100 = $32 & 2147483647;
         $phitmp$i101 = (($and$i$i100) + -1)|0;
         $cond$i103 = $phitmp$i101;
        } else {
         $cond$i103 = 10;
        }
        __THREW__ = 0;
        invoke_viii(377,($__buf|0),($cond$i103|0),0);
        $33 = __THREW__; __THREW__ = 0;
        $34 = $33&1;
        if ($34) {
         break;
        }
        $35 = HEAP8[$__size_$i$i>>0]|0;
        $tobool$i$i$i108 = ($35<<24>>24)<(0);
        $36 = HEAP32[$__buf>>2]|0;
        $cond$i$i113 = $tobool$i$i$i108 ? $36 : $__buf;
        $add$ptr24 = (($cond$i$i113) + ($cond$i76)|0);
        HEAP32[$__a_end>>2] = $add$ptr24;
        $__a$1 = $cond$i$i113;
       } else {
        $__a$1 = $__a$0;
       }
       $__ninp_$i$i = ((($$pre$i$i$i)) + 12|0);
       $43 = HEAP32[$__ninp_$i$i>>2]|0;
       $__einp_$i$i = ((($$pre$i$i$i)) + 16|0);
       $44 = HEAP32[$__einp_$i$i>>2]|0;
       $cmp$i$i115 = ($43|0)==($44|0);
       if ($cmp$i$i115) {
        $vtable$i$i = HEAP32[$$pre$i$i$i>>2]|0;
        $vfn$i$i = ((($vtable$i$i)) + 36|0);
        $45 = HEAP32[$vfn$i$i>>2]|0;
        __THREW__ = 0;
        $call$i$i116 = (invoke_ii($45|0,($$pre$i$i$i|0))|0);
        $46 = __THREW__; __THREW__ = 0;
        $47 = $46&1;
        if ($47) {
         break;
        } else {
         $retval$0$i$i = $call$i$i116;
        }
       } else {
        $48 = HEAP32[$43>>2]|0;
        $call3$i$i = (__ZNSt3__211char_traitsIwE11to_int_typeEw($48)|0);
        $retval$0$i$i = $call3$i$i;
       }
       __THREW__ = 0;
       $call31 = (invoke_iiiiiiiiiii(411,($retval$0$i$i|0),16,($__a$1|0),($__a_end|0),($__dc|0),0,($__grouping|0),($__g|0),($__g_end|0),($__atoms|0))|0);
       $49 = __THREW__; __THREW__ = 0;
       $50 = $49&1;
       if ($50) {
        break;
       }
       $tobool = ($call31|0)==(0);
       if (!($tobool)) {
        $$pre$i17$i$i = $84;$__a$2 = $__a$1;
        label = 46;
        break;
       }
       $51 = HEAP32[$__ninp_$i$i>>2]|0;
       $52 = HEAP32[$__einp_$i$i>>2]|0;
       $cmp$i$i120 = ($51|0)==($52|0);
       if ($cmp$i$i120) {
        $vtable$i$i121 = HEAP32[$$pre$i$i$i>>2]|0;
        $vfn$i$i122 = ((($vtable$i$i121)) + 40|0);
        $53 = HEAP32[$vfn$i$i122>>2]|0;
        __THREW__ = 0;
        (invoke_ii($53|0,($$pre$i$i$i|0))|0);
        $54 = __THREW__; __THREW__ = 0;
        $55 = $54&1;
        if ($55) {
         break;
        } else {
         $$pre$i$i$i43 = $$pre$i$i$i;$82 = $68;$__a$0 = $__a$1;
         continue;
        }
       } else {
        $incdec$ptr$i$i = ((($51)) + 4|0);
        HEAP32[$__ninp_$i$i>>2] = $incdec$ptr$i$i;
        $56 = HEAP32[$51>>2]|0;
        (__ZNSt3__211char_traitsIwE11to_int_typeEw($56)|0);
        $$pre$i$i$i43 = $$pre$i$i$i;$82 = $68;$__a$0 = $__a$1;
        continue;
       }
      }
      L60: do {
       if ((label|0) == 46) {
        $57 = HEAP32[$__a_end>>2]|0;
        $sub$ptr$rhs$cast = $__a$2;
        $sub$ptr$sub = (($57) - ($sub$ptr$rhs$cast))|0;
        __THREW__ = 0;
        invoke_viii(377,($__buf|0),($sub$ptr$sub|0),0);
        $58 = __THREW__; __THREW__ = 0;
        $59 = $58&1;
        if (!($59)) {
         $60 = HEAP8[$__size_$i$i>>0]|0;
         $61 = HEAP32[$__buf>>2]|0;
         __THREW__ = 0;
         $call39 = (invoke_i(392)|0);
         $62 = __THREW__; __THREW__ = 0;
         $63 = $62&1;
         if (!($63)) {
          $tobool$i$i$i$i = ($60<<24>>24)<(0);
          $cond$i$i$i = $tobool$i$i$i$i ? $61 : $__buf;
          __THREW__ = 0;
          HEAP32[$vararg_buffer>>2] = $__v;
          $call41 = (invoke_iiiii(393,($cond$i$i$i|0),($call39|0),(15723|0),($vararg_buffer|0))|0);
          $64 = __THREW__; __THREW__ = 0;
          $65 = $64&1;
          if (!($65)) {
           $cmp42 = ($call41|0)==(1);
           if (!($cmp42)) {
            HEAP32[$__err>>2] = 4;
           }
           $tobool$i$i$i = ($$pre$i$i$i|0)==(0|0);
           if ($tobool$i$i$i) {
            $85 = 1;
           } else {
            $__ninp_$i$i$i$i = ((($$pre$i$i$i)) + 12|0);
            $66 = HEAP32[$__ninp_$i$i$i$i>>2]|0;
            $__einp_$i$i$i$i = ((($$pre$i$i$i)) + 16|0);
            $67 = HEAP32[$__einp_$i$i$i$i>>2]|0;
            $cmp$i$i$i$i = ($66|0)==($67|0);
            if ($cmp$i$i$i$i) {
             $vtable$i$i$i$i = HEAP32[$68>>2]|0;
             $vfn$i$i$i$i = ((($vtable$i$i$i$i)) + 36|0);
             $69 = HEAP32[$vfn$i$i$i$i>>2]|0;
             __THREW__ = 0;
             $call$i$i$i$i15 = (invoke_ii($69|0,($$pre$i$i$i|0))|0);
             $70 = __THREW__; __THREW__ = 0;
             $71 = $70&1;
             if ($71) {
              break;
             } else {
              $retval$0$i$i$i$i = $call$i$i$i$i15;
             }
            } else {
             $72 = HEAP32[$66>>2]|0;
             $call3$i$i$i$i = (__ZNSt3__211char_traitsIwE11to_int_typeEw($72)|0);
             $retval$0$i$i$i$i = $call3$i$i$i$i;
            }
            $call3$i$i$i = (__ZNSt3__211char_traitsIwE3eofEv()|0);
            $call4$i$i$i = (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($retval$0$i$i$i$i,$call3$i$i$i)|0);
            if ($call4$i$i$i) {
             HEAP32[$__b>>2] = 0;
             $85 = 1;
            } else {
             $85 = 0;
            }
           }
           $tobool$i2$i$i = ($$pre$i17$i$i|0)==(0|0);
           do {
            if ($tobool$i2$i$i) {
             label = 63;
            } else {
             $__ninp_$i$i3$i$i = ((($$pre$i17$i$i)) + 12|0);
             $73 = HEAP32[$__ninp_$i$i3$i$i>>2]|0;
             $__einp_$i$i4$i$i = ((($$pre$i17$i$i)) + 16|0);
             $74 = HEAP32[$__einp_$i$i4$i$i>>2]|0;
             $cmp$i$i5$i$i = ($73|0)==($74|0);
             if ($cmp$i$i5$i$i) {
              $vtable$i$i7$i$i = HEAP32[$$pre$i17$i$i>>2]|0;
              $vfn$i$i8$i$i = ((($vtable$i$i7$i$i)) + 36|0);
              $75 = HEAP32[$vfn$i$i8$i$i>>2]|0;
              __THREW__ = 0;
              $call$i$i9$i$i16 = (invoke_ii($75|0,($$pre$i17$i$i|0))|0);
              $76 = __THREW__; __THREW__ = 0;
              $77 = $76&1;
              if ($77) {
               break L60;
              } else {
               $retval$0$i$i13$i$i = $call$i$i9$i$i16;
              }
             } else {
              $78 = HEAP32[$73>>2]|0;
              $call3$i$i11$i$i = (__ZNSt3__211char_traitsIwE11to_int_typeEw($78)|0);
              $retval$0$i$i13$i$i = $call3$i$i11$i$i;
             }
             $call3$i14$i$i = (__ZNSt3__211char_traitsIwE3eofEv()|0);
             $call4$i15$i$i = (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($retval$0$i$i13$i$i,$call3$i14$i$i)|0);
             if ($call4$i15$i$i) {
              HEAP32[$__e>>2] = 0;
              label = 63;
              break;
             } else {
              if ($85) {
               break;
              } else {
               label = 65;
               break;
              }
             }
            }
           } while(0);
           if ((label|0) == 63) {
            if ($85) {
             label = 65;
            }
           }
           if ((label|0) == 65) {
            $79 = HEAP32[$__err>>2]|0;
            $or = $79 | 2;
            HEAP32[$__err>>2] = $or;
           }
           $retval$sroa$0$0$copyload = HEAP32[$__b>>2]|0;
           __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__buf);
           __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grouping);
           STACKTOP = sp;return ($retval$sroa$0$0$copyload|0);
          }
         }
        }
       }
      } while(0);
      $80 = ___cxa_find_matching_catch_2()|0;
      $81 = tempRet0;
      $ehselector$slot$2 = $81;$exn$slot$2 = $80;
     }
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__buf);
     $ehselector$slot$3 = $ehselector$slot$2;$exn$slot$3 = $exn$slot$2;
     break;
    }
   }
   $39 = ___cxa_find_matching_catch_2()|0;
   $40 = tempRet0;
   __ZNSt3__26localeD2Ev($ref$tmp);
   $ehselector$slot$0 = $40;$exn$slot$0 = $39;
   label = 36;
  }
 } while(0);
 if ((label|0) == 36) {
  $ehselector$slot$3 = $ehselector$slot$0;$exn$slot$3 = $exn$slot$0;
 }
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grouping);
 ___resumeException($exn$slot$3|0);
 // unreachable;
 return (0)|0;
}
function __ZNSt3__29__num_getIwE17__stage2_int_loopEwiPcRS2_RjwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_Pw($__ct,$__base,$__a,$__a_end,$__dc,$__thousands_sep,$__grouping,$__g,$__g_end,$__atoms) {
 $__ct = $__ct|0;
 $__base = $__base|0;
 $__a = $__a|0;
 $__a_end = $__a_end|0;
 $__dc = $__dc|0;
 $__thousands_sep = $__thousands_sep|0;
 $__grouping = $__grouping|0;
 $__g = $__g|0;
 $__g_end = $__g_end|0;
 $__atoms = $__atoms|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__first$addr$0$i$add = 0, $__first$addr$0$i$idx = 0, $__first$addr$0$i$ptr = 0, $__first$addr$0$lcssa$i = 0, $__size_$i$i = 0, $__size_$i3$i = 0, $add$ptr = 0, $arrayidx = 0;
 var $arrayidx2 = 0, $arrayidx37 = 0, $arrayidx43 = 0, $cmp = 0, $cmp$i = 0, $cmp1 = 0, $cmp1$i = 0, $cmp10 = 0, $cmp20 = 0, $cmp23 = 0, $cmp27 = 0, $cmp3 = 0, $cmp35 = 0, $cmp38 = 0, $cmp6 = 0, $cmp8 = 0, $cond = 0, $cond$i = 0, $conv$i$i = 0, $inc = 0;
 var $incdec$ptr = 0, $incdec$ptr12 = 0, $incdec$ptr41 = 0, $incdec$ptr44 = 0, $or$cond = 0, $retval$1 = 0, $sub$ptr$div19 = 0, $sub$ptr$lhs$cast = 0, $sub$ptr$lhs$cast16 = 0, $sub$ptr$lhs$cast32 = 0, $sub$ptr$rhs$cast = 0, $sub$ptr$rhs$cast17 = 0, $sub$ptr$rhs$cast33 = 0, $sub$ptr$sub = 0, $sub$ptr$sub18 = 0, $sub$ptr$sub34 = 0, $tobool$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$__a_end>>2]|0;
 $cmp = ($0|0)==($__a|0);
 do {
  if ($cmp) {
   $arrayidx = ((($__atoms)) + 96|0);
   $1 = HEAP32[$arrayidx>>2]|0;
   $cmp1 = ($1|0)==($__ct|0);
   if (!($cmp1)) {
    $arrayidx2 = ((($__atoms)) + 100|0);
    $2 = HEAP32[$arrayidx2>>2]|0;
    $cmp3 = ($2|0)==($__ct|0);
    if (!($cmp3)) {
     label = 5;
     break;
    }
   }
   $cond = $cmp1 ? 43 : 45;
   $incdec$ptr = ((($__a)) + 1|0);
   HEAP32[$__a_end>>2] = $incdec$ptr;
   HEAP8[$__a>>0] = $cond;
   HEAP32[$__dc>>2] = 0;
   $retval$1 = 0;
  } else {
   label = 5;
  }
 } while(0);
 L6: do {
  if ((label|0) == 5) {
   $__size_$i$i = ((($__grouping)) + 11|0);
   $3 = HEAP8[$__size_$i$i>>0]|0;
   $tobool$i$i = ($3<<24>>24)<(0);
   $__size_$i3$i = ((($__grouping)) + 4|0);
   $4 = HEAP32[$__size_$i3$i>>2]|0;
   $conv$i$i = $3&255;
   $cond$i = $tobool$i$i ? $4 : $conv$i$i;
   $cmp6 = ($cond$i|0)!=(0);
   $cmp8 = ($__ct|0)==($__thousands_sep|0);
   $or$cond = $cmp8 & $cmp6;
   if ($or$cond) {
    $5 = HEAP32[$__g_end>>2]|0;
    $sub$ptr$lhs$cast = $5;
    $sub$ptr$rhs$cast = $__g;
    $sub$ptr$sub = (($sub$ptr$lhs$cast) - ($sub$ptr$rhs$cast))|0;
    $cmp10 = ($sub$ptr$sub|0)<(160);
    if (!($cmp10)) {
     $retval$1 = 0;
     break;
    }
    $6 = HEAP32[$__dc>>2]|0;
    $incdec$ptr12 = ((($5)) + 4|0);
    HEAP32[$__g_end>>2] = $incdec$ptr12;
    HEAP32[$5>>2] = $6;
    HEAP32[$__dc>>2] = 0;
    $retval$1 = 0;
    break;
   }
   $add$ptr = ((($__atoms)) + 104|0);
   $__first$addr$0$i$idx = 0;
   while(1) {
    $__first$addr$0$i$ptr = (($__atoms) + ($__first$addr$0$i$idx<<2)|0);
    $cmp$i = ($__first$addr$0$i$idx|0)==(26);
    if ($cmp$i) {
     $__first$addr$0$lcssa$i = $add$ptr;
     break;
    }
    $7 = HEAP32[$__first$addr$0$i$ptr>>2]|0;
    $cmp1$i = ($7|0)==($__ct|0);
    $__first$addr$0$i$add = (($__first$addr$0$i$idx) + 1)|0;
    if ($cmp1$i) {
     $__first$addr$0$lcssa$i = $__first$addr$0$i$ptr;
     break;
    } else {
     $__first$addr$0$i$idx = $__first$addr$0$i$add;
    }
   }
   $sub$ptr$lhs$cast16 = $__first$addr$0$lcssa$i;
   $sub$ptr$rhs$cast17 = $__atoms;
   $sub$ptr$sub18 = (($sub$ptr$lhs$cast16) - ($sub$ptr$rhs$cast17))|0;
   $sub$ptr$div19 = $sub$ptr$sub18 >> 2;
   $cmp20 = ($sub$ptr$sub18|0)>(92);
   if ($cmp20) {
    $retval$1 = -1;
   } else {
    $arrayidx43 = (15690 + ($sub$ptr$div19)|0);
    switch ($__base|0) {
    case 10: case 8:  {
     $cmp23 = ($sub$ptr$div19|0)<($__base|0);
     if (!($cmp23)) {
      $retval$1 = -1;
      break L6;
     }
     break;
    }
    case 16:  {
     $cmp27 = ($sub$ptr$sub18|0)<(88);
     if (!($cmp27)) {
      if ($cmp) {
       $retval$1 = -1;
       break L6;
      }
      $sub$ptr$lhs$cast32 = $0;
      $sub$ptr$rhs$cast33 = $__a;
      $sub$ptr$sub34 = (($sub$ptr$lhs$cast32) - ($sub$ptr$rhs$cast33))|0;
      $cmp35 = ($sub$ptr$sub34|0)<(3);
      if (!($cmp35)) {
       $retval$1 = -1;
       break L6;
      }
      $arrayidx37 = ((($0)) + -1|0);
      $8 = HEAP8[$arrayidx37>>0]|0;
      $cmp38 = ($8<<24>>24)==(48);
      if (!($cmp38)) {
       $retval$1 = -1;
       break L6;
      }
      HEAP32[$__dc>>2] = 0;
      $9 = HEAP8[$arrayidx43>>0]|0;
      $incdec$ptr41 = ((($0)) + 1|0);
      HEAP32[$__a_end>>2] = $incdec$ptr41;
      HEAP8[$0>>0] = $9;
      $retval$1 = 0;
      break L6;
     }
     break;
    }
    default: {
    }
    }
    $10 = HEAP8[$arrayidx43>>0]|0;
    $incdec$ptr44 = ((($0)) + 1|0);
    HEAP32[$__a_end>>2] = $incdec$ptr44;
    HEAP8[$0>>0] = $10;
    $11 = HEAP32[$__dc>>2]|0;
    $inc = (($11) + 1)|0;
    HEAP32[$__dc>>2] = $inc;
    $retval$1 = 0;
   }
  }
 } while(0);
 return ($retval$1|0);
}
function __ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE23__do_get_floating_pointIeEES4_S4_S4_RNS_8ios_baseERjRT_($this,$__b,$__e,$__iob,$__err,$__v) {
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$pre = 0, $$pre$i$i$i = 0, $$pre$i$i$i30 = 0, $$pre$i17$i$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $8 = 0, $9 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__a_end = 0, $__atoms = 0, $__buf = 0, $__cap_$i$i = 0, $__cap_$i$i86 = 0, $__dc = 0, $__decimal_point = 0, $__einp_$i$i = 0, $__einp_$i$i$i$i = 0, $__einp_$i$i$i$i18 = 0, $__einp_$i$i4$i$i = 0, $__einp_$i$i4$i$i38 = 0, $__exp = 0, $__g = 0;
 var $__g_end = 0, $__grouping = 0, $__i$0$i$i = 0, $__in_units = 0, $__ninp_$i$i = 0, $__ninp_$i$i$i$i = 0, $__ninp_$i$i$i$i17 = 0, $__ninp_$i$i3$i$i = 0, $__ninp_$i$i3$i$i37 = 0, $__size_$i$i = 0, $__size_$i$i116 = 0, $__size_$i3$i = 0, $__size_$i3$i118 = 0, $__thousands_sep = 0, $add$ptr = 0, $add$ptr17 = 0, $and$i$i = 0, $and$i$i87 = 0, $arrayidx$i$i = 0, $call$i$i$i$i12 = 0;
 var $call$i$i$i$i56 = 0, $call$i$i103 = 0, $call$i$i9$i$i13 = 0, $call$i$i9$i$i58 = 0, $call23 = 0, $call3$i$i = 0, $call3$i$i$i = 0, $call3$i$i$i$i = 0, $call3$i$i$i$i24 = 0, $call3$i$i$i27 = 0, $call3$i$i11$i$i = 0, $call3$i$i11$i$i44 = 0, $call3$i14$i$i = 0, $call3$i14$i$i47 = 0, $call37 = 0.0, $call4$i$i$i = 0, $call4$i$i$i28 = 0, $call4$i15$i$i = 0, $call4$i15$i$i48 = 0, $cmp = 0;
 var $cmp$i$i$i$i = 0, $cmp$i$i$i$i19 = 0, $cmp$i$i102 = 0, $cmp$i$i107 = 0, $cmp$i$i5$i$i = 0, $cmp$i$i5$i$i39 = 0, $cmp29 = 0, $cmp33 = 0, $cond$i = 0, $cond$i$i = 0, $cond$i$i100 = 0, $cond$i122 = 0, $cond$i63 = 0, $cond$i90 = 0, $conv$i$i = 0, $conv$i$i120 = 0, $ehselector$slot$1 = 0, $exitcond$i$i = 0, $exn$slot$1 = 0, $inc$i$i = 0;
 var $incdec$ptr = 0, $incdec$ptr$i$i = 0, $mul = 0, $or = 0, $or$cond = 0, $phitmp$i = 0, $phitmp$i88 = 0, $retval$0$i$i = 0, $retval$0$i$i$i$i = 0, $retval$0$i$i$i$i26 = 0, $retval$0$i$i13$i$i = 0, $retval$0$i$i13$i$i46 = 0, $retval$sroa$0$0$copyload = 0, $sub$ptr$lhs$cast = 0, $sub$ptr$rhs$cast = 0, $sub$ptr$sub = 0, $tobool = 0, $tobool$i$i = 0, $tobool$i$i$i = 0, $tobool$i$i$i14 = 0;
 var $tobool$i$i$i16 = 0, $tobool$i$i$i95 = 0, $tobool$i$i117 = 0, $tobool$i$i61 = 0, $tobool$i$i85 = 0, $tobool$i2$i$i = 0, $tobool$i2$i$i35 = 0, $tobool30 = 0, $vfn$i$i = 0, $vfn$i$i$i$i = 0, $vfn$i$i$i$i22 = 0, $vfn$i$i109 = 0, $vfn$i$i8$i$i = 0, $vfn$i$i8$i$i42 = 0, $vtable$i$i = 0, $vtable$i$i$i$i = 0, $vtable$i$i$i$i21 = 0, $vtable$i$i108 = 0, $vtable$i$i7$i$i = 0, $vtable$i$i7$i$i41 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 352|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(352|0);
 $__atoms = sp + 208|0;
 $__decimal_point = sp + 200|0;
 $__thousands_sep = sp + 196|0;
 $__grouping = sp + 184|0;
 $__buf = sp + 172|0;
 $__a_end = sp + 168|0;
 $__g = sp + 8|0;
 $__g_end = sp + 4|0;
 $__dc = sp;
 $__in_units = sp + 337|0;
 $__exp = sp + 336|0;
 __ZNSt3__29__num_getIwE19__stage2_float_prepERNS_8ios_baseEPwRwS5_($__grouping,$__iob,$__atoms,$__decimal_point,$__thousands_sep);
 ;HEAP32[$__buf>>2]=0|0;HEAP32[$__buf+4>>2]=0|0;HEAP32[$__buf+8>>2]=0|0;
 $__i$0$i$i = 0;
 while(1) {
  $exitcond$i$i = ($__i$0$i$i|0)==(3);
  if ($exitcond$i$i) {
   break;
  }
  $arrayidx$i$i = (($__buf) + ($__i$0$i$i<<2)|0);
  HEAP32[$arrayidx$i$i>>2] = 0;
  $inc$i$i = (($__i$0$i$i) + 1)|0;
  $__i$0$i$i = $inc$i$i;
 }
 $__size_$i$i = ((($__buf)) + 11|0);
 $0 = HEAP8[$__size_$i$i>>0]|0;
 $tobool$i$i = ($0<<24>>24)<(0);
 if ($tobool$i$i) {
  $__cap_$i$i = ((($__buf)) + 8|0);
  $1 = HEAP32[$__cap_$i$i>>2]|0;
  $and$i$i = $1 & 2147483647;
  $phitmp$i = (($and$i$i) + -1)|0;
  $cond$i = $phitmp$i;
 } else {
  $cond$i = 10;
 }
 __THREW__ = 0;
 invoke_viii(377,($__buf|0),($cond$i|0),0);
 $2 = __THREW__; __THREW__ = 0;
 $3 = $2&1;
 if ($3) {
  $30 = ___cxa_find_matching_catch_2()|0;
  $31 = tempRet0;
  $ehselector$slot$1 = $31;$exn$slot$1 = $30;
 } else {
  $4 = HEAP8[$__size_$i$i>>0]|0;
  $tobool$i$i$i14 = ($4<<24>>24)<(0);
  $5 = HEAP32[$__buf>>2]|0;
  $cond$i$i = $tobool$i$i$i14 ? $5 : $__buf;
  HEAP32[$__a_end>>2] = $cond$i$i;
  HEAP32[$__g_end>>2] = $__g;
  HEAP32[$__dc>>2] = 0;
  HEAP8[$__in_units>>0] = 1;
  HEAP8[$__exp>>0] = 69;
  $__size_$i3$i = ((($__buf)) + 4|0);
  $__cap_$i$i86 = ((($__buf)) + 8|0);
  $$pre = HEAP32[$__b>>2]|0;
  $$pre$i$i$i30 = $$pre;$75 = $$pre;$__a$0 = $cond$i$i;
  L11: while(1) {
   $tobool$i$i$i16 = ($$pre$i$i$i30|0)==(0|0);
   if ($tobool$i$i$i16) {
    $$pre$i$i$i = 0;$61 = 0;$76 = 1;
   } else {
    $__ninp_$i$i$i$i17 = ((($$pre$i$i$i30)) + 12|0);
    $6 = HEAP32[$__ninp_$i$i$i$i17>>2]|0;
    $__einp_$i$i$i$i18 = ((($$pre$i$i$i30)) + 16|0);
    $7 = HEAP32[$__einp_$i$i$i$i18>>2]|0;
    $cmp$i$i$i$i19 = ($6|0)==($7|0);
    if ($cmp$i$i$i$i19) {
     $vtable$i$i$i$i21 = HEAP32[$$pre$i$i$i30>>2]|0;
     $vfn$i$i$i$i22 = ((($vtable$i$i$i$i21)) + 36|0);
     $8 = HEAP32[$vfn$i$i$i$i22>>2]|0;
     __THREW__ = 0;
     $call$i$i$i$i56 = (invoke_ii($8|0,($$pre$i$i$i30|0))|0);
     $9 = __THREW__; __THREW__ = 0;
     $10 = $9&1;
     if ($10) {
      break;
     } else {
      $retval$0$i$i$i$i26 = $call$i$i$i$i56;
     }
    } else {
     $11 = HEAP32[$6>>2]|0;
     $call3$i$i$i$i24 = (__ZNSt3__211char_traitsIwE11to_int_typeEw($11)|0);
     $retval$0$i$i$i$i26 = $call3$i$i$i$i24;
    }
    $call3$i$i$i27 = (__ZNSt3__211char_traitsIwE3eofEv()|0);
    $call4$i$i$i28 = (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($retval$0$i$i$i$i26,$call3$i$i$i27)|0);
    if ($call4$i$i$i28) {
     HEAP32[$__b>>2] = 0;
     $$pre$i$i$i = 0;$61 = 0;$76 = 1;
    } else {
     $$pre$i$i$i = $$pre$i$i$i30;$61 = $75;$76 = 0;
    }
   }
   $12 = HEAP32[$__e>>2]|0;
   $tobool$i2$i$i35 = ($12|0)==(0|0);
   do {
    if ($tobool$i2$i$i35) {
     label = 20;
    } else {
     $__ninp_$i$i3$i$i37 = ((($12)) + 12|0);
     $13 = HEAP32[$__ninp_$i$i3$i$i37>>2]|0;
     $__einp_$i$i4$i$i38 = ((($12)) + 16|0);
     $14 = HEAP32[$__einp_$i$i4$i$i38>>2]|0;
     $cmp$i$i5$i$i39 = ($13|0)==($14|0);
     if ($cmp$i$i5$i$i39) {
      $vtable$i$i7$i$i41 = HEAP32[$12>>2]|0;
      $vfn$i$i8$i$i42 = ((($vtable$i$i7$i$i41)) + 36|0);
      $15 = HEAP32[$vfn$i$i8$i$i42>>2]|0;
      __THREW__ = 0;
      $call$i$i9$i$i58 = (invoke_ii($15|0,($12|0))|0);
      $16 = __THREW__; __THREW__ = 0;
      $17 = $16&1;
      if ($17) {
       break L11;
      } else {
       $retval$0$i$i13$i$i46 = $call$i$i9$i$i58;
      }
     } else {
      $18 = HEAP32[$13>>2]|0;
      $call3$i$i11$i$i44 = (__ZNSt3__211char_traitsIwE11to_int_typeEw($18)|0);
      $retval$0$i$i13$i$i46 = $call3$i$i11$i$i44;
     }
     $call3$i14$i$i47 = (__ZNSt3__211char_traitsIwE3eofEv()|0);
     $call4$i15$i$i48 = (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($retval$0$i$i13$i$i46,$call3$i14$i$i47)|0);
     if ($call4$i15$i$i48) {
      HEAP32[$__e>>2] = 0;
      label = 20;
      break;
     } else {
      if ($76) {
       $77 = $12;
       break;
      } else {
       $$pre$i17$i$i = $12;$__a$2 = $__a$0;
       label = 37;
       break L11;
      }
     }
    }
   } while(0);
   if ((label|0) == 20) {
    label = 0;
    if ($76) {
     $$pre$i17$i$i = 0;$__a$2 = $__a$0;
     label = 37;
     break;
    } else {
     $77 = 0;
    }
   }
   $19 = HEAP32[$__a_end>>2]|0;
   $20 = HEAP8[$__size_$i$i>>0]|0;
   $tobool$i$i61 = ($20<<24>>24)<(0);
   $21 = HEAP32[$__size_$i3$i>>2]|0;
   $conv$i$i = $20&255;
   $cond$i63 = $tobool$i$i61 ? $21 : $conv$i$i;
   $add$ptr = (($__a$0) + ($cond$i63)|0);
   $cmp = ($19|0)==($add$ptr|0);
   if ($cmp) {
    $mul = $cond$i63 << 1;
    __THREW__ = 0;
    invoke_viii(377,($__buf|0),($mul|0),0);
    $22 = __THREW__; __THREW__ = 0;
    $23 = $22&1;
    if ($23) {
     break;
    }
    $24 = HEAP8[$__size_$i$i>>0]|0;
    $tobool$i$i85 = ($24<<24>>24)<(0);
    if ($tobool$i$i85) {
     $25 = HEAP32[$__cap_$i$i86>>2]|0;
     $and$i$i87 = $25 & 2147483647;
     $phitmp$i88 = (($and$i$i87) + -1)|0;
     $cond$i90 = $phitmp$i88;
    } else {
     $cond$i90 = 10;
    }
    __THREW__ = 0;
    invoke_viii(377,($__buf|0),($cond$i90|0),0);
    $26 = __THREW__; __THREW__ = 0;
    $27 = $26&1;
    if ($27) {
     break;
    }
    $28 = HEAP8[$__size_$i$i>>0]|0;
    $tobool$i$i$i95 = ($28<<24>>24)<(0);
    $29 = HEAP32[$__buf>>2]|0;
    $cond$i$i100 = $tobool$i$i$i95 ? $29 : $__buf;
    $add$ptr17 = (($cond$i$i100) + ($cond$i63)|0);
    HEAP32[$__a_end>>2] = $add$ptr17;
    $__a$1 = $cond$i$i100;
   } else {
    $__a$1 = $__a$0;
   }
   $__ninp_$i$i = ((($$pre$i$i$i)) + 12|0);
   $32 = HEAP32[$__ninp_$i$i>>2]|0;
   $__einp_$i$i = ((($$pre$i$i$i)) + 16|0);
   $33 = HEAP32[$__einp_$i$i>>2]|0;
   $cmp$i$i102 = ($32|0)==($33|0);
   if ($cmp$i$i102) {
    $vtable$i$i = HEAP32[$$pre$i$i$i>>2]|0;
    $vfn$i$i = ((($vtable$i$i)) + 36|0);
    $34 = HEAP32[$vfn$i$i>>2]|0;
    __THREW__ = 0;
    $call$i$i103 = (invoke_ii($34|0,($$pre$i$i$i|0))|0);
    $35 = __THREW__; __THREW__ = 0;
    $36 = $35&1;
    if ($36) {
     break;
    } else {
     $retval$0$i$i = $call$i$i103;
    }
   } else {
    $37 = HEAP32[$32>>2]|0;
    $call3$i$i = (__ZNSt3__211char_traitsIwE11to_int_typeEw($37)|0);
    $retval$0$i$i = $call3$i$i;
   }
   $38 = HEAP32[$__decimal_point>>2]|0;
   $39 = HEAP32[$__thousands_sep>>2]|0;
   __THREW__ = 0;
   $call23 = (invoke_iiiiiiiiiiiii(412,($retval$0$i$i|0),($__in_units|0),($__exp|0),($__a$1|0),($__a_end|0),($38|0),($39|0),($__grouping|0),($__g|0),($__g_end|0),($__dc|0),($__atoms|0))|0);
   $40 = __THREW__; __THREW__ = 0;
   $41 = $40&1;
   if ($41) {
    break;
   }
   $tobool = ($call23|0)==(0);
   if (!($tobool)) {
    $$pre$i17$i$i = $77;$__a$2 = $__a$1;
    label = 37;
    break;
   }
   $42 = HEAP32[$__ninp_$i$i>>2]|0;
   $43 = HEAP32[$__einp_$i$i>>2]|0;
   $cmp$i$i107 = ($42|0)==($43|0);
   if ($cmp$i$i107) {
    $vtable$i$i108 = HEAP32[$$pre$i$i$i>>2]|0;
    $vfn$i$i109 = ((($vtable$i$i108)) + 40|0);
    $44 = HEAP32[$vfn$i$i109>>2]|0;
    __THREW__ = 0;
    (invoke_ii($44|0,($$pre$i$i$i|0))|0);
    $45 = __THREW__; __THREW__ = 0;
    $46 = $45&1;
    if ($46) {
     break;
    } else {
     $$pre$i$i$i30 = $$pre$i$i$i;$75 = $61;$__a$0 = $__a$1;
     continue;
    }
   } else {
    $incdec$ptr$i$i = ((($42)) + 4|0);
    HEAP32[$__ninp_$i$i>>2] = $incdec$ptr$i$i;
    $47 = HEAP32[$42>>2]|0;
    (__ZNSt3__211char_traitsIwE11to_int_typeEw($47)|0);
    $$pre$i$i$i30 = $$pre$i$i$i;$75 = $61;$__a$0 = $__a$1;
    continue;
   }
  }
  L50: do {
   if ((label|0) == 37) {
    $__size_$i$i116 = ((($__grouping)) + 11|0);
    $48 = HEAP8[$__size_$i$i116>>0]|0;
    $tobool$i$i117 = ($48<<24>>24)<(0);
    $__size_$i3$i118 = ((($__grouping)) + 4|0);
    $49 = HEAP32[$__size_$i3$i118>>2]|0;
    $conv$i$i120 = $48&255;
    $cond$i122 = $tobool$i$i117 ? $49 : $conv$i$i120;
    $cmp29 = ($cond$i122|0)==(0);
    $50 = HEAP8[$__in_units>>0]|0;
    $tobool30 = ($50<<24>>24)==(0);
    $or$cond = $cmp29 | $tobool30;
    if (!($or$cond)) {
     $51 = HEAP32[$__g_end>>2]|0;
     $sub$ptr$lhs$cast = $51;
     $sub$ptr$rhs$cast = $__g;
     $sub$ptr$sub = (($sub$ptr$lhs$cast) - ($sub$ptr$rhs$cast))|0;
     $cmp33 = ($sub$ptr$sub|0)<(160);
     if ($cmp33) {
      $52 = HEAP32[$__dc>>2]|0;
      $incdec$ptr = ((($51)) + 4|0);
      HEAP32[$__g_end>>2] = $incdec$ptr;
      HEAP32[$51>>2] = $52;
     }
    }
    $53 = HEAP32[$__a_end>>2]|0;
    __THREW__ = 0;
    $call37 = (+invoke_diii(399,($__a$2|0),($53|0),($__err|0)));
    $54 = __THREW__; __THREW__ = 0;
    $55 = $54&1;
    if (!($55)) {
     HEAPF64[$__v>>3] = $call37;
     $56 = HEAP32[$__g_end>>2]|0;
     __THREW__ = 0;
     invoke_viiii(400,($__grouping|0),($__g|0),($56|0),($__err|0));
     $57 = __THREW__; __THREW__ = 0;
     $58 = $57&1;
     if (!($58)) {
      $tobool$i$i$i = ($$pre$i$i$i|0)==(0|0);
      if ($tobool$i$i$i) {
       $78 = 1;
      } else {
       $__ninp_$i$i$i$i = ((($$pre$i$i$i)) + 12|0);
       $59 = HEAP32[$__ninp_$i$i$i$i>>2]|0;
       $__einp_$i$i$i$i = ((($$pre$i$i$i)) + 16|0);
       $60 = HEAP32[$__einp_$i$i$i$i>>2]|0;
       $cmp$i$i$i$i = ($59|0)==($60|0);
       if ($cmp$i$i$i$i) {
        $vtable$i$i$i$i = HEAP32[$61>>2]|0;
        $vfn$i$i$i$i = ((($vtable$i$i$i$i)) + 36|0);
        $62 = HEAP32[$vfn$i$i$i$i>>2]|0;
        __THREW__ = 0;
        $call$i$i$i$i12 = (invoke_ii($62|0,($$pre$i$i$i|0))|0);
        $63 = __THREW__; __THREW__ = 0;
        $64 = $63&1;
        if ($64) {
         break;
        } else {
         $retval$0$i$i$i$i = $call$i$i$i$i12;
        }
       } else {
        $65 = HEAP32[$59>>2]|0;
        $call3$i$i$i$i = (__ZNSt3__211char_traitsIwE11to_int_typeEw($65)|0);
        $retval$0$i$i$i$i = $call3$i$i$i$i;
       }
       $call3$i$i$i = (__ZNSt3__211char_traitsIwE3eofEv()|0);
       $call4$i$i$i = (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($retval$0$i$i$i$i,$call3$i$i$i)|0);
       if ($call4$i$i$i) {
        HEAP32[$__b>>2] = 0;
        $78 = 1;
       } else {
        $78 = 0;
       }
      }
      $tobool$i2$i$i = ($$pre$i17$i$i|0)==(0|0);
      do {
       if ($tobool$i2$i$i) {
        label = 54;
       } else {
        $__ninp_$i$i3$i$i = ((($$pre$i17$i$i)) + 12|0);
        $66 = HEAP32[$__ninp_$i$i3$i$i>>2]|0;
        $__einp_$i$i4$i$i = ((($$pre$i17$i$i)) + 16|0);
        $67 = HEAP32[$__einp_$i$i4$i$i>>2]|0;
        $cmp$i$i5$i$i = ($66|0)==($67|0);
        if ($cmp$i$i5$i$i) {
         $vtable$i$i7$i$i = HEAP32[$$pre$i17$i$i>>2]|0;
         $vfn$i$i8$i$i = ((($vtable$i$i7$i$i)) + 36|0);
         $68 = HEAP32[$vfn$i$i8$i$i>>2]|0;
         __THREW__ = 0;
         $call$i$i9$i$i13 = (invoke_ii($68|0,($$pre$i17$i$i|0))|0);
         $69 = __THREW__; __THREW__ = 0;
         $70 = $69&1;
         if ($70) {
          break L50;
         } else {
          $retval$0$i$i13$i$i = $call$i$i9$i$i13;
         }
        } else {
         $71 = HEAP32[$66>>2]|0;
         $call3$i$i11$i$i = (__ZNSt3__211char_traitsIwE11to_int_typeEw($71)|0);
         $retval$0$i$i13$i$i = $call3$i$i11$i$i;
        }
        $call3$i14$i$i = (__ZNSt3__211char_traitsIwE3eofEv()|0);
        $call4$i15$i$i = (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($retval$0$i$i13$i$i,$call3$i14$i$i)|0);
        if ($call4$i15$i$i) {
         HEAP32[$__e>>2] = 0;
         label = 54;
         break;
        } else {
         if ($78) {
          break;
         } else {
          label = 56;
          break;
         }
        }
       }
      } while(0);
      if ((label|0) == 54) {
       if ($78) {
        label = 56;
       }
      }
      if ((label|0) == 56) {
       $72 = HEAP32[$__err>>2]|0;
       $or = $72 | 2;
       HEAP32[$__err>>2] = $or;
      }
      $retval$sroa$0$0$copyload = HEAP32[$__b>>2]|0;
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__buf);
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grouping);
      STACKTOP = sp;return ($retval$sroa$0$0$copyload|0);
     }
    }
   }
  } while(0);
  $73 = ___cxa_find_matching_catch_2()|0;
  $74 = tempRet0;
  $ehselector$slot$1 = $74;$exn$slot$1 = $73;
 }
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__buf);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grouping);
 ___resumeException($exn$slot$1|0);
 // unreachable;
 return (0)|0;
}
function __ZNSt3__29__num_getIwE19__stage2_float_prepERNS_8ios_baseEPwRwS5_($agg$result,$__iob,$__atoms,$__decimal_point,$__thousands_sep) {
 $agg$result = $agg$result|0;
 $__iob = $__iob|0;
 $__atoms = $__atoms|0;
 $__decimal_point = $__decimal_point|0;
 $__thousands_sep = $__thousands_sep|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__loc = 0, $call$i11 = 0;
 var $call$i14 = 0, $call$i6 = 0, $call$i8 = 0, $vfn$i = 0, $vfn$i10 = 0, $vfn$i13 = 0, $vfn$i16 = 0, $vtable$i = 0, $vtable$i12 = 0, $vtable$i15 = 0, $vtable$i9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $__loc = sp;
 __ZNKSt3__28ios_base6getlocEv($__loc,$__iob);
 __THREW__ = 0;
 $call$i6 = (invoke_iii(380,($__loc|0),(20128|0))|0);
 $0 = __THREW__; __THREW__ = 0;
 $1 = $0&1;
 if (!($1)) {
  $vtable$i = HEAP32[$call$i6>>2]|0;
  $vfn$i = ((($vtable$i)) + 48|0);
  $2 = HEAP32[$vfn$i>>2]|0;
  __THREW__ = 0;
  (invoke_iiiii($2|0,($call$i6|0),(15690|0),((15722)|0),($__atoms|0))|0);
  $3 = __THREW__; __THREW__ = 0;
  $4 = $3&1;
  if (!($4)) {
   __THREW__ = 0;
   $call$i8 = (invoke_iii(380,($__loc|0),(20136|0))|0);
   $5 = __THREW__; __THREW__ = 0;
   $6 = $5&1;
   if (!($6)) {
    $vtable$i9 = HEAP32[$call$i8>>2]|0;
    $vfn$i10 = ((($vtable$i9)) + 12|0);
    $7 = HEAP32[$vfn$i10>>2]|0;
    __THREW__ = 0;
    $call$i11 = (invoke_ii($7|0,($call$i8|0))|0);
    $8 = __THREW__; __THREW__ = 0;
    $9 = $8&1;
    if (!($9)) {
     HEAP32[$__decimal_point>>2] = $call$i11;
     $vtable$i12 = HEAP32[$call$i8>>2]|0;
     $vfn$i13 = ((($vtable$i12)) + 16|0);
     $10 = HEAP32[$vfn$i13>>2]|0;
     __THREW__ = 0;
     $call$i14 = (invoke_ii($10|0,($call$i8|0))|0);
     $11 = __THREW__; __THREW__ = 0;
     $12 = $11&1;
     if (!($12)) {
      HEAP32[$__thousands_sep>>2] = $call$i14;
      $vtable$i15 = HEAP32[$call$i8>>2]|0;
      $vfn$i16 = ((($vtable$i15)) + 20|0);
      $13 = HEAP32[$vfn$i16>>2]|0;
      __THREW__ = 0;
      invoke_vii($13|0,($agg$result|0),($call$i8|0));
      $14 = __THREW__; __THREW__ = 0;
      $15 = $14&1;
      if (!($15)) {
       __ZNSt3__26localeD2Ev($__loc);
       STACKTOP = sp;return;
      }
     }
    }
   }
  }
 }
 $16 = ___cxa_find_matching_catch_2()|0;
 $17 = tempRet0;
 __ZNSt3__26localeD2Ev($__loc);
 ___resumeException($16|0);
 // unreachable;
}
function __ZNSt3__29__num_getIwE19__stage2_float_loopEwRbRcPcRS4_wwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSE_RjPw($__ct,$__in_units,$__exp,$__a,$__a_end,$__decimal_point,$__thousands_sep,$__grouping,$__g,$__g_end,$__dc,$__atoms) {
 $__ct = $__ct|0;
 $__in_units = $__in_units|0;
 $__exp = $__exp|0;
 $__a = $__a|0;
 $__a_end = $__a_end|0;
 $__decimal_point = $__decimal_point|0;
 $__thousands_sep = $__thousands_sep|0;
 $__grouping = $__grouping|0;
 $__g = $__g|0;
 $__g_end = $__g_end|0;
 $__dc = $__dc|0;
 $__atoms = $__atoms|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__first$addr$0$i$add = 0, $__first$addr$0$i$idx = 0, $__first$addr$0$i$ptr = 0, $__first$addr$0$lcssa$i = 0, $__size_$i$i = 0, $__size_$i$i40 = 0, $__size_$i$i49 = 0, $__size_$i3$i = 0, $__size_$i3$i42 = 0, $__size_$i3$i51 = 0, $add$ptr = 0, $and55 = 0, $arrayidx = 0;
 var $arrayidx39 = 0, $cmp = 0, $cmp$i = 0, $cmp1$i = 0, $cmp11 = 0, $cmp2 = 0, $cmp20 = 0, $cmp3 = 0, $cmp30 = 0, $cmp37 = 0, $cmp43 = 0, $cmp57 = 0, $cmp64 = 0, $cmp70 = 0, $cmp78 = 0, $cmp8 = 0, $cond$i = 0, $cond$i46 = 0, $cond$i55 = 0, $conv$i$i = 0;
 var $conv$i$i44 = 0, $conv$i$i53 = 0, $conv56 = 0, $conv60 = 0, $inc = 0, $incdec$ptr = 0, $incdec$ptr22 = 0, $incdec$ptr45 = 0, $incdec$ptr5 = 0, $incdec$ptr72 = 0, $incdec$ptr77 = 0, $or = 0, $retval$2 = 0, $sub$ptr$div29 = 0, $sub$ptr$lhs$cast = 0, $sub$ptr$lhs$cast16 = 0, $sub$ptr$lhs$cast26 = 0, $sub$ptr$lhs$cast66 = 0, $sub$ptr$rhs$cast = 0, $sub$ptr$rhs$cast27 = 0;
 var $sub$ptr$sub = 0, $sub$ptr$sub18 = 0, $sub$ptr$sub28 = 0, $sub$ptr$sub68 = 0, $tobool = 0, $tobool$i$i = 0, $tobool$i$i41 = 0, $tobool$i$i50 = 0, $tobool13 = 0, $tobool61 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $cmp = ($__ct|0)==($__decimal_point|0);
 $sub$ptr$rhs$cast = $__g;
 L1: do {
  if ($cmp) {
   $0 = HEAP8[$__in_units>>0]|0;
   $tobool = ($0<<24>>24)==(0);
   if ($tobool) {
    $retval$2 = -1;
   } else {
    HEAP8[$__in_units>>0] = 0;
    $1 = HEAP32[$__a_end>>2]|0;
    $incdec$ptr = ((($1)) + 1|0);
    HEAP32[$__a_end>>2] = $incdec$ptr;
    HEAP8[$1>>0] = 46;
    $__size_$i$i = ((($__grouping)) + 11|0);
    $2 = HEAP8[$__size_$i$i>>0]|0;
    $tobool$i$i = ($2<<24>>24)<(0);
    $__size_$i3$i = ((($__grouping)) + 4|0);
    $3 = HEAP32[$__size_$i3$i>>2]|0;
    $conv$i$i = $2&255;
    $cond$i = $tobool$i$i ? $3 : $conv$i$i;
    $cmp2 = ($cond$i|0)==(0);
    if ($cmp2) {
     $retval$2 = 0;
    } else {
     $4 = HEAP32[$__g_end>>2]|0;
     $sub$ptr$lhs$cast = $4;
     $sub$ptr$sub = (($sub$ptr$lhs$cast) - ($sub$ptr$rhs$cast))|0;
     $cmp3 = ($sub$ptr$sub|0)<(160);
     if ($cmp3) {
      $5 = HEAP32[$__dc>>2]|0;
      $incdec$ptr5 = ((($4)) + 4|0);
      HEAP32[$__g_end>>2] = $incdec$ptr5;
      HEAP32[$4>>2] = $5;
      $retval$2 = 0;
     } else {
      $retval$2 = 0;
     }
    }
   }
  } else {
   $cmp8 = ($__ct|0)==($__thousands_sep|0);
   if ($cmp8) {
    $__size_$i$i49 = ((($__grouping)) + 11|0);
    $6 = HEAP8[$__size_$i$i49>>0]|0;
    $tobool$i$i50 = ($6<<24>>24)<(0);
    $__size_$i3$i51 = ((($__grouping)) + 4|0);
    $7 = HEAP32[$__size_$i3$i51>>2]|0;
    $conv$i$i53 = $6&255;
    $cond$i55 = $tobool$i$i50 ? $7 : $conv$i$i53;
    $cmp11 = ($cond$i55|0)==(0);
    if (!($cmp11)) {
     $8 = HEAP8[$__in_units>>0]|0;
     $tobool13 = ($8<<24>>24)==(0);
     if ($tobool13) {
      $retval$2 = -1;
      break;
     }
     $9 = HEAP32[$__g_end>>2]|0;
     $sub$ptr$lhs$cast16 = $9;
     $sub$ptr$sub18 = (($sub$ptr$lhs$cast16) - ($sub$ptr$rhs$cast))|0;
     $cmp20 = ($sub$ptr$sub18|0)<(160);
     if (!($cmp20)) {
      $retval$2 = 0;
      break;
     }
     $10 = HEAP32[$__dc>>2]|0;
     $incdec$ptr22 = ((($9)) + 4|0);
     HEAP32[$__g_end>>2] = $incdec$ptr22;
     HEAP32[$9>>2] = $10;
     HEAP32[$__dc>>2] = 0;
     $retval$2 = 0;
     break;
    }
   }
   $add$ptr = ((($__atoms)) + 128|0);
   $__first$addr$0$i$idx = 0;
   while(1) {
    $__first$addr$0$i$ptr = (($__atoms) + ($__first$addr$0$i$idx<<2)|0);
    $cmp$i = ($__first$addr$0$i$idx|0)==(32);
    if ($cmp$i) {
     $__first$addr$0$lcssa$i = $add$ptr;
     break;
    }
    $11 = HEAP32[$__first$addr$0$i$ptr>>2]|0;
    $cmp1$i = ($11|0)==($__ct|0);
    $__first$addr$0$i$add = (($__first$addr$0$i$idx) + 1)|0;
    if ($cmp1$i) {
     $__first$addr$0$lcssa$i = $__first$addr$0$i$ptr;
     break;
    } else {
     $__first$addr$0$i$idx = $__first$addr$0$i$add;
    }
   }
   $sub$ptr$lhs$cast26 = $__first$addr$0$lcssa$i;
   $sub$ptr$rhs$cast27 = $__atoms;
   $sub$ptr$sub28 = (($sub$ptr$lhs$cast26) - ($sub$ptr$rhs$cast27))|0;
   $sub$ptr$div29 = $sub$ptr$sub28 >> 2;
   $cmp30 = ($sub$ptr$sub28|0)>(124);
   if ($cmp30) {
    $retval$2 = -1;
   } else {
    $arrayidx = (15690 + ($sub$ptr$div29)|0);
    $12 = HEAP8[$arrayidx>>0]|0;
    switch ($sub$ptr$div29|0) {
    case 24: case 25:  {
     $13 = HEAP32[$__a_end>>2]|0;
     $cmp37 = ($13|0)==($__a|0);
     if (!($cmp37)) {
      $arrayidx39 = ((($13)) + -1|0);
      $14 = HEAP8[$arrayidx39>>0]|0;
      $15 = $14 & 95;
      $16 = HEAP8[$__exp>>0]|0;
      $17 = $16 & 127;
      $cmp43 = ($15<<24>>24)==($17<<24>>24);
      if (!($cmp43)) {
       $retval$2 = -1;
       break L1;
      }
     }
     $incdec$ptr45 = ((($13)) + 1|0);
     HEAP32[$__a_end>>2] = $incdec$ptr45;
     HEAP8[$13>>0] = $12;
     $retval$2 = 0;
     break L1;
     break;
    }
    case 23: case 22:  {
     HEAP8[$__exp>>0] = 80;
     break;
    }
    default: {
     $18 = $12 & 95;
     $and55 = $18&255;
     $19 = HEAP8[$__exp>>0]|0;
     $conv56 = $19 << 24 >> 24;
     $cmp57 = ($and55|0)==($conv56|0);
     if ($cmp57) {
      $or = $and55 | 128;
      $conv60 = $or&255;
      HEAP8[$__exp>>0] = $conv60;
      $20 = HEAP8[$__in_units>>0]|0;
      $tobool61 = ($20<<24>>24)==(0);
      if (!($tobool61)) {
       HEAP8[$__in_units>>0] = 0;
       $__size_$i$i40 = ((($__grouping)) + 11|0);
       $21 = HEAP8[$__size_$i$i40>>0]|0;
       $tobool$i$i41 = ($21<<24>>24)<(0);
       $__size_$i3$i42 = ((($__grouping)) + 4|0);
       $22 = HEAP32[$__size_$i3$i42>>2]|0;
       $conv$i$i44 = $21&255;
       $cond$i46 = $tobool$i$i41 ? $22 : $conv$i$i44;
       $cmp64 = ($cond$i46|0)==(0);
       if (!($cmp64)) {
        $23 = HEAP32[$__g_end>>2]|0;
        $sub$ptr$lhs$cast66 = $23;
        $sub$ptr$sub68 = (($sub$ptr$lhs$cast66) - ($sub$ptr$rhs$cast))|0;
        $cmp70 = ($sub$ptr$sub68|0)<(160);
        if ($cmp70) {
         $24 = HEAP32[$__dc>>2]|0;
         $incdec$ptr72 = ((($23)) + 4|0);
         HEAP32[$__g_end>>2] = $incdec$ptr72;
         HEAP32[$23>>2] = $24;
        }
       }
      }
     }
    }
    }
    $25 = HEAP32[$__a_end>>2]|0;
    $incdec$ptr77 = ((($25)) + 1|0);
    HEAP32[$__a_end>>2] = $incdec$ptr77;
    HEAP8[$25>>0] = $12;
    $cmp78 = ($sub$ptr$sub28|0)>(84);
    if ($cmp78) {
     $retval$2 = 0;
    } else {
     $26 = HEAP32[$__dc>>2]|0;
     $inc = (($26) + 1)|0;
     HEAP32[$__dc>>2] = $inc;
     $retval$2 = 0;
    }
   }
  }
 } while(0);
 return ($retval$2|0);
}
function __ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE23__do_get_floating_pointIdEES4_S4_S4_RNS_8ios_baseERjRT_($this,$__b,$__e,$__iob,$__err,$__v) {
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$pre = 0, $$pre$i$i$i = 0, $$pre$i$i$i30 = 0, $$pre$i17$i$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $8 = 0, $9 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__a_end = 0, $__atoms = 0, $__buf = 0, $__cap_$i$i = 0, $__cap_$i$i86 = 0, $__dc = 0, $__decimal_point = 0, $__einp_$i$i = 0, $__einp_$i$i$i$i = 0, $__einp_$i$i$i$i18 = 0, $__einp_$i$i4$i$i = 0, $__einp_$i$i4$i$i38 = 0, $__exp = 0, $__g = 0;
 var $__g_end = 0, $__grouping = 0, $__i$0$i$i = 0, $__in_units = 0, $__ninp_$i$i = 0, $__ninp_$i$i$i$i = 0, $__ninp_$i$i$i$i17 = 0, $__ninp_$i$i3$i$i = 0, $__ninp_$i$i3$i$i37 = 0, $__size_$i$i = 0, $__size_$i$i116 = 0, $__size_$i3$i = 0, $__size_$i3$i118 = 0, $__thousands_sep = 0, $add$ptr = 0, $add$ptr17 = 0, $and$i$i = 0, $and$i$i87 = 0, $arrayidx$i$i = 0, $call$i$i$i$i12 = 0;
 var $call$i$i$i$i56 = 0, $call$i$i103 = 0, $call$i$i9$i$i13 = 0, $call$i$i9$i$i58 = 0, $call23 = 0, $call3$i$i = 0, $call3$i$i$i = 0, $call3$i$i$i$i = 0, $call3$i$i$i$i24 = 0, $call3$i$i$i27 = 0, $call3$i$i11$i$i = 0, $call3$i$i11$i$i44 = 0, $call3$i14$i$i = 0, $call3$i14$i$i47 = 0, $call37 = 0.0, $call4$i$i$i = 0, $call4$i$i$i28 = 0, $call4$i15$i$i = 0, $call4$i15$i$i48 = 0, $cmp = 0;
 var $cmp$i$i$i$i = 0, $cmp$i$i$i$i19 = 0, $cmp$i$i102 = 0, $cmp$i$i107 = 0, $cmp$i$i5$i$i = 0, $cmp$i$i5$i$i39 = 0, $cmp29 = 0, $cmp33 = 0, $cond$i = 0, $cond$i$i = 0, $cond$i$i100 = 0, $cond$i122 = 0, $cond$i63 = 0, $cond$i90 = 0, $conv$i$i = 0, $conv$i$i120 = 0, $ehselector$slot$1 = 0, $exitcond$i$i = 0, $exn$slot$1 = 0, $inc$i$i = 0;
 var $incdec$ptr = 0, $incdec$ptr$i$i = 0, $mul = 0, $or = 0, $or$cond = 0, $phitmp$i = 0, $phitmp$i88 = 0, $retval$0$i$i = 0, $retval$0$i$i$i$i = 0, $retval$0$i$i$i$i26 = 0, $retval$0$i$i13$i$i = 0, $retval$0$i$i13$i$i46 = 0, $retval$sroa$0$0$copyload = 0, $sub$ptr$lhs$cast = 0, $sub$ptr$rhs$cast = 0, $sub$ptr$sub = 0, $tobool = 0, $tobool$i$i = 0, $tobool$i$i$i = 0, $tobool$i$i$i14 = 0;
 var $tobool$i$i$i16 = 0, $tobool$i$i$i95 = 0, $tobool$i$i117 = 0, $tobool$i$i61 = 0, $tobool$i$i85 = 0, $tobool$i2$i$i = 0, $tobool$i2$i$i35 = 0, $tobool30 = 0, $vfn$i$i = 0, $vfn$i$i$i$i = 0, $vfn$i$i$i$i22 = 0, $vfn$i$i109 = 0, $vfn$i$i8$i$i = 0, $vfn$i$i8$i$i42 = 0, $vtable$i$i = 0, $vtable$i$i$i$i = 0, $vtable$i$i$i$i21 = 0, $vtable$i$i108 = 0, $vtable$i$i7$i$i = 0, $vtable$i$i7$i$i41 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 352|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(352|0);
 $__atoms = sp + 208|0;
 $__decimal_point = sp + 200|0;
 $__thousands_sep = sp + 196|0;
 $__grouping = sp + 184|0;
 $__buf = sp + 172|0;
 $__a_end = sp + 168|0;
 $__g = sp + 8|0;
 $__g_end = sp + 4|0;
 $__dc = sp;
 $__in_units = sp + 337|0;
 $__exp = sp + 336|0;
 __ZNSt3__29__num_getIwE19__stage2_float_prepERNS_8ios_baseEPwRwS5_($__grouping,$__iob,$__atoms,$__decimal_point,$__thousands_sep);
 ;HEAP32[$__buf>>2]=0|0;HEAP32[$__buf+4>>2]=0|0;HEAP32[$__buf+8>>2]=0|0;
 $__i$0$i$i = 0;
 while(1) {
  $exitcond$i$i = ($__i$0$i$i|0)==(3);
  if ($exitcond$i$i) {
   break;
  }
  $arrayidx$i$i = (($__buf) + ($__i$0$i$i<<2)|0);
  HEAP32[$arrayidx$i$i>>2] = 0;
  $inc$i$i = (($__i$0$i$i) + 1)|0;
  $__i$0$i$i = $inc$i$i;
 }
 $__size_$i$i = ((($__buf)) + 11|0);
 $0 = HEAP8[$__size_$i$i>>0]|0;
 $tobool$i$i = ($0<<24>>24)<(0);
 if ($tobool$i$i) {
  $__cap_$i$i = ((($__buf)) + 8|0);
  $1 = HEAP32[$__cap_$i$i>>2]|0;
  $and$i$i = $1 & 2147483647;
  $phitmp$i = (($and$i$i) + -1)|0;
  $cond$i = $phitmp$i;
 } else {
  $cond$i = 10;
 }
 __THREW__ = 0;
 invoke_viii(377,($__buf|0),($cond$i|0),0);
 $2 = __THREW__; __THREW__ = 0;
 $3 = $2&1;
 if ($3) {
  $30 = ___cxa_find_matching_catch_2()|0;
  $31 = tempRet0;
  $ehselector$slot$1 = $31;$exn$slot$1 = $30;
 } else {
  $4 = HEAP8[$__size_$i$i>>0]|0;
  $tobool$i$i$i14 = ($4<<24>>24)<(0);
  $5 = HEAP32[$__buf>>2]|0;
  $cond$i$i = $tobool$i$i$i14 ? $5 : $__buf;
  HEAP32[$__a_end>>2] = $cond$i$i;
  HEAP32[$__g_end>>2] = $__g;
  HEAP32[$__dc>>2] = 0;
  HEAP8[$__in_units>>0] = 1;
  HEAP8[$__exp>>0] = 69;
  $__size_$i3$i = ((($__buf)) + 4|0);
  $__cap_$i$i86 = ((($__buf)) + 8|0);
  $$pre = HEAP32[$__b>>2]|0;
  $$pre$i$i$i30 = $$pre;$75 = $$pre;$__a$0 = $cond$i$i;
  L11: while(1) {
   $tobool$i$i$i16 = ($$pre$i$i$i30|0)==(0|0);
   if ($tobool$i$i$i16) {
    $$pre$i$i$i = 0;$61 = 0;$76 = 1;
   } else {
    $__ninp_$i$i$i$i17 = ((($$pre$i$i$i30)) + 12|0);
    $6 = HEAP32[$__ninp_$i$i$i$i17>>2]|0;
    $__einp_$i$i$i$i18 = ((($$pre$i$i$i30)) + 16|0);
    $7 = HEAP32[$__einp_$i$i$i$i18>>2]|0;
    $cmp$i$i$i$i19 = ($6|0)==($7|0);
    if ($cmp$i$i$i$i19) {
     $vtable$i$i$i$i21 = HEAP32[$$pre$i$i$i30>>2]|0;
     $vfn$i$i$i$i22 = ((($vtable$i$i$i$i21)) + 36|0);
     $8 = HEAP32[$vfn$i$i$i$i22>>2]|0;
     __THREW__ = 0;
     $call$i$i$i$i56 = (invoke_ii($8|0,($$pre$i$i$i30|0))|0);
     $9 = __THREW__; __THREW__ = 0;
     $10 = $9&1;
     if ($10) {
      break;
     } else {
      $retval$0$i$i$i$i26 = $call$i$i$i$i56;
     }
    } else {
     $11 = HEAP32[$6>>2]|0;
     $call3$i$i$i$i24 = (__ZNSt3__211char_traitsIwE11to_int_typeEw($11)|0);
     $retval$0$i$i$i$i26 = $call3$i$i$i$i24;
    }
    $call3$i$i$i27 = (__ZNSt3__211char_traitsIwE3eofEv()|0);
    $call4$i$i$i28 = (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($retval$0$i$i$i$i26,$call3$i$i$i27)|0);
    if ($call4$i$i$i28) {
     HEAP32[$__b>>2] = 0;
     $$pre$i$i$i = 0;$61 = 0;$76 = 1;
    } else {
     $$pre$i$i$i = $$pre$i$i$i30;$61 = $75;$76 = 0;
    }
   }
   $12 = HEAP32[$__e>>2]|0;
   $tobool$i2$i$i35 = ($12|0)==(0|0);
   do {
    if ($tobool$i2$i$i35) {
     label = 20;
    } else {
     $__ninp_$i$i3$i$i37 = ((($12)) + 12|0);
     $13 = HEAP32[$__ninp_$i$i3$i$i37>>2]|0;
     $__einp_$i$i4$i$i38 = ((($12)) + 16|0);
     $14 = HEAP32[$__einp_$i$i4$i$i38>>2]|0;
     $cmp$i$i5$i$i39 = ($13|0)==($14|0);
     if ($cmp$i$i5$i$i39) {
      $vtable$i$i7$i$i41 = HEAP32[$12>>2]|0;
      $vfn$i$i8$i$i42 = ((($vtable$i$i7$i$i41)) + 36|0);
      $15 = HEAP32[$vfn$i$i8$i$i42>>2]|0;
      __THREW__ = 0;
      $call$i$i9$i$i58 = (invoke_ii($15|0,($12|0))|0);
      $16 = __THREW__; __THREW__ = 0;
      $17 = $16&1;
      if ($17) {
       break L11;
      } else {
       $retval$0$i$i13$i$i46 = $call$i$i9$i$i58;
      }
     } else {
      $18 = HEAP32[$13>>2]|0;
      $call3$i$i11$i$i44 = (__ZNSt3__211char_traitsIwE11to_int_typeEw($18)|0);
      $retval$0$i$i13$i$i46 = $call3$i$i11$i$i44;
     }
     $call3$i14$i$i47 = (__ZNSt3__211char_traitsIwE3eofEv()|0);
     $call4$i15$i$i48 = (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($retval$0$i$i13$i$i46,$call3$i14$i$i47)|0);
     if ($call4$i15$i$i48) {
      HEAP32[$__e>>2] = 0;
      label = 20;
      break;
     } else {
      if ($76) {
       $77 = $12;
       break;
      } else {
       $$pre$i17$i$i = $12;$__a$2 = $__a$0;
       label = 37;
       break L11;
      }
     }
    }
   } while(0);
   if ((label|0) == 20) {
    label = 0;
    if ($76) {
     $$pre$i17$i$i = 0;$__a$2 = $__a$0;
     label = 37;
     break;
    } else {
     $77 = 0;
    }
   }
   $19 = HEAP32[$__a_end>>2]|0;
   $20 = HEAP8[$__size_$i$i>>0]|0;
   $tobool$i$i61 = ($20<<24>>24)<(0);
   $21 = HEAP32[$__size_$i3$i>>2]|0;
   $conv$i$i = $20&255;
   $cond$i63 = $tobool$i$i61 ? $21 : $conv$i$i;
   $add$ptr = (($__a$0) + ($cond$i63)|0);
   $cmp = ($19|0)==($add$ptr|0);
   if ($cmp) {
    $mul = $cond$i63 << 1;
    __THREW__ = 0;
    invoke_viii(377,($__buf|0),($mul|0),0);
    $22 = __THREW__; __THREW__ = 0;
    $23 = $22&1;
    if ($23) {
     break;
    }
    $24 = HEAP8[$__size_$i$i>>0]|0;
    $tobool$i$i85 = ($24<<24>>24)<(0);
    if ($tobool$i$i85) {
     $25 = HEAP32[$__cap_$i$i86>>2]|0;
     $and$i$i87 = $25 & 2147483647;
     $phitmp$i88 = (($and$i$i87) + -1)|0;
     $cond$i90 = $phitmp$i88;
    } else {
     $cond$i90 = 10;
    }
    __THREW__ = 0;
    invoke_viii(377,($__buf|0),($cond$i90|0),0);
    $26 = __THREW__; __THREW__ = 0;
    $27 = $26&1;
    if ($27) {
     break;
    }
    $28 = HEAP8[$__size_$i$i>>0]|0;
    $tobool$i$i$i95 = ($28<<24>>24)<(0);
    $29 = HEAP32[$__buf>>2]|0;
    $cond$i$i100 = $tobool$i$i$i95 ? $29 : $__buf;
    $add$ptr17 = (($cond$i$i100) + ($cond$i63)|0);
    HEAP32[$__a_end>>2] = $add$ptr17;
    $__a$1 = $cond$i$i100;
   } else {
    $__a$1 = $__a$0;
   }
   $__ninp_$i$i = ((($$pre$i$i$i)) + 12|0);
   $32 = HEAP32[$__ninp_$i$i>>2]|0;
   $__einp_$i$i = ((($$pre$i$i$i)) + 16|0);
   $33 = HEAP32[$__einp_$i$i>>2]|0;
   $cmp$i$i102 = ($32|0)==($33|0);
   if ($cmp$i$i102) {
    $vtable$i$i = HEAP32[$$pre$i$i$i>>2]|0;
    $vfn$i$i = ((($vtable$i$i)) + 36|0);
    $34 = HEAP32[$vfn$i$i>>2]|0;
    __THREW__ = 0;
    $call$i$i103 = (invoke_ii($34|0,($$pre$i$i$i|0))|0);
    $35 = __THREW__; __THREW__ = 0;
    $36 = $35&1;
    if ($36) {
     break;
    } else {
     $retval$0$i$i = $call$i$i103;
    }
   } else {
    $37 = HEAP32[$32>>2]|0;
    $call3$i$i = (__ZNSt3__211char_traitsIwE11to_int_typeEw($37)|0);
    $retval$0$i$i = $call3$i$i;
   }
   $38 = HEAP32[$__decimal_point>>2]|0;
   $39 = HEAP32[$__thousands_sep>>2]|0;
   __THREW__ = 0;
   $call23 = (invoke_iiiiiiiiiiiii(412,($retval$0$i$i|0),($__in_units|0),($__exp|0),($__a$1|0),($__a_end|0),($38|0),($39|0),($__grouping|0),($__g|0),($__g_end|0),($__dc|0),($__atoms|0))|0);
   $40 = __THREW__; __THREW__ = 0;
   $41 = $40&1;
   if ($41) {
    break;
   }
   $tobool = ($call23|0)==(0);
   if (!($tobool)) {
    $$pre$i17$i$i = $77;$__a$2 = $__a$1;
    label = 37;
    break;
   }
   $42 = HEAP32[$__ninp_$i$i>>2]|0;
   $43 = HEAP32[$__einp_$i$i>>2]|0;
   $cmp$i$i107 = ($42|0)==($43|0);
   if ($cmp$i$i107) {
    $vtable$i$i108 = HEAP32[$$pre$i$i$i>>2]|0;
    $vfn$i$i109 = ((($vtable$i$i108)) + 40|0);
    $44 = HEAP32[$vfn$i$i109>>2]|0;
    __THREW__ = 0;
    (invoke_ii($44|0,($$pre$i$i$i|0))|0);
    $45 = __THREW__; __THREW__ = 0;
    $46 = $45&1;
    if ($46) {
     break;
    } else {
     $$pre$i$i$i30 = $$pre$i$i$i;$75 = $61;$__a$0 = $__a$1;
     continue;
    }
   } else {
    $incdec$ptr$i$i = ((($42)) + 4|0);
    HEAP32[$__ninp_$i$i>>2] = $incdec$ptr$i$i;
    $47 = HEAP32[$42>>2]|0;
    (__ZNSt3__211char_traitsIwE11to_int_typeEw($47)|0);
    $$pre$i$i$i30 = $$pre$i$i$i;$75 = $61;$__a$0 = $__a$1;
    continue;
   }
  }
  L50: do {
   if ((label|0) == 37) {
    $__size_$i$i116 = ((($__grouping)) + 11|0);
    $48 = HEAP8[$__size_$i$i116>>0]|0;
    $tobool$i$i117 = ($48<<24>>24)<(0);
    $__size_$i3$i118 = ((($__grouping)) + 4|0);
    $49 = HEAP32[$__size_$i3$i118>>2]|0;
    $conv$i$i120 = $48&255;
    $cond$i122 = $tobool$i$i117 ? $49 : $conv$i$i120;
    $cmp29 = ($cond$i122|0)==(0);
    $50 = HEAP8[$__in_units>>0]|0;
    $tobool30 = ($50<<24>>24)==(0);
    $or$cond = $cmp29 | $tobool30;
    if (!($or$cond)) {
     $51 = HEAP32[$__g_end>>2]|0;
     $sub$ptr$lhs$cast = $51;
     $sub$ptr$rhs$cast = $__g;
     $sub$ptr$sub = (($sub$ptr$lhs$cast) - ($sub$ptr$rhs$cast))|0;
     $cmp33 = ($sub$ptr$sub|0)<(160);
     if ($cmp33) {
      $52 = HEAP32[$__dc>>2]|0;
      $incdec$ptr = ((($51)) + 4|0);
      HEAP32[$__g_end>>2] = $incdec$ptr;
      HEAP32[$51>>2] = $52;
     }
    }
    $53 = HEAP32[$__a_end>>2]|0;
    __THREW__ = 0;
    $call37 = (+invoke_diii(401,($__a$2|0),($53|0),($__err|0)));
    $54 = __THREW__; __THREW__ = 0;
    $55 = $54&1;
    if (!($55)) {
     HEAPF64[$__v>>3] = $call37;
     $56 = HEAP32[$__g_end>>2]|0;
     __THREW__ = 0;
     invoke_viiii(400,($__grouping|0),($__g|0),($56|0),($__err|0));
     $57 = __THREW__; __THREW__ = 0;
     $58 = $57&1;
     if (!($58)) {
      $tobool$i$i$i = ($$pre$i$i$i|0)==(0|0);
      if ($tobool$i$i$i) {
       $78 = 1;
      } else {
       $__ninp_$i$i$i$i = ((($$pre$i$i$i)) + 12|0);
       $59 = HEAP32[$__ninp_$i$i$i$i>>2]|0;
       $__einp_$i$i$i$i = ((($$pre$i$i$i)) + 16|0);
       $60 = HEAP32[$__einp_$i$i$i$i>>2]|0;
       $cmp$i$i$i$i = ($59|0)==($60|0);
       if ($cmp$i$i$i$i) {
        $vtable$i$i$i$i = HEAP32[$61>>2]|0;
        $vfn$i$i$i$i = ((($vtable$i$i$i$i)) + 36|0);
        $62 = HEAP32[$vfn$i$i$i$i>>2]|0;
        __THREW__ = 0;
        $call$i$i$i$i12 = (invoke_ii($62|0,($$pre$i$i$i|0))|0);
        $63 = __THREW__; __THREW__ = 0;
        $64 = $63&1;
        if ($64) {
         break;
        } else {
         $retval$0$i$i$i$i = $call$i$i$i$i12;
        }
       } else {
        $65 = HEAP32[$59>>2]|0;
        $call3$i$i$i$i = (__ZNSt3__211char_traitsIwE11to_int_typeEw($65)|0);
        $retval$0$i$i$i$i = $call3$i$i$i$i;
       }
       $call3$i$i$i = (__ZNSt3__211char_traitsIwE3eofEv()|0);
       $call4$i$i$i = (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($retval$0$i$i$i$i,$call3$i$i$i)|0);
       if ($call4$i$i$i) {
        HEAP32[$__b>>2] = 0;
        $78 = 1;
       } else {
        $78 = 0;
       }
      }
      $tobool$i2$i$i = ($$pre$i17$i$i|0)==(0|0);
      do {
       if ($tobool$i2$i$i) {
        label = 54;
       } else {
        $__ninp_$i$i3$i$i = ((($$pre$i17$i$i)) + 12|0);
        $66 = HEAP32[$__ninp_$i$i3$i$i>>2]|0;
        $__einp_$i$i4$i$i = ((($$pre$i17$i$i)) + 16|0);
        $67 = HEAP32[$__einp_$i$i4$i$i>>2]|0;
        $cmp$i$i5$i$i = ($66|0)==($67|0);
        if ($cmp$i$i5$i$i) {
         $vtable$i$i7$i$i = HEAP32[$$pre$i17$i$i>>2]|0;
         $vfn$i$i8$i$i = ((($vtable$i$i7$i$i)) + 36|0);
         $68 = HEAP32[$vfn$i$i8$i$i>>2]|0;
         __THREW__ = 0;
         $call$i$i9$i$i13 = (invoke_ii($68|0,($$pre$i17$i$i|0))|0);
         $69 = __THREW__; __THREW__ = 0;
         $70 = $69&1;
         if ($70) {
          break L50;
         } else {
          $retval$0$i$i13$i$i = $call$i$i9$i$i13;
         }
        } else {
         $71 = HEAP32[$66>>2]|0;
         $call3$i$i11$i$i = (__ZNSt3__211char_traitsIwE11to_int_typeEw($71)|0);
         $retval$0$i$i13$i$i = $call3$i$i11$i$i;
        }
        $call3$i14$i$i = (__ZNSt3__211char_traitsIwE3eofEv()|0);
        $call4$i15$i$i = (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($retval$0$i$i13$i$i,$call3$i14$i$i)|0);
        if ($call4$i15$i$i) {
         HEAP32[$__e>>2] = 0;
         label = 54;
         break;
        } else {
         if ($78) {
          break;
         } else {
          label = 56;
          break;
         }
        }
       }
      } while(0);
      if ((label|0) == 54) {
       if ($78) {
        label = 56;
       }
      }
      if ((label|0) == 56) {
       $72 = HEAP32[$__err>>2]|0;
       $or = $72 | 2;
       HEAP32[$__err>>2] = $or;
      }
      $retval$sroa$0$0$copyload = HEAP32[$__b>>2]|0;
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__buf);
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grouping);
      STACKTOP = sp;return ($retval$sroa$0$0$copyload|0);
     }
    }
   }
  } while(0);
  $73 = ___cxa_find_matching_catch_2()|0;
  $74 = tempRet0;
  $ehselector$slot$1 = $74;$exn$slot$1 = $73;
 }
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__buf);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grouping);
 ___resumeException($exn$slot$1|0);
 // unreachable;
 return (0)|0;
}
function __ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE23__do_get_floating_pointIfEES4_S4_S4_RNS_8ios_baseERjRT_($this,$__b,$__e,$__iob,$__err,$__v) {
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$pre = 0, $$pre$i$i$i = 0, $$pre$i$i$i30 = 0, $$pre$i17$i$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $8 = 0, $9 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__a_end = 0, $__atoms = 0, $__buf = 0, $__cap_$i$i = 0, $__cap_$i$i86 = 0, $__dc = 0, $__decimal_point = 0, $__einp_$i$i = 0, $__einp_$i$i$i$i = 0, $__einp_$i$i$i$i18 = 0, $__einp_$i$i4$i$i = 0, $__einp_$i$i4$i$i38 = 0, $__exp = 0, $__g = 0;
 var $__g_end = 0, $__grouping = 0, $__i$0$i$i = 0, $__in_units = 0, $__ninp_$i$i = 0, $__ninp_$i$i$i$i = 0, $__ninp_$i$i$i$i17 = 0, $__ninp_$i$i3$i$i = 0, $__ninp_$i$i3$i$i37 = 0, $__size_$i$i = 0, $__size_$i$i116 = 0, $__size_$i3$i = 0, $__size_$i3$i118 = 0, $__thousands_sep = 0, $add$ptr = 0, $add$ptr17 = 0, $and$i$i = 0, $and$i$i87 = 0, $arrayidx$i$i = 0, $call$i$i$i$i12 = 0;
 var $call$i$i$i$i56 = 0, $call$i$i103 = 0, $call$i$i9$i$i13 = 0, $call$i$i9$i$i58 = 0, $call23 = 0, $call3$i$i = 0, $call3$i$i$i = 0, $call3$i$i$i$i = 0, $call3$i$i$i$i24 = 0, $call3$i$i$i27 = 0, $call3$i$i11$i$i = 0, $call3$i$i11$i$i44 = 0, $call3$i14$i$i = 0, $call3$i14$i$i47 = 0, $call37 = 0.0, $call4$i$i$i = 0, $call4$i$i$i28 = 0, $call4$i15$i$i = 0, $call4$i15$i$i48 = 0, $cmp = 0;
 var $cmp$i$i$i$i = 0, $cmp$i$i$i$i19 = 0, $cmp$i$i102 = 0, $cmp$i$i107 = 0, $cmp$i$i5$i$i = 0, $cmp$i$i5$i$i39 = 0, $cmp29 = 0, $cmp33 = 0, $cond$i = 0, $cond$i$i = 0, $cond$i$i100 = 0, $cond$i122 = 0, $cond$i63 = 0, $cond$i90 = 0, $conv$i$i = 0, $conv$i$i120 = 0, $ehselector$slot$1 = 0, $exitcond$i$i = 0, $exn$slot$1 = 0, $inc$i$i = 0;
 var $incdec$ptr = 0, $incdec$ptr$i$i = 0, $mul = 0, $or = 0, $or$cond = 0, $phitmp$i = 0, $phitmp$i88 = 0, $retval$0$i$i = 0, $retval$0$i$i$i$i = 0, $retval$0$i$i$i$i26 = 0, $retval$0$i$i13$i$i = 0, $retval$0$i$i13$i$i46 = 0, $retval$sroa$0$0$copyload = 0, $sub$ptr$lhs$cast = 0, $sub$ptr$rhs$cast = 0, $sub$ptr$sub = 0, $tobool = 0, $tobool$i$i = 0, $tobool$i$i$i = 0, $tobool$i$i$i14 = 0;
 var $tobool$i$i$i16 = 0, $tobool$i$i$i95 = 0, $tobool$i$i117 = 0, $tobool$i$i61 = 0, $tobool$i$i85 = 0, $tobool$i2$i$i = 0, $tobool$i2$i$i35 = 0, $tobool30 = 0, $vfn$i$i = 0, $vfn$i$i$i$i = 0, $vfn$i$i$i$i22 = 0, $vfn$i$i109 = 0, $vfn$i$i8$i$i = 0, $vfn$i$i8$i$i42 = 0, $vtable$i$i = 0, $vtable$i$i$i$i = 0, $vtable$i$i$i$i21 = 0, $vtable$i$i108 = 0, $vtable$i$i7$i$i = 0, $vtable$i$i7$i$i41 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 352|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(352|0);
 $__atoms = sp + 208|0;
 $__decimal_point = sp + 200|0;
 $__thousands_sep = sp + 196|0;
 $__grouping = sp + 184|0;
 $__buf = sp + 172|0;
 $__a_end = sp + 168|0;
 $__g = sp + 8|0;
 $__g_end = sp + 4|0;
 $__dc = sp;
 $__in_units = sp + 337|0;
 $__exp = sp + 336|0;
 __ZNSt3__29__num_getIwE19__stage2_float_prepERNS_8ios_baseEPwRwS5_($__grouping,$__iob,$__atoms,$__decimal_point,$__thousands_sep);
 ;HEAP32[$__buf>>2]=0|0;HEAP32[$__buf+4>>2]=0|0;HEAP32[$__buf+8>>2]=0|0;
 $__i$0$i$i = 0;
 while(1) {
  $exitcond$i$i = ($__i$0$i$i|0)==(3);
  if ($exitcond$i$i) {
   break;
  }
  $arrayidx$i$i = (($__buf) + ($__i$0$i$i<<2)|0);
  HEAP32[$arrayidx$i$i>>2] = 0;
  $inc$i$i = (($__i$0$i$i) + 1)|0;
  $__i$0$i$i = $inc$i$i;
 }
 $__size_$i$i = ((($__buf)) + 11|0);
 $0 = HEAP8[$__size_$i$i>>0]|0;
 $tobool$i$i = ($0<<24>>24)<(0);
 if ($tobool$i$i) {
  $__cap_$i$i = ((($__buf)) + 8|0);
  $1 = HEAP32[$__cap_$i$i>>2]|0;
  $and$i$i = $1 & 2147483647;
  $phitmp$i = (($and$i$i) + -1)|0;
  $cond$i = $phitmp$i;
 } else {
  $cond$i = 10;
 }
 __THREW__ = 0;
 invoke_viii(377,($__buf|0),($cond$i|0),0);
 $2 = __THREW__; __THREW__ = 0;
 $3 = $2&1;
 if ($3) {
  $30 = ___cxa_find_matching_catch_2()|0;
  $31 = tempRet0;
  $ehselector$slot$1 = $31;$exn$slot$1 = $30;
 } else {
  $4 = HEAP8[$__size_$i$i>>0]|0;
  $tobool$i$i$i14 = ($4<<24>>24)<(0);
  $5 = HEAP32[$__buf>>2]|0;
  $cond$i$i = $tobool$i$i$i14 ? $5 : $__buf;
  HEAP32[$__a_end>>2] = $cond$i$i;
  HEAP32[$__g_end>>2] = $__g;
  HEAP32[$__dc>>2] = 0;
  HEAP8[$__in_units>>0] = 1;
  HEAP8[$__exp>>0] = 69;
  $__size_$i3$i = ((($__buf)) + 4|0);
  $__cap_$i$i86 = ((($__buf)) + 8|0);
  $$pre = HEAP32[$__b>>2]|0;
  $$pre$i$i$i30 = $$pre;$75 = $$pre;$__a$0 = $cond$i$i;
  L11: while(1) {
   $tobool$i$i$i16 = ($$pre$i$i$i30|0)==(0|0);
   if ($tobool$i$i$i16) {
    $$pre$i$i$i = 0;$61 = 0;$76 = 1;
   } else {
    $__ninp_$i$i$i$i17 = ((($$pre$i$i$i30)) + 12|0);
    $6 = HEAP32[$__ninp_$i$i$i$i17>>2]|0;
    $__einp_$i$i$i$i18 = ((($$pre$i$i$i30)) + 16|0);
    $7 = HEAP32[$__einp_$i$i$i$i18>>2]|0;
    $cmp$i$i$i$i19 = ($6|0)==($7|0);
    if ($cmp$i$i$i$i19) {
     $vtable$i$i$i$i21 = HEAP32[$$pre$i$i$i30>>2]|0;
     $vfn$i$i$i$i22 = ((($vtable$i$i$i$i21)) + 36|0);
     $8 = HEAP32[$vfn$i$i$i$i22>>2]|0;
     __THREW__ = 0;
     $call$i$i$i$i56 = (invoke_ii($8|0,($$pre$i$i$i30|0))|0);
     $9 = __THREW__; __THREW__ = 0;
     $10 = $9&1;
     if ($10) {
      break;
     } else {
      $retval$0$i$i$i$i26 = $call$i$i$i$i56;
     }
    } else {
     $11 = HEAP32[$6>>2]|0;
     $call3$i$i$i$i24 = (__ZNSt3__211char_traitsIwE11to_int_typeEw($11)|0);
     $retval$0$i$i$i$i26 = $call3$i$i$i$i24;
    }
    $call3$i$i$i27 = (__ZNSt3__211char_traitsIwE3eofEv()|0);
    $call4$i$i$i28 = (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($retval$0$i$i$i$i26,$call3$i$i$i27)|0);
    if ($call4$i$i$i28) {
     HEAP32[$__b>>2] = 0;
     $$pre$i$i$i = 0;$61 = 0;$76 = 1;
    } else {
     $$pre$i$i$i = $$pre$i$i$i30;$61 = $75;$76 = 0;
    }
   }
   $12 = HEAP32[$__e>>2]|0;
   $tobool$i2$i$i35 = ($12|0)==(0|0);
   do {
    if ($tobool$i2$i$i35) {
     label = 20;
    } else {
     $__ninp_$i$i3$i$i37 = ((($12)) + 12|0);
     $13 = HEAP32[$__ninp_$i$i3$i$i37>>2]|0;
     $__einp_$i$i4$i$i38 = ((($12)) + 16|0);
     $14 = HEAP32[$__einp_$i$i4$i$i38>>2]|0;
     $cmp$i$i5$i$i39 = ($13|0)==($14|0);
     if ($cmp$i$i5$i$i39) {
      $vtable$i$i7$i$i41 = HEAP32[$12>>2]|0;
      $vfn$i$i8$i$i42 = ((($vtable$i$i7$i$i41)) + 36|0);
      $15 = HEAP32[$vfn$i$i8$i$i42>>2]|0;
      __THREW__ = 0;
      $call$i$i9$i$i58 = (invoke_ii($15|0,($12|0))|0);
      $16 = __THREW__; __THREW__ = 0;
      $17 = $16&1;
      if ($17) {
       break L11;
      } else {
       $retval$0$i$i13$i$i46 = $call$i$i9$i$i58;
      }
     } else {
      $18 = HEAP32[$13>>2]|0;
      $call3$i$i11$i$i44 = (__ZNSt3__211char_traitsIwE11to_int_typeEw($18)|0);
      $retval$0$i$i13$i$i46 = $call3$i$i11$i$i44;
     }
     $call3$i14$i$i47 = (__ZNSt3__211char_traitsIwE3eofEv()|0);
     $call4$i15$i$i48 = (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($retval$0$i$i13$i$i46,$call3$i14$i$i47)|0);
     if ($call4$i15$i$i48) {
      HEAP32[$__e>>2] = 0;
      label = 20;
      break;
     } else {
      if ($76) {
       $77 = $12;
       break;
      } else {
       $$pre$i17$i$i = $12;$__a$2 = $__a$0;
       label = 37;
       break L11;
      }
     }
    }
   } while(0);
   if ((label|0) == 20) {
    label = 0;
    if ($76) {
     $$pre$i17$i$i = 0;$__a$2 = $__a$0;
     label = 37;
     break;
    } else {
     $77 = 0;
    }
   }
   $19 = HEAP32[$__a_end>>2]|0;
   $20 = HEAP8[$__size_$i$i>>0]|0;
   $tobool$i$i61 = ($20<<24>>24)<(0);
   $21 = HEAP32[$__size_$i3$i>>2]|0;
   $conv$i$i = $20&255;
   $cond$i63 = $tobool$i$i61 ? $21 : $conv$i$i;
   $add$ptr = (($__a$0) + ($cond$i63)|0);
   $cmp = ($19|0)==($add$ptr|0);
   if ($cmp) {
    $mul = $cond$i63 << 1;
    __THREW__ = 0;
    invoke_viii(377,($__buf|0),($mul|0),0);
    $22 = __THREW__; __THREW__ = 0;
    $23 = $22&1;
    if ($23) {
     break;
    }
    $24 = HEAP8[$__size_$i$i>>0]|0;
    $tobool$i$i85 = ($24<<24>>24)<(0);
    if ($tobool$i$i85) {
     $25 = HEAP32[$__cap_$i$i86>>2]|0;
     $and$i$i87 = $25 & 2147483647;
     $phitmp$i88 = (($and$i$i87) + -1)|0;
     $cond$i90 = $phitmp$i88;
    } else {
     $cond$i90 = 10;
    }
    __THREW__ = 0;
    invoke_viii(377,($__buf|0),($cond$i90|0),0);
    $26 = __THREW__; __THREW__ = 0;
    $27 = $26&1;
    if ($27) {
     break;
    }
    $28 = HEAP8[$__size_$i$i>>0]|0;
    $tobool$i$i$i95 = ($28<<24>>24)<(0);
    $29 = HEAP32[$__buf>>2]|0;
    $cond$i$i100 = $tobool$i$i$i95 ? $29 : $__buf;
    $add$ptr17 = (($cond$i$i100) + ($cond$i63)|0);
    HEAP32[$__a_end>>2] = $add$ptr17;
    $__a$1 = $cond$i$i100;
   } else {
    $__a$1 = $__a$0;
   }
   $__ninp_$i$i = ((($$pre$i$i$i)) + 12|0);
   $32 = HEAP32[$__ninp_$i$i>>2]|0;
   $__einp_$i$i = ((($$pre$i$i$i)) + 16|0);
   $33 = HEAP32[$__einp_$i$i>>2]|0;
   $cmp$i$i102 = ($32|0)==($33|0);
   if ($cmp$i$i102) {
    $vtable$i$i = HEAP32[$$pre$i$i$i>>2]|0;
    $vfn$i$i = ((($vtable$i$i)) + 36|0);
    $34 = HEAP32[$vfn$i$i>>2]|0;
    __THREW__ = 0;
    $call$i$i103 = (invoke_ii($34|0,($$pre$i$i$i|0))|0);
    $35 = __THREW__; __THREW__ = 0;
    $36 = $35&1;
    if ($36) {
     break;
    } else {
     $retval$0$i$i = $call$i$i103;
    }
   } else {
    $37 = HEAP32[$32>>2]|0;
    $call3$i$i = (__ZNSt3__211char_traitsIwE11to_int_typeEw($37)|0);
    $retval$0$i$i = $call3$i$i;
   }
   $38 = HEAP32[$__decimal_point>>2]|0;
   $39 = HEAP32[$__thousands_sep>>2]|0;
   __THREW__ = 0;
   $call23 = (invoke_iiiiiiiiiiiii(412,($retval$0$i$i|0),($__in_units|0),($__exp|0),($__a$1|0),($__a_end|0),($38|0),($39|0),($__grouping|0),($__g|0),($__g_end|0),($__dc|0),($__atoms|0))|0);
   $40 = __THREW__; __THREW__ = 0;
   $41 = $40&1;
   if ($41) {
    break;
   }
   $tobool = ($call23|0)==(0);
   if (!($tobool)) {
    $$pre$i17$i$i = $77;$__a$2 = $__a$1;
    label = 37;
    break;
   }
   $42 = HEAP32[$__ninp_$i$i>>2]|0;
   $43 = HEAP32[$__einp_$i$i>>2]|0;
   $cmp$i$i107 = ($42|0)==($43|0);
   if ($cmp$i$i107) {
    $vtable$i$i108 = HEAP32[$$pre$i$i$i>>2]|0;
    $vfn$i$i109 = ((($vtable$i$i108)) + 40|0);
    $44 = HEAP32[$vfn$i$i109>>2]|0;
    __THREW__ = 0;
    (invoke_ii($44|0,($$pre$i$i$i|0))|0);
    $45 = __THREW__; __THREW__ = 0;
    $46 = $45&1;
    if ($46) {
     break;
    } else {
     $$pre$i$i$i30 = $$pre$i$i$i;$75 = $61;$__a$0 = $__a$1;
     continue;
    }
   } else {
    $incdec$ptr$i$i = ((($42)) + 4|0);
    HEAP32[$__ninp_$i$i>>2] = $incdec$ptr$i$i;
    $47 = HEAP32[$42>>2]|0;
    (__ZNSt3__211char_traitsIwE11to_int_typeEw($47)|0);
    $$pre$i$i$i30 = $$pre$i$i$i;$75 = $61;$__a$0 = $__a$1;
    continue;
   }
  }
  L50: do {
   if ((label|0) == 37) {
    $__size_$i$i116 = ((($__grouping)) + 11|0);
    $48 = HEAP8[$__size_$i$i116>>0]|0;
    $tobool$i$i117 = ($48<<24>>24)<(0);
    $__size_$i3$i118 = ((($__grouping)) + 4|0);
    $49 = HEAP32[$__size_$i3$i118>>2]|0;
    $conv$i$i120 = $48&255;
    $cond$i122 = $tobool$i$i117 ? $49 : $conv$i$i120;
    $cmp29 = ($cond$i122|0)==(0);
    $50 = HEAP8[$__in_units>>0]|0;
    $tobool30 = ($50<<24>>24)==(0);
    $or$cond = $cmp29 | $tobool30;
    if (!($or$cond)) {
     $51 = HEAP32[$__g_end>>2]|0;
     $sub$ptr$lhs$cast = $51;
     $sub$ptr$rhs$cast = $__g;
     $sub$ptr$sub = (($sub$ptr$lhs$cast) - ($sub$ptr$rhs$cast))|0;
     $cmp33 = ($sub$ptr$sub|0)<(160);
     if ($cmp33) {
      $52 = HEAP32[$__dc>>2]|0;
      $incdec$ptr = ((($51)) + 4|0);
      HEAP32[$__g_end>>2] = $incdec$ptr;
      HEAP32[$51>>2] = $52;
     }
    }
    $53 = HEAP32[$__a_end>>2]|0;
    __THREW__ = 0;
    $call37 = (+invoke_diii(402,($__a$2|0),($53|0),($__err|0)));
    $54 = __THREW__; __THREW__ = 0;
    $55 = $54&1;
    if (!($55)) {
     HEAPF32[$__v>>2] = $call37;
     $56 = HEAP32[$__g_end>>2]|0;
     __THREW__ = 0;
     invoke_viiii(400,($__grouping|0),($__g|0),($56|0),($__err|0));
     $57 = __THREW__; __THREW__ = 0;
     $58 = $57&1;
     if (!($58)) {
      $tobool$i$i$i = ($$pre$i$i$i|0)==(0|0);
      if ($tobool$i$i$i) {
       $78 = 1;
      } else {
       $__ninp_$i$i$i$i = ((($$pre$i$i$i)) + 12|0);
       $59 = HEAP32[$__ninp_$i$i$i$i>>2]|0;
       $__einp_$i$i$i$i = ((($$pre$i$i$i)) + 16|0);
       $60 = HEAP32[$__einp_$i$i$i$i>>2]|0;
       $cmp$i$i$i$i = ($59|0)==($60|0);
       if ($cmp$i$i$i$i) {
        $vtable$i$i$i$i = HEAP32[$61>>2]|0;
        $vfn$i$i$i$i = ((($vtable$i$i$i$i)) + 36|0);
        $62 = HEAP32[$vfn$i$i$i$i>>2]|0;
        __THREW__ = 0;
        $call$i$i$i$i12 = (invoke_ii($62|0,($$pre$i$i$i|0))|0);
        $63 = __THREW__; __THREW__ = 0;
        $64 = $63&1;
        if ($64) {
         break;
        } else {
         $retval$0$i$i$i$i = $call$i$i$i$i12;
        }
       } else {
        $65 = HEAP32[$59>>2]|0;
        $call3$i$i$i$i = (__ZNSt3__211char_traitsIwE11to_int_typeEw($65)|0);
        $retval$0$i$i$i$i = $call3$i$i$i$i;
       }
       $call3$i$i$i = (__ZNSt3__211char_traitsIwE3eofEv()|0);
       $call4$i$i$i = (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($retval$0$i$i$i$i,$call3$i$i$i)|0);
       if ($call4$i$i$i) {
        HEAP32[$__b>>2] = 0;
        $78 = 1;
       } else {
        $78 = 0;
       }
      }
      $tobool$i2$i$i = ($$pre$i17$i$i|0)==(0|0);
      do {
       if ($tobool$i2$i$i) {
        label = 54;
       } else {
        $__ninp_$i$i3$i$i = ((($$pre$i17$i$i)) + 12|0);
        $66 = HEAP32[$__ninp_$i$i3$i$i>>2]|0;
        $__einp_$i$i4$i$i = ((($$pre$i17$i$i)) + 16|0);
        $67 = HEAP32[$__einp_$i$i4$i$i>>2]|0;
        $cmp$i$i5$i$i = ($66|0)==($67|0);
        if ($cmp$i$i5$i$i) {
         $vtable$i$i7$i$i = HEAP32[$$pre$i17$i$i>>2]|0;
         $vfn$i$i8$i$i = ((($vtable$i$i7$i$i)) + 36|0);
         $68 = HEAP32[$vfn$i$i8$i$i>>2]|0;
         __THREW__ = 0;
         $call$i$i9$i$i13 = (invoke_ii($68|0,($$pre$i17$i$i|0))|0);
         $69 = __THREW__; __THREW__ = 0;
         $70 = $69&1;
         if ($70) {
          break L50;
         } else {
          $retval$0$i$i13$i$i = $call$i$i9$i$i13;
         }
        } else {
         $71 = HEAP32[$66>>2]|0;
         $call3$i$i11$i$i = (__ZNSt3__211char_traitsIwE11to_int_typeEw($71)|0);
         $retval$0$i$i13$i$i = $call3$i$i11$i$i;
        }
        $call3$i14$i$i = (__ZNSt3__211char_traitsIwE3eofEv()|0);
        $call4$i15$i$i = (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($retval$0$i$i13$i$i,$call3$i14$i$i)|0);
        if ($call4$i15$i$i) {
         HEAP32[$__e>>2] = 0;
         label = 54;
         break;
        } else {
         if ($78) {
          break;
         } else {
          label = 56;
          break;
         }
        }
       }
      } while(0);
      if ((label|0) == 54) {
       if ($78) {
        label = 56;
       }
      }
      if ((label|0) == 56) {
       $72 = HEAP32[$__err>>2]|0;
       $or = $72 | 2;
       HEAP32[$__err>>2] = $or;
      }
      $retval$sroa$0$0$copyload = HEAP32[$__b>>2]|0;
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__buf);
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grouping);
      STACKTOP = sp;return ($retval$sroa$0$0$copyload|0);
     }
    }
   }
  } while(0);
  $73 = ___cxa_find_matching_catch_2()|0;
  $74 = tempRet0;
  $ehselector$slot$1 = $74;$exn$slot$1 = $73;
 }
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__buf);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grouping);
 ___resumeException($exn$slot$1|0);
 // unreachable;
 return (0)|0;
}
function __ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__do_get_unsignedIyEES4_S4_S4_RNS_8ios_baseERjRT_($this,$__b,$__e,$__iob,$__err,$__v) {
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$pre = 0, $$pre$i$i$i = 0, $$pre$i$i$i34 = 0, $$pre$i17$i$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $9 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__a_end = 0, $__atoms = 0, $__buf = 0, $__cap_$i$i = 0, $__cap_$i$i90 = 0, $__dc = 0, $__einp_$i$i = 0, $__einp_$i$i$i$i = 0, $__einp_$i$i$i$i22 = 0, $__einp_$i$i4$i$i = 0;
 var $__einp_$i$i4$i$i42 = 0, $__g = 0, $__g_end = 0, $__grouping = 0, $__i$0$i$i = 0, $__ninp_$i$i = 0, $__ninp_$i$i$i$i = 0, $__ninp_$i$i$i$i21 = 0, $__ninp_$i$i3$i$i = 0, $__ninp_$i$i3$i$i41 = 0, $__size_$i$i = 0, $__size_$i$i120 = 0, $__size_$i3$i = 0, $__size_$i3$i122 = 0, $__thousands_sep = 0, $add$ptr = 0, $add$ptr18 = 0, $and$i$i = 0, $and$i$i91 = 0, $arrayidx$i$i = 0;
 var $call = 0, $call$i$i$i$i16 = 0, $call$i$i$i$i60 = 0, $call$i$i107 = 0, $call$i$i9$i$i17 = 0, $call$i$i9$i$i62 = 0, $call24 = 0, $call3$i$i = 0, $call3$i$i$i = 0, $call3$i$i$i$i = 0, $call3$i$i$i$i28 = 0, $call3$i$i$i31 = 0, $call3$i$i11$i$i = 0, $call3$i$i11$i$i48 = 0, $call3$i14$i$i = 0, $call3$i14$i$i51 = 0, $call4$i$i$i = 0, $call4$i$i$i32 = 0, $call4$i15$i$i = 0, $call4$i15$i$i52 = 0;
 var $cmp = 0, $cmp$i$i$i$i = 0, $cmp$i$i$i$i23 = 0, $cmp$i$i106 = 0, $cmp$i$i111 = 0, $cmp$i$i5$i$i = 0, $cmp$i$i5$i$i43 = 0, $cmp30 = 0, $cmp32 = 0, $cond$i = 0, $cond$i$i = 0, $cond$i$i104 = 0, $cond$i126 = 0, $cond$i67 = 0, $cond$i94 = 0, $conv$i$i = 0, $conv$i$i124 = 0, $ehselector$slot$1 = 0, $exitcond$i$i = 0, $exn$slot$1 = 0;
 var $inc$i$i = 0, $incdec$ptr = 0, $incdec$ptr$i$i = 0, $mul = 0, $or = 0, $phitmp$i = 0, $phitmp$i92 = 0, $retval$0$i$i = 0, $retval$0$i$i$i$i = 0, $retval$0$i$i$i$i30 = 0, $retval$0$i$i13$i$i = 0, $retval$0$i$i13$i$i50 = 0, $retval$sroa$0$0$copyload = 0, $sub$ptr$lhs$cast = 0, $sub$ptr$rhs$cast = 0, $sub$ptr$sub = 0, $tobool = 0, $tobool$i$i = 0, $tobool$i$i$i = 0, $tobool$i$i$i18 = 0;
 var $tobool$i$i$i20 = 0, $tobool$i$i$i99 = 0, $tobool$i$i121 = 0, $tobool$i$i65 = 0, $tobool$i$i89 = 0, $tobool$i2$i$i = 0, $tobool$i2$i$i39 = 0, $vfn$i$i = 0, $vfn$i$i$i$i = 0, $vfn$i$i$i$i26 = 0, $vfn$i$i113 = 0, $vfn$i$i8$i$i = 0, $vfn$i$i8$i$i46 = 0, $vtable$i$i = 0, $vtable$i$i$i$i = 0, $vtable$i$i$i$i25 = 0, $vtable$i$i112 = 0, $vtable$i$i7$i$i = 0, $vtable$i$i7$i$i45 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 304|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(304|0);
 $__atoms = sp + 200|0;
 $__thousands_sep = sp + 196|0;
 $__grouping = sp + 184|0;
 $__buf = sp + 172|0;
 $__a_end = sp + 168|0;
 $__g = sp + 8|0;
 $__g_end = sp + 4|0;
 $__dc = sp;
 $call = (__ZNSt3__214__num_get_base10__get_baseERNS_8ios_baseE($__iob)|0);
 __ZNSt3__29__num_getIwE17__stage2_int_prepERNS_8ios_baseEPwRw($__grouping,$__iob,$__atoms,$__thousands_sep);
 ;HEAP32[$__buf>>2]=0|0;HEAP32[$__buf+4>>2]=0|0;HEAP32[$__buf+8>>2]=0|0;
 $__i$0$i$i = 0;
 while(1) {
  $exitcond$i$i = ($__i$0$i$i|0)==(3);
  if ($exitcond$i$i) {
   break;
  }
  $arrayidx$i$i = (($__buf) + ($__i$0$i$i<<2)|0);
  HEAP32[$arrayidx$i$i>>2] = 0;
  $inc$i$i = (($__i$0$i$i) + 1)|0;
  $__i$0$i$i = $inc$i$i;
 }
 $__size_$i$i = ((($__buf)) + 11|0);
 $0 = HEAP8[$__size_$i$i>>0]|0;
 $tobool$i$i = ($0<<24>>24)<(0);
 if ($tobool$i$i) {
  $__cap_$i$i = ((($__buf)) + 8|0);
  $1 = HEAP32[$__cap_$i$i>>2]|0;
  $and$i$i = $1 & 2147483647;
  $phitmp$i = (($and$i$i) + -1)|0;
  $cond$i = $phitmp$i;
 } else {
  $cond$i = 10;
 }
 __THREW__ = 0;
 invoke_viii(377,($__buf|0),($cond$i|0),0);
 $2 = __THREW__; __THREW__ = 0;
 $3 = $2&1;
 if ($3) {
  $30 = ___cxa_find_matching_catch_2()|0;
  $31 = tempRet0;
  $ehselector$slot$1 = $31;$exn$slot$1 = $30;
 } else {
  $4 = HEAP8[$__size_$i$i>>0]|0;
  $tobool$i$i$i18 = ($4<<24>>24)<(0);
  $5 = HEAP32[$__buf>>2]|0;
  $cond$i$i = $tobool$i$i$i18 ? $5 : $__buf;
  HEAP32[$__a_end>>2] = $cond$i$i;
  HEAP32[$__g_end>>2] = $__g;
  HEAP32[$__dc>>2] = 0;
  $__size_$i3$i = ((($__buf)) + 4|0);
  $__cap_$i$i90 = ((($__buf)) + 8|0);
  $$pre = HEAP32[$__b>>2]|0;
  $$pre$i$i$i34 = $$pre;$79 = $$pre;$__a$0 = $cond$i$i;
  L11: while(1) {
   $tobool$i$i$i20 = ($$pre$i$i$i34|0)==(0|0);
   if ($tobool$i$i$i20) {
    $$pre$i$i$i = 0;$65 = 0;$80 = 1;
   } else {
    $__ninp_$i$i$i$i21 = ((($$pre$i$i$i34)) + 12|0);
    $6 = HEAP32[$__ninp_$i$i$i$i21>>2]|0;
    $__einp_$i$i$i$i22 = ((($$pre$i$i$i34)) + 16|0);
    $7 = HEAP32[$__einp_$i$i$i$i22>>2]|0;
    $cmp$i$i$i$i23 = ($6|0)==($7|0);
    if ($cmp$i$i$i$i23) {
     $vtable$i$i$i$i25 = HEAP32[$$pre$i$i$i34>>2]|0;
     $vfn$i$i$i$i26 = ((($vtable$i$i$i$i25)) + 36|0);
     $8 = HEAP32[$vfn$i$i$i$i26>>2]|0;
     __THREW__ = 0;
     $call$i$i$i$i60 = (invoke_ii($8|0,($$pre$i$i$i34|0))|0);
     $9 = __THREW__; __THREW__ = 0;
     $10 = $9&1;
     if ($10) {
      break;
     } else {
      $retval$0$i$i$i$i30 = $call$i$i$i$i60;
     }
    } else {
     $11 = HEAP32[$6>>2]|0;
     $call3$i$i$i$i28 = (__ZNSt3__211char_traitsIwE11to_int_typeEw($11)|0);
     $retval$0$i$i$i$i30 = $call3$i$i$i$i28;
    }
    $call3$i$i$i31 = (__ZNSt3__211char_traitsIwE3eofEv()|0);
    $call4$i$i$i32 = (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($retval$0$i$i$i$i30,$call3$i$i$i31)|0);
    if ($call4$i$i$i32) {
     HEAP32[$__b>>2] = 0;
     $$pre$i$i$i = 0;$65 = 0;$80 = 1;
    } else {
     $$pre$i$i$i = $$pre$i$i$i34;$65 = $79;$80 = 0;
    }
   }
   $12 = HEAP32[$__e>>2]|0;
   $tobool$i2$i$i39 = ($12|0)==(0|0);
   do {
    if ($tobool$i2$i$i39) {
     label = 20;
    } else {
     $__ninp_$i$i3$i$i41 = ((($12)) + 12|0);
     $13 = HEAP32[$__ninp_$i$i3$i$i41>>2]|0;
     $__einp_$i$i4$i$i42 = ((($12)) + 16|0);
     $14 = HEAP32[$__einp_$i$i4$i$i42>>2]|0;
     $cmp$i$i5$i$i43 = ($13|0)==($14|0);
     if ($cmp$i$i5$i$i43) {
      $vtable$i$i7$i$i45 = HEAP32[$12>>2]|0;
      $vfn$i$i8$i$i46 = ((($vtable$i$i7$i$i45)) + 36|0);
      $15 = HEAP32[$vfn$i$i8$i$i46>>2]|0;
      __THREW__ = 0;
      $call$i$i9$i$i62 = (invoke_ii($15|0,($12|0))|0);
      $16 = __THREW__; __THREW__ = 0;
      $17 = $16&1;
      if ($17) {
       break L11;
      } else {
       $retval$0$i$i13$i$i50 = $call$i$i9$i$i62;
      }
     } else {
      $18 = HEAP32[$13>>2]|0;
      $call3$i$i11$i$i48 = (__ZNSt3__211char_traitsIwE11to_int_typeEw($18)|0);
      $retval$0$i$i13$i$i50 = $call3$i$i11$i$i48;
     }
     $call3$i14$i$i51 = (__ZNSt3__211char_traitsIwE3eofEv()|0);
     $call4$i15$i$i52 = (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($retval$0$i$i13$i$i50,$call3$i14$i$i51)|0);
     if ($call4$i15$i$i52) {
      HEAP32[$__e>>2] = 0;
      label = 20;
      break;
     } else {
      if ($80) {
       $81 = $12;
       break;
      } else {
       $$pre$i17$i$i = $12;$__a$2 = $__a$0;
       label = 37;
       break L11;
      }
     }
    }
   } while(0);
   if ((label|0) == 20) {
    label = 0;
    if ($80) {
     $$pre$i17$i$i = 0;$__a$2 = $__a$0;
     label = 37;
     break;
    } else {
     $81 = 0;
    }
   }
   $19 = HEAP32[$__a_end>>2]|0;
   $20 = HEAP8[$__size_$i$i>>0]|0;
   $tobool$i$i65 = ($20<<24>>24)<(0);
   $21 = HEAP32[$__size_$i3$i>>2]|0;
   $conv$i$i = $20&255;
   $cond$i67 = $tobool$i$i65 ? $21 : $conv$i$i;
   $add$ptr = (($__a$0) + ($cond$i67)|0);
   $cmp = ($19|0)==($add$ptr|0);
   if ($cmp) {
    $mul = $cond$i67 << 1;
    __THREW__ = 0;
    invoke_viii(377,($__buf|0),($mul|0),0);
    $22 = __THREW__; __THREW__ = 0;
    $23 = $22&1;
    if ($23) {
     break;
    }
    $24 = HEAP8[$__size_$i$i>>0]|0;
    $tobool$i$i89 = ($24<<24>>24)<(0);
    if ($tobool$i$i89) {
     $25 = HEAP32[$__cap_$i$i90>>2]|0;
     $and$i$i91 = $25 & 2147483647;
     $phitmp$i92 = (($and$i$i91) + -1)|0;
     $cond$i94 = $phitmp$i92;
    } else {
     $cond$i94 = 10;
    }
    __THREW__ = 0;
    invoke_viii(377,($__buf|0),($cond$i94|0),0);
    $26 = __THREW__; __THREW__ = 0;
    $27 = $26&1;
    if ($27) {
     break;
    }
    $28 = HEAP8[$__size_$i$i>>0]|0;
    $tobool$i$i$i99 = ($28<<24>>24)<(0);
    $29 = HEAP32[$__buf>>2]|0;
    $cond$i$i104 = $tobool$i$i$i99 ? $29 : $__buf;
    $add$ptr18 = (($cond$i$i104) + ($cond$i67)|0);
    HEAP32[$__a_end>>2] = $add$ptr18;
    $__a$1 = $cond$i$i104;
   } else {
    $__a$1 = $__a$0;
   }
   $__ninp_$i$i = ((($$pre$i$i$i)) + 12|0);
   $32 = HEAP32[$__ninp_$i$i>>2]|0;
   $__einp_$i$i = ((($$pre$i$i$i)) + 16|0);
   $33 = HEAP32[$__einp_$i$i>>2]|0;
   $cmp$i$i106 = ($32|0)==($33|0);
   if ($cmp$i$i106) {
    $vtable$i$i = HEAP32[$$pre$i$i$i>>2]|0;
    $vfn$i$i = ((($vtable$i$i)) + 36|0);
    $34 = HEAP32[$vfn$i$i>>2]|0;
    __THREW__ = 0;
    $call$i$i107 = (invoke_ii($34|0,($$pre$i$i$i|0))|0);
    $35 = __THREW__; __THREW__ = 0;
    $36 = $35&1;
    if ($36) {
     break;
    } else {
     $retval$0$i$i = $call$i$i107;
    }
   } else {
    $37 = HEAP32[$32>>2]|0;
    $call3$i$i = (__ZNSt3__211char_traitsIwE11to_int_typeEw($37)|0);
    $retval$0$i$i = $call3$i$i;
   }
   $38 = HEAP32[$__thousands_sep>>2]|0;
   __THREW__ = 0;
   $call24 = (invoke_iiiiiiiiiii(411,($retval$0$i$i|0),($call|0),($__a$1|0),($__a_end|0),($__dc|0),($38|0),($__grouping|0),($__g|0),($__g_end|0),($__atoms|0))|0);
   $39 = __THREW__; __THREW__ = 0;
   $40 = $39&1;
   if ($40) {
    break;
   }
   $tobool = ($call24|0)==(0);
   if (!($tobool)) {
    $$pre$i17$i$i = $81;$__a$2 = $__a$1;
    label = 37;
    break;
   }
   $41 = HEAP32[$__ninp_$i$i>>2]|0;
   $42 = HEAP32[$__einp_$i$i>>2]|0;
   $cmp$i$i111 = ($41|0)==($42|0);
   if ($cmp$i$i111) {
    $vtable$i$i112 = HEAP32[$$pre$i$i$i>>2]|0;
    $vfn$i$i113 = ((($vtable$i$i112)) + 40|0);
    $43 = HEAP32[$vfn$i$i113>>2]|0;
    __THREW__ = 0;
    (invoke_ii($43|0,($$pre$i$i$i|0))|0);
    $44 = __THREW__; __THREW__ = 0;
    $45 = $44&1;
    if ($45) {
     break;
    } else {
     $$pre$i$i$i34 = $$pre$i$i$i;$79 = $65;$__a$0 = $__a$1;
     continue;
    }
   } else {
    $incdec$ptr$i$i = ((($41)) + 4|0);
    HEAP32[$__ninp_$i$i>>2] = $incdec$ptr$i$i;
    $46 = HEAP32[$41>>2]|0;
    (__ZNSt3__211char_traitsIwE11to_int_typeEw($46)|0);
    $$pre$i$i$i34 = $$pre$i$i$i;$79 = $65;$__a$0 = $__a$1;
    continue;
   }
  }
  L50: do {
   if ((label|0) == 37) {
    $__size_$i$i120 = ((($__grouping)) + 11|0);
    $47 = HEAP8[$__size_$i$i120>>0]|0;
    $tobool$i$i121 = ($47<<24>>24)<(0);
    $__size_$i3$i122 = ((($__grouping)) + 4|0);
    $48 = HEAP32[$__size_$i3$i122>>2]|0;
    $conv$i$i124 = $47&255;
    $cond$i126 = $tobool$i$i121 ? $48 : $conv$i$i124;
    $cmp30 = ($cond$i126|0)==(0);
    if (!($cmp30)) {
     $49 = HEAP32[$__g_end>>2]|0;
     $sub$ptr$lhs$cast = $49;
     $sub$ptr$rhs$cast = $__g;
     $sub$ptr$sub = (($sub$ptr$lhs$cast) - ($sub$ptr$rhs$cast))|0;
     $cmp32 = ($sub$ptr$sub|0)<(160);
     if ($cmp32) {
      $50 = HEAP32[$__dc>>2]|0;
      $incdec$ptr = ((($49)) + 4|0);
      HEAP32[$__g_end>>2] = $incdec$ptr;
      HEAP32[$49>>2] = $50;
     }
    }
    $51 = HEAP32[$__a_end>>2]|0;
    __THREW__ = 0;
    $52 = (invoke_iiiii(403,($__a$2|0),($51|0),($__err|0),($call|0))|0);
    $53 = tempRet0;
    $54 = __THREW__; __THREW__ = 0;
    $55 = $54&1;
    if (!($55)) {
     $56 = $__v;
     $57 = $56;
     HEAP32[$57>>2] = $52;
     $58 = (($56) + 4)|0;
     $59 = $58;
     HEAP32[$59>>2] = $53;
     $60 = HEAP32[$__g_end>>2]|0;
     __THREW__ = 0;
     invoke_viiii(400,($__grouping|0),($__g|0),($60|0),($__err|0));
     $61 = __THREW__; __THREW__ = 0;
     $62 = $61&1;
     if (!($62)) {
      $tobool$i$i$i = ($$pre$i$i$i|0)==(0|0);
      if ($tobool$i$i$i) {
       $82 = 1;
      } else {
       $__ninp_$i$i$i$i = ((($$pre$i$i$i)) + 12|0);
       $63 = HEAP32[$__ninp_$i$i$i$i>>2]|0;
       $__einp_$i$i$i$i = ((($$pre$i$i$i)) + 16|0);
       $64 = HEAP32[$__einp_$i$i$i$i>>2]|0;
       $cmp$i$i$i$i = ($63|0)==($64|0);
       if ($cmp$i$i$i$i) {
        $vtable$i$i$i$i = HEAP32[$65>>2]|0;
        $vfn$i$i$i$i = ((($vtable$i$i$i$i)) + 36|0);
        $66 = HEAP32[$vfn$i$i$i$i>>2]|0;
        __THREW__ = 0;
        $call$i$i$i$i16 = (invoke_ii($66|0,($$pre$i$i$i|0))|0);
        $67 = __THREW__; __THREW__ = 0;
        $68 = $67&1;
        if ($68) {
         break;
        } else {
         $retval$0$i$i$i$i = $call$i$i$i$i16;
        }
       } else {
        $69 = HEAP32[$63>>2]|0;
        $call3$i$i$i$i = (__ZNSt3__211char_traitsIwE11to_int_typeEw($69)|0);
        $retval$0$i$i$i$i = $call3$i$i$i$i;
       }
       $call3$i$i$i = (__ZNSt3__211char_traitsIwE3eofEv()|0);
       $call4$i$i$i = (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($retval$0$i$i$i$i,$call3$i$i$i)|0);
       if ($call4$i$i$i) {
        HEAP32[$__b>>2] = 0;
        $82 = 1;
       } else {
        $82 = 0;
       }
      }
      $tobool$i2$i$i = ($$pre$i17$i$i|0)==(0|0);
      do {
       if ($tobool$i2$i$i) {
        label = 54;
       } else {
        $__ninp_$i$i3$i$i = ((($$pre$i17$i$i)) + 12|0);
        $70 = HEAP32[$__ninp_$i$i3$i$i>>2]|0;
        $__einp_$i$i4$i$i = ((($$pre$i17$i$i)) + 16|0);
        $71 = HEAP32[$__einp_$i$i4$i$i>>2]|0;
        $cmp$i$i5$i$i = ($70|0)==($71|0);
        if ($cmp$i$i5$i$i) {
         $vtable$i$i7$i$i = HEAP32[$$pre$i17$i$i>>2]|0;
         $vfn$i$i8$i$i = ((($vtable$i$i7$i$i)) + 36|0);
         $72 = HEAP32[$vfn$i$i8$i$i>>2]|0;
         __THREW__ = 0;
         $call$i$i9$i$i17 = (invoke_ii($72|0,($$pre$i17$i$i|0))|0);
         $73 = __THREW__; __THREW__ = 0;
         $74 = $73&1;
         if ($74) {
          break L50;
         } else {
          $retval$0$i$i13$i$i = $call$i$i9$i$i17;
         }
        } else {
         $75 = HEAP32[$70>>2]|0;
         $call3$i$i11$i$i = (__ZNSt3__211char_traitsIwE11to_int_typeEw($75)|0);
         $retval$0$i$i13$i$i = $call3$i$i11$i$i;
        }
        $call3$i14$i$i = (__ZNSt3__211char_traitsIwE3eofEv()|0);
        $call4$i15$i$i = (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($retval$0$i$i13$i$i,$call3$i14$i$i)|0);
        if ($call4$i15$i$i) {
         HEAP32[$__e>>2] = 0;
         label = 54;
         break;
        } else {
         if ($82) {
          break;
         } else {
          label = 56;
          break;
         }
        }
       }
      } while(0);
      if ((label|0) == 54) {
       if ($82) {
        label = 56;
       }
      }
      if ((label|0) == 56) {
       $76 = HEAP32[$__err>>2]|0;
       $or = $76 | 2;
       HEAP32[$__err>>2] = $or;
      }
      $retval$sroa$0$0$copyload = HEAP32[$__b>>2]|0;
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__buf);
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grouping);
      STACKTOP = sp;return ($retval$sroa$0$0$copyload|0);
     }
    }
   }
  } while(0);
  $77 = ___cxa_find_matching_catch_2()|0;
  $78 = tempRet0;
  $ehselector$slot$1 = $78;$exn$slot$1 = $77;
 }
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__buf);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grouping);
 ___resumeException($exn$slot$1|0);
 // unreachable;
 return (0)|0;
}
function __ZNSt3__29__num_getIwE17__stage2_int_prepERNS_8ios_baseEPwRw($agg$result,$__iob,$__atoms,$__thousands_sep) {
 $agg$result = $agg$result|0;
 $__iob = $__iob|0;
 $__atoms = $__atoms|0;
 $__thousands_sep = $__thousands_sep|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__loc = 0, $call$i10 = 0, $call$i5 = 0, $call$i7 = 0, $vfn$i = 0;
 var $vfn$i12 = 0, $vfn$i9 = 0, $vtable$i = 0, $vtable$i11 = 0, $vtable$i8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $__loc = sp;
 __ZNKSt3__28ios_base6getlocEv($__loc,$__iob);
 __THREW__ = 0;
 $call$i5 = (invoke_iii(380,($__loc|0),(20128|0))|0);
 $0 = __THREW__; __THREW__ = 0;
 $1 = $0&1;
 if (!($1)) {
  $vtable$i = HEAP32[$call$i5>>2]|0;
  $vfn$i = ((($vtable$i)) + 48|0);
  $2 = HEAP32[$vfn$i>>2]|0;
  __THREW__ = 0;
  (invoke_iiiii($2|0,($call$i5|0),(15690|0),((15716)|0),($__atoms|0))|0);
  $3 = __THREW__; __THREW__ = 0;
  $4 = $3&1;
  if (!($4)) {
   __THREW__ = 0;
   $call$i7 = (invoke_iii(380,($__loc|0),(20136|0))|0);
   $5 = __THREW__; __THREW__ = 0;
   $6 = $5&1;
   if (!($6)) {
    $vtable$i8 = HEAP32[$call$i7>>2]|0;
    $vfn$i9 = ((($vtable$i8)) + 16|0);
    $7 = HEAP32[$vfn$i9>>2]|0;
    __THREW__ = 0;
    $call$i10 = (invoke_ii($7|0,($call$i7|0))|0);
    $8 = __THREW__; __THREW__ = 0;
    $9 = $8&1;
    if (!($9)) {
     HEAP32[$__thousands_sep>>2] = $call$i10;
     $vtable$i11 = HEAP32[$call$i7>>2]|0;
     $vfn$i12 = ((($vtable$i11)) + 20|0);
     $10 = HEAP32[$vfn$i12>>2]|0;
     __THREW__ = 0;
     invoke_vii($10|0,($agg$result|0),($call$i7|0));
     $11 = __THREW__; __THREW__ = 0;
     $12 = $11&1;
     if (!($12)) {
      __ZNSt3__26localeD2Ev($__loc);
      STACKTOP = sp;return;
     }
    }
   }
  }
 }
 $13 = ___cxa_find_matching_catch_2()|0;
 $14 = tempRet0;
 __ZNSt3__26localeD2Ev($__loc);
 ___resumeException($13|0);
 // unreachable;
}
function __ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__do_get_unsignedImEES4_S4_S4_RNS_8ios_baseERjRT_($this,$__b,$__e,$__iob,$__err,$__v) {
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$pre = 0, $$pre$i$i$i = 0, $$pre$i$i$i34 = 0, $$pre$i17$i$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $8 = 0;
 var $9 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__a_end = 0, $__atoms = 0, $__buf = 0, $__cap_$i$i = 0, $__cap_$i$i90 = 0, $__dc = 0, $__einp_$i$i = 0, $__einp_$i$i$i$i = 0, $__einp_$i$i$i$i22 = 0, $__einp_$i$i4$i$i = 0, $__einp_$i$i4$i$i42 = 0, $__g = 0, $__g_end = 0, $__grouping = 0, $__i$0$i$i = 0, $__ninp_$i$i = 0;
 var $__ninp_$i$i$i$i = 0, $__ninp_$i$i$i$i21 = 0, $__ninp_$i$i3$i$i = 0, $__ninp_$i$i3$i$i41 = 0, $__size_$i$i = 0, $__size_$i$i120 = 0, $__size_$i3$i = 0, $__size_$i3$i122 = 0, $__thousands_sep = 0, $add$ptr = 0, $add$ptr18 = 0, $and$i$i = 0, $and$i$i91 = 0, $arrayidx$i$i = 0, $call = 0, $call$i$i$i$i16 = 0, $call$i$i$i$i60 = 0, $call$i$i107 = 0, $call$i$i9$i$i17 = 0, $call$i$i9$i$i62 = 0;
 var $call24 = 0, $call3$i$i = 0, $call3$i$i$i = 0, $call3$i$i$i$i = 0, $call3$i$i$i$i28 = 0, $call3$i$i$i31 = 0, $call3$i$i11$i$i = 0, $call3$i$i11$i$i48 = 0, $call3$i14$i$i = 0, $call3$i14$i$i51 = 0, $call36 = 0, $call4$i$i$i = 0, $call4$i$i$i32 = 0, $call4$i15$i$i = 0, $call4$i15$i$i52 = 0, $cmp = 0, $cmp$i$i$i$i = 0, $cmp$i$i$i$i23 = 0, $cmp$i$i106 = 0, $cmp$i$i111 = 0;
 var $cmp$i$i5$i$i = 0, $cmp$i$i5$i$i43 = 0, $cmp30 = 0, $cmp32 = 0, $cond$i = 0, $cond$i$i = 0, $cond$i$i104 = 0, $cond$i126 = 0, $cond$i67 = 0, $cond$i94 = 0, $conv$i$i = 0, $conv$i$i124 = 0, $ehselector$slot$1 = 0, $exitcond$i$i = 0, $exn$slot$1 = 0, $inc$i$i = 0, $incdec$ptr = 0, $incdec$ptr$i$i = 0, $mul = 0, $or = 0;
 var $phitmp$i = 0, $phitmp$i92 = 0, $retval$0$i$i = 0, $retval$0$i$i$i$i = 0, $retval$0$i$i$i$i30 = 0, $retval$0$i$i13$i$i = 0, $retval$0$i$i13$i$i50 = 0, $retval$sroa$0$0$copyload = 0, $sub$ptr$lhs$cast = 0, $sub$ptr$rhs$cast = 0, $sub$ptr$sub = 0, $tobool = 0, $tobool$i$i = 0, $tobool$i$i$i = 0, $tobool$i$i$i18 = 0, $tobool$i$i$i20 = 0, $tobool$i$i$i99 = 0, $tobool$i$i121 = 0, $tobool$i$i65 = 0, $tobool$i$i89 = 0;
 var $tobool$i2$i$i = 0, $tobool$i2$i$i39 = 0, $vfn$i$i = 0, $vfn$i$i$i$i = 0, $vfn$i$i$i$i26 = 0, $vfn$i$i113 = 0, $vfn$i$i8$i$i = 0, $vfn$i$i8$i$i46 = 0, $vtable$i$i = 0, $vtable$i$i$i$i = 0, $vtable$i$i$i$i25 = 0, $vtable$i$i112 = 0, $vtable$i$i7$i$i = 0, $vtable$i$i7$i$i45 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 304|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(304|0);
 $__atoms = sp + 200|0;
 $__thousands_sep = sp + 196|0;
 $__grouping = sp + 184|0;
 $__buf = sp + 172|0;
 $__a_end = sp + 168|0;
 $__g = sp + 8|0;
 $__g_end = sp + 4|0;
 $__dc = sp;
 $call = (__ZNSt3__214__num_get_base10__get_baseERNS_8ios_baseE($__iob)|0);
 __ZNSt3__29__num_getIwE17__stage2_int_prepERNS_8ios_baseEPwRw($__grouping,$__iob,$__atoms,$__thousands_sep);
 ;HEAP32[$__buf>>2]=0|0;HEAP32[$__buf+4>>2]=0|0;HEAP32[$__buf+8>>2]=0|0;
 $__i$0$i$i = 0;
 while(1) {
  $exitcond$i$i = ($__i$0$i$i|0)==(3);
  if ($exitcond$i$i) {
   break;
  }
  $arrayidx$i$i = (($__buf) + ($__i$0$i$i<<2)|0);
  HEAP32[$arrayidx$i$i>>2] = 0;
  $inc$i$i = (($__i$0$i$i) + 1)|0;
  $__i$0$i$i = $inc$i$i;
 }
 $__size_$i$i = ((($__buf)) + 11|0);
 $0 = HEAP8[$__size_$i$i>>0]|0;
 $tobool$i$i = ($0<<24>>24)<(0);
 if ($tobool$i$i) {
  $__cap_$i$i = ((($__buf)) + 8|0);
  $1 = HEAP32[$__cap_$i$i>>2]|0;
  $and$i$i = $1 & 2147483647;
  $phitmp$i = (($and$i$i) + -1)|0;
  $cond$i = $phitmp$i;
 } else {
  $cond$i = 10;
 }
 __THREW__ = 0;
 invoke_viii(377,($__buf|0),($cond$i|0),0);
 $2 = __THREW__; __THREW__ = 0;
 $3 = $2&1;
 if ($3) {
  $30 = ___cxa_find_matching_catch_2()|0;
  $31 = tempRet0;
  $ehselector$slot$1 = $31;$exn$slot$1 = $30;
 } else {
  $4 = HEAP8[$__size_$i$i>>0]|0;
  $tobool$i$i$i18 = ($4<<24>>24)<(0);
  $5 = HEAP32[$__buf>>2]|0;
  $cond$i$i = $tobool$i$i$i18 ? $5 : $__buf;
  HEAP32[$__a_end>>2] = $cond$i$i;
  HEAP32[$__g_end>>2] = $__g;
  HEAP32[$__dc>>2] = 0;
  $__size_$i3$i = ((($__buf)) + 4|0);
  $__cap_$i$i90 = ((($__buf)) + 8|0);
  $$pre = HEAP32[$__b>>2]|0;
  $$pre$i$i$i34 = $$pre;$73 = $$pre;$__a$0 = $cond$i$i;
  L11: while(1) {
   $tobool$i$i$i20 = ($$pre$i$i$i34|0)==(0|0);
   if ($tobool$i$i$i20) {
    $$pre$i$i$i = 0;$59 = 0;$74 = 1;
   } else {
    $__ninp_$i$i$i$i21 = ((($$pre$i$i$i34)) + 12|0);
    $6 = HEAP32[$__ninp_$i$i$i$i21>>2]|0;
    $__einp_$i$i$i$i22 = ((($$pre$i$i$i34)) + 16|0);
    $7 = HEAP32[$__einp_$i$i$i$i22>>2]|0;
    $cmp$i$i$i$i23 = ($6|0)==($7|0);
    if ($cmp$i$i$i$i23) {
     $vtable$i$i$i$i25 = HEAP32[$$pre$i$i$i34>>2]|0;
     $vfn$i$i$i$i26 = ((($vtable$i$i$i$i25)) + 36|0);
     $8 = HEAP32[$vfn$i$i$i$i26>>2]|0;
     __THREW__ = 0;
     $call$i$i$i$i60 = (invoke_ii($8|0,($$pre$i$i$i34|0))|0);
     $9 = __THREW__; __THREW__ = 0;
     $10 = $9&1;
     if ($10) {
      break;
     } else {
      $retval$0$i$i$i$i30 = $call$i$i$i$i60;
     }
    } else {
     $11 = HEAP32[$6>>2]|0;
     $call3$i$i$i$i28 = (__ZNSt3__211char_traitsIwE11to_int_typeEw($11)|0);
     $retval$0$i$i$i$i30 = $call3$i$i$i$i28;
    }
    $call3$i$i$i31 = (__ZNSt3__211char_traitsIwE3eofEv()|0);
    $call4$i$i$i32 = (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($retval$0$i$i$i$i30,$call3$i$i$i31)|0);
    if ($call4$i$i$i32) {
     HEAP32[$__b>>2] = 0;
     $$pre$i$i$i = 0;$59 = 0;$74 = 1;
    } else {
     $$pre$i$i$i = $$pre$i$i$i34;$59 = $73;$74 = 0;
    }
   }
   $12 = HEAP32[$__e>>2]|0;
   $tobool$i2$i$i39 = ($12|0)==(0|0);
   do {
    if ($tobool$i2$i$i39) {
     label = 20;
    } else {
     $__ninp_$i$i3$i$i41 = ((($12)) + 12|0);
     $13 = HEAP32[$__ninp_$i$i3$i$i41>>2]|0;
     $__einp_$i$i4$i$i42 = ((($12)) + 16|0);
     $14 = HEAP32[$__einp_$i$i4$i$i42>>2]|0;
     $cmp$i$i5$i$i43 = ($13|0)==($14|0);
     if ($cmp$i$i5$i$i43) {
      $vtable$i$i7$i$i45 = HEAP32[$12>>2]|0;
      $vfn$i$i8$i$i46 = ((($vtable$i$i7$i$i45)) + 36|0);
      $15 = HEAP32[$vfn$i$i8$i$i46>>2]|0;
      __THREW__ = 0;
      $call$i$i9$i$i62 = (invoke_ii($15|0,($12|0))|0);
      $16 = __THREW__; __THREW__ = 0;
      $17 = $16&1;
      if ($17) {
       break L11;
      } else {
       $retval$0$i$i13$i$i50 = $call$i$i9$i$i62;
      }
     } else {
      $18 = HEAP32[$13>>2]|0;
      $call3$i$i11$i$i48 = (__ZNSt3__211char_traitsIwE11to_int_typeEw($18)|0);
      $retval$0$i$i13$i$i50 = $call3$i$i11$i$i48;
     }
     $call3$i14$i$i51 = (__ZNSt3__211char_traitsIwE3eofEv()|0);
     $call4$i15$i$i52 = (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($retval$0$i$i13$i$i50,$call3$i14$i$i51)|0);
     if ($call4$i15$i$i52) {
      HEAP32[$__e>>2] = 0;
      label = 20;
      break;
     } else {
      if ($74) {
       $75 = $12;
       break;
      } else {
       $$pre$i17$i$i = $12;$__a$2 = $__a$0;
       label = 37;
       break L11;
      }
     }
    }
   } while(0);
   if ((label|0) == 20) {
    label = 0;
    if ($74) {
     $$pre$i17$i$i = 0;$__a$2 = $__a$0;
     label = 37;
     break;
    } else {
     $75 = 0;
    }
   }
   $19 = HEAP32[$__a_end>>2]|0;
   $20 = HEAP8[$__size_$i$i>>0]|0;
   $tobool$i$i65 = ($20<<24>>24)<(0);
   $21 = HEAP32[$__size_$i3$i>>2]|0;
   $conv$i$i = $20&255;
   $cond$i67 = $tobool$i$i65 ? $21 : $conv$i$i;
   $add$ptr = (($__a$0) + ($cond$i67)|0);
   $cmp = ($19|0)==($add$ptr|0);
   if ($cmp) {
    $mul = $cond$i67 << 1;
    __THREW__ = 0;
    invoke_viii(377,($__buf|0),($mul|0),0);
    $22 = __THREW__; __THREW__ = 0;
    $23 = $22&1;
    if ($23) {
     break;
    }
    $24 = HEAP8[$__size_$i$i>>0]|0;
    $tobool$i$i89 = ($24<<24>>24)<(0);
    if ($tobool$i$i89) {
     $25 = HEAP32[$__cap_$i$i90>>2]|0;
     $and$i$i91 = $25 & 2147483647;
     $phitmp$i92 = (($and$i$i91) + -1)|0;
     $cond$i94 = $phitmp$i92;
    } else {
     $cond$i94 = 10;
    }
    __THREW__ = 0;
    invoke_viii(377,($__buf|0),($cond$i94|0),0);
    $26 = __THREW__; __THREW__ = 0;
    $27 = $26&1;
    if ($27) {
     break;
    }
    $28 = HEAP8[$__size_$i$i>>0]|0;
    $tobool$i$i$i99 = ($28<<24>>24)<(0);
    $29 = HEAP32[$__buf>>2]|0;
    $cond$i$i104 = $tobool$i$i$i99 ? $29 : $__buf;
    $add$ptr18 = (($cond$i$i104) + ($cond$i67)|0);
    HEAP32[$__a_end>>2] = $add$ptr18;
    $__a$1 = $cond$i$i104;
   } else {
    $__a$1 = $__a$0;
   }
   $__ninp_$i$i = ((($$pre$i$i$i)) + 12|0);
   $32 = HEAP32[$__ninp_$i$i>>2]|0;
   $__einp_$i$i = ((($$pre$i$i$i)) + 16|0);
   $33 = HEAP32[$__einp_$i$i>>2]|0;
   $cmp$i$i106 = ($32|0)==($33|0);
   if ($cmp$i$i106) {
    $vtable$i$i = HEAP32[$$pre$i$i$i>>2]|0;
    $vfn$i$i = ((($vtable$i$i)) + 36|0);
    $34 = HEAP32[$vfn$i$i>>2]|0;
    __THREW__ = 0;
    $call$i$i107 = (invoke_ii($34|0,($$pre$i$i$i|0))|0);
    $35 = __THREW__; __THREW__ = 0;
    $36 = $35&1;
    if ($36) {
     break;
    } else {
     $retval$0$i$i = $call$i$i107;
    }
   } else {
    $37 = HEAP32[$32>>2]|0;
    $call3$i$i = (__ZNSt3__211char_traitsIwE11to_int_typeEw($37)|0);
    $retval$0$i$i = $call3$i$i;
   }
   $38 = HEAP32[$__thousands_sep>>2]|0;
   __THREW__ = 0;
   $call24 = (invoke_iiiiiiiiiii(411,($retval$0$i$i|0),($call|0),($__a$1|0),($__a_end|0),($__dc|0),($38|0),($__grouping|0),($__g|0),($__g_end|0),($__atoms|0))|0);
   $39 = __THREW__; __THREW__ = 0;
   $40 = $39&1;
   if ($40) {
    break;
   }
   $tobool = ($call24|0)==(0);
   if (!($tobool)) {
    $$pre$i17$i$i = $75;$__a$2 = $__a$1;
    label = 37;
    break;
   }
   $41 = HEAP32[$__ninp_$i$i>>2]|0;
   $42 = HEAP32[$__einp_$i$i>>2]|0;
   $cmp$i$i111 = ($41|0)==($42|0);
   if ($cmp$i$i111) {
    $vtable$i$i112 = HEAP32[$$pre$i$i$i>>2]|0;
    $vfn$i$i113 = ((($vtable$i$i112)) + 40|0);
    $43 = HEAP32[$vfn$i$i113>>2]|0;
    __THREW__ = 0;
    (invoke_ii($43|0,($$pre$i$i$i|0))|0);
    $44 = __THREW__; __THREW__ = 0;
    $45 = $44&1;
    if ($45) {
     break;
    } else {
     $$pre$i$i$i34 = $$pre$i$i$i;$73 = $59;$__a$0 = $__a$1;
     continue;
    }
   } else {
    $incdec$ptr$i$i = ((($41)) + 4|0);
    HEAP32[$__ninp_$i$i>>2] = $incdec$ptr$i$i;
    $46 = HEAP32[$41>>2]|0;
    (__ZNSt3__211char_traitsIwE11to_int_typeEw($46)|0);
    $$pre$i$i$i34 = $$pre$i$i$i;$73 = $59;$__a$0 = $__a$1;
    continue;
   }
  }
  L50: do {
   if ((label|0) == 37) {
    $__size_$i$i120 = ((($__grouping)) + 11|0);
    $47 = HEAP8[$__size_$i$i120>>0]|0;
    $tobool$i$i121 = ($47<<24>>24)<(0);
    $__size_$i3$i122 = ((($__grouping)) + 4|0);
    $48 = HEAP32[$__size_$i3$i122>>2]|0;
    $conv$i$i124 = $47&255;
    $cond$i126 = $tobool$i$i121 ? $48 : $conv$i$i124;
    $cmp30 = ($cond$i126|0)==(0);
    if (!($cmp30)) {
     $49 = HEAP32[$__g_end>>2]|0;
     $sub$ptr$lhs$cast = $49;
     $sub$ptr$rhs$cast = $__g;
     $sub$ptr$sub = (($sub$ptr$lhs$cast) - ($sub$ptr$rhs$cast))|0;
     $cmp32 = ($sub$ptr$sub|0)<(160);
     if ($cmp32) {
      $50 = HEAP32[$__dc>>2]|0;
      $incdec$ptr = ((($49)) + 4|0);
      HEAP32[$__g_end>>2] = $incdec$ptr;
      HEAP32[$49>>2] = $50;
     }
    }
    $51 = HEAP32[$__a_end>>2]|0;
    __THREW__ = 0;
    $call36 = (invoke_iiiii(404,($__a$2|0),($51|0),($__err|0),($call|0))|0);
    $52 = __THREW__; __THREW__ = 0;
    $53 = $52&1;
    if (!($53)) {
     HEAP32[$__v>>2] = $call36;
     $54 = HEAP32[$__g_end>>2]|0;
     __THREW__ = 0;
     invoke_viiii(400,($__grouping|0),($__g|0),($54|0),($__err|0));
     $55 = __THREW__; __THREW__ = 0;
     $56 = $55&1;
     if (!($56)) {
      $tobool$i$i$i = ($$pre$i$i$i|0)==(0|0);
      if ($tobool$i$i$i) {
       $76 = 1;
      } else {
       $__ninp_$i$i$i$i = ((($$pre$i$i$i)) + 12|0);
       $57 = HEAP32[$__ninp_$i$i$i$i>>2]|0;
       $__einp_$i$i$i$i = ((($$pre$i$i$i)) + 16|0);
       $58 = HEAP32[$__einp_$i$i$i$i>>2]|0;
       $cmp$i$i$i$i = ($57|0)==($58|0);
       if ($cmp$i$i$i$i) {
        $vtable$i$i$i$i = HEAP32[$59>>2]|0;
        $vfn$i$i$i$i = ((($vtable$i$i$i$i)) + 36|0);
        $60 = HEAP32[$vfn$i$i$i$i>>2]|0;
        __THREW__ = 0;
        $call$i$i$i$i16 = (invoke_ii($60|0,($$pre$i$i$i|0))|0);
        $61 = __THREW__; __THREW__ = 0;
        $62 = $61&1;
        if ($62) {
         break;
        } else {
         $retval$0$i$i$i$i = $call$i$i$i$i16;
        }
       } else {
        $63 = HEAP32[$57>>2]|0;
        $call3$i$i$i$i = (__ZNSt3__211char_traitsIwE11to_int_typeEw($63)|0);
        $retval$0$i$i$i$i = $call3$i$i$i$i;
       }
       $call3$i$i$i = (__ZNSt3__211char_traitsIwE3eofEv()|0);
       $call4$i$i$i = (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($retval$0$i$i$i$i,$call3$i$i$i)|0);
       if ($call4$i$i$i) {
        HEAP32[$__b>>2] = 0;
        $76 = 1;
       } else {
        $76 = 0;
       }
      }
      $tobool$i2$i$i = ($$pre$i17$i$i|0)==(0|0);
      do {
       if ($tobool$i2$i$i) {
        label = 54;
       } else {
        $__ninp_$i$i3$i$i = ((($$pre$i17$i$i)) + 12|0);
        $64 = HEAP32[$__ninp_$i$i3$i$i>>2]|0;
        $__einp_$i$i4$i$i = ((($$pre$i17$i$i)) + 16|0);
        $65 = HEAP32[$__einp_$i$i4$i$i>>2]|0;
        $cmp$i$i5$i$i = ($64|0)==($65|0);
        if ($cmp$i$i5$i$i) {
         $vtable$i$i7$i$i = HEAP32[$$pre$i17$i$i>>2]|0;
         $vfn$i$i8$i$i = ((($vtable$i$i7$i$i)) + 36|0);
         $66 = HEAP32[$vfn$i$i8$i$i>>2]|0;
         __THREW__ = 0;
         $call$i$i9$i$i17 = (invoke_ii($66|0,($$pre$i17$i$i|0))|0);
         $67 = __THREW__; __THREW__ = 0;
         $68 = $67&1;
         if ($68) {
          break L50;
         } else {
          $retval$0$i$i13$i$i = $call$i$i9$i$i17;
         }
        } else {
         $69 = HEAP32[$64>>2]|0;
         $call3$i$i11$i$i = (__ZNSt3__211char_traitsIwE11to_int_typeEw($69)|0);
         $retval$0$i$i13$i$i = $call3$i$i11$i$i;
        }
        $call3$i14$i$i = (__ZNSt3__211char_traitsIwE3eofEv()|0);
        $call4$i15$i$i = (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($retval$0$i$i13$i$i,$call3$i14$i$i)|0);
        if ($call4$i15$i$i) {
         HEAP32[$__e>>2] = 0;
         label = 54;
         break;
        } else {
         if ($76) {
          break;
         } else {
          label = 56;
          break;
         }
        }
       }
      } while(0);
      if ((label|0) == 54) {
       if ($76) {
        label = 56;
       }
      }
      if ((label|0) == 56) {
       $70 = HEAP32[$__err>>2]|0;
       $or = $70 | 2;
       HEAP32[$__err>>2] = $or;
      }
      $retval$sroa$0$0$copyload = HEAP32[$__b>>2]|0;
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__buf);
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grouping);
      STACKTOP = sp;return ($retval$sroa$0$0$copyload|0);
     }
    }
   }
  } while(0);
  $71 = ___cxa_find_matching_catch_2()|0;
  $72 = tempRet0;
  $ehselector$slot$1 = $72;$exn$slot$1 = $71;
 }
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__buf);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grouping);
 ___resumeException($exn$slot$1|0);
 // unreachable;
 return (0)|0;
}
function __ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__do_get_unsignedIjEES4_S4_S4_RNS_8ios_baseERjRT_($this,$__b,$__e,$__iob,$__err,$__v) {
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$pre = 0, $$pre$i$i$i = 0, $$pre$i$i$i34 = 0, $$pre$i17$i$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $8 = 0;
 var $9 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__a_end = 0, $__atoms = 0, $__buf = 0, $__cap_$i$i = 0, $__cap_$i$i90 = 0, $__dc = 0, $__einp_$i$i = 0, $__einp_$i$i$i$i = 0, $__einp_$i$i$i$i22 = 0, $__einp_$i$i4$i$i = 0, $__einp_$i$i4$i$i42 = 0, $__g = 0, $__g_end = 0, $__grouping = 0, $__i$0$i$i = 0, $__ninp_$i$i = 0;
 var $__ninp_$i$i$i$i = 0, $__ninp_$i$i$i$i21 = 0, $__ninp_$i$i3$i$i = 0, $__ninp_$i$i3$i$i41 = 0, $__size_$i$i = 0, $__size_$i$i120 = 0, $__size_$i3$i = 0, $__size_$i3$i122 = 0, $__thousands_sep = 0, $add$ptr = 0, $add$ptr18 = 0, $and$i$i = 0, $and$i$i91 = 0, $arrayidx$i$i = 0, $call = 0, $call$i$i$i$i16 = 0, $call$i$i$i$i60 = 0, $call$i$i107 = 0, $call$i$i9$i$i17 = 0, $call$i$i9$i$i62 = 0;
 var $call24 = 0, $call3$i$i = 0, $call3$i$i$i = 0, $call3$i$i$i$i = 0, $call3$i$i$i$i28 = 0, $call3$i$i$i31 = 0, $call3$i$i11$i$i = 0, $call3$i$i11$i$i48 = 0, $call3$i14$i$i = 0, $call3$i14$i$i51 = 0, $call36 = 0, $call4$i$i$i = 0, $call4$i$i$i32 = 0, $call4$i15$i$i = 0, $call4$i15$i$i52 = 0, $cmp = 0, $cmp$i$i$i$i = 0, $cmp$i$i$i$i23 = 0, $cmp$i$i106 = 0, $cmp$i$i111 = 0;
 var $cmp$i$i5$i$i = 0, $cmp$i$i5$i$i43 = 0, $cmp30 = 0, $cmp32 = 0, $cond$i = 0, $cond$i$i = 0, $cond$i$i104 = 0, $cond$i126 = 0, $cond$i67 = 0, $cond$i94 = 0, $conv$i$i = 0, $conv$i$i124 = 0, $ehselector$slot$1 = 0, $exitcond$i$i = 0, $exn$slot$1 = 0, $inc$i$i = 0, $incdec$ptr = 0, $incdec$ptr$i$i = 0, $mul = 0, $or = 0;
 var $phitmp$i = 0, $phitmp$i92 = 0, $retval$0$i$i = 0, $retval$0$i$i$i$i = 0, $retval$0$i$i$i$i30 = 0, $retval$0$i$i13$i$i = 0, $retval$0$i$i13$i$i50 = 0, $retval$sroa$0$0$copyload = 0, $sub$ptr$lhs$cast = 0, $sub$ptr$rhs$cast = 0, $sub$ptr$sub = 0, $tobool = 0, $tobool$i$i = 0, $tobool$i$i$i = 0, $tobool$i$i$i18 = 0, $tobool$i$i$i20 = 0, $tobool$i$i$i99 = 0, $tobool$i$i121 = 0, $tobool$i$i65 = 0, $tobool$i$i89 = 0;
 var $tobool$i2$i$i = 0, $tobool$i2$i$i39 = 0, $vfn$i$i = 0, $vfn$i$i$i$i = 0, $vfn$i$i$i$i26 = 0, $vfn$i$i113 = 0, $vfn$i$i8$i$i = 0, $vfn$i$i8$i$i46 = 0, $vtable$i$i = 0, $vtable$i$i$i$i = 0, $vtable$i$i$i$i25 = 0, $vtable$i$i112 = 0, $vtable$i$i7$i$i = 0, $vtable$i$i7$i$i45 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 304|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(304|0);
 $__atoms = sp + 200|0;
 $__thousands_sep = sp + 196|0;
 $__grouping = sp + 184|0;
 $__buf = sp + 172|0;
 $__a_end = sp + 168|0;
 $__g = sp + 8|0;
 $__g_end = sp + 4|0;
 $__dc = sp;
 $call = (__ZNSt3__214__num_get_base10__get_baseERNS_8ios_baseE($__iob)|0);
 __ZNSt3__29__num_getIwE17__stage2_int_prepERNS_8ios_baseEPwRw($__grouping,$__iob,$__atoms,$__thousands_sep);
 ;HEAP32[$__buf>>2]=0|0;HEAP32[$__buf+4>>2]=0|0;HEAP32[$__buf+8>>2]=0|0;
 $__i$0$i$i = 0;
 while(1) {
  $exitcond$i$i = ($__i$0$i$i|0)==(3);
  if ($exitcond$i$i) {
   break;
  }
  $arrayidx$i$i = (($__buf) + ($__i$0$i$i<<2)|0);
  HEAP32[$arrayidx$i$i>>2] = 0;
  $inc$i$i = (($__i$0$i$i) + 1)|0;
  $__i$0$i$i = $inc$i$i;
 }
 $__size_$i$i = ((($__buf)) + 11|0);
 $0 = HEAP8[$__size_$i$i>>0]|0;
 $tobool$i$i = ($0<<24>>24)<(0);
 if ($tobool$i$i) {
  $__cap_$i$i = ((($__buf)) + 8|0);
  $1 = HEAP32[$__cap_$i$i>>2]|0;
  $and$i$i = $1 & 2147483647;
  $phitmp$i = (($and$i$i) + -1)|0;
  $cond$i = $phitmp$i;
 } else {
  $cond$i = 10;
 }
 __THREW__ = 0;
 invoke_viii(377,($__buf|0),($cond$i|0),0);
 $2 = __THREW__; __THREW__ = 0;
 $3 = $2&1;
 if ($3) {
  $30 = ___cxa_find_matching_catch_2()|0;
  $31 = tempRet0;
  $ehselector$slot$1 = $31;$exn$slot$1 = $30;
 } else {
  $4 = HEAP8[$__size_$i$i>>0]|0;
  $tobool$i$i$i18 = ($4<<24>>24)<(0);
  $5 = HEAP32[$__buf>>2]|0;
  $cond$i$i = $tobool$i$i$i18 ? $5 : $__buf;
  HEAP32[$__a_end>>2] = $cond$i$i;
  HEAP32[$__g_end>>2] = $__g;
  HEAP32[$__dc>>2] = 0;
  $__size_$i3$i = ((($__buf)) + 4|0);
  $__cap_$i$i90 = ((($__buf)) + 8|0);
  $$pre = HEAP32[$__b>>2]|0;
  $$pre$i$i$i34 = $$pre;$73 = $$pre;$__a$0 = $cond$i$i;
  L11: while(1) {
   $tobool$i$i$i20 = ($$pre$i$i$i34|0)==(0|0);
   if ($tobool$i$i$i20) {
    $$pre$i$i$i = 0;$59 = 0;$74 = 1;
   } else {
    $__ninp_$i$i$i$i21 = ((($$pre$i$i$i34)) + 12|0);
    $6 = HEAP32[$__ninp_$i$i$i$i21>>2]|0;
    $__einp_$i$i$i$i22 = ((($$pre$i$i$i34)) + 16|0);
    $7 = HEAP32[$__einp_$i$i$i$i22>>2]|0;
    $cmp$i$i$i$i23 = ($6|0)==($7|0);
    if ($cmp$i$i$i$i23) {
     $vtable$i$i$i$i25 = HEAP32[$$pre$i$i$i34>>2]|0;
     $vfn$i$i$i$i26 = ((($vtable$i$i$i$i25)) + 36|0);
     $8 = HEAP32[$vfn$i$i$i$i26>>2]|0;
     __THREW__ = 0;
     $call$i$i$i$i60 = (invoke_ii($8|0,($$pre$i$i$i34|0))|0);
     $9 = __THREW__; __THREW__ = 0;
     $10 = $9&1;
     if ($10) {
      break;
     } else {
      $retval$0$i$i$i$i30 = $call$i$i$i$i60;
     }
    } else {
     $11 = HEAP32[$6>>2]|0;
     $call3$i$i$i$i28 = (__ZNSt3__211char_traitsIwE11to_int_typeEw($11)|0);
     $retval$0$i$i$i$i30 = $call3$i$i$i$i28;
    }
    $call3$i$i$i31 = (__ZNSt3__211char_traitsIwE3eofEv()|0);
    $call4$i$i$i32 = (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($retval$0$i$i$i$i30,$call3$i$i$i31)|0);
    if ($call4$i$i$i32) {
     HEAP32[$__b>>2] = 0;
     $$pre$i$i$i = 0;$59 = 0;$74 = 1;
    } else {
     $$pre$i$i$i = $$pre$i$i$i34;$59 = $73;$74 = 0;
    }
   }
   $12 = HEAP32[$__e>>2]|0;
   $tobool$i2$i$i39 = ($12|0)==(0|0);
   do {
    if ($tobool$i2$i$i39) {
     label = 20;
    } else {
     $__ninp_$i$i3$i$i41 = ((($12)) + 12|0);
     $13 = HEAP32[$__ninp_$i$i3$i$i41>>2]|0;
     $__einp_$i$i4$i$i42 = ((($12)) + 16|0);
     $14 = HEAP32[$__einp_$i$i4$i$i42>>2]|0;
     $cmp$i$i5$i$i43 = ($13|0)==($14|0);
     if ($cmp$i$i5$i$i43) {
      $vtable$i$i7$i$i45 = HEAP32[$12>>2]|0;
      $vfn$i$i8$i$i46 = ((($vtable$i$i7$i$i45)) + 36|0);
      $15 = HEAP32[$vfn$i$i8$i$i46>>2]|0;
      __THREW__ = 0;
      $call$i$i9$i$i62 = (invoke_ii($15|0,($12|0))|0);
      $16 = __THREW__; __THREW__ = 0;
      $17 = $16&1;
      if ($17) {
       break L11;
      } else {
       $retval$0$i$i13$i$i50 = $call$i$i9$i$i62;
      }
     } else {
      $18 = HEAP32[$13>>2]|0;
      $call3$i$i11$i$i48 = (__ZNSt3__211char_traitsIwE11to_int_typeEw($18)|0);
      $retval$0$i$i13$i$i50 = $call3$i$i11$i$i48;
     }
     $call3$i14$i$i51 = (__ZNSt3__211char_traitsIwE3eofEv()|0);
     $call4$i15$i$i52 = (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($retval$0$i$i13$i$i50,$call3$i14$i$i51)|0);
     if ($call4$i15$i$i52) {
      HEAP32[$__e>>2] = 0;
      label = 20;
      break;
     } else {
      if ($74) {
       $75 = $12;
       break;
      } else {
       $$pre$i17$i$i = $12;$__a$2 = $__a$0;
       label = 37;
       break L11;
      }
     }
    }
   } while(0);
   if ((label|0) == 20) {
    label = 0;
    if ($74) {
     $$pre$i17$i$i = 0;$__a$2 = $__a$0;
     label = 37;
     break;
    } else {
     $75 = 0;
    }
   }
   $19 = HEAP32[$__a_end>>2]|0;
   $20 = HEAP8[$__size_$i$i>>0]|0;
   $tobool$i$i65 = ($20<<24>>24)<(0);
   $21 = HEAP32[$__size_$i3$i>>2]|0;
   $conv$i$i = $20&255;
   $cond$i67 = $tobool$i$i65 ? $21 : $conv$i$i;
   $add$ptr = (($__a$0) + ($cond$i67)|0);
   $cmp = ($19|0)==($add$ptr|0);
   if ($cmp) {
    $mul = $cond$i67 << 1;
    __THREW__ = 0;
    invoke_viii(377,($__buf|0),($mul|0),0);
    $22 = __THREW__; __THREW__ = 0;
    $23 = $22&1;
    if ($23) {
     break;
    }
    $24 = HEAP8[$__size_$i$i>>0]|0;
    $tobool$i$i89 = ($24<<24>>24)<(0);
    if ($tobool$i$i89) {
     $25 = HEAP32[$__cap_$i$i90>>2]|0;
     $and$i$i91 = $25 & 2147483647;
     $phitmp$i92 = (($and$i$i91) + -1)|0;
     $cond$i94 = $phitmp$i92;
    } else {
     $cond$i94 = 10;
    }
    __THREW__ = 0;
    invoke_viii(377,($__buf|0),($cond$i94|0),0);
    $26 = __THREW__; __THREW__ = 0;
    $27 = $26&1;
    if ($27) {
     break;
    }
    $28 = HEAP8[$__size_$i$i>>0]|0;
    $tobool$i$i$i99 = ($28<<24>>24)<(0);
    $29 = HEAP32[$__buf>>2]|0;
    $cond$i$i104 = $tobool$i$i$i99 ? $29 : $__buf;
    $add$ptr18 = (($cond$i$i104) + ($cond$i67)|0);
    HEAP32[$__a_end>>2] = $add$ptr18;
    $__a$1 = $cond$i$i104;
   } else {
    $__a$1 = $__a$0;
   }
   $__ninp_$i$i = ((($$pre$i$i$i)) + 12|0);
   $32 = HEAP32[$__ninp_$i$i>>2]|0;
   $__einp_$i$i = ((($$pre$i$i$i)) + 16|0);
   $33 = HEAP32[$__einp_$i$i>>2]|0;
   $cmp$i$i106 = ($32|0)==($33|0);
   if ($cmp$i$i106) {
    $vtable$i$i = HEAP32[$$pre$i$i$i>>2]|0;
    $vfn$i$i = ((($vtable$i$i)) + 36|0);
    $34 = HEAP32[$vfn$i$i>>2]|0;
    __THREW__ = 0;
    $call$i$i107 = (invoke_ii($34|0,($$pre$i$i$i|0))|0);
    $35 = __THREW__; __THREW__ = 0;
    $36 = $35&1;
    if ($36) {
     break;
    } else {
     $retval$0$i$i = $call$i$i107;
    }
   } else {
    $37 = HEAP32[$32>>2]|0;
    $call3$i$i = (__ZNSt3__211char_traitsIwE11to_int_typeEw($37)|0);
    $retval$0$i$i = $call3$i$i;
   }
   $38 = HEAP32[$__thousands_sep>>2]|0;
   __THREW__ = 0;
   $call24 = (invoke_iiiiiiiiiii(411,($retval$0$i$i|0),($call|0),($__a$1|0),($__a_end|0),($__dc|0),($38|0),($__grouping|0),($__g|0),($__g_end|0),($__atoms|0))|0);
   $39 = __THREW__; __THREW__ = 0;
   $40 = $39&1;
   if ($40) {
    break;
   }
   $tobool = ($call24|0)==(0);
   if (!($tobool)) {
    $$pre$i17$i$i = $75;$__a$2 = $__a$1;
    label = 37;
    break;
   }
   $41 = HEAP32[$__ninp_$i$i>>2]|0;
   $42 = HEAP32[$__einp_$i$i>>2]|0;
   $cmp$i$i111 = ($41|0)==($42|0);
   if ($cmp$i$i111) {
    $vtable$i$i112 = HEAP32[$$pre$i$i$i>>2]|0;
    $vfn$i$i113 = ((($vtable$i$i112)) + 40|0);
    $43 = HEAP32[$vfn$i$i113>>2]|0;
    __THREW__ = 0;
    (invoke_ii($43|0,($$pre$i$i$i|0))|0);
    $44 = __THREW__; __THREW__ = 0;
    $45 = $44&1;
    if ($45) {
     break;
    } else {
     $$pre$i$i$i34 = $$pre$i$i$i;$73 = $59;$__a$0 = $__a$1;
     continue;
    }
   } else {
    $incdec$ptr$i$i = ((($41)) + 4|0);
    HEAP32[$__ninp_$i$i>>2] = $incdec$ptr$i$i;
    $46 = HEAP32[$41>>2]|0;
    (__ZNSt3__211char_traitsIwE11to_int_typeEw($46)|0);
    $$pre$i$i$i34 = $$pre$i$i$i;$73 = $59;$__a$0 = $__a$1;
    continue;
   }
  }
  L50: do {
   if ((label|0) == 37) {
    $__size_$i$i120 = ((($__grouping)) + 11|0);
    $47 = HEAP8[$__size_$i$i120>>0]|0;
    $tobool$i$i121 = ($47<<24>>24)<(0);
    $__size_$i3$i122 = ((($__grouping)) + 4|0);
    $48 = HEAP32[$__size_$i3$i122>>2]|0;
    $conv$i$i124 = $47&255;
    $cond$i126 = $tobool$i$i121 ? $48 : $conv$i$i124;
    $cmp30 = ($cond$i126|0)==(0);
    if (!($cmp30)) {
     $49 = HEAP32[$__g_end>>2]|0;
     $sub$ptr$lhs$cast = $49;
     $sub$ptr$rhs$cast = $__g;
     $sub$ptr$sub = (($sub$ptr$lhs$cast) - ($sub$ptr$rhs$cast))|0;
     $cmp32 = ($sub$ptr$sub|0)<(160);
     if ($cmp32) {
      $50 = HEAP32[$__dc>>2]|0;
      $incdec$ptr = ((($49)) + 4|0);
      HEAP32[$__g_end>>2] = $incdec$ptr;
      HEAP32[$49>>2] = $50;
     }
    }
    $51 = HEAP32[$__a_end>>2]|0;
    __THREW__ = 0;
    $call36 = (invoke_iiiii(405,($__a$2|0),($51|0),($__err|0),($call|0))|0);
    $52 = __THREW__; __THREW__ = 0;
    $53 = $52&1;
    if (!($53)) {
     HEAP32[$__v>>2] = $call36;
     $54 = HEAP32[$__g_end>>2]|0;
     __THREW__ = 0;
     invoke_viiii(400,($__grouping|0),($__g|0),($54|0),($__err|0));
     $55 = __THREW__; __THREW__ = 0;
     $56 = $55&1;
     if (!($56)) {
      $tobool$i$i$i = ($$pre$i$i$i|0)==(0|0);
      if ($tobool$i$i$i) {
       $76 = 1;
      } else {
       $__ninp_$i$i$i$i = ((($$pre$i$i$i)) + 12|0);
       $57 = HEAP32[$__ninp_$i$i$i$i>>2]|0;
       $__einp_$i$i$i$i = ((($$pre$i$i$i)) + 16|0);
       $58 = HEAP32[$__einp_$i$i$i$i>>2]|0;
       $cmp$i$i$i$i = ($57|0)==($58|0);
       if ($cmp$i$i$i$i) {
        $vtable$i$i$i$i = HEAP32[$59>>2]|0;
        $vfn$i$i$i$i = ((($vtable$i$i$i$i)) + 36|0);
        $60 = HEAP32[$vfn$i$i$i$i>>2]|0;
        __THREW__ = 0;
        $call$i$i$i$i16 = (invoke_ii($60|0,($$pre$i$i$i|0))|0);
        $61 = __THREW__; __THREW__ = 0;
        $62 = $61&1;
        if ($62) {
         break;
        } else {
         $retval$0$i$i$i$i = $call$i$i$i$i16;
        }
       } else {
        $63 = HEAP32[$57>>2]|0;
        $call3$i$i$i$i = (__ZNSt3__211char_traitsIwE11to_int_typeEw($63)|0);
        $retval$0$i$i$i$i = $call3$i$i$i$i;
       }
       $call3$i$i$i = (__ZNSt3__211char_traitsIwE3eofEv()|0);
       $call4$i$i$i = (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($retval$0$i$i$i$i,$call3$i$i$i)|0);
       if ($call4$i$i$i) {
        HEAP32[$__b>>2] = 0;
        $76 = 1;
       } else {
        $76 = 0;
       }
      }
      $tobool$i2$i$i = ($$pre$i17$i$i|0)==(0|0);
      do {
       if ($tobool$i2$i$i) {
        label = 54;
       } else {
        $__ninp_$i$i3$i$i = ((($$pre$i17$i$i)) + 12|0);
        $64 = HEAP32[$__ninp_$i$i3$i$i>>2]|0;
        $__einp_$i$i4$i$i = ((($$pre$i17$i$i)) + 16|0);
        $65 = HEAP32[$__einp_$i$i4$i$i>>2]|0;
        $cmp$i$i5$i$i = ($64|0)==($65|0);
        if ($cmp$i$i5$i$i) {
         $vtable$i$i7$i$i = HEAP32[$$pre$i17$i$i>>2]|0;
         $vfn$i$i8$i$i = ((($vtable$i$i7$i$i)) + 36|0);
         $66 = HEAP32[$vfn$i$i8$i$i>>2]|0;
         __THREW__ = 0;
         $call$i$i9$i$i17 = (invoke_ii($66|0,($$pre$i17$i$i|0))|0);
         $67 = __THREW__; __THREW__ = 0;
         $68 = $67&1;
         if ($68) {
          break L50;
         } else {
          $retval$0$i$i13$i$i = $call$i$i9$i$i17;
         }
        } else {
         $69 = HEAP32[$64>>2]|0;
         $call3$i$i11$i$i = (__ZNSt3__211char_traitsIwE11to_int_typeEw($69)|0);
         $retval$0$i$i13$i$i = $call3$i$i11$i$i;
        }
        $call3$i14$i$i = (__ZNSt3__211char_traitsIwE3eofEv()|0);
        $call4$i15$i$i = (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($retval$0$i$i13$i$i,$call3$i14$i$i)|0);
        if ($call4$i15$i$i) {
         HEAP32[$__e>>2] = 0;
         label = 54;
         break;
        } else {
         if ($76) {
          break;
         } else {
          label = 56;
          break;
         }
        }
       }
      } while(0);
      if ((label|0) == 54) {
       if ($76) {
        label = 56;
       }
      }
      if ((label|0) == 56) {
       $70 = HEAP32[$__err>>2]|0;
       $or = $70 | 2;
       HEAP32[$__err>>2] = $or;
      }
      $retval$sroa$0$0$copyload = HEAP32[$__b>>2]|0;
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__buf);
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grouping);
      STACKTOP = sp;return ($retval$sroa$0$0$copyload|0);
     }
    }
   }
  } while(0);
  $71 = ___cxa_find_matching_catch_2()|0;
  $72 = tempRet0;
  $ehselector$slot$1 = $72;$exn$slot$1 = $71;
 }
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__buf);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grouping);
 ___resumeException($exn$slot$1|0);
 // unreachable;
 return (0)|0;
}
function __ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__do_get_unsignedItEES4_S4_S4_RNS_8ios_baseERjRT_($this,$__b,$__e,$__iob,$__err,$__v) {
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$pre = 0, $$pre$i$i$i = 0, $$pre$i$i$i34 = 0, $$pre$i17$i$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $8 = 0;
 var $9 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__a_end = 0, $__atoms = 0, $__buf = 0, $__cap_$i$i = 0, $__cap_$i$i90 = 0, $__dc = 0, $__einp_$i$i = 0, $__einp_$i$i$i$i = 0, $__einp_$i$i$i$i22 = 0, $__einp_$i$i4$i$i = 0, $__einp_$i$i4$i$i42 = 0, $__g = 0, $__g_end = 0, $__grouping = 0, $__i$0$i$i = 0, $__ninp_$i$i = 0;
 var $__ninp_$i$i$i$i = 0, $__ninp_$i$i$i$i21 = 0, $__ninp_$i$i3$i$i = 0, $__ninp_$i$i3$i$i41 = 0, $__size_$i$i = 0, $__size_$i$i120 = 0, $__size_$i3$i = 0, $__size_$i3$i122 = 0, $__thousands_sep = 0, $add$ptr = 0, $add$ptr18 = 0, $and$i$i = 0, $and$i$i91 = 0, $arrayidx$i$i = 0, $call = 0, $call$i$i$i$i16 = 0, $call$i$i$i$i60 = 0, $call$i$i107 = 0, $call$i$i9$i$i17 = 0, $call$i$i9$i$i62 = 0;
 var $call24 = 0, $call3$i$i = 0, $call3$i$i$i = 0, $call3$i$i$i$i = 0, $call3$i$i$i$i28 = 0, $call3$i$i$i31 = 0, $call3$i$i11$i$i = 0, $call3$i$i11$i$i48 = 0, $call3$i14$i$i = 0, $call3$i14$i$i51 = 0, $call36 = 0, $call4$i$i$i = 0, $call4$i$i$i32 = 0, $call4$i15$i$i = 0, $call4$i15$i$i52 = 0, $cmp = 0, $cmp$i$i$i$i = 0, $cmp$i$i$i$i23 = 0, $cmp$i$i106 = 0, $cmp$i$i111 = 0;
 var $cmp$i$i5$i$i = 0, $cmp$i$i5$i$i43 = 0, $cmp30 = 0, $cmp32 = 0, $cond$i = 0, $cond$i$i = 0, $cond$i$i104 = 0, $cond$i126 = 0, $cond$i67 = 0, $cond$i94 = 0, $conv$i$i = 0, $conv$i$i124 = 0, $ehselector$slot$1 = 0, $exitcond$i$i = 0, $exn$slot$1 = 0, $inc$i$i = 0, $incdec$ptr = 0, $incdec$ptr$i$i = 0, $mul = 0, $or = 0;
 var $phitmp$i = 0, $phitmp$i92 = 0, $retval$0$i$i = 0, $retval$0$i$i$i$i = 0, $retval$0$i$i$i$i30 = 0, $retval$0$i$i13$i$i = 0, $retval$0$i$i13$i$i50 = 0, $retval$sroa$0$0$copyload = 0, $sub$ptr$lhs$cast = 0, $sub$ptr$rhs$cast = 0, $sub$ptr$sub = 0, $tobool = 0, $tobool$i$i = 0, $tobool$i$i$i = 0, $tobool$i$i$i18 = 0, $tobool$i$i$i20 = 0, $tobool$i$i$i99 = 0, $tobool$i$i121 = 0, $tobool$i$i65 = 0, $tobool$i$i89 = 0;
 var $tobool$i2$i$i = 0, $tobool$i2$i$i39 = 0, $vfn$i$i = 0, $vfn$i$i$i$i = 0, $vfn$i$i$i$i26 = 0, $vfn$i$i113 = 0, $vfn$i$i8$i$i = 0, $vfn$i$i8$i$i46 = 0, $vtable$i$i = 0, $vtable$i$i$i$i = 0, $vtable$i$i$i$i25 = 0, $vtable$i$i112 = 0, $vtable$i$i7$i$i = 0, $vtable$i$i7$i$i45 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 304|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(304|0);
 $__atoms = sp + 200|0;
 $__thousands_sep = sp + 196|0;
 $__grouping = sp + 184|0;
 $__buf = sp + 172|0;
 $__a_end = sp + 168|0;
 $__g = sp + 8|0;
 $__g_end = sp + 4|0;
 $__dc = sp;
 $call = (__ZNSt3__214__num_get_base10__get_baseERNS_8ios_baseE($__iob)|0);
 __ZNSt3__29__num_getIwE17__stage2_int_prepERNS_8ios_baseEPwRw($__grouping,$__iob,$__atoms,$__thousands_sep);
 ;HEAP32[$__buf>>2]=0|0;HEAP32[$__buf+4>>2]=0|0;HEAP32[$__buf+8>>2]=0|0;
 $__i$0$i$i = 0;
 while(1) {
  $exitcond$i$i = ($__i$0$i$i|0)==(3);
  if ($exitcond$i$i) {
   break;
  }
  $arrayidx$i$i = (($__buf) + ($__i$0$i$i<<2)|0);
  HEAP32[$arrayidx$i$i>>2] = 0;
  $inc$i$i = (($__i$0$i$i) + 1)|0;
  $__i$0$i$i = $inc$i$i;
 }
 $__size_$i$i = ((($__buf)) + 11|0);
 $0 = HEAP8[$__size_$i$i>>0]|0;
 $tobool$i$i = ($0<<24>>24)<(0);
 if ($tobool$i$i) {
  $__cap_$i$i = ((($__buf)) + 8|0);
  $1 = HEAP32[$__cap_$i$i>>2]|0;
  $and$i$i = $1 & 2147483647;
  $phitmp$i = (($and$i$i) + -1)|0;
  $cond$i = $phitmp$i;
 } else {
  $cond$i = 10;
 }
 __THREW__ = 0;
 invoke_viii(377,($__buf|0),($cond$i|0),0);
 $2 = __THREW__; __THREW__ = 0;
 $3 = $2&1;
 if ($3) {
  $30 = ___cxa_find_matching_catch_2()|0;
  $31 = tempRet0;
  $ehselector$slot$1 = $31;$exn$slot$1 = $30;
 } else {
  $4 = HEAP8[$__size_$i$i>>0]|0;
  $tobool$i$i$i18 = ($4<<24>>24)<(0);
  $5 = HEAP32[$__buf>>2]|0;
  $cond$i$i = $tobool$i$i$i18 ? $5 : $__buf;
  HEAP32[$__a_end>>2] = $cond$i$i;
  HEAP32[$__g_end>>2] = $__g;
  HEAP32[$__dc>>2] = 0;
  $__size_$i3$i = ((($__buf)) + 4|0);
  $__cap_$i$i90 = ((($__buf)) + 8|0);
  $$pre = HEAP32[$__b>>2]|0;
  $$pre$i$i$i34 = $$pre;$73 = $$pre;$__a$0 = $cond$i$i;
  L11: while(1) {
   $tobool$i$i$i20 = ($$pre$i$i$i34|0)==(0|0);
   if ($tobool$i$i$i20) {
    $$pre$i$i$i = 0;$59 = 0;$74 = 1;
   } else {
    $__ninp_$i$i$i$i21 = ((($$pre$i$i$i34)) + 12|0);
    $6 = HEAP32[$__ninp_$i$i$i$i21>>2]|0;
    $__einp_$i$i$i$i22 = ((($$pre$i$i$i34)) + 16|0);
    $7 = HEAP32[$__einp_$i$i$i$i22>>2]|0;
    $cmp$i$i$i$i23 = ($6|0)==($7|0);
    if ($cmp$i$i$i$i23) {
     $vtable$i$i$i$i25 = HEAP32[$$pre$i$i$i34>>2]|0;
     $vfn$i$i$i$i26 = ((($vtable$i$i$i$i25)) + 36|0);
     $8 = HEAP32[$vfn$i$i$i$i26>>2]|0;
     __THREW__ = 0;
     $call$i$i$i$i60 = (invoke_ii($8|0,($$pre$i$i$i34|0))|0);
     $9 = __THREW__; __THREW__ = 0;
     $10 = $9&1;
     if ($10) {
      break;
     } else {
      $retval$0$i$i$i$i30 = $call$i$i$i$i60;
     }
    } else {
     $11 = HEAP32[$6>>2]|0;
     $call3$i$i$i$i28 = (__ZNSt3__211char_traitsIwE11to_int_typeEw($11)|0);
     $retval$0$i$i$i$i30 = $call3$i$i$i$i28;
    }
    $call3$i$i$i31 = (__ZNSt3__211char_traitsIwE3eofEv()|0);
    $call4$i$i$i32 = (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($retval$0$i$i$i$i30,$call3$i$i$i31)|0);
    if ($call4$i$i$i32) {
     HEAP32[$__b>>2] = 0;
     $$pre$i$i$i = 0;$59 = 0;$74 = 1;
    } else {
     $$pre$i$i$i = $$pre$i$i$i34;$59 = $73;$74 = 0;
    }
   }
   $12 = HEAP32[$__e>>2]|0;
   $tobool$i2$i$i39 = ($12|0)==(0|0);
   do {
    if ($tobool$i2$i$i39) {
     label = 20;
    } else {
     $__ninp_$i$i3$i$i41 = ((($12)) + 12|0);
     $13 = HEAP32[$__ninp_$i$i3$i$i41>>2]|0;
     $__einp_$i$i4$i$i42 = ((($12)) + 16|0);
     $14 = HEAP32[$__einp_$i$i4$i$i42>>2]|0;
     $cmp$i$i5$i$i43 = ($13|0)==($14|0);
     if ($cmp$i$i5$i$i43) {
      $vtable$i$i7$i$i45 = HEAP32[$12>>2]|0;
      $vfn$i$i8$i$i46 = ((($vtable$i$i7$i$i45)) + 36|0);
      $15 = HEAP32[$vfn$i$i8$i$i46>>2]|0;
      __THREW__ = 0;
      $call$i$i9$i$i62 = (invoke_ii($15|0,($12|0))|0);
      $16 = __THREW__; __THREW__ = 0;
      $17 = $16&1;
      if ($17) {
       break L11;
      } else {
       $retval$0$i$i13$i$i50 = $call$i$i9$i$i62;
      }
     } else {
      $18 = HEAP32[$13>>2]|0;
      $call3$i$i11$i$i48 = (__ZNSt3__211char_traitsIwE11to_int_typeEw($18)|0);
      $retval$0$i$i13$i$i50 = $call3$i$i11$i$i48;
     }
     $call3$i14$i$i51 = (__ZNSt3__211char_traitsIwE3eofEv()|0);
     $call4$i15$i$i52 = (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($retval$0$i$i13$i$i50,$call3$i14$i$i51)|0);
     if ($call4$i15$i$i52) {
      HEAP32[$__e>>2] = 0;
      label = 20;
      break;
     } else {
      if ($74) {
       $75 = $12;
       break;
      } else {
       $$pre$i17$i$i = $12;$__a$2 = $__a$0;
       label = 37;
       break L11;
      }
     }
    }
   } while(0);
   if ((label|0) == 20) {
    label = 0;
    if ($74) {
     $$pre$i17$i$i = 0;$__a$2 = $__a$0;
     label = 37;
     break;
    } else {
     $75 = 0;
    }
   }
   $19 = HEAP32[$__a_end>>2]|0;
   $20 = HEAP8[$__size_$i$i>>0]|0;
   $tobool$i$i65 = ($20<<24>>24)<(0);
   $21 = HEAP32[$__size_$i3$i>>2]|0;
   $conv$i$i = $20&255;
   $cond$i67 = $tobool$i$i65 ? $21 : $conv$i$i;
   $add$ptr = (($__a$0) + ($cond$i67)|0);
   $cmp = ($19|0)==($add$ptr|0);
   if ($cmp) {
    $mul = $cond$i67 << 1;
    __THREW__ = 0;
    invoke_viii(377,($__buf|0),($mul|0),0);
    $22 = __THREW__; __THREW__ = 0;
    $23 = $22&1;
    if ($23) {
     break;
    }
    $24 = HEAP8[$__size_$i$i>>0]|0;
    $tobool$i$i89 = ($24<<24>>24)<(0);
    if ($tobool$i$i89) {
     $25 = HEAP32[$__cap_$i$i90>>2]|0;
     $and$i$i91 = $25 & 2147483647;
     $phitmp$i92 = (($and$i$i91) + -1)|0;
     $cond$i94 = $phitmp$i92;
    } else {
     $cond$i94 = 10;
    }
    __THREW__ = 0;
    invoke_viii(377,($__buf|0),($cond$i94|0),0);
    $26 = __THREW__; __THREW__ = 0;
    $27 = $26&1;
    if ($27) {
     break;
    }
    $28 = HEAP8[$__size_$i$i>>0]|0;
    $tobool$i$i$i99 = ($28<<24>>24)<(0);
    $29 = HEAP32[$__buf>>2]|0;
    $cond$i$i104 = $tobool$i$i$i99 ? $29 : $__buf;
    $add$ptr18 = (($cond$i$i104) + ($cond$i67)|0);
    HEAP32[$__a_end>>2] = $add$ptr18;
    $__a$1 = $cond$i$i104;
   } else {
    $__a$1 = $__a$0;
   }
   $__ninp_$i$i = ((($$pre$i$i$i)) + 12|0);
   $32 = HEAP32[$__ninp_$i$i>>2]|0;
   $__einp_$i$i = ((($$pre$i$i$i)) + 16|0);
   $33 = HEAP32[$__einp_$i$i>>2]|0;
   $cmp$i$i106 = ($32|0)==($33|0);
   if ($cmp$i$i106) {
    $vtable$i$i = HEAP32[$$pre$i$i$i>>2]|0;
    $vfn$i$i = ((($vtable$i$i)) + 36|0);
    $34 = HEAP32[$vfn$i$i>>2]|0;
    __THREW__ = 0;
    $call$i$i107 = (invoke_ii($34|0,($$pre$i$i$i|0))|0);
    $35 = __THREW__; __THREW__ = 0;
    $36 = $35&1;
    if ($36) {
     break;
    } else {
     $retval$0$i$i = $call$i$i107;
    }
   } else {
    $37 = HEAP32[$32>>2]|0;
    $call3$i$i = (__ZNSt3__211char_traitsIwE11to_int_typeEw($37)|0);
    $retval$0$i$i = $call3$i$i;
   }
   $38 = HEAP32[$__thousands_sep>>2]|0;
   __THREW__ = 0;
   $call24 = (invoke_iiiiiiiiiii(411,($retval$0$i$i|0),($call|0),($__a$1|0),($__a_end|0),($__dc|0),($38|0),($__grouping|0),($__g|0),($__g_end|0),($__atoms|0))|0);
   $39 = __THREW__; __THREW__ = 0;
   $40 = $39&1;
   if ($40) {
    break;
   }
   $tobool = ($call24|0)==(0);
   if (!($tobool)) {
    $$pre$i17$i$i = $75;$__a$2 = $__a$1;
    label = 37;
    break;
   }
   $41 = HEAP32[$__ninp_$i$i>>2]|0;
   $42 = HEAP32[$__einp_$i$i>>2]|0;
   $cmp$i$i111 = ($41|0)==($42|0);
   if ($cmp$i$i111) {
    $vtable$i$i112 = HEAP32[$$pre$i$i$i>>2]|0;
    $vfn$i$i113 = ((($vtable$i$i112)) + 40|0);
    $43 = HEAP32[$vfn$i$i113>>2]|0;
    __THREW__ = 0;
    (invoke_ii($43|0,($$pre$i$i$i|0))|0);
    $44 = __THREW__; __THREW__ = 0;
    $45 = $44&1;
    if ($45) {
     break;
    } else {
     $$pre$i$i$i34 = $$pre$i$i$i;$73 = $59;$__a$0 = $__a$1;
     continue;
    }
   } else {
    $incdec$ptr$i$i = ((($41)) + 4|0);
    HEAP32[$__ninp_$i$i>>2] = $incdec$ptr$i$i;
    $46 = HEAP32[$41>>2]|0;
    (__ZNSt3__211char_traitsIwE11to_int_typeEw($46)|0);
    $$pre$i$i$i34 = $$pre$i$i$i;$73 = $59;$__a$0 = $__a$1;
    continue;
   }
  }
  L50: do {
   if ((label|0) == 37) {
    $__size_$i$i120 = ((($__grouping)) + 11|0);
    $47 = HEAP8[$__size_$i$i120>>0]|0;
    $tobool$i$i121 = ($47<<24>>24)<(0);
    $__size_$i3$i122 = ((($__grouping)) + 4|0);
    $48 = HEAP32[$__size_$i3$i122>>2]|0;
    $conv$i$i124 = $47&255;
    $cond$i126 = $tobool$i$i121 ? $48 : $conv$i$i124;
    $cmp30 = ($cond$i126|0)==(0);
    if (!($cmp30)) {
     $49 = HEAP32[$__g_end>>2]|0;
     $sub$ptr$lhs$cast = $49;
     $sub$ptr$rhs$cast = $__g;
     $sub$ptr$sub = (($sub$ptr$lhs$cast) - ($sub$ptr$rhs$cast))|0;
     $cmp32 = ($sub$ptr$sub|0)<(160);
     if ($cmp32) {
      $50 = HEAP32[$__dc>>2]|0;
      $incdec$ptr = ((($49)) + 4|0);
      HEAP32[$__g_end>>2] = $incdec$ptr;
      HEAP32[$49>>2] = $50;
     }
    }
    $51 = HEAP32[$__a_end>>2]|0;
    __THREW__ = 0;
    $call36 = (invoke_iiiii(406,($__a$2|0),($51|0),($__err|0),($call|0))|0);
    $52 = __THREW__; __THREW__ = 0;
    $53 = $52&1;
    if (!($53)) {
     HEAP16[$__v>>1] = $call36;
     $54 = HEAP32[$__g_end>>2]|0;
     __THREW__ = 0;
     invoke_viiii(400,($__grouping|0),($__g|0),($54|0),($__err|0));
     $55 = __THREW__; __THREW__ = 0;
     $56 = $55&1;
     if (!($56)) {
      $tobool$i$i$i = ($$pre$i$i$i|0)==(0|0);
      if ($tobool$i$i$i) {
       $76 = 1;
      } else {
       $__ninp_$i$i$i$i = ((($$pre$i$i$i)) + 12|0);
       $57 = HEAP32[$__ninp_$i$i$i$i>>2]|0;
       $__einp_$i$i$i$i = ((($$pre$i$i$i)) + 16|0);
       $58 = HEAP32[$__einp_$i$i$i$i>>2]|0;
       $cmp$i$i$i$i = ($57|0)==($58|0);
       if ($cmp$i$i$i$i) {
        $vtable$i$i$i$i = HEAP32[$59>>2]|0;
        $vfn$i$i$i$i = ((($vtable$i$i$i$i)) + 36|0);
        $60 = HEAP32[$vfn$i$i$i$i>>2]|0;
        __THREW__ = 0;
        $call$i$i$i$i16 = (invoke_ii($60|0,($$pre$i$i$i|0))|0);
        $61 = __THREW__; __THREW__ = 0;
        $62 = $61&1;
        if ($62) {
         break;
        } else {
         $retval$0$i$i$i$i = $call$i$i$i$i16;
        }
       } else {
        $63 = HEAP32[$57>>2]|0;
        $call3$i$i$i$i = (__ZNSt3__211char_traitsIwE11to_int_typeEw($63)|0);
        $retval$0$i$i$i$i = $call3$i$i$i$i;
       }
       $call3$i$i$i = (__ZNSt3__211char_traitsIwE3eofEv()|0);
       $call4$i$i$i = (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($retval$0$i$i$i$i,$call3$i$i$i)|0);
       if ($call4$i$i$i) {
        HEAP32[$__b>>2] = 0;
        $76 = 1;
       } else {
        $76 = 0;
       }
      }
      $tobool$i2$i$i = ($$pre$i17$i$i|0)==(0|0);
      do {
       if ($tobool$i2$i$i) {
        label = 54;
       } else {
        $__ninp_$i$i3$i$i = ((($$pre$i17$i$i)) + 12|0);
        $64 = HEAP32[$__ninp_$i$i3$i$i>>2]|0;
        $__einp_$i$i4$i$i = ((($$pre$i17$i$i)) + 16|0);
        $65 = HEAP32[$__einp_$i$i4$i$i>>2]|0;
        $cmp$i$i5$i$i = ($64|0)==($65|0);
        if ($cmp$i$i5$i$i) {
         $vtable$i$i7$i$i = HEAP32[$$pre$i17$i$i>>2]|0;
         $vfn$i$i8$i$i = ((($vtable$i$i7$i$i)) + 36|0);
         $66 = HEAP32[$vfn$i$i8$i$i>>2]|0;
         __THREW__ = 0;
         $call$i$i9$i$i17 = (invoke_ii($66|0,($$pre$i17$i$i|0))|0);
         $67 = __THREW__; __THREW__ = 0;
         $68 = $67&1;
         if ($68) {
          break L50;
         } else {
          $retval$0$i$i13$i$i = $call$i$i9$i$i17;
         }
        } else {
         $69 = HEAP32[$64>>2]|0;
         $call3$i$i11$i$i = (__ZNSt3__211char_traitsIwE11to_int_typeEw($69)|0);
         $retval$0$i$i13$i$i = $call3$i$i11$i$i;
        }
        $call3$i14$i$i = (__ZNSt3__211char_traitsIwE3eofEv()|0);
        $call4$i15$i$i = (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($retval$0$i$i13$i$i,$call3$i14$i$i)|0);
        if ($call4$i15$i$i) {
         HEAP32[$__e>>2] = 0;
         label = 54;
         break;
        } else {
         if ($76) {
          break;
         } else {
          label = 56;
          break;
         }
        }
       }
      } while(0);
      if ((label|0) == 54) {
       if ($76) {
        label = 56;
       }
      }
      if ((label|0) == 56) {
       $70 = HEAP32[$__err>>2]|0;
       $or = $70 | 2;
       HEAP32[$__err>>2] = $or;
      }
      $retval$sroa$0$0$copyload = HEAP32[$__b>>2]|0;
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__buf);
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grouping);
      STACKTOP = sp;return ($retval$sroa$0$0$copyload|0);
     }
    }
   }
  } while(0);
  $71 = ___cxa_find_matching_catch_2()|0;
  $72 = tempRet0;
  $ehselector$slot$1 = $72;$exn$slot$1 = $71;
 }
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__buf);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grouping);
 ___resumeException($exn$slot$1|0);
 // unreachable;
 return (0)|0;
}
function __ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE15__do_get_signedIxEES4_S4_S4_RNS_8ios_baseERjRT_($this,$__b,$__e,$__iob,$__err,$__v) {
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$pre = 0, $$pre$i$i$i = 0, $$pre$i$i$i34 = 0, $$pre$i17$i$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $9 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__a_end = 0, $__atoms = 0, $__buf = 0, $__cap_$i$i = 0, $__cap_$i$i90 = 0, $__dc = 0, $__einp_$i$i = 0, $__einp_$i$i$i$i = 0, $__einp_$i$i$i$i22 = 0, $__einp_$i$i4$i$i = 0;
 var $__einp_$i$i4$i$i42 = 0, $__g = 0, $__g_end = 0, $__grouping = 0, $__i$0$i$i = 0, $__ninp_$i$i = 0, $__ninp_$i$i$i$i = 0, $__ninp_$i$i$i$i21 = 0, $__ninp_$i$i3$i$i = 0, $__ninp_$i$i3$i$i41 = 0, $__size_$i$i = 0, $__size_$i$i120 = 0, $__size_$i3$i = 0, $__size_$i3$i122 = 0, $__thousands_sep = 0, $add$ptr = 0, $add$ptr18 = 0, $and$i$i = 0, $and$i$i91 = 0, $arrayidx$i$i = 0;
 var $call = 0, $call$i$i$i$i16 = 0, $call$i$i$i$i60 = 0, $call$i$i107 = 0, $call$i$i9$i$i17 = 0, $call$i$i9$i$i62 = 0, $call24 = 0, $call3$i$i = 0, $call3$i$i$i = 0, $call3$i$i$i$i = 0, $call3$i$i$i$i28 = 0, $call3$i$i$i31 = 0, $call3$i$i11$i$i = 0, $call3$i$i11$i$i48 = 0, $call3$i14$i$i = 0, $call3$i14$i$i51 = 0, $call4$i$i$i = 0, $call4$i$i$i32 = 0, $call4$i15$i$i = 0, $call4$i15$i$i52 = 0;
 var $cmp = 0, $cmp$i$i$i$i = 0, $cmp$i$i$i$i23 = 0, $cmp$i$i106 = 0, $cmp$i$i111 = 0, $cmp$i$i5$i$i = 0, $cmp$i$i5$i$i43 = 0, $cmp30 = 0, $cmp32 = 0, $cond$i = 0, $cond$i$i = 0, $cond$i$i104 = 0, $cond$i126 = 0, $cond$i67 = 0, $cond$i94 = 0, $conv$i$i = 0, $conv$i$i124 = 0, $ehselector$slot$1 = 0, $exitcond$i$i = 0, $exn$slot$1 = 0;
 var $inc$i$i = 0, $incdec$ptr = 0, $incdec$ptr$i$i = 0, $mul = 0, $or = 0, $phitmp$i = 0, $phitmp$i92 = 0, $retval$0$i$i = 0, $retval$0$i$i$i$i = 0, $retval$0$i$i$i$i30 = 0, $retval$0$i$i13$i$i = 0, $retval$0$i$i13$i$i50 = 0, $retval$sroa$0$0$copyload = 0, $sub$ptr$lhs$cast = 0, $sub$ptr$rhs$cast = 0, $sub$ptr$sub = 0, $tobool = 0, $tobool$i$i = 0, $tobool$i$i$i = 0, $tobool$i$i$i18 = 0;
 var $tobool$i$i$i20 = 0, $tobool$i$i$i99 = 0, $tobool$i$i121 = 0, $tobool$i$i65 = 0, $tobool$i$i89 = 0, $tobool$i2$i$i = 0, $tobool$i2$i$i39 = 0, $vfn$i$i = 0, $vfn$i$i$i$i = 0, $vfn$i$i$i$i26 = 0, $vfn$i$i113 = 0, $vfn$i$i8$i$i = 0, $vfn$i$i8$i$i46 = 0, $vtable$i$i = 0, $vtable$i$i$i$i = 0, $vtable$i$i$i$i25 = 0, $vtable$i$i112 = 0, $vtable$i$i7$i$i = 0, $vtable$i$i7$i$i45 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 304|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(304|0);
 $__atoms = sp + 200|0;
 $__thousands_sep = sp + 196|0;
 $__grouping = sp + 184|0;
 $__buf = sp + 172|0;
 $__a_end = sp + 168|0;
 $__g = sp + 8|0;
 $__g_end = sp + 4|0;
 $__dc = sp;
 $call = (__ZNSt3__214__num_get_base10__get_baseERNS_8ios_baseE($__iob)|0);
 __ZNSt3__29__num_getIwE17__stage2_int_prepERNS_8ios_baseEPwRw($__grouping,$__iob,$__atoms,$__thousands_sep);
 ;HEAP32[$__buf>>2]=0|0;HEAP32[$__buf+4>>2]=0|0;HEAP32[$__buf+8>>2]=0|0;
 $__i$0$i$i = 0;
 while(1) {
  $exitcond$i$i = ($__i$0$i$i|0)==(3);
  if ($exitcond$i$i) {
   break;
  }
  $arrayidx$i$i = (($__buf) + ($__i$0$i$i<<2)|0);
  HEAP32[$arrayidx$i$i>>2] = 0;
  $inc$i$i = (($__i$0$i$i) + 1)|0;
  $__i$0$i$i = $inc$i$i;
 }
 $__size_$i$i = ((($__buf)) + 11|0);
 $0 = HEAP8[$__size_$i$i>>0]|0;
 $tobool$i$i = ($0<<24>>24)<(0);
 if ($tobool$i$i) {
  $__cap_$i$i = ((($__buf)) + 8|0);
  $1 = HEAP32[$__cap_$i$i>>2]|0;
  $and$i$i = $1 & 2147483647;
  $phitmp$i = (($and$i$i) + -1)|0;
  $cond$i = $phitmp$i;
 } else {
  $cond$i = 10;
 }
 __THREW__ = 0;
 invoke_viii(377,($__buf|0),($cond$i|0),0);
 $2 = __THREW__; __THREW__ = 0;
 $3 = $2&1;
 if ($3) {
  $30 = ___cxa_find_matching_catch_2()|0;
  $31 = tempRet0;
  $ehselector$slot$1 = $31;$exn$slot$1 = $30;
 } else {
  $4 = HEAP8[$__size_$i$i>>0]|0;
  $tobool$i$i$i18 = ($4<<24>>24)<(0);
  $5 = HEAP32[$__buf>>2]|0;
  $cond$i$i = $tobool$i$i$i18 ? $5 : $__buf;
  HEAP32[$__a_end>>2] = $cond$i$i;
  HEAP32[$__g_end>>2] = $__g;
  HEAP32[$__dc>>2] = 0;
  $__size_$i3$i = ((($__buf)) + 4|0);
  $__cap_$i$i90 = ((($__buf)) + 8|0);
  $$pre = HEAP32[$__b>>2]|0;
  $$pre$i$i$i34 = $$pre;$79 = $$pre;$__a$0 = $cond$i$i;
  L11: while(1) {
   $tobool$i$i$i20 = ($$pre$i$i$i34|0)==(0|0);
   if ($tobool$i$i$i20) {
    $$pre$i$i$i = 0;$65 = 0;$80 = 1;
   } else {
    $__ninp_$i$i$i$i21 = ((($$pre$i$i$i34)) + 12|0);
    $6 = HEAP32[$__ninp_$i$i$i$i21>>2]|0;
    $__einp_$i$i$i$i22 = ((($$pre$i$i$i34)) + 16|0);
    $7 = HEAP32[$__einp_$i$i$i$i22>>2]|0;
    $cmp$i$i$i$i23 = ($6|0)==($7|0);
    if ($cmp$i$i$i$i23) {
     $vtable$i$i$i$i25 = HEAP32[$$pre$i$i$i34>>2]|0;
     $vfn$i$i$i$i26 = ((($vtable$i$i$i$i25)) + 36|0);
     $8 = HEAP32[$vfn$i$i$i$i26>>2]|0;
     __THREW__ = 0;
     $call$i$i$i$i60 = (invoke_ii($8|0,($$pre$i$i$i34|0))|0);
     $9 = __THREW__; __THREW__ = 0;
     $10 = $9&1;
     if ($10) {
      break;
     } else {
      $retval$0$i$i$i$i30 = $call$i$i$i$i60;
     }
    } else {
     $11 = HEAP32[$6>>2]|0;
     $call3$i$i$i$i28 = (__ZNSt3__211char_traitsIwE11to_int_typeEw($11)|0);
     $retval$0$i$i$i$i30 = $call3$i$i$i$i28;
    }
    $call3$i$i$i31 = (__ZNSt3__211char_traitsIwE3eofEv()|0);
    $call4$i$i$i32 = (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($retval$0$i$i$i$i30,$call3$i$i$i31)|0);
    if ($call4$i$i$i32) {
     HEAP32[$__b>>2] = 0;
     $$pre$i$i$i = 0;$65 = 0;$80 = 1;
    } else {
     $$pre$i$i$i = $$pre$i$i$i34;$65 = $79;$80 = 0;
    }
   }
   $12 = HEAP32[$__e>>2]|0;
   $tobool$i2$i$i39 = ($12|0)==(0|0);
   do {
    if ($tobool$i2$i$i39) {
     label = 20;
    } else {
     $__ninp_$i$i3$i$i41 = ((($12)) + 12|0);
     $13 = HEAP32[$__ninp_$i$i3$i$i41>>2]|0;
     $__einp_$i$i4$i$i42 = ((($12)) + 16|0);
     $14 = HEAP32[$__einp_$i$i4$i$i42>>2]|0;
     $cmp$i$i5$i$i43 = ($13|0)==($14|0);
     if ($cmp$i$i5$i$i43) {
      $vtable$i$i7$i$i45 = HEAP32[$12>>2]|0;
      $vfn$i$i8$i$i46 = ((($vtable$i$i7$i$i45)) + 36|0);
      $15 = HEAP32[$vfn$i$i8$i$i46>>2]|0;
      __THREW__ = 0;
      $call$i$i9$i$i62 = (invoke_ii($15|0,($12|0))|0);
      $16 = __THREW__; __THREW__ = 0;
      $17 = $16&1;
      if ($17) {
       break L11;
      } else {
       $retval$0$i$i13$i$i50 = $call$i$i9$i$i62;
      }
     } else {
      $18 = HEAP32[$13>>2]|0;
      $call3$i$i11$i$i48 = (__ZNSt3__211char_traitsIwE11to_int_typeEw($18)|0);
      $retval$0$i$i13$i$i50 = $call3$i$i11$i$i48;
     }
     $call3$i14$i$i51 = (__ZNSt3__211char_traitsIwE3eofEv()|0);
     $call4$i15$i$i52 = (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($retval$0$i$i13$i$i50,$call3$i14$i$i51)|0);
     if ($call4$i15$i$i52) {
      HEAP32[$__e>>2] = 0;
      label = 20;
      break;
     } else {
      if ($80) {
       $81 = $12;
       break;
      } else {
       $$pre$i17$i$i = $12;$__a$2 = $__a$0;
       label = 37;
       break L11;
      }
     }
    }
   } while(0);
   if ((label|0) == 20) {
    label = 0;
    if ($80) {
     $$pre$i17$i$i = 0;$__a$2 = $__a$0;
     label = 37;
     break;
    } else {
     $81 = 0;
    }
   }
   $19 = HEAP32[$__a_end>>2]|0;
   $20 = HEAP8[$__size_$i$i>>0]|0;
   $tobool$i$i65 = ($20<<24>>24)<(0);
   $21 = HEAP32[$__size_$i3$i>>2]|0;
   $conv$i$i = $20&255;
   $cond$i67 = $tobool$i$i65 ? $21 : $conv$i$i;
   $add$ptr = (($__a$0) + ($cond$i67)|0);
   $cmp = ($19|0)==($add$ptr|0);
   if ($cmp) {
    $mul = $cond$i67 << 1;
    __THREW__ = 0;
    invoke_viii(377,($__buf|0),($mul|0),0);
    $22 = __THREW__; __THREW__ = 0;
    $23 = $22&1;
    if ($23) {
     break;
    }
    $24 = HEAP8[$__size_$i$i>>0]|0;
    $tobool$i$i89 = ($24<<24>>24)<(0);
    if ($tobool$i$i89) {
     $25 = HEAP32[$__cap_$i$i90>>2]|0;
     $and$i$i91 = $25 & 2147483647;
     $phitmp$i92 = (($and$i$i91) + -1)|0;
     $cond$i94 = $phitmp$i92;
    } else {
     $cond$i94 = 10;
    }
    __THREW__ = 0;
    invoke_viii(377,($__buf|0),($cond$i94|0),0);
    $26 = __THREW__; __THREW__ = 0;
    $27 = $26&1;
    if ($27) {
     break;
    }
    $28 = HEAP8[$__size_$i$i>>0]|0;
    $tobool$i$i$i99 = ($28<<24>>24)<(0);
    $29 = HEAP32[$__buf>>2]|0;
    $cond$i$i104 = $tobool$i$i$i99 ? $29 : $__buf;
    $add$ptr18 = (($cond$i$i104) + ($cond$i67)|0);
    HEAP32[$__a_end>>2] = $add$ptr18;
    $__a$1 = $cond$i$i104;
   } else {
    $__a$1 = $__a$0;
   }
   $__ninp_$i$i = ((($$pre$i$i$i)) + 12|0);
   $32 = HEAP32[$__ninp_$i$i>>2]|0;
   $__einp_$i$i = ((($$pre$i$i$i)) + 16|0);
   $33 = HEAP32[$__einp_$i$i>>2]|0;
   $cmp$i$i106 = ($32|0)==($33|0);
   if ($cmp$i$i106) {
    $vtable$i$i = HEAP32[$$pre$i$i$i>>2]|0;
    $vfn$i$i = ((($vtable$i$i)) + 36|0);
    $34 = HEAP32[$vfn$i$i>>2]|0;
    __THREW__ = 0;
    $call$i$i107 = (invoke_ii($34|0,($$pre$i$i$i|0))|0);
    $35 = __THREW__; __THREW__ = 0;
    $36 = $35&1;
    if ($36) {
     break;
    } else {
     $retval$0$i$i = $call$i$i107;
    }
   } else {
    $37 = HEAP32[$32>>2]|0;
    $call3$i$i = (__ZNSt3__211char_traitsIwE11to_int_typeEw($37)|0);
    $retval$0$i$i = $call3$i$i;
   }
   $38 = HEAP32[$__thousands_sep>>2]|0;
   __THREW__ = 0;
   $call24 = (invoke_iiiiiiiiiii(411,($retval$0$i$i|0),($call|0),($__a$1|0),($__a_end|0),($__dc|0),($38|0),($__grouping|0),($__g|0),($__g_end|0),($__atoms|0))|0);
   $39 = __THREW__; __THREW__ = 0;
   $40 = $39&1;
   if ($40) {
    break;
   }
   $tobool = ($call24|0)==(0);
   if (!($tobool)) {
    $$pre$i17$i$i = $81;$__a$2 = $__a$1;
    label = 37;
    break;
   }
   $41 = HEAP32[$__ninp_$i$i>>2]|0;
   $42 = HEAP32[$__einp_$i$i>>2]|0;
   $cmp$i$i111 = ($41|0)==($42|0);
   if ($cmp$i$i111) {
    $vtable$i$i112 = HEAP32[$$pre$i$i$i>>2]|0;
    $vfn$i$i113 = ((($vtable$i$i112)) + 40|0);
    $43 = HEAP32[$vfn$i$i113>>2]|0;
    __THREW__ = 0;
    (invoke_ii($43|0,($$pre$i$i$i|0))|0);
    $44 = __THREW__; __THREW__ = 0;
    $45 = $44&1;
    if ($45) {
     break;
    } else {
     $$pre$i$i$i34 = $$pre$i$i$i;$79 = $65;$__a$0 = $__a$1;
     continue;
    }
   } else {
    $incdec$ptr$i$i = ((($41)) + 4|0);
    HEAP32[$__ninp_$i$i>>2] = $incdec$ptr$i$i;
    $46 = HEAP32[$41>>2]|0;
    (__ZNSt3__211char_traitsIwE11to_int_typeEw($46)|0);
    $$pre$i$i$i34 = $$pre$i$i$i;$79 = $65;$__a$0 = $__a$1;
    continue;
   }
  }
  L50: do {
   if ((label|0) == 37) {
    $__size_$i$i120 = ((($__grouping)) + 11|0);
    $47 = HEAP8[$__size_$i$i120>>0]|0;
    $tobool$i$i121 = ($47<<24>>24)<(0);
    $__size_$i3$i122 = ((($__grouping)) + 4|0);
    $48 = HEAP32[$__size_$i3$i122>>2]|0;
    $conv$i$i124 = $47&255;
    $cond$i126 = $tobool$i$i121 ? $48 : $conv$i$i124;
    $cmp30 = ($cond$i126|0)==(0);
    if (!($cmp30)) {
     $49 = HEAP32[$__g_end>>2]|0;
     $sub$ptr$lhs$cast = $49;
     $sub$ptr$rhs$cast = $__g;
     $sub$ptr$sub = (($sub$ptr$lhs$cast) - ($sub$ptr$rhs$cast))|0;
     $cmp32 = ($sub$ptr$sub|0)<(160);
     if ($cmp32) {
      $50 = HEAP32[$__dc>>2]|0;
      $incdec$ptr = ((($49)) + 4|0);
      HEAP32[$__g_end>>2] = $incdec$ptr;
      HEAP32[$49>>2] = $50;
     }
    }
    $51 = HEAP32[$__a_end>>2]|0;
    __THREW__ = 0;
    $52 = (invoke_iiiii(407,($__a$2|0),($51|0),($__err|0),($call|0))|0);
    $53 = tempRet0;
    $54 = __THREW__; __THREW__ = 0;
    $55 = $54&1;
    if (!($55)) {
     $56 = $__v;
     $57 = $56;
     HEAP32[$57>>2] = $52;
     $58 = (($56) + 4)|0;
     $59 = $58;
     HEAP32[$59>>2] = $53;
     $60 = HEAP32[$__g_end>>2]|0;
     __THREW__ = 0;
     invoke_viiii(400,($__grouping|0),($__g|0),($60|0),($__err|0));
     $61 = __THREW__; __THREW__ = 0;
     $62 = $61&1;
     if (!($62)) {
      $tobool$i$i$i = ($$pre$i$i$i|0)==(0|0);
      if ($tobool$i$i$i) {
       $82 = 1;
      } else {
       $__ninp_$i$i$i$i = ((($$pre$i$i$i)) + 12|0);
       $63 = HEAP32[$__ninp_$i$i$i$i>>2]|0;
       $__einp_$i$i$i$i = ((($$pre$i$i$i)) + 16|0);
       $64 = HEAP32[$__einp_$i$i$i$i>>2]|0;
       $cmp$i$i$i$i = ($63|0)==($64|0);
       if ($cmp$i$i$i$i) {
        $vtable$i$i$i$i = HEAP32[$65>>2]|0;
        $vfn$i$i$i$i = ((($vtable$i$i$i$i)) + 36|0);
        $66 = HEAP32[$vfn$i$i$i$i>>2]|0;
        __THREW__ = 0;
        $call$i$i$i$i16 = (invoke_ii($66|0,($$pre$i$i$i|0))|0);
        $67 = __THREW__; __THREW__ = 0;
        $68 = $67&1;
        if ($68) {
         break;
        } else {
         $retval$0$i$i$i$i = $call$i$i$i$i16;
        }
       } else {
        $69 = HEAP32[$63>>2]|0;
        $call3$i$i$i$i = (__ZNSt3__211char_traitsIwE11to_int_typeEw($69)|0);
        $retval$0$i$i$i$i = $call3$i$i$i$i;
       }
       $call3$i$i$i = (__ZNSt3__211char_traitsIwE3eofEv()|0);
       $call4$i$i$i = (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($retval$0$i$i$i$i,$call3$i$i$i)|0);
       if ($call4$i$i$i) {
        HEAP32[$__b>>2] = 0;
        $82 = 1;
       } else {
        $82 = 0;
       }
      }
      $tobool$i2$i$i = ($$pre$i17$i$i|0)==(0|0);
      do {
       if ($tobool$i2$i$i) {
        label = 54;
       } else {
        $__ninp_$i$i3$i$i = ((($$pre$i17$i$i)) + 12|0);
        $70 = HEAP32[$__ninp_$i$i3$i$i>>2]|0;
        $__einp_$i$i4$i$i = ((($$pre$i17$i$i)) + 16|0);
        $71 = HEAP32[$__einp_$i$i4$i$i>>2]|0;
        $cmp$i$i5$i$i = ($70|0)==($71|0);
        if ($cmp$i$i5$i$i) {
         $vtable$i$i7$i$i = HEAP32[$$pre$i17$i$i>>2]|0;
         $vfn$i$i8$i$i = ((($vtable$i$i7$i$i)) + 36|0);
         $72 = HEAP32[$vfn$i$i8$i$i>>2]|0;
         __THREW__ = 0;
         $call$i$i9$i$i17 = (invoke_ii($72|0,($$pre$i17$i$i|0))|0);
         $73 = __THREW__; __THREW__ = 0;
         $74 = $73&1;
         if ($74) {
          break L50;
         } else {
          $retval$0$i$i13$i$i = $call$i$i9$i$i17;
         }
        } else {
         $75 = HEAP32[$70>>2]|0;
         $call3$i$i11$i$i = (__ZNSt3__211char_traitsIwE11to_int_typeEw($75)|0);
         $retval$0$i$i13$i$i = $call3$i$i11$i$i;
        }
        $call3$i14$i$i = (__ZNSt3__211char_traitsIwE3eofEv()|0);
        $call4$i15$i$i = (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($retval$0$i$i13$i$i,$call3$i14$i$i)|0);
        if ($call4$i15$i$i) {
         HEAP32[$__e>>2] = 0;
         label = 54;
         break;
        } else {
         if ($82) {
          break;
         } else {
          label = 56;
          break;
         }
        }
       }
      } while(0);
      if ((label|0) == 54) {
       if ($82) {
        label = 56;
       }
      }
      if ((label|0) == 56) {
       $76 = HEAP32[$__err>>2]|0;
       $or = $76 | 2;
       HEAP32[$__err>>2] = $or;
      }
      $retval$sroa$0$0$copyload = HEAP32[$__b>>2]|0;
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__buf);
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grouping);
      STACKTOP = sp;return ($retval$sroa$0$0$copyload|0);
     }
    }
   }
  } while(0);
  $77 = ___cxa_find_matching_catch_2()|0;
  $78 = tempRet0;
  $ehselector$slot$1 = $78;$exn$slot$1 = $77;
 }
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__buf);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grouping);
 ___resumeException($exn$slot$1|0);
 // unreachable;
 return (0)|0;
}
function __ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE15__do_get_signedIlEES4_S4_S4_RNS_8ios_baseERjRT_($this,$__b,$__e,$__iob,$__err,$__v) {
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$pre = 0, $$pre$i$i$i = 0, $$pre$i$i$i34 = 0, $$pre$i17$i$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $8 = 0;
 var $9 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__a_end = 0, $__atoms = 0, $__buf = 0, $__cap_$i$i = 0, $__cap_$i$i90 = 0, $__dc = 0, $__einp_$i$i = 0, $__einp_$i$i$i$i = 0, $__einp_$i$i$i$i22 = 0, $__einp_$i$i4$i$i = 0, $__einp_$i$i4$i$i42 = 0, $__g = 0, $__g_end = 0, $__grouping = 0, $__i$0$i$i = 0, $__ninp_$i$i = 0;
 var $__ninp_$i$i$i$i = 0, $__ninp_$i$i$i$i21 = 0, $__ninp_$i$i3$i$i = 0, $__ninp_$i$i3$i$i41 = 0, $__size_$i$i = 0, $__size_$i$i120 = 0, $__size_$i3$i = 0, $__size_$i3$i122 = 0, $__thousands_sep = 0, $add$ptr = 0, $add$ptr18 = 0, $and$i$i = 0, $and$i$i91 = 0, $arrayidx$i$i = 0, $call = 0, $call$i$i$i$i16 = 0, $call$i$i$i$i60 = 0, $call$i$i107 = 0, $call$i$i9$i$i17 = 0, $call$i$i9$i$i62 = 0;
 var $call24 = 0, $call3$i$i = 0, $call3$i$i$i = 0, $call3$i$i$i$i = 0, $call3$i$i$i$i28 = 0, $call3$i$i$i31 = 0, $call3$i$i11$i$i = 0, $call3$i$i11$i$i48 = 0, $call3$i14$i$i = 0, $call3$i14$i$i51 = 0, $call36 = 0, $call4$i$i$i = 0, $call4$i$i$i32 = 0, $call4$i15$i$i = 0, $call4$i15$i$i52 = 0, $cmp = 0, $cmp$i$i$i$i = 0, $cmp$i$i$i$i23 = 0, $cmp$i$i106 = 0, $cmp$i$i111 = 0;
 var $cmp$i$i5$i$i = 0, $cmp$i$i5$i$i43 = 0, $cmp30 = 0, $cmp32 = 0, $cond$i = 0, $cond$i$i = 0, $cond$i$i104 = 0, $cond$i126 = 0, $cond$i67 = 0, $cond$i94 = 0, $conv$i$i = 0, $conv$i$i124 = 0, $ehselector$slot$1 = 0, $exitcond$i$i = 0, $exn$slot$1 = 0, $inc$i$i = 0, $incdec$ptr = 0, $incdec$ptr$i$i = 0, $mul = 0, $or = 0;
 var $phitmp$i = 0, $phitmp$i92 = 0, $retval$0$i$i = 0, $retval$0$i$i$i$i = 0, $retval$0$i$i$i$i30 = 0, $retval$0$i$i13$i$i = 0, $retval$0$i$i13$i$i50 = 0, $retval$sroa$0$0$copyload = 0, $sub$ptr$lhs$cast = 0, $sub$ptr$rhs$cast = 0, $sub$ptr$sub = 0, $tobool = 0, $tobool$i$i = 0, $tobool$i$i$i = 0, $tobool$i$i$i18 = 0, $tobool$i$i$i20 = 0, $tobool$i$i$i99 = 0, $tobool$i$i121 = 0, $tobool$i$i65 = 0, $tobool$i$i89 = 0;
 var $tobool$i2$i$i = 0, $tobool$i2$i$i39 = 0, $vfn$i$i = 0, $vfn$i$i$i$i = 0, $vfn$i$i$i$i26 = 0, $vfn$i$i113 = 0, $vfn$i$i8$i$i = 0, $vfn$i$i8$i$i46 = 0, $vtable$i$i = 0, $vtable$i$i$i$i = 0, $vtable$i$i$i$i25 = 0, $vtable$i$i112 = 0, $vtable$i$i7$i$i = 0, $vtable$i$i7$i$i45 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 304|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(304|0);
 $__atoms = sp + 200|0;
 $__thousands_sep = sp + 196|0;
 $__grouping = sp + 184|0;
 $__buf = sp + 172|0;
 $__a_end = sp + 168|0;
 $__g = sp + 8|0;
 $__g_end = sp + 4|0;
 $__dc = sp;
 $call = (__ZNSt3__214__num_get_base10__get_baseERNS_8ios_baseE($__iob)|0);
 __ZNSt3__29__num_getIwE17__stage2_int_prepERNS_8ios_baseEPwRw($__grouping,$__iob,$__atoms,$__thousands_sep);
 ;HEAP32[$__buf>>2]=0|0;HEAP32[$__buf+4>>2]=0|0;HEAP32[$__buf+8>>2]=0|0;
 $__i$0$i$i = 0;
 while(1) {
  $exitcond$i$i = ($__i$0$i$i|0)==(3);
  if ($exitcond$i$i) {
   break;
  }
  $arrayidx$i$i = (($__buf) + ($__i$0$i$i<<2)|0);
  HEAP32[$arrayidx$i$i>>2] = 0;
  $inc$i$i = (($__i$0$i$i) + 1)|0;
  $__i$0$i$i = $inc$i$i;
 }
 $__size_$i$i = ((($__buf)) + 11|0);
 $0 = HEAP8[$__size_$i$i>>0]|0;
 $tobool$i$i = ($0<<24>>24)<(0);
 if ($tobool$i$i) {
  $__cap_$i$i = ((($__buf)) + 8|0);
  $1 = HEAP32[$__cap_$i$i>>2]|0;
  $and$i$i = $1 & 2147483647;
  $phitmp$i = (($and$i$i) + -1)|0;
  $cond$i = $phitmp$i;
 } else {
  $cond$i = 10;
 }
 __THREW__ = 0;
 invoke_viii(377,($__buf|0),($cond$i|0),0);
 $2 = __THREW__; __THREW__ = 0;
 $3 = $2&1;
 if ($3) {
  $30 = ___cxa_find_matching_catch_2()|0;
  $31 = tempRet0;
  $ehselector$slot$1 = $31;$exn$slot$1 = $30;
 } else {
  $4 = HEAP8[$__size_$i$i>>0]|0;
  $tobool$i$i$i18 = ($4<<24>>24)<(0);
  $5 = HEAP32[$__buf>>2]|0;
  $cond$i$i = $tobool$i$i$i18 ? $5 : $__buf;
  HEAP32[$__a_end>>2] = $cond$i$i;
  HEAP32[$__g_end>>2] = $__g;
  HEAP32[$__dc>>2] = 0;
  $__size_$i3$i = ((($__buf)) + 4|0);
  $__cap_$i$i90 = ((($__buf)) + 8|0);
  $$pre = HEAP32[$__b>>2]|0;
  $$pre$i$i$i34 = $$pre;$73 = $$pre;$__a$0 = $cond$i$i;
  L11: while(1) {
   $tobool$i$i$i20 = ($$pre$i$i$i34|0)==(0|0);
   if ($tobool$i$i$i20) {
    $$pre$i$i$i = 0;$59 = 0;$74 = 1;
   } else {
    $__ninp_$i$i$i$i21 = ((($$pre$i$i$i34)) + 12|0);
    $6 = HEAP32[$__ninp_$i$i$i$i21>>2]|0;
    $__einp_$i$i$i$i22 = ((($$pre$i$i$i34)) + 16|0);
    $7 = HEAP32[$__einp_$i$i$i$i22>>2]|0;
    $cmp$i$i$i$i23 = ($6|0)==($7|0);
    if ($cmp$i$i$i$i23) {
     $vtable$i$i$i$i25 = HEAP32[$$pre$i$i$i34>>2]|0;
     $vfn$i$i$i$i26 = ((($vtable$i$i$i$i25)) + 36|0);
     $8 = HEAP32[$vfn$i$i$i$i26>>2]|0;
     __THREW__ = 0;
     $call$i$i$i$i60 = (invoke_ii($8|0,($$pre$i$i$i34|0))|0);
     $9 = __THREW__; __THREW__ = 0;
     $10 = $9&1;
     if ($10) {
      break;
     } else {
      $retval$0$i$i$i$i30 = $call$i$i$i$i60;
     }
    } else {
     $11 = HEAP32[$6>>2]|0;
     $call3$i$i$i$i28 = (__ZNSt3__211char_traitsIwE11to_int_typeEw($11)|0);
     $retval$0$i$i$i$i30 = $call3$i$i$i$i28;
    }
    $call3$i$i$i31 = (__ZNSt3__211char_traitsIwE3eofEv()|0);
    $call4$i$i$i32 = (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($retval$0$i$i$i$i30,$call3$i$i$i31)|0);
    if ($call4$i$i$i32) {
     HEAP32[$__b>>2] = 0;
     $$pre$i$i$i = 0;$59 = 0;$74 = 1;
    } else {
     $$pre$i$i$i = $$pre$i$i$i34;$59 = $73;$74 = 0;
    }
   }
   $12 = HEAP32[$__e>>2]|0;
   $tobool$i2$i$i39 = ($12|0)==(0|0);
   do {
    if ($tobool$i2$i$i39) {
     label = 20;
    } else {
     $__ninp_$i$i3$i$i41 = ((($12)) + 12|0);
     $13 = HEAP32[$__ninp_$i$i3$i$i41>>2]|0;
     $__einp_$i$i4$i$i42 = ((($12)) + 16|0);
     $14 = HEAP32[$__einp_$i$i4$i$i42>>2]|0;
     $cmp$i$i5$i$i43 = ($13|0)==($14|0);
     if ($cmp$i$i5$i$i43) {
      $vtable$i$i7$i$i45 = HEAP32[$12>>2]|0;
      $vfn$i$i8$i$i46 = ((($vtable$i$i7$i$i45)) + 36|0);
      $15 = HEAP32[$vfn$i$i8$i$i46>>2]|0;
      __THREW__ = 0;
      $call$i$i9$i$i62 = (invoke_ii($15|0,($12|0))|0);
      $16 = __THREW__; __THREW__ = 0;
      $17 = $16&1;
      if ($17) {
       break L11;
      } else {
       $retval$0$i$i13$i$i50 = $call$i$i9$i$i62;
      }
     } else {
      $18 = HEAP32[$13>>2]|0;
      $call3$i$i11$i$i48 = (__ZNSt3__211char_traitsIwE11to_int_typeEw($18)|0);
      $retval$0$i$i13$i$i50 = $call3$i$i11$i$i48;
     }
     $call3$i14$i$i51 = (__ZNSt3__211char_traitsIwE3eofEv()|0);
     $call4$i15$i$i52 = (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($retval$0$i$i13$i$i50,$call3$i14$i$i51)|0);
     if ($call4$i15$i$i52) {
      HEAP32[$__e>>2] = 0;
      label = 20;
      break;
     } else {
      if ($74) {
       $75 = $12;
       break;
      } else {
       $$pre$i17$i$i = $12;$__a$2 = $__a$0;
       label = 37;
       break L11;
      }
     }
    }
   } while(0);
   if ((label|0) == 20) {
    label = 0;
    if ($74) {
     $$pre$i17$i$i = 0;$__a$2 = $__a$0;
     label = 37;
     break;
    } else {
     $75 = 0;
    }
   }
   $19 = HEAP32[$__a_end>>2]|0;
   $20 = HEAP8[$__size_$i$i>>0]|0;
   $tobool$i$i65 = ($20<<24>>24)<(0);
   $21 = HEAP32[$__size_$i3$i>>2]|0;
   $conv$i$i = $20&255;
   $cond$i67 = $tobool$i$i65 ? $21 : $conv$i$i;
   $add$ptr = (($__a$0) + ($cond$i67)|0);
   $cmp = ($19|0)==($add$ptr|0);
   if ($cmp) {
    $mul = $cond$i67 << 1;
    __THREW__ = 0;
    invoke_viii(377,($__buf|0),($mul|0),0);
    $22 = __THREW__; __THREW__ = 0;
    $23 = $22&1;
    if ($23) {
     break;
    }
    $24 = HEAP8[$__size_$i$i>>0]|0;
    $tobool$i$i89 = ($24<<24>>24)<(0);
    if ($tobool$i$i89) {
     $25 = HEAP32[$__cap_$i$i90>>2]|0;
     $and$i$i91 = $25 & 2147483647;
     $phitmp$i92 = (($and$i$i91) + -1)|0;
     $cond$i94 = $phitmp$i92;
    } else {
     $cond$i94 = 10;
    }
    __THREW__ = 0;
    invoke_viii(377,($__buf|0),($cond$i94|0),0);
    $26 = __THREW__; __THREW__ = 0;
    $27 = $26&1;
    if ($27) {
     break;
    }
    $28 = HEAP8[$__size_$i$i>>0]|0;
    $tobool$i$i$i99 = ($28<<24>>24)<(0);
    $29 = HEAP32[$__buf>>2]|0;
    $cond$i$i104 = $tobool$i$i$i99 ? $29 : $__buf;
    $add$ptr18 = (($cond$i$i104) + ($cond$i67)|0);
    HEAP32[$__a_end>>2] = $add$ptr18;
    $__a$1 = $cond$i$i104;
   } else {
    $__a$1 = $__a$0;
   }
   $__ninp_$i$i = ((($$pre$i$i$i)) + 12|0);
   $32 = HEAP32[$__ninp_$i$i>>2]|0;
   $__einp_$i$i = ((($$pre$i$i$i)) + 16|0);
   $33 = HEAP32[$__einp_$i$i>>2]|0;
   $cmp$i$i106 = ($32|0)==($33|0);
   if ($cmp$i$i106) {
    $vtable$i$i = HEAP32[$$pre$i$i$i>>2]|0;
    $vfn$i$i = ((($vtable$i$i)) + 36|0);
    $34 = HEAP32[$vfn$i$i>>2]|0;
    __THREW__ = 0;
    $call$i$i107 = (invoke_ii($34|0,($$pre$i$i$i|0))|0);
    $35 = __THREW__; __THREW__ = 0;
    $36 = $35&1;
    if ($36) {
     break;
    } else {
     $retval$0$i$i = $call$i$i107;
    }
   } else {
    $37 = HEAP32[$32>>2]|0;
    $call3$i$i = (__ZNSt3__211char_traitsIwE11to_int_typeEw($37)|0);
    $retval$0$i$i = $call3$i$i;
   }
   $38 = HEAP32[$__thousands_sep>>2]|0;
   __THREW__ = 0;
   $call24 = (invoke_iiiiiiiiiii(411,($retval$0$i$i|0),($call|0),($__a$1|0),($__a_end|0),($__dc|0),($38|0),($__grouping|0),($__g|0),($__g_end|0),($__atoms|0))|0);
   $39 = __THREW__; __THREW__ = 0;
   $40 = $39&1;
   if ($40) {
    break;
   }
   $tobool = ($call24|0)==(0);
   if (!($tobool)) {
    $$pre$i17$i$i = $75;$__a$2 = $__a$1;
    label = 37;
    break;
   }
   $41 = HEAP32[$__ninp_$i$i>>2]|0;
   $42 = HEAP32[$__einp_$i$i>>2]|0;
   $cmp$i$i111 = ($41|0)==($42|0);
   if ($cmp$i$i111) {
    $vtable$i$i112 = HEAP32[$$pre$i$i$i>>2]|0;
    $vfn$i$i113 = ((($vtable$i$i112)) + 40|0);
    $43 = HEAP32[$vfn$i$i113>>2]|0;
    __THREW__ = 0;
    (invoke_ii($43|0,($$pre$i$i$i|0))|0);
    $44 = __THREW__; __THREW__ = 0;
    $45 = $44&1;
    if ($45) {
     break;
    } else {
     $$pre$i$i$i34 = $$pre$i$i$i;$73 = $59;$__a$0 = $__a$1;
     continue;
    }
   } else {
    $incdec$ptr$i$i = ((($41)) + 4|0);
    HEAP32[$__ninp_$i$i>>2] = $incdec$ptr$i$i;
    $46 = HEAP32[$41>>2]|0;
    (__ZNSt3__211char_traitsIwE11to_int_typeEw($46)|0);
    $$pre$i$i$i34 = $$pre$i$i$i;$73 = $59;$__a$0 = $__a$1;
    continue;
   }
  }
  L50: do {
   if ((label|0) == 37) {
    $__size_$i$i120 = ((($__grouping)) + 11|0);
    $47 = HEAP8[$__size_$i$i120>>0]|0;
    $tobool$i$i121 = ($47<<24>>24)<(0);
    $__size_$i3$i122 = ((($__grouping)) + 4|0);
    $48 = HEAP32[$__size_$i3$i122>>2]|0;
    $conv$i$i124 = $47&255;
    $cond$i126 = $tobool$i$i121 ? $48 : $conv$i$i124;
    $cmp30 = ($cond$i126|0)==(0);
    if (!($cmp30)) {
     $49 = HEAP32[$__g_end>>2]|0;
     $sub$ptr$lhs$cast = $49;
     $sub$ptr$rhs$cast = $__g;
     $sub$ptr$sub = (($sub$ptr$lhs$cast) - ($sub$ptr$rhs$cast))|0;
     $cmp32 = ($sub$ptr$sub|0)<(160);
     if ($cmp32) {
      $50 = HEAP32[$__dc>>2]|0;
      $incdec$ptr = ((($49)) + 4|0);
      HEAP32[$__g_end>>2] = $incdec$ptr;
      HEAP32[$49>>2] = $50;
     }
    }
    $51 = HEAP32[$__a_end>>2]|0;
    __THREW__ = 0;
    $call36 = (invoke_iiiii(408,($__a$2|0),($51|0),($__err|0),($call|0))|0);
    $52 = __THREW__; __THREW__ = 0;
    $53 = $52&1;
    if (!($53)) {
     HEAP32[$__v>>2] = $call36;
     $54 = HEAP32[$__g_end>>2]|0;
     __THREW__ = 0;
     invoke_viiii(400,($__grouping|0),($__g|0),($54|0),($__err|0));
     $55 = __THREW__; __THREW__ = 0;
     $56 = $55&1;
     if (!($56)) {
      $tobool$i$i$i = ($$pre$i$i$i|0)==(0|0);
      if ($tobool$i$i$i) {
       $76 = 1;
      } else {
       $__ninp_$i$i$i$i = ((($$pre$i$i$i)) + 12|0);
       $57 = HEAP32[$__ninp_$i$i$i$i>>2]|0;
       $__einp_$i$i$i$i = ((($$pre$i$i$i)) + 16|0);
       $58 = HEAP32[$__einp_$i$i$i$i>>2]|0;
       $cmp$i$i$i$i = ($57|0)==($58|0);
       if ($cmp$i$i$i$i) {
        $vtable$i$i$i$i = HEAP32[$59>>2]|0;
        $vfn$i$i$i$i = ((($vtable$i$i$i$i)) + 36|0);
        $60 = HEAP32[$vfn$i$i$i$i>>2]|0;
        __THREW__ = 0;
        $call$i$i$i$i16 = (invoke_ii($60|0,($$pre$i$i$i|0))|0);
        $61 = __THREW__; __THREW__ = 0;
        $62 = $61&1;
        if ($62) {
         break;
        } else {
         $retval$0$i$i$i$i = $call$i$i$i$i16;
        }
       } else {
        $63 = HEAP32[$57>>2]|0;
        $call3$i$i$i$i = (__ZNSt3__211char_traitsIwE11to_int_typeEw($63)|0);
        $retval$0$i$i$i$i = $call3$i$i$i$i;
       }
       $call3$i$i$i = (__ZNSt3__211char_traitsIwE3eofEv()|0);
       $call4$i$i$i = (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($retval$0$i$i$i$i,$call3$i$i$i)|0);
       if ($call4$i$i$i) {
        HEAP32[$__b>>2] = 0;
        $76 = 1;
       } else {
        $76 = 0;
       }
      }
      $tobool$i2$i$i = ($$pre$i17$i$i|0)==(0|0);
      do {
       if ($tobool$i2$i$i) {
        label = 54;
       } else {
        $__ninp_$i$i3$i$i = ((($$pre$i17$i$i)) + 12|0);
        $64 = HEAP32[$__ninp_$i$i3$i$i>>2]|0;
        $__einp_$i$i4$i$i = ((($$pre$i17$i$i)) + 16|0);
        $65 = HEAP32[$__einp_$i$i4$i$i>>2]|0;
        $cmp$i$i5$i$i = ($64|0)==($65|0);
        if ($cmp$i$i5$i$i) {
         $vtable$i$i7$i$i = HEAP32[$$pre$i17$i$i>>2]|0;
         $vfn$i$i8$i$i = ((($vtable$i$i7$i$i)) + 36|0);
         $66 = HEAP32[$vfn$i$i8$i$i>>2]|0;
         __THREW__ = 0;
         $call$i$i9$i$i17 = (invoke_ii($66|0,($$pre$i17$i$i|0))|0);
         $67 = __THREW__; __THREW__ = 0;
         $68 = $67&1;
         if ($68) {
          break L50;
         } else {
          $retval$0$i$i13$i$i = $call$i$i9$i$i17;
         }
        } else {
         $69 = HEAP32[$64>>2]|0;
         $call3$i$i11$i$i = (__ZNSt3__211char_traitsIwE11to_int_typeEw($69)|0);
         $retval$0$i$i13$i$i = $call3$i$i11$i$i;
        }
        $call3$i14$i$i = (__ZNSt3__211char_traitsIwE3eofEv()|0);
        $call4$i15$i$i = (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($retval$0$i$i13$i$i,$call3$i14$i$i)|0);
        if ($call4$i15$i$i) {
         HEAP32[$__e>>2] = 0;
         label = 54;
         break;
        } else {
         if ($76) {
          break;
         } else {
          label = 56;
          break;
         }
        }
       }
      } while(0);
      if ((label|0) == 54) {
       if ($76) {
        label = 56;
       }
      }
      if ((label|0) == 56) {
       $70 = HEAP32[$__err>>2]|0;
       $or = $70 | 2;
       HEAP32[$__err>>2] = $or;
      }
      $retval$sroa$0$0$copyload = HEAP32[$__b>>2]|0;
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__buf);
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grouping);
      STACKTOP = sp;return ($retval$sroa$0$0$copyload|0);
     }
    }
   }
  } while(0);
  $71 = ___cxa_find_matching_catch_2()|0;
  $72 = tempRet0;
  $ehselector$slot$1 = $72;$exn$slot$1 = $71;
 }
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__buf);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grouping);
 ___resumeException($exn$slot$1|0);
 // unreachable;
 return (0)|0;
}
function __ZNSt3__214__scan_keywordINS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEPKNS_12basic_stringIwS3_NS_9allocatorIwEEEENS_5ctypeIwEEEET0_RT_SE_SD_SD_RKT1_Rjb($__b,$__e,$__kb,$__ke,$__ct,$__err,$__case_sensitive) {
 $__b = $__b|0;
 $__e = $__e|0;
 $__kb = $__kb|0;
 $__ke = $__ke|0;
 $__ct = $__ct|0;
 $__err = $__err|0;
 $__case_sensitive = $__case_sensitive|0;
 var $$pre$i$i$i = 0, $$pre$i$i$i102 = 0, $$pre$i17$i$i122 = 0, $$sink81$sink82201$index = 0, $$sink81$sink82201$index5 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $8 = 0;
 var $9 = 0, $__c$0 = 0, $__consume$0$off0 = 0, $__consume$2$off0 = 0, $__einp_$i$i = 0, $__einp_$i$i$i$i = 0, $__einp_$i$i$i$i90 = 0, $__einp_$i$i142 = 0, $__einp_$i$i4$i$i = 0, $__einp_$i$i4$i$i110 = 0, $__indx$0 = 0, $__kb$addr$0 = 0, $__kb$addr$0192 = 0, $__kc$0 = 0, $__ky$0 = 0, $__ky25$0 = 0, $__ky65$0 = 0, $__n_does_match$0 = 0, $__n_does_match$1 = 0, $__n_does_match$2 = 0;
 var $__n_does_match$3 = 0, $__n_does_match$5 = 0, $__n_does_match$6 = 0, $__n_does_match$7 = 0, $__n_might_match$0 = 0, $__n_might_match$1 = 0, $__n_might_match$2 = 0, $__n_might_match$3 = 0, $__n_might_match$5 = 0, $__ninp_$i$i = 0, $__ninp_$i$i$i$i = 0, $__ninp_$i$i$i$i89 = 0, $__ninp_$i$i141 = 0, $__ninp_$i$i3$i$i = 0, $__ninp_$i$i3$i$i109 = 0, $__size_$i$i$i = 0, $__size_$i$i$i$i = 0, $__size_$i$i151 = 0, $__size_$i2$i = 0, $__size_$i2$i$i = 0;
 var $__size_$i2$i153 = 0, $__st$0 = 0, $__st$1 = 0, $__st$2 = 0, $__st$3 = 0, $__stat_hold$sroa$0$0 = 0, $__statbuf = 0, $__status$0 = 0, $add = 0, $add$ptr$i = 0, $add62 = 0, $call$i$i$i$i128 = 0, $call$i$i$i$i85 = 0, $call$i$i133 = 0, $call$i$i9$i$i130 = 0, $call$i$i9$i$i86 = 0, $call$i134 = 0, $call$i137 = 0, $call1 = 0, $call3$i$i = 0;
 var $call3$i$i$i = 0, $call3$i$i$i$i = 0, $call3$i$i$i$i96 = 0, $call3$i$i$i99 = 0, $call3$i$i11$i$i = 0, $call3$i$i11$i$i116 = 0, $call3$i14$i$i = 0, $call3$i14$i$i119 = 0, $call4$i$i$i = 0, $call4$i$i$i100 = 0, $call4$i15$i$i = 0, $call4$i15$i$i120 = 0, $cmp = 0, $cmp$i = 0, $cmp$i$i$i$i = 0, $cmp$i$i$i$i91 = 0, $cmp$i$i131 = 0, $cmp$i$i143 = 0, $cmp$i$i5$i$i = 0, $cmp$i$i5$i$i111 = 0;
 var $cmp15 = 0, $cmp2 = 0, $cmp27 = 0, $cmp30 = 0, $cmp41 = 0, $cmp44 = 0, $cmp6 = 0, $cmp63 = 0, $cmp67 = 0, $cmp71 = 0, $cmp74 = 0, $cmp96 = 0, $cmp99 = 0, $cmptmp$i$i = 0, $cond$i = 0, $cond$i$i = 0, $cond$i$i$i = 0, $cond$i157 = 0, $conv$i$i = 0, $conv$i$i$i = 0;
 var $conv$i$i155 = 0, $dec = 0, $dec46 = 0, $dec76 = 0, $inc = 0, $inc47 = 0, $incdec$ptr = 0, $incdec$ptr$i$i = 0, $incdec$ptr10 = 0, $incdec$ptr103 = 0, $incdec$ptr104 = 0, $incdec$ptr54 = 0, $incdec$ptr55 = 0, $incdec$ptr79 = 0, $incdec$ptr80 = 0, $or = 0, $or108 = 0, $phitmp$i$i$i = 0, $phitmp$i$i$i103 = 0, $retval$0$i$i = 0;
 var $retval$0$i$i$i$i = 0, $retval$0$i$i$i$i98 = 0, $retval$0$i$i13$i$i = 0, $retval$0$i$i13$i$i118 = 0, $sub$ptr$div$i$i = 0, $sub$ptr$lhs$cast$i$i = 0, $sub$ptr$rhs$cast$i$i = 0, $sub$ptr$sub$i$i = 0, $tobool$i$i = 0, $tobool$i$i$i = 0, $tobool$i$i$i$i = 0, $tobool$i$i$i84 = 0, $tobool$i$i$i88 = 0, $tobool$i$i139 = 0, $tobool$i$i152 = 0, $tobool$i$i160 = 0, $tobool$i2$i$i = 0, $tobool$i2$i$i107 = 0, $vfn$i = 0, $vfn$i$i = 0;
 var $vfn$i$i$i$i = 0, $vfn$i$i$i$i94 = 0, $vfn$i$i145 = 0, $vfn$i$i8$i$i = 0, $vfn$i$i8$i$i114 = 0, $vfn$i136 = 0, $vtable$i = 0, $vtable$i$i = 0, $vtable$i$i$i$i = 0, $vtable$i$i$i$i93 = 0, $vtable$i$i144 = 0, $vtable$i$i7$i$i = 0, $vtable$i$i7$i$i113 = 0, $vtable$i135 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(112|0);
 $__statbuf = sp;
 $sub$ptr$lhs$cast$i$i = $__ke;
 $sub$ptr$rhs$cast$i$i = $__kb;
 $sub$ptr$sub$i$i = (($sub$ptr$lhs$cast$i$i) - ($sub$ptr$rhs$cast$i$i))|0;
 $sub$ptr$div$i$i = (($sub$ptr$sub$i$i|0) / 12)&-1;
 $cmp = ($sub$ptr$div$i$i>>>0)>(100);
 do {
  if ($cmp) {
   $call1 = (_malloc($sub$ptr$div$i$i)|0);
   $cmp2 = ($call1|0)==(0|0);
   if ($cmp2) {
    __THREW__ = 0;
    invoke_v(409);
    $0 = __THREW__; __THREW__ = 0;
    $1 = $0&1;
    if ($1) {
     $2 = ___cxa_find_matching_catch_2()|0;
     $3 = tempRet0;
     $$sink81$sink82201$index = $2;$$sink81$sink82201$index5 = $3;
     break;
    }
   }
   $4 = $call1;
   $__stat_hold$sroa$0$0 = $4;$__status$0 = $call1;
   label = 6;
  } else {
   $__stat_hold$sroa$0$0 = 0;$__status$0 = $__statbuf;
   label = 6;
  }
 } while(0);
 if ((label|0) == 6) {
  $__ky$0 = $__kb;$__n_does_match$0 = 0;$__n_might_match$0 = $sub$ptr$div$i$i;$__st$0 = $__status$0;
  while(1) {
   $cmp6 = ($__ky$0|0)==($__ke|0);
   if ($cmp6) {
    break;
   }
   $5 = ((($__ky$0)) + 8|0);
   $__size_$i$i$i = ((($5)) + 3|0);
   $6 = HEAP8[$__size_$i$i$i>>0]|0;
   $tobool$i$i$i = ($6<<24>>24)<(0);
   if ($tobool$i$i$i) {
    $__size_$i2$i$i = ((($__ky$0)) + 4|0);
    $7 = HEAP32[$__size_$i2$i$i>>2]|0;
    $cond$i$i = $7;
   } else {
    $conv$i$i$i = $6&255;
    $cond$i$i = $conv$i$i$i;
   }
   $cmp$i = ($cond$i$i|0)==(0);
   if ($cmp$i) {
    HEAP8[$__st$0>>0] = 2;
    $dec = (($__n_might_match$0) + -1)|0;
    $inc = (($__n_does_match$0) + 1)|0;
    $__n_does_match$1 = $inc;$__n_might_match$1 = $dec;
   } else {
    HEAP8[$__st$0>>0] = 1;
    $__n_does_match$1 = $__n_does_match$0;$__n_might_match$1 = $__n_might_match$0;
   }
   $incdec$ptr = ((($__ky$0)) + 12|0);
   $incdec$ptr10 = ((($__st$0)) + 1|0);
   $__ky$0 = $incdec$ptr;$__n_does_match$0 = $__n_does_match$1;$__n_might_match$0 = $__n_might_match$1;$__st$0 = $incdec$ptr10;
  }
  $__indx$0 = 0;$__n_does_match$2 = $__n_does_match$0;$__n_might_match$2 = $__n_might_match$0;
  L21: while(1) {
   $8 = HEAP32[$__b>>2]|0;
   $tobool$i$i$i84 = ($8|0)==(0|0);
   do {
    if ($tobool$i$i$i84) {
     $22 = 1;
    } else {
     $__ninp_$i$i$i$i = ((($8)) + 12|0);
     $9 = HEAP32[$__ninp_$i$i$i$i>>2]|0;
     $__einp_$i$i$i$i = ((($8)) + 16|0);
     $10 = HEAP32[$__einp_$i$i$i$i>>2]|0;
     $cmp$i$i$i$i = ($9|0)==($10|0);
     if ($cmp$i$i$i$i) {
      $vtable$i$i$i$i = HEAP32[$8>>2]|0;
      $vfn$i$i$i$i = ((($vtable$i$i$i$i)) + 36|0);
      $11 = HEAP32[$vfn$i$i$i$i>>2]|0;
      __THREW__ = 0;
      $call$i$i$i$i85 = (invoke_ii($11|0,($8|0))|0);
      $12 = __THREW__; __THREW__ = 0;
      $13 = $12&1;
      if ($13) {
       break L21;
      } else {
       $retval$0$i$i$i$i = $call$i$i$i$i85;
      }
     } else {
      $14 = HEAP32[$9>>2]|0;
      $call3$i$i$i$i = (__ZNSt3__211char_traitsIwE11to_int_typeEw($14)|0);
      $retval$0$i$i$i$i = $call3$i$i$i$i;
     }
     $call3$i$i$i = (__ZNSt3__211char_traitsIwE3eofEv()|0);
     $call4$i$i$i = (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($retval$0$i$i$i$i,$call3$i$i$i)|0);
     if ($call4$i$i$i) {
      HEAP32[$__b>>2] = 0;
      $22 = 1;
      break;
     } else {
      $$pre$i$i$i = HEAP32[$__b>>2]|0;
      $phitmp$i$i$i = ($$pre$i$i$i|0)==(0|0);
      $22 = $phitmp$i$i$i;
      break;
     }
    }
   } while(0);
   $15 = HEAP32[$__e>>2]|0;
   $tobool$i2$i$i = ($15|0)==(0|0);
   if ($tobool$i2$i$i) {
    $$pre$i17$i$i122 = 0;$23 = 1;
   } else {
    $__ninp_$i$i3$i$i = ((($15)) + 12|0);
    $16 = HEAP32[$__ninp_$i$i3$i$i>>2]|0;
    $__einp_$i$i4$i$i = ((($15)) + 16|0);
    $17 = HEAP32[$__einp_$i$i4$i$i>>2]|0;
    $cmp$i$i5$i$i = ($16|0)==($17|0);
    if ($cmp$i$i5$i$i) {
     $vtable$i$i7$i$i = HEAP32[$15>>2]|0;
     $vfn$i$i8$i$i = ((($vtable$i$i7$i$i)) + 36|0);
     $18 = HEAP32[$vfn$i$i8$i$i>>2]|0;
     __THREW__ = 0;
     $call$i$i9$i$i86 = (invoke_ii($18|0,($15|0))|0);
     $19 = __THREW__; __THREW__ = 0;
     $20 = $19&1;
     if ($20) {
      break;
     } else {
      $retval$0$i$i13$i$i = $call$i$i9$i$i86;
     }
    } else {
     $21 = HEAP32[$16>>2]|0;
     $call3$i$i11$i$i = (__ZNSt3__211char_traitsIwE11to_int_typeEw($21)|0);
     $retval$0$i$i13$i$i = $call3$i$i11$i$i;
    }
    $call3$i14$i$i = (__ZNSt3__211char_traitsIwE3eofEv()|0);
    $call4$i15$i$i = (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($retval$0$i$i13$i$i,$call3$i14$i$i)|0);
    if ($call4$i15$i$i) {
     HEAP32[$__e>>2] = 0;
     $$pre$i17$i$i122 = 0;$23 = 1;
    } else {
     $$pre$i17$i$i122 = $15;$23 = 0;
    }
   }
   $cmptmp$i$i = $22 ^ $23;
   $cmp15 = ($__n_might_match$2|0)!=(0);
   $24 = $cmp15 & $cmptmp$i$i;
   $25 = HEAP32[$__b>>2]|0;
   if (!($24)) {
    label = 30;
    break;
   }
   $__ninp_$i$i = ((($25)) + 12|0);
   $38 = HEAP32[$__ninp_$i$i>>2]|0;
   $__einp_$i$i = ((($25)) + 16|0);
   $39 = HEAP32[$__einp_$i$i>>2]|0;
   $cmp$i$i131 = ($38|0)==($39|0);
   if ($cmp$i$i131) {
    $vtable$i$i = HEAP32[$25>>2]|0;
    $vfn$i$i = ((($vtable$i$i)) + 36|0);
    $40 = HEAP32[$vfn$i$i>>2]|0;
    __THREW__ = 0;
    $call$i$i133 = (invoke_ii($40|0,($25|0))|0);
    $41 = __THREW__; __THREW__ = 0;
    $42 = $41&1;
    if ($42) {
     break;
    } else {
     $retval$0$i$i = $call$i$i133;
    }
   } else {
    $43 = HEAP32[$38>>2]|0;
    $call3$i$i = (__ZNSt3__211char_traitsIwE11to_int_typeEw($43)|0);
    $retval$0$i$i = $call3$i$i;
   }
   if ($__case_sensitive) {
    $__c$0 = $retval$0$i$i;
   } else {
    $vtable$i = HEAP32[$__ct>>2]|0;
    $vfn$i = ((($vtable$i)) + 28|0);
    $44 = HEAP32[$vfn$i>>2]|0;
    __THREW__ = 0;
    $call$i134 = (invoke_iii($44|0,($__ct|0),($retval$0$i$i|0))|0);
    $45 = __THREW__; __THREW__ = 0;
    $46 = $45&1;
    if ($46) {
     break;
    } else {
     $__c$0 = $call$i134;
    }
   }
   $add = (($__indx$0) + 1)|0;
   $__consume$0$off0 = 0;$__ky25$0 = $__kb;$__n_does_match$3 = $__n_does_match$2;$__n_might_match$3 = $__n_might_match$2;$__st$1 = $__status$0;
   while(1) {
    $cmp27 = ($__ky25$0|0)==($__ke|0);
    if ($cmp27) {
     break;
    }
    $47 = HEAP8[$__st$1>>0]|0;
    $cmp30 = ($47<<24>>24)==(1);
    do {
     if ($cmp30) {
      $48 = ((($__ky25$0)) + 8|0);
      $__size_$i$i$i$i = ((($48)) + 3|0);
      $49 = HEAP8[$__size_$i$i$i$i>>0]|0;
      $tobool$i$i$i$i = ($49<<24>>24)<(0);
      if ($tobool$i$i$i$i) {
       $50 = HEAP32[$__ky25$0>>2]|0;
       $cond$i$i$i = $50;
      } else {
       $cond$i$i$i = $__ky25$0;
      }
      $add$ptr$i = (($cond$i$i$i) + ($__indx$0<<2)|0);
      $51 = HEAP32[$add$ptr$i>>2]|0;
      if ($__case_sensitive) {
       $__kc$0 = $51;
      } else {
       $vtable$i135 = HEAP32[$__ct>>2]|0;
       $vfn$i136 = ((($vtable$i135)) + 28|0);
       $52 = HEAP32[$vfn$i136>>2]|0;
       __THREW__ = 0;
       $call$i137 = (invoke_iii($52|0,($__ct|0),($51|0))|0);
       $53 = __THREW__; __THREW__ = 0;
       $54 = $53&1;
       if ($54) {
        break L21;
       } else {
        $__kc$0 = $call$i137;
       }
      }
      $cmp41 = ($__c$0|0)==($__kc$0|0);
      $dec46 = (($__n_might_match$3) + -1)|0;
      if (!($cmp41)) {
       HEAP8[$__st$1>>0] = 0;
       $__consume$2$off0 = $__consume$0$off0;$__n_does_match$5 = $__n_does_match$3;$__n_might_match$5 = $dec46;
       break;
      }
      $55 = HEAP8[$__size_$i$i$i$i>>0]|0;
      $tobool$i$i139 = ($55<<24>>24)<(0);
      if ($tobool$i$i139) {
       $__size_$i2$i = ((($__ky25$0)) + 4|0);
       $56 = HEAP32[$__size_$i2$i>>2]|0;
       $cond$i = $56;
      } else {
       $conv$i$i = $55&255;
       $cond$i = $conv$i$i;
      }
      $cmp44 = ($cond$i|0)==($add|0);
      if ($cmp44) {
       $inc47 = (($__n_does_match$3) + 1)|0;
       HEAP8[$__st$1>>0] = 2;
       $__consume$2$off0 = 1;$__n_does_match$5 = $inc47;$__n_might_match$5 = $dec46;
      } else {
       $__consume$2$off0 = 1;$__n_does_match$5 = $__n_does_match$3;$__n_might_match$5 = $__n_might_match$3;
      }
     } else {
      $__consume$2$off0 = $__consume$0$off0;$__n_does_match$5 = $__n_does_match$3;$__n_might_match$5 = $__n_might_match$3;
     }
    } while(0);
    $incdec$ptr54 = ((($__ky25$0)) + 12|0);
    $incdec$ptr55 = ((($__st$1)) + 1|0);
    $__consume$0$off0 = $__consume$2$off0;$__ky25$0 = $incdec$ptr54;$__n_does_match$3 = $__n_does_match$5;$__n_might_match$3 = $__n_might_match$5;$__st$1 = $incdec$ptr55;
   }
   if (!($__consume$0$off0)) {
    $__indx$0 = $add;$__n_does_match$2 = $__n_does_match$3;$__n_might_match$2 = $__n_might_match$3;
    continue;
   }
   $57 = HEAP32[$__b>>2]|0;
   $__ninp_$i$i141 = ((($57)) + 12|0);
   $58 = HEAP32[$__ninp_$i$i141>>2]|0;
   $__einp_$i$i142 = ((($57)) + 16|0);
   $59 = HEAP32[$__einp_$i$i142>>2]|0;
   $cmp$i$i143 = ($58|0)==($59|0);
   if ($cmp$i$i143) {
    $vtable$i$i144 = HEAP32[$57>>2]|0;
    $vfn$i$i145 = ((($vtable$i$i144)) + 40|0);
    $60 = HEAP32[$vfn$i$i145>>2]|0;
    __THREW__ = 0;
    (invoke_ii($60|0,($57|0))|0);
    $61 = __THREW__; __THREW__ = 0;
    $62 = $61&1;
    if ($62) {
     break;
    }
   } else {
    $incdec$ptr$i$i = ((($58)) + 4|0);
    HEAP32[$__ninp_$i$i141>>2] = $incdec$ptr$i$i;
    $63 = HEAP32[$58>>2]|0;
    (__ZNSt3__211char_traitsIwE11to_int_typeEw($63)|0);
   }
   $add62 = (($__n_does_match$3) + ($__n_might_match$3))|0;
   $cmp63 = ($add62>>>0)>(1);
   if ($cmp63) {
    $__ky65$0 = $__kb;$__n_does_match$6 = $__n_does_match$3;$__st$2 = $__status$0;
   } else {
    $__indx$0 = $add;$__n_does_match$2 = $__n_does_match$3;$__n_might_match$2 = $__n_might_match$3;
    continue;
   }
   while(1) {
    $cmp67 = ($__ky65$0|0)==($__ke|0);
    if ($cmp67) {
     $__indx$0 = $add;$__n_does_match$2 = $__n_does_match$6;$__n_might_match$2 = $__n_might_match$3;
     continue L21;
    }
    $64 = HEAP8[$__st$2>>0]|0;
    $cmp71 = ($64<<24>>24)==(2);
    if ($cmp71) {
     $65 = ((($__ky65$0)) + 8|0);
     $__size_$i$i151 = ((($65)) + 3|0);
     $66 = HEAP8[$__size_$i$i151>>0]|0;
     $tobool$i$i152 = ($66<<24>>24)<(0);
     if ($tobool$i$i152) {
      $__size_$i2$i153 = ((($__ky65$0)) + 4|0);
      $67 = HEAP32[$__size_$i2$i153>>2]|0;
      $cond$i157 = $67;
     } else {
      $conv$i$i155 = $66&255;
      $cond$i157 = $conv$i$i155;
     }
     $cmp74 = ($cond$i157|0)==($add|0);
     if ($cmp74) {
      $__n_does_match$7 = $__n_does_match$6;
     } else {
      $dec76 = (($__n_does_match$6) + -1)|0;
      HEAP8[$__st$2>>0] = 0;
      $__n_does_match$7 = $dec76;
     }
    } else {
     $__n_does_match$7 = $__n_does_match$6;
    }
    $incdec$ptr79 = ((($__ky65$0)) + 12|0);
    $incdec$ptr80 = ((($__st$2)) + 1|0);
    $__ky65$0 = $incdec$ptr79;$__n_does_match$6 = $__n_does_match$7;$__st$2 = $incdec$ptr80;
   }
  }
  L87: do {
   if ((label|0) == 30) {
    $tobool$i$i$i88 = ($25|0)==(0|0);
    do {
     if ($tobool$i$i$i88) {
      $75 = 1;
     } else {
      $__ninp_$i$i$i$i89 = ((($25)) + 12|0);
      $26 = HEAP32[$__ninp_$i$i$i$i89>>2]|0;
      $__einp_$i$i$i$i90 = ((($25)) + 16|0);
      $27 = HEAP32[$__einp_$i$i$i$i90>>2]|0;
      $cmp$i$i$i$i91 = ($26|0)==($27|0);
      if ($cmp$i$i$i$i91) {
       $vtable$i$i$i$i93 = HEAP32[$25>>2]|0;
       $vfn$i$i$i$i94 = ((($vtable$i$i$i$i93)) + 36|0);
       $28 = HEAP32[$vfn$i$i$i$i94>>2]|0;
       __THREW__ = 0;
       $call$i$i$i$i128 = (invoke_ii($28|0,($25|0))|0);
       $29 = __THREW__; __THREW__ = 0;
       $30 = $29&1;
       if ($30) {
        break L87;
       } else {
        $retval$0$i$i$i$i98 = $call$i$i$i$i128;
       }
      } else {
       $31 = HEAP32[$26>>2]|0;
       $call3$i$i$i$i96 = (__ZNSt3__211char_traitsIwE11to_int_typeEw($31)|0);
       $retval$0$i$i$i$i98 = $call3$i$i$i$i96;
      }
      $call3$i$i$i99 = (__ZNSt3__211char_traitsIwE3eofEv()|0);
      $call4$i$i$i100 = (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($retval$0$i$i$i$i98,$call3$i$i$i99)|0);
      if ($call4$i$i$i100) {
       HEAP32[$__b>>2] = 0;
       $75 = 1;
       break;
      } else {
       $$pre$i$i$i102 = HEAP32[$__b>>2]|0;
       $phitmp$i$i$i103 = ($$pre$i$i$i102|0)==(0|0);
       $75 = $phitmp$i$i$i103;
       break;
      }
     }
    } while(0);
    $tobool$i2$i$i107 = ($$pre$i17$i$i122|0)==(0|0);
    do {
     if ($tobool$i2$i$i107) {
      label = 77;
     } else {
      $__ninp_$i$i3$i$i109 = ((($$pre$i17$i$i122)) + 12|0);
      $32 = HEAP32[$__ninp_$i$i3$i$i109>>2]|0;
      $__einp_$i$i4$i$i110 = ((($$pre$i17$i$i122)) + 16|0);
      $33 = HEAP32[$__einp_$i$i4$i$i110>>2]|0;
      $cmp$i$i5$i$i111 = ($32|0)==($33|0);
      if ($cmp$i$i5$i$i111) {
       $vtable$i$i7$i$i113 = HEAP32[$$pre$i17$i$i122>>2]|0;
       $vfn$i$i8$i$i114 = ((($vtable$i$i7$i$i113)) + 36|0);
       $34 = HEAP32[$vfn$i$i8$i$i114>>2]|0;
       __THREW__ = 0;
       $call$i$i9$i$i130 = (invoke_ii($34|0,($$pre$i17$i$i122|0))|0);
       $35 = __THREW__; __THREW__ = 0;
       $36 = $35&1;
       if ($36) {
        break L87;
       } else {
        $retval$0$i$i13$i$i118 = $call$i$i9$i$i130;
       }
      } else {
       $37 = HEAP32[$32>>2]|0;
       $call3$i$i11$i$i116 = (__ZNSt3__211char_traitsIwE11to_int_typeEw($37)|0);
       $retval$0$i$i13$i$i118 = $call3$i$i11$i$i116;
      }
      $call3$i14$i$i119 = (__ZNSt3__211char_traitsIwE3eofEv()|0);
      $call4$i15$i$i120 = (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($retval$0$i$i13$i$i118,$call3$i14$i$i119)|0);
      if ($call4$i15$i$i120) {
       HEAP32[$__e>>2] = 0;
       label = 77;
       break;
      } else {
       if ($75) {
        $__kb$addr$0 = $__kb;$__st$3 = $__status$0;
        break;
       } else {
        label = 79;
        break;
       }
      }
     }
    } while(0);
    if ((label|0) == 77) {
     if ($75) {
      label = 79;
     } else {
      $__kb$addr$0 = $__kb;$__st$3 = $__status$0;
     }
    }
    if ((label|0) == 79) {
     $68 = HEAP32[$__err>>2]|0;
     $or = $68 | 2;
     HEAP32[$__err>>2] = $or;
     $__kb$addr$0 = $__kb;$__st$3 = $__status$0;
    }
    while(1) {
     $cmp96 = ($__kb$addr$0|0)==($__ke|0);
     if ($cmp96) {
      label = 83;
      break;
     }
     $69 = HEAP8[$__st$3>>0]|0;
     $cmp99 = ($69<<24>>24)==(2);
     if ($cmp99) {
      $__kb$addr$0192 = $__kb$addr$0;
      break;
     }
     $incdec$ptr103 = ((($__kb$addr$0)) + 12|0);
     $incdec$ptr104 = ((($__st$3)) + 1|0);
     $__kb$addr$0 = $incdec$ptr103;$__st$3 = $incdec$ptr104;
    }
    if ((label|0) == 83) {
     $70 = HEAP32[$__err>>2]|0;
     $or108 = $70 | 4;
     HEAP32[$__err>>2] = $or108;
     $__kb$addr$0192 = $__ke;
    }
    $tobool$i$i160 = ($__stat_hold$sroa$0$0|0)==(0);
    if (!($tobool$i$i160)) {
     $71 = $__stat_hold$sroa$0$0;
     _free($71);
    }
    STACKTOP = sp;return ($__kb$addr$0192|0);
   }
  } while(0);
  $72 = ___cxa_find_matching_catch_2()|0;
  $73 = tempRet0;
  $tobool$i$i = ($__stat_hold$sroa$0$0|0)==(0);
  if ($tobool$i$i) {
   $$sink81$sink82201$index = $72;$$sink81$sink82201$index5 = $73;
  } else {
   $74 = $__stat_hold$sroa$0$0;
   _free($74);
   $$sink81$sink82201$index = $72;$$sink81$sink82201$index5 = $73;
  }
 }
 ___resumeException($$sink81$sink82201$index|0);
 // unreachable;
 return (0)|0;
}
function __ZNSt3__27num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__26locale5facetD2Ev($this);
 return;
}
function __ZNSt3__27num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__26locale5facetD2Ev($this);
 __ZdlPv($this);
 return;
}
function __ZNKSt3__27num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcb($this,$__s,$__iob,$__fl,$__v) {
 $this = $this|0;
 $__s = $__s|0;
 $__iob = $__iob|0;
 $__fl = $__fl|0;
 $__v = $__v|0;
 var $$pr = 0, $$pr$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__eout_$i$i = 0, $__fmtflags_$i = 0, $__i$sroa$0$0 = 0, $__i$sroa$0$0$ph = 0, $__nm = 0, $__nout_$i$i = 0, $__size_$i$i$i = 0, $__size_$i3$i$i = 0, $add$ptr$i = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $and = 0, $call$i$i = 0, $call$i7 = 0, $call2 = 0;
 var $call2$i$i6 = 0, $call3$i = 0, $call4$i = 0, $call4$i$i = 0, $cmp = 0, $cmp$i$i = 0, $cond$i6$i = 0, $cond$i7$i = 0, $conv = 0, $conv$i$i$i = 0, $ehselector$slot$0 = 0, $exn$slot$0 = 0, $incdec$ptr$i = 0, $incdec$ptr$i$i = 0, $lnot$i = 0, $ref$tmp = 0, $retval$0$i$i = 0, $retval$sroa$0$0 = 0, $retval$sroa$0$0$copyload = 0, $tobool$i = 0;
 var $tobool$i$i$i = 0, $tobool$i$i$i12 = 0, $vfn = 0, $vfn$i = 0, $vfn$i$i = 0, $vfn$i9 = 0, $vtable = 0, $vtable$i = 0, $vtable$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $agg$tmp$byval_copy = sp + 20|0;
 $agg$tmp = sp + 16|0;
 $ref$tmp = sp + 12|0;
 $__nm = sp;
 $__fmtflags_$i = ((($__iob)) + 4|0);
 $0 = HEAP32[$__fmtflags_$i>>2]|0;
 $and = $0 & 1;
 $cmp = ($and|0)==(0);
 L1: do {
  if ($cmp) {
   $vtable = HEAP32[$this>>2]|0;
   $vfn = ((($vtable)) + 24|0);
   $1 = HEAP32[$vfn>>2]|0;
   $2 = HEAP32[$__s>>2]|0;
   HEAP32[$agg$tmp>>2] = $2;
   $conv = $__v&1;
   ;HEAP32[$agg$tmp$byval_copy>>2]=HEAP32[$agg$tmp>>2]|0;
   $call2 = (FUNCTION_TABLE_iiiiii[$1 & 511]($this,$agg$tmp$byval_copy,$__iob,$__fl,$conv)|0);
   $retval$sroa$0$0 = $call2;
  } else {
   __ZNKSt3__28ios_base6getlocEv($ref$tmp,$__iob);
   __THREW__ = 0;
   $call$i7 = (invoke_iii(380,($ref$tmp|0),(20112|0))|0);
   $3 = __THREW__; __THREW__ = 0;
   $4 = $3&1;
   do {
    if ($4) {
     $12 = ___cxa_find_matching_catch_2()|0;
     $13 = tempRet0;
     __ZNSt3__26localeD2Ev($ref$tmp);
     $ehselector$slot$0 = $13;$exn$slot$0 = $12;
    } else {
     __ZNSt3__26localeD2Ev($ref$tmp);
     $vtable$i = HEAP32[$call$i7>>2]|0;
     if ($__v) {
      $vfn$i = ((($vtable$i)) + 24|0);
      $5 = HEAP32[$vfn$i>>2]|0;
      FUNCTION_TABLE_vii[$5 & 1023]($__nm,$call$i7);
     } else {
      $vfn$i9 = ((($vtable$i)) + 28|0);
      $6 = HEAP32[$vfn$i9>>2]|0;
      FUNCTION_TABLE_vii[$6 & 1023]($__nm,$call$i7);
     }
     $__size_$i$i$i = ((($__nm)) + 11|0);
     $7 = HEAP8[$__size_$i$i$i>>0]|0;
     $tobool$i$i$i = ($7<<24>>24)<(0);
     if ($tobool$i$i$i) {
      $8 = HEAP32[$__nm>>2]|0;
      $$pr = $7;$__i$sroa$0$0$ph = $8;
      label = 9;
     } else {
      $9 = $7;$__i$sroa$0$0 = $__nm;
     }
     while(1) {
      if ((label|0) == 9) {
       label = 0;
       $9 = $$pr;$__i$sroa$0$0 = $__i$sroa$0$0$ph;
      }
      $tobool$i$i$i12 = ($9<<24>>24)<(0);
      $10 = HEAP32[$__nm>>2]|0;
      $__size_$i3$i$i = ((($__nm)) + 4|0);
      $11 = HEAP32[$__size_$i3$i$i>>2]|0;
      $conv$i$i$i = $9&255;
      $cond$i7$i = $tobool$i$i$i12 ? $10 : $__nm;
      $cond$i6$i = $tobool$i$i$i12 ? $11 : $conv$i$i$i;
      $add$ptr$i = (($cond$i7$i) + ($cond$i6$i)|0);
      $lnot$i = ($__i$sroa$0$0|0)==($add$ptr$i|0);
      if ($lnot$i) {
       label = 11;
       break;
      }
      $14 = HEAP8[$__i$sroa$0$0>>0]|0;
      $15 = HEAP32[$__s>>2]|0;
      $tobool$i = ($15|0)==(0|0);
      if (!($tobool$i)) {
       $__nout_$i$i = ((($15)) + 24|0);
       $16 = HEAP32[$__nout_$i$i>>2]|0;
       $__eout_$i$i = ((($15)) + 28|0);
       $17 = HEAP32[$__eout_$i$i>>2]|0;
       $cmp$i$i = ($16|0)==($17|0);
       if ($cmp$i$i) {
        $vtable$i$i = HEAP32[$15>>2]|0;
        $vfn$i$i = ((($vtable$i$i)) + 52|0);
        $18 = HEAP32[$vfn$i$i>>2]|0;
        $call$i$i = (__ZNSt3__211char_traitsIcE11to_int_typeEc($14)|0);
        __THREW__ = 0;
        $call2$i$i6 = (invoke_iii($18|0,($15|0),($call$i$i|0))|0);
        $19 = __THREW__; __THREW__ = 0;
        $20 = $19&1;
        if ($20) {
         label = 20;
         break;
        } else {
         $retval$0$i$i = $call2$i$i6;
        }
       } else {
        $incdec$ptr$i$i = ((($16)) + 1|0);
        HEAP32[$__nout_$i$i>>2] = $incdec$ptr$i$i;
        HEAP8[$16>>0] = $14;
        $call4$i$i = (__ZNSt3__211char_traitsIcE11to_int_typeEc($14)|0);
        $retval$0$i$i = $call4$i$i;
       }
       $call3$i = (__ZNSt3__211char_traitsIcE3eofEv()|0);
       $call4$i = (__ZNSt3__211char_traitsIcE11eq_int_typeEii($retval$0$i$i,$call3$i)|0);
       if ($call4$i) {
        HEAP32[$__s>>2] = 0;
       }
      }
      $incdec$ptr$i = ((($__i$sroa$0$0)) + 1|0);
      $$pr$pre = HEAP8[$__size_$i$i$i>>0]|0;
      $$pr = $$pr$pre;$__i$sroa$0$0$ph = $incdec$ptr$i;
      label = 9;
     }
     if ((label|0) == 11) {
      $retval$sroa$0$0$copyload = HEAP32[$__s>>2]|0;
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__nm);
      $retval$sroa$0$0 = $retval$sroa$0$0$copyload;
      break L1;
     }
     else if ((label|0) == 20) {
      $21 = ___cxa_find_matching_catch_2()|0;
      $22 = tempRet0;
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__nm);
      $ehselector$slot$0 = $22;$exn$slot$0 = $21;
      break;
     }
    }
   } while(0);
   ___resumeException($exn$slot$0|0);
   // unreachable;
  }
 } while(0);
 STACKTOP = sp;return ($retval$sroa$0$0|0);
}
function __ZNKSt3__27num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcl($this,$__s,$__iob,$__fl,$__v) {
 $this = $this|0;
 $__s = $__s|0;
 $__iob = $__iob|0;
 $__fl = $__fl|0;
 $__v = $__v|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $__fmt = 0, $__fmtflags_$i = 0, $__nar = 0, $__o = 0, $__oe = 0, $__op = 0, $add$ptr = 0, $add$ptr7 = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $call13 = 0, $call3 = 0;
 var $call5 = 0, $call9 = 0, $ref$tmp = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(80|0);
 $agg$tmp$byval_copy = sp + 20|0;
 $vararg_buffer = sp;
 $__fmt = sp + 60|0;
 $__nar = sp + 47|0;
 $__o = sp + 24|0;
 $__op = sp + 16|0;
 $__oe = sp + 12|0;
 $ref$tmp = sp + 8|0;
 $agg$tmp = sp + 4|0;
 ;HEAP8[$__fmt>>0]=HEAP8[15944>>0]|0;HEAP8[$__fmt+1>>0]=HEAP8[15944+1>>0]|0;HEAP8[$__fmt+2>>0]=HEAP8[15944+2>>0]|0;HEAP8[$__fmt+3>>0]=HEAP8[15944+3>>0]|0;HEAP8[$__fmt+4>>0]=HEAP8[15944+4>>0]|0;HEAP8[$__fmt+5>>0]=HEAP8[15944+5>>0]|0;
 $add$ptr = ((($__fmt)) + 1|0);
 $__fmtflags_$i = ((($__iob)) + 4|0);
 $0 = HEAP32[$__fmtflags_$i>>2]|0;
 __ZNSt3__214__num_put_base12__format_intEPcPKcbj($add$ptr,15950,1,$0);
 $call3 = (__ZNSt3__26__clocEv()|0);
 HEAP32[$vararg_buffer>>2] = $__v;
 $call5 = (__ZNSt3__219__libcpp_snprintf_lEPcjP15__locale_structPKcz($__nar,13,$call3,$__fmt,$vararg_buffer)|0);
 $add$ptr7 = (($__nar) + ($call5)|0);
 $call9 = (__ZNSt3__214__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE($__nar,$add$ptr7,$__iob)|0);
 __ZNKSt3__28ios_base6getlocEv($ref$tmp,$__iob);
 __THREW__ = 0;
 invoke_viiiiiii(413,($__nar|0),($call9|0),($add$ptr7|0),($__o|0),($__op|0),($__oe|0),($ref$tmp|0));
 $1 = __THREW__; __THREW__ = 0;
 $2 = $1&1;
 if ($2) {
  $6 = ___cxa_find_matching_catch_2()|0;
  $7 = tempRet0;
  __ZNSt3__26localeD2Ev($ref$tmp);
  ___resumeException($6|0);
  // unreachable;
 } else {
  __ZNSt3__26localeD2Ev($ref$tmp);
  $3 = HEAP32[$__s>>2]|0;
  HEAP32[$agg$tmp>>2] = $3;
  $4 = HEAP32[$__op>>2]|0;
  $5 = HEAP32[$__oe>>2]|0;
  ;HEAP32[$agg$tmp$byval_copy>>2]=HEAP32[$agg$tmp>>2]|0;
  $call13 = (__ZNSt3__216__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg$tmp$byval_copy,$__o,$4,$5,$__iob,$__fl)|0);
  STACKTOP = sp;return ($call13|0);
 }
 return (0)|0;
}
function __ZNKSt3__27num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcx($this,$__s,$__iob,$__fl,$0,$1) {
 $this = $this|0;
 $__s = $__s|0;
 $__iob = $__iob|0;
 $__fl = $__fl|0;
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__fmt = 0, $__fmtflags_$i = 0, $__nar = 0, $__o = 0;
 var $__oe = 0, $__op = 0, $add$ptr = 0, $add$ptr7 = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $call13 = 0, $call3 = 0, $call5 = 0, $call9 = 0, $ref$tmp = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(112|0);
 $agg$tmp$byval_copy = sp + 32|0;
 $vararg_buffer = sp + 8|0;
 $__fmt = sp;
 $__nar = sp + 79|0;
 $__o = sp + 36|0;
 $__op = sp + 28|0;
 $__oe = sp + 24|0;
 $ref$tmp = sp + 20|0;
 $agg$tmp = sp + 16|0;
 $2 = $__fmt;
 $3 = $2;
 HEAP32[$3>>2] = 37;
 $4 = (($2) + 4)|0;
 $5 = $4;
 HEAP32[$5>>2] = 0;
 $add$ptr = ((($__fmt)) + 1|0);
 $__fmtflags_$i = ((($__iob)) + 4|0);
 $6 = HEAP32[$__fmtflags_$i>>2]|0;
 __ZNSt3__214__num_put_base12__format_intEPcPKcbj($add$ptr,15941,1,$6);
 $call3 = (__ZNSt3__26__clocEv()|0);
 $7 = $vararg_buffer;
 $8 = $7;
 HEAP32[$8>>2] = $0;
 $9 = (($7) + 4)|0;
 $10 = $9;
 HEAP32[$10>>2] = $1;
 $call5 = (__ZNSt3__219__libcpp_snprintf_lEPcjP15__locale_structPKcz($__nar,23,$call3,$__fmt,$vararg_buffer)|0);
 $add$ptr7 = (($__nar) + ($call5)|0);
 $call9 = (__ZNSt3__214__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE($__nar,$add$ptr7,$__iob)|0);
 __ZNKSt3__28ios_base6getlocEv($ref$tmp,$__iob);
 __THREW__ = 0;
 invoke_viiiiiii(413,($__nar|0),($call9|0),($add$ptr7|0),($__o|0),($__op|0),($__oe|0),($ref$tmp|0));
 $11 = __THREW__; __THREW__ = 0;
 $12 = $11&1;
 if ($12) {
  $16 = ___cxa_find_matching_catch_2()|0;
  $17 = tempRet0;
  __ZNSt3__26localeD2Ev($ref$tmp);
  ___resumeException($16|0);
  // unreachable;
 } else {
  __ZNSt3__26localeD2Ev($ref$tmp);
  $13 = HEAP32[$__s>>2]|0;
  HEAP32[$agg$tmp>>2] = $13;
  $14 = HEAP32[$__op>>2]|0;
  $15 = HEAP32[$__oe>>2]|0;
  ;HEAP32[$agg$tmp$byval_copy>>2]=HEAP32[$agg$tmp>>2]|0;
  $call13 = (__ZNSt3__216__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg$tmp$byval_copy,$__o,$14,$15,$__iob,$__fl)|0);
  STACKTOP = sp;return ($call13|0);
 }
 return (0)|0;
}
function __ZNKSt3__27num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcm($this,$__s,$__iob,$__fl,$__v) {
 $this = $this|0;
 $__s = $__s|0;
 $__iob = $__iob|0;
 $__fl = $__fl|0;
 $__v = $__v|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $__fmt = 0, $__fmtflags_$i = 0, $__nar = 0, $__o = 0, $__oe = 0, $__op = 0, $add$ptr = 0, $add$ptr7 = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $call13 = 0, $call3 = 0;
 var $call5 = 0, $call9 = 0, $ref$tmp = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(80|0);
 $agg$tmp$byval_copy = sp + 20|0;
 $vararg_buffer = sp;
 $__fmt = sp + 60|0;
 $__nar = sp + 48|0;
 $__o = sp + 24|0;
 $__op = sp + 16|0;
 $__oe = sp + 12|0;
 $ref$tmp = sp + 8|0;
 $agg$tmp = sp + 4|0;
 ;HEAP8[$__fmt>>0]=HEAP8[15944>>0]|0;HEAP8[$__fmt+1>>0]=HEAP8[15944+1>>0]|0;HEAP8[$__fmt+2>>0]=HEAP8[15944+2>>0]|0;HEAP8[$__fmt+3>>0]=HEAP8[15944+3>>0]|0;HEAP8[$__fmt+4>>0]=HEAP8[15944+4>>0]|0;HEAP8[$__fmt+5>>0]=HEAP8[15944+5>>0]|0;
 $add$ptr = ((($__fmt)) + 1|0);
 $__fmtflags_$i = ((($__iob)) + 4|0);
 $0 = HEAP32[$__fmtflags_$i>>2]|0;
 __ZNSt3__214__num_put_base12__format_intEPcPKcbj($add$ptr,15950,0,$0);
 $call3 = (__ZNSt3__26__clocEv()|0);
 HEAP32[$vararg_buffer>>2] = $__v;
 $call5 = (__ZNSt3__219__libcpp_snprintf_lEPcjP15__locale_structPKcz($__nar,12,$call3,$__fmt,$vararg_buffer)|0);
 $add$ptr7 = (($__nar) + ($call5)|0);
 $call9 = (__ZNSt3__214__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE($__nar,$add$ptr7,$__iob)|0);
 __ZNKSt3__28ios_base6getlocEv($ref$tmp,$__iob);
 __THREW__ = 0;
 invoke_viiiiiii(413,($__nar|0),($call9|0),($add$ptr7|0),($__o|0),($__op|0),($__oe|0),($ref$tmp|0));
 $1 = __THREW__; __THREW__ = 0;
 $2 = $1&1;
 if ($2) {
  $6 = ___cxa_find_matching_catch_2()|0;
  $7 = tempRet0;
  __ZNSt3__26localeD2Ev($ref$tmp);
  ___resumeException($6|0);
  // unreachable;
 } else {
  __ZNSt3__26localeD2Ev($ref$tmp);
  $3 = HEAP32[$__s>>2]|0;
  HEAP32[$agg$tmp>>2] = $3;
  $4 = HEAP32[$__op>>2]|0;
  $5 = HEAP32[$__oe>>2]|0;
  ;HEAP32[$agg$tmp$byval_copy>>2]=HEAP32[$agg$tmp>>2]|0;
  $call13 = (__ZNSt3__216__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg$tmp$byval_copy,$__o,$4,$5,$__iob,$__fl)|0);
  STACKTOP = sp;return ($call13|0);
 }
 return (0)|0;
}
function __ZNKSt3__27num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcy($this,$__s,$__iob,$__fl,$0,$1) {
 $this = $this|0;
 $__s = $__s|0;
 $__iob = $__iob|0;
 $__fl = $__fl|0;
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__fmt = 0, $__fmtflags_$i = 0, $__nar = 0, $__o = 0;
 var $__oe = 0, $__op = 0, $add$ptr = 0, $add$ptr7 = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $call13 = 0, $call3 = 0, $call5 = 0, $call9 = 0, $ref$tmp = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(112|0);
 $agg$tmp$byval_copy = sp + 32|0;
 $vararg_buffer = sp + 8|0;
 $__fmt = sp;
 $__nar = sp + 79|0;
 $__o = sp + 36|0;
 $__op = sp + 28|0;
 $__oe = sp + 24|0;
 $ref$tmp = sp + 20|0;
 $agg$tmp = sp + 16|0;
 $2 = $__fmt;
 $3 = $2;
 HEAP32[$3>>2] = 37;
 $4 = (($2) + 4)|0;
 $5 = $4;
 HEAP32[$5>>2] = 0;
 $add$ptr = ((($__fmt)) + 1|0);
 $__fmtflags_$i = ((($__iob)) + 4|0);
 $6 = HEAP32[$__fmtflags_$i>>2]|0;
 __ZNSt3__214__num_put_base12__format_intEPcPKcbj($add$ptr,15941,0,$6);
 $call3 = (__ZNSt3__26__clocEv()|0);
 $7 = $vararg_buffer;
 $8 = $7;
 HEAP32[$8>>2] = $0;
 $9 = (($7) + 4)|0;
 $10 = $9;
 HEAP32[$10>>2] = $1;
 $call5 = (__ZNSt3__219__libcpp_snprintf_lEPcjP15__locale_structPKcz($__nar,23,$call3,$__fmt,$vararg_buffer)|0);
 $add$ptr7 = (($__nar) + ($call5)|0);
 $call9 = (__ZNSt3__214__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE($__nar,$add$ptr7,$__iob)|0);
 __ZNKSt3__28ios_base6getlocEv($ref$tmp,$__iob);
 __THREW__ = 0;
 invoke_viiiiiii(413,($__nar|0),($call9|0),($add$ptr7|0),($__o|0),($__op|0),($__oe|0),($ref$tmp|0));
 $11 = __THREW__; __THREW__ = 0;
 $12 = $11&1;
 if ($12) {
  $16 = ___cxa_find_matching_catch_2()|0;
  $17 = tempRet0;
  __ZNSt3__26localeD2Ev($ref$tmp);
  ___resumeException($16|0);
  // unreachable;
 } else {
  __ZNSt3__26localeD2Ev($ref$tmp);
  $13 = HEAP32[$__s>>2]|0;
  HEAP32[$agg$tmp>>2] = $13;
  $14 = HEAP32[$__op>>2]|0;
  $15 = HEAP32[$__oe>>2]|0;
  ;HEAP32[$agg$tmp$byval_copy>>2]=HEAP32[$agg$tmp>>2]|0;
  $call13 = (__ZNSt3__216__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg$tmp$byval_copy,$__o,$14,$15,$__iob,$__fl)|0);
  STACKTOP = sp;return ($call13|0);
 }
 return (0)|0;
}
function __ZNKSt3__27num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcd($this,$__s,$__iob,$__fl,$__v) {
 $this = $this|0;
 $__s = $__s|0;
 $__iob = $__iob|0;
 $__fl = $__fl|0;
 $__v = +$__v;
 var $$pre = 0, $$pre75 = 0, $$pre76 = 0, $$pre76$pre = 0, $$pre7678 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__fmt = 0, $__fmtflags_$i = 0, $__nar = 0, $__nb = 0, $__nbh$sroa$0$0 = 0, $__nc$0 = 0, $__nc$1 = 0, $__nc$2 = 0;
 var $__o = 0, $__ob$0 = 0, $__obh$sroa$0$0 = 0, $__oe = 0, $__op = 0, $__precision_$i = 0, $__precision_$i36 = 0, $add$ptr = 0, $add$ptr32 = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $call10 = 0, $call14 = 0, $call19 = 0, $call2 = 0, $call22 = 0, $call25 = 0, $call35 = 0, $call4 = 0, $call44 = 0;
 var $call58 = 0, $call7 = 0, $cmp = 0, $cmp27 = 0, $cmp39 = 0, $cmp45 = 0, $ehselector$slot$0 = 0, $ehselector$slot$1 = 0, $ehselector$slot$282 = 0, $ehselector$slot$485 = 0, $exn$slot$0 = 0, $exn$slot$1 = 0, $exn$slot$283 = 0, $exn$slot$486 = 0, $mul = 0, $ref$tmp50 = 0, $tobool$i$i = 0, $tobool$i$i31 = 0, $tobool$i$i46 = 0, $tobool$i$i52 = 0;
 var $vararg_buffer = 0, $vararg_buffer2 = 0, $vararg_buffer5 = 0, $vararg_buffer9 = 0, $vararg_ptr1 = 0, $vararg_ptr8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 176|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(176|0);
 $agg$tmp$byval_copy = sp + 76|0;
 $vararg_buffer9 = sp + 48|0;
 $vararg_buffer5 = sp + 32|0;
 $vararg_buffer2 = sp + 24|0;
 $vararg_buffer = sp + 8|0;
 $__fmt = sp;
 $__nar = sp + 138|0;
 $__nb = sp + 72|0;
 $__o = sp + 80|0;
 $__op = sp + 68|0;
 $__oe = sp + 64|0;
 $ref$tmp50 = sp + 60|0;
 $agg$tmp = sp + 56|0;
 $0 = $__fmt;
 $1 = $0;
 HEAP32[$1>>2] = 37;
 $2 = (($0) + 4)|0;
 $3 = $2;
 HEAP32[$3>>2] = 0;
 $add$ptr = ((($__fmt)) + 1|0);
 $__fmtflags_$i = ((($__iob)) + 4|0);
 $4 = HEAP32[$__fmtflags_$i>>2]|0;
 $call2 = (__ZNSt3__214__num_put_base14__format_floatEPcPKcj($add$ptr,23082,$4)|0);
 HEAP32[$__nb>>2] = $__nar;
 $call4 = (__ZNSt3__26__clocEv()|0);
 if ($call2) {
  $__precision_$i = ((($__iob)) + 8|0);
  $5 = HEAP32[$__precision_$i>>2]|0;
  HEAP32[$vararg_buffer>>2] = $5;
  $vararg_ptr1 = ((($vararg_buffer)) + 8|0);
  HEAPF64[$vararg_ptr1>>3] = $__v;
  $call7 = (__ZNSt3__219__libcpp_snprintf_lEPcjP15__locale_structPKcz($__nar,30,$call4,$__fmt,$vararg_buffer)|0);
  $__nc$0 = $call7;
 } else {
  HEAPF64[$vararg_buffer2>>3] = $__v;
  $call10 = (__ZNSt3__219__libcpp_snprintf_lEPcjP15__locale_structPKcz($__nar,30,$call4,$__fmt,$vararg_buffer2)|0);
  $__nc$0 = $call10;
 }
 $cmp = ($__nc$0|0)>(29);
 do {
  if ($cmp) {
   if ($call2) {
    __THREW__ = 0;
    $call14 = (invoke_i(392)|0);
    $6 = __THREW__; __THREW__ = 0;
    $7 = $6&1;
    if (!($7)) {
     $__precision_$i36 = ((($__iob)) + 8|0);
     $8 = HEAP32[$__precision_$i36>>2]|0;
     __THREW__ = 0;
     HEAP32[$vararg_buffer5>>2] = $8;
     $vararg_ptr8 = ((($vararg_buffer5)) + 8|0);
     HEAPF64[$vararg_ptr8>>3] = $__v;
     $call19 = (invoke_iiiii(414,($__nb|0),($call14|0),($__fmt|0),($vararg_buffer5|0))|0);
     $9 = __THREW__; __THREW__ = 0;
     $10 = $9&1;
     if (!($10)) {
      $__nc$1 = $call19;
      label = 12;
     }
    }
   } else {
    __THREW__ = 0;
    $call22 = (invoke_i(392)|0);
    $13 = __THREW__; __THREW__ = 0;
    $14 = $13&1;
    if (!($14)) {
     __THREW__ = 0;
     HEAPF64[$vararg_buffer9>>3] = $__v;
     $call25 = (invoke_iiiii(414,($__nb|0),($call22|0),($__fmt|0),($vararg_buffer9|0))|0);
     $15 = __THREW__; __THREW__ = 0;
     $16 = $15&1;
     if (!($16)) {
      $__nc$1 = $call25;
      label = 12;
     }
    }
   }
   if ((label|0) == 12) {
    $17 = HEAP32[$__nb>>2]|0;
    $cmp27 = ($17|0)==(0|0);
    if (!($cmp27)) {
     $18 = $17;
     $$pre7678 = $17;$__nbh$sroa$0$0 = $18;$__nc$2 = $__nc$1;
     label = 16;
     break;
    }
    __THREW__ = 0;
    invoke_v(409);
    $19 = __THREW__; __THREW__ = 0;
    $20 = $19&1;
    if (!($20)) {
     $$pre = HEAP32[$__nb>>2]|0;
     $21 = $$pre;
     $$pre7678 = $21;$__nbh$sroa$0$0 = $$pre;$__nc$2 = $__nc$1;
     label = 16;
     break;
    }
   }
   $11 = ___cxa_find_matching_catch_2()|0;
   $12 = tempRet0;
   $ehselector$slot$485 = $12;$exn$slot$486 = $11;
  } else {
   $$pre75 = HEAP32[$__nb>>2]|0;
   $$pre7678 = $$pre75;$__nbh$sroa$0$0 = 0;$__nc$2 = $__nc$0;
   label = 16;
  }
 } while(0);
 if ((label|0) == 16) {
  $add$ptr32 = (($$pre7678) + ($__nc$2)|0);
  $call35 = (__ZNSt3__214__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE($$pre7678,$add$ptr32,$__iob)|0);
  $cmp39 = ($$pre7678|0)==($__nar|0);
  L22: do {
   if ($cmp39) {
    $29 = $__nar;$__ob$0 = $__o;$__obh$sroa$0$0 = 0;
    label = 22;
   } else {
    $mul = $__nc$2 << 1;
    $call44 = (_malloc($mul)|0);
    $cmp45 = ($call44|0)==(0|0);
    do {
     if ($cmp45) {
      __THREW__ = 0;
      invoke_v(409);
      $22 = __THREW__; __THREW__ = 0;
      $23 = $22&1;
      if ($23) {
       $24 = ___cxa_find_matching_catch_2()|0;
       $25 = tempRet0;
       $ehselector$slot$282 = $25;$exn$slot$283 = $24;
       break L22;
      } else {
       $$pre76$pre = HEAP32[$__nb>>2]|0;
       $$pre76 = $$pre76$pre;
       break;
      }
     } else {
      $$pre76 = $$pre7678;
     }
    } while(0);
    $26 = $call44;
    $29 = $$pre76;$__ob$0 = $call44;$__obh$sroa$0$0 = $26;
    label = 22;
   }
  } while(0);
  if ((label|0) == 22) {
   __THREW__ = 0;
   invoke_vii(379,($ref$tmp50|0),($__iob|0));
   $27 = __THREW__; __THREW__ = 0;
   $28 = $27&1;
   do {
    if ($28) {
     $39 = ___cxa_find_matching_catch_2()|0;
     $40 = tempRet0;
     $ehselector$slot$0 = $40;$exn$slot$0 = $39;
     label = 32;
    } else {
     __THREW__ = 0;
     invoke_viiiiiii(415,($29|0),($call35|0),($add$ptr32|0),($__ob$0|0),($__op|0),($__oe|0),($ref$tmp50|0));
     $30 = __THREW__; __THREW__ = 0;
     $31 = $30&1;
     if ($31) {
      $41 = ___cxa_find_matching_catch_2()|0;
      $42 = tempRet0;
      __ZNSt3__26localeD2Ev($ref$tmp50);
      $ehselector$slot$0 = $42;$exn$slot$0 = $41;
      label = 32;
      break;
     }
     __ZNSt3__26localeD2Ev($ref$tmp50);
     $32 = HEAP32[$__s>>2]|0;
     HEAP32[$agg$tmp>>2] = $32;
     $33 = HEAP32[$__op>>2]|0;
     $34 = HEAP32[$__oe>>2]|0;
     __THREW__ = 0;
     ;HEAP32[$agg$tmp$byval_copy>>2]=HEAP32[$agg$tmp>>2]|0;
     $call58 = (invoke_iiiiiii(381,($agg$tmp$byval_copy|0),($__ob$0|0),($33|0),($34|0),($__iob|0),($__fl|0))|0);
     $35 = __THREW__; __THREW__ = 0;
     $36 = $35&1;
     if ($36) {
      $43 = ___cxa_find_matching_catch_2()|0;
      $44 = tempRet0;
      $ehselector$slot$1 = $44;$exn$slot$1 = $43;
      break;
     }
     HEAP32[$__s>>2] = $call58;
     $tobool$i$i46 = ($__obh$sroa$0$0|0)==(0);
     if (!($tobool$i$i46)) {
      $37 = $__obh$sroa$0$0;
      _free($37);
     }
     $tobool$i$i52 = ($__nbh$sroa$0$0|0)==(0);
     if (!($tobool$i$i52)) {
      $38 = $__nbh$sroa$0$0;
      _free($38);
     }
     STACKTOP = sp;return ($call58|0);
    }
   } while(0);
   if ((label|0) == 32) {
    $ehselector$slot$1 = $ehselector$slot$0;$exn$slot$1 = $exn$slot$0;
   }
   $tobool$i$i31 = ($__obh$sroa$0$0|0)==(0);
   if ($tobool$i$i31) {
    $ehselector$slot$282 = $ehselector$slot$1;$exn$slot$283 = $exn$slot$1;
   } else {
    $45 = $__obh$sroa$0$0;
    _free($45);
    $ehselector$slot$282 = $ehselector$slot$1;$exn$slot$283 = $exn$slot$1;
   }
  }
  $tobool$i$i = ($__nbh$sroa$0$0|0)==(0);
  if ($tobool$i$i) {
   $ehselector$slot$485 = $ehselector$slot$282;$exn$slot$486 = $exn$slot$283;
  } else {
   $46 = $__nbh$sroa$0$0;
   _free($46);
   $ehselector$slot$485 = $ehselector$slot$282;$exn$slot$486 = $exn$slot$283;
  }
 }
 ___resumeException($exn$slot$486|0);
 // unreachable;
 return (0)|0;
}
function __ZNKSt3__27num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEce($this,$__s,$__iob,$__fl,$__v) {
 $this = $this|0;
 $__s = $__s|0;
 $__iob = $__iob|0;
 $__fl = $__fl|0;
 $__v = +$__v;
 var $$pre = 0, $$pre75 = 0, $$pre76 = 0, $$pre76$pre = 0, $$pre7678 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__fmt = 0, $__fmtflags_$i = 0, $__nar = 0, $__nb = 0, $__nbh$sroa$0$0 = 0, $__nc$0 = 0, $__nc$1 = 0, $__nc$2 = 0;
 var $__o = 0, $__ob$0 = 0, $__obh$sroa$0$0 = 0, $__oe = 0, $__op = 0, $__precision_$i = 0, $__precision_$i36 = 0, $add$ptr = 0, $add$ptr32 = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $call10 = 0, $call14 = 0, $call19 = 0, $call2 = 0, $call22 = 0, $call25 = 0, $call35 = 0, $call4 = 0, $call44 = 0;
 var $call58 = 0, $call7 = 0, $cmp = 0, $cmp27 = 0, $cmp39 = 0, $cmp45 = 0, $ehselector$slot$0 = 0, $ehselector$slot$1 = 0, $ehselector$slot$282 = 0, $ehselector$slot$485 = 0, $exn$slot$0 = 0, $exn$slot$1 = 0, $exn$slot$283 = 0, $exn$slot$486 = 0, $mul = 0, $ref$tmp50 = 0, $tobool$i$i = 0, $tobool$i$i31 = 0, $tobool$i$i46 = 0, $tobool$i$i52 = 0;
 var $vararg_buffer = 0, $vararg_buffer2 = 0, $vararg_buffer5 = 0, $vararg_buffer9 = 0, $vararg_ptr1 = 0, $vararg_ptr8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 176|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(176|0);
 $agg$tmp$byval_copy = sp + 76|0;
 $vararg_buffer9 = sp + 48|0;
 $vararg_buffer5 = sp + 32|0;
 $vararg_buffer2 = sp + 24|0;
 $vararg_buffer = sp + 8|0;
 $__fmt = sp;
 $__nar = sp + 138|0;
 $__nb = sp + 72|0;
 $__o = sp + 80|0;
 $__op = sp + 68|0;
 $__oe = sp + 64|0;
 $ref$tmp50 = sp + 60|0;
 $agg$tmp = sp + 56|0;
 $0 = $__fmt;
 $1 = $0;
 HEAP32[$1>>2] = 37;
 $2 = (($0) + 4)|0;
 $3 = $2;
 HEAP32[$3>>2] = 0;
 $add$ptr = ((($__fmt)) + 1|0);
 $__fmtflags_$i = ((($__iob)) + 4|0);
 $4 = HEAP32[$__fmtflags_$i>>2]|0;
 $call2 = (__ZNSt3__214__num_put_base14__format_floatEPcPKcj($add$ptr,15939,$4)|0);
 HEAP32[$__nb>>2] = $__nar;
 $call4 = (__ZNSt3__26__clocEv()|0);
 if ($call2) {
  $__precision_$i = ((($__iob)) + 8|0);
  $5 = HEAP32[$__precision_$i>>2]|0;
  HEAP32[$vararg_buffer>>2] = $5;
  $vararg_ptr1 = ((($vararg_buffer)) + 8|0);
  HEAPF64[$vararg_ptr1>>3] = $__v;
  $call7 = (__ZNSt3__219__libcpp_snprintf_lEPcjP15__locale_structPKcz($__nar,30,$call4,$__fmt,$vararg_buffer)|0);
  $__nc$0 = $call7;
 } else {
  HEAPF64[$vararg_buffer2>>3] = $__v;
  $call10 = (__ZNSt3__219__libcpp_snprintf_lEPcjP15__locale_structPKcz($__nar,30,$call4,$__fmt,$vararg_buffer2)|0);
  $__nc$0 = $call10;
 }
 $cmp = ($__nc$0|0)>(29);
 do {
  if ($cmp) {
   if ($call2) {
    __THREW__ = 0;
    $call14 = (invoke_i(392)|0);
    $6 = __THREW__; __THREW__ = 0;
    $7 = $6&1;
    if (!($7)) {
     $__precision_$i36 = ((($__iob)) + 8|0);
     $8 = HEAP32[$__precision_$i36>>2]|0;
     __THREW__ = 0;
     HEAP32[$vararg_buffer5>>2] = $8;
     $vararg_ptr8 = ((($vararg_buffer5)) + 8|0);
     HEAPF64[$vararg_ptr8>>3] = $__v;
     $call19 = (invoke_iiiii(414,($__nb|0),($call14|0),($__fmt|0),($vararg_buffer5|0))|0);
     $9 = __THREW__; __THREW__ = 0;
     $10 = $9&1;
     if (!($10)) {
      $__nc$1 = $call19;
      label = 12;
     }
    }
   } else {
    __THREW__ = 0;
    $call22 = (invoke_i(392)|0);
    $13 = __THREW__; __THREW__ = 0;
    $14 = $13&1;
    if (!($14)) {
     __THREW__ = 0;
     HEAPF64[$vararg_buffer9>>3] = $__v;
     $call25 = (invoke_iiiii(414,($__nb|0),($call22|0),($__fmt|0),($vararg_buffer9|0))|0);
     $15 = __THREW__; __THREW__ = 0;
     $16 = $15&1;
     if (!($16)) {
      $__nc$1 = $call25;
      label = 12;
     }
    }
   }
   if ((label|0) == 12) {
    $17 = HEAP32[$__nb>>2]|0;
    $cmp27 = ($17|0)==(0|0);
    if (!($cmp27)) {
     $18 = $17;
     $$pre7678 = $17;$__nbh$sroa$0$0 = $18;$__nc$2 = $__nc$1;
     label = 16;
     break;
    }
    __THREW__ = 0;
    invoke_v(409);
    $19 = __THREW__; __THREW__ = 0;
    $20 = $19&1;
    if (!($20)) {
     $$pre = HEAP32[$__nb>>2]|0;
     $21 = $$pre;
     $$pre7678 = $21;$__nbh$sroa$0$0 = $$pre;$__nc$2 = $__nc$1;
     label = 16;
     break;
    }
   }
   $11 = ___cxa_find_matching_catch_2()|0;
   $12 = tempRet0;
   $ehselector$slot$485 = $12;$exn$slot$486 = $11;
  } else {
   $$pre75 = HEAP32[$__nb>>2]|0;
   $$pre7678 = $$pre75;$__nbh$sroa$0$0 = 0;$__nc$2 = $__nc$0;
   label = 16;
  }
 } while(0);
 if ((label|0) == 16) {
  $add$ptr32 = (($$pre7678) + ($__nc$2)|0);
  $call35 = (__ZNSt3__214__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE($$pre7678,$add$ptr32,$__iob)|0);
  $cmp39 = ($$pre7678|0)==($__nar|0);
  L22: do {
   if ($cmp39) {
    $29 = $__nar;$__ob$0 = $__o;$__obh$sroa$0$0 = 0;
    label = 22;
   } else {
    $mul = $__nc$2 << 1;
    $call44 = (_malloc($mul)|0);
    $cmp45 = ($call44|0)==(0|0);
    do {
     if ($cmp45) {
      __THREW__ = 0;
      invoke_v(409);
      $22 = __THREW__; __THREW__ = 0;
      $23 = $22&1;
      if ($23) {
       $24 = ___cxa_find_matching_catch_2()|0;
       $25 = tempRet0;
       $ehselector$slot$282 = $25;$exn$slot$283 = $24;
       break L22;
      } else {
       $$pre76$pre = HEAP32[$__nb>>2]|0;
       $$pre76 = $$pre76$pre;
       break;
      }
     } else {
      $$pre76 = $$pre7678;
     }
    } while(0);
    $26 = $call44;
    $29 = $$pre76;$__ob$0 = $call44;$__obh$sroa$0$0 = $26;
    label = 22;
   }
  } while(0);
  if ((label|0) == 22) {
   __THREW__ = 0;
   invoke_vii(379,($ref$tmp50|0),($__iob|0));
   $27 = __THREW__; __THREW__ = 0;
   $28 = $27&1;
   do {
    if ($28) {
     $39 = ___cxa_find_matching_catch_2()|0;
     $40 = tempRet0;
     $ehselector$slot$0 = $40;$exn$slot$0 = $39;
     label = 32;
    } else {
     __THREW__ = 0;
     invoke_viiiiiii(415,($29|0),($call35|0),($add$ptr32|0),($__ob$0|0),($__op|0),($__oe|0),($ref$tmp50|0));
     $30 = __THREW__; __THREW__ = 0;
     $31 = $30&1;
     if ($31) {
      $41 = ___cxa_find_matching_catch_2()|0;
      $42 = tempRet0;
      __ZNSt3__26localeD2Ev($ref$tmp50);
      $ehselector$slot$0 = $42;$exn$slot$0 = $41;
      label = 32;
      break;
     }
     __ZNSt3__26localeD2Ev($ref$tmp50);
     $32 = HEAP32[$__s>>2]|0;
     HEAP32[$agg$tmp>>2] = $32;
     $33 = HEAP32[$__op>>2]|0;
     $34 = HEAP32[$__oe>>2]|0;
     __THREW__ = 0;
     ;HEAP32[$agg$tmp$byval_copy>>2]=HEAP32[$agg$tmp>>2]|0;
     $call58 = (invoke_iiiiiii(381,($agg$tmp$byval_copy|0),($__ob$0|0),($33|0),($34|0),($__iob|0),($__fl|0))|0);
     $35 = __THREW__; __THREW__ = 0;
     $36 = $35&1;
     if ($36) {
      $43 = ___cxa_find_matching_catch_2()|0;
      $44 = tempRet0;
      $ehselector$slot$1 = $44;$exn$slot$1 = $43;
      break;
     }
     HEAP32[$__s>>2] = $call58;
     $tobool$i$i46 = ($__obh$sroa$0$0|0)==(0);
     if (!($tobool$i$i46)) {
      $37 = $__obh$sroa$0$0;
      _free($37);
     }
     $tobool$i$i52 = ($__nbh$sroa$0$0|0)==(0);
     if (!($tobool$i$i52)) {
      $38 = $__nbh$sroa$0$0;
      _free($38);
     }
     STACKTOP = sp;return ($call58|0);
    }
   } while(0);
   if ((label|0) == 32) {
    $ehselector$slot$1 = $ehselector$slot$0;$exn$slot$1 = $exn$slot$0;
   }
   $tobool$i$i31 = ($__obh$sroa$0$0|0)==(0);
   if ($tobool$i$i31) {
    $ehselector$slot$282 = $ehselector$slot$1;$exn$slot$283 = $exn$slot$1;
   } else {
    $45 = $__obh$sroa$0$0;
    _free($45);
    $ehselector$slot$282 = $ehselector$slot$1;$exn$slot$283 = $exn$slot$1;
   }
  }
  $tobool$i$i = ($__nbh$sroa$0$0|0)==(0);
  if ($tobool$i$i) {
   $ehselector$slot$485 = $ehselector$slot$282;$exn$slot$486 = $exn$slot$283;
  } else {
   $46 = $__nbh$sroa$0$0;
   _free($46);
   $ehselector$slot$485 = $ehselector$slot$282;$exn$slot$486 = $exn$slot$283;
  }
 }
 ___resumeException($exn$slot$486|0);
 // unreachable;
 return (0)|0;
}
function __ZNKSt3__27num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcPKv($this,$__s,$__iob,$__fl,$__v) {
 $this = $this|0;
 $__s = $__s|0;
 $__iob = $__iob|0;
 $__fl = $__fl|0;
 $__v = $__v|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $__fmt = 0, $__nar = 0, $__o = 0, $__op$0 = 0, $add$ptr = 0, $add$ptr13 = 0, $add$ptr19 = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $call = 0, $call$i21 = 0, $call21 = 0, $call3 = 0, $call6 = 0;
 var $cmp = 0, $ref$tmp = 0, $sub$ptr$lhs$cast16 = 0, $sub$ptr$rhs$cast = 0, $sub$ptr$sub18 = 0, $vararg_buffer = 0, $vfn$i = 0, $vtable$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(96|0);
 $agg$tmp$byval_copy = sp + 12|0;
 $vararg_buffer = sp;
 $__fmt = sp + 76|0;
 $__nar = sp + 56|0;
 $__o = sp + 16|0;
 $ref$tmp = sp + 8|0;
 $agg$tmp = sp + 4|0;
 ;HEAP8[$__fmt>>0]=HEAP8[15933>>0]|0;HEAP8[$__fmt+1>>0]=HEAP8[15933+1>>0]|0;HEAP8[$__fmt+2>>0]=HEAP8[15933+2>>0]|0;HEAP8[$__fmt+3>>0]=HEAP8[15933+3>>0]|0;HEAP8[$__fmt+4>>0]=HEAP8[15933+4>>0]|0;HEAP8[$__fmt+5>>0]=HEAP8[15933+5>>0]|0;
 $call = (__ZNSt3__26__clocEv()|0);
 HEAP32[$vararg_buffer>>2] = $__v;
 $call3 = (__ZNSt3__219__libcpp_snprintf_lEPcjP15__locale_structPKcz($__nar,20,$call,$__fmt,$vararg_buffer)|0);
 $add$ptr = (($__nar) + ($call3)|0);
 $call6 = (__ZNSt3__214__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE($__nar,$add$ptr,$__iob)|0);
 __ZNKSt3__28ios_base6getlocEv($ref$tmp,$__iob);
 __THREW__ = 0;
 $call$i21 = (invoke_iii(380,($ref$tmp|0),(20096|0))|0);
 $0 = __THREW__; __THREW__ = 0;
 $1 = $0&1;
 if ($1) {
  $4 = ___cxa_find_matching_catch_2()|0;
  $5 = tempRet0;
  __ZNSt3__26localeD2Ev($ref$tmp);
  ___resumeException($4|0);
  // unreachable;
 } else {
  __ZNSt3__26localeD2Ev($ref$tmp);
  $vtable$i = HEAP32[$call$i21>>2]|0;
  $vfn$i = ((($vtable$i)) + 32|0);
  $2 = HEAP32[$vfn$i>>2]|0;
  (FUNCTION_TABLE_iiiii[$2 & 511]($call$i21,$__nar,$add$ptr,$__o)|0);
  $add$ptr13 = (($__o) + ($call3)|0);
  $cmp = ($call6|0)==($add$ptr|0);
  $sub$ptr$rhs$cast = $__nar;
  $sub$ptr$lhs$cast16 = $call6;
  $sub$ptr$sub18 = (($sub$ptr$lhs$cast16) - ($sub$ptr$rhs$cast))|0;
  $add$ptr19 = (($__o) + ($sub$ptr$sub18)|0);
  $__op$0 = $cmp ? $add$ptr13 : $add$ptr19;
  $3 = HEAP32[$__s>>2]|0;
  HEAP32[$agg$tmp>>2] = $3;
  ;HEAP32[$agg$tmp$byval_copy>>2]=HEAP32[$agg$tmp>>2]|0;
  $call21 = (__ZNSt3__216__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg$tmp$byval_copy,$__o,$__op$0,$add$ptr13,$__iob,$__fl)|0);
  STACKTOP = sp;return ($call21|0);
 }
 return (0)|0;
}
function __ZNSt3__219__libcpp_snprintf_lEPcjP15__locale_structPKcz($__s,$__n,$__l,$__format,$varargs) {
 $__s = $__s|0;
 $__n = $__n|0;
 $__l = $__l|0;
 $__format = $__format|0;
 $varargs = $varargs|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $__va = 0, $call = 0, $call3 = 0, $tobool$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $__va = sp;
 HEAP32[$__va>>2] = $varargs;
 $call = (___uselocale($__l)|0);
 $call3 = (_vsnprintf($__s,$__n,$__format,$__va)|0);
 $tobool$i$i = ($call|0)==(0|0);
 if (!($tobool$i$i)) {
  __THREW__ = 0;
  (invoke_ii(395,($call|0))|0);
  $0 = __THREW__; __THREW__ = 0;
  $1 = $0&1;
  if ($1) {
   $2 = ___cxa_find_matching_catch_3(0|0)|0;
   $3 = tempRet0;
   ___clang_call_terminate($2);
   // unreachable;
  }
 }
 STACKTOP = sp;return ($call3|0);
}
function __ZNSt3__214__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE($__nb,$__ne,$__iob) {
 $__nb = $__nb|0;
 $__ne = $__ne|0;
 $__iob = $__iob|0;
 var $0 = 0, $1 = 0, $2 = 0, $__fmtflags_$i = 0, $add$ptr = 0, $add$ptr17 = 0, $and = 0, $cmp4 = 0, $cmp7 = 0, $or$cond = 0, $retval$0 = 0, $sub$ptr$lhs$cast = 0, $sub$ptr$rhs$cast = 0, $sub$ptr$sub = 0, $trunc = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $__fmtflags_$i = ((($__iob)) + 4|0);
 $0 = HEAP32[$__fmtflags_$i>>2]|0;
 $and = $0 & 176;
 $trunc = $and&255;
 L1: do {
  switch ($trunc<<24>>24) {
  case 16:  {
   $1 = HEAP8[$__nb>>0]|0;
   $add$ptr = ((($__nb)) + 1|0);
   switch ($1<<24>>24) {
   case 43: case 45:  {
    $retval$0 = $add$ptr;
    break L1;
    break;
   }
   default: {
   }
   }
   $sub$ptr$lhs$cast = $__ne;
   $sub$ptr$rhs$cast = $__nb;
   $sub$ptr$sub = (($sub$ptr$lhs$cast) - ($sub$ptr$rhs$cast))|0;
   $cmp4 = ($sub$ptr$sub|0)>(1);
   $cmp7 = ($1<<24>>24)==(48);
   $or$cond = $cmp4 & $cmp7;
   if ($or$cond) {
    $2 = HEAP8[$add$ptr>>0]|0;
    switch ($2<<24>>24) {
    case 88: case 120:  {
     break;
    }
    default: {
     label = 6;
     break L1;
    }
    }
    $add$ptr17 = ((($__nb)) + 2|0);
    $retval$0 = $add$ptr17;
   } else {
    label = 6;
   }
   break;
  }
  case 32:  {
   $retval$0 = $__ne;
   break;
  }
  default: {
   label = 6;
  }
  }
 } while(0);
 if ((label|0) == 6) {
  $retval$0 = $__nb;
 }
 return ($retval$0|0);
}
function __ZNSt3__214__num_put_base14__format_floatEPcPKcj($__fmtp,$__len,$__flags) {
 $__fmtp = $__fmtp|0;
 $__len = $__len|0;
 $__flags = $__flags|0;
 var $$sink = 0, $$sink1 = 0, $$sink1$sink = 0, $$sink2 = 0, $$sink3 = 0, $0 = 0, $__fmtp$addr$0 = 0, $__fmtp$addr$1 = 0, $__fmtp$addr$2 = 0, $__fmtp$addr$2$ph = 0, $__len$addr$0 = 0, $and = 0, $and1 = 0, $and6 = 0, $and7 = 0, $cmp = 0, $cmp8 = 0, $incdec$ptr = 0, $incdec$ptr10 = 0, $incdec$ptr11 = 0;
 var $incdec$ptr14 = 0, $incdec$ptr15 = 0, $incdec$ptr4 = 0, $specify_precision$0$off0$ph = 0, $tobool = 0, $tobool13 = 0, $tobool2 = 0, $trunc = 0, $trunc$clear = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $and = $__flags & 2048;
 $tobool = ($and|0)==(0);
 if ($tobool) {
  $__fmtp$addr$0 = $__fmtp;
 } else {
  $incdec$ptr = ((($__fmtp)) + 1|0);
  HEAP8[$__fmtp>>0] = 43;
  $__fmtp$addr$0 = $incdec$ptr;
 }
 $and1 = $__flags & 1024;
 $tobool2 = ($and1|0)==(0);
 if ($tobool2) {
  $__fmtp$addr$1 = $__fmtp$addr$0;
 } else {
  $incdec$ptr4 = ((($__fmtp$addr$0)) + 1|0);
  HEAP8[$__fmtp$addr$0>>0] = 35;
  $__fmtp$addr$1 = $incdec$ptr4;
 }
 $and6 = $__flags & 260;
 $and7 = $__flags & 16384;
 $cmp = ($and7|0)!=(0);
 $cmp8 = ($and6|0)==(260);
 if ($cmp8) {
  $__fmtp$addr$2$ph = $__fmtp$addr$1;$specify_precision$0$off0$ph = 0;
 } else {
  $incdec$ptr10 = ((($__fmtp$addr$1)) + 1|0);
  HEAP8[$__fmtp$addr$1>>0] = 46;
  $incdec$ptr11 = ((($__fmtp$addr$1)) + 2|0);
  HEAP8[$incdec$ptr10>>0] = 42;
  $__fmtp$addr$2$ph = $incdec$ptr11;$specify_precision$0$off0$ph = 1;
 }
 $__fmtp$addr$2 = $__fmtp$addr$2$ph;$__len$addr$0 = $__len;
 while(1) {
  $0 = HEAP8[$__len$addr$0>>0]|0;
  $tobool13 = ($0<<24>>24)==(0);
  if ($tobool13) {
   break;
  }
  $incdec$ptr14 = ((($__len$addr$0)) + 1|0);
  $incdec$ptr15 = ((($__fmtp$addr$2)) + 1|0);
  HEAP8[$__fmtp$addr$2>>0] = $0;
  $__fmtp$addr$2 = $incdec$ptr15;$__len$addr$0 = $incdec$ptr14;
 }
 $trunc = $and6&65535;
 $trunc$clear = $trunc & 511;
 L14: do {
  switch ($trunc$clear<<16>>16) {
  case 4:  {
   $$sink = $cmp ? 70 : 102;
   $$sink1$sink = $$sink;
   break;
  }
  case 256:  {
   $$sink1 = $cmp ? 69 : 101;
   $$sink1$sink = $$sink1;
   break;
  }
  default: {
   if ($cmp8) {
    $$sink2 = $cmp ? 65 : 97;
    $$sink1$sink = $$sink2;
    break L14;
   } else {
    $$sink3 = $cmp ? 71 : 103;
    $$sink1$sink = $$sink3;
    break L14;
   }
  }
  }
 } while(0);
 HEAP8[$__fmtp$addr$2>>0] = $$sink1$sink;
 return ($specify_precision$0$off0$ph|0);
}
function __ZNSt3__219__libcpp_asprintf_lEPPcP15__locale_structPKcz($__s,$__l,$__format,$varargs) {
 $__s = $__s|0;
 $__l = $__l|0;
 $__format = $__format|0;
 $varargs = $varargs|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__va = 0, $call = 0, $call3 = 0, $tobool$i$i = 0, $tobool$i$i3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $__va = sp;
 HEAP32[$__va>>2] = $varargs;
 $call = (___uselocale($__l)|0);
 __THREW__ = 0;
 $call3 = (invoke_iiii(416,($__s|0),($__format|0),($__va|0))|0);
 $0 = __THREW__; __THREW__ = 0;
 $1 = $0&1;
 if ($1) {
  $6 = ___cxa_find_matching_catch_2()|0;
  $7 = tempRet0;
  $tobool$i$i = ($call|0)==(0|0);
  if (!($tobool$i$i)) {
   __THREW__ = 0;
   (invoke_ii(395,($call|0))|0);
   $8 = __THREW__; __THREW__ = 0;
   $9 = $8&1;
   if ($9) {
    $10 = ___cxa_find_matching_catch_3(0|0)|0;
    $11 = tempRet0;
    ___clang_call_terminate($10);
    // unreachable;
   }
  }
  ___resumeException($6|0);
  // unreachable;
 } else {
  $tobool$i$i3 = ($call|0)==(0|0);
  if (!($tobool$i$i3)) {
   __THREW__ = 0;
   (invoke_ii(395,($call|0))|0);
   $2 = __THREW__; __THREW__ = 0;
   $3 = $2&1;
   if ($3) {
    $4 = ___cxa_find_matching_catch_3(0|0)|0;
    $5 = tempRet0;
    ___clang_call_terminate($4);
    // unreachable;
   }
  }
  STACKTOP = sp;return ($call3|0);
 }
 return (0)|0;
}
function __ZNSt3__29__num_putIcE23__widen_and_group_floatEPcS2_S2_S2_RS2_S3_RKNS_6localeE($__nb,$__np,$__ne,$__ob,$__op,$__oe,$__loc) {
 $__nb = $__nb|0;
 $__np = $__np|0;
 $__ne = $__ne|0;
 $__ob = $__ob|0;
 $__op = $__op|0;
 $__oe = $__oe|0;
 $__loc = $__loc|0;
 var $$pre$phiZ2D = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $7 = 0, $8 = 0, $9 = 0, $__dc$0 = 0, $__dc$1 = 0, $__dg$0 = 0, $__dg$1 = 0, $__first$addr$0$i$i = 0, $__first$addr$0$i$i124 = 0, $__grouping = 0, $__last$addr$0$i$i = 0, $__last$addr$0$i$i125 = 0, $__nf$0 = 0;
 var $__nf$1 = 0, $__nf$2 = 0, $__nf$3 = 0, $__ns$0 = 0, $__ns$1 = 0, $__ns$2 = 0, $__p$0 = 0, $__size_$i$i$i = 0, $__size_$i3$i$i = 0, $add$ptr = 0, $add$ptr$i = 0, $add$ptr121 = 0, $add$ptr128 = 0, $add$ptr92 = 0, $arrayidx10 = 0, $call$i = 0, $call$i102103 = 0, $call$i116117 = 0, $call$i121122 = 0, $call$i134135 = 0;
 var $call$i144145 = 0, $call$i90 = 0, $call$i9394 = 0, $call$i9798 = 0, $call30 = 0, $call32 = 0, $call41 = 0, $call43 = 0, $cmp$i = 0, $cmp$i$i = 0, $cmp$i$i123 = 0, $cmp1$i$i = 0, $cmp1$i$i127 = 0, $cmp102 = 0, $cmp122 = 0, $cmp27 = 0, $cmp37 = 0, $cmp6 = 0, $cmp63 = 0, $cmp69 = 0;
 var $cmp74 = 0, $cmp78 = 0, $cmp8 = 0, $cmp99 = 0, $cond$i = 0, $cond$i$i = 0, $cond$i$i141 = 0, $conv$i$i = 0, $conv$i$i$i = 0, $conv28 = 0, $conv39 = 0, $conv73 = 0, $inc = 0, $inc$__dg$0 = 0, $inc85 = 0, $incdec$ptr = 0, $incdec$ptr$i$i = 0, $incdec$ptr$i$i126 = 0, $incdec$ptr106 = 0, $incdec$ptr107 = 0;
 var $incdec$ptr111 = 0, $incdec$ptr2$i$i = 0, $incdec$ptr2$i$i129 = 0, $incdec$ptr22 = 0, $incdec$ptr23 = 0, $incdec$ptr26 = 0, $incdec$ptr35 = 0, $incdec$ptr48 = 0, $incdec$ptr5 = 0, $incdec$ptr76 = 0, $incdec$ptr84 = 0, $incdec$ptr87 = 0, $or$cond = 0, $storemerge = 0, $sub = 0, $sub$ptr$lhs$cast = 0, $sub$ptr$lhs$cast125 = 0, $sub$ptr$lhs$cast55 = 0, $sub$ptr$rhs$cast = 0, $sub$ptr$rhs$cast119 = 0;
 var $sub$ptr$rhs$cast126 = 0, $sub$ptr$rhs$cast56 = 0, $sub$ptr$sub = 0, $sub$ptr$sub120 = 0, $sub$ptr$sub127 = 0, $sub$ptr$sub57 = 0, $sub$ptr$sub91 = 0, $tobool = 0, $tobool$i$i = 0, $tobool$i$i$i = 0, $tobool$i$i$i138 = 0, $tobool44 = 0, $vfn$i = 0, $vfn$i101 = 0, $vfn$i106 = 0, $vfn$i110 = 0, $vfn$i115 = 0, $vfn$i120 = 0, $vfn$i133 = 0, $vfn$i143 = 0;
 var $vfn$i92 = 0, $vfn$i96 = 0, $vtable$i = 0, $vtable$i100 = 0, $vtable$i105 = 0, $vtable$i109 = 0, $vtable$i114 = 0, $vtable$i119 = 0, $vtable$i132 = 0, $vtable$i142 = 0, $vtable$i91 = 0, $vtable$i95 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $__grouping = sp;
 $call$i = (__ZNKSt3__26locale9use_facetERNS0_2idE($__loc,20096)|0);
 $call$i90 = (__ZNKSt3__26locale9use_facetERNS0_2idE($__loc,20112)|0);
 $vtable$i = HEAP32[$call$i90>>2]|0;
 $vfn$i = ((($vtable$i)) + 20|0);
 $0 = HEAP32[$vfn$i>>2]|0;
 FUNCTION_TABLE_vii[$0 & 1023]($__grouping,$call$i90);
 HEAP32[$__oe>>2] = $__ob;
 $1 = HEAP8[$__nb>>0]|0;
 switch ($1<<24>>24) {
 case 43: case 45:  {
  $vtable$i91 = HEAP32[$call$i>>2]|0;
  $vfn$i92 = ((($vtable$i91)) + 28|0);
  $2 = HEAP32[$vfn$i92>>2]|0;
  __THREW__ = 0;
  $call$i9394 = (invoke_iii($2|0,($call$i|0),($1|0))|0);
  $3 = __THREW__; __THREW__ = 0;
  $4 = $3&1;
  if (!($4)) {
   $incdec$ptr = ((($__nb)) + 1|0);
   $5 = HEAP32[$__oe>>2]|0;
   $incdec$ptr5 = ((($5)) + 1|0);
   HEAP32[$__oe>>2] = $incdec$ptr5;
   HEAP8[$5>>0] = $call$i9394;
   $__nf$0 = $incdec$ptr;
   label = 4;
  }
  break;
 }
 default: {
  $__nf$0 = $__nb;
  label = 4;
 }
 }
 L4: do {
  if ((label|0) == 4) {
   $sub$ptr$lhs$cast = $__ne;
   $sub$ptr$rhs$cast = $__nf$0;
   $sub$ptr$sub = (($sub$ptr$lhs$cast) - ($sub$ptr$rhs$cast))|0;
   $cmp6 = ($sub$ptr$sub|0)>(1);
   L6: do {
    if ($cmp6) {
     $6 = HEAP8[$__nf$0>>0]|0;
     $cmp8 = ($6<<24>>24)==(48);
     if ($cmp8) {
      $arrayidx10 = ((($__nf$0)) + 1|0);
      $7 = HEAP8[$arrayidx10>>0]|0;
      switch ($7<<24>>24) {
      case 88: case 120:  {
       break;
      }
      default: {
       $__ns$1 = $__nf$0;
       label = 15;
       break L6;
      }
      }
      $vtable$i95 = HEAP32[$call$i>>2]|0;
      $vfn$i96 = ((($vtable$i95)) + 28|0);
      $8 = HEAP32[$vfn$i96>>2]|0;
      __THREW__ = 0;
      $call$i9798 = (invoke_iii($8|0,($call$i|0),48)|0);
      $9 = __THREW__; __THREW__ = 0;
      $10 = $9&1;
      if ($10) {
       break L4;
      }
      $11 = HEAP32[$__oe>>2]|0;
      $incdec$ptr22 = ((($11)) + 1|0);
      HEAP32[$__oe>>2] = $incdec$ptr22;
      HEAP8[$11>>0] = $call$i9798;
      $incdec$ptr23 = ((($__nf$0)) + 2|0);
      $12 = HEAP8[$arrayidx10>>0]|0;
      $vtable$i100 = HEAP32[$call$i>>2]|0;
      $vfn$i101 = ((($vtable$i100)) + 28|0);
      $13 = HEAP32[$vfn$i101>>2]|0;
      __THREW__ = 0;
      $call$i102103 = (invoke_iii($13|0,($call$i|0),($12|0))|0);
      $14 = __THREW__; __THREW__ = 0;
      $15 = $14&1;
      if ($15) {
       break L4;
      }
      $16 = HEAP32[$__oe>>2]|0;
      $incdec$ptr26 = ((($16)) + 1|0);
      HEAP32[$__oe>>2] = $incdec$ptr26;
      HEAP8[$16>>0] = $call$i102103;
      $__ns$0 = $incdec$ptr23;
      while(1) {
       $cmp27 = ($__ns$0>>>0)<($__ne>>>0);
       if (!($cmp27)) {
        $__nf$1 = $incdec$ptr23;$__ns$2 = $__ns$0;
        break L6;
       }
       $17 = HEAP8[$__ns$0>>0]|0;
       __THREW__ = 0;
       $call30 = (invoke_i(392)|0);
       $18 = __THREW__; __THREW__ = 0;
       $19 = $18&1;
       if ($19) {
        break L4;
       }
       $conv28 = $17 << 24 >> 24;
       __THREW__ = 0;
       $call32 = (invoke_iii(417,($conv28|0),($call30|0))|0);
       $20 = __THREW__; __THREW__ = 0;
       $21 = $20&1;
       if ($21) {
        break L4;
       }
       $tobool = ($call32|0)==(0);
       if ($tobool) {
        $__nf$1 = $incdec$ptr23;$__ns$2 = $__ns$0;
        break L6;
       }
       $incdec$ptr35 = ((($__ns$0)) + 1|0);
       $__ns$0 = $incdec$ptr35;
      }
     } else {
      $__ns$1 = $__nf$0;
      label = 15;
     }
    } else {
     $__ns$1 = $__nf$0;
     label = 15;
    }
   } while(0);
   L18: do {
    if ((label|0) == 15) {
     while(1) {
      label = 0;
      $cmp37 = ($__ns$1>>>0)<($__ne>>>0);
      if (!($cmp37)) {
       $__nf$1 = $__nf$0;$__ns$2 = $__ns$1;
       break L18;
      }
      $22 = HEAP8[$__ns$1>>0]|0;
      __THREW__ = 0;
      $call41 = (invoke_i(392)|0);
      $23 = __THREW__; __THREW__ = 0;
      $24 = $23&1;
      if ($24) {
       break L4;
      }
      $conv39 = $22 << 24 >> 24;
      __THREW__ = 0;
      $call43 = (invoke_iii(418,($conv39|0),($call41|0))|0);
      $25 = __THREW__; __THREW__ = 0;
      $26 = $25&1;
      if ($26) {
       break L4;
      }
      $tobool44 = ($call43|0)==(0);
      if ($tobool44) {
       $__nf$1 = $__nf$0;$__ns$2 = $__ns$1;
       break L18;
      }
      $incdec$ptr48 = ((($__ns$1)) + 1|0);
      $__ns$1 = $incdec$ptr48;
      label = 15;
     }
    }
   } while(0);
   $__size_$i$i$i = ((($__grouping)) + 11|0);
   $27 = HEAP8[$__size_$i$i$i>>0]|0;
   $tobool$i$i$i = ($27<<24>>24)<(0);
   $__size_$i3$i$i = ((($__grouping)) + 4|0);
   $28 = HEAP32[$__size_$i3$i$i>>2]|0;
   $conv$i$i$i = $27&255;
   $cond$i$i = $tobool$i$i$i ? $28 : $conv$i$i$i;
   $cmp$i = ($cond$i$i|0)==(0);
   $sub$ptr$rhs$cast56 = $__nf$1;
   $sub$ptr$rhs$cast126 = $__nb;
   L26: do {
    if ($cmp$i) {
     $29 = HEAP32[$__oe>>2]|0;
     $vtable$i109 = HEAP32[$call$i>>2]|0;
     $vfn$i110 = ((($vtable$i109)) + 32|0);
     $30 = HEAP32[$vfn$i110>>2]|0;
     __THREW__ = 0;
     (invoke_iiiii($30|0,($call$i|0),($__nf$1|0),($__ns$2|0),($29|0))|0);
     $31 = __THREW__; __THREW__ = 0;
     $32 = $31&1;
     if ($32) {
      break L4;
     }
     $sub$ptr$lhs$cast55 = $__ns$2;
     $sub$ptr$sub57 = (($sub$ptr$lhs$cast55) - ($sub$ptr$rhs$cast56))|0;
     $33 = HEAP32[$__oe>>2]|0;
     $add$ptr = (($33) + ($sub$ptr$sub57)|0);
     HEAP32[$__oe>>2] = $add$ptr;
     $$pre$phiZ2D = $call$i;
    } else {
     $cmp$i$i = ($__nf$1|0)==($__ns$2|0);
     L30: do {
      if (!($cmp$i$i)) {
       $__first$addr$0$i$i = $__nf$1;$__last$addr$0$i$i = $__ns$2;
       while(1) {
        $incdec$ptr$i$i = ((($__last$addr$0$i$i)) + -1|0);
        $cmp1$i$i = ($__first$addr$0$i$i>>>0)<($incdec$ptr$i$i>>>0);
        if (!($cmp1$i$i)) {
         break L30;
        }
        $34 = HEAP8[$__first$addr$0$i$i>>0]|0;
        $35 = HEAP8[$incdec$ptr$i$i>>0]|0;
        HEAP8[$__first$addr$0$i$i>>0] = $35;
        HEAP8[$incdec$ptr$i$i>>0] = $34;
        $incdec$ptr2$i$i = ((($__first$addr$0$i$i)) + 1|0);
        $__first$addr$0$i$i = $incdec$ptr2$i$i;$__last$addr$0$i$i = $incdec$ptr$i$i;
       }
      }
     } while(0);
     $vtable$i119 = HEAP32[$call$i90>>2]|0;
     $vfn$i120 = ((($vtable$i119)) + 16|0);
     $36 = HEAP32[$vfn$i120>>2]|0;
     __THREW__ = 0;
     $call$i121122 = (invoke_ii($36|0,($call$i90|0))|0);
     $37 = __THREW__; __THREW__ = 0;
     $38 = $37&1;
     if ($38) {
      break L4;
     }
     $__dc$0 = 0;$__dg$0 = 0;$__p$0 = $__nf$1;
     while(1) {
      $cmp63 = ($__p$0>>>0)<($__ns$2>>>0);
      if (!($cmp63)) {
       break;
      }
      $42 = HEAP8[$__size_$i$i$i>>0]|0;
      $tobool$i$i$i138 = ($42<<24>>24)<(0);
      $43 = HEAP32[$__grouping>>2]|0;
      $cond$i$i141 = $tobool$i$i$i138 ? $43 : $__grouping;
      $add$ptr$i = (($cond$i$i141) + ($__dg$0)|0);
      $44 = HEAP8[$add$ptr$i>>0]|0;
      $cmp69 = ($44<<24>>24)>(0);
      $conv73 = $44 << 24 >> 24;
      $cmp74 = ($__dc$0|0)==($conv73|0);
      $or$cond = $cmp69 & $cmp74;
      if ($or$cond) {
       $45 = HEAP32[$__oe>>2]|0;
       $incdec$ptr76 = ((($45)) + 1|0);
       HEAP32[$__oe>>2] = $incdec$ptr76;
       HEAP8[$45>>0] = $call$i121122;
       $46 = HEAP8[$__size_$i$i$i>>0]|0;
       $tobool$i$i = ($46<<24>>24)<(0);
       $47 = HEAP32[$__size_$i3$i$i>>2]|0;
       $conv$i$i = $46&255;
       $cond$i = $tobool$i$i ? $47 : $conv$i$i;
       $sub = (($cond$i) + -1)|0;
       $cmp78 = ($__dg$0>>>0)<($sub>>>0);
       $inc = $cmp78&1;
       $inc$__dg$0 = (($inc) + ($__dg$0))|0;
       $__dc$1 = 0;$__dg$1 = $inc$__dg$0;
      } else {
       $__dc$1 = $__dc$0;$__dg$1 = $__dg$0;
      }
      $48 = HEAP8[$__p$0>>0]|0;
      $vtable$i142 = HEAP32[$call$i>>2]|0;
      $vfn$i143 = ((($vtable$i142)) + 28|0);
      $49 = HEAP32[$vfn$i143>>2]|0;
      __THREW__ = 0;
      $call$i144145 = (invoke_iii($49|0,($call$i|0),($48|0))|0);
      $50 = __THREW__; __THREW__ = 0;
      $51 = $50&1;
      if ($51) {
       break L4;
      }
      $52 = HEAP32[$__oe>>2]|0;
      $incdec$ptr84 = ((($52)) + 1|0);
      HEAP32[$__oe>>2] = $incdec$ptr84;
      HEAP8[$52>>0] = $call$i144145;
      $inc85 = (($__dc$1) + 1)|0;
      $incdec$ptr87 = ((($__p$0)) + 1|0);
      $__dc$0 = $inc85;$__dg$0 = $__dg$1;$__p$0 = $incdec$ptr87;
     }
     $sub$ptr$sub91 = (($sub$ptr$rhs$cast56) - ($sub$ptr$rhs$cast126))|0;
     $add$ptr92 = (($__ob) + ($sub$ptr$sub91)|0);
     $39 = HEAP32[$__oe>>2]|0;
     $cmp$i$i123 = ($add$ptr92|0)==($39|0);
     if ($cmp$i$i123) {
      $$pre$phiZ2D = $call$i;
     } else {
      $__first$addr$0$i$i124 = $add$ptr92;$__last$addr$0$i$i125 = $39;
      while(1) {
       $incdec$ptr$i$i126 = ((($__last$addr$0$i$i125)) + -1|0);
       $cmp1$i$i127 = ($__first$addr$0$i$i124>>>0)<($incdec$ptr$i$i126>>>0);
       if (!($cmp1$i$i127)) {
        $$pre$phiZ2D = $call$i;
        break L26;
       }
       $40 = HEAP8[$__first$addr$0$i$i124>>0]|0;
       $41 = HEAP8[$incdec$ptr$i$i126>>0]|0;
       HEAP8[$__first$addr$0$i$i124>>0] = $41;
       HEAP8[$incdec$ptr$i$i126>>0] = $40;
       $incdec$ptr2$i$i129 = ((($__first$addr$0$i$i124)) + 1|0);
       $__first$addr$0$i$i124 = $incdec$ptr2$i$i129;$__last$addr$0$i$i125 = $incdec$ptr$i$i126;
      }
     }
    }
   } while(0);
   $__nf$2 = $__ns$2;
   while(1) {
    $cmp99 = ($__nf$2>>>0)<($__ne>>>0);
    if (!($cmp99)) {
     $__nf$3 = $__nf$2;
     break;
    }
    $53 = HEAP8[$__nf$2>>0]|0;
    $cmp102 = ($53<<24>>24)==(46);
    $incdec$ptr107 = ((($__nf$2)) + 1|0);
    if ($cmp102) {
     label = 39;
     break;
    }
    $vtable$i114 = HEAP32[$$pre$phiZ2D>>2]|0;
    $vfn$i115 = ((($vtable$i114)) + 28|0);
    $58 = HEAP32[$vfn$i115>>2]|0;
    __THREW__ = 0;
    $call$i116117 = (invoke_iii($58|0,($call$i|0),($53|0))|0);
    $59 = __THREW__; __THREW__ = 0;
    $60 = $59&1;
    if ($60) {
     break L4;
    }
    $61 = HEAP32[$__oe>>2]|0;
    $incdec$ptr111 = ((($61)) + 1|0);
    HEAP32[$__oe>>2] = $incdec$ptr111;
    HEAP8[$61>>0] = $call$i116117;
    $__nf$2 = $incdec$ptr107;
   }
   if ((label|0) == 39) {
    $vtable$i132 = HEAP32[$call$i90>>2]|0;
    $vfn$i133 = ((($vtable$i132)) + 12|0);
    $54 = HEAP32[$vfn$i133>>2]|0;
    __THREW__ = 0;
    $call$i134135 = (invoke_ii($54|0,($call$i90|0))|0);
    $55 = __THREW__; __THREW__ = 0;
    $56 = $55&1;
    if ($56) {
     break;
    }
    $57 = HEAP32[$__oe>>2]|0;
    $incdec$ptr106 = ((($57)) + 1|0);
    HEAP32[$__oe>>2] = $incdec$ptr106;
    HEAP8[$57>>0] = $call$i134135;
    $__nf$3 = $incdec$ptr107;
   }
   $62 = HEAP32[$__oe>>2]|0;
   $vtable$i105 = HEAP32[$call$i>>2]|0;
   $vfn$i106 = ((($vtable$i105)) + 32|0);
   $63 = HEAP32[$vfn$i106>>2]|0;
   __THREW__ = 0;
   (invoke_iiiii($63|0,($call$i|0),($__nf$3|0),($__ne|0),($62|0))|0);
   $64 = __THREW__; __THREW__ = 0;
   $65 = $64&1;
   if (!($65)) {
    $sub$ptr$rhs$cast119 = $__nf$3;
    $sub$ptr$sub120 = (($sub$ptr$lhs$cast) - ($sub$ptr$rhs$cast119))|0;
    $66 = HEAP32[$__oe>>2]|0;
    $add$ptr121 = (($66) + ($sub$ptr$sub120)|0);
    HEAP32[$__oe>>2] = $add$ptr121;
    $cmp122 = ($__np|0)==($__ne|0);
    $sub$ptr$lhs$cast125 = $__np;
    $sub$ptr$sub127 = (($sub$ptr$lhs$cast125) - ($sub$ptr$rhs$cast126))|0;
    $add$ptr128 = (($__ob) + ($sub$ptr$sub127)|0);
    $storemerge = $cmp122 ? $add$ptr121 : $add$ptr128;
    HEAP32[$__op>>2] = $storemerge;
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grouping);
    STACKTOP = sp;return;
   }
  }
 } while(0);
 $67 = ___cxa_find_matching_catch_2()|0;
 $68 = tempRet0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grouping);
 ___resumeException($67|0);
 // unreachable;
}
function __ZNSt3__214__num_put_base12__format_intEPcPKcbj($__fmtp,$__len,$__signd,$__flags) {
 $__fmtp = $__fmtp|0;
 $__len = $__len|0;
 $__signd = $__signd|0;
 $__flags = $__flags|0;
 var $$sink = 0, $$sink$sink = 0, $$sink1 = 0, $0 = 0, $__fmtp$addr$0 = 0, $__fmtp$addr$1 = 0, $__len$addr$0 = 0, $and = 0, $and1 = 0, $and14 = 0, $and9 = 0, $incdec$ptr = 0, $incdec$ptr4 = 0, $incdec$ptr7 = 0, $incdec$ptr8 = 0, $tobool = 0, $tobool15 = 0, $tobool2 = 0, $tobool6 = 0, $trunc = 0;
 var $trunc$clear = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $and = $__flags & 2048;
 $tobool = ($and|0)==(0);
 if ($tobool) {
  $__fmtp$addr$0 = $__fmtp;
 } else {
  $incdec$ptr = ((($__fmtp)) + 1|0);
  HEAP8[$__fmtp>>0] = 43;
  $__fmtp$addr$0 = $incdec$ptr;
 }
 $and1 = $__flags & 512;
 $tobool2 = ($and1|0)==(0);
 if ($tobool2) {
  $__fmtp$addr$1 = $__fmtp$addr$0;$__len$addr$0 = $__len;
 } else {
  $incdec$ptr4 = ((($__fmtp$addr$0)) + 1|0);
  HEAP8[$__fmtp$addr$0>>0] = 35;
  $__fmtp$addr$1 = $incdec$ptr4;$__len$addr$0 = $__len;
 }
 while(1) {
  $0 = HEAP8[$__len$addr$0>>0]|0;
  $tobool6 = ($0<<24>>24)==(0);
  if ($tobool6) {
   break;
  }
  $incdec$ptr7 = ((($__len$addr$0)) + 1|0);
  $incdec$ptr8 = ((($__fmtp$addr$1)) + 1|0);
  HEAP8[$__fmtp$addr$1>>0] = $0;
  $__fmtp$addr$1 = $incdec$ptr8;$__len$addr$0 = $incdec$ptr7;
 }
 $and9 = $__flags & 74;
 $trunc = $and9&255;
 $trunc$clear = $trunc & 127;
 switch ($trunc$clear<<24>>24) {
 case 64:  {
  $$sink$sink = 111;
  break;
 }
 case 8:  {
  $and14 = $__flags & 16384;
  $tobool15 = ($and14|0)!=(0);
  $$sink = $tobool15 ? 88 : 120;
  $$sink$sink = $$sink;
  break;
 }
 default: {
  $$sink1 = $__signd ? 100 : 117;
  $$sink$sink = $$sink1;
 }
 }
 HEAP8[$__fmtp$addr$1>>0] = $$sink$sink;
 return;
}
function __ZNSt3__29__num_putIcE21__widen_and_group_intEPcS2_S2_S2_RS2_S3_RKNS_6localeE($__nb,$__np,$__ne,$__ob,$__op,$__oe,$__loc) {
 $__nb = $__nb|0;
 $__np = $__np|0;
 $__ne = $__ne|0;
 $__ob = $__ob|0;
 $__op = $__op|0;
 $__oe = $__oe|0;
 $__loc = $__loc|0;
 var $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__dc$0 = 0, $__dc$1 = 0, $__dg$0 = 0, $__dg$1 = 0, $__first$addr$0$i$i = 0, $__first$addr$0$i$i103 = 0, $__grouping = 0, $__last$addr$0$i$i = 0, $__last$addr$0$i$i104 = 0, $__nf$0 = 0, $__nf$1 = 0, $__p$0 = 0, $__size_$i$i$i = 0, $__size_$i3$i$i = 0, $add$ptr = 0;
 var $add$ptr$i100 = 0, $add$ptr64 = 0, $add$ptr77 = 0, $arrayidx18 = 0, $call$i = 0, $call$i113114 = 0, $call$i62 = 0, $call$i6566 = 0, $call$i7374 = 0, $call$i7879 = 0, $call$i8384 = 0, $cmp$i = 0, $cmp$i$i = 0, $cmp$i$i102 = 0, $cmp1$i$i = 0, $cmp1$i$i106 = 0, $cmp14 = 0, $cmp16 = 0, $cmp38 = 0, $cmp43 = 0;
 var $cmp48 = 0, $cmp52 = 0, $cmp71 = 0, $cond$i = 0, $cond$i$i = 0, $cond$i$i99 = 0, $conv$i$i = 0, $conv$i$i$i = 0, $conv47 = 0, $inc = 0, $inc$__dg$0 = 0, $inc59 = 0, $incdec$ptr = 0, $incdec$ptr$i$i = 0, $incdec$ptr$i$i105 = 0, $incdec$ptr10 = 0, $incdec$ptr2$i$i = 0, $incdec$ptr2$i$i108 = 0, $incdec$ptr29 = 0, $incdec$ptr30 = 0;
 var $incdec$ptr33 = 0, $incdec$ptr50 = 0, $incdec$ptr58 = 0, $incdec$ptr60 = 0, $or$cond = 0, $storemerge = 0, $sub = 0, $sub$ptr$lhs$cast = 0, $sub$ptr$lhs$cast61 = 0, $sub$ptr$lhs$cast74 = 0, $sub$ptr$rhs$cast = 0, $sub$ptr$rhs$cast12 = 0, $sub$ptr$sub = 0, $sub$ptr$sub13 = 0, $sub$ptr$sub63 = 0, $sub$ptr$sub76 = 0, $tobool$i$i = 0, $tobool$i$i$i = 0, $tobool$i$i$i94 = 0, $vfn$i = 0;
 var $vfn$i112 = 0, $vfn$i64 = 0, $vfn$i68 = 0, $vfn$i72 = 0, $vfn$i77 = 0, $vfn$i82 = 0, $vtable$i = 0, $vtable$i111 = 0, $vtable$i63 = 0, $vtable$i67 = 0, $vtable$i71 = 0, $vtable$i76 = 0, $vtable$i81 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $__grouping = sp;
 $call$i = (__ZNKSt3__26locale9use_facetERNS0_2idE($__loc,20096)|0);
 $call$i62 = (__ZNKSt3__26locale9use_facetERNS0_2idE($__loc,20112)|0);
 $vtable$i = HEAP32[$call$i62>>2]|0;
 $vfn$i = ((($vtable$i)) + 20|0);
 $0 = HEAP32[$vfn$i>>2]|0;
 FUNCTION_TABLE_vii[$0 & 1023]($__grouping,$call$i62);
 $__size_$i$i$i = ((($__grouping)) + 11|0);
 $1 = HEAP8[$__size_$i$i$i>>0]|0;
 $tobool$i$i$i = ($1<<24>>24)<(0);
 $__size_$i3$i$i = ((($__grouping)) + 4|0);
 $2 = HEAP32[$__size_$i3$i$i>>2]|0;
 $conv$i$i$i = $1&255;
 $cond$i$i = $tobool$i$i$i ? $2 : $conv$i$i$i;
 $cmp$i = ($cond$i$i|0)==(0);
 $sub$ptr$lhs$cast = $__ne;
 $sub$ptr$rhs$cast = $__nb;
 L1: do {
  if ($cmp$i) {
   $vtable$i67 = HEAP32[$call$i>>2]|0;
   $vfn$i68 = ((($vtable$i67)) + 32|0);
   $3 = HEAP32[$vfn$i68>>2]|0;
   __THREW__ = 0;
   (invoke_iiiii($3|0,($call$i|0),($__nb|0),($__ne|0),($__ob|0))|0);
   $4 = __THREW__; __THREW__ = 0;
   $5 = $4&1;
   if ($5) {
    label = 28;
   } else {
    $sub$ptr$sub = (($sub$ptr$lhs$cast) - ($sub$ptr$rhs$cast))|0;
    $add$ptr = (($__ob) + ($sub$ptr$sub)|0);
    HEAP32[$__oe>>2] = $add$ptr;
    $41 = $add$ptr;
    label = 27;
   }
  } else {
   HEAP32[$__oe>>2] = $__ob;
   $6 = HEAP8[$__nb>>0]|0;
   switch ($6<<24>>24) {
   case 43: case 45:  {
    $vtable$i71 = HEAP32[$call$i>>2]|0;
    $vfn$i72 = ((($vtable$i71)) + 28|0);
    $7 = HEAP32[$vfn$i72>>2]|0;
    __THREW__ = 0;
    $call$i7374 = (invoke_iii($7|0,($call$i|0),($6|0))|0);
    $8 = __THREW__; __THREW__ = 0;
    $9 = $8&1;
    if ($9) {
     label = 28;
     break L1;
    }
    $incdec$ptr = ((($__nb)) + 1|0);
    $10 = HEAP32[$__oe>>2]|0;
    $incdec$ptr10 = ((($10)) + 1|0);
    HEAP32[$__oe>>2] = $incdec$ptr10;
    HEAP8[$10>>0] = $call$i7374;
    $__nf$0 = $incdec$ptr;
    break;
   }
   default: {
    $__nf$0 = $__nb;
   }
   }
   $sub$ptr$rhs$cast12 = $__nf$0;
   $sub$ptr$sub13 = (($sub$ptr$lhs$cast) - ($sub$ptr$rhs$cast12))|0;
   $cmp14 = ($sub$ptr$sub13|0)>(1);
   L9: do {
    if ($cmp14) {
     $11 = HEAP8[$__nf$0>>0]|0;
     $cmp16 = ($11<<24>>24)==(48);
     if ($cmp16) {
      $arrayidx18 = ((($__nf$0)) + 1|0);
      $12 = HEAP8[$arrayidx18>>0]|0;
      switch ($12<<24>>24) {
      case 88: case 120:  {
       break;
      }
      default: {
       $__nf$1 = $__nf$0;
       break L9;
      }
      }
      $vtable$i76 = HEAP32[$call$i>>2]|0;
      $vfn$i77 = ((($vtable$i76)) + 28|0);
      $13 = HEAP32[$vfn$i77>>2]|0;
      __THREW__ = 0;
      $call$i7879 = (invoke_iii($13|0,($call$i|0),48)|0);
      $14 = __THREW__; __THREW__ = 0;
      $15 = $14&1;
      if ($15) {
       label = 28;
       break L1;
      }
      $16 = HEAP32[$__oe>>2]|0;
      $incdec$ptr29 = ((($16)) + 1|0);
      HEAP32[$__oe>>2] = $incdec$ptr29;
      HEAP8[$16>>0] = $call$i7879;
      $17 = HEAP8[$arrayidx18>>0]|0;
      $vtable$i81 = HEAP32[$call$i>>2]|0;
      $vfn$i82 = ((($vtable$i81)) + 28|0);
      $18 = HEAP32[$vfn$i82>>2]|0;
      __THREW__ = 0;
      $call$i8384 = (invoke_iii($18|0,($call$i|0),($17|0))|0);
      $19 = __THREW__; __THREW__ = 0;
      $20 = $19&1;
      if ($20) {
       label = 28;
       break L1;
      }
      $incdec$ptr30 = ((($__nf$0)) + 2|0);
      $21 = HEAP32[$__oe>>2]|0;
      $incdec$ptr33 = ((($21)) + 1|0);
      HEAP32[$__oe>>2] = $incdec$ptr33;
      HEAP8[$21>>0] = $call$i8384;
      $__nf$1 = $incdec$ptr30;
     } else {
      $__nf$1 = $__nf$0;
     }
    } else {
     $__nf$1 = $__nf$0;
    }
   } while(0);
   $cmp$i$i = ($__nf$1|0)==($__ne|0);
   L16: do {
    if (!($cmp$i$i)) {
     $__first$addr$0$i$i = $__nf$1;$__last$addr$0$i$i = $__ne;
     while(1) {
      $incdec$ptr$i$i = ((($__last$addr$0$i$i)) + -1|0);
      $cmp1$i$i = ($__first$addr$0$i$i>>>0)<($incdec$ptr$i$i>>>0);
      if (!($cmp1$i$i)) {
       break L16;
      }
      $22 = HEAP8[$__first$addr$0$i$i>>0]|0;
      $23 = HEAP8[$incdec$ptr$i$i>>0]|0;
      HEAP8[$__first$addr$0$i$i>>0] = $23;
      HEAP8[$incdec$ptr$i$i>>0] = $22;
      $incdec$ptr2$i$i = ((($__first$addr$0$i$i)) + 1|0);
      $__first$addr$0$i$i = $incdec$ptr2$i$i;$__last$addr$0$i$i = $incdec$ptr$i$i;
     }
    }
   } while(0);
   $vtable$i111 = HEAP32[$call$i62>>2]|0;
   $vfn$i112 = ((($vtable$i111)) + 16|0);
   $24 = HEAP32[$vfn$i112>>2]|0;
   __THREW__ = 0;
   $call$i113114 = (invoke_ii($24|0,($call$i62|0))|0);
   $25 = __THREW__; __THREW__ = 0;
   $26 = $25&1;
   if ($26) {
    label = 28;
   } else {
    $__dc$0 = 0;$__dg$0 = 0;$__p$0 = $__nf$1;
    while(1) {
     $cmp38 = ($__p$0>>>0)<($__ne>>>0);
     if (!($cmp38)) {
      break;
     }
     $30 = HEAP8[$__size_$i$i$i>>0]|0;
     $tobool$i$i$i94 = ($30<<24>>24)<(0);
     $31 = HEAP32[$__grouping>>2]|0;
     $cond$i$i99 = $tobool$i$i$i94 ? $31 : $__grouping;
     $add$ptr$i100 = (($cond$i$i99) + ($__dg$0)|0);
     $32 = HEAP8[$add$ptr$i100>>0]|0;
     $cmp43 = ($32<<24>>24)!=(0);
     $conv47 = $32 << 24 >> 24;
     $cmp48 = ($__dc$0|0)==($conv47|0);
     $or$cond = $cmp43 & $cmp48;
     if ($or$cond) {
      $33 = HEAP32[$__oe>>2]|0;
      $incdec$ptr50 = ((($33)) + 1|0);
      HEAP32[$__oe>>2] = $incdec$ptr50;
      HEAP8[$33>>0] = $call$i113114;
      $34 = HEAP8[$__size_$i$i$i>>0]|0;
      $tobool$i$i = ($34<<24>>24)<(0);
      $35 = HEAP32[$__size_$i3$i$i>>2]|0;
      $conv$i$i = $34&255;
      $cond$i = $tobool$i$i ? $35 : $conv$i$i;
      $sub = (($cond$i) + -1)|0;
      $cmp52 = ($__dg$0>>>0)<($sub>>>0);
      $inc = $cmp52&1;
      $inc$__dg$0 = (($inc) + ($__dg$0))|0;
      $__dc$1 = 0;$__dg$1 = $inc$__dg$0;
     } else {
      $__dc$1 = $__dc$0;$__dg$1 = $__dg$0;
     }
     $36 = HEAP8[$__p$0>>0]|0;
     $vtable$i63 = HEAP32[$call$i>>2]|0;
     $vfn$i64 = ((($vtable$i63)) + 28|0);
     $37 = HEAP32[$vfn$i64>>2]|0;
     __THREW__ = 0;
     $call$i6566 = (invoke_iii($37|0,($call$i|0),($36|0))|0);
     $38 = __THREW__; __THREW__ = 0;
     $39 = $38&1;
     if ($39) {
      label = 28;
      break L1;
     }
     $40 = HEAP32[$__oe>>2]|0;
     $incdec$ptr58 = ((($40)) + 1|0);
     HEAP32[$__oe>>2] = $incdec$ptr58;
     HEAP8[$40>>0] = $call$i6566;
     $inc59 = (($__dc$1) + 1)|0;
     $incdec$ptr60 = ((($__p$0)) + 1|0);
     $__dc$0 = $inc59;$__dg$0 = $__dg$1;$__p$0 = $incdec$ptr60;
    }
    $sub$ptr$lhs$cast61 = $__nf$1;
    $sub$ptr$sub63 = (($sub$ptr$lhs$cast61) - ($sub$ptr$rhs$cast))|0;
    $add$ptr64 = (($__ob) + ($sub$ptr$sub63)|0);
    $27 = HEAP32[$__oe>>2]|0;
    $cmp$i$i102 = ($add$ptr64|0)==($27|0);
    if ($cmp$i$i102) {
     $41 = $add$ptr64;
     label = 27;
    } else {
     $__first$addr$0$i$i103 = $add$ptr64;$__last$addr$0$i$i104 = $27;
     while(1) {
      $incdec$ptr$i$i105 = ((($__last$addr$0$i$i104)) + -1|0);
      $cmp1$i$i106 = ($__first$addr$0$i$i103>>>0)<($incdec$ptr$i$i105>>>0);
      if (!($cmp1$i$i106)) {
       break;
      }
      $28 = HEAP8[$__first$addr$0$i$i103>>0]|0;
      $29 = HEAP8[$incdec$ptr$i$i105>>0]|0;
      HEAP8[$__first$addr$0$i$i103>>0] = $29;
      HEAP8[$incdec$ptr$i$i105>>0] = $28;
      $incdec$ptr2$i$i108 = ((($__first$addr$0$i$i103)) + 1|0);
      $__first$addr$0$i$i103 = $incdec$ptr2$i$i108;$__last$addr$0$i$i104 = $incdec$ptr$i$i105;
     }
     $$pre = HEAP32[$__oe>>2]|0;
     $41 = $$pre;
     label = 27;
    }
   }
  }
 } while(0);
 if ((label|0) == 27) {
  $cmp71 = ($__np|0)==($__ne|0);
  $sub$ptr$lhs$cast74 = $__np;
  $sub$ptr$sub76 = (($sub$ptr$lhs$cast74) - ($sub$ptr$rhs$cast))|0;
  $add$ptr77 = (($__ob) + ($sub$ptr$sub76)|0);
  $storemerge = $cmp71 ? $41 : $add$ptr77;
  HEAP32[$__op>>2] = $storemerge;
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grouping);
  STACKTOP = sp;return;
 }
 else if ((label|0) == 28) {
  $42 = ___cxa_find_matching_catch_2()|0;
  $43 = tempRet0;
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grouping);
  ___resumeException($42|0);
  // unreachable;
 }
}
function __ZNSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__26locale5facetD2Ev($this);
 return;
}
function __ZNSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__26locale5facetD2Ev($this);
 __ZdlPv($this);
 return;
}
function __ZNKSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwb($this,$__s,$__iob,$__fl,$__v) {
 $this = $this|0;
 $__s = $__s|0;
 $__iob = $__iob|0;
 $__fl = $__fl|0;
 $__v = $__v|0;
 var $$pre = 0, $$pre20 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__eout_$i$i = 0, $__fmtflags_$i = 0, $__i$sroa$0$0 = 0, $__i$sroa$0$0$ph = 0, $__nm = 0, $__nout_$i$i = 0, $__size_$i$i$i = 0, $__size_$i2$i$i = 0, $add$ptr$i = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $and = 0, $call$i$i = 0, $call$i7 = 0;
 var $call2 = 0, $call2$i$i6 = 0, $call3$i = 0, $call4$i = 0, $call4$i$i = 0, $cmp = 0, $cmp$i$i = 0, $cond$i5$i = 0, $cond$i6$i = 0, $conv = 0, $conv$i$i$i = 0, $ehselector$slot$0 = 0, $exn$slot$0 = 0, $incdec$ptr$i = 0, $incdec$ptr$i$i = 0, $lnot$i = 0, $ref$tmp = 0, $retval$0$i$i = 0, $retval$sroa$0$0 = 0, $retval$sroa$0$0$copyload = 0;
 var $tobool$i = 0, $tobool$i$i$i = 0, $tobool$i$i$i11 = 0, $vfn = 0, $vfn$i = 0, $vfn$i$i = 0, $vfn$i9 = 0, $vtable = 0, $vtable$i = 0, $vtable$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $agg$tmp$byval_copy = sp + 20|0;
 $agg$tmp = sp + 16|0;
 $ref$tmp = sp + 12|0;
 $__nm = sp;
 $__fmtflags_$i = ((($__iob)) + 4|0);
 $0 = HEAP32[$__fmtflags_$i>>2]|0;
 $and = $0 & 1;
 $cmp = ($and|0)==(0);
 L1: do {
  if ($cmp) {
   $vtable = HEAP32[$this>>2]|0;
   $vfn = ((($vtable)) + 24|0);
   $1 = HEAP32[$vfn>>2]|0;
   $2 = HEAP32[$__s>>2]|0;
   HEAP32[$agg$tmp>>2] = $2;
   $conv = $__v&1;
   ;HEAP32[$agg$tmp$byval_copy>>2]=HEAP32[$agg$tmp>>2]|0;
   $call2 = (FUNCTION_TABLE_iiiiii[$1 & 511]($this,$agg$tmp$byval_copy,$__iob,$__fl,$conv)|0);
   $retval$sroa$0$0 = $call2;
  } else {
   __ZNKSt3__28ios_base6getlocEv($ref$tmp,$__iob);
   __THREW__ = 0;
   $call$i7 = (invoke_iii(380,($ref$tmp|0),(20136|0))|0);
   $3 = __THREW__; __THREW__ = 0;
   $4 = $3&1;
   do {
    if ($4) {
     $13 = ___cxa_find_matching_catch_2()|0;
     $14 = tempRet0;
     __ZNSt3__26localeD2Ev($ref$tmp);
     $ehselector$slot$0 = $14;$exn$slot$0 = $13;
    } else {
     __ZNSt3__26localeD2Ev($ref$tmp);
     $vtable$i = HEAP32[$call$i7>>2]|0;
     if ($__v) {
      $vfn$i = ((($vtable$i)) + 24|0);
      $5 = HEAP32[$vfn$i>>2]|0;
      FUNCTION_TABLE_vii[$5 & 1023]($__nm,$call$i7);
     } else {
      $vfn$i9 = ((($vtable$i)) + 28|0);
      $6 = HEAP32[$vfn$i9>>2]|0;
      FUNCTION_TABLE_vii[$6 & 1023]($__nm,$call$i7);
     }
     $7 = ((($__nm)) + 8|0);
     $__size_$i$i$i = ((($7)) + 3|0);
     $8 = HEAP8[$__size_$i$i$i>>0]|0;
     $tobool$i$i$i = ($8<<24>>24)<(0);
     $9 = HEAP32[$__nm>>2]|0;
     $__i$sroa$0$0$ph = $tobool$i$i$i ? $9 : $__nm;
     $__size_$i2$i$i = ((($__nm)) + 4|0);
     $10 = $8;$12 = $9;$__i$sroa$0$0 = $__i$sroa$0$0$ph;
     while(1) {
      $tobool$i$i$i11 = ($10<<24>>24)<(0);
      $11 = HEAP32[$__size_$i2$i$i>>2]|0;
      $conv$i$i$i = $10&255;
      $cond$i6$i = $tobool$i$i$i11 ? $12 : $__nm;
      $cond$i5$i = $tobool$i$i$i11 ? $11 : $conv$i$i$i;
      $add$ptr$i = (($cond$i6$i) + ($cond$i5$i<<2)|0);
      $lnot$i = ($__i$sroa$0$0|0)==($add$ptr$i|0);
      if ($lnot$i) {
       label = 9;
       break;
      }
      $15 = HEAP32[$__i$sroa$0$0>>2]|0;
      $16 = HEAP32[$__s>>2]|0;
      $tobool$i = ($16|0)==(0|0);
      if (!($tobool$i)) {
       $__nout_$i$i = ((($16)) + 24|0);
       $17 = HEAP32[$__nout_$i$i>>2]|0;
       $__eout_$i$i = ((($16)) + 28|0);
       $18 = HEAP32[$__eout_$i$i>>2]|0;
       $cmp$i$i = ($17|0)==($18|0);
       if ($cmp$i$i) {
        $vtable$i$i = HEAP32[$16>>2]|0;
        $vfn$i$i = ((($vtable$i$i)) + 52|0);
        $19 = HEAP32[$vfn$i$i>>2]|0;
        $call$i$i = (__ZNSt3__211char_traitsIwE11to_int_typeEw($15)|0);
        __THREW__ = 0;
        $call2$i$i6 = (invoke_iii($19|0,($16|0),($call$i$i|0))|0);
        $20 = __THREW__; __THREW__ = 0;
        $21 = $20&1;
        if ($21) {
         label = 18;
         break;
        } else {
         $retval$0$i$i = $call2$i$i6;
        }
       } else {
        $incdec$ptr$i$i = ((($17)) + 4|0);
        HEAP32[$__nout_$i$i>>2] = $incdec$ptr$i$i;
        HEAP32[$17>>2] = $15;
        $call4$i$i = (__ZNSt3__211char_traitsIwE11to_int_typeEw($15)|0);
        $retval$0$i$i = $call4$i$i;
       }
       $call3$i = (__ZNSt3__211char_traitsIwE3eofEv()|0);
       $call4$i = (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($retval$0$i$i,$call3$i)|0);
       if ($call4$i) {
        HEAP32[$__s>>2] = 0;
       }
      }
      $incdec$ptr$i = ((($__i$sroa$0$0)) + 4|0);
      $$pre = HEAP8[$__size_$i$i$i>>0]|0;
      $$pre20 = HEAP32[$__nm>>2]|0;
      $10 = $$pre;$12 = $$pre20;$__i$sroa$0$0 = $incdec$ptr$i;
     }
     if ((label|0) == 9) {
      $retval$sroa$0$0$copyload = HEAP32[$__s>>2]|0;
      __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($__nm);
      $retval$sroa$0$0 = $retval$sroa$0$0$copyload;
      break L1;
     }
     else if ((label|0) == 18) {
      $22 = ___cxa_find_matching_catch_2()|0;
      $23 = tempRet0;
      __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($__nm);
      $ehselector$slot$0 = $23;$exn$slot$0 = $22;
      break;
     }
    }
   } while(0);
   ___resumeException($exn$slot$0|0);
   // unreachable;
  }
 } while(0);
 STACKTOP = sp;return ($retval$sroa$0$0|0);
}
function __ZNKSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwl($this,$__s,$__iob,$__fl,$__v) {
 $this = $this|0;
 $__s = $__s|0;
 $__iob = $__iob|0;
 $__fl = $__fl|0;
 $__v = $__v|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $__fmt = 0, $__fmtflags_$i = 0, $__nar = 0, $__o = 0, $__oe = 0, $__op = 0, $add$ptr = 0, $add$ptr7 = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $call13 = 0, $call3 = 0;
 var $call5 = 0, $call9 = 0, $ref$tmp = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(144|0);
 $agg$tmp$byval_copy = sp + 112|0;
 $vararg_buffer = sp;
 $__fmt = sp + 130|0;
 $__nar = sp + 116|0;
 $__o = sp + 20|0;
 $__op = sp + 16|0;
 $__oe = sp + 12|0;
 $ref$tmp = sp + 8|0;
 $agg$tmp = sp + 4|0;
 ;HEAP8[$__fmt>>0]=HEAP8[15944>>0]|0;HEAP8[$__fmt+1>>0]=HEAP8[15944+1>>0]|0;HEAP8[$__fmt+2>>0]=HEAP8[15944+2>>0]|0;HEAP8[$__fmt+3>>0]=HEAP8[15944+3>>0]|0;HEAP8[$__fmt+4>>0]=HEAP8[15944+4>>0]|0;HEAP8[$__fmt+5>>0]=HEAP8[15944+5>>0]|0;
 $add$ptr = ((($__fmt)) + 1|0);
 $__fmtflags_$i = ((($__iob)) + 4|0);
 $0 = HEAP32[$__fmtflags_$i>>2]|0;
 __ZNSt3__214__num_put_base12__format_intEPcPKcbj($add$ptr,15950,1,$0);
 $call3 = (__ZNSt3__26__clocEv()|0);
 HEAP32[$vararg_buffer>>2] = $__v;
 $call5 = (__ZNSt3__219__libcpp_snprintf_lEPcjP15__locale_structPKcz($__nar,13,$call3,$__fmt,$vararg_buffer)|0);
 $add$ptr7 = (($__nar) + ($call5)|0);
 $call9 = (__ZNSt3__214__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE($__nar,$add$ptr7,$__iob)|0);
 __ZNKSt3__28ios_base6getlocEv($ref$tmp,$__iob);
 __THREW__ = 0;
 invoke_viiiiiii(419,($__nar|0),($call9|0),($add$ptr7|0),($__o|0),($__op|0),($__oe|0),($ref$tmp|0));
 $1 = __THREW__; __THREW__ = 0;
 $2 = $1&1;
 if ($2) {
  $6 = ___cxa_find_matching_catch_2()|0;
  $7 = tempRet0;
  __ZNSt3__26localeD2Ev($ref$tmp);
  ___resumeException($6|0);
  // unreachable;
 } else {
  __ZNSt3__26localeD2Ev($ref$tmp);
  $3 = HEAP32[$__s>>2]|0;
  HEAP32[$agg$tmp>>2] = $3;
  $4 = HEAP32[$__op>>2]|0;
  $5 = HEAP32[$__oe>>2]|0;
  ;HEAP32[$agg$tmp$byval_copy>>2]=HEAP32[$agg$tmp>>2]|0;
  $call13 = (__ZNSt3__216__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg$tmp$byval_copy,$__o,$4,$5,$__iob,$__fl)|0);
  STACKTOP = sp;return ($call13|0);
 }
 return (0)|0;
}
function __ZNKSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwx($this,$__s,$__iob,$__fl,$0,$1) {
 $this = $this|0;
 $__s = $__s|0;
 $__iob = $__iob|0;
 $__fl = $__fl|0;
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__fmt = 0, $__fmtflags_$i = 0, $__nar = 0, $__o = 0;
 var $__oe = 0, $__op = 0, $add$ptr = 0, $add$ptr7 = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $call13 = 0, $call3 = 0, $call5 = 0, $call9 = 0, $ref$tmp = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 240|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(240|0);
 $agg$tmp$byval_copy = sp + 204|0;
 $vararg_buffer = sp + 8|0;
 $__fmt = sp;
 $__nar = sp + 208|0;
 $__o = sp + 32|0;
 $__op = sp + 28|0;
 $__oe = sp + 24|0;
 $ref$tmp = sp + 20|0;
 $agg$tmp = sp + 16|0;
 $2 = $__fmt;
 $3 = $2;
 HEAP32[$3>>2] = 37;
 $4 = (($2) + 4)|0;
 $5 = $4;
 HEAP32[$5>>2] = 0;
 $add$ptr = ((($__fmt)) + 1|0);
 $__fmtflags_$i = ((($__iob)) + 4|0);
 $6 = HEAP32[$__fmtflags_$i>>2]|0;
 __ZNSt3__214__num_put_base12__format_intEPcPKcbj($add$ptr,15941,1,$6);
 $call3 = (__ZNSt3__26__clocEv()|0);
 $7 = $vararg_buffer;
 $8 = $7;
 HEAP32[$8>>2] = $0;
 $9 = (($7) + 4)|0;
 $10 = $9;
 HEAP32[$10>>2] = $1;
 $call5 = (__ZNSt3__219__libcpp_snprintf_lEPcjP15__locale_structPKcz($__nar,23,$call3,$__fmt,$vararg_buffer)|0);
 $add$ptr7 = (($__nar) + ($call5)|0);
 $call9 = (__ZNSt3__214__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE($__nar,$add$ptr7,$__iob)|0);
 __ZNKSt3__28ios_base6getlocEv($ref$tmp,$__iob);
 __THREW__ = 0;
 invoke_viiiiiii(419,($__nar|0),($call9|0),($add$ptr7|0),($__o|0),($__op|0),($__oe|0),($ref$tmp|0));
 $11 = __THREW__; __THREW__ = 0;
 $12 = $11&1;
 if ($12) {
  $16 = ___cxa_find_matching_catch_2()|0;
  $17 = tempRet0;
  __ZNSt3__26localeD2Ev($ref$tmp);
  ___resumeException($16|0);
  // unreachable;
 } else {
  __ZNSt3__26localeD2Ev($ref$tmp);
  $13 = HEAP32[$__s>>2]|0;
  HEAP32[$agg$tmp>>2] = $13;
  $14 = HEAP32[$__op>>2]|0;
  $15 = HEAP32[$__oe>>2]|0;
  ;HEAP32[$agg$tmp$byval_copy>>2]=HEAP32[$agg$tmp>>2]|0;
  $call13 = (__ZNSt3__216__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg$tmp$byval_copy,$__o,$14,$15,$__iob,$__fl)|0);
  STACKTOP = sp;return ($call13|0);
 }
 return (0)|0;
}
function __ZNKSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwm($this,$__s,$__iob,$__fl,$__v) {
 $this = $this|0;
 $__s = $__s|0;
 $__iob = $__iob|0;
 $__fl = $__fl|0;
 $__v = $__v|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $__fmt = 0, $__fmtflags_$i = 0, $__nar = 0, $__o = 0, $__oe = 0, $__op = 0, $add$ptr = 0, $add$ptr7 = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $call13 = 0, $call3 = 0;
 var $call5 = 0, $call9 = 0, $ref$tmp = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(128|0);
 $agg$tmp$byval_copy = sp + 104|0;
 $vararg_buffer = sp;
 $__fmt = sp + 120|0;
 $__nar = sp + 108|0;
 $__o = sp + 20|0;
 $__op = sp + 16|0;
 $__oe = sp + 12|0;
 $ref$tmp = sp + 8|0;
 $agg$tmp = sp + 4|0;
 ;HEAP8[$__fmt>>0]=HEAP8[15944>>0]|0;HEAP8[$__fmt+1>>0]=HEAP8[15944+1>>0]|0;HEAP8[$__fmt+2>>0]=HEAP8[15944+2>>0]|0;HEAP8[$__fmt+3>>0]=HEAP8[15944+3>>0]|0;HEAP8[$__fmt+4>>0]=HEAP8[15944+4>>0]|0;HEAP8[$__fmt+5>>0]=HEAP8[15944+5>>0]|0;
 $add$ptr = ((($__fmt)) + 1|0);
 $__fmtflags_$i = ((($__iob)) + 4|0);
 $0 = HEAP32[$__fmtflags_$i>>2]|0;
 __ZNSt3__214__num_put_base12__format_intEPcPKcbj($add$ptr,15950,0,$0);
 $call3 = (__ZNSt3__26__clocEv()|0);
 HEAP32[$vararg_buffer>>2] = $__v;
 $call5 = (__ZNSt3__219__libcpp_snprintf_lEPcjP15__locale_structPKcz($__nar,12,$call3,$__fmt,$vararg_buffer)|0);
 $add$ptr7 = (($__nar) + ($call5)|0);
 $call9 = (__ZNSt3__214__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE($__nar,$add$ptr7,$__iob)|0);
 __ZNKSt3__28ios_base6getlocEv($ref$tmp,$__iob);
 __THREW__ = 0;
 invoke_viiiiiii(419,($__nar|0),($call9|0),($add$ptr7|0),($__o|0),($__op|0),($__oe|0),($ref$tmp|0));
 $1 = __THREW__; __THREW__ = 0;
 $2 = $1&1;
 if ($2) {
  $6 = ___cxa_find_matching_catch_2()|0;
  $7 = tempRet0;
  __ZNSt3__26localeD2Ev($ref$tmp);
  ___resumeException($6|0);
  // unreachable;
 } else {
  __ZNSt3__26localeD2Ev($ref$tmp);
  $3 = HEAP32[$__s>>2]|0;
  HEAP32[$agg$tmp>>2] = $3;
  $4 = HEAP32[$__op>>2]|0;
  $5 = HEAP32[$__oe>>2]|0;
  ;HEAP32[$agg$tmp$byval_copy>>2]=HEAP32[$agg$tmp>>2]|0;
  $call13 = (__ZNSt3__216__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg$tmp$byval_copy,$__o,$4,$5,$__iob,$__fl)|0);
  STACKTOP = sp;return ($call13|0);
 }
 return (0)|0;
}
function __ZNKSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwy($this,$__s,$__iob,$__fl,$0,$1) {
 $this = $this|0;
 $__s = $__s|0;
 $__iob = $__iob|0;
 $__fl = $__fl|0;
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__fmt = 0, $__fmtflags_$i = 0, $__nar = 0, $__o = 0;
 var $__oe = 0, $__op = 0, $add$ptr = 0, $add$ptr7 = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $call13 = 0, $call3 = 0, $call5 = 0, $call9 = 0, $ref$tmp = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 240|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(240|0);
 $agg$tmp$byval_copy = sp + 204|0;
 $vararg_buffer = sp + 8|0;
 $__fmt = sp;
 $__nar = sp + 208|0;
 $__o = sp + 32|0;
 $__op = sp + 28|0;
 $__oe = sp + 24|0;
 $ref$tmp = sp + 20|0;
 $agg$tmp = sp + 16|0;
 $2 = $__fmt;
 $3 = $2;
 HEAP32[$3>>2] = 37;
 $4 = (($2) + 4)|0;
 $5 = $4;
 HEAP32[$5>>2] = 0;
 $add$ptr = ((($__fmt)) + 1|0);
 $__fmtflags_$i = ((($__iob)) + 4|0);
 $6 = HEAP32[$__fmtflags_$i>>2]|0;
 __ZNSt3__214__num_put_base12__format_intEPcPKcbj($add$ptr,15941,0,$6);
 $call3 = (__ZNSt3__26__clocEv()|0);
 $7 = $vararg_buffer;
 $8 = $7;
 HEAP32[$8>>2] = $0;
 $9 = (($7) + 4)|0;
 $10 = $9;
 HEAP32[$10>>2] = $1;
 $call5 = (__ZNSt3__219__libcpp_snprintf_lEPcjP15__locale_structPKcz($__nar,23,$call3,$__fmt,$vararg_buffer)|0);
 $add$ptr7 = (($__nar) + ($call5)|0);
 $call9 = (__ZNSt3__214__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE($__nar,$add$ptr7,$__iob)|0);
 __ZNKSt3__28ios_base6getlocEv($ref$tmp,$__iob);
 __THREW__ = 0;
 invoke_viiiiiii(419,($__nar|0),($call9|0),($add$ptr7|0),($__o|0),($__op|0),($__oe|0),($ref$tmp|0));
 $11 = __THREW__; __THREW__ = 0;
 $12 = $11&1;
 if ($12) {
  $16 = ___cxa_find_matching_catch_2()|0;
  $17 = tempRet0;
  __ZNSt3__26localeD2Ev($ref$tmp);
  ___resumeException($16|0);
  // unreachable;
 } else {
  __ZNSt3__26localeD2Ev($ref$tmp);
  $13 = HEAP32[$__s>>2]|0;
  HEAP32[$agg$tmp>>2] = $13;
  $14 = HEAP32[$__op>>2]|0;
  $15 = HEAP32[$__oe>>2]|0;
  ;HEAP32[$agg$tmp$byval_copy>>2]=HEAP32[$agg$tmp>>2]|0;
  $call13 = (__ZNSt3__216__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg$tmp$byval_copy,$__o,$14,$15,$__iob,$__fl)|0);
  STACKTOP = sp;return ($call13|0);
 }
 return (0)|0;
}
function __ZNKSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwd($this,$__s,$__iob,$__fl,$__v) {
 $this = $this|0;
 $__s = $__s|0;
 $__iob = $__iob|0;
 $__fl = $__fl|0;
 $__v = +$__v;
 var $$pre = 0, $$pre73 = 0, $$pre74 = 0, $$pre74$pre = 0, $$pre7476 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__fmt = 0, $__fmtflags_$i = 0, $__nar = 0, $__nb = 0, $__nbh$sroa$0$0 = 0, $__nc$0 = 0, $__nc$1 = 0, $__nc$2 = 0;
 var $__o = 0, $__ob$0 = 0, $__obh$sroa$0$0 = 0, $__oe = 0, $__op = 0, $__precision_$i = 0, $__precision_$i35 = 0, $add$ptr = 0, $add$ptr32 = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $call10 = 0, $call14 = 0, $call19 = 0, $call2 = 0, $call22 = 0, $call25 = 0, $call35 = 0, $call4 = 0, $call44 = 0;
 var $call58 = 0, $call7 = 0, $cmp = 0, $cmp27 = 0, $cmp39 = 0, $cmp45 = 0, $ehselector$slot$0 = 0, $ehselector$slot$1 = 0, $ehselector$slot$280 = 0, $ehselector$slot$483 = 0, $exn$slot$0 = 0, $exn$slot$1 = 0, $exn$slot$281 = 0, $exn$slot$484 = 0, $mul41 = 0, $ref$tmp50 = 0, $tobool$i$i = 0, $tobool$i$i31 = 0, $tobool$i$i44 = 0, $tobool$i$i50 = 0;
 var $vararg_buffer = 0, $vararg_buffer2 = 0, $vararg_buffer5 = 0, $vararg_buffer9 = 0, $vararg_ptr1 = 0, $vararg_ptr8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 352|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(352|0);
 $agg$tmp$byval_copy = sp + 304|0;
 $vararg_buffer9 = sp + 48|0;
 $vararg_buffer5 = sp + 32|0;
 $vararg_buffer2 = sp + 24|0;
 $vararg_buffer = sp + 8|0;
 $__fmt = sp;
 $__nar = sp + 308|0;
 $__nb = sp + 300|0;
 $__o = sp + 72|0;
 $__op = sp + 68|0;
 $__oe = sp + 64|0;
 $ref$tmp50 = sp + 60|0;
 $agg$tmp = sp + 56|0;
 $0 = $__fmt;
 $1 = $0;
 HEAP32[$1>>2] = 37;
 $2 = (($0) + 4)|0;
 $3 = $2;
 HEAP32[$3>>2] = 0;
 $add$ptr = ((($__fmt)) + 1|0);
 $__fmtflags_$i = ((($__iob)) + 4|0);
 $4 = HEAP32[$__fmtflags_$i>>2]|0;
 $call2 = (__ZNSt3__214__num_put_base14__format_floatEPcPKcj($add$ptr,23082,$4)|0);
 HEAP32[$__nb>>2] = $__nar;
 $call4 = (__ZNSt3__26__clocEv()|0);
 if ($call2) {
  $__precision_$i = ((($__iob)) + 8|0);
  $5 = HEAP32[$__precision_$i>>2]|0;
  HEAP32[$vararg_buffer>>2] = $5;
  $vararg_ptr1 = ((($vararg_buffer)) + 8|0);
  HEAPF64[$vararg_ptr1>>3] = $__v;
  $call7 = (__ZNSt3__219__libcpp_snprintf_lEPcjP15__locale_structPKcz($__nar,30,$call4,$__fmt,$vararg_buffer)|0);
  $__nc$0 = $call7;
 } else {
  HEAPF64[$vararg_buffer2>>3] = $__v;
  $call10 = (__ZNSt3__219__libcpp_snprintf_lEPcjP15__locale_structPKcz($__nar,30,$call4,$__fmt,$vararg_buffer2)|0);
  $__nc$0 = $call10;
 }
 $cmp = ($__nc$0|0)>(29);
 do {
  if ($cmp) {
   if ($call2) {
    __THREW__ = 0;
    $call14 = (invoke_i(392)|0);
    $6 = __THREW__; __THREW__ = 0;
    $7 = $6&1;
    if (!($7)) {
     $__precision_$i35 = ((($__iob)) + 8|0);
     $8 = HEAP32[$__precision_$i35>>2]|0;
     __THREW__ = 0;
     HEAP32[$vararg_buffer5>>2] = $8;
     $vararg_ptr8 = ((($vararg_buffer5)) + 8|0);
     HEAPF64[$vararg_ptr8>>3] = $__v;
     $call19 = (invoke_iiiii(414,($__nb|0),($call14|0),($__fmt|0),($vararg_buffer5|0))|0);
     $9 = __THREW__; __THREW__ = 0;
     $10 = $9&1;
     if (!($10)) {
      $__nc$1 = $call19;
      label = 12;
     }
    }
   } else {
    __THREW__ = 0;
    $call22 = (invoke_i(392)|0);
    $13 = __THREW__; __THREW__ = 0;
    $14 = $13&1;
    if (!($14)) {
     __THREW__ = 0;
     HEAPF64[$vararg_buffer9>>3] = $__v;
     $call25 = (invoke_iiiii(414,($__nb|0),($call22|0),($__fmt|0),($vararg_buffer9|0))|0);
     $15 = __THREW__; __THREW__ = 0;
     $16 = $15&1;
     if (!($16)) {
      $__nc$1 = $call25;
      label = 12;
     }
    }
   }
   if ((label|0) == 12) {
    $17 = HEAP32[$__nb>>2]|0;
    $cmp27 = ($17|0)==(0|0);
    if (!($cmp27)) {
     $18 = $17;
     $$pre7476 = $17;$__nbh$sroa$0$0 = $18;$__nc$2 = $__nc$1;
     label = 16;
     break;
    }
    __THREW__ = 0;
    invoke_v(409);
    $19 = __THREW__; __THREW__ = 0;
    $20 = $19&1;
    if (!($20)) {
     $$pre = HEAP32[$__nb>>2]|0;
     $21 = $$pre;
     $$pre7476 = $21;$__nbh$sroa$0$0 = $$pre;$__nc$2 = $__nc$1;
     label = 16;
     break;
    }
   }
   $11 = ___cxa_find_matching_catch_2()|0;
   $12 = tempRet0;
   $ehselector$slot$483 = $12;$exn$slot$484 = $11;
  } else {
   $$pre73 = HEAP32[$__nb>>2]|0;
   $$pre7476 = $$pre73;$__nbh$sroa$0$0 = 0;$__nc$2 = $__nc$0;
   label = 16;
  }
 } while(0);
 if ((label|0) == 16) {
  $add$ptr32 = (($$pre7476) + ($__nc$2)|0);
  $call35 = (__ZNSt3__214__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE($$pre7476,$add$ptr32,$__iob)|0);
  $cmp39 = ($$pre7476|0)==($__nar|0);
  L22: do {
   if ($cmp39) {
    $29 = $__nar;$__ob$0 = $__o;$__obh$sroa$0$0 = 0;
    label = 22;
   } else {
    $mul41 = $__nc$2 << 3;
    $call44 = (_malloc($mul41)|0);
    $cmp45 = ($call44|0)==(0|0);
    do {
     if ($cmp45) {
      __THREW__ = 0;
      invoke_v(409);
      $22 = __THREW__; __THREW__ = 0;
      $23 = $22&1;
      if ($23) {
       $24 = ___cxa_find_matching_catch_2()|0;
       $25 = tempRet0;
       $ehselector$slot$280 = $25;$exn$slot$281 = $24;
       break L22;
      } else {
       $$pre74$pre = HEAP32[$__nb>>2]|0;
       $$pre74 = $$pre74$pre;
       break;
      }
     } else {
      $$pre74 = $$pre7476;
     }
    } while(0);
    $26 = $call44;
    $29 = $$pre74;$__ob$0 = $call44;$__obh$sroa$0$0 = $26;
    label = 22;
   }
  } while(0);
  if ((label|0) == 22) {
   __THREW__ = 0;
   invoke_vii(379,($ref$tmp50|0),($__iob|0));
   $27 = __THREW__; __THREW__ = 0;
   $28 = $27&1;
   do {
    if ($28) {
     $39 = ___cxa_find_matching_catch_2()|0;
     $40 = tempRet0;
     $ehselector$slot$0 = $40;$exn$slot$0 = $39;
     label = 32;
    } else {
     __THREW__ = 0;
     invoke_viiiiiii(420,($29|0),($call35|0),($add$ptr32|0),($__ob$0|0),($__op|0),($__oe|0),($ref$tmp50|0));
     $30 = __THREW__; __THREW__ = 0;
     $31 = $30&1;
     if ($31) {
      $41 = ___cxa_find_matching_catch_2()|0;
      $42 = tempRet0;
      __ZNSt3__26localeD2Ev($ref$tmp50);
      $ehselector$slot$0 = $42;$exn$slot$0 = $41;
      label = 32;
      break;
     }
     __ZNSt3__26localeD2Ev($ref$tmp50);
     $32 = HEAP32[$__s>>2]|0;
     HEAP32[$agg$tmp>>2] = $32;
     $33 = HEAP32[$__op>>2]|0;
     $34 = HEAP32[$__oe>>2]|0;
     __THREW__ = 0;
     ;HEAP32[$agg$tmp$byval_copy>>2]=HEAP32[$agg$tmp>>2]|0;
     $call58 = (invoke_iiiiiii(421,($agg$tmp$byval_copy|0),($__ob$0|0),($33|0),($34|0),($__iob|0),($__fl|0))|0);
     $35 = __THREW__; __THREW__ = 0;
     $36 = $35&1;
     if ($36) {
      $43 = ___cxa_find_matching_catch_2()|0;
      $44 = tempRet0;
      $ehselector$slot$1 = $44;$exn$slot$1 = $43;
      break;
     }
     HEAP32[$__s>>2] = $call58;
     $tobool$i$i44 = ($__obh$sroa$0$0|0)==(0);
     if (!($tobool$i$i44)) {
      $37 = $__obh$sroa$0$0;
      _free($37);
     }
     $tobool$i$i50 = ($__nbh$sroa$0$0|0)==(0);
     if (!($tobool$i$i50)) {
      $38 = $__nbh$sroa$0$0;
      _free($38);
     }
     STACKTOP = sp;return ($call58|0);
    }
   } while(0);
   if ((label|0) == 32) {
    $ehselector$slot$1 = $ehselector$slot$0;$exn$slot$1 = $exn$slot$0;
   }
   $tobool$i$i31 = ($__obh$sroa$0$0|0)==(0);
   if ($tobool$i$i31) {
    $ehselector$slot$280 = $ehselector$slot$1;$exn$slot$281 = $exn$slot$1;
   } else {
    $45 = $__obh$sroa$0$0;
    _free($45);
    $ehselector$slot$280 = $ehselector$slot$1;$exn$slot$281 = $exn$slot$1;
   }
  }
  $tobool$i$i = ($__nbh$sroa$0$0|0)==(0);
  if ($tobool$i$i) {
   $ehselector$slot$483 = $ehselector$slot$280;$exn$slot$484 = $exn$slot$281;
  } else {
   $46 = $__nbh$sroa$0$0;
   _free($46);
   $ehselector$slot$483 = $ehselector$slot$280;$exn$slot$484 = $exn$slot$281;
  }
 }
 ___resumeException($exn$slot$484|0);
 // unreachable;
 return (0)|0;
}
function __ZNKSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwe($this,$__s,$__iob,$__fl,$__v) {
 $this = $this|0;
 $__s = $__s|0;
 $__iob = $__iob|0;
 $__fl = $__fl|0;
 $__v = +$__v;
 var $$pre = 0, $$pre73 = 0, $$pre74 = 0, $$pre74$pre = 0, $$pre7476 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__fmt = 0, $__fmtflags_$i = 0, $__nar = 0, $__nb = 0, $__nbh$sroa$0$0 = 0, $__nc$0 = 0, $__nc$1 = 0, $__nc$2 = 0;
 var $__o = 0, $__ob$0 = 0, $__obh$sroa$0$0 = 0, $__oe = 0, $__op = 0, $__precision_$i = 0, $__precision_$i35 = 0, $add$ptr = 0, $add$ptr32 = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $call10 = 0, $call14 = 0, $call19 = 0, $call2 = 0, $call22 = 0, $call25 = 0, $call35 = 0, $call4 = 0, $call44 = 0;
 var $call58 = 0, $call7 = 0, $cmp = 0, $cmp27 = 0, $cmp39 = 0, $cmp45 = 0, $ehselector$slot$0 = 0, $ehselector$slot$1 = 0, $ehselector$slot$280 = 0, $ehselector$slot$483 = 0, $exn$slot$0 = 0, $exn$slot$1 = 0, $exn$slot$281 = 0, $exn$slot$484 = 0, $mul41 = 0, $ref$tmp50 = 0, $tobool$i$i = 0, $tobool$i$i31 = 0, $tobool$i$i44 = 0, $tobool$i$i50 = 0;
 var $vararg_buffer = 0, $vararg_buffer2 = 0, $vararg_buffer5 = 0, $vararg_buffer9 = 0, $vararg_ptr1 = 0, $vararg_ptr8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 352|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(352|0);
 $agg$tmp$byval_copy = sp + 304|0;
 $vararg_buffer9 = sp + 48|0;
 $vararg_buffer5 = sp + 32|0;
 $vararg_buffer2 = sp + 24|0;
 $vararg_buffer = sp + 8|0;
 $__fmt = sp;
 $__nar = sp + 308|0;
 $__nb = sp + 300|0;
 $__o = sp + 72|0;
 $__op = sp + 68|0;
 $__oe = sp + 64|0;
 $ref$tmp50 = sp + 60|0;
 $agg$tmp = sp + 56|0;
 $0 = $__fmt;
 $1 = $0;
 HEAP32[$1>>2] = 37;
 $2 = (($0) + 4)|0;
 $3 = $2;
 HEAP32[$3>>2] = 0;
 $add$ptr = ((($__fmt)) + 1|0);
 $__fmtflags_$i = ((($__iob)) + 4|0);
 $4 = HEAP32[$__fmtflags_$i>>2]|0;
 $call2 = (__ZNSt3__214__num_put_base14__format_floatEPcPKcj($add$ptr,15939,$4)|0);
 HEAP32[$__nb>>2] = $__nar;
 $call4 = (__ZNSt3__26__clocEv()|0);
 if ($call2) {
  $__precision_$i = ((($__iob)) + 8|0);
  $5 = HEAP32[$__precision_$i>>2]|0;
  HEAP32[$vararg_buffer>>2] = $5;
  $vararg_ptr1 = ((($vararg_buffer)) + 8|0);
  HEAPF64[$vararg_ptr1>>3] = $__v;
  $call7 = (__ZNSt3__219__libcpp_snprintf_lEPcjP15__locale_structPKcz($__nar,30,$call4,$__fmt,$vararg_buffer)|0);
  $__nc$0 = $call7;
 } else {
  HEAPF64[$vararg_buffer2>>3] = $__v;
  $call10 = (__ZNSt3__219__libcpp_snprintf_lEPcjP15__locale_structPKcz($__nar,30,$call4,$__fmt,$vararg_buffer2)|0);
  $__nc$0 = $call10;
 }
 $cmp = ($__nc$0|0)>(29);
 do {
  if ($cmp) {
   if ($call2) {
    __THREW__ = 0;
    $call14 = (invoke_i(392)|0);
    $6 = __THREW__; __THREW__ = 0;
    $7 = $6&1;
    if (!($7)) {
     $__precision_$i35 = ((($__iob)) + 8|0);
     $8 = HEAP32[$__precision_$i35>>2]|0;
     __THREW__ = 0;
     HEAP32[$vararg_buffer5>>2] = $8;
     $vararg_ptr8 = ((($vararg_buffer5)) + 8|0);
     HEAPF64[$vararg_ptr8>>3] = $__v;
     $call19 = (invoke_iiiii(414,($__nb|0),($call14|0),($__fmt|0),($vararg_buffer5|0))|0);
     $9 = __THREW__; __THREW__ = 0;
     $10 = $9&1;
     if (!($10)) {
      $__nc$1 = $call19;
      label = 12;
     }
    }
   } else {
    __THREW__ = 0;
    $call22 = (invoke_i(392)|0);
    $13 = __THREW__; __THREW__ = 0;
    $14 = $13&1;
    if (!($14)) {
     __THREW__ = 0;
     HEAPF64[$vararg_buffer9>>3] = $__v;
     $call25 = (invoke_iiiii(414,($__nb|0),($call22|0),($__fmt|0),($vararg_buffer9|0))|0);
     $15 = __THREW__; __THREW__ = 0;
     $16 = $15&1;
     if (!($16)) {
      $__nc$1 = $call25;
      label = 12;
     }
    }
   }
   if ((label|0) == 12) {
    $17 = HEAP32[$__nb>>2]|0;
    $cmp27 = ($17|0)==(0|0);
    if (!($cmp27)) {
     $18 = $17;
     $$pre7476 = $17;$__nbh$sroa$0$0 = $18;$__nc$2 = $__nc$1;
     label = 16;
     break;
    }
    __THREW__ = 0;
    invoke_v(409);
    $19 = __THREW__; __THREW__ = 0;
    $20 = $19&1;
    if (!($20)) {
     $$pre = HEAP32[$__nb>>2]|0;
     $21 = $$pre;
     $$pre7476 = $21;$__nbh$sroa$0$0 = $$pre;$__nc$2 = $__nc$1;
     label = 16;
     break;
    }
   }
   $11 = ___cxa_find_matching_catch_2()|0;
   $12 = tempRet0;
   $ehselector$slot$483 = $12;$exn$slot$484 = $11;
  } else {
   $$pre73 = HEAP32[$__nb>>2]|0;
   $$pre7476 = $$pre73;$__nbh$sroa$0$0 = 0;$__nc$2 = $__nc$0;
   label = 16;
  }
 } while(0);
 if ((label|0) == 16) {
  $add$ptr32 = (($$pre7476) + ($__nc$2)|0);
  $call35 = (__ZNSt3__214__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE($$pre7476,$add$ptr32,$__iob)|0);
  $cmp39 = ($$pre7476|0)==($__nar|0);
  L22: do {
   if ($cmp39) {
    $29 = $__nar;$__ob$0 = $__o;$__obh$sroa$0$0 = 0;
    label = 22;
   } else {
    $mul41 = $__nc$2 << 3;
    $call44 = (_malloc($mul41)|0);
    $cmp45 = ($call44|0)==(0|0);
    do {
     if ($cmp45) {
      __THREW__ = 0;
      invoke_v(409);
      $22 = __THREW__; __THREW__ = 0;
      $23 = $22&1;
      if ($23) {
       $24 = ___cxa_find_matching_catch_2()|0;
       $25 = tempRet0;
       $ehselector$slot$280 = $25;$exn$slot$281 = $24;
       break L22;
      } else {
       $$pre74$pre = HEAP32[$__nb>>2]|0;
       $$pre74 = $$pre74$pre;
       break;
      }
     } else {
      $$pre74 = $$pre7476;
     }
    } while(0);
    $26 = $call44;
    $29 = $$pre74;$__ob$0 = $call44;$__obh$sroa$0$0 = $26;
    label = 22;
   }
  } while(0);
  if ((label|0) == 22) {
   __THREW__ = 0;
   invoke_vii(379,($ref$tmp50|0),($__iob|0));
   $27 = __THREW__; __THREW__ = 0;
   $28 = $27&1;
   do {
    if ($28) {
     $39 = ___cxa_find_matching_catch_2()|0;
     $40 = tempRet0;
     $ehselector$slot$0 = $40;$exn$slot$0 = $39;
     label = 32;
    } else {
     __THREW__ = 0;
     invoke_viiiiiii(420,($29|0),($call35|0),($add$ptr32|0),($__ob$0|0),($__op|0),($__oe|0),($ref$tmp50|0));
     $30 = __THREW__; __THREW__ = 0;
     $31 = $30&1;
     if ($31) {
      $41 = ___cxa_find_matching_catch_2()|0;
      $42 = tempRet0;
      __ZNSt3__26localeD2Ev($ref$tmp50);
      $ehselector$slot$0 = $42;$exn$slot$0 = $41;
      label = 32;
      break;
     }
     __ZNSt3__26localeD2Ev($ref$tmp50);
     $32 = HEAP32[$__s>>2]|0;
     HEAP32[$agg$tmp>>2] = $32;
     $33 = HEAP32[$__op>>2]|0;
     $34 = HEAP32[$__oe>>2]|0;
     __THREW__ = 0;
     ;HEAP32[$agg$tmp$byval_copy>>2]=HEAP32[$agg$tmp>>2]|0;
     $call58 = (invoke_iiiiiii(421,($agg$tmp$byval_copy|0),($__ob$0|0),($33|0),($34|0),($__iob|0),($__fl|0))|0);
     $35 = __THREW__; __THREW__ = 0;
     $36 = $35&1;
     if ($36) {
      $43 = ___cxa_find_matching_catch_2()|0;
      $44 = tempRet0;
      $ehselector$slot$1 = $44;$exn$slot$1 = $43;
      break;
     }
     HEAP32[$__s>>2] = $call58;
     $tobool$i$i44 = ($__obh$sroa$0$0|0)==(0);
     if (!($tobool$i$i44)) {
      $37 = $__obh$sroa$0$0;
      _free($37);
     }
     $tobool$i$i50 = ($__nbh$sroa$0$0|0)==(0);
     if (!($tobool$i$i50)) {
      $38 = $__nbh$sroa$0$0;
      _free($38);
     }
     STACKTOP = sp;return ($call58|0);
    }
   } while(0);
   if ((label|0) == 32) {
    $ehselector$slot$1 = $ehselector$slot$0;$exn$slot$1 = $exn$slot$0;
   }
   $tobool$i$i31 = ($__obh$sroa$0$0|0)==(0);
   if ($tobool$i$i31) {
    $ehselector$slot$280 = $ehselector$slot$1;$exn$slot$281 = $exn$slot$1;
   } else {
    $45 = $__obh$sroa$0$0;
    _free($45);
    $ehselector$slot$280 = $ehselector$slot$1;$exn$slot$281 = $exn$slot$1;
   }
  }
  $tobool$i$i = ($__nbh$sroa$0$0|0)==(0);
  if ($tobool$i$i) {
   $ehselector$slot$483 = $ehselector$slot$280;$exn$slot$484 = $exn$slot$281;
  } else {
   $46 = $__nbh$sroa$0$0;
   _free($46);
   $ehselector$slot$483 = $ehselector$slot$280;$exn$slot$484 = $exn$slot$281;
  }
 }
 ___resumeException($exn$slot$484|0);
 // unreachable;
 return (0)|0;
}
function __ZNKSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwPKv($this,$__s,$__iob,$__fl,$__v) {
 $this = $this|0;
 $__s = $__s|0;
 $__iob = $__iob|0;
 $__fl = $__fl|0;
 $__v = $__v|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $__fmt = 0, $__nar = 0, $__o = 0, $__op$0 = 0, $add$ptr = 0, $add$ptr13 = 0, $add$ptr19 = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $call = 0, $call$i21 = 0, $call21 = 0, $call3 = 0, $call6 = 0;
 var $cmp = 0, $ref$tmp = 0, $sub$ptr$lhs$cast16 = 0, $sub$ptr$rhs$cast = 0, $sub$ptr$sub18 = 0, $vararg_buffer = 0, $vfn$i = 0, $vtable$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 192|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(192|0);
 $agg$tmp$byval_copy = sp + 160|0;
 $vararg_buffer = sp;
 $__fmt = sp + 184|0;
 $__nar = sp + 164|0;
 $__o = sp + 12|0;
 $ref$tmp = sp + 8|0;
 $agg$tmp = sp + 4|0;
 ;HEAP8[$__fmt>>0]=HEAP8[15933>>0]|0;HEAP8[$__fmt+1>>0]=HEAP8[15933+1>>0]|0;HEAP8[$__fmt+2>>0]=HEAP8[15933+2>>0]|0;HEAP8[$__fmt+3>>0]=HEAP8[15933+3>>0]|0;HEAP8[$__fmt+4>>0]=HEAP8[15933+4>>0]|0;HEAP8[$__fmt+5>>0]=HEAP8[15933+5>>0]|0;
 $call = (__ZNSt3__26__clocEv()|0);
 HEAP32[$vararg_buffer>>2] = $__v;
 $call3 = (__ZNSt3__219__libcpp_snprintf_lEPcjP15__locale_structPKcz($__nar,20,$call,$__fmt,$vararg_buffer)|0);
 $add$ptr = (($__nar) + ($call3)|0);
 $call6 = (__ZNSt3__214__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE($__nar,$add$ptr,$__iob)|0);
 __ZNKSt3__28ios_base6getlocEv($ref$tmp,$__iob);
 __THREW__ = 0;
 $call$i21 = (invoke_iii(380,($ref$tmp|0),(20128|0))|0);
 $0 = __THREW__; __THREW__ = 0;
 $1 = $0&1;
 if ($1) {
  $4 = ___cxa_find_matching_catch_2()|0;
  $5 = tempRet0;
  __ZNSt3__26localeD2Ev($ref$tmp);
  ___resumeException($4|0);
  // unreachable;
 } else {
  __ZNSt3__26localeD2Ev($ref$tmp);
  $vtable$i = HEAP32[$call$i21>>2]|0;
  $vfn$i = ((($vtable$i)) + 48|0);
  $2 = HEAP32[$vfn$i>>2]|0;
  (FUNCTION_TABLE_iiiii[$2 & 511]($call$i21,$__nar,$add$ptr,$__o)|0);
  $add$ptr13 = (($__o) + ($call3<<2)|0);
  $cmp = ($call6|0)==($add$ptr|0);
  $sub$ptr$rhs$cast = $__nar;
  $sub$ptr$lhs$cast16 = $call6;
  $sub$ptr$sub18 = (($sub$ptr$lhs$cast16) - ($sub$ptr$rhs$cast))|0;
  $add$ptr19 = (($__o) + ($sub$ptr$sub18<<2)|0);
  $__op$0 = $cmp ? $add$ptr13 : $add$ptr19;
  $3 = HEAP32[$__s>>2]|0;
  HEAP32[$agg$tmp>>2] = $3;
  ;HEAP32[$agg$tmp$byval_copy>>2]=HEAP32[$agg$tmp>>2]|0;
  $call21 = (__ZNSt3__216__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg$tmp$byval_copy,$__o,$__op$0,$add$ptr13,$__iob,$__fl)|0);
  STACKTOP = sp;return ($call21|0);
 }
 return (0)|0;
}
function __ZNSt3__216__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($__s,$__ob,$__op,$__oe,$__iob,$__fl) {
 $__s = $__s|0;
 $__ob = $__ob|0;
 $__op = $__op|0;
 $__oe = $__oe|0;
 $__iob = $__iob|0;
 $__fl = $__fl|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__ns$0 = 0, $__size_$i$i$i = 0, $__sp = 0, $__width_$i = 0, $call$i = 0, $call$i35 = 0, $call$i3839 = 0, $cmp = 0;
 var $cmp1 = 0, $cmp12 = 0, $cmp17 = 0, $cmp22 = 0, $cmp32 = 0, $cmp36 = 0, $cmp8 = 0, $cond$i$i = 0, $retval$sroa$0$2 = 0, $sub = 0, $sub$ptr$div = 0, $sub$ptr$div31 = 0, $sub$ptr$div7 = 0, $sub$ptr$lhs$cast = 0, $sub$ptr$lhs$cast4 = 0, $sub$ptr$rhs$cast = 0, $sub$ptr$sub = 0, $sub$ptr$sub30 = 0, $sub$ptr$sub6 = 0, $tobool$i$i$i = 0;
 var $vfn$i = 0, $vfn$i34 = 0, $vfn$i37 = 0, $vtable$i = 0, $vtable$i33 = 0, $vtable$i36 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $__sp = sp;
 $0 = HEAP32[$__s>>2]|0;
 $cmp = ($0|0)==(0|0);
 L1: do {
  if ($cmp) {
   $retval$sroa$0$2 = 0;
  } else {
   $sub$ptr$lhs$cast = $__oe;
   $sub$ptr$rhs$cast = $__ob;
   $sub$ptr$sub = (($sub$ptr$lhs$cast) - ($sub$ptr$rhs$cast))|0;
   $sub$ptr$div = $sub$ptr$sub >> 2;
   $__width_$i = ((($__iob)) + 12|0);
   $1 = HEAP32[$__width_$i>>2]|0;
   $cmp1 = ($1|0)>($sub$ptr$div|0);
   $sub = (($1) - ($sub$ptr$div))|0;
   $__ns$0 = $cmp1 ? $sub : 0;
   $sub$ptr$lhs$cast4 = $__op;
   $sub$ptr$sub6 = (($sub$ptr$lhs$cast4) - ($sub$ptr$rhs$cast))|0;
   $sub$ptr$div7 = $sub$ptr$sub6 >> 2;
   $cmp8 = ($sub$ptr$sub6|0)>(0);
   if ($cmp8) {
    $vtable$i33 = HEAP32[$0>>2]|0;
    $vfn$i34 = ((($vtable$i33)) + 48|0);
    $2 = HEAP32[$vfn$i34>>2]|0;
    $call$i35 = (FUNCTION_TABLE_iiii[$2 & 1023]($0,$__ob,$sub$ptr$div7)|0);
    $cmp12 = ($call$i35|0)==($sub$ptr$div7|0);
    if (!($cmp12)) {
     HEAP32[$__s>>2] = 0;
     $retval$sroa$0$2 = 0;
     break;
    }
   }
   $cmp17 = ($__ns$0|0)>(0);
   do {
    if ($cmp17) {
     ;HEAP32[$__sp>>2]=0|0;HEAP32[$__sp+4>>2]=0|0;HEAP32[$__sp+8>>2]=0|0;
     __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initEjw($__sp,$__ns$0,$__fl);
     $3 = ((($__sp)) + 8|0);
     $__size_$i$i$i = ((($3)) + 3|0);
     $4 = HEAP8[$__size_$i$i$i>>0]|0;
     $tobool$i$i$i = ($4<<24>>24)<(0);
     $5 = HEAP32[$__sp>>2]|0;
     $cond$i$i = $tobool$i$i$i ? $5 : $__sp;
     $vtable$i36 = HEAP32[$0>>2]|0;
     $vfn$i37 = ((($vtable$i36)) + 48|0);
     $6 = HEAP32[$vfn$i37>>2]|0;
     __THREW__ = 0;
     $call$i3839 = (invoke_iiii($6|0,($0|0),($cond$i$i|0),($__ns$0|0))|0);
     $7 = __THREW__; __THREW__ = 0;
     $8 = $7&1;
     if ($8) {
      $9 = ___cxa_find_matching_catch_2()|0;
      $10 = tempRet0;
      __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($__sp);
      ___resumeException($9|0);
      // unreachable;
     }
     $cmp22 = ($call$i3839|0)==($__ns$0|0);
     if ($cmp22) {
      __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($__sp);
      break;
     } else {
      HEAP32[$__s>>2] = 0;
      __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($__sp);
      $retval$sroa$0$2 = 0;
      break L1;
     }
    }
   } while(0);
   $sub$ptr$sub30 = (($sub$ptr$lhs$cast) - ($sub$ptr$lhs$cast4))|0;
   $sub$ptr$div31 = $sub$ptr$sub30 >> 2;
   $cmp32 = ($sub$ptr$sub30|0)>(0);
   if ($cmp32) {
    $vtable$i = HEAP32[$0>>2]|0;
    $vfn$i = ((($vtable$i)) + 48|0);
    $11 = HEAP32[$vfn$i>>2]|0;
    $call$i = (FUNCTION_TABLE_iiii[$11 & 1023]($0,$__op,$sub$ptr$div31)|0);
    $cmp36 = ($call$i|0)==($sub$ptr$div31|0);
    if (!($cmp36)) {
     HEAP32[$__s>>2] = 0;
     $retval$sroa$0$2 = 0;
     break;
    }
   }
   HEAP32[$__width_$i>>2] = 0;
   $retval$sroa$0$2 = $0;
  }
 } while(0);
 STACKTOP = sp;return ($retval$sroa$0$2|0);
}
function __ZNSt3__29__num_putIwE23__widen_and_group_floatEPcS2_S2_PwRS3_S4_RKNS_6localeE($__nb,$__np,$__ne,$__ob,$__op,$__oe,$__loc) {
 $__nb = $__nb|0;
 $__np = $__np|0;
 $__ne = $__ne|0;
 $__ob = $__ob|0;
 $__op = $__op|0;
 $__oe = $__oe|0;
 $__loc = $__loc|0;
 var $$pre$phiZ2D = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $8 = 0, $9 = 0, $__dc$0 = 0, $__dc$1 = 0, $__dg$0 = 0, $__dg$1 = 0, $__first$addr$0$i$i = 0, $__first$addr$0$i$i126 = 0, $__grouping = 0, $__last$addr$0$i$i = 0, $__last$addr$0$i$i127 = 0;
 var $__nf$0 = 0, $__nf$1 = 0, $__nf$2 = 0, $__nf$3 = 0, $__ns$0 = 0, $__ns$1 = 0, $__ns$2 = 0, $__p$0 = 0, $__size_$i$i$i = 0, $__size_$i3$i$i = 0, $add$ptr = 0, $add$ptr$i = 0, $add$ptr121 = 0, $add$ptr128 = 0, $add$ptr92 = 0, $arrayidx10 = 0, $call$i = 0, $call$i104105 = 0, $call$i118119 = 0, $call$i123124 = 0;
 var $call$i135136 = 0, $call$i145146 = 0, $call$i92 = 0, $call$i9596 = 0, $call$i99100 = 0, $call30 = 0, $call32 = 0, $call41 = 0, $call43 = 0, $cmp$i = 0, $cmp$i$i = 0, $cmp$i$i125 = 0, $cmp1$i$i = 0, $cmp1$i$i129 = 0, $cmp102 = 0, $cmp122 = 0, $cmp27 = 0, $cmp37 = 0, $cmp6 = 0, $cmp63 = 0;
 var $cmp69 = 0, $cmp74 = 0, $cmp78 = 0, $cmp8 = 0, $cmp99 = 0, $cond$i = 0, $cond$i$i = 0, $cond$i$i142 = 0, $conv$i$i = 0, $conv$i$i$i = 0, $conv28 = 0, $conv39 = 0, $conv73 = 0, $inc = 0, $inc$__dg$0 = 0, $inc85 = 0, $incdec$ptr = 0, $incdec$ptr$i$i = 0, $incdec$ptr$i$i128 = 0, $incdec$ptr106 = 0;
 var $incdec$ptr107 = 0, $incdec$ptr111 = 0, $incdec$ptr2$i$i = 0, $incdec$ptr2$i$i131 = 0, $incdec$ptr22 = 0, $incdec$ptr23 = 0, $incdec$ptr26 = 0, $incdec$ptr35 = 0, $incdec$ptr48 = 0, $incdec$ptr5 = 0, $incdec$ptr76 = 0, $incdec$ptr84 = 0, $incdec$ptr87 = 0, $or$cond = 0, $storemerge = 0, $sub = 0, $sub$ptr$lhs$cast = 0, $sub$ptr$lhs$cast125 = 0, $sub$ptr$lhs$cast55 = 0, $sub$ptr$rhs$cast = 0;
 var $sub$ptr$rhs$cast119 = 0, $sub$ptr$rhs$cast126 = 0, $sub$ptr$rhs$cast56 = 0, $sub$ptr$sub = 0, $sub$ptr$sub120 = 0, $sub$ptr$sub127 = 0, $sub$ptr$sub57 = 0, $sub$ptr$sub91 = 0, $tobool = 0, $tobool$i$i$i = 0, $tobool$i$i$i139 = 0, $tobool44 = 0, $vfn$i = 0, $vfn$i103 = 0, $vfn$i108 = 0, $vfn$i112 = 0, $vfn$i117 = 0, $vfn$i122 = 0, $vfn$i134 = 0, $vfn$i144 = 0;
 var $vfn$i94 = 0, $vfn$i98 = 0, $vtable$i = 0, $vtable$i102 = 0, $vtable$i107 = 0, $vtable$i111 = 0, $vtable$i116 = 0, $vtable$i121 = 0, $vtable$i133 = 0, $vtable$i143 = 0, $vtable$i93 = 0, $vtable$i97 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $__grouping = sp;
 $call$i = (__ZNKSt3__26locale9use_facetERNS0_2idE($__loc,20128)|0);
 $call$i92 = (__ZNKSt3__26locale9use_facetERNS0_2idE($__loc,20136)|0);
 $vtable$i = HEAP32[$call$i92>>2]|0;
 $vfn$i = ((($vtable$i)) + 20|0);
 $0 = HEAP32[$vfn$i>>2]|0;
 FUNCTION_TABLE_vii[$0 & 1023]($__grouping,$call$i92);
 HEAP32[$__oe>>2] = $__ob;
 $1 = HEAP8[$__nb>>0]|0;
 switch ($1<<24>>24) {
 case 43: case 45:  {
  $vtable$i93 = HEAP32[$call$i>>2]|0;
  $vfn$i94 = ((($vtable$i93)) + 44|0);
  $2 = HEAP32[$vfn$i94>>2]|0;
  __THREW__ = 0;
  $call$i9596 = (invoke_iii($2|0,($call$i|0),($1|0))|0);
  $3 = __THREW__; __THREW__ = 0;
  $4 = $3&1;
  if (!($4)) {
   $incdec$ptr = ((($__nb)) + 1|0);
   $5 = HEAP32[$__oe>>2]|0;
   $incdec$ptr5 = ((($5)) + 4|0);
   HEAP32[$__oe>>2] = $incdec$ptr5;
   HEAP32[$5>>2] = $call$i9596;
   $__nf$0 = $incdec$ptr;
   label = 4;
  }
  break;
 }
 default: {
  $__nf$0 = $__nb;
  label = 4;
 }
 }
 L4: do {
  if ((label|0) == 4) {
   $sub$ptr$lhs$cast = $__ne;
   $sub$ptr$rhs$cast = $__nf$0;
   $sub$ptr$sub = (($sub$ptr$lhs$cast) - ($sub$ptr$rhs$cast))|0;
   $cmp6 = ($sub$ptr$sub|0)>(1);
   L6: do {
    if ($cmp6) {
     $6 = HEAP8[$__nf$0>>0]|0;
     $cmp8 = ($6<<24>>24)==(48);
     if ($cmp8) {
      $arrayidx10 = ((($__nf$0)) + 1|0);
      $7 = HEAP8[$arrayidx10>>0]|0;
      switch ($7<<24>>24) {
      case 88: case 120:  {
       break;
      }
      default: {
       $__ns$1 = $__nf$0;
       label = 15;
       break L6;
      }
      }
      $vtable$i97 = HEAP32[$call$i>>2]|0;
      $vfn$i98 = ((($vtable$i97)) + 44|0);
      $8 = HEAP32[$vfn$i98>>2]|0;
      __THREW__ = 0;
      $call$i99100 = (invoke_iii($8|0,($call$i|0),48)|0);
      $9 = __THREW__; __THREW__ = 0;
      $10 = $9&1;
      if ($10) {
       break L4;
      }
      $11 = HEAP32[$__oe>>2]|0;
      $incdec$ptr22 = ((($11)) + 4|0);
      HEAP32[$__oe>>2] = $incdec$ptr22;
      HEAP32[$11>>2] = $call$i99100;
      $incdec$ptr23 = ((($__nf$0)) + 2|0);
      $12 = HEAP8[$arrayidx10>>0]|0;
      $vtable$i102 = HEAP32[$call$i>>2]|0;
      $vfn$i103 = ((($vtable$i102)) + 44|0);
      $13 = HEAP32[$vfn$i103>>2]|0;
      __THREW__ = 0;
      $call$i104105 = (invoke_iii($13|0,($call$i|0),($12|0))|0);
      $14 = __THREW__; __THREW__ = 0;
      $15 = $14&1;
      if ($15) {
       break L4;
      }
      $16 = HEAP32[$__oe>>2]|0;
      $incdec$ptr26 = ((($16)) + 4|0);
      HEAP32[$__oe>>2] = $incdec$ptr26;
      HEAP32[$16>>2] = $call$i104105;
      $__ns$0 = $incdec$ptr23;
      while(1) {
       $cmp27 = ($__ns$0>>>0)<($__ne>>>0);
       if (!($cmp27)) {
        $__nf$1 = $incdec$ptr23;$__ns$2 = $__ns$0;
        break L6;
       }
       $17 = HEAP8[$__ns$0>>0]|0;
       __THREW__ = 0;
       $call30 = (invoke_i(392)|0);
       $18 = __THREW__; __THREW__ = 0;
       $19 = $18&1;
       if ($19) {
        break L4;
       }
       $conv28 = $17 << 24 >> 24;
       __THREW__ = 0;
       $call32 = (invoke_iii(417,($conv28|0),($call30|0))|0);
       $20 = __THREW__; __THREW__ = 0;
       $21 = $20&1;
       if ($21) {
        break L4;
       }
       $tobool = ($call32|0)==(0);
       if ($tobool) {
        $__nf$1 = $incdec$ptr23;$__ns$2 = $__ns$0;
        break L6;
       }
       $incdec$ptr35 = ((($__ns$0)) + 1|0);
       $__ns$0 = $incdec$ptr35;
      }
     } else {
      $__ns$1 = $__nf$0;
      label = 15;
     }
    } else {
     $__ns$1 = $__nf$0;
     label = 15;
    }
   } while(0);
   L18: do {
    if ((label|0) == 15) {
     while(1) {
      label = 0;
      $cmp37 = ($__ns$1>>>0)<($__ne>>>0);
      if (!($cmp37)) {
       $__nf$1 = $__nf$0;$__ns$2 = $__ns$1;
       break L18;
      }
      $22 = HEAP8[$__ns$1>>0]|0;
      __THREW__ = 0;
      $call41 = (invoke_i(392)|0);
      $23 = __THREW__; __THREW__ = 0;
      $24 = $23&1;
      if ($24) {
       break L4;
      }
      $conv39 = $22 << 24 >> 24;
      __THREW__ = 0;
      $call43 = (invoke_iii(418,($conv39|0),($call41|0))|0);
      $25 = __THREW__; __THREW__ = 0;
      $26 = $25&1;
      if ($26) {
       break L4;
      }
      $tobool44 = ($call43|0)==(0);
      if ($tobool44) {
       $__nf$1 = $__nf$0;$__ns$2 = $__ns$1;
       break L18;
      }
      $incdec$ptr48 = ((($__ns$1)) + 1|0);
      $__ns$1 = $incdec$ptr48;
      label = 15;
     }
    }
   } while(0);
   $__size_$i$i$i = ((($__grouping)) + 11|0);
   $27 = HEAP8[$__size_$i$i$i>>0]|0;
   $tobool$i$i$i = ($27<<24>>24)<(0);
   $__size_$i3$i$i = ((($__grouping)) + 4|0);
   $28 = HEAP32[$__size_$i3$i$i>>2]|0;
   $conv$i$i$i = $27&255;
   $cond$i$i = $tobool$i$i$i ? $28 : $conv$i$i$i;
   $cmp$i = ($cond$i$i|0)==(0);
   $sub$ptr$rhs$cast56 = $__nf$1;
   $sub$ptr$rhs$cast126 = $__nb;
   L26: do {
    if ($cmp$i) {
     $29 = HEAP32[$__oe>>2]|0;
     $vtable$i111 = HEAP32[$call$i>>2]|0;
     $vfn$i112 = ((($vtable$i111)) + 48|0);
     $30 = HEAP32[$vfn$i112>>2]|0;
     __THREW__ = 0;
     (invoke_iiiii($30|0,($call$i|0),($__nf$1|0),($__ns$2|0),($29|0))|0);
     $31 = __THREW__; __THREW__ = 0;
     $32 = $31&1;
     if ($32) {
      break L4;
     }
     $sub$ptr$lhs$cast55 = $__ns$2;
     $sub$ptr$sub57 = (($sub$ptr$lhs$cast55) - ($sub$ptr$rhs$cast56))|0;
     $33 = HEAP32[$__oe>>2]|0;
     $add$ptr = (($33) + ($sub$ptr$sub57<<2)|0);
     HEAP32[$__oe>>2] = $add$ptr;
     $$pre$phiZ2D = $call$i;$68 = $add$ptr;
    } else {
     $cmp$i$i = ($__nf$1|0)==($__ns$2|0);
     L30: do {
      if (!($cmp$i$i)) {
       $__first$addr$0$i$i = $__nf$1;$__last$addr$0$i$i = $__ns$2;
       while(1) {
        $incdec$ptr$i$i = ((($__last$addr$0$i$i)) + -1|0);
        $cmp1$i$i = ($__first$addr$0$i$i>>>0)<($incdec$ptr$i$i>>>0);
        if (!($cmp1$i$i)) {
         break L30;
        }
        $34 = HEAP8[$__first$addr$0$i$i>>0]|0;
        $35 = HEAP8[$incdec$ptr$i$i>>0]|0;
        HEAP8[$__first$addr$0$i$i>>0] = $35;
        HEAP8[$incdec$ptr$i$i>>0] = $34;
        $incdec$ptr2$i$i = ((($__first$addr$0$i$i)) + 1|0);
        $__first$addr$0$i$i = $incdec$ptr2$i$i;$__last$addr$0$i$i = $incdec$ptr$i$i;
       }
      }
     } while(0);
     $vtable$i121 = HEAP32[$call$i92>>2]|0;
     $vfn$i122 = ((($vtable$i121)) + 16|0);
     $36 = HEAP32[$vfn$i122>>2]|0;
     __THREW__ = 0;
     $call$i123124 = (invoke_ii($36|0,($call$i92|0))|0);
     $37 = __THREW__; __THREW__ = 0;
     $38 = $37&1;
     if ($38) {
      break L4;
     }
     $__dc$0 = 0;$__dg$0 = 0;$__p$0 = $__nf$1;
     while(1) {
      $cmp63 = ($__p$0>>>0)<($__ns$2>>>0);
      if (!($cmp63)) {
       break;
      }
      $42 = HEAP8[$__size_$i$i$i>>0]|0;
      $tobool$i$i$i139 = ($42<<24>>24)<(0);
      $43 = HEAP32[$__grouping>>2]|0;
      $cond$i$i142 = $tobool$i$i$i139 ? $43 : $__grouping;
      $add$ptr$i = (($cond$i$i142) + ($__dg$0)|0);
      $44 = HEAP8[$add$ptr$i>>0]|0;
      $cmp69 = ($44<<24>>24)>(0);
      $conv73 = $44 << 24 >> 24;
      $cmp74 = ($__dc$0|0)==($conv73|0);
      $or$cond = $cmp69 & $cmp74;
      if ($or$cond) {
       $45 = HEAP32[$__oe>>2]|0;
       $incdec$ptr76 = ((($45)) + 4|0);
       HEAP32[$__oe>>2] = $incdec$ptr76;
       HEAP32[$45>>2] = $call$i123124;
       $46 = HEAP32[$__size_$i3$i$i>>2]|0;
       $conv$i$i = $42&255;
       $cond$i = $tobool$i$i$i139 ? $46 : $conv$i$i;
       $sub = (($cond$i) + -1)|0;
       $cmp78 = ($__dg$0>>>0)<($sub>>>0);
       $inc = $cmp78&1;
       $inc$__dg$0 = (($inc) + ($__dg$0))|0;
       $__dc$1 = 0;$__dg$1 = $inc$__dg$0;
      } else {
       $__dc$1 = $__dc$0;$__dg$1 = $__dg$0;
      }
      $47 = HEAP8[$__p$0>>0]|0;
      $vtable$i143 = HEAP32[$call$i>>2]|0;
      $vfn$i144 = ((($vtable$i143)) + 44|0);
      $48 = HEAP32[$vfn$i144>>2]|0;
      __THREW__ = 0;
      $call$i145146 = (invoke_iii($48|0,($call$i|0),($47|0))|0);
      $49 = __THREW__; __THREW__ = 0;
      $50 = $49&1;
      if ($50) {
       break L4;
      }
      $51 = HEAP32[$__oe>>2]|0;
      $incdec$ptr84 = ((($51)) + 4|0);
      HEAP32[$__oe>>2] = $incdec$ptr84;
      HEAP32[$51>>2] = $call$i145146;
      $inc85 = (($__dc$1) + 1)|0;
      $incdec$ptr87 = ((($__p$0)) + 1|0);
      $__dc$0 = $inc85;$__dg$0 = $__dg$1;$__p$0 = $incdec$ptr87;
     }
     $sub$ptr$sub91 = (($sub$ptr$rhs$cast56) - ($sub$ptr$rhs$cast126))|0;
     $add$ptr92 = (($__ob) + ($sub$ptr$sub91<<2)|0);
     $39 = HEAP32[$__oe>>2]|0;
     $cmp$i$i125 = ($add$ptr92|0)==($39|0);
     if ($cmp$i$i125) {
      $$pre$phiZ2D = $call$i;$68 = $add$ptr92;
     } else {
      $__first$addr$0$i$i126 = $add$ptr92;$__last$addr$0$i$i127 = $39;
      while(1) {
       $incdec$ptr$i$i128 = ((($__last$addr$0$i$i127)) + -4|0);
       $cmp1$i$i129 = ($__first$addr$0$i$i126>>>0)<($incdec$ptr$i$i128>>>0);
       if (!($cmp1$i$i129)) {
        $$pre$phiZ2D = $call$i;$68 = $39;
        break L26;
       }
       $40 = HEAP32[$__first$addr$0$i$i126>>2]|0;
       $41 = HEAP32[$incdec$ptr$i$i128>>2]|0;
       HEAP32[$__first$addr$0$i$i126>>2] = $41;
       HEAP32[$incdec$ptr$i$i128>>2] = $40;
       $incdec$ptr2$i$i131 = ((($__first$addr$0$i$i126)) + 4|0);
       $__first$addr$0$i$i126 = $incdec$ptr2$i$i131;$__last$addr$0$i$i127 = $incdec$ptr$i$i128;
      }
     }
    }
   } while(0);
   $69 = $68;$__nf$2 = $__ns$2;
   while(1) {
    $cmp99 = ($__nf$2>>>0)<($__ne>>>0);
    if (!($cmp99)) {
     $62 = $69;$__nf$3 = $__nf$2;
     break;
    }
    $52 = HEAP8[$__nf$2>>0]|0;
    $cmp102 = ($52<<24>>24)==(46);
    $incdec$ptr107 = ((($__nf$2)) + 1|0);
    if ($cmp102) {
     label = 39;
     break;
    }
    $vtable$i116 = HEAP32[$$pre$phiZ2D>>2]|0;
    $vfn$i117 = ((($vtable$i116)) + 44|0);
    $57 = HEAP32[$vfn$i117>>2]|0;
    __THREW__ = 0;
    $call$i118119 = (invoke_iii($57|0,($call$i|0),($52|0))|0);
    $58 = __THREW__; __THREW__ = 0;
    $59 = $58&1;
    if ($59) {
     break L4;
    }
    $60 = HEAP32[$__oe>>2]|0;
    $incdec$ptr111 = ((($60)) + 4|0);
    HEAP32[$__oe>>2] = $incdec$ptr111;
    HEAP32[$60>>2] = $call$i118119;
    $69 = $incdec$ptr111;$__nf$2 = $incdec$ptr107;
   }
   if ((label|0) == 39) {
    $vtable$i133 = HEAP32[$call$i92>>2]|0;
    $vfn$i134 = ((($vtable$i133)) + 12|0);
    $53 = HEAP32[$vfn$i134>>2]|0;
    __THREW__ = 0;
    $call$i135136 = (invoke_ii($53|0,($call$i92|0))|0);
    $54 = __THREW__; __THREW__ = 0;
    $55 = $54&1;
    if ($55) {
     break;
    }
    $56 = HEAP32[$__oe>>2]|0;
    $incdec$ptr106 = ((($56)) + 4|0);
    HEAP32[$__oe>>2] = $incdec$ptr106;
    HEAP32[$56>>2] = $call$i135136;
    $62 = $incdec$ptr106;$__nf$3 = $incdec$ptr107;
   }
   $vtable$i107 = HEAP32[$call$i>>2]|0;
   $vfn$i108 = ((($vtable$i107)) + 48|0);
   $61 = HEAP32[$vfn$i108>>2]|0;
   __THREW__ = 0;
   (invoke_iiiii($61|0,($call$i|0),($__nf$3|0),($__ne|0),($62|0))|0);
   $63 = __THREW__; __THREW__ = 0;
   $64 = $63&1;
   if (!($64)) {
    $sub$ptr$rhs$cast119 = $__nf$3;
    $sub$ptr$sub120 = (($sub$ptr$lhs$cast) - ($sub$ptr$rhs$cast119))|0;
    $65 = HEAP32[$__oe>>2]|0;
    $add$ptr121 = (($65) + ($sub$ptr$sub120<<2)|0);
    HEAP32[$__oe>>2] = $add$ptr121;
    $cmp122 = ($__np|0)==($__ne|0);
    $sub$ptr$lhs$cast125 = $__np;
    $sub$ptr$sub127 = (($sub$ptr$lhs$cast125) - ($sub$ptr$rhs$cast126))|0;
    $add$ptr128 = (($__ob) + ($sub$ptr$sub127<<2)|0);
    $storemerge = $cmp122 ? $add$ptr121 : $add$ptr128;
    HEAP32[$__op>>2] = $storemerge;
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grouping);
    STACKTOP = sp;return;
   }
  }
 } while(0);
 $66 = ___cxa_find_matching_catch_2()|0;
 $67 = tempRet0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grouping);
 ___resumeException($66|0);
 // unreachable;
}
function __ZNSt3__29__num_putIwE21__widen_and_group_intEPcS2_S2_PwRS3_S4_RKNS_6localeE($__nb,$__np,$__ne,$__ob,$__op,$__oe,$__loc) {
 $__nb = $__nb|0;
 $__np = $__np|0;
 $__ne = $__ne|0;
 $__ob = $__ob|0;
 $__op = $__op|0;
 $__oe = $__oe|0;
 $__loc = $__loc|0;
 var $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__dc$0 = 0, $__dc$1 = 0, $__dg$0 = 0, $__dg$1 = 0, $__first$addr$0$i$i = 0, $__first$addr$0$i$i105 = 0, $__grouping = 0, $__last$addr$0$i$i = 0, $__last$addr$0$i$i106 = 0, $__nf$0 = 0, $__nf$1 = 0, $__p$0 = 0, $__size_$i$i$i = 0, $__size_$i3$i$i = 0, $add$ptr = 0, $add$ptr$i102 = 0;
 var $add$ptr64 = 0, $add$ptr77 = 0, $arrayidx18 = 0, $call$i = 0, $call$i114115 = 0, $call$i64 = 0, $call$i6768 = 0, $call$i7576 = 0, $call$i8081 = 0, $call$i8586 = 0, $cmp$i = 0, $cmp$i$i = 0, $cmp$i$i104 = 0, $cmp1$i$i = 0, $cmp1$i$i108 = 0, $cmp14 = 0, $cmp16 = 0, $cmp38 = 0, $cmp43 = 0, $cmp48 = 0;
 var $cmp52 = 0, $cmp71 = 0, $cond$i = 0, $cond$i$i = 0, $cond$i$i101 = 0, $conv$i$i = 0, $conv$i$i$i = 0, $conv47 = 0, $inc = 0, $inc$__dg$0 = 0, $inc59 = 0, $incdec$ptr = 0, $incdec$ptr$i$i = 0, $incdec$ptr$i$i107 = 0, $incdec$ptr10 = 0, $incdec$ptr2$i$i = 0, $incdec$ptr2$i$i110 = 0, $incdec$ptr29 = 0, $incdec$ptr30 = 0, $incdec$ptr33 = 0;
 var $incdec$ptr50 = 0, $incdec$ptr58 = 0, $incdec$ptr60 = 0, $or$cond = 0, $storemerge = 0, $sub = 0, $sub$ptr$lhs$cast = 0, $sub$ptr$lhs$cast61 = 0, $sub$ptr$lhs$cast74 = 0, $sub$ptr$rhs$cast = 0, $sub$ptr$rhs$cast12 = 0, $sub$ptr$sub = 0, $sub$ptr$sub13 = 0, $sub$ptr$sub63 = 0, $sub$ptr$sub76 = 0, $tobool$i$i$i = 0, $tobool$i$i$i96 = 0, $vfn$i = 0, $vfn$i113 = 0, $vfn$i66 = 0;
 var $vfn$i70 = 0, $vfn$i74 = 0, $vfn$i79 = 0, $vfn$i84 = 0, $vtable$i = 0, $vtable$i112 = 0, $vtable$i65 = 0, $vtable$i69 = 0, $vtable$i73 = 0, $vtable$i78 = 0, $vtable$i83 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $__grouping = sp;
 $call$i = (__ZNKSt3__26locale9use_facetERNS0_2idE($__loc,20128)|0);
 $call$i64 = (__ZNKSt3__26locale9use_facetERNS0_2idE($__loc,20136)|0);
 $vtable$i = HEAP32[$call$i64>>2]|0;
 $vfn$i = ((($vtable$i)) + 20|0);
 $0 = HEAP32[$vfn$i>>2]|0;
 FUNCTION_TABLE_vii[$0 & 1023]($__grouping,$call$i64);
 $__size_$i$i$i = ((($__grouping)) + 11|0);
 $1 = HEAP8[$__size_$i$i$i>>0]|0;
 $tobool$i$i$i = ($1<<24>>24)<(0);
 $__size_$i3$i$i = ((($__grouping)) + 4|0);
 $2 = HEAP32[$__size_$i3$i$i>>2]|0;
 $conv$i$i$i = $1&255;
 $cond$i$i = $tobool$i$i$i ? $2 : $conv$i$i$i;
 $cmp$i = ($cond$i$i|0)==(0);
 $sub$ptr$lhs$cast = $__ne;
 $sub$ptr$rhs$cast = $__nb;
 L1: do {
  if ($cmp$i) {
   $vtable$i69 = HEAP32[$call$i>>2]|0;
   $vfn$i70 = ((($vtable$i69)) + 48|0);
   $3 = HEAP32[$vfn$i70>>2]|0;
   __THREW__ = 0;
   (invoke_iiiii($3|0,($call$i|0),($__nb|0),($__ne|0),($__ob|0))|0);
   $4 = __THREW__; __THREW__ = 0;
   $5 = $4&1;
   if ($5) {
    label = 28;
   } else {
    $sub$ptr$sub = (($sub$ptr$lhs$cast) - ($sub$ptr$rhs$cast))|0;
    $add$ptr = (($__ob) + ($sub$ptr$sub<<2)|0);
    HEAP32[$__oe>>2] = $add$ptr;
    $40 = $add$ptr;
    label = 27;
   }
  } else {
   HEAP32[$__oe>>2] = $__ob;
   $6 = HEAP8[$__nb>>0]|0;
   switch ($6<<24>>24) {
   case 43: case 45:  {
    $vtable$i73 = HEAP32[$call$i>>2]|0;
    $vfn$i74 = ((($vtable$i73)) + 44|0);
    $7 = HEAP32[$vfn$i74>>2]|0;
    __THREW__ = 0;
    $call$i7576 = (invoke_iii($7|0,($call$i|0),($6|0))|0);
    $8 = __THREW__; __THREW__ = 0;
    $9 = $8&1;
    if ($9) {
     label = 28;
     break L1;
    }
    $incdec$ptr = ((($__nb)) + 1|0);
    $10 = HEAP32[$__oe>>2]|0;
    $incdec$ptr10 = ((($10)) + 4|0);
    HEAP32[$__oe>>2] = $incdec$ptr10;
    HEAP32[$10>>2] = $call$i7576;
    $__nf$0 = $incdec$ptr;
    break;
   }
   default: {
    $__nf$0 = $__nb;
   }
   }
   $sub$ptr$rhs$cast12 = $__nf$0;
   $sub$ptr$sub13 = (($sub$ptr$lhs$cast) - ($sub$ptr$rhs$cast12))|0;
   $cmp14 = ($sub$ptr$sub13|0)>(1);
   L9: do {
    if ($cmp14) {
     $11 = HEAP8[$__nf$0>>0]|0;
     $cmp16 = ($11<<24>>24)==(48);
     if ($cmp16) {
      $arrayidx18 = ((($__nf$0)) + 1|0);
      $12 = HEAP8[$arrayidx18>>0]|0;
      switch ($12<<24>>24) {
      case 88: case 120:  {
       break;
      }
      default: {
       $__nf$1 = $__nf$0;
       break L9;
      }
      }
      $vtable$i78 = HEAP32[$call$i>>2]|0;
      $vfn$i79 = ((($vtable$i78)) + 44|0);
      $13 = HEAP32[$vfn$i79>>2]|0;
      __THREW__ = 0;
      $call$i8081 = (invoke_iii($13|0,($call$i|0),48)|0);
      $14 = __THREW__; __THREW__ = 0;
      $15 = $14&1;
      if ($15) {
       label = 28;
       break L1;
      }
      $16 = HEAP32[$__oe>>2]|0;
      $incdec$ptr29 = ((($16)) + 4|0);
      HEAP32[$__oe>>2] = $incdec$ptr29;
      HEAP32[$16>>2] = $call$i8081;
      $17 = HEAP8[$arrayidx18>>0]|0;
      $vtable$i83 = HEAP32[$call$i>>2]|0;
      $vfn$i84 = ((($vtable$i83)) + 44|0);
      $18 = HEAP32[$vfn$i84>>2]|0;
      __THREW__ = 0;
      $call$i8586 = (invoke_iii($18|0,($call$i|0),($17|0))|0);
      $19 = __THREW__; __THREW__ = 0;
      $20 = $19&1;
      if ($20) {
       label = 28;
       break L1;
      }
      $incdec$ptr30 = ((($__nf$0)) + 2|0);
      $21 = HEAP32[$__oe>>2]|0;
      $incdec$ptr33 = ((($21)) + 4|0);
      HEAP32[$__oe>>2] = $incdec$ptr33;
      HEAP32[$21>>2] = $call$i8586;
      $__nf$1 = $incdec$ptr30;
     } else {
      $__nf$1 = $__nf$0;
     }
    } else {
     $__nf$1 = $__nf$0;
    }
   } while(0);
   $cmp$i$i = ($__nf$1|0)==($__ne|0);
   L16: do {
    if (!($cmp$i$i)) {
     $__first$addr$0$i$i = $__nf$1;$__last$addr$0$i$i = $__ne;
     while(1) {
      $incdec$ptr$i$i = ((($__last$addr$0$i$i)) + -1|0);
      $cmp1$i$i = ($__first$addr$0$i$i>>>0)<($incdec$ptr$i$i>>>0);
      if (!($cmp1$i$i)) {
       break L16;
      }
      $22 = HEAP8[$__first$addr$0$i$i>>0]|0;
      $23 = HEAP8[$incdec$ptr$i$i>>0]|0;
      HEAP8[$__first$addr$0$i$i>>0] = $23;
      HEAP8[$incdec$ptr$i$i>>0] = $22;
      $incdec$ptr2$i$i = ((($__first$addr$0$i$i)) + 1|0);
      $__first$addr$0$i$i = $incdec$ptr2$i$i;$__last$addr$0$i$i = $incdec$ptr$i$i;
     }
    }
   } while(0);
   $vtable$i112 = HEAP32[$call$i64>>2]|0;
   $vfn$i113 = ((($vtable$i112)) + 16|0);
   $24 = HEAP32[$vfn$i113>>2]|0;
   __THREW__ = 0;
   $call$i114115 = (invoke_ii($24|0,($call$i64|0))|0);
   $25 = __THREW__; __THREW__ = 0;
   $26 = $25&1;
   if ($26) {
    label = 28;
   } else {
    $__dc$0 = 0;$__dg$0 = 0;$__p$0 = $__nf$1;
    while(1) {
     $cmp38 = ($__p$0>>>0)<($__ne>>>0);
     if (!($cmp38)) {
      break;
     }
     $30 = HEAP8[$__size_$i$i$i>>0]|0;
     $tobool$i$i$i96 = ($30<<24>>24)<(0);
     $31 = HEAP32[$__grouping>>2]|0;
     $cond$i$i101 = $tobool$i$i$i96 ? $31 : $__grouping;
     $add$ptr$i102 = (($cond$i$i101) + ($__dg$0)|0);
     $32 = HEAP8[$add$ptr$i102>>0]|0;
     $cmp43 = ($32<<24>>24)!=(0);
     $conv47 = $32 << 24 >> 24;
     $cmp48 = ($__dc$0|0)==($conv47|0);
     $or$cond = $cmp43 & $cmp48;
     if ($or$cond) {
      $33 = HEAP32[$__oe>>2]|0;
      $incdec$ptr50 = ((($33)) + 4|0);
      HEAP32[$__oe>>2] = $incdec$ptr50;
      HEAP32[$33>>2] = $call$i114115;
      $34 = HEAP32[$__size_$i3$i$i>>2]|0;
      $conv$i$i = $30&255;
      $cond$i = $tobool$i$i$i96 ? $34 : $conv$i$i;
      $sub = (($cond$i) + -1)|0;
      $cmp52 = ($__dg$0>>>0)<($sub>>>0);
      $inc = $cmp52&1;
      $inc$__dg$0 = (($inc) + ($__dg$0))|0;
      $__dc$1 = 0;$__dg$1 = $inc$__dg$0;
     } else {
      $__dc$1 = $__dc$0;$__dg$1 = $__dg$0;
     }
     $35 = HEAP8[$__p$0>>0]|0;
     $vtable$i65 = HEAP32[$call$i>>2]|0;
     $vfn$i66 = ((($vtable$i65)) + 44|0);
     $36 = HEAP32[$vfn$i66>>2]|0;
     __THREW__ = 0;
     $call$i6768 = (invoke_iii($36|0,($call$i|0),($35|0))|0);
     $37 = __THREW__; __THREW__ = 0;
     $38 = $37&1;
     if ($38) {
      label = 28;
      break L1;
     }
     $39 = HEAP32[$__oe>>2]|0;
     $incdec$ptr58 = ((($39)) + 4|0);
     HEAP32[$__oe>>2] = $incdec$ptr58;
     HEAP32[$39>>2] = $call$i6768;
     $inc59 = (($__dc$1) + 1)|0;
     $incdec$ptr60 = ((($__p$0)) + 1|0);
     $__dc$0 = $inc59;$__dg$0 = $__dg$1;$__p$0 = $incdec$ptr60;
    }
    $sub$ptr$lhs$cast61 = $__nf$1;
    $sub$ptr$sub63 = (($sub$ptr$lhs$cast61) - ($sub$ptr$rhs$cast))|0;
    $add$ptr64 = (($__ob) + ($sub$ptr$sub63<<2)|0);
    $27 = HEAP32[$__oe>>2]|0;
    $cmp$i$i104 = ($add$ptr64|0)==($27|0);
    if ($cmp$i$i104) {
     $40 = $add$ptr64;
     label = 27;
    } else {
     $__first$addr$0$i$i105 = $add$ptr64;$__last$addr$0$i$i106 = $27;
     while(1) {
      $incdec$ptr$i$i107 = ((($__last$addr$0$i$i106)) + -4|0);
      $cmp1$i$i108 = ($__first$addr$0$i$i105>>>0)<($incdec$ptr$i$i107>>>0);
      if (!($cmp1$i$i108)) {
       break;
      }
      $28 = HEAP32[$__first$addr$0$i$i105>>2]|0;
      $29 = HEAP32[$incdec$ptr$i$i107>>2]|0;
      HEAP32[$__first$addr$0$i$i105>>2] = $29;
      HEAP32[$incdec$ptr$i$i107>>2] = $28;
      $incdec$ptr2$i$i110 = ((($__first$addr$0$i$i105)) + 4|0);
      $__first$addr$0$i$i105 = $incdec$ptr2$i$i110;$__last$addr$0$i$i106 = $incdec$ptr$i$i107;
     }
     $$pre = HEAP32[$__oe>>2]|0;
     $40 = $$pre;
     label = 27;
    }
   }
  }
 } while(0);
 if ((label|0) == 27) {
  $cmp71 = ($__np|0)==($__ne|0);
  $sub$ptr$lhs$cast74 = $__np;
  $sub$ptr$sub76 = (($sub$ptr$lhs$cast74) - ($sub$ptr$rhs$cast))|0;
  $add$ptr77 = (($__ob) + ($sub$ptr$sub76<<2)|0);
  $storemerge = $cmp71 ? $40 : $add$ptr77;
  HEAP32[$__op>>2] = $storemerge;
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grouping);
  STACKTOP = sp;return;
 }
 else if ((label|0) == 28) {
  $41 = ___cxa_find_matching_catch_2()|0;
  $42 = tempRet0;
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grouping);
  ___resumeException($41|0);
  // unreachable;
 }
}
function __ZNSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__26locale5facetD2Ev($this);
 return;
}
function __ZNSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__26locale5facetD2Ev($this);
 __ZdlPv($this);
 return;
}
function __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE13do_date_orderEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 2;
}
function __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11do_get_timeES4_S4_RNS_8ios_baseERjP2tm($this,$__b,$__e,$__iob,$__err,$__tm) {
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__tm = $__tm|0;
 var $0 = 0, $1 = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $agg$tmp2 = 0, $agg$tmp2$byval_copy = 0, $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $agg$tmp2$byval_copy = sp + 12|0;
 $agg$tmp$byval_copy = sp + 8|0;
 $agg$tmp = sp + 4|0;
 $agg$tmp2 = sp;
 $0 = HEAP32[$__b>>2]|0;
 HEAP32[$agg$tmp>>2] = $0;
 $1 = HEAP32[$__e>>2]|0;
 HEAP32[$agg$tmp2>>2] = $1;
 ;HEAP32[$agg$tmp$byval_copy>>2]=HEAP32[$agg$tmp>>2]|0;
 ;HEAP32[$agg$tmp2$byval_copy>>2]=HEAP32[$agg$tmp2>>2]|0;
 $call = (__ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_($this,$agg$tmp$byval_copy,$agg$tmp2$byval_copy,$__iob,$__err,$__tm,16469,(16477))|0);
 STACKTOP = sp;return ($call|0);
}
function __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11do_get_dateES4_S4_RNS_8ios_baseERjP2tm($this,$__b,$__e,$__iob,$__err,$__tm) {
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__tm = $__tm|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $__size_$i$i$i = 0, $__size_$i3$i = 0, $add$ptr = 0, $add$ptr6 = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $agg$tmp2 = 0, $agg$tmp2$byval_copy = 0, $call = 0, $call7 = 0, $cond$i = 0, $cond$i$i = 0, $conv$i$i = 0, $tobool$i$i$i = 0;
 var $vfn = 0, $vtable = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $agg$tmp2$byval_copy = sp + 12|0;
 $agg$tmp$byval_copy = sp + 8|0;
 $agg$tmp = sp + 4|0;
 $agg$tmp2 = sp;
 $add$ptr = ((($this)) + 8|0);
 $vtable = HEAP32[$add$ptr>>2]|0;
 $vfn = ((($vtable)) + 20|0);
 $0 = HEAP32[$vfn>>2]|0;
 $call = (FUNCTION_TABLE_ii[$0 & 1023]($add$ptr)|0);
 $1 = HEAP32[$__b>>2]|0;
 HEAP32[$agg$tmp>>2] = $1;
 $2 = HEAP32[$__e>>2]|0;
 HEAP32[$agg$tmp2>>2] = $2;
 $__size_$i$i$i = ((($call)) + 11|0);
 $3 = HEAP8[$__size_$i$i$i>>0]|0;
 $tobool$i$i$i = ($3<<24>>24)<(0);
 $4 = HEAP32[$call>>2]|0;
 $cond$i$i = $tobool$i$i$i ? $4 : $call;
 $__size_$i3$i = ((($call)) + 4|0);
 $5 = HEAP32[$__size_$i3$i>>2]|0;
 $conv$i$i = $3&255;
 $cond$i = $tobool$i$i$i ? $5 : $conv$i$i;
 $add$ptr6 = (($cond$i$i) + ($cond$i)|0);
 ;HEAP32[$agg$tmp$byval_copy>>2]=HEAP32[$agg$tmp>>2]|0;
 ;HEAP32[$agg$tmp2$byval_copy>>2]=HEAP32[$agg$tmp2>>2]|0;
 $call7 = (__ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_($this,$agg$tmp$byval_copy,$agg$tmp2$byval_copy,$__iob,$__err,$__tm,$cond$i$i,$add$ptr6)|0);
 STACKTOP = sp;return ($call7|0);
}
function __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE14do_get_weekdayES4_S4_RNS_8ios_baseERjP2tm($this,$__b,$__e,$__iob,$__err,$__tm) {
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__tm = $__tm|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $call$i2 = 0, $ref$tmp = 0, $retval$sroa$0$0$copyload = 0, $tm_wday = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $agg$tmp$byval_copy = sp + 8|0;
 $ref$tmp = sp + 4|0;
 $agg$tmp = sp;
 __ZNKSt3__28ios_base6getlocEv($ref$tmp,$__iob);
 __THREW__ = 0;
 $call$i2 = (invoke_iii(380,($ref$tmp|0),(20096|0))|0);
 $0 = __THREW__; __THREW__ = 0;
 $1 = $0&1;
 if ($1) {
  $3 = ___cxa_find_matching_catch_2()|0;
  $4 = tempRet0;
  __ZNSt3__26localeD2Ev($ref$tmp);
  ___resumeException($3|0);
  // unreachable;
 } else {
  __ZNSt3__26localeD2Ev($ref$tmp);
  $tm_wday = ((($__tm)) + 24|0);
  $2 = HEAP32[$__e>>2]|0;
  HEAP32[$agg$tmp>>2] = $2;
  ;HEAP32[$agg$tmp$byval_copy>>2]=HEAP32[$agg$tmp>>2]|0;
  __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__get_weekdaynameERiRS4_S4_RjRKNS_5ctypeIcEE($this,$tm_wday,$__b,$agg$tmp$byval_copy,$__err,$call$i2);
  $retval$sroa$0$0$copyload = HEAP32[$__b>>2]|0;
  STACKTOP = sp;return ($retval$sroa$0$0$copyload|0);
 }
 return (0)|0;
}
function __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE16do_get_monthnameES4_S4_RNS_8ios_baseERjP2tm($this,$__b,$__e,$__iob,$__err,$__tm) {
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__tm = $__tm|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $call$i2 = 0, $ref$tmp = 0, $retval$sroa$0$0$copyload = 0, $tm_mon = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $agg$tmp$byval_copy = sp + 8|0;
 $ref$tmp = sp + 4|0;
 $agg$tmp = sp;
 __ZNKSt3__28ios_base6getlocEv($ref$tmp,$__iob);
 __THREW__ = 0;
 $call$i2 = (invoke_iii(380,($ref$tmp|0),(20096|0))|0);
 $0 = __THREW__; __THREW__ = 0;
 $1 = $0&1;
 if ($1) {
  $3 = ___cxa_find_matching_catch_2()|0;
  $4 = tempRet0;
  __ZNSt3__26localeD2Ev($ref$tmp);
  ___resumeException($3|0);
  // unreachable;
 } else {
  __ZNSt3__26localeD2Ev($ref$tmp);
  $tm_mon = ((($__tm)) + 16|0);
  $2 = HEAP32[$__e>>2]|0;
  HEAP32[$agg$tmp>>2] = $2;
  ;HEAP32[$agg$tmp$byval_copy>>2]=HEAP32[$agg$tmp>>2]|0;
  __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE15__get_monthnameERiRS4_S4_RjRKNS_5ctypeIcEE($this,$tm_mon,$__b,$agg$tmp$byval_copy,$__err,$call$i2);
  $retval$sroa$0$0$copyload = HEAP32[$__b>>2]|0;
  STACKTOP = sp;return ($retval$sroa$0$0$copyload|0);
 }
 return (0)|0;
}
function __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11do_get_yearES4_S4_RNS_8ios_baseERjP2tm($this,$__b,$__e,$__iob,$__err,$__tm) {
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__tm = $__tm|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $call$i2 = 0, $ref$tmp = 0, $retval$sroa$0$0$copyload = 0, $tm_year = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $agg$tmp$byval_copy = sp + 8|0;
 $ref$tmp = sp + 4|0;
 $agg$tmp = sp;
 __ZNKSt3__28ios_base6getlocEv($ref$tmp,$__iob);
 __THREW__ = 0;
 $call$i2 = (invoke_iii(380,($ref$tmp|0),(20096|0))|0);
 $0 = __THREW__; __THREW__ = 0;
 $1 = $0&1;
 if ($1) {
  $3 = ___cxa_find_matching_catch_2()|0;
  $4 = tempRet0;
  __ZNSt3__26localeD2Ev($ref$tmp);
  ___resumeException($3|0);
  // unreachable;
 } else {
  __ZNSt3__26localeD2Ev($ref$tmp);
  $tm_year = ((($__tm)) + 20|0);
  $2 = HEAP32[$__e>>2]|0;
  HEAP32[$agg$tmp>>2] = $2;
  ;HEAP32[$agg$tmp$byval_copy>>2]=HEAP32[$agg$tmp>>2]|0;
  __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE10__get_yearERiRS4_S4_RjRKNS_5ctypeIcEE($this,$tm_year,$__b,$agg$tmp$byval_copy,$__err,$call$i2);
  $retval$sroa$0$0$copyload = HEAP32[$__b>>2]|0;
  STACKTOP = sp;return ($retval$sroa$0$0$copyload|0);
 }
 return (0)|0;
}
function __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjP2tmcc($this,$__b,$__e,$__iob,$__err,$__tm,$__fmt,$0) {
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__tm = $__tm|0;
 $__fmt = $__fmt|0;
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__size_$i$i$i = 0, $__size_$i$i$i92 = 0, $__size_$i3$i = 0, $__size_$i3$i112 = 0, $add$ptr = 0, $add$ptr12 = 0, $add$ptr87 = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $agg$tmp15 = 0, $agg$tmp15$byval_copy = 0, $agg$tmp18 = 0, $agg$tmp18$byval_copy = 0, $agg$tmp19 = 0, $agg$tmp19$byval_copy = 0;
 var $agg$tmp24 = 0, $agg$tmp24$byval_copy = 0, $agg$tmp25 = 0, $agg$tmp25$byval_copy = 0, $agg$tmp29 = 0, $agg$tmp29$byval_copy = 0, $agg$tmp3 = 0, $agg$tmp3$byval_copy = 0, $agg$tmp32 = 0, $agg$tmp32$byval_copy = 0, $agg$tmp34 = 0, $agg$tmp34$byval_copy = 0, $agg$tmp37 = 0, $agg$tmp37$byval_copy = 0, $agg$tmp39 = 0, $agg$tmp39$byval_copy = 0, $agg$tmp41 = 0, $agg$tmp41$byval_copy = 0, $agg$tmp44 = 0, $agg$tmp44$byval_copy = 0;
 var $agg$tmp47 = 0, $agg$tmp47$byval_copy = 0, $agg$tmp48 = 0, $agg$tmp48$byval_copy = 0, $agg$tmp53 = 0, $agg$tmp53$byval_copy = 0, $agg$tmp54 = 0, $agg$tmp54$byval_copy = 0, $agg$tmp58 = 0, $agg$tmp58$byval_copy = 0, $agg$tmp61 = 0, $agg$tmp61$byval_copy = 0, $agg$tmp62 = 0, $agg$tmp62$byval_copy = 0, $agg$tmp67 = 0, $agg$tmp67$byval_copy = 0, $agg$tmp7 = 0, $agg$tmp7$byval_copy = 0, $agg$tmp71 = 0, $agg$tmp71$byval_copy = 0;
 var $agg$tmp72 = 0, $agg$tmp72$byval_copy = 0, $agg$tmp8 = 0, $agg$tmp8$byval_copy = 0, $agg$tmp82 = 0, $agg$tmp82$byval_copy = 0, $agg$tmp83 = 0, $agg$tmp83$byval_copy = 0, $agg$tmp91 = 0, $agg$tmp91$byval_copy = 0, $agg$tmp94 = 0, $agg$tmp94$byval_copy = 0, $agg$tmp96 = 0, $agg$tmp96$byval_copy = 0, $call$i81 = 0, $call13 = 0, $call20 = 0, $call26 = 0, $call49 = 0, $call5 = 0;
 var $call55 = 0, $call63 = 0, $call73 = 0, $call80 = 0, $call88 = 0, $cond$i = 0, $cond$i$i = 0, $cond$i$i98 = 0, $cond$i116 = 0, $conv = 0, $conv$i$i = 0, $conv$i$i114 = 0, $or = 0, $ref$tmp = 0, $retval$sroa$0$0 = 0, $retval$sroa$0$0$copyload = 0, $tm_hour = 0, $tm_mday = 0, $tm_min = 0, $tm_mon = 0;
 var $tm_wday = 0, $tm_yday = 0, $tm_year = 0, $tobool$i$i$i = 0, $tobool$i$i$i93 = 0, $vfn = 0, $vfn70 = 0, $vfn79 = 0, $vtable = 0, $vtable69 = 0, $vtable78 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 256|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(256|0);
 $agg$tmp96$byval_copy = sp + 248|0;
 $agg$tmp94$byval_copy = sp + 244|0;
 $agg$tmp91$byval_copy = sp + 240|0;
 $agg$tmp83$byval_copy = sp + 236|0;
 $agg$tmp82$byval_copy = sp + 232|0;
 $agg$tmp72$byval_copy = sp + 228|0;
 $agg$tmp71$byval_copy = sp + 224|0;
 $agg$tmp67$byval_copy = sp + 220|0;
 $agg$tmp62$byval_copy = sp + 216|0;
 $agg$tmp61$byval_copy = sp + 212|0;
 $agg$tmp58$byval_copy = sp + 208|0;
 $agg$tmp54$byval_copy = sp + 204|0;
 $agg$tmp53$byval_copy = sp + 200|0;
 $agg$tmp48$byval_copy = sp + 196|0;
 $agg$tmp47$byval_copy = sp + 192|0;
 $agg$tmp44$byval_copy = sp + 188|0;
 $agg$tmp41$byval_copy = sp + 184|0;
 $agg$tmp39$byval_copy = sp + 180|0;
 $agg$tmp37$byval_copy = sp + 176|0;
 $agg$tmp34$byval_copy = sp + 172|0;
 $agg$tmp32$byval_copy = sp + 168|0;
 $agg$tmp29$byval_copy = sp + 164|0;
 $agg$tmp25$byval_copy = sp + 160|0;
 $agg$tmp24$byval_copy = sp + 156|0;
 $agg$tmp19$byval_copy = sp + 152|0;
 $agg$tmp18$byval_copy = sp + 148|0;
 $agg$tmp15$byval_copy = sp + 144|0;
 $agg$tmp8$byval_copy = sp + 140|0;
 $agg$tmp7$byval_copy = sp + 136|0;
 $agg$tmp3$byval_copy = sp + 132|0;
 $agg$tmp$byval_copy = sp + 128|0;
 $ref$tmp = sp + 124|0;
 $agg$tmp = sp + 120|0;
 $agg$tmp3 = sp + 116|0;
 $agg$tmp7 = sp + 112|0;
 $agg$tmp8 = sp + 108|0;
 $agg$tmp15 = sp + 104|0;
 $agg$tmp18 = sp + 100|0;
 $agg$tmp19 = sp + 96|0;
 $agg$tmp24 = sp + 92|0;
 $agg$tmp25 = sp + 88|0;
 $agg$tmp29 = sp + 84|0;
 $agg$tmp32 = sp + 80|0;
 $agg$tmp34 = sp + 76|0;
 $agg$tmp37 = sp + 72|0;
 $agg$tmp39 = sp + 68|0;
 $agg$tmp41 = sp + 64|0;
 $agg$tmp44 = sp + 60|0;
 $agg$tmp47 = sp + 56|0;
 $agg$tmp48 = sp + 52|0;
 $agg$tmp53 = sp + 48|0;
 $agg$tmp54 = sp + 44|0;
 $agg$tmp58 = sp + 40|0;
 $agg$tmp61 = sp + 36|0;
 $agg$tmp62 = sp + 32|0;
 $agg$tmp67 = sp + 28|0;
 $agg$tmp71 = sp + 24|0;
 $agg$tmp72 = sp + 20|0;
 $agg$tmp82 = sp + 16|0;
 $agg$tmp83 = sp + 12|0;
 $agg$tmp91 = sp + 8|0;
 $agg$tmp94 = sp + 4|0;
 $agg$tmp96 = sp;
 HEAP32[$__err>>2] = 0;
 __ZNKSt3__28ios_base6getlocEv($ref$tmp,$__iob);
 __THREW__ = 0;
 $call$i81 = (invoke_iii(380,($ref$tmp|0),(20096|0))|0);
 $1 = __THREW__; __THREW__ = 0;
 $2 = $1&1;
 if ($2) {
  $3 = ___cxa_find_matching_catch_2()|0;
  $4 = tempRet0;
  __ZNSt3__26localeD2Ev($ref$tmp);
  ___resumeException($3|0);
  // unreachable;
 }
 __ZNSt3__26localeD2Ev($ref$tmp);
 $conv = $__fmt << 24 >> 24;
 $tm_mon = ((($__tm)) + 16|0);
 $tm_hour = ((($__tm)) + 8|0);
 $tm_year = ((($__tm)) + 20|0);
 $tm_wday = ((($__tm)) + 24|0);
 $add$ptr = ((($this)) + 8|0);
 do {
  switch ($conv|0) {
  case 65: case 97:  {
   $5 = HEAP32[$__e>>2]|0;
   HEAP32[$agg$tmp>>2] = $5;
   ;HEAP32[$agg$tmp$byval_copy>>2]=HEAP32[$agg$tmp>>2]|0;
   __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__get_weekdaynameERiRS4_S4_RjRKNS_5ctypeIcEE($this,$tm_wday,$__b,$agg$tmp$byval_copy,$__err,$call$i81);
   label = 28;
   break;
  }
  case 104: case 66: case 98:  {
   $6 = HEAP32[$__e>>2]|0;
   HEAP32[$agg$tmp3>>2] = $6;
   ;HEAP32[$agg$tmp3$byval_copy>>2]=HEAP32[$agg$tmp3>>2]|0;
   __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE15__get_monthnameERiRS4_S4_RjRKNS_5ctypeIcEE($this,$tm_mon,$__b,$agg$tmp3$byval_copy,$__err,$call$i81);
   label = 28;
   break;
  }
  case 99:  {
   $vtable = HEAP32[$add$ptr>>2]|0;
   $vfn = ((($vtable)) + 12|0);
   $7 = HEAP32[$vfn>>2]|0;
   $call5 = (FUNCTION_TABLE_ii[$7 & 1023]($add$ptr)|0);
   $8 = HEAP32[$__b>>2]|0;
   HEAP32[$agg$tmp7>>2] = $8;
   $9 = HEAP32[$__e>>2]|0;
   HEAP32[$agg$tmp8>>2] = $9;
   $__size_$i$i$i = ((($call5)) + 11|0);
   $10 = HEAP8[$__size_$i$i$i>>0]|0;
   $tobool$i$i$i = ($10<<24>>24)<(0);
   $11 = HEAP32[$call5>>2]|0;
   $cond$i$i = $tobool$i$i$i ? $11 : $call5;
   $__size_$i3$i = ((($call5)) + 4|0);
   $12 = HEAP32[$__size_$i3$i>>2]|0;
   $conv$i$i = $10&255;
   $cond$i = $tobool$i$i$i ? $12 : $conv$i$i;
   $add$ptr12 = (($cond$i$i) + ($cond$i)|0);
   ;HEAP32[$agg$tmp7$byval_copy>>2]=HEAP32[$agg$tmp7>>2]|0;
   ;HEAP32[$agg$tmp8$byval_copy>>2]=HEAP32[$agg$tmp8>>2]|0;
   $call13 = (__ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_($this,$agg$tmp7$byval_copy,$agg$tmp8$byval_copy,$__iob,$__err,$__tm,$cond$i$i,$add$ptr12)|0);
   HEAP32[$__b>>2] = $call13;
   label = 28;
   break;
  }
  case 101: case 100:  {
   $tm_mday = ((($__tm)) + 12|0);
   $13 = HEAP32[$__e>>2]|0;
   HEAP32[$agg$tmp15>>2] = $13;
   ;HEAP32[$agg$tmp15$byval_copy>>2]=HEAP32[$agg$tmp15>>2]|0;
   __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE9__get_dayERiRS4_S4_RjRKNS_5ctypeIcEE($this,$tm_mday,$__b,$agg$tmp15$byval_copy,$__err,$call$i81);
   label = 28;
   break;
  }
  case 68:  {
   $14 = HEAP32[$__b>>2]|0;
   HEAP32[$agg$tmp18>>2] = $14;
   $15 = HEAP32[$__e>>2]|0;
   HEAP32[$agg$tmp19>>2] = $15;
   ;HEAP32[$agg$tmp18$byval_copy>>2]=HEAP32[$agg$tmp18>>2]|0;
   ;HEAP32[$agg$tmp19$byval_copy>>2]=HEAP32[$agg$tmp19>>2]|0;
   $call20 = (__ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_($this,$agg$tmp18$byval_copy,$agg$tmp19$byval_copy,$__iob,$__err,$__tm,16429,(16437))|0);
   HEAP32[$__b>>2] = $call20;
   label = 28;
   break;
  }
  case 70:  {
   $16 = HEAP32[$__b>>2]|0;
   HEAP32[$agg$tmp24>>2] = $16;
   $17 = HEAP32[$__e>>2]|0;
   HEAP32[$agg$tmp25>>2] = $17;
   ;HEAP32[$agg$tmp24$byval_copy>>2]=HEAP32[$agg$tmp24>>2]|0;
   ;HEAP32[$agg$tmp25$byval_copy>>2]=HEAP32[$agg$tmp25>>2]|0;
   $call26 = (__ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_($this,$agg$tmp24$byval_copy,$agg$tmp25$byval_copy,$__iob,$__err,$__tm,16437,(16445))|0);
   HEAP32[$__b>>2] = $call26;
   label = 28;
   break;
  }
  case 72:  {
   $18 = HEAP32[$__e>>2]|0;
   HEAP32[$agg$tmp29>>2] = $18;
   ;HEAP32[$agg$tmp29$byval_copy>>2]=HEAP32[$agg$tmp29>>2]|0;
   __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE10__get_hourERiRS4_S4_RjRKNS_5ctypeIcEE($this,$tm_hour,$__b,$agg$tmp29$byval_copy,$__err,$call$i81);
   label = 28;
   break;
  }
  case 73:  {
   $19 = HEAP32[$__e>>2]|0;
   HEAP32[$agg$tmp32>>2] = $19;
   ;HEAP32[$agg$tmp32$byval_copy>>2]=HEAP32[$agg$tmp32>>2]|0;
   __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE13__get_12_hourERiRS4_S4_RjRKNS_5ctypeIcEE($this,$tm_hour,$__b,$agg$tmp32$byval_copy,$__err,$call$i81);
   label = 28;
   break;
  }
  case 106:  {
   $tm_yday = ((($__tm)) + 28|0);
   $20 = HEAP32[$__e>>2]|0;
   HEAP32[$agg$tmp34>>2] = $20;
   ;HEAP32[$agg$tmp34$byval_copy>>2]=HEAP32[$agg$tmp34>>2]|0;
   __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE18__get_day_year_numERiRS4_S4_RjRKNS_5ctypeIcEE($this,$tm_yday,$__b,$agg$tmp34$byval_copy,$__err,$call$i81);
   label = 28;
   break;
  }
  case 109:  {
   $21 = HEAP32[$__e>>2]|0;
   HEAP32[$agg$tmp37>>2] = $21;
   ;HEAP32[$agg$tmp37$byval_copy>>2]=HEAP32[$agg$tmp37>>2]|0;
   __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11__get_monthERiRS4_S4_RjRKNS_5ctypeIcEE($this,$tm_mon,$__b,$agg$tmp37$byval_copy,$__err,$call$i81);
   label = 28;
   break;
  }
  case 77:  {
   $tm_min = ((($__tm)) + 4|0);
   $22 = HEAP32[$__e>>2]|0;
   HEAP32[$agg$tmp39>>2] = $22;
   ;HEAP32[$agg$tmp39$byval_copy>>2]=HEAP32[$agg$tmp39>>2]|0;
   __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE12__get_minuteERiRS4_S4_RjRKNS_5ctypeIcEE($this,$tm_min,$__b,$agg$tmp39$byval_copy,$__err,$call$i81);
   label = 28;
   break;
  }
  case 116: case 110:  {
   $23 = HEAP32[$__e>>2]|0;
   HEAP32[$agg$tmp41>>2] = $23;
   ;HEAP32[$agg$tmp41$byval_copy>>2]=HEAP32[$agg$tmp41>>2]|0;
   __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__get_white_spaceERS4_S4_RjRKNS_5ctypeIcEE($this,$__b,$agg$tmp41$byval_copy,$__err,$call$i81);
   label = 28;
   break;
  }
  case 112:  {
   $24 = HEAP32[$__e>>2]|0;
   HEAP32[$agg$tmp44>>2] = $24;
   ;HEAP32[$agg$tmp44$byval_copy>>2]=HEAP32[$agg$tmp44>>2]|0;
   __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11__get_am_pmERiRS4_S4_RjRKNS_5ctypeIcEE($this,$tm_hour,$__b,$agg$tmp44$byval_copy,$__err,$call$i81);
   label = 28;
   break;
  }
  case 114:  {
   $25 = HEAP32[$__b>>2]|0;
   HEAP32[$agg$tmp47>>2] = $25;
   $26 = HEAP32[$__e>>2]|0;
   HEAP32[$agg$tmp48>>2] = $26;
   ;HEAP32[$agg$tmp47$byval_copy>>2]=HEAP32[$agg$tmp47>>2]|0;
   ;HEAP32[$agg$tmp48$byval_copy>>2]=HEAP32[$agg$tmp48>>2]|0;
   $call49 = (__ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_($this,$agg$tmp47$byval_copy,$agg$tmp48$byval_copy,$__iob,$__err,$__tm,16445,(16456))|0);
   HEAP32[$__b>>2] = $call49;
   label = 28;
   break;
  }
  case 82:  {
   $27 = HEAP32[$__b>>2]|0;
   HEAP32[$agg$tmp53>>2] = $27;
   $28 = HEAP32[$__e>>2]|0;
   HEAP32[$agg$tmp54>>2] = $28;
   ;HEAP32[$agg$tmp53$byval_copy>>2]=HEAP32[$agg$tmp53>>2]|0;
   ;HEAP32[$agg$tmp54$byval_copy>>2]=HEAP32[$agg$tmp54>>2]|0;
   $call55 = (__ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_($this,$agg$tmp53$byval_copy,$agg$tmp54$byval_copy,$__iob,$__err,$__tm,16456,(16461))|0);
   HEAP32[$__b>>2] = $call55;
   label = 28;
   break;
  }
  case 83:  {
   $29 = HEAP32[$__e>>2]|0;
   HEAP32[$agg$tmp58>>2] = $29;
   ;HEAP32[$agg$tmp58$byval_copy>>2]=HEAP32[$agg$tmp58>>2]|0;
   __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE12__get_secondERiRS4_S4_RjRKNS_5ctypeIcEE($this,$__tm,$__b,$agg$tmp58$byval_copy,$__err,$call$i81);
   label = 28;
   break;
  }
  case 84:  {
   $30 = HEAP32[$__b>>2]|0;
   HEAP32[$agg$tmp61>>2] = $30;
   $31 = HEAP32[$__e>>2]|0;
   HEAP32[$agg$tmp62>>2] = $31;
   ;HEAP32[$agg$tmp61$byval_copy>>2]=HEAP32[$agg$tmp61>>2]|0;
   ;HEAP32[$agg$tmp62$byval_copy>>2]=HEAP32[$agg$tmp62>>2]|0;
   $call63 = (__ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_($this,$agg$tmp61$byval_copy,$agg$tmp62$byval_copy,$__iob,$__err,$__tm,16461,(16469))|0);
   HEAP32[$__b>>2] = $call63;
   label = 28;
   break;
  }
  case 119:  {
   $32 = HEAP32[$__e>>2]|0;
   HEAP32[$agg$tmp67>>2] = $32;
   ;HEAP32[$agg$tmp67$byval_copy>>2]=HEAP32[$agg$tmp67>>2]|0;
   __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE13__get_weekdayERiRS4_S4_RjRKNS_5ctypeIcEE($this,$tm_wday,$__b,$agg$tmp67$byval_copy,$__err,$call$i81);
   label = 28;
   break;
  }
  case 120:  {
   $vtable69 = HEAP32[$this>>2]|0;
   $vfn70 = ((($vtable69)) + 20|0);
   $33 = HEAP32[$vfn70>>2]|0;
   $34 = HEAP32[$__b>>2]|0;
   HEAP32[$agg$tmp71>>2] = $34;
   $35 = HEAP32[$__e>>2]|0;
   HEAP32[$agg$tmp72>>2] = $35;
   ;HEAP32[$agg$tmp71$byval_copy>>2]=HEAP32[$agg$tmp71>>2]|0;
   ;HEAP32[$agg$tmp72$byval_copy>>2]=HEAP32[$agg$tmp72>>2]|0;
   $call73 = (FUNCTION_TABLE_iiiiiii[$33 & 511]($this,$agg$tmp71$byval_copy,$agg$tmp72$byval_copy,$__iob,$__err,$__tm)|0);
   $retval$sroa$0$0 = $call73;
   break;
  }
  case 88:  {
   $vtable78 = HEAP32[$add$ptr>>2]|0;
   $vfn79 = ((($vtable78)) + 24|0);
   $36 = HEAP32[$vfn79>>2]|0;
   $call80 = (FUNCTION_TABLE_ii[$36 & 1023]($add$ptr)|0);
   $37 = HEAP32[$__b>>2]|0;
   HEAP32[$agg$tmp82>>2] = $37;
   $38 = HEAP32[$__e>>2]|0;
   HEAP32[$agg$tmp83>>2] = $38;
   $__size_$i$i$i92 = ((($call80)) + 11|0);
   $39 = HEAP8[$__size_$i$i$i92>>0]|0;
   $tobool$i$i$i93 = ($39<<24>>24)<(0);
   $40 = HEAP32[$call80>>2]|0;
   $cond$i$i98 = $tobool$i$i$i93 ? $40 : $call80;
   $__size_$i3$i112 = ((($call80)) + 4|0);
   $41 = HEAP32[$__size_$i3$i112>>2]|0;
   $conv$i$i114 = $39&255;
   $cond$i116 = $tobool$i$i$i93 ? $41 : $conv$i$i114;
   $add$ptr87 = (($cond$i$i98) + ($cond$i116)|0);
   ;HEAP32[$agg$tmp82$byval_copy>>2]=HEAP32[$agg$tmp82>>2]|0;
   ;HEAP32[$agg$tmp83$byval_copy>>2]=HEAP32[$agg$tmp83>>2]|0;
   $call88 = (__ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_($this,$agg$tmp82$byval_copy,$agg$tmp83$byval_copy,$__iob,$__err,$__tm,$cond$i$i98,$add$ptr87)|0);
   HEAP32[$__b>>2] = $call88;
   label = 28;
   break;
  }
  case 121:  {
   $42 = HEAP32[$__e>>2]|0;
   HEAP32[$agg$tmp91>>2] = $42;
   ;HEAP32[$agg$tmp91$byval_copy>>2]=HEAP32[$agg$tmp91>>2]|0;
   __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE10__get_yearERiRS4_S4_RjRKNS_5ctypeIcEE($this,$tm_year,$__b,$agg$tmp91$byval_copy,$__err,$call$i81);
   label = 28;
   break;
  }
  case 89:  {
   $43 = HEAP32[$__e>>2]|0;
   HEAP32[$agg$tmp94>>2] = $43;
   ;HEAP32[$agg$tmp94$byval_copy>>2]=HEAP32[$agg$tmp94>>2]|0;
   __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11__get_year4ERiRS4_S4_RjRKNS_5ctypeIcEE($this,$tm_year,$__b,$agg$tmp94$byval_copy,$__err,$call$i81);
   label = 28;
   break;
  }
  case 37:  {
   $44 = HEAP32[$__e>>2]|0;
   HEAP32[$agg$tmp96>>2] = $44;
   ;HEAP32[$agg$tmp96$byval_copy>>2]=HEAP32[$agg$tmp96>>2]|0;
   __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE13__get_percentERS4_S4_RjRKNS_5ctypeIcEE($this,$__b,$agg$tmp96$byval_copy,$__err,$call$i81);
   label = 28;
   break;
  }
  default: {
   $45 = HEAP32[$__err>>2]|0;
   $or = $45 | 4;
   HEAP32[$__err>>2] = $or;
   label = 28;
  }
  }
 } while(0);
 if ((label|0) == 28) {
  $retval$sroa$0$0$copyload = HEAP32[$__b>>2]|0;
  $retval$sroa$0$0 = $retval$sroa$0$0$copyload;
 }
 STACKTOP = sp;return ($retval$sroa$0$0|0);
}
function __ZNKSt3__220__time_get_c_storageIcE7__weeksEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $guard$uninitialized = 0, $tobool = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[18880]|0;
 $guard$uninitialized = ($0<<24>>24)==(0);
 do {
  if ($guard$uninitialized) {
   $1 = (___cxa_guard_acquire(18880)|0);
   $tobool = ($1|0)==(0);
   if (!($tobool)) {
    __THREW__ = 0;
    invoke_v(422);
    $2 = __THREW__; __THREW__ = 0;
    $3 = $2&1;
    if ($3) {
     $5 = ___cxa_find_matching_catch_2()|0;
     $6 = tempRet0;
     ___resumeException($5|0);
     // unreachable;
    } else {
     HEAP32[5242] = 20800;
     break;
    }
   }
  }
 } while(0);
 $4 = HEAP32[5242]|0;
 return ($4|0);
}
function __ZNKSt3__220__time_get_c_storageIcE8__monthsEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $guard$uninitialized = 0, $tobool = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[18864]|0;
 $guard$uninitialized = ($0<<24>>24)==(0);
 do {
  if ($guard$uninitialized) {
   $1 = (___cxa_guard_acquire(18864)|0);
   $tobool = ($1|0)==(0);
   if (!($tobool)) {
    __THREW__ = 0;
    invoke_v(423);
    $2 = __THREW__; __THREW__ = 0;
    $3 = $2&1;
    if ($3) {
     $5 = ___cxa_find_matching_catch_2()|0;
     $6 = tempRet0;
     ___resumeException($5|0);
     // unreachable;
    } else {
     HEAP32[5199] = 20508;
     break;
    }
   }
  }
 } while(0);
 $4 = HEAP32[5199]|0;
 return ($4|0);
}
function __ZNKSt3__220__time_get_c_storageIcE7__am_pmEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $guard$uninitialized = 0, $tobool = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[18848]|0;
 $guard$uninitialized = ($0<<24>>24)==(0);
 do {
  if ($guard$uninitialized) {
   $1 = (___cxa_guard_acquire(18848)|0);
   $tobool = ($1|0)==(0);
   if (!($tobool)) {
    __THREW__ = 0;
    invoke_v(424);
    $2 = __THREW__; __THREW__ = 0;
    $3 = $2&1;
    if ($3) {
     $5 = ___cxa_find_matching_catch_2()|0;
     $6 = tempRet0;
     ___resumeException($5|0);
     // unreachable;
    } else {
     HEAP32[5126] = 20216;
     break;
    }
   }
  }
 } while(0);
 $4 = HEAP32[5126]|0;
 return ($4|0);
}
function __ZNKSt3__220__time_get_c_storageIcE3__cEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $call$i1 = 0, $guard$uninitialized = 0, $tobool = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[18840]|0;
 $guard$uninitialized = ($0<<24>>24)==(0);
 do {
  if ($guard$uninitialized) {
   $1 = (___cxa_guard_acquire(18840)|0);
   $tobool = ($1|0)==(0);
   if (!($tobool)) {
    ;HEAP32[20204>>2]=0|0;HEAP32[20204+4>>2]=0|0;HEAP32[20204+8>>2]=0|0;
    __THREW__ = 0;
    $call$i1 = (invoke_ii(338,(16187|0))|0);
    $2 = __THREW__; __THREW__ = 0;
    $3 = $2&1;
    if (!($3)) {
     __THREW__ = 0;
     invoke_viii(339,(20204|0),(16187|0),($call$i1|0));
     $4 = __THREW__; __THREW__ = 0;
     $5 = $4&1;
     if (!($5)) {
      (___cxa_atexit((425|0),(20204|0),(___dso_handle|0))|0);
      break;
     }
    }
    $6 = ___cxa_find_matching_catch_2()|0;
    $7 = tempRet0;
    ___resumeException($6|0);
    // unreachable;
   }
  }
 } while(0);
 return (20204|0);
}
function __ZNKSt3__220__time_get_c_storageIcE3__rEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $call$i1 = 0, $guard$uninitialized = 0, $tobool = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[18832]|0;
 $guard$uninitialized = ($0<<24>>24)==(0);
 do {
  if ($guard$uninitialized) {
   $1 = (___cxa_guard_acquire(18832)|0);
   $tobool = ($1|0)==(0);
   if (!($tobool)) {
    ;HEAP32[20192>>2]=0|0;HEAP32[20192+4>>2]=0|0;HEAP32[20192+8>>2]=0|0;
    __THREW__ = 0;
    $call$i1 = (invoke_ii(338,(16175|0))|0);
    $2 = __THREW__; __THREW__ = 0;
    $3 = $2&1;
    if (!($3)) {
     __THREW__ = 0;
     invoke_viii(339,(20192|0),(16175|0),($call$i1|0));
     $4 = __THREW__; __THREW__ = 0;
     $5 = $4&1;
     if (!($5)) {
      (___cxa_atexit((425|0),(20192|0),(___dso_handle|0))|0);
      break;
     }
    }
    $6 = ___cxa_find_matching_catch_2()|0;
    $7 = tempRet0;
    ___resumeException($6|0);
    // unreachable;
   }
  }
 } while(0);
 return (20192|0);
}
function __ZNKSt3__220__time_get_c_storageIcE3__xEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $call$i1 = 0, $guard$uninitialized = 0, $tobool = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[18824]|0;
 $guard$uninitialized = ($0<<24>>24)==(0);
 do {
  if ($guard$uninitialized) {
   $1 = (___cxa_guard_acquire(18824)|0);
   $tobool = ($1|0)==(0);
   if (!($tobool)) {
    ;HEAP32[20180>>2]=0|0;HEAP32[20180+4>>2]=0|0;HEAP32[20180+8>>2]=0|0;
    __THREW__ = 0;
    $call$i1 = (invoke_ii(338,(16166|0))|0);
    $2 = __THREW__; __THREW__ = 0;
    $3 = $2&1;
    if (!($3)) {
     __THREW__ = 0;
     invoke_viii(339,(20180|0),(16166|0),($call$i1|0));
     $4 = __THREW__; __THREW__ = 0;
     $5 = $4&1;
     if (!($5)) {
      (___cxa_atexit((425|0),(20180|0),(___dso_handle|0))|0);
      break;
     }
    }
    $6 = ___cxa_find_matching_catch_2()|0;
    $7 = tempRet0;
    ___resumeException($6|0);
    // unreachable;
   }
  }
 } while(0);
 return (20180|0);
}
function __ZNKSt3__220__time_get_c_storageIcE3__XEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $call$i1 = 0, $guard$uninitialized = 0, $tobool = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[18816]|0;
 $guard$uninitialized = ($0<<24>>24)==(0);
 do {
  if ($guard$uninitialized) {
   $1 = (___cxa_guard_acquire(18816)|0);
   $tobool = ($1|0)==(0);
   if (!($tobool)) {
    ;HEAP32[20168>>2]=0|0;HEAP32[20168+4>>2]=0|0;HEAP32[20168+8>>2]=0|0;
    __THREW__ = 0;
    $call$i1 = (invoke_ii(338,(16157|0))|0);
    $2 = __THREW__; __THREW__ = 0;
    $3 = $2&1;
    if (!($3)) {
     __THREW__ = 0;
     invoke_viii(339,(20168|0),(16157|0),($call$i1|0));
     $4 = __THREW__; __THREW__ = 0;
     $5 = $4&1;
     if (!($5)) {
      (___cxa_atexit((425|0),(20168|0),(___dso_handle|0))|0);
      break;
     }
    }
    $6 = ___cxa_find_matching_catch_2()|0;
    $7 = tempRet0;
    ___resumeException($6|0);
    // unreachable;
   }
  }
 } while(0);
 return (20168|0);
}
function __ZNSt3__2L10init_am_pmEv() {
 var $0 = 0, $1 = 0, $__i$0$i$i = 0, $arrayctor$cur = 0, $arrayctor$done = 0, $arrayctor$next = 0, $arrayidx$i$i = 0, $exitcond$i$i = 0, $guard$uninitialized = 0, $inc$i$i = 0, $tobool = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[18856]|0;
 $guard$uninitialized = ($0<<24>>24)==(0);
 if ($guard$uninitialized) {
  $1 = (___cxa_guard_acquire(18856)|0);
  $tobool = ($1|0)==(0);
  if (!($tobool)) {
   $arrayctor$cur = 20216;
   while(1) {
    ;HEAP32[$arrayctor$cur>>2]=0|0;HEAP32[$arrayctor$cur+4>>2]=0|0;HEAP32[$arrayctor$cur+8>>2]=0|0;
    $__i$0$i$i = 0;
    while(1) {
     $exitcond$i$i = ($__i$0$i$i|0)==(3);
     if ($exitcond$i$i) {
      break;
     }
     $arrayidx$i$i = (($arrayctor$cur) + ($__i$0$i$i<<2)|0);
     HEAP32[$arrayidx$i$i>>2] = 0;
     $inc$i$i = (($__i$0$i$i) + 1)|0;
     $__i$0$i$i = $inc$i$i;
    }
    $arrayctor$next = ((($arrayctor$cur)) + 12|0);
    $arrayctor$done = ($arrayctor$next|0)==((20504)|0);
    if ($arrayctor$done) {
     break;
    } else {
     $arrayctor$cur = $arrayctor$next;
    }
   }
   (___cxa_atexit((426|0),(0|0),(___dso_handle|0))|0);
  }
 }
 (__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(20216,16208)|0);
 (__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc((20228),16211)|0);
 return;
}
function ___cxx_global_array_dtor_117($0) {
 $0 = $0|0;
 var $arraydestroy$done = 0, $arraydestroy$element = 0, $arraydestroy$elementPast = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $arraydestroy$elementPast = (20504);
 while(1) {
  $arraydestroy$element = ((($arraydestroy$elementPast)) + -12|0);
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($arraydestroy$element);
  $arraydestroy$done = ($arraydestroy$element|0)==(20216|0);
  if ($arraydestroy$done) {
   break;
  } else {
   $arraydestroy$elementPast = $arraydestroy$element;
  }
 }
 return;
}
function __ZNSt3__2L11init_monthsEv() {
 var $0 = 0, $1 = 0, $__i$0$i$i = 0, $arrayctor$cur = 0, $arrayctor$done = 0, $arrayctor$next = 0, $arrayidx$i$i = 0, $exitcond$i$i = 0, $guard$uninitialized = 0, $inc$i$i = 0, $tobool = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[18872]|0;
 $guard$uninitialized = ($0<<24>>24)==(0);
 if ($guard$uninitialized) {
  $1 = (___cxa_guard_acquire(18872)|0);
  $tobool = ($1|0)==(0);
  if (!($tobool)) {
   $arrayctor$cur = 20508;
   while(1) {
    ;HEAP32[$arrayctor$cur>>2]=0|0;HEAP32[$arrayctor$cur+4>>2]=0|0;HEAP32[$arrayctor$cur+8>>2]=0|0;
    $__i$0$i$i = 0;
    while(1) {
     $exitcond$i$i = ($__i$0$i$i|0)==(3);
     if ($exitcond$i$i) {
      break;
     }
     $arrayidx$i$i = (($arrayctor$cur) + ($__i$0$i$i<<2)|0);
     HEAP32[$arrayidx$i$i>>2] = 0;
     $inc$i$i = (($__i$0$i$i) + 1)|0;
     $__i$0$i$i = $inc$i$i;
    }
    $arrayctor$next = ((($arrayctor$cur)) + 12|0);
    $arrayctor$done = ($arrayctor$next|0)==((20796)|0);
    if ($arrayctor$done) {
     break;
    } else {
     $arrayctor$cur = $arrayctor$next;
    }
   }
   (___cxa_atexit((427|0),(0|0),(___dso_handle|0))|0);
  }
 }
 (__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(20508,16214)|0);
 (__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc((20520),16222)|0);
 (__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc((20532),16231)|0);
 (__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc((20544),16237)|0);
 (__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc((20556),16243)|0);
 (__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc((20568),16247)|0);
 (__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc((20580),16252)|0);
 (__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc((20592),16257)|0);
 (__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc((20604),16264)|0);
 (__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc((20616),16274)|0);
 (__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc((20628),16282)|0);
 (__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc((20640),16291)|0);
 (__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc((20652),16300)|0);
 (__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc((20664),16304)|0);
 (__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc((20676),16308)|0);
 (__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc((20688),16312)|0);
 (__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc((20700),16243)|0);
 (__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc((20712),16316)|0);
 (__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc((20724),16320)|0);
 (__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc((20736),16324)|0);
 (__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc((20748),16328)|0);
 (__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc((20760),16332)|0);
 (__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc((20772),16336)|0);
 (__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc((20784),16340)|0);
 return;
}
function ___cxx_global_array_dtor_69($0) {
 $0 = $0|0;
 var $arraydestroy$done = 0, $arraydestroy$element = 0, $arraydestroy$elementPast = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $arraydestroy$elementPast = (20796);
 while(1) {
  $arraydestroy$element = ((($arraydestroy$elementPast)) + -12|0);
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($arraydestroy$element);
  $arraydestroy$done = ($arraydestroy$element|0)==(20508|0);
  if ($arraydestroy$done) {
   break;
  } else {
   $arraydestroy$elementPast = $arraydestroy$element;
  }
 }
 return;
}
function __ZNSt3__2L10init_weeksEv() {
 var $0 = 0, $1 = 0, $__i$0$i$i = 0, $arrayctor$cur = 0, $arrayctor$done = 0, $arrayctor$next = 0, $arrayidx$i$i = 0, $exitcond$i$i = 0, $guard$uninitialized = 0, $inc$i$i = 0, $tobool = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[18888]|0;
 $guard$uninitialized = ($0<<24>>24)==(0);
 if ($guard$uninitialized) {
  $1 = (___cxa_guard_acquire(18888)|0);
  $tobool = ($1|0)==(0);
  if (!($tobool)) {
   $arrayctor$cur = 20800;
   while(1) {
    ;HEAP32[$arrayctor$cur>>2]=0|0;HEAP32[$arrayctor$cur+4>>2]=0|0;HEAP32[$arrayctor$cur+8>>2]=0|0;
    $__i$0$i$i = 0;
    while(1) {
     $exitcond$i$i = ($__i$0$i$i|0)==(3);
     if ($exitcond$i$i) {
      break;
     }
     $arrayidx$i$i = (($arrayctor$cur) + ($__i$0$i$i<<2)|0);
     HEAP32[$arrayidx$i$i>>2] = 0;
     $inc$i$i = (($__i$0$i$i) + 1)|0;
     $__i$0$i$i = $inc$i$i;
    }
    $arrayctor$next = ((($arrayctor$cur)) + 12|0);
    $arrayctor$done = ($arrayctor$next|0)==((20968)|0);
    if ($arrayctor$done) {
     break;
    } else {
     $arrayctor$cur = $arrayctor$next;
    }
   }
   (___cxa_atexit((428|0),(0|0),(___dso_handle|0))|0);
  }
 }
 (__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(20800,16344)|0);
 (__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc((20812),16351)|0);
 (__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc((20824),16358)|0);
 (__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc((20836),16366)|0);
 (__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc((20848),16376)|0);
 (__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc((20860),16385)|0);
 (__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc((20872),16392)|0);
 (__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc((20884),16401)|0);
 (__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc((20896),16405)|0);
 (__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc((20908),16409)|0);
 (__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc((20920),16413)|0);
 (__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc((20932),16417)|0);
 (__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc((20944),16421)|0);
 (__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc((20956),16425)|0);
 return;
}
function ___cxx_global_array_dtor($0) {
 $0 = $0|0;
 var $arraydestroy$done = 0, $arraydestroy$element = 0, $arraydestroy$elementPast = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $arraydestroy$elementPast = (20968);
 while(1) {
  $arraydestroy$element = ((($arraydestroy$elementPast)) + -12|0);
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($arraydestroy$element);
  $arraydestroy$done = ($arraydestroy$element|0)==(20800|0);
  if ($arraydestroy$done) {
   break;
  } else {
   $arraydestroy$elementPast = $arraydestroy$element;
  }
 }
 return;
}
function __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__get_weekdaynameERiRS4_S4_RjRKNS_5ctypeIcEE($this,$__w,$__b,$__e,$__err,$__ct) {
 $this = $this|0;
 $__w = $__w|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__err = $__err|0;
 $__ct = $__ct|0;
 var $0 = 0, $1 = 0, $add$ptr = 0, $add$ptr2 = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $call = 0, $call3 = 0, $cmp = 0, $rem = 0, $sub$ptr$div = 0, $sub$ptr$lhs$cast = 0, $sub$ptr$rhs$cast = 0, $sub$ptr$sub = 0, $vtable = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $agg$tmp$byval_copy = sp + 4|0;
 $agg$tmp = sp;
 $add$ptr = ((($this)) + 8|0);
 $vtable = HEAP32[$add$ptr>>2]|0;
 $0 = HEAP32[$vtable>>2]|0;
 $call = (FUNCTION_TABLE_ii[$0 & 1023]($add$ptr)|0);
 $1 = HEAP32[$__e>>2]|0;
 HEAP32[$agg$tmp>>2] = $1;
 $add$ptr2 = ((($call)) + 168|0);
 ;HEAP32[$agg$tmp$byval_copy>>2]=HEAP32[$agg$tmp>>2]|0;
 $call3 = (__ZNSt3__214__scan_keywordINS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEPKNS_12basic_stringIcS3_NS_9allocatorIcEEEENS_5ctypeIcEEEET0_RT_SE_SD_SD_RKT1_Rjb($__b,$agg$tmp$byval_copy,$call,$add$ptr2,$__ct,$__err,0)|0);
 $sub$ptr$lhs$cast = $call3;
 $sub$ptr$rhs$cast = $call;
 $sub$ptr$sub = (($sub$ptr$lhs$cast) - ($sub$ptr$rhs$cast))|0;
 $cmp = ($sub$ptr$sub|0)<(168);
 if ($cmp) {
  $sub$ptr$div = (($sub$ptr$sub|0) / 12)&-1;
  $rem = (($sub$ptr$div|0) % 7)&-1;
  HEAP32[$__w>>2] = $rem;
 }
 STACKTOP = sp;return;
}
function __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE15__get_monthnameERiRS4_S4_RjRKNS_5ctypeIcEE($this,$__m,$__b,$__e,$__err,$__ct) {
 $this = $this|0;
 $__m = $__m|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__err = $__err|0;
 $__ct = $__ct|0;
 var $0 = 0, $1 = 0, $add$ptr = 0, $add$ptr2 = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $call = 0, $call3 = 0, $cmp = 0, $rem = 0, $sub$ptr$div = 0, $sub$ptr$lhs$cast = 0, $sub$ptr$rhs$cast = 0, $sub$ptr$sub = 0, $vfn = 0, $vtable = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $agg$tmp$byval_copy = sp + 4|0;
 $agg$tmp = sp;
 $add$ptr = ((($this)) + 8|0);
 $vtable = HEAP32[$add$ptr>>2]|0;
 $vfn = ((($vtable)) + 4|0);
 $0 = HEAP32[$vfn>>2]|0;
 $call = (FUNCTION_TABLE_ii[$0 & 1023]($add$ptr)|0);
 $1 = HEAP32[$__e>>2]|0;
 HEAP32[$agg$tmp>>2] = $1;
 $add$ptr2 = ((($call)) + 288|0);
 ;HEAP32[$agg$tmp$byval_copy>>2]=HEAP32[$agg$tmp>>2]|0;
 $call3 = (__ZNSt3__214__scan_keywordINS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEPKNS_12basic_stringIcS3_NS_9allocatorIcEEEENS_5ctypeIcEEEET0_RT_SE_SD_SD_RKT1_Rjb($__b,$agg$tmp$byval_copy,$call,$add$ptr2,$__ct,$__err,0)|0);
 $sub$ptr$lhs$cast = $call3;
 $sub$ptr$rhs$cast = $call;
 $sub$ptr$sub = (($sub$ptr$lhs$cast) - ($sub$ptr$rhs$cast))|0;
 $cmp = ($sub$ptr$sub|0)<(288);
 if ($cmp) {
  $sub$ptr$div = (($sub$ptr$sub|0) / 12)&-1;
  $rem = (($sub$ptr$div|0) % 12)&-1;
  HEAP32[$__m>>2] = $rem;
 }
 STACKTOP = sp;return;
}
function __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_($this,$__b,$__e,$__iob,$__err,$__tm,$__fmtb,$__fmte) {
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__tm = $__tm|0;
 $__fmtb = $__fmtb|0;
 $__fmte = $__fmte|0;
 var $$ph = 0, $$pre = 0, $$pre$i$i$i163 = 0, $$pre$i$i$i69 = 0, $$pre$i17$i$i90 = 0, $$pre$i17$i$i90206 = 0, $$pre$i17$i$i90207 = 0, $$pre$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0;
 var $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $8 = 0, $9 = 0, $__cmd$0 = 0, $__einp_$i$i = 0, $__einp_$i$i$i$i = 0, $__einp_$i$i$i$i150 = 0, $__einp_$i$i$i$i56 = 0, $__einp_$i$i118 = 0, $__einp_$i$i4$i$i = 0, $__einp_$i$i4$i$i171 = 0, $__einp_$i$i4$i$i77 = 0, $__fmtb$addr$0$ph = 0, $__fmtb$addr$0$ph$be = 0, $__fmtb$addr$0$ph$sink = 0, $__ninp_$i$i = 0;
 var $__ninp_$i$i$i$i = 0, $__ninp_$i$i$i$i149 = 0, $__ninp_$i$i$i$i55 = 0, $__ninp_$i$i117 = 0, $__ninp_$i$i3$i$i = 0, $__ninp_$i$i3$i$i170 = 0, $__ninp_$i$i3$i$i76 = 0, $__opt$0 = 0, $__tab_$i = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $agg$tmp23 = 0, $agg$tmp23$byval_copy = 0, $and3$i = 0, $and3$i101 = 0, $and3$i48 = 0, $arrayidx$i = 0, $arrayidx$i100 = 0, $arrayidx$i47 = 0, $call$i = 0;
 var $call$i$i = 0, $call$i$i$i$i = 0, $call$i$i$i$i155 = 0, $call$i$i$i$i61 = 0, $call$i$i122 = 0, $call$i$i9$i$i = 0, $call$i$i9$i$i176 = 0, $call$i$i9$i$i82 = 0, $call$i131 = 0, $call$i134 = 0, $call$i37 = 0, $call$i40 = 0, $call$i43 = 0, $call24 = 0, $call3$i$i = 0, $call3$i$i$i = 0, $call3$i$i$i$i = 0, $call3$i$i$i$i157 = 0, $call3$i$i$i$i63 = 0, $call3$i$i$i160 = 0;
 var $call3$i$i$i66 = 0, $call3$i$i11$i$i = 0, $call3$i$i11$i$i178 = 0, $call3$i$i11$i$i84 = 0, $call3$i$i124 = 0, $call3$i14$i$i = 0, $call3$i14$i$i181 = 0, $call3$i14$i$i87 = 0, $call4$i$i$i = 0, $call4$i$i$i161 = 0, $call4$i$i$i67 = 0, $call4$i15$i$i = 0, $call4$i15$i$i182 = 0, $call4$i15$i$i88 = 0, $cmp = 0, $cmp$i$i$i$i = 0, $cmp$i$i$i$i151 = 0, $cmp$i$i$i$i57 = 0, $cmp$i$i109 = 0, $cmp$i$i119 = 0;
 var $cmp$i$i138 = 0, $cmp$i$i5$i$i = 0, $cmp$i$i5$i$i172 = 0, $cmp$i$i5$i$i78 = 0, $cmp$i$i95 = 0, $cmp17 = 0, $cmp2 = 0, $cmp2$i = 0, $cmp2$i44 = 0, $cmp2$i97 = 0, $cmp30 = 0, $cmp5 = 0, $cmp51 = 0, $cmp6$i = 0, $cmp6$i102 = 0, $cmp6$i49 = 0, $cmp7 = 0, $cmptmp$i$i94 = 0, $conv$i = 0, $conv$i127 = 0;
 var $conv$i45 = 0, $conv$i96 = 0, $conv$i98 = 0, $incdec$ptr$i$i = 0, $incdec$ptr$i$i143 = 0, $incdec$ptr$le = 0, $incdec$ptr$le203 = 0, $incdec$ptr$le203$lcssa = 0, $incdec$ptr$le204 = 0, $incdec$ptr16 = 0, $incdec$ptr25 = 0, $or = 0, $or$cond = 0, $phitmp$i18$i$i91 = 0, $ref$tmp = 0, $retval$0$i$i = 0, $retval$0$i$i$i$i = 0, $retval$0$i$i$i$i159 = 0, $retval$0$i$i$i$i65 = 0, $retval$0$i$i126 = 0;
 var $retval$0$i$i13$i$i = 0, $retval$0$i$i13$i$i180 = 0, $retval$0$i$i13$i$i86 = 0, $retval$sroa$0$0$copyload = 0, $sext = 0, $tobool$i$i$i = 0, $tobool$i$i$i148 = 0, $tobool$i$i$i54 = 0, $tobool$i2$i$i = 0, $tobool$i2$i$i168 = 0, $tobool$i2$i$i74 = 0, $vfn = 0, $vfn$i = 0, $vfn$i$i = 0, $vfn$i$i$i$i = 0, $vfn$i$i$i$i154 = 0, $vfn$i$i$i$i60 = 0, $vfn$i$i111 = 0, $vfn$i$i121 = 0, $vfn$i$i140 = 0;
 var $vfn$i$i8$i$i = 0, $vfn$i$i8$i$i175 = 0, $vfn$i$i8$i$i81 = 0, $vfn$i130 = 0, $vfn$i133 = 0, $vfn$i39 = 0, $vfn$i42 = 0, $vtable = 0, $vtable$i = 0, $vtable$i$i = 0, $vtable$i$i$i$i = 0, $vtable$i$i$i$i153 = 0, $vtable$i$i$i$i59 = 0, $vtable$i$i110 = 0, $vtable$i$i120 = 0, $vtable$i$i139 = 0, $vtable$i$i7$i$i = 0, $vtable$i$i7$i$i174 = 0, $vtable$i$i7$i$i80 = 0, $vtable$i129 = 0;
 var $vtable$i132 = 0, $vtable$i38 = 0, $vtable$i41 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $agg$tmp23$byval_copy = sp + 16|0;
 $agg$tmp$byval_copy = sp + 12|0;
 $ref$tmp = sp + 8|0;
 $agg$tmp = sp + 4|0;
 $agg$tmp23 = sp;
 __ZNKSt3__28ios_base6getlocEv($ref$tmp,$__iob);
 __THREW__ = 0;
 $call$i37 = (invoke_iii(380,($ref$tmp|0),(20096|0))|0);
 $0 = __THREW__; __THREW__ = 0;
 $1 = $0&1;
 if ($1) {
  $15 = ___cxa_find_matching_catch_2()|0;
  $16 = tempRet0;
  __ZNSt3__26localeD2Ev($ref$tmp);
  ___resumeException($15|0);
  // unreachable;
 }
 __ZNSt3__26localeD2Ev($ref$tmp);
 HEAP32[$__err>>2] = 0;
 $__tab_$i = ((($call$i37)) + 8|0);
 $$pre = 0;$__fmtb$addr$0$ph = $__fmtb;
 L4: while(1) {
  $cmp = ($__fmtb$addr$0$ph|0)!=($__fmte|0);
  $2 = $$pre;
  while(1) {
   $cmp2 = ($2|0)==(0);
   $or$cond = $cmp & $cmp2;
   $3 = HEAP32[$__b>>2]|0;
   if (!($or$cond)) {
    $$pre$i$i$i163 = $3;
    break L4;
   }
   $tobool$i$i$i = ($3|0)==(0|0);
   $4 = $3;
   if ($tobool$i$i$i) {
    $24 = $4;$53 = 0;$75 = 1;
   } else {
    $__ninp_$i$i$i$i = ((($3)) + 12|0);
    $5 = HEAP32[$__ninp_$i$i$i$i>>2]|0;
    $__einp_$i$i$i$i = ((($3)) + 16|0);
    $6 = HEAP32[$__einp_$i$i$i$i>>2]|0;
    $cmp$i$i$i$i = ($5|0)==($6|0);
    if ($cmp$i$i$i$i) {
     $vtable$i$i$i$i = HEAP32[$3>>2]|0;
     $vfn$i$i$i$i = ((($vtable$i$i$i$i)) + 36|0);
     $7 = HEAP32[$vfn$i$i$i$i>>2]|0;
     $call$i$i$i$i = (FUNCTION_TABLE_ii[$7 & 1023]($3)|0);
     $retval$0$i$i$i$i = $call$i$i$i$i;
    } else {
     $8 = HEAP8[$5>>0]|0;
     $call3$i$i$i$i = (__ZNSt3__211char_traitsIcE11to_int_typeEc($8)|0);
     $retval$0$i$i$i$i = $call3$i$i$i$i;
    }
    $call3$i$i$i = (__ZNSt3__211char_traitsIcE3eofEv()|0);
    $call4$i$i$i = (__ZNSt3__211char_traitsIcE11eq_int_typeEii($retval$0$i$i$i$i,$call3$i$i$i)|0);
    if ($call4$i$i$i) {
     HEAP32[$__b>>2] = 0;
     $24 = 0;$53 = 0;$75 = 1;
    } else {
     $24 = $4;$53 = $3;$75 = 0;
    }
   }
   $9 = HEAP32[$__e>>2]|0;
   $tobool$i2$i$i = ($9|0)==(0|0);
   $10 = $9;
   do {
    if ($tobool$i2$i$i) {
     $$ph = $10;
     label = 17;
    } else {
     $__ninp_$i$i3$i$i = ((($9)) + 12|0);
     $11 = HEAP32[$__ninp_$i$i3$i$i>>2]|0;
     $__einp_$i$i4$i$i = ((($9)) + 16|0);
     $12 = HEAP32[$__einp_$i$i4$i$i>>2]|0;
     $cmp$i$i5$i$i = ($11|0)==($12|0);
     if ($cmp$i$i5$i$i) {
      $vtable$i$i7$i$i = HEAP32[$9>>2]|0;
      $vfn$i$i8$i$i = ((($vtable$i$i7$i$i)) + 36|0);
      $13 = HEAP32[$vfn$i$i8$i$i>>2]|0;
      $call$i$i9$i$i = (FUNCTION_TABLE_ii[$13 & 1023]($9)|0);
      $retval$0$i$i13$i$i = $call$i$i9$i$i;
     } else {
      $14 = HEAP8[$11>>0]|0;
      $call3$i$i11$i$i = (__ZNSt3__211char_traitsIcE11to_int_typeEc($14)|0);
      $retval$0$i$i13$i$i = $call3$i$i11$i$i;
     }
     $call3$i14$i$i = (__ZNSt3__211char_traitsIcE3eofEv()|0);
     $call4$i15$i$i = (__ZNSt3__211char_traitsIcE11eq_int_typeEii($retval$0$i$i13$i$i,$call3$i14$i$i)|0);
     if ($call4$i15$i$i) {
      HEAP32[$__e>>2] = 0;
      $$ph = 0;
      label = 17;
      break;
     } else {
      if ($75) {
       $25 = $10;$76 = $9;
       break;
      } else {
       label = 63;
       break L4;
      }
     }
    }
   } while(0);
   if ((label|0) == 17) {
    label = 0;
    if ($75) {
     label = 63;
     break L4;
    } else {
     $25 = $$ph;$76 = 0;
    }
   }
   $17 = HEAP8[$__fmtb$addr$0$ph>>0]|0;
   $vtable$i = HEAP32[$call$i37>>2]|0;
   $vfn$i = ((($vtable$i)) + 36|0);
   $18 = HEAP32[$vfn$i>>2]|0;
   $call$i = (FUNCTION_TABLE_iiii[$18 & 1023]($call$i37,$17,0)|0);
   $cmp5 = ($call$i<<24>>24)==(37);
   if ($cmp5) {
    label = 21;
    break;
   }
   $27 = HEAP8[$__fmtb$addr$0$ph>>0]|0;
   $cmp2$i = ($27<<24>>24)>(-1);
   if ($cmp2$i) {
    $conv$i = $27 << 24 >> 24;
    $28 = HEAP32[$__tab_$i>>2]|0;
    $arrayidx$i = (($28) + ($conv$i<<1)|0);
    $29 = HEAP16[$arrayidx$i>>1]|0;
    $and3$i = $29 & 8192;
    $cmp6$i = ($and3$i<<16>>16)==(0);
    if (!($cmp6$i)) {
     $__fmtb$addr$0$ph$sink = $__fmtb$addr$0$ph;
     label = 29;
     break;
    }
   }
   $__ninp_$i$i117 = ((($53)) + 12|0);
   $54 = HEAP32[$__ninp_$i$i117>>2]|0;
   $__einp_$i$i118 = ((($53)) + 16|0);
   $55 = HEAP32[$__einp_$i$i118>>2]|0;
   $cmp$i$i119 = ($54|0)==($55|0);
   if ($cmp$i$i119) {
    $vtable$i$i120 = HEAP32[$53>>2]|0;
    $vfn$i$i121 = ((($vtable$i$i120)) + 36|0);
    $56 = HEAP32[$vfn$i$i121>>2]|0;
    $call$i$i122 = (FUNCTION_TABLE_ii[$56 & 1023]($53)|0);
    $retval$0$i$i126 = $call$i$i122;
   } else {
    $57 = HEAP8[$54>>0]|0;
    $call3$i$i124 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($57)|0);
    $retval$0$i$i126 = $call3$i$i124;
   }
   $conv$i127 = $retval$0$i$i126&255;
   $vtable$i129 = HEAP32[$call$i37>>2]|0;
   $vfn$i130 = ((($vtable$i129)) + 12|0);
   $58 = HEAP32[$vfn$i130>>2]|0;
   $call$i131 = (FUNCTION_TABLE_iii[$58 & 511]($call$i37,$conv$i127)|0);
   $59 = HEAP8[$__fmtb$addr$0$ph>>0]|0;
   $vtable$i132 = HEAP32[$call$i37>>2]|0;
   $vfn$i133 = ((($vtable$i132)) + 12|0);
   $60 = HEAP32[$vfn$i133>>2]|0;
   $call$i134 = (FUNCTION_TABLE_iii[$60 & 511]($call$i37,$59)|0);
   $cmp51 = ($call$i131<<24>>24)==($call$i134<<24>>24);
   if ($cmp51) {
    label = 59;
    break;
   }
   HEAP32[$__err>>2] = 4;
   $2 = 4;
  }
  L38: do {
   if ((label|0) == 21) {
    label = 0;
    $incdec$ptr$le204 = ((($__fmtb$addr$0$ph)) + 1|0);
    $cmp7 = ($incdec$ptr$le204|0)==($__fmte|0);
    if ($cmp7) {
     label = 63;
     break L4;
    }
    $19 = HEAP8[$incdec$ptr$le204>>0]|0;
    $vtable$i38 = HEAP32[$call$i37>>2]|0;
    $vfn$i39 = ((($vtable$i38)) + 36|0);
    $20 = HEAP32[$vfn$i39>>2]|0;
    $call$i40 = (FUNCTION_TABLE_iiii[$20 & 1023]($call$i37,$19,0)|0);
    switch ($call$i40<<24>>24) {
    case 48: case 69:  {
     $incdec$ptr16 = ((($__fmtb$addr$0$ph)) + 2|0);
     $cmp17 = ($incdec$ptr16|0)==($__fmte|0);
     if ($cmp17) {
      label = 63;
      break L4;
     }
     $21 = HEAP8[$incdec$ptr16>>0]|0;
     $vtable$i41 = HEAP32[$call$i37>>2]|0;
     $vfn$i42 = ((($vtable$i41)) + 36|0);
     $22 = HEAP32[$vfn$i42>>2]|0;
     $call$i43 = (FUNCTION_TABLE_iiii[$22 & 1023]($call$i37,$21,0)|0);
     $26 = $incdec$ptr$le204;$__cmd$0 = $call$i43;$__opt$0 = $call$i40;
     break;
    }
    default: {
     $26 = $__fmtb$addr$0$ph;$__cmd$0 = $call$i40;$__opt$0 = 0;
    }
    }
    $vtable = HEAP32[$this>>2]|0;
    $vfn = ((($vtable)) + 36|0);
    $23 = HEAP32[$vfn>>2]|0;
    HEAP32[$agg$tmp>>2] = $24;
    HEAP32[$agg$tmp23>>2] = $25;
    ;HEAP32[$agg$tmp$byval_copy>>2]=HEAP32[$agg$tmp>>2]|0;
    ;HEAP32[$agg$tmp23$byval_copy>>2]=HEAP32[$agg$tmp23>>2]|0;
    $call24 = (FUNCTION_TABLE_iiiiiiiii[$23 & 511]($this,$agg$tmp$byval_copy,$agg$tmp23$byval_copy,$__iob,$__err,$__tm,$__cmd$0,$__opt$0)|0);
    HEAP32[$__b>>2] = $call24;
    $incdec$ptr25 = ((($26)) + 2|0);
    $__fmtb$addr$0$ph$be = $incdec$ptr25;
   }
   else if ((label|0) == 29) {
    while(1) {
     label = 0;
     $incdec$ptr$le203 = ((($__fmtb$addr$0$ph$sink)) + 1|0);
     $cmp30 = ($incdec$ptr$le203|0)==($__fmte|0);
     if ($cmp30) {
      $incdec$ptr$le203$lcssa = $__fmte;
      break;
     }
     $30 = HEAP8[$incdec$ptr$le203>>0]|0;
     $cmp2$i44 = ($30<<24>>24)>(-1);
     if (!($cmp2$i44)) {
      $incdec$ptr$le203$lcssa = $incdec$ptr$le203;
      break;
     }
     $conv$i45 = $30 << 24 >> 24;
     $arrayidx$i47 = (($28) + ($conv$i45<<1)|0);
     $31 = HEAP16[$arrayidx$i47>>1]|0;
     $and3$i48 = $31 & 8192;
     $cmp6$i49 = ($and3$i48<<16>>16)==(0);
     if ($cmp6$i49) {
      $incdec$ptr$le203$lcssa = $incdec$ptr$le203;
      break;
     } else {
      $__fmtb$addr$0$ph$sink = $incdec$ptr$le203;
      label = 29;
     }
    }
    $$pre$i$i$i69 = $53;$$pre$i17$i$i90 = $76;$36 = $76;
    while(1) {
     $tobool$i$i$i54 = ($$pre$i$i$i69|0)==(0|0);
     if ($tobool$i$i$i54) {
      $41 = 1;$42 = 0;
     } else {
      $__ninp_$i$i$i$i55 = ((($$pre$i$i$i69)) + 12|0);
      $32 = HEAP32[$__ninp_$i$i$i$i55>>2]|0;
      $__einp_$i$i$i$i56 = ((($$pre$i$i$i69)) + 16|0);
      $33 = HEAP32[$__einp_$i$i$i$i56>>2]|0;
      $cmp$i$i$i$i57 = ($32|0)==($33|0);
      if ($cmp$i$i$i$i57) {
       $vtable$i$i$i$i59 = HEAP32[$$pre$i$i$i69>>2]|0;
       $vfn$i$i$i$i60 = ((($vtable$i$i$i$i59)) + 36|0);
       $34 = HEAP32[$vfn$i$i$i$i60>>2]|0;
       $call$i$i$i$i61 = (FUNCTION_TABLE_ii[$34 & 1023]($$pre$i$i$i69)|0);
       $retval$0$i$i$i$i65 = $call$i$i$i$i61;
      } else {
       $35 = HEAP8[$32>>0]|0;
       $call3$i$i$i$i63 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($35)|0);
       $retval$0$i$i$i$i65 = $call3$i$i$i$i63;
      }
      $call3$i$i$i66 = (__ZNSt3__211char_traitsIcE3eofEv()|0);
      $call4$i$i$i67 = (__ZNSt3__211char_traitsIcE11eq_int_typeEii($retval$0$i$i$i$i65,$call3$i$i$i66)|0);
      if ($call4$i$i$i67) {
       HEAP32[$__b>>2] = 0;
       $41 = 1;$42 = 0;
      } else {
       $41 = 0;$42 = $$pre$i$i$i69;
      }
     }
     $tobool$i2$i$i74 = ($36|0)==(0|0);
     do {
      if ($tobool$i2$i$i74) {
       $$pre$i17$i$i90207 = $$pre$i17$i$i90;
       label = 45;
      } else {
       $__ninp_$i$i3$i$i76 = ((($36)) + 12|0);
       $37 = HEAP32[$__ninp_$i$i3$i$i76>>2]|0;
       $__einp_$i$i4$i$i77 = ((($36)) + 16|0);
       $38 = HEAP32[$__einp_$i$i4$i$i77>>2]|0;
       $cmp$i$i5$i$i78 = ($37|0)==($38|0);
       if ($cmp$i$i5$i$i78) {
        $vtable$i$i7$i$i80 = HEAP32[$36>>2]|0;
        $vfn$i$i8$i$i81 = ((($vtable$i$i7$i$i80)) + 36|0);
        $39 = HEAP32[$vfn$i$i8$i$i81>>2]|0;
        $call$i$i9$i$i82 = (FUNCTION_TABLE_ii[$39 & 1023]($36)|0);
        $retval$0$i$i13$i$i86 = $call$i$i9$i$i82;
       } else {
        $40 = HEAP8[$37>>0]|0;
        $call3$i$i11$i$i84 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($40)|0);
        $retval$0$i$i13$i$i86 = $call3$i$i11$i$i84;
       }
       $call3$i14$i$i87 = (__ZNSt3__211char_traitsIcE3eofEv()|0);
       $call4$i15$i$i88 = (__ZNSt3__211char_traitsIcE11eq_int_typeEii($retval$0$i$i13$i$i86,$call3$i14$i$i87)|0);
       if ($call4$i15$i$i88) {
        HEAP32[$__e>>2] = 0;
        $$pre$i17$i$i90207 = 0;
        label = 45;
        break;
       } else {
        $phitmp$i18$i$i91 = ($$pre$i17$i$i90|0)==(0|0);
        $cmptmp$i$i94 = $41 ^ $phitmp$i18$i$i91;
        if ($cmptmp$i$i94) {
         $$pre$i17$i$i90206 = $$pre$i17$i$i90;$77 = $$pre$i17$i$i90;
         break;
        } else {
         $__fmtb$addr$0$ph$be = $incdec$ptr$le203$lcssa;
         break L38;
        }
       }
      }
     } while(0);
     if ((label|0) == 45) {
      label = 0;
      if ($41) {
       $__fmtb$addr$0$ph$be = $incdec$ptr$le203$lcssa;
       break L38;
      } else {
       $$pre$i17$i$i90206 = $$pre$i17$i$i90207;$77 = 0;
      }
     }
     $__ninp_$i$i = ((($42)) + 12|0);
     $43 = HEAP32[$__ninp_$i$i>>2]|0;
     $__einp_$i$i = ((($42)) + 16|0);
     $44 = HEAP32[$__einp_$i$i>>2]|0;
     $cmp$i$i95 = ($43|0)==($44|0);
     if ($cmp$i$i95) {
      $vtable$i$i = HEAP32[$42>>2]|0;
      $vfn$i$i = ((($vtable$i$i)) + 36|0);
      $45 = HEAP32[$vfn$i$i>>2]|0;
      $call$i$i = (FUNCTION_TABLE_ii[$45 & 1023]($42)|0);
      $retval$0$i$i = $call$i$i;
     } else {
      $46 = HEAP8[$43>>0]|0;
      $call3$i$i = (__ZNSt3__211char_traitsIcE11to_int_typeEc($46)|0);
      $retval$0$i$i = $call3$i$i;
     }
     $conv$i96 = $retval$0$i$i&255;
     $cmp2$i97 = ($conv$i96<<24>>24)>(-1);
     if (!($cmp2$i97)) {
      $__fmtb$addr$0$ph$be = $incdec$ptr$le203$lcssa;
      break L38;
     }
     $sext = $retval$0$i$i << 24;
     $conv$i98 = $sext >> 24;
     $47 = HEAP32[$__tab_$i>>2]|0;
     $arrayidx$i100 = (($47) + ($conv$i98<<1)|0);
     $48 = HEAP16[$arrayidx$i100>>1]|0;
     $and3$i101 = $48 & 8192;
     $cmp6$i102 = ($and3$i101<<16>>16)==(0);
     if ($cmp6$i102) {
      $__fmtb$addr$0$ph$be = $incdec$ptr$le203$lcssa;
      break L38;
     }
     $49 = HEAP32[$__ninp_$i$i>>2]|0;
     $50 = HEAP32[$__einp_$i$i>>2]|0;
     $cmp$i$i109 = ($49|0)==($50|0);
     if ($cmp$i$i109) {
      $vtable$i$i110 = HEAP32[$42>>2]|0;
      $vfn$i$i111 = ((($vtable$i$i110)) + 40|0);
      $51 = HEAP32[$vfn$i$i111>>2]|0;
      (FUNCTION_TABLE_ii[$51 & 1023]($42)|0);
      $$pre$i$i$i69 = $42;$$pre$i17$i$i90 = $$pre$i17$i$i90206;$36 = $77;
      continue;
     } else {
      $incdec$ptr$i$i = ((($49)) + 1|0);
      HEAP32[$__ninp_$i$i>>2] = $incdec$ptr$i$i;
      $52 = HEAP8[$49>>0]|0;
      (__ZNSt3__211char_traitsIcE11to_int_typeEc($52)|0);
      $$pre$i$i$i69 = $42;$$pre$i17$i$i90 = $$pre$i17$i$i90206;$36 = $77;
      continue;
     }
    }
   }
   else if ((label|0) == 59) {
    label = 0;
    $incdec$ptr$le = ((($__fmtb$addr$0$ph)) + 1|0);
    $61 = HEAP32[$__ninp_$i$i117>>2]|0;
    $62 = HEAP32[$__einp_$i$i118>>2]|0;
    $cmp$i$i138 = ($61|0)==($62|0);
    if ($cmp$i$i138) {
     $vtable$i$i139 = HEAP32[$53>>2]|0;
     $vfn$i$i140 = ((($vtable$i$i139)) + 40|0);
     $63 = HEAP32[$vfn$i$i140>>2]|0;
     (FUNCTION_TABLE_ii[$63 & 1023]($53)|0);
     $__fmtb$addr$0$ph$be = $incdec$ptr$le;
     break;
    } else {
     $incdec$ptr$i$i143 = ((($61)) + 1|0);
     HEAP32[$__ninp_$i$i117>>2] = $incdec$ptr$i$i143;
     $64 = HEAP8[$61>>0]|0;
     (__ZNSt3__211char_traitsIcE11to_int_typeEc($64)|0);
     $__fmtb$addr$0$ph$be = $incdec$ptr$le;
     break;
    }
   }
  } while(0);
  $$pre$pre = HEAP32[$__err>>2]|0;
  $$pre = $$pre$pre;$__fmtb$addr$0$ph = $__fmtb$addr$0$ph$be;
 }
 if ((label|0) == 63) {
  HEAP32[$__err>>2] = 4;
  $$pre$i$i$i163 = $53;
 }
 $tobool$i$i$i148 = ($$pre$i$i$i163|0)==(0|0);
 if ($tobool$i$i$i148) {
  $78 = 1;$retval$sroa$0$0$copyload = 0;
 } else {
  $__ninp_$i$i$i$i149 = ((($$pre$i$i$i163)) + 12|0);
  $65 = HEAP32[$__ninp_$i$i$i$i149>>2]|0;
  $__einp_$i$i$i$i150 = ((($$pre$i$i$i163)) + 16|0);
  $66 = HEAP32[$__einp_$i$i$i$i150>>2]|0;
  $cmp$i$i$i$i151 = ($65|0)==($66|0);
  if ($cmp$i$i$i$i151) {
   $vtable$i$i$i$i153 = HEAP32[$$pre$i$i$i163>>2]|0;
   $vfn$i$i$i$i154 = ((($vtable$i$i$i$i153)) + 36|0);
   $67 = HEAP32[$vfn$i$i$i$i154>>2]|0;
   $call$i$i$i$i155 = (FUNCTION_TABLE_ii[$67 & 1023]($$pre$i$i$i163)|0);
   $retval$0$i$i$i$i159 = $call$i$i$i$i155;
  } else {
   $68 = HEAP8[$65>>0]|0;
   $call3$i$i$i$i157 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($68)|0);
   $retval$0$i$i$i$i159 = $call3$i$i$i$i157;
  }
  $call3$i$i$i160 = (__ZNSt3__211char_traitsIcE3eofEv()|0);
  $call4$i$i$i161 = (__ZNSt3__211char_traitsIcE11eq_int_typeEii($retval$0$i$i$i$i159,$call3$i$i$i160)|0);
  if ($call4$i$i$i161) {
   HEAP32[$__b>>2] = 0;
   $78 = 1;$retval$sroa$0$0$copyload = 0;
  } else {
   $78 = 0;$retval$sroa$0$0$copyload = $$pre$i$i$i163;
  }
 }
 $69 = HEAP32[$__e>>2]|0;
 $tobool$i2$i$i168 = ($69|0)==(0|0);
 do {
  if ($tobool$i2$i$i168) {
   label = 76;
  } else {
   $__ninp_$i$i3$i$i170 = ((($69)) + 12|0);
   $70 = HEAP32[$__ninp_$i$i3$i$i170>>2]|0;
   $__einp_$i$i4$i$i171 = ((($69)) + 16|0);
   $71 = HEAP32[$__einp_$i$i4$i$i171>>2]|0;
   $cmp$i$i5$i$i172 = ($70|0)==($71|0);
   if ($cmp$i$i5$i$i172) {
    $vtable$i$i7$i$i174 = HEAP32[$69>>2]|0;
    $vfn$i$i8$i$i175 = ((($vtable$i$i7$i$i174)) + 36|0);
    $72 = HEAP32[$vfn$i$i8$i$i175>>2]|0;
    $call$i$i9$i$i176 = (FUNCTION_TABLE_ii[$72 & 1023]($69)|0);
    $retval$0$i$i13$i$i180 = $call$i$i9$i$i176;
   } else {
    $73 = HEAP8[$70>>0]|0;
    $call3$i$i11$i$i178 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($73)|0);
    $retval$0$i$i13$i$i180 = $call3$i$i11$i$i178;
   }
   $call3$i14$i$i181 = (__ZNSt3__211char_traitsIcE3eofEv()|0);
   $call4$i15$i$i182 = (__ZNSt3__211char_traitsIcE11eq_int_typeEii($retval$0$i$i13$i$i180,$call3$i14$i$i181)|0);
   if ($call4$i15$i$i182) {
    HEAP32[$__e>>2] = 0;
    label = 76;
    break;
   } else {
    if ($78) {
     break;
    } else {
     label = 78;
     break;
    }
   }
  }
 } while(0);
 if ((label|0) == 76) {
  if ($78) {
   label = 78;
  }
 }
 if ((label|0) == 78) {
  $74 = HEAP32[$__err>>2]|0;
  $or = $74 | 2;
  HEAP32[$__err>>2] = $or;
 }
 STACKTOP = sp;return ($retval$sroa$0$0$copyload|0);
}
function __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE9__get_dayERiRS4_S4_RjRKNS_5ctypeIcEE($this,$__d,$__b,$__e,$__err,$__ct) {
 $this = $this|0;
 $__d = $__d|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__err = $__err|0;
 $__ct = $__ct|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $and = 0, $call = 0, $call$off = 0, $or = 0, $tobool = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $agg$tmp$byval_copy = sp + 4|0;
 $agg$tmp = sp;
 $0 = HEAP32[$__e>>2]|0;
 HEAP32[$agg$tmp>>2] = $0;
 ;HEAP32[$agg$tmp$byval_copy>>2]=HEAP32[$agg$tmp>>2]|0;
 $call = (__ZNSt3__220__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$agg$tmp$byval_copy,$__err,$__ct,2)|0);
 $1 = HEAP32[$__err>>2]|0;
 $and = $1 & 4;
 $tobool = ($and|0)==(0);
 $call$off = (($call) + -1)|0;
 $2 = ($call$off>>>0)<(31);
 $3 = $2 & $tobool;
 if ($3) {
  HEAP32[$__d>>2] = $call;
 } else {
  $or = $1 | 4;
  HEAP32[$__err>>2] = $or;
 }
 STACKTOP = sp;return;
}
function __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE10__get_hourERiRS4_S4_RjRKNS_5ctypeIcEE($this,$__h,$__b,$__e,$__err,$__ct) {
 $this = $this|0;
 $__h = $__h|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__err = $__err|0;
 $__ct = $__ct|0;
 var $0 = 0, $1 = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $and = 0, $call = 0, $cmp = 0, $or = 0, $or$cond = 0, $tobool = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $agg$tmp$byval_copy = sp + 4|0;
 $agg$tmp = sp;
 $0 = HEAP32[$__e>>2]|0;
 HEAP32[$agg$tmp>>2] = $0;
 ;HEAP32[$agg$tmp$byval_copy>>2]=HEAP32[$agg$tmp>>2]|0;
 $call = (__ZNSt3__220__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$agg$tmp$byval_copy,$__err,$__ct,2)|0);
 $1 = HEAP32[$__err>>2]|0;
 $and = $1 & 4;
 $tobool = ($and|0)==(0);
 $cmp = ($call|0)<(24);
 $or$cond = $cmp & $tobool;
 if ($or$cond) {
  HEAP32[$__h>>2] = $call;
 } else {
  $or = $1 | 4;
  HEAP32[$__err>>2] = $or;
 }
 STACKTOP = sp;return;
}
function __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE13__get_12_hourERiRS4_S4_RjRKNS_5ctypeIcEE($this,$__h,$__b,$__e,$__err,$__ct) {
 $this = $this|0;
 $__h = $__h|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__err = $__err|0;
 $__ct = $__ct|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $and = 0, $call = 0, $call$off = 0, $or = 0, $tobool = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $agg$tmp$byval_copy = sp + 4|0;
 $agg$tmp = sp;
 $0 = HEAP32[$__e>>2]|0;
 HEAP32[$agg$tmp>>2] = $0;
 ;HEAP32[$agg$tmp$byval_copy>>2]=HEAP32[$agg$tmp>>2]|0;
 $call = (__ZNSt3__220__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$agg$tmp$byval_copy,$__err,$__ct,2)|0);
 $1 = HEAP32[$__err>>2]|0;
 $and = $1 & 4;
 $tobool = ($and|0)==(0);
 $call$off = (($call) + -1)|0;
 $2 = ($call$off>>>0)<(12);
 $3 = $2 & $tobool;
 if ($3) {
  HEAP32[$__h>>2] = $call;
 } else {
  $or = $1 | 4;
  HEAP32[$__err>>2] = $or;
 }
 STACKTOP = sp;return;
}
function __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE18__get_day_year_numERiRS4_S4_RjRKNS_5ctypeIcEE($this,$__d,$__b,$__e,$__err,$__ct) {
 $this = $this|0;
 $__d = $__d|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__err = $__err|0;
 $__ct = $__ct|0;
 var $0 = 0, $1 = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $and = 0, $call = 0, $cmp = 0, $or = 0, $or$cond = 0, $tobool = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $agg$tmp$byval_copy = sp + 4|0;
 $agg$tmp = sp;
 $0 = HEAP32[$__e>>2]|0;
 HEAP32[$agg$tmp>>2] = $0;
 ;HEAP32[$agg$tmp$byval_copy>>2]=HEAP32[$agg$tmp>>2]|0;
 $call = (__ZNSt3__220__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$agg$tmp$byval_copy,$__err,$__ct,3)|0);
 $1 = HEAP32[$__err>>2]|0;
 $and = $1 & 4;
 $tobool = ($and|0)==(0);
 $cmp = ($call|0)<(366);
 $or$cond = $cmp & $tobool;
 if ($or$cond) {
  HEAP32[$__d>>2] = $call;
 } else {
  $or = $1 | 4;
  HEAP32[$__err>>2] = $or;
 }
 STACKTOP = sp;return;
}
function __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11__get_monthERiRS4_S4_RjRKNS_5ctypeIcEE($this,$__m,$__b,$__e,$__err,$__ct) {
 $this = $this|0;
 $__m = $__m|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__err = $__err|0;
 $__ct = $__ct|0;
 var $0 = 0, $1 = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $and = 0, $call = 0, $cmp = 0, $or = 0, $or$cond = 0, $sub = 0, $tobool = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $agg$tmp$byval_copy = sp + 4|0;
 $agg$tmp = sp;
 $0 = HEAP32[$__e>>2]|0;
 HEAP32[$agg$tmp>>2] = $0;
 ;HEAP32[$agg$tmp$byval_copy>>2]=HEAP32[$agg$tmp>>2]|0;
 $call = (__ZNSt3__220__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$agg$tmp$byval_copy,$__err,$__ct,2)|0);
 $1 = HEAP32[$__err>>2]|0;
 $and = $1 & 4;
 $tobool = ($and|0)==(0);
 $cmp = ($call|0)<(13);
 $or$cond = $cmp & $tobool;
 if ($or$cond) {
  $sub = (($call) + -1)|0;
  HEAP32[$__m>>2] = $sub;
 } else {
  $or = $1 | 4;
  HEAP32[$__err>>2] = $or;
 }
 STACKTOP = sp;return;
}
function __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE12__get_minuteERiRS4_S4_RjRKNS_5ctypeIcEE($this,$__m,$__b,$__e,$__err,$__ct) {
 $this = $this|0;
 $__m = $__m|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__err = $__err|0;
 $__ct = $__ct|0;
 var $0 = 0, $1 = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $and = 0, $call = 0, $cmp = 0, $or = 0, $or$cond = 0, $tobool = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $agg$tmp$byval_copy = sp + 4|0;
 $agg$tmp = sp;
 $0 = HEAP32[$__e>>2]|0;
 HEAP32[$agg$tmp>>2] = $0;
 ;HEAP32[$agg$tmp$byval_copy>>2]=HEAP32[$agg$tmp>>2]|0;
 $call = (__ZNSt3__220__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$agg$tmp$byval_copy,$__err,$__ct,2)|0);
 $1 = HEAP32[$__err>>2]|0;
 $and = $1 & 4;
 $tobool = ($and|0)==(0);
 $cmp = ($call|0)<(60);
 $or$cond = $cmp & $tobool;
 if ($or$cond) {
  HEAP32[$__m>>2] = $call;
 } else {
  $or = $1 | 4;
  HEAP32[$__err>>2] = $or;
 }
 STACKTOP = sp;return;
}
function __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__get_white_spaceERS4_S4_RjRKNS_5ctypeIcEE($this,$__b,$__e,$__err,$__ct) {
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__err = $__err|0;
 $__ct = $__ct|0;
 var $$pre$i$i$i = 0, $$pre$i$i$i31 = 0, $$pre$i17$i$i52 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__einp_$i$i = 0, $__einp_$i$i$i$i = 0;
 var $__einp_$i$i$i$i18 = 0, $__einp_$i$i4$i$i = 0, $__einp_$i$i4$i$i39 = 0, $__einp_$i$i7 = 0, $__ninp_$i$i = 0, $__ninp_$i$i$i$i = 0, $__ninp_$i$i$i$i17 = 0, $__ninp_$i$i3$i$i = 0, $__ninp_$i$i3$i$i38 = 0, $__ninp_$i$i6 = 0, $__tab_$i = 0, $and3$i = 0, $arrayidx$i = 0, $call$i$i = 0, $call$i$i$i$i = 0, $call$i$i$i$i23 = 0, $call$i$i9$i$i = 0, $call$i$i9$i$i44 = 0, $call3$i$i = 0, $call3$i$i$i = 0;
 var $call3$i$i$i$i = 0, $call3$i$i$i$i25 = 0, $call3$i$i$i28 = 0, $call3$i$i11$i$i = 0, $call3$i$i11$i$i46 = 0, $call3$i14$i$i = 0, $call3$i14$i$i49 = 0, $call4$i$i$i = 0, $call4$i$i$i29 = 0, $call4$i15$i$i = 0, $call4$i15$i$i50 = 0, $cmp$i$i = 0, $cmp$i$i$i$i = 0, $cmp$i$i$i$i19 = 0, $cmp$i$i5$i$i = 0, $cmp$i$i5$i$i40 = 0, $cmp$i$i8 = 0, $cmp2$i = 0, $cmp6$i = 0, $conv$i = 0;
 var $conv$i4 = 0, $incdec$ptr$i$i = 0, $or = 0, $phitmp$i$i$i = 0, $phitmp$i$i$i32 = 0, $retval$0$i$i = 0, $retval$0$i$i$i$i = 0, $retval$0$i$i$i$i27 = 0, $retval$0$i$i13$i$i = 0, $retval$0$i$i13$i$i48 = 0, $sext = 0, $tobool$i$i$i = 0, $tobool$i$i$i16 = 0, $tobool$i2$i$i = 0, $tobool$i2$i$i36 = 0, $vfn$i$i = 0, $vfn$i$i$i$i = 0, $vfn$i$i$i$i22 = 0, $vfn$i$i10 = 0, $vfn$i$i8$i$i = 0;
 var $vfn$i$i8$i$i43 = 0, $vtable$i$i = 0, $vtable$i$i$i$i = 0, $vtable$i$i$i$i21 = 0, $vtable$i$i7$i$i = 0, $vtable$i$i7$i$i42 = 0, $vtable$i$i9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $__tab_$i = ((($__ct)) + 8|0);
 L1: while(1) {
  $0 = HEAP32[$__b>>2]|0;
  $tobool$i$i$i = ($0|0)==(0|0);
  do {
   if ($tobool$i$i$i) {
    $32 = 1;
   } else {
    $__ninp_$i$i$i$i = ((($0)) + 12|0);
    $1 = HEAP32[$__ninp_$i$i$i$i>>2]|0;
    $__einp_$i$i$i$i = ((($0)) + 16|0);
    $2 = HEAP32[$__einp_$i$i$i$i>>2]|0;
    $cmp$i$i$i$i = ($1|0)==($2|0);
    if ($cmp$i$i$i$i) {
     $vtable$i$i$i$i = HEAP32[$0>>2]|0;
     $vfn$i$i$i$i = ((($vtable$i$i$i$i)) + 36|0);
     $3 = HEAP32[$vfn$i$i$i$i>>2]|0;
     $call$i$i$i$i = (FUNCTION_TABLE_ii[$3 & 1023]($0)|0);
     $retval$0$i$i$i$i = $call$i$i$i$i;
    } else {
     $4 = HEAP8[$1>>0]|0;
     $call3$i$i$i$i = (__ZNSt3__211char_traitsIcE11to_int_typeEc($4)|0);
     $retval$0$i$i$i$i = $call3$i$i$i$i;
    }
    $call3$i$i$i = (__ZNSt3__211char_traitsIcE3eofEv()|0);
    $call4$i$i$i = (__ZNSt3__211char_traitsIcE11eq_int_typeEii($retval$0$i$i$i$i,$call3$i$i$i)|0);
    if ($call4$i$i$i) {
     HEAP32[$__b>>2] = 0;
     $32 = 1;
     break;
    } else {
     $$pre$i$i$i = HEAP32[$__b>>2]|0;
     $phitmp$i$i$i = ($$pre$i$i$i|0)==(0|0);
     $32 = $phitmp$i$i$i;
     break;
    }
   }
  } while(0);
  $5 = HEAP32[$__e>>2]|0;
  $tobool$i2$i$i = ($5|0)==(0|0);
  do {
   if ($tobool$i2$i$i) {
    label = 15;
   } else {
    $__ninp_$i$i3$i$i = ((($5)) + 12|0);
    $6 = HEAP32[$__ninp_$i$i3$i$i>>2]|0;
    $__einp_$i$i4$i$i = ((($5)) + 16|0);
    $7 = HEAP32[$__einp_$i$i4$i$i>>2]|0;
    $cmp$i$i5$i$i = ($6|0)==($7|0);
    if ($cmp$i$i5$i$i) {
     $vtable$i$i7$i$i = HEAP32[$5>>2]|0;
     $vfn$i$i8$i$i = ((($vtable$i$i7$i$i)) + 36|0);
     $8 = HEAP32[$vfn$i$i8$i$i>>2]|0;
     $call$i$i9$i$i = (FUNCTION_TABLE_ii[$8 & 1023]($5)|0);
     $retval$0$i$i13$i$i = $call$i$i9$i$i;
    } else {
     $9 = HEAP8[$6>>0]|0;
     $call3$i$i11$i$i = (__ZNSt3__211char_traitsIcE11to_int_typeEc($9)|0);
     $retval$0$i$i13$i$i = $call3$i$i11$i$i;
    }
    $call3$i14$i$i = (__ZNSt3__211char_traitsIcE3eofEv()|0);
    $call4$i15$i$i = (__ZNSt3__211char_traitsIcE11eq_int_typeEii($retval$0$i$i13$i$i,$call3$i14$i$i)|0);
    if ($call4$i15$i$i) {
     HEAP32[$__e>>2] = 0;
     label = 15;
     break;
    } else {
     if ($32) {
      $33 = $5;
      break;
     } else {
      $$pre$i17$i$i52 = $5;
      break L1;
     }
    }
   }
  } while(0);
  if ((label|0) == 15) {
   label = 0;
   if ($32) {
    $$pre$i17$i$i52 = 0;
    break;
   } else {
    $33 = 0;
   }
  }
  $10 = HEAP32[$__b>>2]|0;
  $__ninp_$i$i = ((($10)) + 12|0);
  $11 = HEAP32[$__ninp_$i$i>>2]|0;
  $__einp_$i$i = ((($10)) + 16|0);
  $12 = HEAP32[$__einp_$i$i>>2]|0;
  $cmp$i$i = ($11|0)==($12|0);
  if ($cmp$i$i) {
   $vtable$i$i = HEAP32[$10>>2]|0;
   $vfn$i$i = ((($vtable$i$i)) + 36|0);
   $13 = HEAP32[$vfn$i$i>>2]|0;
   $call$i$i = (FUNCTION_TABLE_ii[$13 & 1023]($10)|0);
   $retval$0$i$i = $call$i$i;
  } else {
   $14 = HEAP8[$11>>0]|0;
   $call3$i$i = (__ZNSt3__211char_traitsIcE11to_int_typeEc($14)|0);
   $retval$0$i$i = $call3$i$i;
  }
  $conv$i = $retval$0$i$i&255;
  $cmp2$i = ($conv$i<<24>>24)>(-1);
  if (!($cmp2$i)) {
   $$pre$i17$i$i52 = $33;
   break;
  }
  $sext = $retval$0$i$i << 24;
  $conv$i4 = $sext >> 24;
  $15 = HEAP32[$__tab_$i>>2]|0;
  $arrayidx$i = (($15) + ($conv$i4<<1)|0);
  $16 = HEAP16[$arrayidx$i>>1]|0;
  $and3$i = $16 & 8192;
  $cmp6$i = ($and3$i<<16>>16)==(0);
  if ($cmp6$i) {
   $$pre$i17$i$i52 = $33;
   break;
  }
  $17 = HEAP32[$__b>>2]|0;
  $__ninp_$i$i6 = ((($17)) + 12|0);
  $18 = HEAP32[$__ninp_$i$i6>>2]|0;
  $__einp_$i$i7 = ((($17)) + 16|0);
  $19 = HEAP32[$__einp_$i$i7>>2]|0;
  $cmp$i$i8 = ($18|0)==($19|0);
  if ($cmp$i$i8) {
   $vtable$i$i9 = HEAP32[$17>>2]|0;
   $vfn$i$i10 = ((($vtable$i$i9)) + 40|0);
   $20 = HEAP32[$vfn$i$i10>>2]|0;
   (FUNCTION_TABLE_ii[$20 & 1023]($17)|0);
   continue;
  } else {
   $incdec$ptr$i$i = ((($18)) + 1|0);
   HEAP32[$__ninp_$i$i6>>2] = $incdec$ptr$i$i;
   $21 = HEAP8[$18>>0]|0;
   (__ZNSt3__211char_traitsIcE11to_int_typeEc($21)|0);
   continue;
  }
 }
 $22 = HEAP32[$__b>>2]|0;
 $tobool$i$i$i16 = ($22|0)==(0|0);
 do {
  if ($tobool$i$i$i16) {
   $34 = 1;
  } else {
   $__ninp_$i$i$i$i17 = ((($22)) + 12|0);
   $23 = HEAP32[$__ninp_$i$i$i$i17>>2]|0;
   $__einp_$i$i$i$i18 = ((($22)) + 16|0);
   $24 = HEAP32[$__einp_$i$i$i$i18>>2]|0;
   $cmp$i$i$i$i19 = ($23|0)==($24|0);
   if ($cmp$i$i$i$i19) {
    $vtable$i$i$i$i21 = HEAP32[$22>>2]|0;
    $vfn$i$i$i$i22 = ((($vtable$i$i$i$i21)) + 36|0);
    $25 = HEAP32[$vfn$i$i$i$i22>>2]|0;
    $call$i$i$i$i23 = (FUNCTION_TABLE_ii[$25 & 1023]($22)|0);
    $retval$0$i$i$i$i27 = $call$i$i$i$i23;
   } else {
    $26 = HEAP8[$23>>0]|0;
    $call3$i$i$i$i25 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($26)|0);
    $retval$0$i$i$i$i27 = $call3$i$i$i$i25;
   }
   $call3$i$i$i28 = (__ZNSt3__211char_traitsIcE3eofEv()|0);
   $call4$i$i$i29 = (__ZNSt3__211char_traitsIcE11eq_int_typeEii($retval$0$i$i$i$i27,$call3$i$i$i28)|0);
   if ($call4$i$i$i29) {
    HEAP32[$__b>>2] = 0;
    $34 = 1;
    break;
   } else {
    $$pre$i$i$i31 = HEAP32[$__b>>2]|0;
    $phitmp$i$i$i32 = ($$pre$i$i$i31|0)==(0|0);
    $34 = $phitmp$i$i$i32;
    break;
   }
  }
 } while(0);
 $tobool$i2$i$i36 = ($$pre$i17$i$i52|0)==(0|0);
 do {
  if ($tobool$i2$i$i36) {
   label = 38;
  } else {
   $__ninp_$i$i3$i$i38 = ((($$pre$i17$i$i52)) + 12|0);
   $27 = HEAP32[$__ninp_$i$i3$i$i38>>2]|0;
   $__einp_$i$i4$i$i39 = ((($$pre$i17$i$i52)) + 16|0);
   $28 = HEAP32[$__einp_$i$i4$i$i39>>2]|0;
   $cmp$i$i5$i$i40 = ($27|0)==($28|0);
   if ($cmp$i$i5$i$i40) {
    $vtable$i$i7$i$i42 = HEAP32[$$pre$i17$i$i52>>2]|0;
    $vfn$i$i8$i$i43 = ((($vtable$i$i7$i$i42)) + 36|0);
    $29 = HEAP32[$vfn$i$i8$i$i43>>2]|0;
    $call$i$i9$i$i44 = (FUNCTION_TABLE_ii[$29 & 1023]($$pre$i17$i$i52)|0);
    $retval$0$i$i13$i$i48 = $call$i$i9$i$i44;
   } else {
    $30 = HEAP8[$27>>0]|0;
    $call3$i$i11$i$i46 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($30)|0);
    $retval$0$i$i13$i$i48 = $call3$i$i11$i$i46;
   }
   $call3$i14$i$i49 = (__ZNSt3__211char_traitsIcE3eofEv()|0);
   $call4$i15$i$i50 = (__ZNSt3__211char_traitsIcE11eq_int_typeEii($retval$0$i$i13$i$i48,$call3$i14$i$i49)|0);
   if ($call4$i15$i$i50) {
    HEAP32[$__e>>2] = 0;
    label = 38;
    break;
   } else {
    if ($34) {
     break;
    } else {
     label = 40;
     break;
    }
   }
  }
 } while(0);
 if ((label|0) == 38) {
  if ($34) {
   label = 40;
  }
 }
 if ((label|0) == 40) {
  $31 = HEAP32[$__err>>2]|0;
  $or = $31 | 2;
  HEAP32[$__err>>2] = $or;
 }
 return;
}
function __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11__get_am_pmERiRS4_S4_RjRKNS_5ctypeIcEE($this,$__h,$__b,$__e,$__err,$__ct) {
 $this = $this|0;
 $__h = $__h|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__err = $__err|0;
 $__ct = $__ct|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__size_$i$i = 0, $__size_$i$i13 = 0, $__size_$i3$i = 0, $__size_$i3$i15 = 0, $add = 0, $add$ptr = 0, $add$ptr5 = 0, $add14 = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0;
 var $arrayidx3 = 0, $call = 0, $call6 = 0, $cmp = 0, $cmp12 = 0, $cmp8 = 0, $cond$i = 0, $cond$i19 = 0, $conv$i$i = 0, $conv$i$i17 = 0, $or = 0, $or$cond = 0, $or$cond21 = 0, $sub$ptr$lhs$cast = 0, $sub$ptr$rhs$cast = 0, $sub$ptr$sub = 0, $tobool$i$i = 0, $tobool$i$i14 = 0, $vfn = 0, $vtable = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $agg$tmp$byval_copy = sp + 4|0;
 $agg$tmp = sp;
 $add$ptr = ((($this)) + 8|0);
 $vtable = HEAP32[$add$ptr>>2]|0;
 $vfn = ((($vtable)) + 8|0);
 $0 = HEAP32[$vfn>>2]|0;
 $call = (FUNCTION_TABLE_ii[$0 & 1023]($add$ptr)|0);
 $__size_$i$i = ((($call)) + 11|0);
 $1 = HEAP8[$__size_$i$i>>0]|0;
 $tobool$i$i = ($1<<24>>24)<(0);
 if ($tobool$i$i) {
  $__size_$i3$i = ((($call)) + 4|0);
  $2 = HEAP32[$__size_$i3$i>>2]|0;
  $cond$i = $2;
 } else {
  $conv$i$i = $1&255;
  $cond$i = $conv$i$i;
 }
 $arrayidx3 = ((($call)) + 12|0);
 $__size_$i$i13 = ((($arrayidx3)) + 11|0);
 $3 = HEAP8[$__size_$i$i13>>0]|0;
 $tobool$i$i14 = ($3<<24>>24)<(0);
 if ($tobool$i$i14) {
  $__size_$i3$i15 = ((($call)) + 16|0);
  $4 = HEAP32[$__size_$i3$i15>>2]|0;
  $cond$i19 = $4;
 } else {
  $conv$i$i17 = $3&255;
  $cond$i19 = $conv$i$i17;
 }
 $add = (0 - ($cond$i19))|0;
 $cmp = ($cond$i|0)==($add|0);
 do {
  if ($cmp) {
   $5 = HEAP32[$__err>>2]|0;
   $or = $5 | 4;
   HEAP32[$__err>>2] = $or;
  } else {
   $6 = HEAP32[$__e>>2]|0;
   HEAP32[$agg$tmp>>2] = $6;
   $add$ptr5 = ((($call)) + 24|0);
   ;HEAP32[$agg$tmp$byval_copy>>2]=HEAP32[$agg$tmp>>2]|0;
   $call6 = (__ZNSt3__214__scan_keywordINS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEPKNS_12basic_stringIcS3_NS_9allocatorIcEEEENS_5ctypeIcEEEET0_RT_SE_SD_SD_RKT1_Rjb($__b,$agg$tmp$byval_copy,$call,$add$ptr5,$__ct,$__err,0)|0);
   $sub$ptr$lhs$cast = $call6;
   $sub$ptr$rhs$cast = $call;
   $sub$ptr$sub = (($sub$ptr$lhs$cast) - ($sub$ptr$rhs$cast))|0;
   $7 = ($sub$ptr$sub|0)==(0);
   $8 = HEAP32[$__h>>2]|0;
   $cmp8 = ($8|0)==(12);
   $or$cond = $cmp8 & $7;
   if ($or$cond) {
    HEAP32[$__h>>2] = 0;
    break;
   }
   $9 = ($sub$ptr$sub|0)==(12);
   $cmp12 = ($8|0)<(12);
   $or$cond21 = $cmp12 & $9;
   if ($or$cond21) {
    $add14 = (($8) + 12)|0;
    HEAP32[$__h>>2] = $add14;
   }
  }
 } while(0);
 STACKTOP = sp;return;
}
function __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE12__get_secondERiRS4_S4_RjRKNS_5ctypeIcEE($this,$__s,$__b,$__e,$__err,$__ct) {
 $this = $this|0;
 $__s = $__s|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__err = $__err|0;
 $__ct = $__ct|0;
 var $0 = 0, $1 = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $and = 0, $call = 0, $cmp = 0, $or = 0, $or$cond = 0, $tobool = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $agg$tmp$byval_copy = sp + 4|0;
 $agg$tmp = sp;
 $0 = HEAP32[$__e>>2]|0;
 HEAP32[$agg$tmp>>2] = $0;
 ;HEAP32[$agg$tmp$byval_copy>>2]=HEAP32[$agg$tmp>>2]|0;
 $call = (__ZNSt3__220__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$agg$tmp$byval_copy,$__err,$__ct,2)|0);
 $1 = HEAP32[$__err>>2]|0;
 $and = $1 & 4;
 $tobool = ($and|0)==(0);
 $cmp = ($call|0)<(61);
 $or$cond = $cmp & $tobool;
 if ($or$cond) {
  HEAP32[$__s>>2] = $call;
 } else {
  $or = $1 | 4;
  HEAP32[$__err>>2] = $or;
 }
 STACKTOP = sp;return;
}
function __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE13__get_weekdayERiRS4_S4_RjRKNS_5ctypeIcEE($this,$__w,$__b,$__e,$__err,$__ct) {
 $this = $this|0;
 $__w = $__w|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__err = $__err|0;
 $__ct = $__ct|0;
 var $0 = 0, $1 = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $and = 0, $call = 0, $cmp = 0, $or = 0, $or$cond = 0, $tobool = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $agg$tmp$byval_copy = sp + 4|0;
 $agg$tmp = sp;
 $0 = HEAP32[$__e>>2]|0;
 HEAP32[$agg$tmp>>2] = $0;
 ;HEAP32[$agg$tmp$byval_copy>>2]=HEAP32[$agg$tmp>>2]|0;
 $call = (__ZNSt3__220__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$agg$tmp$byval_copy,$__err,$__ct,1)|0);
 $1 = HEAP32[$__err>>2]|0;
 $and = $1 & 4;
 $tobool = ($and|0)==(0);
 $cmp = ($call|0)<(7);
 $or$cond = $cmp & $tobool;
 if ($or$cond) {
  HEAP32[$__w>>2] = $call;
 } else {
  $or = $1 | 4;
  HEAP32[$__err>>2] = $or;
 }
 STACKTOP = sp;return;
}
function __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE10__get_yearERiRS4_S4_RjRKNS_5ctypeIcEE($this,$__y,$__b,$__e,$__err,$__ct) {
 $this = $this|0;
 $__y = $__y|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__err = $__err|0;
 $__ct = $__ct|0;
 var $0 = 0, $1 = 0, $__t$0 = 0, $add = 0, $add6 = 0, $add6$call = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $and = 0, $call = 0, $cmp = 0, $cmp4 = 0, $sub = 0, $tobool = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $agg$tmp$byval_copy = sp + 4|0;
 $agg$tmp = sp;
 $0 = HEAP32[$__e>>2]|0;
 HEAP32[$agg$tmp>>2] = $0;
 ;HEAP32[$agg$tmp$byval_copy>>2]=HEAP32[$agg$tmp>>2]|0;
 $call = (__ZNSt3__220__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$agg$tmp$byval_copy,$__err,$__ct,4)|0);
 $1 = HEAP32[$__err>>2]|0;
 $and = $1 & 4;
 $tobool = ($and|0)==(0);
 if ($tobool) {
  $cmp = ($call|0)<(69);
  if ($cmp) {
   $add = (($call) + 2000)|0;
   $__t$0 = $add;
  } else {
   $cmp4 = ($call|0)<(100);
   $add6 = (($call) + 1900)|0;
   $add6$call = $cmp4 ? $add6 : $call;
   $__t$0 = $add6$call;
  }
  $sub = (($__t$0) + -1900)|0;
  HEAP32[$__y>>2] = $sub;
 }
 STACKTOP = sp;return;
}
function __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11__get_year4ERiRS4_S4_RjRKNS_5ctypeIcEE($this,$__y,$__b,$__e,$__err,$__ct) {
 $this = $this|0;
 $__y = $__y|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__err = $__err|0;
 $__ct = $__ct|0;
 var $0 = 0, $1 = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $and = 0, $call = 0, $sub = 0, $tobool = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $agg$tmp$byval_copy = sp + 4|0;
 $agg$tmp = sp;
 $0 = HEAP32[$__e>>2]|0;
 HEAP32[$agg$tmp>>2] = $0;
 ;HEAP32[$agg$tmp$byval_copy>>2]=HEAP32[$agg$tmp>>2]|0;
 $call = (__ZNSt3__220__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$agg$tmp$byval_copy,$__err,$__ct,4)|0);
 $1 = HEAP32[$__err>>2]|0;
 $and = $1 & 4;
 $tobool = ($and|0)==(0);
 if ($tobool) {
  $sub = (($call) + -1900)|0;
  HEAP32[$__y>>2] = $sub;
 }
 STACKTOP = sp;return;
}
function __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE13__get_percentERS4_S4_RjRKNS_5ctypeIcEE($this,$__b,$__e,$__err,$__ct) {
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__err = $__err|0;
 $__ct = $__ct|0;
 var $$pre$i$i$i = 0, $$pre$i$i$i35 = 0, $$pre$i17$i$i5664 = 0, $$sink2 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__einp_$i$i = 0, $__einp_$i$i$i$i = 0, $__einp_$i$i$i$i22 = 0;
 var $__einp_$i$i11 = 0, $__einp_$i$i4$i$i = 0, $__einp_$i$i4$i$i43 = 0, $__ninp_$i$i = 0, $__ninp_$i$i$i$i = 0, $__ninp_$i$i$i$i21 = 0, $__ninp_$i$i10 = 0, $__ninp_$i$i3$i$i = 0, $__ninp_$i$i3$i$i42 = 0, $call$i = 0, $call$i$i = 0, $call$i$i$i$i = 0, $call$i$i$i$i27 = 0, $call$i$i9$i$i = 0, $call$i$i9$i$i48 = 0, $call3$i$i = 0, $call3$i$i$i = 0, $call3$i$i$i$i = 0, $call3$i$i$i$i29 = 0, $call3$i$i$i32 = 0;
 var $call3$i$i11$i$i = 0, $call3$i$i11$i$i50 = 0, $call3$i14$i$i = 0, $call3$i14$i$i53 = 0, $call4$i$i$i = 0, $call4$i$i$i33 = 0, $call4$i15$i$i = 0, $call4$i15$i$i54 = 0, $cmp = 0, $cmp$i$i$i$i = 0, $cmp$i$i$i$i23 = 0, $cmp$i$i12 = 0, $cmp$i$i5$i$i = 0, $cmp$i$i5$i$i44 = 0, $cmp$i$i8 = 0, $conv$i = 0, $incdec$ptr$i$i = 0, $or9 = 0, $phitmp$i$i$i = 0, $phitmp$i$i$i36 = 0;
 var $retval$0$i$i = 0, $retval$0$i$i$i$i = 0, $retval$0$i$i$i$i31 = 0, $retval$0$i$i13$i$i = 0, $retval$0$i$i13$i$i52 = 0, $tobool$i$i$i = 0, $tobool$i$i$i20 = 0, $tobool$i2$i$i = 0, $tobool$i2$i$i40 = 0, $vfn$i = 0, $vfn$i$i = 0, $vfn$i$i$i$i = 0, $vfn$i$i$i$i26 = 0, $vfn$i$i14 = 0, $vfn$i$i8$i$i = 0, $vfn$i$i8$i$i47 = 0, $vtable$i = 0, $vtable$i$i = 0, $vtable$i$i$i$i = 0, $vtable$i$i$i$i25 = 0;
 var $vtable$i$i13 = 0, $vtable$i$i7$i$i = 0, $vtable$i$i7$i$i46 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$__b>>2]|0;
 $tobool$i$i$i = ($0|0)==(0|0);
 do {
  if ($tobool$i$i$i) {
   $31 = 1;
  } else {
   $__ninp_$i$i$i$i = ((($0)) + 12|0);
   $1 = HEAP32[$__ninp_$i$i$i$i>>2]|0;
   $__einp_$i$i$i$i = ((($0)) + 16|0);
   $2 = HEAP32[$__einp_$i$i$i$i>>2]|0;
   $cmp$i$i$i$i = ($1|0)==($2|0);
   if ($cmp$i$i$i$i) {
    $vtable$i$i$i$i = HEAP32[$0>>2]|0;
    $vfn$i$i$i$i = ((($vtable$i$i$i$i)) + 36|0);
    $3 = HEAP32[$vfn$i$i$i$i>>2]|0;
    $call$i$i$i$i = (FUNCTION_TABLE_ii[$3 & 1023]($0)|0);
    $retval$0$i$i$i$i = $call$i$i$i$i;
   } else {
    $4 = HEAP8[$1>>0]|0;
    $call3$i$i$i$i = (__ZNSt3__211char_traitsIcE11to_int_typeEc($4)|0);
    $retval$0$i$i$i$i = $call3$i$i$i$i;
   }
   $call3$i$i$i = (__ZNSt3__211char_traitsIcE3eofEv()|0);
   $call4$i$i$i = (__ZNSt3__211char_traitsIcE11eq_int_typeEii($retval$0$i$i$i$i,$call3$i$i$i)|0);
   if ($call4$i$i$i) {
    HEAP32[$__b>>2] = 0;
    $31 = 1;
    break;
   } else {
    $$pre$i$i$i = HEAP32[$__b>>2]|0;
    $phitmp$i$i$i = ($$pre$i$i$i|0)==(0|0);
    $31 = $phitmp$i$i$i;
    break;
   }
  }
 } while(0);
 $5 = HEAP32[$__e>>2]|0;
 $tobool$i2$i$i = ($5|0)==(0|0);
 do {
  if ($tobool$i2$i$i) {
   label = 14;
  } else {
   $__ninp_$i$i3$i$i = ((($5)) + 12|0);
   $6 = HEAP32[$__ninp_$i$i3$i$i>>2]|0;
   $__einp_$i$i4$i$i = ((($5)) + 16|0);
   $7 = HEAP32[$__einp_$i$i4$i$i>>2]|0;
   $cmp$i$i5$i$i = ($6|0)==($7|0);
   if ($cmp$i$i5$i$i) {
    $vtable$i$i7$i$i = HEAP32[$5>>2]|0;
    $vfn$i$i8$i$i = ((($vtable$i$i7$i$i)) + 36|0);
    $8 = HEAP32[$vfn$i$i8$i$i>>2]|0;
    $call$i$i9$i$i = (FUNCTION_TABLE_ii[$8 & 1023]($5)|0);
    $retval$0$i$i13$i$i = $call$i$i9$i$i;
   } else {
    $9 = HEAP8[$6>>0]|0;
    $call3$i$i11$i$i = (__ZNSt3__211char_traitsIcE11to_int_typeEc($9)|0);
    $retval$0$i$i13$i$i = $call3$i$i11$i$i;
   }
   $call3$i14$i$i = (__ZNSt3__211char_traitsIcE3eofEv()|0);
   $call4$i15$i$i = (__ZNSt3__211char_traitsIcE11eq_int_typeEii($retval$0$i$i13$i$i,$call3$i14$i$i)|0);
   if ($call4$i15$i$i) {
    HEAP32[$__e>>2] = 0;
    label = 14;
    break;
   } else {
    if ($31) {
     $$pre$i17$i$i5664 = $5;
     label = 16;
     break;
    } else {
     $$sink2 = 6;
     label = 38;
     break;
    }
   }
  }
 } while(0);
 if ((label|0) == 14) {
  if ($31) {
   $$sink2 = 6;
   label = 38;
  } else {
   $$pre$i17$i$i5664 = 0;
   label = 16;
  }
 }
 L22: do {
  if ((label|0) == 16) {
   $10 = HEAP32[$__b>>2]|0;
   $__ninp_$i$i = ((($10)) + 12|0);
   $11 = HEAP32[$__ninp_$i$i>>2]|0;
   $__einp_$i$i = ((($10)) + 16|0);
   $12 = HEAP32[$__einp_$i$i>>2]|0;
   $cmp$i$i8 = ($11|0)==($12|0);
   if ($cmp$i$i8) {
    $vtable$i$i = HEAP32[$10>>2]|0;
    $vfn$i$i = ((($vtable$i$i)) + 36|0);
    $13 = HEAP32[$vfn$i$i>>2]|0;
    $call$i$i = (FUNCTION_TABLE_ii[$13 & 1023]($10)|0);
    $retval$0$i$i = $call$i$i;
   } else {
    $14 = HEAP8[$11>>0]|0;
    $call3$i$i = (__ZNSt3__211char_traitsIcE11to_int_typeEc($14)|0);
    $retval$0$i$i = $call3$i$i;
   }
   $conv$i = $retval$0$i$i&255;
   $vtable$i = HEAP32[$__ct>>2]|0;
   $vfn$i = ((($vtable$i)) + 36|0);
   $15 = HEAP32[$vfn$i>>2]|0;
   $call$i = (FUNCTION_TABLE_iiii[$15 & 1023]($__ct,$conv$i,0)|0);
   $cmp = ($call$i<<24>>24)==(37);
   if ($cmp) {
    $16 = HEAP32[$__b>>2]|0;
    $__ninp_$i$i10 = ((($16)) + 12|0);
    $17 = HEAP32[$__ninp_$i$i10>>2]|0;
    $__einp_$i$i11 = ((($16)) + 16|0);
    $18 = HEAP32[$__einp_$i$i11>>2]|0;
    $cmp$i$i12 = ($17|0)==($18|0);
    if ($cmp$i$i12) {
     $vtable$i$i13 = HEAP32[$16>>2]|0;
     $vfn$i$i14 = ((($vtable$i$i13)) + 40|0);
     $19 = HEAP32[$vfn$i$i14>>2]|0;
     (FUNCTION_TABLE_ii[$19 & 1023]($16)|0);
    } else {
     $incdec$ptr$i$i = ((($17)) + 1|0);
     HEAP32[$__ninp_$i$i10>>2] = $incdec$ptr$i$i;
     $20 = HEAP8[$17>>0]|0;
     (__ZNSt3__211char_traitsIcE11to_int_typeEc($20)|0);
    }
    $21 = HEAP32[$__b>>2]|0;
    $tobool$i$i$i20 = ($21|0)==(0|0);
    do {
     if ($tobool$i$i$i20) {
      $32 = 1;
     } else {
      $__ninp_$i$i$i$i21 = ((($21)) + 12|0);
      $22 = HEAP32[$__ninp_$i$i$i$i21>>2]|0;
      $__einp_$i$i$i$i22 = ((($21)) + 16|0);
      $23 = HEAP32[$__einp_$i$i$i$i22>>2]|0;
      $cmp$i$i$i$i23 = ($22|0)==($23|0);
      if ($cmp$i$i$i$i23) {
       $vtable$i$i$i$i25 = HEAP32[$21>>2]|0;
       $vfn$i$i$i$i26 = ((($vtable$i$i$i$i25)) + 36|0);
       $24 = HEAP32[$vfn$i$i$i$i26>>2]|0;
       $call$i$i$i$i27 = (FUNCTION_TABLE_ii[$24 & 1023]($21)|0);
       $retval$0$i$i$i$i31 = $call$i$i$i$i27;
      } else {
       $25 = HEAP8[$22>>0]|0;
       $call3$i$i$i$i29 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($25)|0);
       $retval$0$i$i$i$i31 = $call3$i$i$i$i29;
      }
      $call3$i$i$i32 = (__ZNSt3__211char_traitsIcE3eofEv()|0);
      $call4$i$i$i33 = (__ZNSt3__211char_traitsIcE11eq_int_typeEii($retval$0$i$i$i$i31,$call3$i$i$i32)|0);
      if ($call4$i$i$i33) {
       HEAP32[$__b>>2] = 0;
       $32 = 1;
       break;
      } else {
       $$pre$i$i$i35 = HEAP32[$__b>>2]|0;
       $phitmp$i$i$i36 = ($$pre$i$i$i35|0)==(0|0);
       $32 = $phitmp$i$i$i36;
       break;
      }
     }
    } while(0);
    $tobool$i2$i$i40 = ($$pre$i17$i$i5664|0)==(0|0);
    do {
     if (!($tobool$i2$i$i40)) {
      $__ninp_$i$i3$i$i42 = ((($$pre$i17$i$i5664)) + 12|0);
      $26 = HEAP32[$__ninp_$i$i3$i$i42>>2]|0;
      $__einp_$i$i4$i$i43 = ((($$pre$i17$i$i5664)) + 16|0);
      $27 = HEAP32[$__einp_$i$i4$i$i43>>2]|0;
      $cmp$i$i5$i$i44 = ($26|0)==($27|0);
      if ($cmp$i$i5$i$i44) {
       $vtable$i$i7$i$i46 = HEAP32[$$pre$i17$i$i5664>>2]|0;
       $vfn$i$i8$i$i47 = ((($vtable$i$i7$i$i46)) + 36|0);
       $28 = HEAP32[$vfn$i$i8$i$i47>>2]|0;
       $call$i$i9$i$i48 = (FUNCTION_TABLE_ii[$28 & 1023]($$pre$i17$i$i5664)|0);
       $retval$0$i$i13$i$i52 = $call$i$i9$i$i48;
      } else {
       $29 = HEAP8[$26>>0]|0;
       $call3$i$i11$i$i50 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($29)|0);
       $retval$0$i$i13$i$i52 = $call3$i$i11$i$i50;
      }
      $call3$i14$i$i53 = (__ZNSt3__211char_traitsIcE3eofEv()|0);
      $call4$i15$i$i54 = (__ZNSt3__211char_traitsIcE11eq_int_typeEii($retval$0$i$i13$i$i52,$call3$i14$i$i53)|0);
      if ($call4$i15$i$i54) {
       HEAP32[$__e>>2] = 0;
       break;
      } else {
       if ($32) {
        break L22;
       } else {
        $$sink2 = 2;
        label = 38;
        break L22;
       }
      }
     }
    } while(0);
    if ($32) {
     $$sink2 = 2;
     label = 38;
    }
   } else {
    $$sink2 = 4;
    label = 38;
   }
  }
 } while(0);
 if ((label|0) == 38) {
  $30 = HEAP32[$__err>>2]|0;
  $or9 = $30 | $$sink2;
  HEAP32[$__err>>2] = $or9;
 }
 return;
}
function __ZNSt3__220__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$__e,$__err,$__ct,$__n) {
 $__b = $__b|0;
 $__e = $__e|0;
 $__err = $__err|0;
 $__ct = $__ct|0;
 $__n = $__n|0;
 var $$pre$i$i$i = 0, $$pre$i$i$i125 = 0, $$pre$i$i$i46 = 0, $$pre$i17$i$i146 = 0, $$pre$i17$i$i67 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $7 = 0, $8 = 0, $9 = 0, $__einp_$i$i = 0, $__einp_$i$i$i$i = 0, $__einp_$i$i$i$i112 = 0, $__einp_$i$i$i$i33 = 0, $__einp_$i$i22 = 0, $__einp_$i$i4$i$i = 0, $__einp_$i$i4$i$i133 = 0, $__einp_$i$i4$i$i54 = 0, $__einp_$i$i74 = 0, $__einp_$i$i99 = 0, $__n$addr$0 = 0;
 var $__n$addr$0$in = 0, $__ninp_$i$i = 0, $__ninp_$i$i$i$i = 0, $__ninp_$i$i$i$i111 = 0, $__ninp_$i$i$i$i32 = 0, $__ninp_$i$i21 = 0, $__ninp_$i$i3$i$i = 0, $__ninp_$i$i3$i$i132 = 0, $__ninp_$i$i3$i$i53 = 0, $__ninp_$i$i73 = 0, $__ninp_$i$i98 = 0, $__r$0 = 0, $__r$0$in = 0, $__tab_$i = 0, $add = 0, $and3$i = 0, $and3$i89 = 0, $arrayidx$i = 0, $arrayidx$i88 = 0, $call$i = 0;
 var $call$i$i = 0, $call$i$i$i$i = 0, $call$i$i$i$i117 = 0, $call$i$i$i$i38 = 0, $call$i$i78 = 0, $call$i$i9$i$i = 0, $call$i$i9$i$i138 = 0, $call$i$i9$i$i59 = 0, $call$i96 = 0, $call3$i$i = 0, $call3$i$i$i = 0, $call3$i$i$i$i = 0, $call3$i$i$i$i119 = 0, $call3$i$i$i$i40 = 0, $call3$i$i$i122 = 0, $call3$i$i$i43 = 0, $call3$i$i11$i$i = 0, $call3$i$i11$i$i140 = 0, $call3$i$i11$i$i61 = 0, $call3$i$i80 = 0;
 var $call3$i14$i$i = 0, $call3$i14$i$i143 = 0, $call3$i14$i$i64 = 0, $call4$i$i$i = 0, $call4$i$i$i123 = 0, $call4$i$i$i44 = 0, $call4$i15$i$i = 0, $call4$i15$i$i144 = 0, $call4$i15$i$i65 = 0, $cmp = 0, $cmp$i$i$i$i = 0, $cmp$i$i$i$i113 = 0, $cmp$i$i$i$i34 = 0, $cmp$i$i100 = 0, $cmp$i$i18 = 0, $cmp$i$i23 = 0, $cmp$i$i5$i$i = 0, $cmp$i$i5$i$i134 = 0, $cmp$i$i5$i$i55 = 0, $cmp$i$i75 = 0;
 var $cmp2$i = 0, $cmp2$i85 = 0, $cmp6$i = 0, $cmp6$i90 = 0, $cmptmp$i$i71 = 0, $conv = 0, $conv$i = 0, $conv$i19 = 0, $conv$i83 = 0, $conv$i86 = 0, $conv14 = 0, $incdec$ptr$i$i = 0, $incdec$ptr$i$i105 = 0, $mul = 0, $or = 0, $or20 = 0, $or4 = 0, $phitmp$i$i$i = 0, $phitmp$i$i$i126 = 0, $phitmp$i$i$i47 = 0;
 var $phitmp$i18$i$i68 = 0, $retval$0$i$i = 0, $retval$0$i$i$i$i = 0, $retval$0$i$i$i$i121 = 0, $retval$0$i$i$i$i42 = 0, $retval$0$i$i13$i$i = 0, $retval$0$i$i13$i$i142 = 0, $retval$0$i$i13$i$i63 = 0, $retval$0$i$i82 = 0, $retval$2 = 0, $sext = 0, $sext153 = 0, $tobool$i$i$i = 0, $tobool$i$i$i110 = 0, $tobool$i$i$i31 = 0, $tobool$i2$i$i = 0, $tobool$i2$i$i130 = 0, $tobool$i2$i$i51 = 0, $vfn$i = 0, $vfn$i$i = 0;
 var $vfn$i$i$i$i = 0, $vfn$i$i$i$i116 = 0, $vfn$i$i$i$i37 = 0, $vfn$i$i102 = 0, $vfn$i$i25 = 0, $vfn$i$i77 = 0, $vfn$i$i8$i$i = 0, $vfn$i$i8$i$i137 = 0, $vfn$i$i8$i$i58 = 0, $vfn$i95 = 0, $vtable$i = 0, $vtable$i$i = 0, $vtable$i$i$i$i = 0, $vtable$i$i$i$i115 = 0, $vtable$i$i$i$i36 = 0, $vtable$i$i101 = 0, $vtable$i$i24 = 0, $vtable$i$i7$i$i = 0, $vtable$i$i7$i$i136 = 0, $vtable$i$i7$i$i57 = 0;
 var $vtable$i$i76 = 0, $vtable$i94 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$__b>>2]|0;
 $tobool$i$i$i = ($0|0)==(0|0);
 do {
  if ($tobool$i$i$i) {
   $60 = 1;
  } else {
   $__ninp_$i$i$i$i = ((($0)) + 12|0);
   $1 = HEAP32[$__ninp_$i$i$i$i>>2]|0;
   $__einp_$i$i$i$i = ((($0)) + 16|0);
   $2 = HEAP32[$__einp_$i$i$i$i>>2]|0;
   $cmp$i$i$i$i = ($1|0)==($2|0);
   if ($cmp$i$i$i$i) {
    $vtable$i$i$i$i = HEAP32[$0>>2]|0;
    $vfn$i$i$i$i = ((($vtable$i$i$i$i)) + 36|0);
    $3 = HEAP32[$vfn$i$i$i$i>>2]|0;
    $call$i$i$i$i = (FUNCTION_TABLE_ii[$3 & 1023]($0)|0);
    $retval$0$i$i$i$i = $call$i$i$i$i;
   } else {
    $4 = HEAP8[$1>>0]|0;
    $call3$i$i$i$i = (__ZNSt3__211char_traitsIcE11to_int_typeEc($4)|0);
    $retval$0$i$i$i$i = $call3$i$i$i$i;
   }
   $call3$i$i$i = (__ZNSt3__211char_traitsIcE3eofEv()|0);
   $call4$i$i$i = (__ZNSt3__211char_traitsIcE11eq_int_typeEii($retval$0$i$i$i$i,$call3$i$i$i)|0);
   if ($call4$i$i$i) {
    HEAP32[$__b>>2] = 0;
    $60 = 1;
    break;
   } else {
    $$pre$i$i$i = HEAP32[$__b>>2]|0;
    $phitmp$i$i$i = ($$pre$i$i$i|0)==(0|0);
    $60 = $phitmp$i$i$i;
    break;
   }
  }
 } while(0);
 $5 = HEAP32[$__e>>2]|0;
 $tobool$i2$i$i = ($5|0)==(0|0);
 do {
  if ($tobool$i2$i$i) {
   label = 14;
  } else {
   $__ninp_$i$i3$i$i = ((($5)) + 12|0);
   $6 = HEAP32[$__ninp_$i$i3$i$i>>2]|0;
   $__einp_$i$i4$i$i = ((($5)) + 16|0);
   $7 = HEAP32[$__einp_$i$i4$i$i>>2]|0;
   $cmp$i$i5$i$i = ($6|0)==($7|0);
   if ($cmp$i$i5$i$i) {
    $vtable$i$i7$i$i = HEAP32[$5>>2]|0;
    $vfn$i$i8$i$i = ((($vtable$i$i7$i$i)) + 36|0);
    $8 = HEAP32[$vfn$i$i8$i$i>>2]|0;
    $call$i$i9$i$i = (FUNCTION_TABLE_ii[$8 & 1023]($5)|0);
    $retval$0$i$i13$i$i = $call$i$i9$i$i;
   } else {
    $9 = HEAP8[$6>>0]|0;
    $call3$i$i11$i$i = (__ZNSt3__211char_traitsIcE11to_int_typeEc($9)|0);
    $retval$0$i$i13$i$i = $call3$i$i11$i$i;
   }
   $call3$i14$i$i = (__ZNSt3__211char_traitsIcE3eofEv()|0);
   $call4$i15$i$i = (__ZNSt3__211char_traitsIcE11eq_int_typeEii($retval$0$i$i13$i$i,$call3$i14$i$i)|0);
   if ($call4$i15$i$i) {
    HEAP32[$__e>>2] = 0;
    label = 14;
    break;
   } else {
    if ($60) {
     $61 = $5;
     label = 17;
     break;
    } else {
     label = 16;
     break;
    }
   }
  }
 } while(0);
 if ((label|0) == 14) {
  if ($60) {
   label = 16;
  } else {
   $61 = 0;
   label = 17;
  }
 }
 L22: do {
  if ((label|0) == 16) {
   $10 = HEAP32[$__err>>2]|0;
   $or = $10 | 6;
   HEAP32[$__err>>2] = $or;
   $retval$2 = 0;
  }
  else if ((label|0) == 17) {
   $11 = HEAP32[$__b>>2]|0;
   $__ninp_$i$i = ((($11)) + 12|0);
   $12 = HEAP32[$__ninp_$i$i>>2]|0;
   $__einp_$i$i = ((($11)) + 16|0);
   $13 = HEAP32[$__einp_$i$i>>2]|0;
   $cmp$i$i18 = ($12|0)==($13|0);
   if ($cmp$i$i18) {
    $vtable$i$i = HEAP32[$11>>2]|0;
    $vfn$i$i = ((($vtable$i$i)) + 36|0);
    $14 = HEAP32[$vfn$i$i>>2]|0;
    $call$i$i = (FUNCTION_TABLE_ii[$14 & 1023]($11)|0);
    $retval$0$i$i = $call$i$i;
   } else {
    $15 = HEAP8[$12>>0]|0;
    $call3$i$i = (__ZNSt3__211char_traitsIcE11to_int_typeEc($15)|0);
    $retval$0$i$i = $call3$i$i;
   }
   $conv$i = $retval$0$i$i&255;
   $cmp2$i = ($conv$i<<24>>24)>(-1);
   if ($cmp2$i) {
    $sext = $retval$0$i$i << 24;
    $conv$i19 = $sext >> 24;
    $__tab_$i = ((($__ct)) + 8|0);
    $16 = HEAP32[$__tab_$i>>2]|0;
    $arrayidx$i = (($16) + ($conv$i19<<1)|0);
    $17 = HEAP16[$arrayidx$i>>1]|0;
    $and3$i = $17 & 2048;
    $cmp6$i = ($and3$i<<16>>16)==(0);
    if (!($cmp6$i)) {
     $vtable$i = HEAP32[$__ct>>2]|0;
     $vfn$i = ((($vtable$i)) + 36|0);
     $19 = HEAP32[$vfn$i>>2]|0;
     $call$i = (FUNCTION_TABLE_iiii[$19 & 1023]($__ct,$conv$i,0)|0);
     $conv = $call$i << 24 >> 24;
     $20 = HEAP32[$__b>>2]|0;
     $__ninp_$i$i21 = ((($20)) + 12|0);
     $21 = HEAP32[$__ninp_$i$i21>>2]|0;
     $__einp_$i$i22 = ((($20)) + 16|0);
     $22 = HEAP32[$__einp_$i$i22>>2]|0;
     $cmp$i$i23 = ($21|0)==($22|0);
     if ($cmp$i$i23) {
      $vtable$i$i24 = HEAP32[$20>>2]|0;
      $vfn$i$i25 = ((($vtable$i$i24)) + 40|0);
      $23 = HEAP32[$vfn$i$i25>>2]|0;
      (FUNCTION_TABLE_ii[$23 & 1023]($20)|0);
      $$pre$i17$i$i67 = $61;$30 = $61;$__n$addr$0$in = $__n;$__r$0$in = $conv;
     } else {
      $incdec$ptr$i$i = ((($21)) + 1|0);
      HEAP32[$__ninp_$i$i21>>2] = $incdec$ptr$i$i;
      $24 = HEAP8[$21>>0]|0;
      (__ZNSt3__211char_traitsIcE11to_int_typeEc($24)|0);
      $$pre$i17$i$i67 = $61;$30 = $61;$__n$addr$0$in = $__n;$__r$0$in = $conv;
     }
     while(1) {
      $__r$0 = (($__r$0$in) + -48)|0;
      $__n$addr$0 = (($__n$addr$0$in) + -1)|0;
      $25 = HEAP32[$__b>>2]|0;
      $tobool$i$i$i31 = ($25|0)==(0|0);
      do {
       if ($tobool$i$i$i31) {
        $35 = 1;
       } else {
        $__ninp_$i$i$i$i32 = ((($25)) + 12|0);
        $26 = HEAP32[$__ninp_$i$i$i$i32>>2]|0;
        $__einp_$i$i$i$i33 = ((($25)) + 16|0);
        $27 = HEAP32[$__einp_$i$i$i$i33>>2]|0;
        $cmp$i$i$i$i34 = ($26|0)==($27|0);
        if ($cmp$i$i$i$i34) {
         $vtable$i$i$i$i36 = HEAP32[$25>>2]|0;
         $vfn$i$i$i$i37 = ((($vtable$i$i$i$i36)) + 36|0);
         $28 = HEAP32[$vfn$i$i$i$i37>>2]|0;
         $call$i$i$i$i38 = (FUNCTION_TABLE_ii[$28 & 1023]($25)|0);
         $retval$0$i$i$i$i42 = $call$i$i$i$i38;
        } else {
         $29 = HEAP8[$26>>0]|0;
         $call3$i$i$i$i40 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($29)|0);
         $retval$0$i$i$i$i42 = $call3$i$i$i$i40;
        }
        $call3$i$i$i43 = (__ZNSt3__211char_traitsIcE3eofEv()|0);
        $call4$i$i$i44 = (__ZNSt3__211char_traitsIcE11eq_int_typeEii($retval$0$i$i$i$i42,$call3$i$i$i43)|0);
        if ($call4$i$i$i44) {
         HEAP32[$__b>>2] = 0;
         $35 = 1;
         break;
        } else {
         $$pre$i$i$i46 = HEAP32[$__b>>2]|0;
         $phitmp$i$i$i47 = ($$pre$i$i$i46|0)==(0|0);
         $35 = $phitmp$i$i$i47;
         break;
        }
       }
      } while(0);
      $tobool$i2$i$i51 = ($30|0)==(0|0);
      do {
       if ($tobool$i2$i$i51) {
        $$pre$i17$i$i146 = $$pre$i17$i$i67;$36 = 1;$62 = 0;
       } else {
        $__ninp_$i$i3$i$i53 = ((($30)) + 12|0);
        $31 = HEAP32[$__ninp_$i$i3$i$i53>>2]|0;
        $__einp_$i$i4$i$i54 = ((($30)) + 16|0);
        $32 = HEAP32[$__einp_$i$i4$i$i54>>2]|0;
        $cmp$i$i5$i$i55 = ($31|0)==($32|0);
        if ($cmp$i$i5$i$i55) {
         $vtable$i$i7$i$i57 = HEAP32[$30>>2]|0;
         $vfn$i$i8$i$i58 = ((($vtable$i$i7$i$i57)) + 36|0);
         $33 = HEAP32[$vfn$i$i8$i$i58>>2]|0;
         $call$i$i9$i$i59 = (FUNCTION_TABLE_ii[$33 & 1023]($30)|0);
         $retval$0$i$i13$i$i63 = $call$i$i9$i$i59;
        } else {
         $34 = HEAP8[$31>>0]|0;
         $call3$i$i11$i$i61 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($34)|0);
         $retval$0$i$i13$i$i63 = $call3$i$i11$i$i61;
        }
        $call3$i14$i$i64 = (__ZNSt3__211char_traitsIcE3eofEv()|0);
        $call4$i15$i$i65 = (__ZNSt3__211char_traitsIcE11eq_int_typeEii($retval$0$i$i13$i$i63,$call3$i14$i$i64)|0);
        if ($call4$i15$i$i65) {
         HEAP32[$__e>>2] = 0;
         $$pre$i17$i$i146 = 0;$36 = 1;$62 = 0;
         break;
        } else {
         $phitmp$i18$i$i68 = ($$pre$i17$i$i67|0)==(0|0);
         $$pre$i17$i$i146 = $$pre$i17$i$i67;$36 = $phitmp$i18$i$i68;$62 = $$pre$i17$i$i67;
         break;
        }
       }
      } while(0);
      $cmptmp$i$i71 = $35 ^ $36;
      $cmp = ($__n$addr$0$in|0)>(1);
      $37 = $cmp & $cmptmp$i$i71;
      $38 = HEAP32[$__b>>2]|0;
      if (!($37)) {
       break;
      }
      $__ninp_$i$i73 = ((($38)) + 12|0);
      $39 = HEAP32[$__ninp_$i$i73>>2]|0;
      $__einp_$i$i74 = ((($38)) + 16|0);
      $40 = HEAP32[$__einp_$i$i74>>2]|0;
      $cmp$i$i75 = ($39|0)==($40|0);
      if ($cmp$i$i75) {
       $vtable$i$i76 = HEAP32[$38>>2]|0;
       $vfn$i$i77 = ((($vtable$i$i76)) + 36|0);
       $41 = HEAP32[$vfn$i$i77>>2]|0;
       $call$i$i78 = (FUNCTION_TABLE_ii[$41 & 1023]($38)|0);
       $retval$0$i$i82 = $call$i$i78;
      } else {
       $42 = HEAP8[$39>>0]|0;
       $call3$i$i80 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($42)|0);
       $retval$0$i$i82 = $call3$i$i80;
      }
      $conv$i83 = $retval$0$i$i82&255;
      $cmp2$i85 = ($conv$i83<<24>>24)>(-1);
      if (!($cmp2$i85)) {
       $retval$2 = $__r$0;
       break L22;
      }
      $sext153 = $retval$0$i$i82 << 24;
      $conv$i86 = $sext153 >> 24;
      $43 = HEAP32[$__tab_$i>>2]|0;
      $arrayidx$i88 = (($43) + ($conv$i86<<1)|0);
      $44 = HEAP16[$arrayidx$i88>>1]|0;
      $and3$i89 = $44 & 2048;
      $cmp6$i90 = ($and3$i89<<16>>16)==(0);
      if ($cmp6$i90) {
       $retval$2 = $__r$0;
       break L22;
      }
      $mul = ($__r$0*10)|0;
      $vtable$i94 = HEAP32[$__ct>>2]|0;
      $vfn$i95 = ((($vtable$i94)) + 36|0);
      $45 = HEAP32[$vfn$i95>>2]|0;
      $call$i96 = (FUNCTION_TABLE_iiii[$45 & 1023]($__ct,$conv$i83,0)|0);
      $conv14 = $call$i96 << 24 >> 24;
      $add = (($conv14) + ($mul))|0;
      $46 = HEAP32[$__b>>2]|0;
      $__ninp_$i$i98 = ((($46)) + 12|0);
      $47 = HEAP32[$__ninp_$i$i98>>2]|0;
      $__einp_$i$i99 = ((($46)) + 16|0);
      $48 = HEAP32[$__einp_$i$i99>>2]|0;
      $cmp$i$i100 = ($47|0)==($48|0);
      if ($cmp$i$i100) {
       $vtable$i$i101 = HEAP32[$46>>2]|0;
       $vfn$i$i102 = ((($vtable$i$i101)) + 40|0);
       $49 = HEAP32[$vfn$i$i102>>2]|0;
       (FUNCTION_TABLE_ii[$49 & 1023]($46)|0);
       $$pre$i17$i$i67 = $$pre$i17$i$i146;$30 = $62;$__n$addr$0$in = $__n$addr$0;$__r$0$in = $add;
       continue;
      } else {
       $incdec$ptr$i$i105 = ((($47)) + 1|0);
       HEAP32[$__ninp_$i$i98>>2] = $incdec$ptr$i$i105;
       $50 = HEAP8[$47>>0]|0;
       (__ZNSt3__211char_traitsIcE11to_int_typeEc($50)|0);
       $$pre$i17$i$i67 = $$pre$i17$i$i146;$30 = $62;$__n$addr$0$in = $__n$addr$0;$__r$0$in = $add;
       continue;
      }
     }
     $tobool$i$i$i110 = ($38|0)==(0|0);
     do {
      if ($tobool$i$i$i110) {
       $63 = 1;
      } else {
       $__ninp_$i$i$i$i111 = ((($38)) + 12|0);
       $51 = HEAP32[$__ninp_$i$i$i$i111>>2]|0;
       $__einp_$i$i$i$i112 = ((($38)) + 16|0);
       $52 = HEAP32[$__einp_$i$i$i$i112>>2]|0;
       $cmp$i$i$i$i113 = ($51|0)==($52|0);
       if ($cmp$i$i$i$i113) {
        $vtable$i$i$i$i115 = HEAP32[$38>>2]|0;
        $vfn$i$i$i$i116 = ((($vtable$i$i$i$i115)) + 36|0);
        $53 = HEAP32[$vfn$i$i$i$i116>>2]|0;
        $call$i$i$i$i117 = (FUNCTION_TABLE_ii[$53 & 1023]($38)|0);
        $retval$0$i$i$i$i121 = $call$i$i$i$i117;
       } else {
        $54 = HEAP8[$51>>0]|0;
        $call3$i$i$i$i119 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($54)|0);
        $retval$0$i$i$i$i121 = $call3$i$i$i$i119;
       }
       $call3$i$i$i122 = (__ZNSt3__211char_traitsIcE3eofEv()|0);
       $call4$i$i$i123 = (__ZNSt3__211char_traitsIcE11eq_int_typeEii($retval$0$i$i$i$i121,$call3$i$i$i122)|0);
       if ($call4$i$i$i123) {
        HEAP32[$__b>>2] = 0;
        $63 = 1;
        break;
       } else {
        $$pre$i$i$i125 = HEAP32[$__b>>2]|0;
        $phitmp$i$i$i126 = ($$pre$i$i$i125|0)==(0|0);
        $63 = $phitmp$i$i$i126;
        break;
       }
      }
     } while(0);
     $tobool$i2$i$i130 = ($$pre$i17$i$i146|0)==(0|0);
     do {
      if ($tobool$i2$i$i130) {
       label = 62;
      } else {
       $__ninp_$i$i3$i$i132 = ((($$pre$i17$i$i146)) + 12|0);
       $55 = HEAP32[$__ninp_$i$i3$i$i132>>2]|0;
       $__einp_$i$i4$i$i133 = ((($$pre$i17$i$i146)) + 16|0);
       $56 = HEAP32[$__einp_$i$i4$i$i133>>2]|0;
       $cmp$i$i5$i$i134 = ($55|0)==($56|0);
       if ($cmp$i$i5$i$i134) {
        $vtable$i$i7$i$i136 = HEAP32[$$pre$i17$i$i146>>2]|0;
        $vfn$i$i8$i$i137 = ((($vtable$i$i7$i$i136)) + 36|0);
        $57 = HEAP32[$vfn$i$i8$i$i137>>2]|0;
        $call$i$i9$i$i138 = (FUNCTION_TABLE_ii[$57 & 1023]($$pre$i17$i$i146)|0);
        $retval$0$i$i13$i$i142 = $call$i$i9$i$i138;
       } else {
        $58 = HEAP8[$55>>0]|0;
        $call3$i$i11$i$i140 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($58)|0);
        $retval$0$i$i13$i$i142 = $call3$i$i11$i$i140;
       }
       $call3$i14$i$i143 = (__ZNSt3__211char_traitsIcE3eofEv()|0);
       $call4$i15$i$i144 = (__ZNSt3__211char_traitsIcE11eq_int_typeEii($retval$0$i$i13$i$i142,$call3$i14$i$i143)|0);
       if ($call4$i15$i$i144) {
        HEAP32[$__e>>2] = 0;
        label = 62;
        break;
       } else {
        if ($63) {
         $retval$2 = $__r$0;
         break L22;
        } else {
         break;
        }
       }
      }
     } while(0);
     if ((label|0) == 62) {
      if (!($63)) {
       $retval$2 = $__r$0;
       break;
      }
     }
     $59 = HEAP32[$__err>>2]|0;
     $or20 = $59 | 2;
     HEAP32[$__err>>2] = $or20;
     $retval$2 = $__r$0;
     break;
    }
   }
   $18 = HEAP32[$__err>>2]|0;
   $or4 = $18 | 4;
   HEAP32[$__err>>2] = $or4;
   $retval$2 = 0;
  }
 } while(0);
 return ($retval$2|0);
}
function __ZNSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__26locale5facetD2Ev($this);
 return;
}
function __ZNSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__26locale5facetD2Ev($this);
 __ZdlPv($this);
 return;
}
function __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE13do_date_orderEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 2;
}
function __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11do_get_timeES4_S4_RNS_8ios_baseERjP2tm($this,$__b,$__e,$__iob,$__err,$__tm) {
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__tm = $__tm|0;
 var $0 = 0, $1 = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $agg$tmp2 = 0, $agg$tmp2$byval_copy = 0, $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $agg$tmp2$byval_copy = sp + 12|0;
 $agg$tmp$byval_copy = sp + 8|0;
 $agg$tmp = sp + 4|0;
 $agg$tmp2 = sp;
 $0 = HEAP32[$__b>>2]|0;
 HEAP32[$agg$tmp>>2] = $0;
 $1 = HEAP32[$__e>>2]|0;
 HEAP32[$agg$tmp2>>2] = $1;
 ;HEAP32[$agg$tmp$byval_copy>>2]=HEAP32[$agg$tmp>>2]|0;
 ;HEAP32[$agg$tmp2$byval_copy>>2]=HEAP32[$agg$tmp2>>2]|0;
 $call = (__ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_($this,$agg$tmp$byval_copy,$agg$tmp2$byval_copy,$__iob,$__err,$__tm,8388,(8420))|0);
 STACKTOP = sp;return ($call|0);
}
function __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11do_get_dateES4_S4_RNS_8ios_baseERjP2tm($this,$__b,$__e,$__iob,$__err,$__tm) {
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__tm = $__tm|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $__size_$i$i$i = 0, $__size_$i2$i = 0, $add$ptr = 0, $add$ptr6 = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $agg$tmp2 = 0, $agg$tmp2$byval_copy = 0, $call = 0, $call7 = 0, $cond$i = 0, $cond$i$i = 0, $conv$i$i = 0;
 var $tobool$i$i$i = 0, $vfn = 0, $vtable = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $agg$tmp2$byval_copy = sp + 12|0;
 $agg$tmp$byval_copy = sp + 8|0;
 $agg$tmp = sp + 4|0;
 $agg$tmp2 = sp;
 $add$ptr = ((($this)) + 8|0);
 $vtable = HEAP32[$add$ptr>>2]|0;
 $vfn = ((($vtable)) + 20|0);
 $0 = HEAP32[$vfn>>2]|0;
 $call = (FUNCTION_TABLE_ii[$0 & 1023]($add$ptr)|0);
 $1 = HEAP32[$__b>>2]|0;
 HEAP32[$agg$tmp>>2] = $1;
 $2 = HEAP32[$__e>>2]|0;
 HEAP32[$agg$tmp2>>2] = $2;
 $3 = ((($call)) + 8|0);
 $__size_$i$i$i = ((($3)) + 3|0);
 $4 = HEAP8[$__size_$i$i$i>>0]|0;
 $tobool$i$i$i = ($4<<24>>24)<(0);
 $5 = HEAP32[$call>>2]|0;
 $cond$i$i = $tobool$i$i$i ? $5 : $call;
 $__size_$i2$i = ((($call)) + 4|0);
 $6 = HEAP32[$__size_$i2$i>>2]|0;
 $conv$i$i = $4&255;
 $cond$i = $tobool$i$i$i ? $6 : $conv$i$i;
 $add$ptr6 = (($cond$i$i) + ($cond$i<<2)|0);
 ;HEAP32[$agg$tmp$byval_copy>>2]=HEAP32[$agg$tmp>>2]|0;
 ;HEAP32[$agg$tmp2$byval_copy>>2]=HEAP32[$agg$tmp2>>2]|0;
 $call7 = (__ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_($this,$agg$tmp$byval_copy,$agg$tmp2$byval_copy,$__iob,$__err,$__tm,$cond$i$i,$add$ptr6)|0);
 STACKTOP = sp;return ($call7|0);
}
function __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE14do_get_weekdayES4_S4_RNS_8ios_baseERjP2tm($this,$__b,$__e,$__iob,$__err,$__tm) {
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__tm = $__tm|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $call$i2 = 0, $ref$tmp = 0, $retval$sroa$0$0$copyload = 0, $tm_wday = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $agg$tmp$byval_copy = sp + 8|0;
 $ref$tmp = sp + 4|0;
 $agg$tmp = sp;
 __ZNKSt3__28ios_base6getlocEv($ref$tmp,$__iob);
 __THREW__ = 0;
 $call$i2 = (invoke_iii(380,($ref$tmp|0),(20128|0))|0);
 $0 = __THREW__; __THREW__ = 0;
 $1 = $0&1;
 if ($1) {
  $3 = ___cxa_find_matching_catch_2()|0;
  $4 = tempRet0;
  __ZNSt3__26localeD2Ev($ref$tmp);
  ___resumeException($3|0);
  // unreachable;
 } else {
  __ZNSt3__26localeD2Ev($ref$tmp);
  $tm_wday = ((($__tm)) + 24|0);
  $2 = HEAP32[$__e>>2]|0;
  HEAP32[$agg$tmp>>2] = $2;
  ;HEAP32[$agg$tmp$byval_copy>>2]=HEAP32[$agg$tmp>>2]|0;
  __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__get_weekdaynameERiRS4_S4_RjRKNS_5ctypeIwEE($this,$tm_wday,$__b,$agg$tmp$byval_copy,$__err,$call$i2);
  $retval$sroa$0$0$copyload = HEAP32[$__b>>2]|0;
  STACKTOP = sp;return ($retval$sroa$0$0$copyload|0);
 }
 return (0)|0;
}
function __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE16do_get_monthnameES4_S4_RNS_8ios_baseERjP2tm($this,$__b,$__e,$__iob,$__err,$__tm) {
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__tm = $__tm|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $call$i2 = 0, $ref$tmp = 0, $retval$sroa$0$0$copyload = 0, $tm_mon = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $agg$tmp$byval_copy = sp + 8|0;
 $ref$tmp = sp + 4|0;
 $agg$tmp = sp;
 __ZNKSt3__28ios_base6getlocEv($ref$tmp,$__iob);
 __THREW__ = 0;
 $call$i2 = (invoke_iii(380,($ref$tmp|0),(20128|0))|0);
 $0 = __THREW__; __THREW__ = 0;
 $1 = $0&1;
 if ($1) {
  $3 = ___cxa_find_matching_catch_2()|0;
  $4 = tempRet0;
  __ZNSt3__26localeD2Ev($ref$tmp);
  ___resumeException($3|0);
  // unreachable;
 } else {
  __ZNSt3__26localeD2Ev($ref$tmp);
  $tm_mon = ((($__tm)) + 16|0);
  $2 = HEAP32[$__e>>2]|0;
  HEAP32[$agg$tmp>>2] = $2;
  ;HEAP32[$agg$tmp$byval_copy>>2]=HEAP32[$agg$tmp>>2]|0;
  __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE15__get_monthnameERiRS4_S4_RjRKNS_5ctypeIwEE($this,$tm_mon,$__b,$agg$tmp$byval_copy,$__err,$call$i2);
  $retval$sroa$0$0$copyload = HEAP32[$__b>>2]|0;
  STACKTOP = sp;return ($retval$sroa$0$0$copyload|0);
 }
 return (0)|0;
}
function __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11do_get_yearES4_S4_RNS_8ios_baseERjP2tm($this,$__b,$__e,$__iob,$__err,$__tm) {
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__tm = $__tm|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $call$i2 = 0, $ref$tmp = 0, $retval$sroa$0$0$copyload = 0, $tm_year = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $agg$tmp$byval_copy = sp + 8|0;
 $ref$tmp = sp + 4|0;
 $agg$tmp = sp;
 __ZNKSt3__28ios_base6getlocEv($ref$tmp,$__iob);
 __THREW__ = 0;
 $call$i2 = (invoke_iii(380,($ref$tmp|0),(20128|0))|0);
 $0 = __THREW__; __THREW__ = 0;
 $1 = $0&1;
 if ($1) {
  $3 = ___cxa_find_matching_catch_2()|0;
  $4 = tempRet0;
  __ZNSt3__26localeD2Ev($ref$tmp);
  ___resumeException($3|0);
  // unreachable;
 } else {
  __ZNSt3__26localeD2Ev($ref$tmp);
  $tm_year = ((($__tm)) + 20|0);
  $2 = HEAP32[$__e>>2]|0;
  HEAP32[$agg$tmp>>2] = $2;
  ;HEAP32[$agg$tmp$byval_copy>>2]=HEAP32[$agg$tmp>>2]|0;
  __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE10__get_yearERiRS4_S4_RjRKNS_5ctypeIwEE($this,$tm_year,$__b,$agg$tmp$byval_copy,$__err,$call$i2);
  $retval$sroa$0$0$copyload = HEAP32[$__b>>2]|0;
  STACKTOP = sp;return ($retval$sroa$0$0$copyload|0);
 }
 return (0)|0;
}
function __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjP2tmcc($this,$__b,$__e,$__iob,$__err,$__tm,$__fmt,$0) {
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__tm = $__tm|0;
 $__fmt = $__fmt|0;
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__size_$i$i$i = 0, $__size_$i$i$i90 = 0, $__size_$i2$i = 0, $__size_$i2$i108 = 0, $add$ptr = 0, $add$ptr12 = 0, $add$ptr87 = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $agg$tmp15 = 0, $agg$tmp15$byval_copy = 0, $agg$tmp18 = 0, $agg$tmp18$byval_copy = 0;
 var $agg$tmp19 = 0, $agg$tmp19$byval_copy = 0, $agg$tmp24 = 0, $agg$tmp24$byval_copy = 0, $agg$tmp25 = 0, $agg$tmp25$byval_copy = 0, $agg$tmp29 = 0, $agg$tmp29$byval_copy = 0, $agg$tmp3 = 0, $agg$tmp3$byval_copy = 0, $agg$tmp32 = 0, $agg$tmp32$byval_copy = 0, $agg$tmp34 = 0, $agg$tmp34$byval_copy = 0, $agg$tmp37 = 0, $agg$tmp37$byval_copy = 0, $agg$tmp39 = 0, $agg$tmp39$byval_copy = 0, $agg$tmp41 = 0, $agg$tmp41$byval_copy = 0;
 var $agg$tmp44 = 0, $agg$tmp44$byval_copy = 0, $agg$tmp47 = 0, $agg$tmp47$byval_copy = 0, $agg$tmp48 = 0, $agg$tmp48$byval_copy = 0, $agg$tmp53 = 0, $agg$tmp53$byval_copy = 0, $agg$tmp54 = 0, $agg$tmp54$byval_copy = 0, $agg$tmp58 = 0, $agg$tmp58$byval_copy = 0, $agg$tmp61 = 0, $agg$tmp61$byval_copy = 0, $agg$tmp62 = 0, $agg$tmp62$byval_copy = 0, $agg$tmp67 = 0, $agg$tmp67$byval_copy = 0, $agg$tmp7 = 0, $agg$tmp7$byval_copy = 0;
 var $agg$tmp71 = 0, $agg$tmp71$byval_copy = 0, $agg$tmp72 = 0, $agg$tmp72$byval_copy = 0, $agg$tmp8 = 0, $agg$tmp8$byval_copy = 0, $agg$tmp82 = 0, $agg$tmp82$byval_copy = 0, $agg$tmp83 = 0, $agg$tmp83$byval_copy = 0, $agg$tmp91 = 0, $agg$tmp91$byval_copy = 0, $agg$tmp94 = 0, $agg$tmp94$byval_copy = 0, $agg$tmp96 = 0, $agg$tmp96$byval_copy = 0, $call$i81 = 0, $call13 = 0, $call20 = 0, $call26 = 0;
 var $call49 = 0, $call5 = 0, $call55 = 0, $call63 = 0, $call73 = 0, $call80 = 0, $call88 = 0, $cond$i = 0, $cond$i$i = 0, $cond$i$i96 = 0, $cond$i112 = 0, $conv = 0, $conv$i$i = 0, $conv$i$i110 = 0, $or = 0, $ref$tmp = 0, $retval$sroa$0$0 = 0, $retval$sroa$0$0$copyload = 0, $tm_hour = 0, $tm_mday = 0;
 var $tm_min = 0, $tm_mon = 0, $tm_wday = 0, $tm_yday = 0, $tm_year = 0, $tobool$i$i$i = 0, $tobool$i$i$i91 = 0, $vfn = 0, $vfn70 = 0, $vfn79 = 0, $vtable = 0, $vtable69 = 0, $vtable78 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 256|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(256|0);
 $agg$tmp96$byval_copy = sp + 248|0;
 $agg$tmp94$byval_copy = sp + 244|0;
 $agg$tmp91$byval_copy = sp + 240|0;
 $agg$tmp83$byval_copy = sp + 236|0;
 $agg$tmp82$byval_copy = sp + 232|0;
 $agg$tmp72$byval_copy = sp + 228|0;
 $agg$tmp71$byval_copy = sp + 224|0;
 $agg$tmp67$byval_copy = sp + 220|0;
 $agg$tmp62$byval_copy = sp + 216|0;
 $agg$tmp61$byval_copy = sp + 212|0;
 $agg$tmp58$byval_copy = sp + 208|0;
 $agg$tmp54$byval_copy = sp + 204|0;
 $agg$tmp53$byval_copy = sp + 200|0;
 $agg$tmp48$byval_copy = sp + 196|0;
 $agg$tmp47$byval_copy = sp + 192|0;
 $agg$tmp44$byval_copy = sp + 188|0;
 $agg$tmp41$byval_copy = sp + 184|0;
 $agg$tmp39$byval_copy = sp + 180|0;
 $agg$tmp37$byval_copy = sp + 176|0;
 $agg$tmp34$byval_copy = sp + 172|0;
 $agg$tmp32$byval_copy = sp + 168|0;
 $agg$tmp29$byval_copy = sp + 164|0;
 $agg$tmp25$byval_copy = sp + 160|0;
 $agg$tmp24$byval_copy = sp + 156|0;
 $agg$tmp19$byval_copy = sp + 152|0;
 $agg$tmp18$byval_copy = sp + 148|0;
 $agg$tmp15$byval_copy = sp + 144|0;
 $agg$tmp8$byval_copy = sp + 140|0;
 $agg$tmp7$byval_copy = sp + 136|0;
 $agg$tmp3$byval_copy = sp + 132|0;
 $agg$tmp$byval_copy = sp + 128|0;
 $ref$tmp = sp + 124|0;
 $agg$tmp = sp + 120|0;
 $agg$tmp3 = sp + 116|0;
 $agg$tmp7 = sp + 112|0;
 $agg$tmp8 = sp + 108|0;
 $agg$tmp15 = sp + 104|0;
 $agg$tmp18 = sp + 100|0;
 $agg$tmp19 = sp + 96|0;
 $agg$tmp24 = sp + 92|0;
 $agg$tmp25 = sp + 88|0;
 $agg$tmp29 = sp + 84|0;
 $agg$tmp32 = sp + 80|0;
 $agg$tmp34 = sp + 76|0;
 $agg$tmp37 = sp + 72|0;
 $agg$tmp39 = sp + 68|0;
 $agg$tmp41 = sp + 64|0;
 $agg$tmp44 = sp + 60|0;
 $agg$tmp47 = sp + 56|0;
 $agg$tmp48 = sp + 52|0;
 $agg$tmp53 = sp + 48|0;
 $agg$tmp54 = sp + 44|0;
 $agg$tmp58 = sp + 40|0;
 $agg$tmp61 = sp + 36|0;
 $agg$tmp62 = sp + 32|0;
 $agg$tmp67 = sp + 28|0;
 $agg$tmp71 = sp + 24|0;
 $agg$tmp72 = sp + 20|0;
 $agg$tmp82 = sp + 16|0;
 $agg$tmp83 = sp + 12|0;
 $agg$tmp91 = sp + 8|0;
 $agg$tmp94 = sp + 4|0;
 $agg$tmp96 = sp;
 HEAP32[$__err>>2] = 0;
 __ZNKSt3__28ios_base6getlocEv($ref$tmp,$__iob);
 __THREW__ = 0;
 $call$i81 = (invoke_iii(380,($ref$tmp|0),(20128|0))|0);
 $1 = __THREW__; __THREW__ = 0;
 $2 = $1&1;
 if ($2) {
  $3 = ___cxa_find_matching_catch_2()|0;
  $4 = tempRet0;
  __ZNSt3__26localeD2Ev($ref$tmp);
  ___resumeException($3|0);
  // unreachable;
 }
 __ZNSt3__26localeD2Ev($ref$tmp);
 $conv = $__fmt << 24 >> 24;
 $tm_mon = ((($__tm)) + 16|0);
 $tm_hour = ((($__tm)) + 8|0);
 $tm_year = ((($__tm)) + 20|0);
 $tm_wday = ((($__tm)) + 24|0);
 $add$ptr = ((($this)) + 8|0);
 do {
  switch ($conv|0) {
  case 65: case 97:  {
   $5 = HEAP32[$__e>>2]|0;
   HEAP32[$agg$tmp>>2] = $5;
   ;HEAP32[$agg$tmp$byval_copy>>2]=HEAP32[$agg$tmp>>2]|0;
   __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__get_weekdaynameERiRS4_S4_RjRKNS_5ctypeIwEE($this,$tm_wday,$__b,$agg$tmp$byval_copy,$__err,$call$i81);
   label = 28;
   break;
  }
  case 104: case 66: case 98:  {
   $6 = HEAP32[$__e>>2]|0;
   HEAP32[$agg$tmp3>>2] = $6;
   ;HEAP32[$agg$tmp3$byval_copy>>2]=HEAP32[$agg$tmp3>>2]|0;
   __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE15__get_monthnameERiRS4_S4_RjRKNS_5ctypeIwEE($this,$tm_mon,$__b,$agg$tmp3$byval_copy,$__err,$call$i81);
   label = 28;
   break;
  }
  case 99:  {
   $vtable = HEAP32[$add$ptr>>2]|0;
   $vfn = ((($vtable)) + 12|0);
   $7 = HEAP32[$vfn>>2]|0;
   $call5 = (FUNCTION_TABLE_ii[$7 & 1023]($add$ptr)|0);
   $8 = HEAP32[$__b>>2]|0;
   HEAP32[$agg$tmp7>>2] = $8;
   $9 = HEAP32[$__e>>2]|0;
   HEAP32[$agg$tmp8>>2] = $9;
   $10 = ((($call5)) + 8|0);
   $__size_$i$i$i = ((($10)) + 3|0);
   $11 = HEAP8[$__size_$i$i$i>>0]|0;
   $tobool$i$i$i = ($11<<24>>24)<(0);
   $12 = HEAP32[$call5>>2]|0;
   $cond$i$i = $tobool$i$i$i ? $12 : $call5;
   $__size_$i2$i = ((($call5)) + 4|0);
   $13 = HEAP32[$__size_$i2$i>>2]|0;
   $conv$i$i = $11&255;
   $cond$i = $tobool$i$i$i ? $13 : $conv$i$i;
   $add$ptr12 = (($cond$i$i) + ($cond$i<<2)|0);
   ;HEAP32[$agg$tmp7$byval_copy>>2]=HEAP32[$agg$tmp7>>2]|0;
   ;HEAP32[$agg$tmp8$byval_copy>>2]=HEAP32[$agg$tmp8>>2]|0;
   $call13 = (__ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_($this,$agg$tmp7$byval_copy,$agg$tmp8$byval_copy,$__iob,$__err,$__tm,$cond$i$i,$add$ptr12)|0);
   HEAP32[$__b>>2] = $call13;
   label = 28;
   break;
  }
  case 101: case 100:  {
   $tm_mday = ((($__tm)) + 12|0);
   $14 = HEAP32[$__e>>2]|0;
   HEAP32[$agg$tmp15>>2] = $14;
   ;HEAP32[$agg$tmp15$byval_copy>>2]=HEAP32[$agg$tmp15>>2]|0;
   __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE9__get_dayERiRS4_S4_RjRKNS_5ctypeIwEE($this,$tm_mday,$__b,$agg$tmp15$byval_copy,$__err,$call$i81);
   label = 28;
   break;
  }
  case 68:  {
   $15 = HEAP32[$__b>>2]|0;
   HEAP32[$agg$tmp18>>2] = $15;
   $16 = HEAP32[$__e>>2]|0;
   HEAP32[$agg$tmp19>>2] = $16;
   ;HEAP32[$agg$tmp18$byval_copy>>2]=HEAP32[$agg$tmp18>>2]|0;
   ;HEAP32[$agg$tmp19$byval_copy>>2]=HEAP32[$agg$tmp19>>2]|0;
   $call20 = (__ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_($this,$agg$tmp18$byval_copy,$agg$tmp19$byval_copy,$__iob,$__err,$__tm,8228,(8260))|0);
   HEAP32[$__b>>2] = $call20;
   label = 28;
   break;
  }
  case 70:  {
   $17 = HEAP32[$__b>>2]|0;
   HEAP32[$agg$tmp24>>2] = $17;
   $18 = HEAP32[$__e>>2]|0;
   HEAP32[$agg$tmp25>>2] = $18;
   ;HEAP32[$agg$tmp24$byval_copy>>2]=HEAP32[$agg$tmp24>>2]|0;
   ;HEAP32[$agg$tmp25$byval_copy>>2]=HEAP32[$agg$tmp25>>2]|0;
   $call26 = (__ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_($this,$agg$tmp24$byval_copy,$agg$tmp25$byval_copy,$__iob,$__err,$__tm,8260,(8292))|0);
   HEAP32[$__b>>2] = $call26;
   label = 28;
   break;
  }
  case 72:  {
   $19 = HEAP32[$__e>>2]|0;
   HEAP32[$agg$tmp29>>2] = $19;
   ;HEAP32[$agg$tmp29$byval_copy>>2]=HEAP32[$agg$tmp29>>2]|0;
   __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE10__get_hourERiRS4_S4_RjRKNS_5ctypeIwEE($this,$tm_hour,$__b,$agg$tmp29$byval_copy,$__err,$call$i81);
   label = 28;
   break;
  }
  case 73:  {
   $20 = HEAP32[$__e>>2]|0;
   HEAP32[$agg$tmp32>>2] = $20;
   ;HEAP32[$agg$tmp32$byval_copy>>2]=HEAP32[$agg$tmp32>>2]|0;
   __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE13__get_12_hourERiRS4_S4_RjRKNS_5ctypeIwEE($this,$tm_hour,$__b,$agg$tmp32$byval_copy,$__err,$call$i81);
   label = 28;
   break;
  }
  case 106:  {
   $tm_yday = ((($__tm)) + 28|0);
   $21 = HEAP32[$__e>>2]|0;
   HEAP32[$agg$tmp34>>2] = $21;
   ;HEAP32[$agg$tmp34$byval_copy>>2]=HEAP32[$agg$tmp34>>2]|0;
   __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE18__get_day_year_numERiRS4_S4_RjRKNS_5ctypeIwEE($this,$tm_yday,$__b,$agg$tmp34$byval_copy,$__err,$call$i81);
   label = 28;
   break;
  }
  case 109:  {
   $22 = HEAP32[$__e>>2]|0;
   HEAP32[$agg$tmp37>>2] = $22;
   ;HEAP32[$agg$tmp37$byval_copy>>2]=HEAP32[$agg$tmp37>>2]|0;
   __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11__get_monthERiRS4_S4_RjRKNS_5ctypeIwEE($this,$tm_mon,$__b,$agg$tmp37$byval_copy,$__err,$call$i81);
   label = 28;
   break;
  }
  case 77:  {
   $tm_min = ((($__tm)) + 4|0);
   $23 = HEAP32[$__e>>2]|0;
   HEAP32[$agg$tmp39>>2] = $23;
   ;HEAP32[$agg$tmp39$byval_copy>>2]=HEAP32[$agg$tmp39>>2]|0;
   __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE12__get_minuteERiRS4_S4_RjRKNS_5ctypeIwEE($this,$tm_min,$__b,$agg$tmp39$byval_copy,$__err,$call$i81);
   label = 28;
   break;
  }
  case 116: case 110:  {
   $24 = HEAP32[$__e>>2]|0;
   HEAP32[$agg$tmp41>>2] = $24;
   ;HEAP32[$agg$tmp41$byval_copy>>2]=HEAP32[$agg$tmp41>>2]|0;
   __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__get_white_spaceERS4_S4_RjRKNS_5ctypeIwEE($this,$__b,$agg$tmp41$byval_copy,$__err,$call$i81);
   label = 28;
   break;
  }
  case 112:  {
   $25 = HEAP32[$__e>>2]|0;
   HEAP32[$agg$tmp44>>2] = $25;
   ;HEAP32[$agg$tmp44$byval_copy>>2]=HEAP32[$agg$tmp44>>2]|0;
   __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11__get_am_pmERiRS4_S4_RjRKNS_5ctypeIwEE($this,$tm_hour,$__b,$agg$tmp44$byval_copy,$__err,$call$i81);
   label = 28;
   break;
  }
  case 114:  {
   $26 = HEAP32[$__b>>2]|0;
   HEAP32[$agg$tmp47>>2] = $26;
   $27 = HEAP32[$__e>>2]|0;
   HEAP32[$agg$tmp48>>2] = $27;
   ;HEAP32[$agg$tmp47$byval_copy>>2]=HEAP32[$agg$tmp47>>2]|0;
   ;HEAP32[$agg$tmp48$byval_copy>>2]=HEAP32[$agg$tmp48>>2]|0;
   $call49 = (__ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_($this,$agg$tmp47$byval_copy,$agg$tmp48$byval_copy,$__iob,$__err,$__tm,8292,(8336))|0);
   HEAP32[$__b>>2] = $call49;
   label = 28;
   break;
  }
  case 82:  {
   $28 = HEAP32[$__b>>2]|0;
   HEAP32[$agg$tmp53>>2] = $28;
   $29 = HEAP32[$__e>>2]|0;
   HEAP32[$agg$tmp54>>2] = $29;
   ;HEAP32[$agg$tmp53$byval_copy>>2]=HEAP32[$agg$tmp53>>2]|0;
   ;HEAP32[$agg$tmp54$byval_copy>>2]=HEAP32[$agg$tmp54>>2]|0;
   $call55 = (__ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_($this,$agg$tmp53$byval_copy,$agg$tmp54$byval_copy,$__iob,$__err,$__tm,8336,(8356))|0);
   HEAP32[$__b>>2] = $call55;
   label = 28;
   break;
  }
  case 83:  {
   $30 = HEAP32[$__e>>2]|0;
   HEAP32[$agg$tmp58>>2] = $30;
   ;HEAP32[$agg$tmp58$byval_copy>>2]=HEAP32[$agg$tmp58>>2]|0;
   __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE12__get_secondERiRS4_S4_RjRKNS_5ctypeIwEE($this,$__tm,$__b,$agg$tmp58$byval_copy,$__err,$call$i81);
   label = 28;
   break;
  }
  case 84:  {
   $31 = HEAP32[$__b>>2]|0;
   HEAP32[$agg$tmp61>>2] = $31;
   $32 = HEAP32[$__e>>2]|0;
   HEAP32[$agg$tmp62>>2] = $32;
   ;HEAP32[$agg$tmp61$byval_copy>>2]=HEAP32[$agg$tmp61>>2]|0;
   ;HEAP32[$agg$tmp62$byval_copy>>2]=HEAP32[$agg$tmp62>>2]|0;
   $call63 = (__ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_($this,$agg$tmp61$byval_copy,$agg$tmp62$byval_copy,$__iob,$__err,$__tm,8356,(8388))|0);
   HEAP32[$__b>>2] = $call63;
   label = 28;
   break;
  }
  case 119:  {
   $33 = HEAP32[$__e>>2]|0;
   HEAP32[$agg$tmp67>>2] = $33;
   ;HEAP32[$agg$tmp67$byval_copy>>2]=HEAP32[$agg$tmp67>>2]|0;
   __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE13__get_weekdayERiRS4_S4_RjRKNS_5ctypeIwEE($this,$tm_wday,$__b,$agg$tmp67$byval_copy,$__err,$call$i81);
   label = 28;
   break;
  }
  case 120:  {
   $vtable69 = HEAP32[$this>>2]|0;
   $vfn70 = ((($vtable69)) + 20|0);
   $34 = HEAP32[$vfn70>>2]|0;
   $35 = HEAP32[$__b>>2]|0;
   HEAP32[$agg$tmp71>>2] = $35;
   $36 = HEAP32[$__e>>2]|0;
   HEAP32[$agg$tmp72>>2] = $36;
   ;HEAP32[$agg$tmp71$byval_copy>>2]=HEAP32[$agg$tmp71>>2]|0;
   ;HEAP32[$agg$tmp72$byval_copy>>2]=HEAP32[$agg$tmp72>>2]|0;
   $call73 = (FUNCTION_TABLE_iiiiiii[$34 & 511]($this,$agg$tmp71$byval_copy,$agg$tmp72$byval_copy,$__iob,$__err,$__tm)|0);
   $retval$sroa$0$0 = $call73;
   break;
  }
  case 88:  {
   $vtable78 = HEAP32[$add$ptr>>2]|0;
   $vfn79 = ((($vtable78)) + 24|0);
   $37 = HEAP32[$vfn79>>2]|0;
   $call80 = (FUNCTION_TABLE_ii[$37 & 1023]($add$ptr)|0);
   $38 = HEAP32[$__b>>2]|0;
   HEAP32[$agg$tmp82>>2] = $38;
   $39 = HEAP32[$__e>>2]|0;
   HEAP32[$agg$tmp83>>2] = $39;
   $40 = ((($call80)) + 8|0);
   $__size_$i$i$i90 = ((($40)) + 3|0);
   $41 = HEAP8[$__size_$i$i$i90>>0]|0;
   $tobool$i$i$i91 = ($41<<24>>24)<(0);
   $42 = HEAP32[$call80>>2]|0;
   $cond$i$i96 = $tobool$i$i$i91 ? $42 : $call80;
   $__size_$i2$i108 = ((($call80)) + 4|0);
   $43 = HEAP32[$__size_$i2$i108>>2]|0;
   $conv$i$i110 = $41&255;
   $cond$i112 = $tobool$i$i$i91 ? $43 : $conv$i$i110;
   $add$ptr87 = (($cond$i$i96) + ($cond$i112<<2)|0);
   ;HEAP32[$agg$tmp82$byval_copy>>2]=HEAP32[$agg$tmp82>>2]|0;
   ;HEAP32[$agg$tmp83$byval_copy>>2]=HEAP32[$agg$tmp83>>2]|0;
   $call88 = (__ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_($this,$agg$tmp82$byval_copy,$agg$tmp83$byval_copy,$__iob,$__err,$__tm,$cond$i$i96,$add$ptr87)|0);
   HEAP32[$__b>>2] = $call88;
   label = 28;
   break;
  }
  case 121:  {
   $44 = HEAP32[$__e>>2]|0;
   HEAP32[$agg$tmp91>>2] = $44;
   ;HEAP32[$agg$tmp91$byval_copy>>2]=HEAP32[$agg$tmp91>>2]|0;
   __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE10__get_yearERiRS4_S4_RjRKNS_5ctypeIwEE($this,$tm_year,$__b,$agg$tmp91$byval_copy,$__err,$call$i81);
   label = 28;
   break;
  }
  case 89:  {
   $45 = HEAP32[$__e>>2]|0;
   HEAP32[$agg$tmp94>>2] = $45;
   ;HEAP32[$agg$tmp94$byval_copy>>2]=HEAP32[$agg$tmp94>>2]|0;
   __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11__get_year4ERiRS4_S4_RjRKNS_5ctypeIwEE($this,$tm_year,$__b,$agg$tmp94$byval_copy,$__err,$call$i81);
   label = 28;
   break;
  }
  case 37:  {
   $46 = HEAP32[$__e>>2]|0;
   HEAP32[$agg$tmp96>>2] = $46;
   ;HEAP32[$agg$tmp96$byval_copy>>2]=HEAP32[$agg$tmp96>>2]|0;
   __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE13__get_percentERS4_S4_RjRKNS_5ctypeIwEE($this,$__b,$agg$tmp96$byval_copy,$__err,$call$i81);
   label = 28;
   break;
  }
  default: {
   $47 = HEAP32[$__err>>2]|0;
   $or = $47 | 4;
   HEAP32[$__err>>2] = $or;
   label = 28;
  }
  }
 } while(0);
 if ((label|0) == 28) {
  $retval$sroa$0$0$copyload = HEAP32[$__b>>2]|0;
  $retval$sroa$0$0 = $retval$sroa$0$0$copyload;
 }
 STACKTOP = sp;return ($retval$sroa$0$0|0);
}
function __ZNKSt3__220__time_get_c_storageIwE7__weeksEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $guard$uninitialized = 0, $tobool = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[18960]|0;
 $guard$uninitialized = ($0<<24>>24)==(0);
 do {
  if ($guard$uninitialized) {
   $1 = (___cxa_guard_acquire(18960)|0);
   $tobool = ($1|0)==(0);
   if (!($tobool)) {
    __THREW__ = 0;
    invoke_v(429);
    $2 = __THREW__; __THREW__ = 0;
    $3 = $2&1;
    if ($3) {
     $5 = ___cxa_find_matching_catch_2()|0;
     $6 = tempRet0;
     ___resumeException($5|0);
     // unreachable;
    } else {
     HEAP32[5445] = 21612;
     break;
    }
   }
  }
 } while(0);
 $4 = HEAP32[5445]|0;
 return ($4|0);
}
function __ZNKSt3__220__time_get_c_storageIwE8__monthsEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $guard$uninitialized = 0, $tobool = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[18944]|0;
 $guard$uninitialized = ($0<<24>>24)==(0);
 do {
  if ($guard$uninitialized) {
   $1 = (___cxa_guard_acquire(18944)|0);
   $tobool = ($1|0)==(0);
   if (!($tobool)) {
    __THREW__ = 0;
    invoke_v(430);
    $2 = __THREW__; __THREW__ = 0;
    $3 = $2&1;
    if ($3) {
     $5 = ___cxa_find_matching_catch_2()|0;
     $6 = tempRet0;
     ___resumeException($5|0);
     // unreachable;
    } else {
     HEAP32[5402] = 21320;
     break;
    }
   }
  }
 } while(0);
 $4 = HEAP32[5402]|0;
 return ($4|0);
}
function __ZNKSt3__220__time_get_c_storageIwE7__am_pmEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $guard$uninitialized = 0, $tobool = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[18928]|0;
 $guard$uninitialized = ($0<<24>>24)==(0);
 do {
  if ($guard$uninitialized) {
   $1 = (___cxa_guard_acquire(18928)|0);
   $tobool = ($1|0)==(0);
   if (!($tobool)) {
    __THREW__ = 0;
    invoke_v(431);
    $2 = __THREW__; __THREW__ = 0;
    $3 = $2&1;
    if ($3) {
     $5 = ___cxa_find_matching_catch_2()|0;
     $6 = tempRet0;
     ___resumeException($5|0);
     // unreachable;
    } else {
     HEAP32[5329] = 21028;
     break;
    }
   }
  }
 } while(0);
 $4 = HEAP32[5329]|0;
 return ($4|0);
}
function __ZNKSt3__220__time_get_c_storageIwE3__cEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $call$i1 = 0, $guard$uninitialized = 0, $tobool = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[18920]|0;
 $guard$uninitialized = ($0<<24>>24)==(0);
 do {
  if ($guard$uninitialized) {
   $1 = (___cxa_guard_acquire(18920)|0);
   $tobool = ($1|0)==(0);
   if (!($tobool)) {
    ;HEAP32[21016>>2]=0|0;HEAP32[21016+4>>2]=0|0;HEAP32[21016+8>>2]=0|0;
    __THREW__ = 0;
    $call$i1 = (invoke_ii(432,(7260|0))|0);
    $2 = __THREW__; __THREW__ = 0;
    $3 = $2&1;
    if (!($3)) {
     __THREW__ = 0;
     invoke_viii(433,(21016|0),(7260|0),($call$i1|0));
     $4 = __THREW__; __THREW__ = 0;
     $5 = $4&1;
     if (!($5)) {
      (___cxa_atexit((434|0),(21016|0),(___dso_handle|0))|0);
      break;
     }
    }
    $6 = ___cxa_find_matching_catch_2()|0;
    $7 = tempRet0;
    ___resumeException($6|0);
    // unreachable;
   }
  }
 } while(0);
 return (21016|0);
}
function __ZNKSt3__220__time_get_c_storageIwE3__rEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $call$i1 = 0, $guard$uninitialized = 0, $tobool = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[18912]|0;
 $guard$uninitialized = ($0<<24>>24)==(0);
 do {
  if ($guard$uninitialized) {
   $1 = (___cxa_guard_acquire(18912)|0);
   $tobool = ($1|0)==(0);
   if (!($tobool)) {
    ;HEAP32[21004>>2]=0|0;HEAP32[21004+4>>2]=0|0;HEAP32[21004+8>>2]=0|0;
    __THREW__ = 0;
    $call$i1 = (invoke_ii(432,(7212|0))|0);
    $2 = __THREW__; __THREW__ = 0;
    $3 = $2&1;
    if (!($3)) {
     __THREW__ = 0;
     invoke_viii(433,(21004|0),(7212|0),($call$i1|0));
     $4 = __THREW__; __THREW__ = 0;
     $5 = $4&1;
     if (!($5)) {
      (___cxa_atexit((434|0),(21004|0),(___dso_handle|0))|0);
      break;
     }
    }
    $6 = ___cxa_find_matching_catch_2()|0;
    $7 = tempRet0;
    ___resumeException($6|0);
    // unreachable;
   }
  }
 } while(0);
 return (21004|0);
}
function __ZNKSt3__220__time_get_c_storageIwE3__xEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $call$i1 = 0, $guard$uninitialized = 0, $tobool = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[18904]|0;
 $guard$uninitialized = ($0<<24>>24)==(0);
 do {
  if ($guard$uninitialized) {
   $1 = (___cxa_guard_acquire(18904)|0);
   $tobool = ($1|0)==(0);
   if (!($tobool)) {
    ;HEAP32[20992>>2]=0|0;HEAP32[20992+4>>2]=0|0;HEAP32[20992+8>>2]=0|0;
    __THREW__ = 0;
    $call$i1 = (invoke_ii(432,(7176|0))|0);
    $2 = __THREW__; __THREW__ = 0;
    $3 = $2&1;
    if (!($3)) {
     __THREW__ = 0;
     invoke_viii(433,(20992|0),(7176|0),($call$i1|0));
     $4 = __THREW__; __THREW__ = 0;
     $5 = $4&1;
     if (!($5)) {
      (___cxa_atexit((434|0),(20992|0),(___dso_handle|0))|0);
      break;
     }
    }
    $6 = ___cxa_find_matching_catch_2()|0;
    $7 = tempRet0;
    ___resumeException($6|0);
    // unreachable;
   }
  }
 } while(0);
 return (20992|0);
}
function __ZNKSt3__220__time_get_c_storageIwE3__XEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $call$i1 = 0, $guard$uninitialized = 0, $tobool = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[18896]|0;
 $guard$uninitialized = ($0<<24>>24)==(0);
 do {
  if ($guard$uninitialized) {
   $1 = (___cxa_guard_acquire(18896)|0);
   $tobool = ($1|0)==(0);
   if (!($tobool)) {
    ;HEAP32[20980>>2]=0|0;HEAP32[20980+4>>2]=0|0;HEAP32[20980+8>>2]=0|0;
    __THREW__ = 0;
    $call$i1 = (invoke_ii(432,(7140|0))|0);
    $2 = __THREW__; __THREW__ = 0;
    $3 = $2&1;
    if (!($3)) {
     __THREW__ = 0;
     invoke_viii(433,(20980|0),(7140|0),($call$i1|0));
     $4 = __THREW__; __THREW__ = 0;
     $5 = $4&1;
     if (!($5)) {
      (___cxa_atexit((434|0),(20980|0),(___dso_handle|0))|0);
      break;
     }
    }
    $6 = ___cxa_find_matching_catch_2()|0;
    $7 = tempRet0;
    ___resumeException($6|0);
    // unreachable;
   }
  }
 } while(0);
 return (20980|0);
}
function __ZNSt3__211char_traitsIwE6lengthEPKw($__s) {
 $__s = $__s|0;
 var $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = (_wcslen($__s)|0);
 return ($call|0);
}
function __ZNSt3__2L11init_wam_pmEv() {
 var $0 = 0, $1 = 0, $__i$0$i$i = 0, $arrayctor$cur = 0, $arrayctor$done = 0, $arrayctor$next = 0, $arrayidx$i$i = 0, $exitcond$i$i = 0, $guard$uninitialized = 0, $inc$i$i = 0, $tobool = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[18936]|0;
 $guard$uninitialized = ($0<<24>>24)==(0);
 if ($guard$uninitialized) {
  $1 = (___cxa_guard_acquire(18936)|0);
  $tobool = ($1|0)==(0);
  if (!($tobool)) {
   $arrayctor$cur = 21028;
   while(1) {
    ;HEAP32[$arrayctor$cur>>2]=0|0;HEAP32[$arrayctor$cur+4>>2]=0|0;HEAP32[$arrayctor$cur+8>>2]=0|0;
    $__i$0$i$i = 0;
    while(1) {
     $exitcond$i$i = ($__i$0$i$i|0)==(3);
     if ($exitcond$i$i) {
      break;
     }
     $arrayidx$i$i = (($arrayctor$cur) + ($__i$0$i$i<<2)|0);
     HEAP32[$arrayidx$i$i>>2] = 0;
     $inc$i$i = (($__i$0$i$i) + 1)|0;
     $__i$0$i$i = $inc$i$i;
    }
    $arrayctor$next = ((($arrayctor$cur)) + 12|0);
    $arrayctor$done = ($arrayctor$next|0)==((21316)|0);
    if ($arrayctor$done) {
     break;
    } else {
     $arrayctor$cur = $arrayctor$next;
    }
   }
   (___cxa_atexit((435|0),(0|0),(___dso_handle|0))|0);
  }
 }
 (__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(21028,7344)|0);
 (__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw((21040),7356)|0);
 return;
}
function ___cxx_global_array_dtor_120($0) {
 $0 = $0|0;
 var $arraydestroy$done = 0, $arraydestroy$element = 0, $arraydestroy$elementPast = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $arraydestroy$elementPast = (21316);
 while(1) {
  $arraydestroy$element = ((($arraydestroy$elementPast)) + -12|0);
  __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($arraydestroy$element);
  $arraydestroy$done = ($arraydestroy$element|0)==(21028|0);
  if ($arraydestroy$done) {
   break;
  } else {
   $arraydestroy$elementPast = $arraydestroy$element;
  }
 }
 return;
}
function __ZNSt3__2L12init_wmonthsEv() {
 var $0 = 0, $1 = 0, $__i$0$i$i = 0, $arrayctor$cur = 0, $arrayctor$done = 0, $arrayctor$next = 0, $arrayidx$i$i = 0, $exitcond$i$i = 0, $guard$uninitialized = 0, $inc$i$i = 0, $tobool = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[18952]|0;
 $guard$uninitialized = ($0<<24>>24)==(0);
 if ($guard$uninitialized) {
  $1 = (___cxa_guard_acquire(18952)|0);
  $tobool = ($1|0)==(0);
  if (!($tobool)) {
   $arrayctor$cur = 21320;
   while(1) {
    ;HEAP32[$arrayctor$cur>>2]=0|0;HEAP32[$arrayctor$cur+4>>2]=0|0;HEAP32[$arrayctor$cur+8>>2]=0|0;
    $__i$0$i$i = 0;
    while(1) {
     $exitcond$i$i = ($__i$0$i$i|0)==(3);
     if ($exitcond$i$i) {
      break;
     }
     $arrayidx$i$i = (($arrayctor$cur) + ($__i$0$i$i<<2)|0);
     HEAP32[$arrayidx$i$i>>2] = 0;
     $inc$i$i = (($__i$0$i$i) + 1)|0;
     $__i$0$i$i = $inc$i$i;
    }
    $arrayctor$next = ((($arrayctor$cur)) + 12|0);
    $arrayctor$done = ($arrayctor$next|0)==((21608)|0);
    if ($arrayctor$done) {
     break;
    } else {
     $arrayctor$cur = $arrayctor$next;
    }
   }
   (___cxa_atexit((436|0),(0|0),(___dso_handle|0))|0);
  }
 }
 (__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(21320,7368)|0);
 (__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw((21332),7400)|0);
 (__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw((21344),7436)|0);
 (__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw((21356),7460)|0);
 (__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw((21368),7484)|0);
 (__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw((21380),7500)|0);
 (__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw((21392),7520)|0);
 (__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw((21404),7540)|0);
 (__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw((21416),7568)|0);
 (__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw((21428),7608)|0);
 (__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw((21440),7640)|0);
 (__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw((21452),7676)|0);
 (__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw((21464),7712)|0);
 (__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw((21476),7728)|0);
 (__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw((21488),7744)|0);
 (__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw((21500),7760)|0);
 (__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw((21512),7484)|0);
 (__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw((21524),7776)|0);
 (__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw((21536),7792)|0);
 (__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw((21548),7808)|0);
 (__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw((21560),7824)|0);
 (__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw((21572),7840)|0);
 (__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw((21584),7856)|0);
 (__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw((21596),7872)|0);
 return;
}
function ___cxx_global_array_dtor_93($0) {
 $0 = $0|0;
 var $arraydestroy$done = 0, $arraydestroy$element = 0, $arraydestroy$elementPast = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $arraydestroy$elementPast = (21608);
 while(1) {
  $arraydestroy$element = ((($arraydestroy$elementPast)) + -12|0);
  __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($arraydestroy$element);
  $arraydestroy$done = ($arraydestroy$element|0)==(21320|0);
  if ($arraydestroy$done) {
   break;
  } else {
   $arraydestroy$elementPast = $arraydestroy$element;
  }
 }
 return;
}
function __ZNSt3__2L11init_wweeksEv() {
 var $0 = 0, $1 = 0, $__i$0$i$i = 0, $arrayctor$cur = 0, $arrayctor$done = 0, $arrayctor$next = 0, $arrayidx$i$i = 0, $exitcond$i$i = 0, $guard$uninitialized = 0, $inc$i$i = 0, $tobool = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[18968]|0;
 $guard$uninitialized = ($0<<24>>24)==(0);
 if ($guard$uninitialized) {
  $1 = (___cxa_guard_acquire(18968)|0);
  $tobool = ($1|0)==(0);
  if (!($tobool)) {
   $arrayctor$cur = 21612;
   while(1) {
    ;HEAP32[$arrayctor$cur>>2]=0|0;HEAP32[$arrayctor$cur+4>>2]=0|0;HEAP32[$arrayctor$cur+8>>2]=0|0;
    $__i$0$i$i = 0;
    while(1) {
     $exitcond$i$i = ($__i$0$i$i|0)==(3);
     if ($exitcond$i$i) {
      break;
     }
     $arrayidx$i$i = (($arrayctor$cur) + ($__i$0$i$i<<2)|0);
     HEAP32[$arrayidx$i$i>>2] = 0;
     $inc$i$i = (($__i$0$i$i) + 1)|0;
     $__i$0$i$i = $inc$i$i;
    }
    $arrayctor$next = ((($arrayctor$cur)) + 12|0);
    $arrayctor$done = ($arrayctor$next|0)==((21780)|0);
    if ($arrayctor$done) {
     break;
    } else {
     $arrayctor$cur = $arrayctor$next;
    }
   }
   (___cxa_atexit((437|0),(0|0),(___dso_handle|0))|0);
  }
 }
 (__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(21612,7888)|0);
 (__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw((21624),7916)|0);
 (__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw((21636),7944)|0);
 (__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw((21648),7976)|0);
 (__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw((21660),8016)|0);
 (__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw((21672),8052)|0);
 (__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw((21684),8080)|0);
 (__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw((21696),8116)|0);
 (__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw((21708),8132)|0);
 (__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw((21720),8148)|0);
 (__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw((21732),8164)|0);
 (__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw((21744),8180)|0);
 (__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw((21756),8196)|0);
 (__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw((21768),8212)|0);
 return;
}
function ___cxx_global_array_dtor_54($0) {
 $0 = $0|0;
 var $arraydestroy$done = 0, $arraydestroy$element = 0, $arraydestroy$elementPast = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $arraydestroy$elementPast = (21780);
 while(1) {
  $arraydestroy$element = ((($arraydestroy$elementPast)) + -12|0);
  __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($arraydestroy$element);
  $arraydestroy$done = ($arraydestroy$element|0)==(21612|0);
  if ($arraydestroy$done) {
   break;
  } else {
   $arraydestroy$elementPast = $arraydestroy$element;
  }
 }
 return;
}
function __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__get_weekdaynameERiRS4_S4_RjRKNS_5ctypeIwEE($this,$__w,$__b,$__e,$__err,$__ct) {
 $this = $this|0;
 $__w = $__w|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__err = $__err|0;
 $__ct = $__ct|0;
 var $0 = 0, $1 = 0, $add$ptr = 0, $add$ptr2 = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $call = 0, $call3 = 0, $cmp = 0, $rem = 0, $sub$ptr$div = 0, $sub$ptr$lhs$cast = 0, $sub$ptr$rhs$cast = 0, $sub$ptr$sub = 0, $vtable = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $agg$tmp$byval_copy = sp + 4|0;
 $agg$tmp = sp;
 $add$ptr = ((($this)) + 8|0);
 $vtable = HEAP32[$add$ptr>>2]|0;
 $0 = HEAP32[$vtable>>2]|0;
 $call = (FUNCTION_TABLE_ii[$0 & 1023]($add$ptr)|0);
 $1 = HEAP32[$__e>>2]|0;
 HEAP32[$agg$tmp>>2] = $1;
 $add$ptr2 = ((($call)) + 168|0);
 ;HEAP32[$agg$tmp$byval_copy>>2]=HEAP32[$agg$tmp>>2]|0;
 $call3 = (__ZNSt3__214__scan_keywordINS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEPKNS_12basic_stringIwS3_NS_9allocatorIwEEEENS_5ctypeIwEEEET0_RT_SE_SD_SD_RKT1_Rjb($__b,$agg$tmp$byval_copy,$call,$add$ptr2,$__ct,$__err,0)|0);
 $sub$ptr$lhs$cast = $call3;
 $sub$ptr$rhs$cast = $call;
 $sub$ptr$sub = (($sub$ptr$lhs$cast) - ($sub$ptr$rhs$cast))|0;
 $cmp = ($sub$ptr$sub|0)<(168);
 if ($cmp) {
  $sub$ptr$div = (($sub$ptr$sub|0) / 12)&-1;
  $rem = (($sub$ptr$div|0) % 7)&-1;
  HEAP32[$__w>>2] = $rem;
 }
 STACKTOP = sp;return;
}
function __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE15__get_monthnameERiRS4_S4_RjRKNS_5ctypeIwEE($this,$__m,$__b,$__e,$__err,$__ct) {
 $this = $this|0;
 $__m = $__m|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__err = $__err|0;
 $__ct = $__ct|0;
 var $0 = 0, $1 = 0, $add$ptr = 0, $add$ptr2 = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $call = 0, $call3 = 0, $cmp = 0, $rem = 0, $sub$ptr$div = 0, $sub$ptr$lhs$cast = 0, $sub$ptr$rhs$cast = 0, $sub$ptr$sub = 0, $vfn = 0, $vtable = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $agg$tmp$byval_copy = sp + 4|0;
 $agg$tmp = sp;
 $add$ptr = ((($this)) + 8|0);
 $vtable = HEAP32[$add$ptr>>2]|0;
 $vfn = ((($vtable)) + 4|0);
 $0 = HEAP32[$vfn>>2]|0;
 $call = (FUNCTION_TABLE_ii[$0 & 1023]($add$ptr)|0);
 $1 = HEAP32[$__e>>2]|0;
 HEAP32[$agg$tmp>>2] = $1;
 $add$ptr2 = ((($call)) + 288|0);
 ;HEAP32[$agg$tmp$byval_copy>>2]=HEAP32[$agg$tmp>>2]|0;
 $call3 = (__ZNSt3__214__scan_keywordINS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEPKNS_12basic_stringIwS3_NS_9allocatorIwEEEENS_5ctypeIwEEEET0_RT_SE_SD_SD_RKT1_Rjb($__b,$agg$tmp$byval_copy,$call,$add$ptr2,$__ct,$__err,0)|0);
 $sub$ptr$lhs$cast = $call3;
 $sub$ptr$rhs$cast = $call;
 $sub$ptr$sub = (($sub$ptr$lhs$cast) - ($sub$ptr$rhs$cast))|0;
 $cmp = ($sub$ptr$sub|0)<(288);
 if ($cmp) {
  $sub$ptr$div = (($sub$ptr$sub|0) / 12)&-1;
  $rem = (($sub$ptr$div|0) % 12)&-1;
  HEAP32[$__m>>2] = $rem;
 }
 STACKTOP = sp;return;
}
function __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_($this,$__b,$__e,$__iob,$__err,$__tm,$__fmtb,$__fmte) {
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__tm = $__tm|0;
 $__fmtb = $__fmtb|0;
 $__fmte = $__fmte|0;
 var $$ph = 0, $$pre = 0, $$pre$i$i$i152 = 0, $$pre$i$i$i66 = 0, $$pre$i17$i$i87 = 0, $$pre$i17$i$i87197 = 0, $$pre$i17$i$i87198 = 0, $$pre$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0;
 var $74 = 0, $75 = 0, $76 = 0, $8 = 0, $9 = 0, $__cmd$0 = 0, $__einp_$i$i = 0, $__einp_$i$i$i$i = 0, $__einp_$i$i$i$i139 = 0, $__einp_$i$i$i$i53 = 0, $__einp_$i$i108 = 0, $__einp_$i$i4$i$i = 0, $__einp_$i$i4$i$i160 = 0, $__einp_$i$i4$i$i74 = 0, $__fmtb$addr$0$ph = 0, $__fmtb$addr$0$ph$be = 0, $__fmtb$addr$0$ph$sink = 0, $__ninp_$i$i = 0, $__ninp_$i$i$i$i = 0, $__ninp_$i$i$i$i138 = 0;
 var $__ninp_$i$i$i$i52 = 0, $__ninp_$i$i107 = 0, $__ninp_$i$i3$i$i = 0, $__ninp_$i$i3$i$i159 = 0, $__ninp_$i$i3$i$i73 = 0, $__opt$0 = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $agg$tmp23 = 0, $agg$tmp23$byval_copy = 0, $call$i = 0, $call$i$i = 0, $call$i$i$i$i = 0, $call$i$i$i$i144 = 0, $call$i$i$i$i58 = 0, $call$i$i112 = 0, $call$i$i9$i$i = 0, $call$i$i9$i$i165 = 0, $call$i$i9$i$i79 = 0, $call$i120 = 0;
 var $call$i123 = 0, $call$i37 = 0, $call$i40 = 0, $call$i43 = 0, $call$i46 = 0, $call$i49 = 0, $call$i95 = 0, $call24 = 0, $call3$i$i = 0, $call3$i$i$i = 0, $call3$i$i$i$i = 0, $call3$i$i$i$i146 = 0, $call3$i$i$i$i60 = 0, $call3$i$i$i149 = 0, $call3$i$i$i63 = 0, $call3$i$i11$i$i = 0, $call3$i$i11$i$i167 = 0, $call3$i$i11$i$i81 = 0, $call3$i$i114 = 0, $call3$i14$i$i = 0;
 var $call3$i14$i$i170 = 0, $call3$i14$i$i84 = 0, $call4$i$i$i = 0, $call4$i$i$i150 = 0, $call4$i$i$i64 = 0, $call4$i15$i$i = 0, $call4$i15$i$i171 = 0, $call4$i15$i$i85 = 0, $cmp = 0, $cmp$i$i$i$i = 0, $cmp$i$i$i$i140 = 0, $cmp$i$i$i$i54 = 0, $cmp$i$i109 = 0, $cmp$i$i127 = 0, $cmp$i$i5$i$i = 0, $cmp$i$i5$i$i161 = 0, $cmp$i$i5$i$i75 = 0, $cmp$i$i92 = 0, $cmp$i$i99 = 0, $cmp17 = 0;
 var $cmp2 = 0, $cmp30 = 0, $cmp49 = 0, $cmp5 = 0, $cmp7 = 0, $cmptmp$i$i91 = 0, $incdec$ptr$i$i = 0, $incdec$ptr$i$i132 = 0, $incdec$ptr$le = 0, $incdec$ptr$le194 = 0, $incdec$ptr$le194$lcssa = 0, $incdec$ptr$le195 = 0, $incdec$ptr16 = 0, $incdec$ptr25 = 0, $or = 0, $or$cond = 0, $phitmp$i18$i$i88 = 0, $ref$tmp = 0, $retval$0$i$i = 0, $retval$0$i$i$i$i = 0;
 var $retval$0$i$i$i$i148 = 0, $retval$0$i$i$i$i62 = 0, $retval$0$i$i116 = 0, $retval$0$i$i13$i$i = 0, $retval$0$i$i13$i$i169 = 0, $retval$0$i$i13$i$i83 = 0, $retval$sroa$0$0$copyload = 0, $tobool$i$i$i = 0, $tobool$i$i$i137 = 0, $tobool$i$i$i51 = 0, $tobool$i2$i$i = 0, $tobool$i2$i$i157 = 0, $tobool$i2$i$i71 = 0, $vfn = 0, $vfn$i = 0, $vfn$i$i = 0, $vfn$i$i$i$i = 0, $vfn$i$i$i$i143 = 0, $vfn$i$i$i$i57 = 0, $vfn$i$i101 = 0;
 var $vfn$i$i111 = 0, $vfn$i$i129 = 0, $vfn$i$i8$i$i = 0, $vfn$i$i8$i$i164 = 0, $vfn$i$i8$i$i78 = 0, $vfn$i119 = 0, $vfn$i122 = 0, $vfn$i39 = 0, $vfn$i42 = 0, $vfn$i45 = 0, $vfn$i48 = 0, $vfn$i94 = 0, $vtable = 0, $vtable$i = 0, $vtable$i$i = 0, $vtable$i$i$i$i = 0, $vtable$i$i$i$i142 = 0, $vtable$i$i$i$i56 = 0, $vtable$i$i100 = 0, $vtable$i$i110 = 0;
 var $vtable$i$i128 = 0, $vtable$i$i7$i$i = 0, $vtable$i$i7$i$i163 = 0, $vtable$i$i7$i$i77 = 0, $vtable$i118 = 0, $vtable$i121 = 0, $vtable$i38 = 0, $vtable$i41 = 0, $vtable$i44 = 0, $vtable$i47 = 0, $vtable$i93 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $agg$tmp23$byval_copy = sp + 16|0;
 $agg$tmp$byval_copy = sp + 12|0;
 $ref$tmp = sp + 8|0;
 $agg$tmp = sp + 4|0;
 $agg$tmp23 = sp;
 __ZNKSt3__28ios_base6getlocEv($ref$tmp,$__iob);
 __THREW__ = 0;
 $call$i37 = (invoke_iii(380,($ref$tmp|0),(20128|0))|0);
 $0 = __THREW__; __THREW__ = 0;
 $1 = $0&1;
 if ($1) {
  $15 = ___cxa_find_matching_catch_2()|0;
  $16 = tempRet0;
  __ZNSt3__26localeD2Ev($ref$tmp);
  ___resumeException($15|0);
  // unreachable;
 }
 __ZNSt3__26localeD2Ev($ref$tmp);
 HEAP32[$__err>>2] = 0;
 $$pre = 0;$__fmtb$addr$0$ph = $__fmtb;
 L4: while(1) {
  $cmp = ($__fmtb$addr$0$ph|0)!=($__fmte|0);
  $2 = $$pre;
  while(1) {
   $cmp2 = ($2|0)==(0);
   $or$cond = $cmp & $cmp2;
   $3 = HEAP32[$__b>>2]|0;
   if (!($or$cond)) {
    $$pre$i$i$i152 = $3;
    break L4;
   }
   $tobool$i$i$i = ($3|0)==(0|0);
   $4 = $3;
   if ($tobool$i$i$i) {
    $24 = $4;$51 = 0;$73 = 1;
   } else {
    $__ninp_$i$i$i$i = ((($3)) + 12|0);
    $5 = HEAP32[$__ninp_$i$i$i$i>>2]|0;
    $__einp_$i$i$i$i = ((($3)) + 16|0);
    $6 = HEAP32[$__einp_$i$i$i$i>>2]|0;
    $cmp$i$i$i$i = ($5|0)==($6|0);
    if ($cmp$i$i$i$i) {
     $vtable$i$i$i$i = HEAP32[$3>>2]|0;
     $vfn$i$i$i$i = ((($vtable$i$i$i$i)) + 36|0);
     $7 = HEAP32[$vfn$i$i$i$i>>2]|0;
     $call$i$i$i$i = (FUNCTION_TABLE_ii[$7 & 1023]($3)|0);
     $retval$0$i$i$i$i = $call$i$i$i$i;
    } else {
     $8 = HEAP32[$5>>2]|0;
     $call3$i$i$i$i = (__ZNSt3__211char_traitsIwE11to_int_typeEw($8)|0);
     $retval$0$i$i$i$i = $call3$i$i$i$i;
    }
    $call3$i$i$i = (__ZNSt3__211char_traitsIwE3eofEv()|0);
    $call4$i$i$i = (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($retval$0$i$i$i$i,$call3$i$i$i)|0);
    if ($call4$i$i$i) {
     HEAP32[$__b>>2] = 0;
     $24 = 0;$51 = 0;$73 = 1;
    } else {
     $24 = $4;$51 = $3;$73 = 0;
    }
   }
   $9 = HEAP32[$__e>>2]|0;
   $tobool$i2$i$i = ($9|0)==(0|0);
   $10 = $9;
   do {
    if ($tobool$i2$i$i) {
     $$ph = $10;
     label = 17;
    } else {
     $__ninp_$i$i3$i$i = ((($9)) + 12|0);
     $11 = HEAP32[$__ninp_$i$i3$i$i>>2]|0;
     $__einp_$i$i4$i$i = ((($9)) + 16|0);
     $12 = HEAP32[$__einp_$i$i4$i$i>>2]|0;
     $cmp$i$i5$i$i = ($11|0)==($12|0);
     if ($cmp$i$i5$i$i) {
      $vtable$i$i7$i$i = HEAP32[$9>>2]|0;
      $vfn$i$i8$i$i = ((($vtable$i$i7$i$i)) + 36|0);
      $13 = HEAP32[$vfn$i$i8$i$i>>2]|0;
      $call$i$i9$i$i = (FUNCTION_TABLE_ii[$13 & 1023]($9)|0);
      $retval$0$i$i13$i$i = $call$i$i9$i$i;
     } else {
      $14 = HEAP32[$11>>2]|0;
      $call3$i$i11$i$i = (__ZNSt3__211char_traitsIwE11to_int_typeEw($14)|0);
      $retval$0$i$i13$i$i = $call3$i$i11$i$i;
     }
     $call3$i14$i$i = (__ZNSt3__211char_traitsIwE3eofEv()|0);
     $call4$i15$i$i = (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($retval$0$i$i13$i$i,$call3$i14$i$i)|0);
     if ($call4$i15$i$i) {
      HEAP32[$__e>>2] = 0;
      $$ph = 0;
      label = 17;
      break;
     } else {
      if ($73) {
       $25 = $10;$74 = $9;
       break;
      } else {
       label = 60;
       break L4;
      }
     }
    }
   } while(0);
   if ((label|0) == 17) {
    label = 0;
    if ($73) {
     label = 60;
     break L4;
    } else {
     $25 = $$ph;$74 = 0;
    }
   }
   $17 = HEAP32[$__fmtb$addr$0$ph>>2]|0;
   $vtable$i = HEAP32[$call$i37>>2]|0;
   $vfn$i = ((($vtable$i)) + 52|0);
   $18 = HEAP32[$vfn$i>>2]|0;
   $call$i = (FUNCTION_TABLE_iiii[$18 & 1023]($call$i37,$17,0)|0);
   $cmp5 = ($call$i<<24>>24)==(37);
   if ($cmp5) {
    label = 21;
    break;
   }
   $27 = HEAP32[$__fmtb$addr$0$ph>>2]|0;
   $vtable$i44 = HEAP32[$call$i37>>2]|0;
   $vfn$i45 = ((($vtable$i44)) + 12|0);
   $28 = HEAP32[$vfn$i45>>2]|0;
   $call$i46 = (FUNCTION_TABLE_iiii[$28 & 1023]($call$i37,8192,$27)|0);
   if ($call$i46) {
    $__fmtb$addr$0$ph$sink = $__fmtb$addr$0$ph;
    label = 28;
    break;
   }
   $__ninp_$i$i107 = ((($51)) + 12|0);
   $52 = HEAP32[$__ninp_$i$i107>>2]|0;
   $__einp_$i$i108 = ((($51)) + 16|0);
   $53 = HEAP32[$__einp_$i$i108>>2]|0;
   $cmp$i$i109 = ($52|0)==($53|0);
   if ($cmp$i$i109) {
    $vtable$i$i110 = HEAP32[$51>>2]|0;
    $vfn$i$i111 = ((($vtable$i$i110)) + 36|0);
    $54 = HEAP32[$vfn$i$i111>>2]|0;
    $call$i$i112 = (FUNCTION_TABLE_ii[$54 & 1023]($51)|0);
    $retval$0$i$i116 = $call$i$i112;
   } else {
    $55 = HEAP32[$52>>2]|0;
    $call3$i$i114 = (__ZNSt3__211char_traitsIwE11to_int_typeEw($55)|0);
    $retval$0$i$i116 = $call3$i$i114;
   }
   $vtable$i118 = HEAP32[$call$i37>>2]|0;
   $vfn$i119 = ((($vtable$i118)) + 28|0);
   $56 = HEAP32[$vfn$i119>>2]|0;
   $call$i120 = (FUNCTION_TABLE_iii[$56 & 511]($call$i37,$retval$0$i$i116)|0);
   $57 = HEAP32[$__fmtb$addr$0$ph>>2]|0;
   $vtable$i121 = HEAP32[$call$i37>>2]|0;
   $vfn$i122 = ((($vtable$i121)) + 28|0);
   $58 = HEAP32[$vfn$i122>>2]|0;
   $call$i123 = (FUNCTION_TABLE_iii[$58 & 511]($call$i37,$57)|0);
   $cmp49 = ($call$i120|0)==($call$i123|0);
   if ($cmp49) {
    label = 56;
    break;
   }
   HEAP32[$__err>>2] = 4;
   $2 = 4;
  }
  L36: do {
   if ((label|0) == 21) {
    label = 0;
    $incdec$ptr$le195 = ((($__fmtb$addr$0$ph)) + 4|0);
    $cmp7 = ($incdec$ptr$le195|0)==($__fmte|0);
    if ($cmp7) {
     label = 60;
     break L4;
    }
    $19 = HEAP32[$incdec$ptr$le195>>2]|0;
    $vtable$i38 = HEAP32[$call$i37>>2]|0;
    $vfn$i39 = ((($vtable$i38)) + 52|0);
    $20 = HEAP32[$vfn$i39>>2]|0;
    $call$i40 = (FUNCTION_TABLE_iiii[$20 & 1023]($call$i37,$19,0)|0);
    switch ($call$i40<<24>>24) {
    case 48: case 69:  {
     $incdec$ptr16 = ((($__fmtb$addr$0$ph)) + 8|0);
     $cmp17 = ($incdec$ptr16|0)==($__fmte|0);
     if ($cmp17) {
      label = 60;
      break L4;
     }
     $21 = HEAP32[$incdec$ptr16>>2]|0;
     $vtable$i41 = HEAP32[$call$i37>>2]|0;
     $vfn$i42 = ((($vtable$i41)) + 52|0);
     $22 = HEAP32[$vfn$i42>>2]|0;
     $call$i43 = (FUNCTION_TABLE_iiii[$22 & 1023]($call$i37,$21,0)|0);
     $26 = $incdec$ptr$le195;$__cmd$0 = $call$i43;$__opt$0 = $call$i40;
     break;
    }
    default: {
     $26 = $__fmtb$addr$0$ph;$__cmd$0 = $call$i40;$__opt$0 = 0;
    }
    }
    $vtable = HEAP32[$this>>2]|0;
    $vfn = ((($vtable)) + 36|0);
    $23 = HEAP32[$vfn>>2]|0;
    HEAP32[$agg$tmp>>2] = $24;
    HEAP32[$agg$tmp23>>2] = $25;
    ;HEAP32[$agg$tmp$byval_copy>>2]=HEAP32[$agg$tmp>>2]|0;
    ;HEAP32[$agg$tmp23$byval_copy>>2]=HEAP32[$agg$tmp23>>2]|0;
    $call24 = (FUNCTION_TABLE_iiiiiiiii[$23 & 511]($this,$agg$tmp$byval_copy,$agg$tmp23$byval_copy,$__iob,$__err,$__tm,$__cmd$0,$__opt$0)|0);
    HEAP32[$__b>>2] = $call24;
    $incdec$ptr25 = ((($26)) + 8|0);
    $__fmtb$addr$0$ph$be = $incdec$ptr25;
   }
   else if ((label|0) == 28) {
    while(1) {
     label = 0;
     $incdec$ptr$le194 = ((($__fmtb$addr$0$ph$sink)) + 4|0);
     $cmp30 = ($incdec$ptr$le194|0)==($__fmte|0);
     if ($cmp30) {
      $incdec$ptr$le194$lcssa = $__fmte;
      break;
     }
     $29 = HEAP32[$incdec$ptr$le194>>2]|0;
     $vtable$i47 = HEAP32[$call$i37>>2]|0;
     $vfn$i48 = ((($vtable$i47)) + 12|0);
     $30 = HEAP32[$vfn$i48>>2]|0;
     $call$i49 = (FUNCTION_TABLE_iiii[$30 & 1023]($call$i37,8192,$29)|0);
     if ($call$i49) {
      $__fmtb$addr$0$ph$sink = $incdec$ptr$le194;
      label = 28;
     } else {
      $incdec$ptr$le194$lcssa = $incdec$ptr$le194;
      break;
     }
    }
    $$pre$i$i$i66 = $51;$$pre$i17$i$i87 = $74;$35 = $74;
    while(1) {
     $tobool$i$i$i51 = ($$pre$i$i$i66|0)==(0|0);
     if ($tobool$i$i$i51) {
      $40 = 1;$41 = 0;
     } else {
      $__ninp_$i$i$i$i52 = ((($$pre$i$i$i66)) + 12|0);
      $31 = HEAP32[$__ninp_$i$i$i$i52>>2]|0;
      $__einp_$i$i$i$i53 = ((($$pre$i$i$i66)) + 16|0);
      $32 = HEAP32[$__einp_$i$i$i$i53>>2]|0;
      $cmp$i$i$i$i54 = ($31|0)==($32|0);
      if ($cmp$i$i$i$i54) {
       $vtable$i$i$i$i56 = HEAP32[$$pre$i$i$i66>>2]|0;
       $vfn$i$i$i$i57 = ((($vtable$i$i$i$i56)) + 36|0);
       $33 = HEAP32[$vfn$i$i$i$i57>>2]|0;
       $call$i$i$i$i58 = (FUNCTION_TABLE_ii[$33 & 1023]($$pre$i$i$i66)|0);
       $retval$0$i$i$i$i62 = $call$i$i$i$i58;
      } else {
       $34 = HEAP32[$31>>2]|0;
       $call3$i$i$i$i60 = (__ZNSt3__211char_traitsIwE11to_int_typeEw($34)|0);
       $retval$0$i$i$i$i62 = $call3$i$i$i$i60;
      }
      $call3$i$i$i63 = (__ZNSt3__211char_traitsIwE3eofEv()|0);
      $call4$i$i$i64 = (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($retval$0$i$i$i$i62,$call3$i$i$i63)|0);
      if ($call4$i$i$i64) {
       HEAP32[$__b>>2] = 0;
       $40 = 1;$41 = 0;
      } else {
       $40 = 0;$41 = $$pre$i$i$i66;
      }
     }
     $tobool$i2$i$i71 = ($35|0)==(0|0);
     do {
      if ($tobool$i2$i$i71) {
       $$pre$i17$i$i87198 = $$pre$i17$i$i87;
       label = 43;
      } else {
       $__ninp_$i$i3$i$i73 = ((($35)) + 12|0);
       $36 = HEAP32[$__ninp_$i$i3$i$i73>>2]|0;
       $__einp_$i$i4$i$i74 = ((($35)) + 16|0);
       $37 = HEAP32[$__einp_$i$i4$i$i74>>2]|0;
       $cmp$i$i5$i$i75 = ($36|0)==($37|0);
       if ($cmp$i$i5$i$i75) {
        $vtable$i$i7$i$i77 = HEAP32[$35>>2]|0;
        $vfn$i$i8$i$i78 = ((($vtable$i$i7$i$i77)) + 36|0);
        $38 = HEAP32[$vfn$i$i8$i$i78>>2]|0;
        $call$i$i9$i$i79 = (FUNCTION_TABLE_ii[$38 & 1023]($35)|0);
        $retval$0$i$i13$i$i83 = $call$i$i9$i$i79;
       } else {
        $39 = HEAP32[$36>>2]|0;
        $call3$i$i11$i$i81 = (__ZNSt3__211char_traitsIwE11to_int_typeEw($39)|0);
        $retval$0$i$i13$i$i83 = $call3$i$i11$i$i81;
       }
       $call3$i14$i$i84 = (__ZNSt3__211char_traitsIwE3eofEv()|0);
       $call4$i15$i$i85 = (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($retval$0$i$i13$i$i83,$call3$i14$i$i84)|0);
       if ($call4$i15$i$i85) {
        HEAP32[$__e>>2] = 0;
        $$pre$i17$i$i87198 = 0;
        label = 43;
        break;
       } else {
        $phitmp$i18$i$i88 = ($$pre$i17$i$i87|0)==(0|0);
        $cmptmp$i$i91 = $40 ^ $phitmp$i18$i$i88;
        if ($cmptmp$i$i91) {
         $$pre$i17$i$i87197 = $$pre$i17$i$i87;$75 = $$pre$i17$i$i87;
         break;
        } else {
         $__fmtb$addr$0$ph$be = $incdec$ptr$le194$lcssa;
         break L36;
        }
       }
      }
     } while(0);
     if ((label|0) == 43) {
      label = 0;
      if ($40) {
       $__fmtb$addr$0$ph$be = $incdec$ptr$le194$lcssa;
       break L36;
      } else {
       $$pre$i17$i$i87197 = $$pre$i17$i$i87198;$75 = 0;
      }
     }
     $__ninp_$i$i = ((($41)) + 12|0);
     $42 = HEAP32[$__ninp_$i$i>>2]|0;
     $__einp_$i$i = ((($41)) + 16|0);
     $43 = HEAP32[$__einp_$i$i>>2]|0;
     $cmp$i$i92 = ($42|0)==($43|0);
     if ($cmp$i$i92) {
      $vtable$i$i = HEAP32[$41>>2]|0;
      $vfn$i$i = ((($vtable$i$i)) + 36|0);
      $44 = HEAP32[$vfn$i$i>>2]|0;
      $call$i$i = (FUNCTION_TABLE_ii[$44 & 1023]($41)|0);
      $retval$0$i$i = $call$i$i;
     } else {
      $45 = HEAP32[$42>>2]|0;
      $call3$i$i = (__ZNSt3__211char_traitsIwE11to_int_typeEw($45)|0);
      $retval$0$i$i = $call3$i$i;
     }
     $vtable$i93 = HEAP32[$call$i37>>2]|0;
     $vfn$i94 = ((($vtable$i93)) + 12|0);
     $46 = HEAP32[$vfn$i94>>2]|0;
     $call$i95 = (FUNCTION_TABLE_iiii[$46 & 1023]($call$i37,8192,$retval$0$i$i)|0);
     if (!($call$i95)) {
      $__fmtb$addr$0$ph$be = $incdec$ptr$le194$lcssa;
      break L36;
     }
     $47 = HEAP32[$__ninp_$i$i>>2]|0;
     $48 = HEAP32[$__einp_$i$i>>2]|0;
     $cmp$i$i99 = ($47|0)==($48|0);
     if ($cmp$i$i99) {
      $vtable$i$i100 = HEAP32[$41>>2]|0;
      $vfn$i$i101 = ((($vtable$i$i100)) + 40|0);
      $49 = HEAP32[$vfn$i$i101>>2]|0;
      (FUNCTION_TABLE_ii[$49 & 1023]($41)|0);
      $$pre$i$i$i66 = $41;$$pre$i17$i$i87 = $$pre$i17$i$i87197;$35 = $75;
      continue;
     } else {
      $incdec$ptr$i$i = ((($47)) + 4|0);
      HEAP32[$__ninp_$i$i>>2] = $incdec$ptr$i$i;
      $50 = HEAP32[$47>>2]|0;
      (__ZNSt3__211char_traitsIwE11to_int_typeEw($50)|0);
      $$pre$i$i$i66 = $41;$$pre$i17$i$i87 = $$pre$i17$i$i87197;$35 = $75;
      continue;
     }
    }
   }
   else if ((label|0) == 56) {
    label = 0;
    $incdec$ptr$le = ((($__fmtb$addr$0$ph)) + 4|0);
    $59 = HEAP32[$__ninp_$i$i107>>2]|0;
    $60 = HEAP32[$__einp_$i$i108>>2]|0;
    $cmp$i$i127 = ($59|0)==($60|0);
    if ($cmp$i$i127) {
     $vtable$i$i128 = HEAP32[$51>>2]|0;
     $vfn$i$i129 = ((($vtable$i$i128)) + 40|0);
     $61 = HEAP32[$vfn$i$i129>>2]|0;
     (FUNCTION_TABLE_ii[$61 & 1023]($51)|0);
     $__fmtb$addr$0$ph$be = $incdec$ptr$le;
     break;
    } else {
     $incdec$ptr$i$i132 = ((($59)) + 4|0);
     HEAP32[$__ninp_$i$i107>>2] = $incdec$ptr$i$i132;
     $62 = HEAP32[$59>>2]|0;
     (__ZNSt3__211char_traitsIwE11to_int_typeEw($62)|0);
     $__fmtb$addr$0$ph$be = $incdec$ptr$le;
     break;
    }
   }
  } while(0);
  $$pre$pre = HEAP32[$__err>>2]|0;
  $$pre = $$pre$pre;$__fmtb$addr$0$ph = $__fmtb$addr$0$ph$be;
 }
 if ((label|0) == 60) {
  HEAP32[$__err>>2] = 4;
  $$pre$i$i$i152 = $51;
 }
 $tobool$i$i$i137 = ($$pre$i$i$i152|0)==(0|0);
 if ($tobool$i$i$i137) {
  $76 = 1;$retval$sroa$0$0$copyload = 0;
 } else {
  $__ninp_$i$i$i$i138 = ((($$pre$i$i$i152)) + 12|0);
  $63 = HEAP32[$__ninp_$i$i$i$i138>>2]|0;
  $__einp_$i$i$i$i139 = ((($$pre$i$i$i152)) + 16|0);
  $64 = HEAP32[$__einp_$i$i$i$i139>>2]|0;
  $cmp$i$i$i$i140 = ($63|0)==($64|0);
  if ($cmp$i$i$i$i140) {
   $vtable$i$i$i$i142 = HEAP32[$$pre$i$i$i152>>2]|0;
   $vfn$i$i$i$i143 = ((($vtable$i$i$i$i142)) + 36|0);
   $65 = HEAP32[$vfn$i$i$i$i143>>2]|0;
   $call$i$i$i$i144 = (FUNCTION_TABLE_ii[$65 & 1023]($$pre$i$i$i152)|0);
   $retval$0$i$i$i$i148 = $call$i$i$i$i144;
  } else {
   $66 = HEAP32[$63>>2]|0;
   $call3$i$i$i$i146 = (__ZNSt3__211char_traitsIwE11to_int_typeEw($66)|0);
   $retval$0$i$i$i$i148 = $call3$i$i$i$i146;
  }
  $call3$i$i$i149 = (__ZNSt3__211char_traitsIwE3eofEv()|0);
  $call4$i$i$i150 = (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($retval$0$i$i$i$i148,$call3$i$i$i149)|0);
  if ($call4$i$i$i150) {
   HEAP32[$__b>>2] = 0;
   $76 = 1;$retval$sroa$0$0$copyload = 0;
  } else {
   $76 = 0;$retval$sroa$0$0$copyload = $$pre$i$i$i152;
  }
 }
 $67 = HEAP32[$__e>>2]|0;
 $tobool$i2$i$i157 = ($67|0)==(0|0);
 do {
  if ($tobool$i2$i$i157) {
   label = 73;
  } else {
   $__ninp_$i$i3$i$i159 = ((($67)) + 12|0);
   $68 = HEAP32[$__ninp_$i$i3$i$i159>>2]|0;
   $__einp_$i$i4$i$i160 = ((($67)) + 16|0);
   $69 = HEAP32[$__einp_$i$i4$i$i160>>2]|0;
   $cmp$i$i5$i$i161 = ($68|0)==($69|0);
   if ($cmp$i$i5$i$i161) {
    $vtable$i$i7$i$i163 = HEAP32[$67>>2]|0;
    $vfn$i$i8$i$i164 = ((($vtable$i$i7$i$i163)) + 36|0);
    $70 = HEAP32[$vfn$i$i8$i$i164>>2]|0;
    $call$i$i9$i$i165 = (FUNCTION_TABLE_ii[$70 & 1023]($67)|0);
    $retval$0$i$i13$i$i169 = $call$i$i9$i$i165;
   } else {
    $71 = HEAP32[$68>>2]|0;
    $call3$i$i11$i$i167 = (__ZNSt3__211char_traitsIwE11to_int_typeEw($71)|0);
    $retval$0$i$i13$i$i169 = $call3$i$i11$i$i167;
   }
   $call3$i14$i$i170 = (__ZNSt3__211char_traitsIwE3eofEv()|0);
   $call4$i15$i$i171 = (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($retval$0$i$i13$i$i169,$call3$i14$i$i170)|0);
   if ($call4$i15$i$i171) {
    HEAP32[$__e>>2] = 0;
    label = 73;
    break;
   } else {
    if ($76) {
     break;
    } else {
     label = 75;
     break;
    }
   }
  }
 } while(0);
 if ((label|0) == 73) {
  if ($76) {
   label = 75;
  }
 }
 if ((label|0) == 75) {
  $72 = HEAP32[$__err>>2]|0;
  $or = $72 | 2;
  HEAP32[$__err>>2] = $or;
 }
 STACKTOP = sp;return ($retval$sroa$0$0$copyload|0);
}
function __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE9__get_dayERiRS4_S4_RjRKNS_5ctypeIwEE($this,$__d,$__b,$__e,$__err,$__ct) {
 $this = $this|0;
 $__d = $__d|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__err = $__err|0;
 $__ct = $__ct|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $and = 0, $call = 0, $call$off = 0, $or = 0, $tobool = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $agg$tmp$byval_copy = sp + 4|0;
 $agg$tmp = sp;
 $0 = HEAP32[$__e>>2]|0;
 HEAP32[$agg$tmp>>2] = $0;
 ;HEAP32[$agg$tmp$byval_copy>>2]=HEAP32[$agg$tmp>>2]|0;
 $call = (__ZNSt3__220__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$agg$tmp$byval_copy,$__err,$__ct,2)|0);
 $1 = HEAP32[$__err>>2]|0;
 $and = $1 & 4;
 $tobool = ($and|0)==(0);
 $call$off = (($call) + -1)|0;
 $2 = ($call$off>>>0)<(31);
 $3 = $2 & $tobool;
 if ($3) {
  HEAP32[$__d>>2] = $call;
 } else {
  $or = $1 | 4;
  HEAP32[$__err>>2] = $or;
 }
 STACKTOP = sp;return;
}
function __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE10__get_hourERiRS4_S4_RjRKNS_5ctypeIwEE($this,$__h,$__b,$__e,$__err,$__ct) {
 $this = $this|0;
 $__h = $__h|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__err = $__err|0;
 $__ct = $__ct|0;
 var $0 = 0, $1 = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $and = 0, $call = 0, $cmp = 0, $or = 0, $or$cond = 0, $tobool = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $agg$tmp$byval_copy = sp + 4|0;
 $agg$tmp = sp;
 $0 = HEAP32[$__e>>2]|0;
 HEAP32[$agg$tmp>>2] = $0;
 ;HEAP32[$agg$tmp$byval_copy>>2]=HEAP32[$agg$tmp>>2]|0;
 $call = (__ZNSt3__220__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$agg$tmp$byval_copy,$__err,$__ct,2)|0);
 $1 = HEAP32[$__err>>2]|0;
 $and = $1 & 4;
 $tobool = ($and|0)==(0);
 $cmp = ($call|0)<(24);
 $or$cond = $cmp & $tobool;
 if ($or$cond) {
  HEAP32[$__h>>2] = $call;
 } else {
  $or = $1 | 4;
  HEAP32[$__err>>2] = $or;
 }
 STACKTOP = sp;return;
}
function __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE13__get_12_hourERiRS4_S4_RjRKNS_5ctypeIwEE($this,$__h,$__b,$__e,$__err,$__ct) {
 $this = $this|0;
 $__h = $__h|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__err = $__err|0;
 $__ct = $__ct|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $and = 0, $call = 0, $call$off = 0, $or = 0, $tobool = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $agg$tmp$byval_copy = sp + 4|0;
 $agg$tmp = sp;
 $0 = HEAP32[$__e>>2]|0;
 HEAP32[$agg$tmp>>2] = $0;
 ;HEAP32[$agg$tmp$byval_copy>>2]=HEAP32[$agg$tmp>>2]|0;
 $call = (__ZNSt3__220__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$agg$tmp$byval_copy,$__err,$__ct,2)|0);
 $1 = HEAP32[$__err>>2]|0;
 $and = $1 & 4;
 $tobool = ($and|0)==(0);
 $call$off = (($call) + -1)|0;
 $2 = ($call$off>>>0)<(12);
 $3 = $2 & $tobool;
 if ($3) {
  HEAP32[$__h>>2] = $call;
 } else {
  $or = $1 | 4;
  HEAP32[$__err>>2] = $or;
 }
 STACKTOP = sp;return;
}
function __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE18__get_day_year_numERiRS4_S4_RjRKNS_5ctypeIwEE($this,$__d,$__b,$__e,$__err,$__ct) {
 $this = $this|0;
 $__d = $__d|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__err = $__err|0;
 $__ct = $__ct|0;
 var $0 = 0, $1 = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $and = 0, $call = 0, $cmp = 0, $or = 0, $or$cond = 0, $tobool = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $agg$tmp$byval_copy = sp + 4|0;
 $agg$tmp = sp;
 $0 = HEAP32[$__e>>2]|0;
 HEAP32[$agg$tmp>>2] = $0;
 ;HEAP32[$agg$tmp$byval_copy>>2]=HEAP32[$agg$tmp>>2]|0;
 $call = (__ZNSt3__220__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$agg$tmp$byval_copy,$__err,$__ct,3)|0);
 $1 = HEAP32[$__err>>2]|0;
 $and = $1 & 4;
 $tobool = ($and|0)==(0);
 $cmp = ($call|0)<(366);
 $or$cond = $cmp & $tobool;
 if ($or$cond) {
  HEAP32[$__d>>2] = $call;
 } else {
  $or = $1 | 4;
  HEAP32[$__err>>2] = $or;
 }
 STACKTOP = sp;return;
}
function __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11__get_monthERiRS4_S4_RjRKNS_5ctypeIwEE($this,$__m,$__b,$__e,$__err,$__ct) {
 $this = $this|0;
 $__m = $__m|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__err = $__err|0;
 $__ct = $__ct|0;
 var $0 = 0, $1 = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $and = 0, $call = 0, $cmp = 0, $or = 0, $or$cond = 0, $sub = 0, $tobool = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $agg$tmp$byval_copy = sp + 4|0;
 $agg$tmp = sp;
 $0 = HEAP32[$__e>>2]|0;
 HEAP32[$agg$tmp>>2] = $0;
 ;HEAP32[$agg$tmp$byval_copy>>2]=HEAP32[$agg$tmp>>2]|0;
 $call = (__ZNSt3__220__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$agg$tmp$byval_copy,$__err,$__ct,2)|0);
 $1 = HEAP32[$__err>>2]|0;
 $and = $1 & 4;
 $tobool = ($and|0)==(0);
 $cmp = ($call|0)<(13);
 $or$cond = $cmp & $tobool;
 if ($or$cond) {
  $sub = (($call) + -1)|0;
  HEAP32[$__m>>2] = $sub;
 } else {
  $or = $1 | 4;
  HEAP32[$__err>>2] = $or;
 }
 STACKTOP = sp;return;
}
function __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE12__get_minuteERiRS4_S4_RjRKNS_5ctypeIwEE($this,$__m,$__b,$__e,$__err,$__ct) {
 $this = $this|0;
 $__m = $__m|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__err = $__err|0;
 $__ct = $__ct|0;
 var $0 = 0, $1 = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $and = 0, $call = 0, $cmp = 0, $or = 0, $or$cond = 0, $tobool = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $agg$tmp$byval_copy = sp + 4|0;
 $agg$tmp = sp;
 $0 = HEAP32[$__e>>2]|0;
 HEAP32[$agg$tmp>>2] = $0;
 ;HEAP32[$agg$tmp$byval_copy>>2]=HEAP32[$agg$tmp>>2]|0;
 $call = (__ZNSt3__220__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$agg$tmp$byval_copy,$__err,$__ct,2)|0);
 $1 = HEAP32[$__err>>2]|0;
 $and = $1 & 4;
 $tobool = ($and|0)==(0);
 $cmp = ($call|0)<(60);
 $or$cond = $cmp & $tobool;
 if ($or$cond) {
  HEAP32[$__m>>2] = $call;
 } else {
  $or = $1 | 4;
  HEAP32[$__err>>2] = $or;
 }
 STACKTOP = sp;return;
}
function __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__get_white_spaceERS4_S4_RjRKNS_5ctypeIwEE($this,$__b,$__e,$__err,$__ct) {
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__err = $__err|0;
 $__ct = $__ct|0;
 var $$pre$i$i$i = 0, $$pre$i$i$i30 = 0, $$pre$i17$i$i51 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__einp_$i$i = 0, $__einp_$i$i$i$i = 0, $__einp_$i$i$i$i17 = 0;
 var $__einp_$i$i4$i$i = 0, $__einp_$i$i4$i$i38 = 0, $__einp_$i$i6 = 0, $__ninp_$i$i = 0, $__ninp_$i$i$i$i = 0, $__ninp_$i$i$i$i16 = 0, $__ninp_$i$i3$i$i = 0, $__ninp_$i$i3$i$i37 = 0, $__ninp_$i$i5 = 0, $call$i = 0, $call$i$i = 0, $call$i$i$i$i = 0, $call$i$i$i$i22 = 0, $call$i$i9$i$i = 0, $call$i$i9$i$i43 = 0, $call3$i$i = 0, $call3$i$i$i = 0, $call3$i$i$i$i = 0, $call3$i$i$i$i24 = 0, $call3$i$i$i27 = 0;
 var $call3$i$i11$i$i = 0, $call3$i$i11$i$i45 = 0, $call3$i14$i$i = 0, $call3$i14$i$i48 = 0, $call4$i$i$i = 0, $call4$i$i$i28 = 0, $call4$i15$i$i = 0, $call4$i15$i$i49 = 0, $cmp$i$i = 0, $cmp$i$i$i$i = 0, $cmp$i$i$i$i18 = 0, $cmp$i$i5$i$i = 0, $cmp$i$i5$i$i39 = 0, $cmp$i$i7 = 0, $incdec$ptr$i$i = 0, $or = 0, $phitmp$i$i$i = 0, $phitmp$i$i$i31 = 0, $retval$0$i$i = 0, $retval$0$i$i$i$i = 0;
 var $retval$0$i$i$i$i26 = 0, $retval$0$i$i13$i$i = 0, $retval$0$i$i13$i$i47 = 0, $tobool$i$i$i = 0, $tobool$i$i$i15 = 0, $tobool$i2$i$i = 0, $tobool$i2$i$i35 = 0, $vfn$i = 0, $vfn$i$i = 0, $vfn$i$i$i$i = 0, $vfn$i$i$i$i21 = 0, $vfn$i$i8$i$i = 0, $vfn$i$i8$i$i42 = 0, $vfn$i$i9 = 0, $vtable$i = 0, $vtable$i$i = 0, $vtable$i$i$i$i = 0, $vtable$i$i$i$i20 = 0, $vtable$i$i7$i$i = 0, $vtable$i$i7$i$i41 = 0;
 var $vtable$i$i8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 L1: while(1) {
  $0 = HEAP32[$__b>>2]|0;
  $tobool$i$i$i = ($0|0)==(0|0);
  do {
   if ($tobool$i$i$i) {
    $31 = 1;
   } else {
    $__ninp_$i$i$i$i = ((($0)) + 12|0);
    $1 = HEAP32[$__ninp_$i$i$i$i>>2]|0;
    $__einp_$i$i$i$i = ((($0)) + 16|0);
    $2 = HEAP32[$__einp_$i$i$i$i>>2]|0;
    $cmp$i$i$i$i = ($1|0)==($2|0);
    if ($cmp$i$i$i$i) {
     $vtable$i$i$i$i = HEAP32[$0>>2]|0;
     $vfn$i$i$i$i = ((($vtable$i$i$i$i)) + 36|0);
     $3 = HEAP32[$vfn$i$i$i$i>>2]|0;
     $call$i$i$i$i = (FUNCTION_TABLE_ii[$3 & 1023]($0)|0);
     $retval$0$i$i$i$i = $call$i$i$i$i;
    } else {
     $4 = HEAP32[$1>>2]|0;
     $call3$i$i$i$i = (__ZNSt3__211char_traitsIwE11to_int_typeEw($4)|0);
     $retval$0$i$i$i$i = $call3$i$i$i$i;
    }
    $call3$i$i$i = (__ZNSt3__211char_traitsIwE3eofEv()|0);
    $call4$i$i$i = (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($retval$0$i$i$i$i,$call3$i$i$i)|0);
    if ($call4$i$i$i) {
     HEAP32[$__b>>2] = 0;
     $31 = 1;
     break;
    } else {
     $$pre$i$i$i = HEAP32[$__b>>2]|0;
     $phitmp$i$i$i = ($$pre$i$i$i|0)==(0|0);
     $31 = $phitmp$i$i$i;
     break;
    }
   }
  } while(0);
  $5 = HEAP32[$__e>>2]|0;
  $tobool$i2$i$i = ($5|0)==(0|0);
  do {
   if ($tobool$i2$i$i) {
    label = 15;
   } else {
    $__ninp_$i$i3$i$i = ((($5)) + 12|0);
    $6 = HEAP32[$__ninp_$i$i3$i$i>>2]|0;
    $__einp_$i$i4$i$i = ((($5)) + 16|0);
    $7 = HEAP32[$__einp_$i$i4$i$i>>2]|0;
    $cmp$i$i5$i$i = ($6|0)==($7|0);
    if ($cmp$i$i5$i$i) {
     $vtable$i$i7$i$i = HEAP32[$5>>2]|0;
     $vfn$i$i8$i$i = ((($vtable$i$i7$i$i)) + 36|0);
     $8 = HEAP32[$vfn$i$i8$i$i>>2]|0;
     $call$i$i9$i$i = (FUNCTION_TABLE_ii[$8 & 1023]($5)|0);
     $retval$0$i$i13$i$i = $call$i$i9$i$i;
    } else {
     $9 = HEAP32[$6>>2]|0;
     $call3$i$i11$i$i = (__ZNSt3__211char_traitsIwE11to_int_typeEw($9)|0);
     $retval$0$i$i13$i$i = $call3$i$i11$i$i;
    }
    $call3$i14$i$i = (__ZNSt3__211char_traitsIwE3eofEv()|0);
    $call4$i15$i$i = (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($retval$0$i$i13$i$i,$call3$i14$i$i)|0);
    if ($call4$i15$i$i) {
     HEAP32[$__e>>2] = 0;
     label = 15;
     break;
    } else {
     if ($31) {
      $32 = $5;
      break;
     } else {
      $$pre$i17$i$i51 = $5;
      break L1;
     }
    }
   }
  } while(0);
  if ((label|0) == 15) {
   label = 0;
   if ($31) {
    $$pre$i17$i$i51 = 0;
    break;
   } else {
    $32 = 0;
   }
  }
  $10 = HEAP32[$__b>>2]|0;
  $__ninp_$i$i = ((($10)) + 12|0);
  $11 = HEAP32[$__ninp_$i$i>>2]|0;
  $__einp_$i$i = ((($10)) + 16|0);
  $12 = HEAP32[$__einp_$i$i>>2]|0;
  $cmp$i$i = ($11|0)==($12|0);
  if ($cmp$i$i) {
   $vtable$i$i = HEAP32[$10>>2]|0;
   $vfn$i$i = ((($vtable$i$i)) + 36|0);
   $13 = HEAP32[$vfn$i$i>>2]|0;
   $call$i$i = (FUNCTION_TABLE_ii[$13 & 1023]($10)|0);
   $retval$0$i$i = $call$i$i;
  } else {
   $14 = HEAP32[$11>>2]|0;
   $call3$i$i = (__ZNSt3__211char_traitsIwE11to_int_typeEw($14)|0);
   $retval$0$i$i = $call3$i$i;
  }
  $vtable$i = HEAP32[$__ct>>2]|0;
  $vfn$i = ((($vtable$i)) + 12|0);
  $15 = HEAP32[$vfn$i>>2]|0;
  $call$i = (FUNCTION_TABLE_iiii[$15 & 1023]($__ct,8192,$retval$0$i$i)|0);
  if (!($call$i)) {
   $$pre$i17$i$i51 = $32;
   break;
  }
  $16 = HEAP32[$__b>>2]|0;
  $__ninp_$i$i5 = ((($16)) + 12|0);
  $17 = HEAP32[$__ninp_$i$i5>>2]|0;
  $__einp_$i$i6 = ((($16)) + 16|0);
  $18 = HEAP32[$__einp_$i$i6>>2]|0;
  $cmp$i$i7 = ($17|0)==($18|0);
  if ($cmp$i$i7) {
   $vtable$i$i8 = HEAP32[$16>>2]|0;
   $vfn$i$i9 = ((($vtable$i$i8)) + 40|0);
   $19 = HEAP32[$vfn$i$i9>>2]|0;
   (FUNCTION_TABLE_ii[$19 & 1023]($16)|0);
   continue;
  } else {
   $incdec$ptr$i$i = ((($17)) + 4|0);
   HEAP32[$__ninp_$i$i5>>2] = $incdec$ptr$i$i;
   $20 = HEAP32[$17>>2]|0;
   (__ZNSt3__211char_traitsIwE11to_int_typeEw($20)|0);
   continue;
  }
 }
 $21 = HEAP32[$__b>>2]|0;
 $tobool$i$i$i15 = ($21|0)==(0|0);
 do {
  if ($tobool$i$i$i15) {
   $33 = 1;
  } else {
   $__ninp_$i$i$i$i16 = ((($21)) + 12|0);
   $22 = HEAP32[$__ninp_$i$i$i$i16>>2]|0;
   $__einp_$i$i$i$i17 = ((($21)) + 16|0);
   $23 = HEAP32[$__einp_$i$i$i$i17>>2]|0;
   $cmp$i$i$i$i18 = ($22|0)==($23|0);
   if ($cmp$i$i$i$i18) {
    $vtable$i$i$i$i20 = HEAP32[$21>>2]|0;
    $vfn$i$i$i$i21 = ((($vtable$i$i$i$i20)) + 36|0);
    $24 = HEAP32[$vfn$i$i$i$i21>>2]|0;
    $call$i$i$i$i22 = (FUNCTION_TABLE_ii[$24 & 1023]($21)|0);
    $retval$0$i$i$i$i26 = $call$i$i$i$i22;
   } else {
    $25 = HEAP32[$22>>2]|0;
    $call3$i$i$i$i24 = (__ZNSt3__211char_traitsIwE11to_int_typeEw($25)|0);
    $retval$0$i$i$i$i26 = $call3$i$i$i$i24;
   }
   $call3$i$i$i27 = (__ZNSt3__211char_traitsIwE3eofEv()|0);
   $call4$i$i$i28 = (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($retval$0$i$i$i$i26,$call3$i$i$i27)|0);
   if ($call4$i$i$i28) {
    HEAP32[$__b>>2] = 0;
    $33 = 1;
    break;
   } else {
    $$pre$i$i$i30 = HEAP32[$__b>>2]|0;
    $phitmp$i$i$i31 = ($$pre$i$i$i30|0)==(0|0);
    $33 = $phitmp$i$i$i31;
    break;
   }
  }
 } while(0);
 $tobool$i2$i$i35 = ($$pre$i17$i$i51|0)==(0|0);
 do {
  if ($tobool$i2$i$i35) {
   label = 37;
  } else {
   $__ninp_$i$i3$i$i37 = ((($$pre$i17$i$i51)) + 12|0);
   $26 = HEAP32[$__ninp_$i$i3$i$i37>>2]|0;
   $__einp_$i$i4$i$i38 = ((($$pre$i17$i$i51)) + 16|0);
   $27 = HEAP32[$__einp_$i$i4$i$i38>>2]|0;
   $cmp$i$i5$i$i39 = ($26|0)==($27|0);
   if ($cmp$i$i5$i$i39) {
    $vtable$i$i7$i$i41 = HEAP32[$$pre$i17$i$i51>>2]|0;
    $vfn$i$i8$i$i42 = ((($vtable$i$i7$i$i41)) + 36|0);
    $28 = HEAP32[$vfn$i$i8$i$i42>>2]|0;
    $call$i$i9$i$i43 = (FUNCTION_TABLE_ii[$28 & 1023]($$pre$i17$i$i51)|0);
    $retval$0$i$i13$i$i47 = $call$i$i9$i$i43;
   } else {
    $29 = HEAP32[$26>>2]|0;
    $call3$i$i11$i$i45 = (__ZNSt3__211char_traitsIwE11to_int_typeEw($29)|0);
    $retval$0$i$i13$i$i47 = $call3$i$i11$i$i45;
   }
   $call3$i14$i$i48 = (__ZNSt3__211char_traitsIwE3eofEv()|0);
   $call4$i15$i$i49 = (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($retval$0$i$i13$i$i47,$call3$i14$i$i48)|0);
   if ($call4$i15$i$i49) {
    HEAP32[$__e>>2] = 0;
    label = 37;
    break;
   } else {
    if ($33) {
     break;
    } else {
     label = 39;
     break;
    }
   }
  }
 } while(0);
 if ((label|0) == 37) {
  if ($33) {
   label = 39;
  }
 }
 if ((label|0) == 39) {
  $30 = HEAP32[$__err>>2]|0;
  $or = $30 | 2;
  HEAP32[$__err>>2] = $or;
 }
 return;
}
function __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11__get_am_pmERiRS4_S4_RjRKNS_5ctypeIwEE($this,$__h,$__b,$__e,$__err,$__ct) {
 $this = $this|0;
 $__h = $__h|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__err = $__err|0;
 $__ct = $__ct|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__size_$i$i = 0, $__size_$i$i12 = 0, $__size_$i2$i = 0, $__size_$i2$i14 = 0, $add = 0, $add$ptr = 0, $add$ptr5 = 0, $add14 = 0;
 var $agg$tmp = 0, $agg$tmp$byval_copy = 0, $call = 0, $call6 = 0, $cmp = 0, $cmp12 = 0, $cmp8 = 0, $cond$i = 0, $cond$i18 = 0, $conv$i$i = 0, $conv$i$i16 = 0, $or = 0, $or$cond = 0, $or$cond20 = 0, $sub$ptr$lhs$cast = 0, $sub$ptr$rhs$cast = 0, $sub$ptr$sub = 0, $tobool$i$i = 0, $tobool$i$i13 = 0, $vfn = 0;
 var $vtable = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $agg$tmp$byval_copy = sp + 4|0;
 $agg$tmp = sp;
 $add$ptr = ((($this)) + 8|0);
 $vtable = HEAP32[$add$ptr>>2]|0;
 $vfn = ((($vtable)) + 8|0);
 $0 = HEAP32[$vfn>>2]|0;
 $call = (FUNCTION_TABLE_ii[$0 & 1023]($add$ptr)|0);
 $1 = ((($call)) + 8|0);
 $__size_$i$i = ((($1)) + 3|0);
 $2 = HEAP8[$__size_$i$i>>0]|0;
 $tobool$i$i = ($2<<24>>24)<(0);
 if ($tobool$i$i) {
  $__size_$i2$i = ((($call)) + 4|0);
  $3 = HEAP32[$__size_$i2$i>>2]|0;
  $cond$i = $3;
 } else {
  $conv$i$i = $2&255;
  $cond$i = $conv$i$i;
 }
 $4 = ((($call)) + 20|0);
 $__size_$i$i12 = ((($4)) + 3|0);
 $5 = HEAP8[$__size_$i$i12>>0]|0;
 $tobool$i$i13 = ($5<<24>>24)<(0);
 if ($tobool$i$i13) {
  $__size_$i2$i14 = ((($call)) + 16|0);
  $6 = HEAP32[$__size_$i2$i14>>2]|0;
  $cond$i18 = $6;
 } else {
  $conv$i$i16 = $5&255;
  $cond$i18 = $conv$i$i16;
 }
 $add = (0 - ($cond$i18))|0;
 $cmp = ($cond$i|0)==($add|0);
 do {
  if ($cmp) {
   $7 = HEAP32[$__err>>2]|0;
   $or = $7 | 4;
   HEAP32[$__err>>2] = $or;
  } else {
   $8 = HEAP32[$__e>>2]|0;
   HEAP32[$agg$tmp>>2] = $8;
   $add$ptr5 = ((($call)) + 24|0);
   ;HEAP32[$agg$tmp$byval_copy>>2]=HEAP32[$agg$tmp>>2]|0;
   $call6 = (__ZNSt3__214__scan_keywordINS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEPKNS_12basic_stringIwS3_NS_9allocatorIwEEEENS_5ctypeIwEEEET0_RT_SE_SD_SD_RKT1_Rjb($__b,$agg$tmp$byval_copy,$call,$add$ptr5,$__ct,$__err,0)|0);
   $sub$ptr$lhs$cast = $call6;
   $sub$ptr$rhs$cast = $call;
   $sub$ptr$sub = (($sub$ptr$lhs$cast) - ($sub$ptr$rhs$cast))|0;
   $9 = ($sub$ptr$sub|0)==(0);
   $10 = HEAP32[$__h>>2]|0;
   $cmp8 = ($10|0)==(12);
   $or$cond = $cmp8 & $9;
   if ($or$cond) {
    HEAP32[$__h>>2] = 0;
    break;
   }
   $11 = ($sub$ptr$sub|0)==(12);
   $cmp12 = ($10|0)<(12);
   $or$cond20 = $cmp12 & $11;
   if ($or$cond20) {
    $add14 = (($10) + 12)|0;
    HEAP32[$__h>>2] = $add14;
   }
  }
 } while(0);
 STACKTOP = sp;return;
}
function __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE12__get_secondERiRS4_S4_RjRKNS_5ctypeIwEE($this,$__s,$__b,$__e,$__err,$__ct) {
 $this = $this|0;
 $__s = $__s|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__err = $__err|0;
 $__ct = $__ct|0;
 var $0 = 0, $1 = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $and = 0, $call = 0, $cmp = 0, $or = 0, $or$cond = 0, $tobool = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $agg$tmp$byval_copy = sp + 4|0;
 $agg$tmp = sp;
 $0 = HEAP32[$__e>>2]|0;
 HEAP32[$agg$tmp>>2] = $0;
 ;HEAP32[$agg$tmp$byval_copy>>2]=HEAP32[$agg$tmp>>2]|0;
 $call = (__ZNSt3__220__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$agg$tmp$byval_copy,$__err,$__ct,2)|0);
 $1 = HEAP32[$__err>>2]|0;
 $and = $1 & 4;
 $tobool = ($and|0)==(0);
 $cmp = ($call|0)<(61);
 $or$cond = $cmp & $tobool;
 if ($or$cond) {
  HEAP32[$__s>>2] = $call;
 } else {
  $or = $1 | 4;
  HEAP32[$__err>>2] = $or;
 }
 STACKTOP = sp;return;
}
function __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE13__get_weekdayERiRS4_S4_RjRKNS_5ctypeIwEE($this,$__w,$__b,$__e,$__err,$__ct) {
 $this = $this|0;
 $__w = $__w|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__err = $__err|0;
 $__ct = $__ct|0;
 var $0 = 0, $1 = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $and = 0, $call = 0, $cmp = 0, $or = 0, $or$cond = 0, $tobool = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $agg$tmp$byval_copy = sp + 4|0;
 $agg$tmp = sp;
 $0 = HEAP32[$__e>>2]|0;
 HEAP32[$agg$tmp>>2] = $0;
 ;HEAP32[$agg$tmp$byval_copy>>2]=HEAP32[$agg$tmp>>2]|0;
 $call = (__ZNSt3__220__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$agg$tmp$byval_copy,$__err,$__ct,1)|0);
 $1 = HEAP32[$__err>>2]|0;
 $and = $1 & 4;
 $tobool = ($and|0)==(0);
 $cmp = ($call|0)<(7);
 $or$cond = $cmp & $tobool;
 if ($or$cond) {
  HEAP32[$__w>>2] = $call;
 } else {
  $or = $1 | 4;
  HEAP32[$__err>>2] = $or;
 }
 STACKTOP = sp;return;
}
function __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE10__get_yearERiRS4_S4_RjRKNS_5ctypeIwEE($this,$__y,$__b,$__e,$__err,$__ct) {
 $this = $this|0;
 $__y = $__y|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__err = $__err|0;
 $__ct = $__ct|0;
 var $0 = 0, $1 = 0, $__t$0 = 0, $add = 0, $add6 = 0, $add6$call = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $and = 0, $call = 0, $cmp = 0, $cmp4 = 0, $sub = 0, $tobool = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $agg$tmp$byval_copy = sp + 4|0;
 $agg$tmp = sp;
 $0 = HEAP32[$__e>>2]|0;
 HEAP32[$agg$tmp>>2] = $0;
 ;HEAP32[$agg$tmp$byval_copy>>2]=HEAP32[$agg$tmp>>2]|0;
 $call = (__ZNSt3__220__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$agg$tmp$byval_copy,$__err,$__ct,4)|0);
 $1 = HEAP32[$__err>>2]|0;
 $and = $1 & 4;
 $tobool = ($and|0)==(0);
 if ($tobool) {
  $cmp = ($call|0)<(69);
  if ($cmp) {
   $add = (($call) + 2000)|0;
   $__t$0 = $add;
  } else {
   $cmp4 = ($call|0)<(100);
   $add6 = (($call) + 1900)|0;
   $add6$call = $cmp4 ? $add6 : $call;
   $__t$0 = $add6$call;
  }
  $sub = (($__t$0) + -1900)|0;
  HEAP32[$__y>>2] = $sub;
 }
 STACKTOP = sp;return;
}
function __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11__get_year4ERiRS4_S4_RjRKNS_5ctypeIwEE($this,$__y,$__b,$__e,$__err,$__ct) {
 $this = $this|0;
 $__y = $__y|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__err = $__err|0;
 $__ct = $__ct|0;
 var $0 = 0, $1 = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $and = 0, $call = 0, $sub = 0, $tobool = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $agg$tmp$byval_copy = sp + 4|0;
 $agg$tmp = sp;
 $0 = HEAP32[$__e>>2]|0;
 HEAP32[$agg$tmp>>2] = $0;
 ;HEAP32[$agg$tmp$byval_copy>>2]=HEAP32[$agg$tmp>>2]|0;
 $call = (__ZNSt3__220__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$agg$tmp$byval_copy,$__err,$__ct,4)|0);
 $1 = HEAP32[$__err>>2]|0;
 $and = $1 & 4;
 $tobool = ($and|0)==(0);
 if ($tobool) {
  $sub = (($call) + -1900)|0;
  HEAP32[$__y>>2] = $sub;
 }
 STACKTOP = sp;return;
}
function __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE13__get_percentERS4_S4_RjRKNS_5ctypeIwEE($this,$__b,$__e,$__err,$__ct) {
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__err = $__err|0;
 $__ct = $__ct|0;
 var $$pre$i$i$i = 0, $$pre$i$i$i35 = 0, $$pre$i17$i$i5664 = 0, $$sink2 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__einp_$i$i = 0, $__einp_$i$i$i$i = 0, $__einp_$i$i$i$i22 = 0;
 var $__einp_$i$i11 = 0, $__einp_$i$i4$i$i = 0, $__einp_$i$i4$i$i43 = 0, $__ninp_$i$i = 0, $__ninp_$i$i$i$i = 0, $__ninp_$i$i$i$i21 = 0, $__ninp_$i$i10 = 0, $__ninp_$i$i3$i$i = 0, $__ninp_$i$i3$i$i42 = 0, $call$i = 0, $call$i$i = 0, $call$i$i$i$i = 0, $call$i$i$i$i27 = 0, $call$i$i9$i$i = 0, $call$i$i9$i$i48 = 0, $call3$i$i = 0, $call3$i$i$i = 0, $call3$i$i$i$i = 0, $call3$i$i$i$i29 = 0, $call3$i$i$i32 = 0;
 var $call3$i$i11$i$i = 0, $call3$i$i11$i$i50 = 0, $call3$i14$i$i = 0, $call3$i14$i$i53 = 0, $call4$i$i$i = 0, $call4$i$i$i33 = 0, $call4$i15$i$i = 0, $call4$i15$i$i54 = 0, $cmp = 0, $cmp$i$i$i$i = 0, $cmp$i$i$i$i23 = 0, $cmp$i$i12 = 0, $cmp$i$i5$i$i = 0, $cmp$i$i5$i$i44 = 0, $cmp$i$i8 = 0, $incdec$ptr$i$i = 0, $or9 = 0, $phitmp$i$i$i = 0, $phitmp$i$i$i36 = 0, $retval$0$i$i = 0;
 var $retval$0$i$i$i$i = 0, $retval$0$i$i$i$i31 = 0, $retval$0$i$i13$i$i = 0, $retval$0$i$i13$i$i52 = 0, $tobool$i$i$i = 0, $tobool$i$i$i20 = 0, $tobool$i2$i$i = 0, $tobool$i2$i$i40 = 0, $vfn$i = 0, $vfn$i$i = 0, $vfn$i$i$i$i = 0, $vfn$i$i$i$i26 = 0, $vfn$i$i14 = 0, $vfn$i$i8$i$i = 0, $vfn$i$i8$i$i47 = 0, $vtable$i = 0, $vtable$i$i = 0, $vtable$i$i$i$i = 0, $vtable$i$i$i$i25 = 0, $vtable$i$i13 = 0;
 var $vtable$i$i7$i$i = 0, $vtable$i$i7$i$i46 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$__b>>2]|0;
 $tobool$i$i$i = ($0|0)==(0|0);
 do {
  if ($tobool$i$i$i) {
   $31 = 1;
  } else {
   $__ninp_$i$i$i$i = ((($0)) + 12|0);
   $1 = HEAP32[$__ninp_$i$i$i$i>>2]|0;
   $__einp_$i$i$i$i = ((($0)) + 16|0);
   $2 = HEAP32[$__einp_$i$i$i$i>>2]|0;
   $cmp$i$i$i$i = ($1|0)==($2|0);
   if ($cmp$i$i$i$i) {
    $vtable$i$i$i$i = HEAP32[$0>>2]|0;
    $vfn$i$i$i$i = ((($vtable$i$i$i$i)) + 36|0);
    $3 = HEAP32[$vfn$i$i$i$i>>2]|0;
    $call$i$i$i$i = (FUNCTION_TABLE_ii[$3 & 1023]($0)|0);
    $retval$0$i$i$i$i = $call$i$i$i$i;
   } else {
    $4 = HEAP32[$1>>2]|0;
    $call3$i$i$i$i = (__ZNSt3__211char_traitsIwE11to_int_typeEw($4)|0);
    $retval$0$i$i$i$i = $call3$i$i$i$i;
   }
   $call3$i$i$i = (__ZNSt3__211char_traitsIwE3eofEv()|0);
   $call4$i$i$i = (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($retval$0$i$i$i$i,$call3$i$i$i)|0);
   if ($call4$i$i$i) {
    HEAP32[$__b>>2] = 0;
    $31 = 1;
    break;
   } else {
    $$pre$i$i$i = HEAP32[$__b>>2]|0;
    $phitmp$i$i$i = ($$pre$i$i$i|0)==(0|0);
    $31 = $phitmp$i$i$i;
    break;
   }
  }
 } while(0);
 $5 = HEAP32[$__e>>2]|0;
 $tobool$i2$i$i = ($5|0)==(0|0);
 do {
  if ($tobool$i2$i$i) {
   label = 14;
  } else {
   $__ninp_$i$i3$i$i = ((($5)) + 12|0);
   $6 = HEAP32[$__ninp_$i$i3$i$i>>2]|0;
   $__einp_$i$i4$i$i = ((($5)) + 16|0);
   $7 = HEAP32[$__einp_$i$i4$i$i>>2]|0;
   $cmp$i$i5$i$i = ($6|0)==($7|0);
   if ($cmp$i$i5$i$i) {
    $vtable$i$i7$i$i = HEAP32[$5>>2]|0;
    $vfn$i$i8$i$i = ((($vtable$i$i7$i$i)) + 36|0);
    $8 = HEAP32[$vfn$i$i8$i$i>>2]|0;
    $call$i$i9$i$i = (FUNCTION_TABLE_ii[$8 & 1023]($5)|0);
    $retval$0$i$i13$i$i = $call$i$i9$i$i;
   } else {
    $9 = HEAP32[$6>>2]|0;
    $call3$i$i11$i$i = (__ZNSt3__211char_traitsIwE11to_int_typeEw($9)|0);
    $retval$0$i$i13$i$i = $call3$i$i11$i$i;
   }
   $call3$i14$i$i = (__ZNSt3__211char_traitsIwE3eofEv()|0);
   $call4$i15$i$i = (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($retval$0$i$i13$i$i,$call3$i14$i$i)|0);
   if ($call4$i15$i$i) {
    HEAP32[$__e>>2] = 0;
    label = 14;
    break;
   } else {
    if ($31) {
     $$pre$i17$i$i5664 = $5;
     label = 16;
     break;
    } else {
     $$sink2 = 6;
     label = 38;
     break;
    }
   }
  }
 } while(0);
 if ((label|0) == 14) {
  if ($31) {
   $$sink2 = 6;
   label = 38;
  } else {
   $$pre$i17$i$i5664 = 0;
   label = 16;
  }
 }
 L22: do {
  if ((label|0) == 16) {
   $10 = HEAP32[$__b>>2]|0;
   $__ninp_$i$i = ((($10)) + 12|0);
   $11 = HEAP32[$__ninp_$i$i>>2]|0;
   $__einp_$i$i = ((($10)) + 16|0);
   $12 = HEAP32[$__einp_$i$i>>2]|0;
   $cmp$i$i8 = ($11|0)==($12|0);
   if ($cmp$i$i8) {
    $vtable$i$i = HEAP32[$10>>2]|0;
    $vfn$i$i = ((($vtable$i$i)) + 36|0);
    $13 = HEAP32[$vfn$i$i>>2]|0;
    $call$i$i = (FUNCTION_TABLE_ii[$13 & 1023]($10)|0);
    $retval$0$i$i = $call$i$i;
   } else {
    $14 = HEAP32[$11>>2]|0;
    $call3$i$i = (__ZNSt3__211char_traitsIwE11to_int_typeEw($14)|0);
    $retval$0$i$i = $call3$i$i;
   }
   $vtable$i = HEAP32[$__ct>>2]|0;
   $vfn$i = ((($vtable$i)) + 52|0);
   $15 = HEAP32[$vfn$i>>2]|0;
   $call$i = (FUNCTION_TABLE_iiii[$15 & 1023]($__ct,$retval$0$i$i,0)|0);
   $cmp = ($call$i<<24>>24)==(37);
   if ($cmp) {
    $16 = HEAP32[$__b>>2]|0;
    $__ninp_$i$i10 = ((($16)) + 12|0);
    $17 = HEAP32[$__ninp_$i$i10>>2]|0;
    $__einp_$i$i11 = ((($16)) + 16|0);
    $18 = HEAP32[$__einp_$i$i11>>2]|0;
    $cmp$i$i12 = ($17|0)==($18|0);
    if ($cmp$i$i12) {
     $vtable$i$i13 = HEAP32[$16>>2]|0;
     $vfn$i$i14 = ((($vtable$i$i13)) + 40|0);
     $19 = HEAP32[$vfn$i$i14>>2]|0;
     (FUNCTION_TABLE_ii[$19 & 1023]($16)|0);
    } else {
     $incdec$ptr$i$i = ((($17)) + 4|0);
     HEAP32[$__ninp_$i$i10>>2] = $incdec$ptr$i$i;
     $20 = HEAP32[$17>>2]|0;
     (__ZNSt3__211char_traitsIwE11to_int_typeEw($20)|0);
    }
    $21 = HEAP32[$__b>>2]|0;
    $tobool$i$i$i20 = ($21|0)==(0|0);
    do {
     if ($tobool$i$i$i20) {
      $32 = 1;
     } else {
      $__ninp_$i$i$i$i21 = ((($21)) + 12|0);
      $22 = HEAP32[$__ninp_$i$i$i$i21>>2]|0;
      $__einp_$i$i$i$i22 = ((($21)) + 16|0);
      $23 = HEAP32[$__einp_$i$i$i$i22>>2]|0;
      $cmp$i$i$i$i23 = ($22|0)==($23|0);
      if ($cmp$i$i$i$i23) {
       $vtable$i$i$i$i25 = HEAP32[$21>>2]|0;
       $vfn$i$i$i$i26 = ((($vtable$i$i$i$i25)) + 36|0);
       $24 = HEAP32[$vfn$i$i$i$i26>>2]|0;
       $call$i$i$i$i27 = (FUNCTION_TABLE_ii[$24 & 1023]($21)|0);
       $retval$0$i$i$i$i31 = $call$i$i$i$i27;
      } else {
       $25 = HEAP32[$22>>2]|0;
       $call3$i$i$i$i29 = (__ZNSt3__211char_traitsIwE11to_int_typeEw($25)|0);
       $retval$0$i$i$i$i31 = $call3$i$i$i$i29;
      }
      $call3$i$i$i32 = (__ZNSt3__211char_traitsIwE3eofEv()|0);
      $call4$i$i$i33 = (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($retval$0$i$i$i$i31,$call3$i$i$i32)|0);
      if ($call4$i$i$i33) {
       HEAP32[$__b>>2] = 0;
       $32 = 1;
       break;
      } else {
       $$pre$i$i$i35 = HEAP32[$__b>>2]|0;
       $phitmp$i$i$i36 = ($$pre$i$i$i35|0)==(0|0);
       $32 = $phitmp$i$i$i36;
       break;
      }
     }
    } while(0);
    $tobool$i2$i$i40 = ($$pre$i17$i$i5664|0)==(0|0);
    do {
     if (!($tobool$i2$i$i40)) {
      $__ninp_$i$i3$i$i42 = ((($$pre$i17$i$i5664)) + 12|0);
      $26 = HEAP32[$__ninp_$i$i3$i$i42>>2]|0;
      $__einp_$i$i4$i$i43 = ((($$pre$i17$i$i5664)) + 16|0);
      $27 = HEAP32[$__einp_$i$i4$i$i43>>2]|0;
      $cmp$i$i5$i$i44 = ($26|0)==($27|0);
      if ($cmp$i$i5$i$i44) {
       $vtable$i$i7$i$i46 = HEAP32[$$pre$i17$i$i5664>>2]|0;
       $vfn$i$i8$i$i47 = ((($vtable$i$i7$i$i46)) + 36|0);
       $28 = HEAP32[$vfn$i$i8$i$i47>>2]|0;
       $call$i$i9$i$i48 = (FUNCTION_TABLE_ii[$28 & 1023]($$pre$i17$i$i5664)|0);
       $retval$0$i$i13$i$i52 = $call$i$i9$i$i48;
      } else {
       $29 = HEAP32[$26>>2]|0;
       $call3$i$i11$i$i50 = (__ZNSt3__211char_traitsIwE11to_int_typeEw($29)|0);
       $retval$0$i$i13$i$i52 = $call3$i$i11$i$i50;
      }
      $call3$i14$i$i53 = (__ZNSt3__211char_traitsIwE3eofEv()|0);
      $call4$i15$i$i54 = (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($retval$0$i$i13$i$i52,$call3$i14$i$i53)|0);
      if ($call4$i15$i$i54) {
       HEAP32[$__e>>2] = 0;
       break;
      } else {
       if ($32) {
        break L22;
       } else {
        $$sink2 = 2;
        label = 38;
        break L22;
       }
      }
     }
    } while(0);
    if ($32) {
     $$sink2 = 2;
     label = 38;
    }
   } else {
    $$sink2 = 4;
    label = 38;
   }
  }
 } while(0);
 if ((label|0) == 38) {
  $30 = HEAP32[$__err>>2]|0;
  $or9 = $30 | $$sink2;
  HEAP32[$__err>>2] = $or9;
 }
 return;
}
function __ZNSt3__220__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$__e,$__err,$__ct,$__n) {
 $__b = $__b|0;
 $__e = $__e|0;
 $__err = $__err|0;
 $__ct = $__ct|0;
 $__n = $__n|0;
 var $$pre$i$i$i = 0, $$pre$i$i$i121 = 0, $$pre$i$i$i49 = 0, $$pre$i17$i$i142 = 0, $$pre$i17$i$i70 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $7 = 0, $8 = 0, $9 = 0, $__einp_$i$i = 0, $__einp_$i$i$i$i = 0, $__einp_$i$i$i$i108 = 0, $__einp_$i$i$i$i36 = 0, $__einp_$i$i25 = 0, $__einp_$i$i4$i$i = 0, $__einp_$i$i4$i$i129 = 0, $__einp_$i$i4$i$i57 = 0, $__einp_$i$i77 = 0, $__einp_$i$i95 = 0, $__n$addr$0 = 0, $__n$addr$0$in = 0, $__ninp_$i$i = 0;
 var $__ninp_$i$i$i$i = 0, $__ninp_$i$i$i$i107 = 0, $__ninp_$i$i$i$i35 = 0, $__ninp_$i$i24 = 0, $__ninp_$i$i3$i$i = 0, $__ninp_$i$i3$i$i128 = 0, $__ninp_$i$i3$i$i56 = 0, $__ninp_$i$i76 = 0, $__ninp_$i$i94 = 0, $__r$0 = 0, $__r$0$in = 0, $add = 0, $call$i = 0, $call$i$i = 0, $call$i$i$i$i = 0, $call$i$i$i$i113 = 0, $call$i$i$i$i41 = 0, $call$i$i81 = 0, $call$i$i9$i$i = 0, $call$i$i9$i$i134 = 0;
 var $call$i$i9$i$i62 = 0, $call$i22 = 0, $call$i89 = 0, $call$i92 = 0, $call3$i$i = 0, $call3$i$i$i = 0, $call3$i$i$i$i = 0, $call3$i$i$i$i115 = 0, $call3$i$i$i$i43 = 0, $call3$i$i$i118 = 0, $call3$i$i$i46 = 0, $call3$i$i11$i$i = 0, $call3$i$i11$i$i136 = 0, $call3$i$i11$i$i64 = 0, $call3$i$i83 = 0, $call3$i14$i$i = 0, $call3$i14$i$i139 = 0, $call3$i14$i$i67 = 0, $call4$i$i$i = 0, $call4$i$i$i119 = 0;
 var $call4$i$i$i47 = 0, $call4$i15$i$i = 0, $call4$i15$i$i140 = 0, $call4$i15$i$i68 = 0, $cmp = 0, $cmp$i$i$i$i = 0, $cmp$i$i$i$i109 = 0, $cmp$i$i$i$i37 = 0, $cmp$i$i19 = 0, $cmp$i$i26 = 0, $cmp$i$i5$i$i = 0, $cmp$i$i5$i$i130 = 0, $cmp$i$i5$i$i58 = 0, $cmp$i$i78 = 0, $cmp$i$i96 = 0, $cmptmp$i$i74 = 0, $conv = 0, $conv14 = 0, $incdec$ptr$i$i = 0, $incdec$ptr$i$i101 = 0;
 var $mul = 0, $or = 0, $or20 = 0, $or4 = 0, $phitmp$i$i$i = 0, $phitmp$i$i$i122 = 0, $phitmp$i$i$i50 = 0, $phitmp$i18$i$i71 = 0, $retval$0$i$i = 0, $retval$0$i$i$i$i = 0, $retval$0$i$i$i$i117 = 0, $retval$0$i$i$i$i45 = 0, $retval$0$i$i13$i$i = 0, $retval$0$i$i13$i$i138 = 0, $retval$0$i$i13$i$i66 = 0, $retval$0$i$i85 = 0, $retval$2 = 0, $tobool$i$i$i = 0, $tobool$i$i$i106 = 0, $tobool$i$i$i34 = 0;
 var $tobool$i2$i$i = 0, $tobool$i2$i$i126 = 0, $tobool$i2$i$i54 = 0, $vfn$i = 0, $vfn$i$i = 0, $vfn$i$i$i$i = 0, $vfn$i$i$i$i112 = 0, $vfn$i$i$i$i40 = 0, $vfn$i$i28 = 0, $vfn$i$i8$i$i = 0, $vfn$i$i8$i$i133 = 0, $vfn$i$i8$i$i61 = 0, $vfn$i$i80 = 0, $vfn$i$i98 = 0, $vfn$i21 = 0, $vfn$i88 = 0, $vfn$i91 = 0, $vtable$i = 0, $vtable$i$i = 0, $vtable$i$i$i$i = 0;
 var $vtable$i$i$i$i111 = 0, $vtable$i$i$i$i39 = 0, $vtable$i$i27 = 0, $vtable$i$i7$i$i = 0, $vtable$i$i7$i$i132 = 0, $vtable$i$i7$i$i60 = 0, $vtable$i$i79 = 0, $vtable$i$i97 = 0, $vtable$i20 = 0, $vtable$i87 = 0, $vtable$i90 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$__b>>2]|0;
 $tobool$i$i$i = ($0|0)==(0|0);
 do {
  if ($tobool$i$i$i) {
   $58 = 1;
  } else {
   $__ninp_$i$i$i$i = ((($0)) + 12|0);
   $1 = HEAP32[$__ninp_$i$i$i$i>>2]|0;
   $__einp_$i$i$i$i = ((($0)) + 16|0);
   $2 = HEAP32[$__einp_$i$i$i$i>>2]|0;
   $cmp$i$i$i$i = ($1|0)==($2|0);
   if ($cmp$i$i$i$i) {
    $vtable$i$i$i$i = HEAP32[$0>>2]|0;
    $vfn$i$i$i$i = ((($vtable$i$i$i$i)) + 36|0);
    $3 = HEAP32[$vfn$i$i$i$i>>2]|0;
    $call$i$i$i$i = (FUNCTION_TABLE_ii[$3 & 1023]($0)|0);
    $retval$0$i$i$i$i = $call$i$i$i$i;
   } else {
    $4 = HEAP32[$1>>2]|0;
    $call3$i$i$i$i = (__ZNSt3__211char_traitsIwE11to_int_typeEw($4)|0);
    $retval$0$i$i$i$i = $call3$i$i$i$i;
   }
   $call3$i$i$i = (__ZNSt3__211char_traitsIwE3eofEv()|0);
   $call4$i$i$i = (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($retval$0$i$i$i$i,$call3$i$i$i)|0);
   if ($call4$i$i$i) {
    HEAP32[$__b>>2] = 0;
    $58 = 1;
    break;
   } else {
    $$pre$i$i$i = HEAP32[$__b>>2]|0;
    $phitmp$i$i$i = ($$pre$i$i$i|0)==(0|0);
    $58 = $phitmp$i$i$i;
    break;
   }
  }
 } while(0);
 $5 = HEAP32[$__e>>2]|0;
 $tobool$i2$i$i = ($5|0)==(0|0);
 do {
  if ($tobool$i2$i$i) {
   label = 14;
  } else {
   $__ninp_$i$i3$i$i = ((($5)) + 12|0);
   $6 = HEAP32[$__ninp_$i$i3$i$i>>2]|0;
   $__einp_$i$i4$i$i = ((($5)) + 16|0);
   $7 = HEAP32[$__einp_$i$i4$i$i>>2]|0;
   $cmp$i$i5$i$i = ($6|0)==($7|0);
   if ($cmp$i$i5$i$i) {
    $vtable$i$i7$i$i = HEAP32[$5>>2]|0;
    $vfn$i$i8$i$i = ((($vtable$i$i7$i$i)) + 36|0);
    $8 = HEAP32[$vfn$i$i8$i$i>>2]|0;
    $call$i$i9$i$i = (FUNCTION_TABLE_ii[$8 & 1023]($5)|0);
    $retval$0$i$i13$i$i = $call$i$i9$i$i;
   } else {
    $9 = HEAP32[$6>>2]|0;
    $call3$i$i11$i$i = (__ZNSt3__211char_traitsIwE11to_int_typeEw($9)|0);
    $retval$0$i$i13$i$i = $call3$i$i11$i$i;
   }
   $call3$i14$i$i = (__ZNSt3__211char_traitsIwE3eofEv()|0);
   $call4$i15$i$i = (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($retval$0$i$i13$i$i,$call3$i14$i$i)|0);
   if ($call4$i15$i$i) {
    HEAP32[$__e>>2] = 0;
    label = 14;
    break;
   } else {
    if ($58) {
     $59 = $5;
     label = 17;
     break;
    } else {
     label = 16;
     break;
    }
   }
  }
 } while(0);
 if ((label|0) == 14) {
  if ($58) {
   label = 16;
  } else {
   $59 = 0;
   label = 17;
  }
 }
 L22: do {
  if ((label|0) == 16) {
   $10 = HEAP32[$__err>>2]|0;
   $or = $10 | 6;
   HEAP32[$__err>>2] = $or;
   $retval$2 = 0;
  }
  else if ((label|0) == 17) {
   $11 = HEAP32[$__b>>2]|0;
   $__ninp_$i$i = ((($11)) + 12|0);
   $12 = HEAP32[$__ninp_$i$i>>2]|0;
   $__einp_$i$i = ((($11)) + 16|0);
   $13 = HEAP32[$__einp_$i$i>>2]|0;
   $cmp$i$i19 = ($12|0)==($13|0);
   if ($cmp$i$i19) {
    $vtable$i$i = HEAP32[$11>>2]|0;
    $vfn$i$i = ((($vtable$i$i)) + 36|0);
    $14 = HEAP32[$vfn$i$i>>2]|0;
    $call$i$i = (FUNCTION_TABLE_ii[$14 & 1023]($11)|0);
    $retval$0$i$i = $call$i$i;
   } else {
    $15 = HEAP32[$12>>2]|0;
    $call3$i$i = (__ZNSt3__211char_traitsIwE11to_int_typeEw($15)|0);
    $retval$0$i$i = $call3$i$i;
   }
   $vtable$i = HEAP32[$__ct>>2]|0;
   $vfn$i = ((($vtable$i)) + 12|0);
   $16 = HEAP32[$vfn$i>>2]|0;
   $call$i = (FUNCTION_TABLE_iiii[$16 & 1023]($__ct,2048,$retval$0$i$i)|0);
   if (!($call$i)) {
    $17 = HEAP32[$__err>>2]|0;
    $or4 = $17 | 4;
    HEAP32[$__err>>2] = $or4;
    $retval$2 = 0;
    break;
   }
   $vtable$i20 = HEAP32[$__ct>>2]|0;
   $vfn$i21 = ((($vtable$i20)) + 52|0);
   $18 = HEAP32[$vfn$i21>>2]|0;
   $call$i22 = (FUNCTION_TABLE_iiii[$18 & 1023]($__ct,$retval$0$i$i,0)|0);
   $conv = $call$i22 << 24 >> 24;
   $19 = HEAP32[$__b>>2]|0;
   $__ninp_$i$i24 = ((($19)) + 12|0);
   $20 = HEAP32[$__ninp_$i$i24>>2]|0;
   $__einp_$i$i25 = ((($19)) + 16|0);
   $21 = HEAP32[$__einp_$i$i25>>2]|0;
   $cmp$i$i26 = ($20|0)==($21|0);
   if ($cmp$i$i26) {
    $vtable$i$i27 = HEAP32[$19>>2]|0;
    $vfn$i$i28 = ((($vtable$i$i27)) + 40|0);
    $22 = HEAP32[$vfn$i$i28>>2]|0;
    (FUNCTION_TABLE_ii[$22 & 1023]($19)|0);
    $$pre$i17$i$i70 = $59;$29 = $59;$__n$addr$0$in = $__n;$__r$0$in = $conv;
   } else {
    $incdec$ptr$i$i = ((($20)) + 4|0);
    HEAP32[$__ninp_$i$i24>>2] = $incdec$ptr$i$i;
    $23 = HEAP32[$20>>2]|0;
    (__ZNSt3__211char_traitsIwE11to_int_typeEw($23)|0);
    $$pre$i17$i$i70 = $59;$29 = $59;$__n$addr$0$in = $__n;$__r$0$in = $conv;
   }
   while(1) {
    $__r$0 = (($__r$0$in) + -48)|0;
    $__n$addr$0 = (($__n$addr$0$in) + -1)|0;
    $24 = HEAP32[$__b>>2]|0;
    $tobool$i$i$i34 = ($24|0)==(0|0);
    do {
     if ($tobool$i$i$i34) {
      $34 = 1;
     } else {
      $__ninp_$i$i$i$i35 = ((($24)) + 12|0);
      $25 = HEAP32[$__ninp_$i$i$i$i35>>2]|0;
      $__einp_$i$i$i$i36 = ((($24)) + 16|0);
      $26 = HEAP32[$__einp_$i$i$i$i36>>2]|0;
      $cmp$i$i$i$i37 = ($25|0)==($26|0);
      if ($cmp$i$i$i$i37) {
       $vtable$i$i$i$i39 = HEAP32[$24>>2]|0;
       $vfn$i$i$i$i40 = ((($vtable$i$i$i$i39)) + 36|0);
       $27 = HEAP32[$vfn$i$i$i$i40>>2]|0;
       $call$i$i$i$i41 = (FUNCTION_TABLE_ii[$27 & 1023]($24)|0);
       $retval$0$i$i$i$i45 = $call$i$i$i$i41;
      } else {
       $28 = HEAP32[$25>>2]|0;
       $call3$i$i$i$i43 = (__ZNSt3__211char_traitsIwE11to_int_typeEw($28)|0);
       $retval$0$i$i$i$i45 = $call3$i$i$i$i43;
      }
      $call3$i$i$i46 = (__ZNSt3__211char_traitsIwE3eofEv()|0);
      $call4$i$i$i47 = (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($retval$0$i$i$i$i45,$call3$i$i$i46)|0);
      if ($call4$i$i$i47) {
       HEAP32[$__b>>2] = 0;
       $34 = 1;
       break;
      } else {
       $$pre$i$i$i49 = HEAP32[$__b>>2]|0;
       $phitmp$i$i$i50 = ($$pre$i$i$i49|0)==(0|0);
       $34 = $phitmp$i$i$i50;
       break;
      }
     }
    } while(0);
    $tobool$i2$i$i54 = ($29|0)==(0|0);
    do {
     if ($tobool$i2$i$i54) {
      $$pre$i17$i$i142 = $$pre$i17$i$i70;$35 = 1;$60 = 0;
     } else {
      $__ninp_$i$i3$i$i56 = ((($29)) + 12|0);
      $30 = HEAP32[$__ninp_$i$i3$i$i56>>2]|0;
      $__einp_$i$i4$i$i57 = ((($29)) + 16|0);
      $31 = HEAP32[$__einp_$i$i4$i$i57>>2]|0;
      $cmp$i$i5$i$i58 = ($30|0)==($31|0);
      if ($cmp$i$i5$i$i58) {
       $vtable$i$i7$i$i60 = HEAP32[$29>>2]|0;
       $vfn$i$i8$i$i61 = ((($vtable$i$i7$i$i60)) + 36|0);
       $32 = HEAP32[$vfn$i$i8$i$i61>>2]|0;
       $call$i$i9$i$i62 = (FUNCTION_TABLE_ii[$32 & 1023]($29)|0);
       $retval$0$i$i13$i$i66 = $call$i$i9$i$i62;
      } else {
       $33 = HEAP32[$30>>2]|0;
       $call3$i$i11$i$i64 = (__ZNSt3__211char_traitsIwE11to_int_typeEw($33)|0);
       $retval$0$i$i13$i$i66 = $call3$i$i11$i$i64;
      }
      $call3$i14$i$i67 = (__ZNSt3__211char_traitsIwE3eofEv()|0);
      $call4$i15$i$i68 = (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($retval$0$i$i13$i$i66,$call3$i14$i$i67)|0);
      if ($call4$i15$i$i68) {
       HEAP32[$__e>>2] = 0;
       $$pre$i17$i$i142 = 0;$35 = 1;$60 = 0;
       break;
      } else {
       $phitmp$i18$i$i71 = ($$pre$i17$i$i70|0)==(0|0);
       $$pre$i17$i$i142 = $$pre$i17$i$i70;$35 = $phitmp$i18$i$i71;$60 = $$pre$i17$i$i70;
       break;
      }
     }
    } while(0);
    $cmptmp$i$i74 = $34 ^ $35;
    $cmp = ($__n$addr$0$in|0)>(1);
    $36 = $cmp & $cmptmp$i$i74;
    $37 = HEAP32[$__b>>2]|0;
    if (!($36)) {
     break;
    }
    $__ninp_$i$i76 = ((($37)) + 12|0);
    $38 = HEAP32[$__ninp_$i$i76>>2]|0;
    $__einp_$i$i77 = ((($37)) + 16|0);
    $39 = HEAP32[$__einp_$i$i77>>2]|0;
    $cmp$i$i78 = ($38|0)==($39|0);
    if ($cmp$i$i78) {
     $vtable$i$i79 = HEAP32[$37>>2]|0;
     $vfn$i$i80 = ((($vtable$i$i79)) + 36|0);
     $40 = HEAP32[$vfn$i$i80>>2]|0;
     $call$i$i81 = (FUNCTION_TABLE_ii[$40 & 1023]($37)|0);
     $retval$0$i$i85 = $call$i$i81;
    } else {
     $41 = HEAP32[$38>>2]|0;
     $call3$i$i83 = (__ZNSt3__211char_traitsIwE11to_int_typeEw($41)|0);
     $retval$0$i$i85 = $call3$i$i83;
    }
    $vtable$i87 = HEAP32[$__ct>>2]|0;
    $vfn$i88 = ((($vtable$i87)) + 12|0);
    $42 = HEAP32[$vfn$i88>>2]|0;
    $call$i89 = (FUNCTION_TABLE_iiii[$42 & 1023]($__ct,2048,$retval$0$i$i85)|0);
    if (!($call$i89)) {
     $retval$2 = $__r$0;
     break L22;
    }
    $mul = ($__r$0*10)|0;
    $vtable$i90 = HEAP32[$__ct>>2]|0;
    $vfn$i91 = ((($vtable$i90)) + 52|0);
    $43 = HEAP32[$vfn$i91>>2]|0;
    $call$i92 = (FUNCTION_TABLE_iiii[$43 & 1023]($__ct,$retval$0$i$i85,0)|0);
    $conv14 = $call$i92 << 24 >> 24;
    $add = (($conv14) + ($mul))|0;
    $44 = HEAP32[$__b>>2]|0;
    $__ninp_$i$i94 = ((($44)) + 12|0);
    $45 = HEAP32[$__ninp_$i$i94>>2]|0;
    $__einp_$i$i95 = ((($44)) + 16|0);
    $46 = HEAP32[$__einp_$i$i95>>2]|0;
    $cmp$i$i96 = ($45|0)==($46|0);
    if ($cmp$i$i96) {
     $vtable$i$i97 = HEAP32[$44>>2]|0;
     $vfn$i$i98 = ((($vtable$i$i97)) + 40|0);
     $47 = HEAP32[$vfn$i$i98>>2]|0;
     (FUNCTION_TABLE_ii[$47 & 1023]($44)|0);
     $$pre$i17$i$i70 = $$pre$i17$i$i142;$29 = $60;$__n$addr$0$in = $__n$addr$0;$__r$0$in = $add;
     continue;
    } else {
     $incdec$ptr$i$i101 = ((($45)) + 4|0);
     HEAP32[$__ninp_$i$i94>>2] = $incdec$ptr$i$i101;
     $48 = HEAP32[$45>>2]|0;
     (__ZNSt3__211char_traitsIwE11to_int_typeEw($48)|0);
     $$pre$i17$i$i70 = $$pre$i17$i$i142;$29 = $60;$__n$addr$0$in = $__n$addr$0;$__r$0$in = $add;
     continue;
    }
   }
   $tobool$i$i$i106 = ($37|0)==(0|0);
   do {
    if ($tobool$i$i$i106) {
     $61 = 1;
    } else {
     $__ninp_$i$i$i$i107 = ((($37)) + 12|0);
     $49 = HEAP32[$__ninp_$i$i$i$i107>>2]|0;
     $__einp_$i$i$i$i108 = ((($37)) + 16|0);
     $50 = HEAP32[$__einp_$i$i$i$i108>>2]|0;
     $cmp$i$i$i$i109 = ($49|0)==($50|0);
     if ($cmp$i$i$i$i109) {
      $vtable$i$i$i$i111 = HEAP32[$37>>2]|0;
      $vfn$i$i$i$i112 = ((($vtable$i$i$i$i111)) + 36|0);
      $51 = HEAP32[$vfn$i$i$i$i112>>2]|0;
      $call$i$i$i$i113 = (FUNCTION_TABLE_ii[$51 & 1023]($37)|0);
      $retval$0$i$i$i$i117 = $call$i$i$i$i113;
     } else {
      $52 = HEAP32[$49>>2]|0;
      $call3$i$i$i$i115 = (__ZNSt3__211char_traitsIwE11to_int_typeEw($52)|0);
      $retval$0$i$i$i$i117 = $call3$i$i$i$i115;
     }
     $call3$i$i$i118 = (__ZNSt3__211char_traitsIwE3eofEv()|0);
     $call4$i$i$i119 = (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($retval$0$i$i$i$i117,$call3$i$i$i118)|0);
     if ($call4$i$i$i119) {
      HEAP32[$__b>>2] = 0;
      $61 = 1;
      break;
     } else {
      $$pre$i$i$i121 = HEAP32[$__b>>2]|0;
      $phitmp$i$i$i122 = ($$pre$i$i$i121|0)==(0|0);
      $61 = $phitmp$i$i$i122;
      break;
     }
    }
   } while(0);
   $tobool$i2$i$i126 = ($$pre$i17$i$i142|0)==(0|0);
   do {
    if ($tobool$i2$i$i126) {
     label = 60;
    } else {
     $__ninp_$i$i3$i$i128 = ((($$pre$i17$i$i142)) + 12|0);
     $53 = HEAP32[$__ninp_$i$i3$i$i128>>2]|0;
     $__einp_$i$i4$i$i129 = ((($$pre$i17$i$i142)) + 16|0);
     $54 = HEAP32[$__einp_$i$i4$i$i129>>2]|0;
     $cmp$i$i5$i$i130 = ($53|0)==($54|0);
     if ($cmp$i$i5$i$i130) {
      $vtable$i$i7$i$i132 = HEAP32[$$pre$i17$i$i142>>2]|0;
      $vfn$i$i8$i$i133 = ((($vtable$i$i7$i$i132)) + 36|0);
      $55 = HEAP32[$vfn$i$i8$i$i133>>2]|0;
      $call$i$i9$i$i134 = (FUNCTION_TABLE_ii[$55 & 1023]($$pre$i17$i$i142)|0);
      $retval$0$i$i13$i$i138 = $call$i$i9$i$i134;
     } else {
      $56 = HEAP32[$53>>2]|0;
      $call3$i$i11$i$i136 = (__ZNSt3__211char_traitsIwE11to_int_typeEw($56)|0);
      $retval$0$i$i13$i$i138 = $call3$i$i11$i$i136;
     }
     $call3$i14$i$i139 = (__ZNSt3__211char_traitsIwE3eofEv()|0);
     $call4$i15$i$i140 = (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($retval$0$i$i13$i$i138,$call3$i14$i$i139)|0);
     if ($call4$i15$i$i140) {
      HEAP32[$__e>>2] = 0;
      label = 60;
      break;
     } else {
      if ($61) {
       $retval$2 = $__r$0;
       break L22;
      } else {
       break;
      }
     }
    }
   } while(0);
   if ((label|0) == 60) {
    if (!($61)) {
     $retval$2 = $__r$0;
     break;
    }
   }
   $57 = HEAP32[$__err>>2]|0;
   $or20 = $57 | 2;
   HEAP32[$__err>>2] = $or20;
   $retval$2 = $__r$0;
  }
 } while(0);
 return ($retval$2|0);
}
function __ZNSt3__28time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + 8|0);
 __ZNSt3__210__time_putD2Ev($0);
 __ZNSt3__26locale5facetD2Ev($this);
 return;
}
function __ZNSt3__28time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + 8|0);
 __ZNSt3__210__time_putD2Ev($0);
 __ZNSt3__26locale5facetD2Ev($this);
 __ZdlPv($this);
 return;
}
function __ZNKSt3__28time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcPK2tmcc($this,$__s,$0,$1,$__tm,$__fmt,$__mod) {
 $this = $this|0;
 $__s = $__s|0;
 $0 = $0|0;
 $1 = $1|0;
 $__tm = $__tm|0;
 $__fmt = $__fmt|0;
 $__mod = $__mod|0;
 var $$agg$tmp1$sroa$0$0$i = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $__eout_$i$i$i$i = 0, $__first$addr$0$i$i = 0, $__nar = 0, $__ne = 0, $__nout_$i$i$i$i = 0, $add$ptr = 0, $add$ptr3 = 0, $agg$tmp1$sroa$0$0$i = 0, $agg$tmp1$sroa$0$1$i = 0, $call$i$i$i$i = 0, $call2$i$i$i$i = 0, $call3$i$i$i = 0, $call4$i$i$i = 0;
 var $call4$i$i$i$i = 0, $cmp$i$i = 0, $cmp$i$i$i$i = 0, $incdec$ptr$i$i = 0, $incdec$ptr$i$i$i$i = 0, $retval$0$i$i$i$i = 0, $tobool$i$i$i = 0, $vfn$i$i$i$i = 0, $vtable$i$i$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(112|0);
 $__nar = sp + 4|0;
 $__ne = sp;
 $add$ptr = ((($__nar)) + 100|0);
 HEAP32[$__ne>>2] = $add$ptr;
 $add$ptr3 = ((($this)) + 8|0);
 __ZNKSt3__210__time_put8__do_putEPcRS1_PK2tmcc($add$ptr3,$__nar,$__ne,$__tm,$__fmt,$__mod);
 $2 = HEAP32[$__ne>>2]|0;
 $3 = HEAP32[$__s>>2]|0;
 $__first$addr$0$i$i = $__nar;$agg$tmp1$sroa$0$0$i = $3;
 while(1) {
  $cmp$i$i = ($__first$addr$0$i$i|0)==($2|0);
  if ($cmp$i$i) {
   break;
  }
  $4 = HEAP8[$__first$addr$0$i$i>>0]|0;
  $tobool$i$i$i = ($agg$tmp1$sroa$0$0$i|0)==(0|0);
  if ($tobool$i$i$i) {
   $agg$tmp1$sroa$0$1$i = 0;
  } else {
   $__nout_$i$i$i$i = ((($agg$tmp1$sroa$0$0$i)) + 24|0);
   $5 = HEAP32[$__nout_$i$i$i$i>>2]|0;
   $__eout_$i$i$i$i = ((($agg$tmp1$sroa$0$0$i)) + 28|0);
   $6 = HEAP32[$__eout_$i$i$i$i>>2]|0;
   $cmp$i$i$i$i = ($5|0)==($6|0);
   if ($cmp$i$i$i$i) {
    $vtable$i$i$i$i = HEAP32[$agg$tmp1$sroa$0$0$i>>2]|0;
    $vfn$i$i$i$i = ((($vtable$i$i$i$i)) + 52|0);
    $7 = HEAP32[$vfn$i$i$i$i>>2]|0;
    $call$i$i$i$i = (__ZNSt3__211char_traitsIcE11to_int_typeEc($4)|0);
    $call2$i$i$i$i = (FUNCTION_TABLE_iii[$7 & 511]($agg$tmp1$sroa$0$0$i,$call$i$i$i$i)|0);
    $retval$0$i$i$i$i = $call2$i$i$i$i;
   } else {
    $incdec$ptr$i$i$i$i = ((($5)) + 1|0);
    HEAP32[$__nout_$i$i$i$i>>2] = $incdec$ptr$i$i$i$i;
    HEAP8[$5>>0] = $4;
    $call4$i$i$i$i = (__ZNSt3__211char_traitsIcE11to_int_typeEc($4)|0);
    $retval$0$i$i$i$i = $call4$i$i$i$i;
   }
   $call3$i$i$i = (__ZNSt3__211char_traitsIcE3eofEv()|0);
   $call4$i$i$i = (__ZNSt3__211char_traitsIcE11eq_int_typeEii($retval$0$i$i$i$i,$call3$i$i$i)|0);
   $$agg$tmp1$sroa$0$0$i = $call4$i$i$i ? 0 : $agg$tmp1$sroa$0$0$i;
   $agg$tmp1$sroa$0$1$i = $$agg$tmp1$sroa$0$0$i;
  }
  $incdec$ptr$i$i = ((($__first$addr$0$i$i)) + 1|0);
  $__first$addr$0$i$i = $incdec$ptr$i$i;$agg$tmp1$sroa$0$0$i = $agg$tmp1$sroa$0$1$i;
 }
 STACKTOP = sp;return ($agg$tmp1$sroa$0$0$i|0);
}
function __ZNKSt3__210__time_put8__do_putEPcRS1_PK2tmcc($this,$__nb,$__ne,$__tm,$__fmt,$__mod) {
 $this = $this|0;
 $__nb = $__nb|0;
 $__ne = $__ne|0;
 $__tm = $__tm|0;
 $__fmt = $__fmt|0;
 $__mod = $__mod|0;
 var $0 = 0, $1 = 0, $add$ptr = 0, $arrayinit$element = 0, $arrayinit$element2 = 0, $arrayinit$element3 = 0, $call = 0, $call5 = 0, $cmp = 0, $fmt = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $fmt = sp;
 HEAP8[$fmt>>0] = 37;
 $arrayinit$element = ((($fmt)) + 1|0);
 HEAP8[$arrayinit$element>>0] = $__fmt;
 $arrayinit$element2 = ((($fmt)) + 2|0);
 HEAP8[$arrayinit$element2>>0] = $__mod;
 $arrayinit$element3 = ((($fmt)) + 3|0);
 HEAP8[$arrayinit$element3>>0] = 0;
 $cmp = ($__mod<<24>>24)==(0);
 if (!($cmp)) {
  HEAP8[$arrayinit$element>>0] = $__mod;
  HEAP8[$arrayinit$element2>>0] = $__fmt;
 }
 $0 = HEAP32[$__ne>>2]|0;
 $call = (__ZNSt3__212_GLOBAL__N_17countofIcEEjPKT_S4_($__nb,$0)|0);
 $1 = HEAP32[$this>>2]|0;
 $call5 = (_strftime_l(($__nb|0),($call|0),($fmt|0),($__tm|0),($1|0))|0);
 $add$ptr = (($__nb) + ($call5)|0);
 HEAP32[$__ne>>2] = $add$ptr;
 STACKTOP = sp;return;
}
function __ZNSt3__212_GLOBAL__N_17countofIcEEjPKT_S4_($begin,$end) {
 $begin = $begin|0;
 $end = $end|0;
 var $sub$ptr$lhs$cast = 0, $sub$ptr$rhs$cast = 0, $sub$ptr$sub = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $sub$ptr$lhs$cast = $end;
 $sub$ptr$rhs$cast = $begin;
 $sub$ptr$sub = (($sub$ptr$lhs$cast) - ($sub$ptr$rhs$cast))|0;
 return ($sub$ptr$sub|0);
}
function __ZNSt3__210__time_putD2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $call = 0, $cmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$this>>2]|0;
 __THREW__ = 0;
 $call = (invoke_i(392)|0);
 $1 = __THREW__; __THREW__ = 0;
 $2 = $1&1;
 do {
  if (!($2)) {
   $cmp = ($0|0)==($call|0);
   if (!($cmp)) {
    $3 = HEAP32[$this>>2]|0;
    __THREW__ = 0;
    invoke_vi(438,($3|0));
    $4 = __THREW__; __THREW__ = 0;
    $5 = $4&1;
    if ($5) {
     break;
    }
   }
   return;
  }
 } while(0);
 $6 = ___cxa_find_matching_catch_3(0|0)|0;
 $7 = tempRet0;
 ___clang_call_terminate($6);
 // unreachable;
}
function __ZNSt3__28time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + 8|0);
 __ZNSt3__210__time_putD2Ev($0);
 __ZNSt3__26locale5facetD2Ev($this);
 return;
}
function __ZNSt3__28time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + 8|0);
 __ZNSt3__210__time_putD2Ev($0);
 __ZNSt3__26locale5facetD2Ev($this);
 __ZdlPv($this);
 return;
}
function __ZNKSt3__28time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwPK2tmcc($this,$__s,$0,$1,$__tm,$__fmt,$__mod) {
 $this = $this|0;
 $__s = $__s|0;
 $0 = $0|0;
 $1 = $1|0;
 $__tm = $__tm|0;
 $__fmt = $__fmt|0;
 $__mod = $__mod|0;
 var $$agg$tmp1$sroa$0$0$i = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $__eout_$i$i$i$i = 0, $__first$addr$0$i$i = 0, $__nar = 0, $__ne = 0, $__nout_$i$i$i$i = 0, $add$ptr = 0, $add$ptr3 = 0, $agg$tmp1$sroa$0$0$i = 0, $agg$tmp1$sroa$0$1$i = 0, $call$i$i$i$i = 0, $call2$i$i$i$i = 0, $call3$i$i$i = 0, $call4$i$i$i = 0;
 var $call4$i$i$i$i = 0, $cmp$i$i = 0, $cmp$i$i$i$i = 0, $incdec$ptr$i$i = 0, $incdec$ptr$i$i$i$i = 0, $retval$0$i$i$i$i = 0, $tobool$i$i$i = 0, $vfn$i$i$i$i = 0, $vtable$i$i$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 416|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(416|0);
 $__nar = sp + 8|0;
 $__ne = sp;
 $add$ptr = ((($__nar)) + 400|0);
 HEAP32[$__ne>>2] = $add$ptr;
 $add$ptr3 = ((($this)) + 8|0);
 __ZNKSt3__210__time_put8__do_putEPwRS1_PK2tmcc($add$ptr3,$__nar,$__ne,$__tm,$__fmt,$__mod);
 $2 = HEAP32[$__ne>>2]|0;
 $3 = HEAP32[$__s>>2]|0;
 $__first$addr$0$i$i = $__nar;$agg$tmp1$sroa$0$0$i = $3;
 while(1) {
  $cmp$i$i = ($__first$addr$0$i$i|0)==($2|0);
  if ($cmp$i$i) {
   break;
  }
  $4 = HEAP32[$__first$addr$0$i$i>>2]|0;
  $tobool$i$i$i = ($agg$tmp1$sroa$0$0$i|0)==(0|0);
  if ($tobool$i$i$i) {
   $agg$tmp1$sroa$0$1$i = 0;
  } else {
   $__nout_$i$i$i$i = ((($agg$tmp1$sroa$0$0$i)) + 24|0);
   $5 = HEAP32[$__nout_$i$i$i$i>>2]|0;
   $__eout_$i$i$i$i = ((($agg$tmp1$sroa$0$0$i)) + 28|0);
   $6 = HEAP32[$__eout_$i$i$i$i>>2]|0;
   $cmp$i$i$i$i = ($5|0)==($6|0);
   if ($cmp$i$i$i$i) {
    $vtable$i$i$i$i = HEAP32[$agg$tmp1$sroa$0$0$i>>2]|0;
    $vfn$i$i$i$i = ((($vtable$i$i$i$i)) + 52|0);
    $7 = HEAP32[$vfn$i$i$i$i>>2]|0;
    $call$i$i$i$i = (__ZNSt3__211char_traitsIwE11to_int_typeEw($4)|0);
    $call2$i$i$i$i = (FUNCTION_TABLE_iii[$7 & 511]($agg$tmp1$sroa$0$0$i,$call$i$i$i$i)|0);
    $retval$0$i$i$i$i = $call2$i$i$i$i;
   } else {
    $incdec$ptr$i$i$i$i = ((($5)) + 4|0);
    HEAP32[$__nout_$i$i$i$i>>2] = $incdec$ptr$i$i$i$i;
    HEAP32[$5>>2] = $4;
    $call4$i$i$i$i = (__ZNSt3__211char_traitsIwE11to_int_typeEw($4)|0);
    $retval$0$i$i$i$i = $call4$i$i$i$i;
   }
   $call3$i$i$i = (__ZNSt3__211char_traitsIwE3eofEv()|0);
   $call4$i$i$i = (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($retval$0$i$i$i$i,$call3$i$i$i)|0);
   $$agg$tmp1$sroa$0$0$i = $call4$i$i$i ? 0 : $agg$tmp1$sroa$0$0$i;
   $agg$tmp1$sroa$0$1$i = $$agg$tmp1$sroa$0$0$i;
  }
  $incdec$ptr$i$i = ((($__first$addr$0$i$i)) + 4|0);
  $__first$addr$0$i$i = $incdec$ptr$i$i;$agg$tmp1$sroa$0$0$i = $agg$tmp1$sroa$0$1$i;
 }
 STACKTOP = sp;return ($agg$tmp1$sroa$0$0$i|0);
}
function __ZNKSt3__210__time_put8__do_putEPwRS1_PK2tmcc($this,$__wb,$__we,$__tm,$__fmt,$__mod) {
 $this = $this|0;
 $__wb = $__wb|0;
 $__we = $__we|0;
 $__tm = $__tm|0;
 $__fmt = $__fmt|0;
 $__mod = $__mod|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__nar = 0, $__nb = 0;
 var $__ne = 0, $add$ptr = 0, $add$ptr5 = 0, $call = 0, $call$i = 0, $call1$i = 0, $cmp = 0, $mb = 0, $tobool$i$i$i = 0, $tobool$i$i2$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(128|0);
 $__nar = sp + 16|0;
 $__ne = sp + 12|0;
 $mb = sp;
 $__nb = sp + 8|0;
 $add$ptr = ((($__nar)) + 100|0);
 HEAP32[$__ne>>2] = $add$ptr;
 __ZNKSt3__210__time_put8__do_putEPcRS1_PK2tmcc($this,$__nar,$__ne,$__tm,$__fmt,$__mod);
 $0 = $mb;
 $1 = $0;
 HEAP32[$1>>2] = 0;
 $2 = (($0) + 4)|0;
 $3 = $2;
 HEAP32[$3>>2] = 0;
 HEAP32[$__nb>>2] = $__nar;
 $4 = HEAP32[$__we>>2]|0;
 $call = (__ZNSt3__212_GLOBAL__N_17countofIwEEjPKT_S4_($__wb,$4)|0);
 $5 = HEAP32[$this>>2]|0;
 $call$i = (___uselocale($5)|0);
 __THREW__ = 0;
 $call1$i = (invoke_iiiii(439,($__wb|0),($__nb|0),($call|0),($mb|0))|0);
 $6 = __THREW__; __THREW__ = 0;
 $7 = $6&1;
 if ($7) {
  $12 = ___cxa_find_matching_catch_2()|0;
  $13 = tempRet0;
  $tobool$i$i$i = ($call$i|0)==(0|0);
  if (!($tobool$i$i$i)) {
   __THREW__ = 0;
   (invoke_ii(395,($call$i|0))|0);
   $14 = __THREW__; __THREW__ = 0;
   $15 = $14&1;
   if ($15) {
    $16 = ___cxa_find_matching_catch_3(0|0)|0;
    $17 = tempRet0;
    ___clang_call_terminate($16);
    // unreachable;
   }
  }
  ___resumeException($12|0);
  // unreachable;
 }
 $tobool$i$i2$i = ($call$i|0)==(0|0);
 if (!($tobool$i$i2$i)) {
  __THREW__ = 0;
  (invoke_ii(395,($call$i|0))|0);
  $8 = __THREW__; __THREW__ = 0;
  $9 = $8&1;
  if ($9) {
   $10 = ___cxa_find_matching_catch_3(0|0)|0;
   $11 = tempRet0;
   ___clang_call_terminate($10);
   // unreachable;
  }
 }
 $cmp = ($call1$i|0)==(-1);
 if ($cmp) {
  __ZNSt3__221__throw_runtime_errorEPKc(16792);
  // unreachable;
 } else {
  $add$ptr5 = (($__wb) + ($call1$i<<2)|0);
  HEAP32[$__we>>2] = $add$ptr5;
  STACKTOP = sp;return;
 }
}
function __ZNSt3__212_GLOBAL__N_17countofIwEEjPKT_S4_($begin,$end) {
 $begin = $begin|0;
 $end = $end|0;
 var $sub$ptr$div = 0, $sub$ptr$lhs$cast = 0, $sub$ptr$rhs$cast = 0, $sub$ptr$sub = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $sub$ptr$lhs$cast = $end;
 $sub$ptr$rhs$cast = $begin;
 $sub$ptr$sub = (($sub$ptr$lhs$cast) - ($sub$ptr$rhs$cast))|0;
 $sub$ptr$div = $sub$ptr$sub >> 2;
 return ($sub$ptr$div|0);
}
function __ZNSt3__221__throw_runtime_errorEPKc($msg) {
 $msg = $msg|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $exception = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $exception = (___cxa_allocate_exception(8)|0);
 __THREW__ = 0;
 invoke_vii(440,($exception|0),($msg|0));
 $0 = __THREW__; __THREW__ = 0;
 $1 = $0&1;
 if ($1) {
  $2 = ___cxa_find_matching_catch_2()|0;
  $3 = tempRet0;
  ___cxa_free_exception(($exception|0));
  ___resumeException($2|0);
  // unreachable;
 } else {
  ___cxa_throw(($exception|0),(1920|0),(324|0));
  // unreachable;
 }
}
function __ZNSt3__210moneypunctIcLb0EED2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__26locale5facetD2Ev($this);
 return;
}
function __ZNSt3__210moneypunctIcLb0EED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__26locale5facetD2Ev($this);
 __ZdlPv($this);
 return;
}
function __ZNKSt3__210moneypunctIcLb0EE16do_decimal_pointEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 127;
}
function __ZNKSt3__210moneypunctIcLb0EE16do_thousands_sepEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 127;
}
function __ZNKSt3__210moneypunctIcLb0EE11do_groupingEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var $__i$0$i$i = 0, $arrayidx$i$i = 0, $exitcond$i$i = 0, $inc$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 ;HEAP32[$agg$result>>2]=0|0;HEAP32[$agg$result+4>>2]=0|0;HEAP32[$agg$result+8>>2]=0|0;
 $__i$0$i$i = 0;
 while(1) {
  $exitcond$i$i = ($__i$0$i$i|0)==(3);
  if ($exitcond$i$i) {
   break;
  }
  $arrayidx$i$i = (($agg$result) + ($__i$0$i$i<<2)|0);
  HEAP32[$arrayidx$i$i>>2] = 0;
  $inc$i$i = (($__i$0$i$i) + 1)|0;
  $__i$0$i$i = $inc$i$i;
 }
 return;
}
function __ZNKSt3__210moneypunctIcLb0EE14do_curr_symbolEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var $__i$0$i$i = 0, $arrayidx$i$i = 0, $exitcond$i$i = 0, $inc$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 ;HEAP32[$agg$result>>2]=0|0;HEAP32[$agg$result+4>>2]=0|0;HEAP32[$agg$result+8>>2]=0|0;
 $__i$0$i$i = 0;
 while(1) {
  $exitcond$i$i = ($__i$0$i$i|0)==(3);
  if ($exitcond$i$i) {
   break;
  }
  $arrayidx$i$i = (($agg$result) + ($__i$0$i$i<<2)|0);
  HEAP32[$arrayidx$i$i>>2] = 0;
  $inc$i$i = (($__i$0$i$i) + 1)|0;
  $__i$0$i$i = $inc$i$i;
 }
 return;
}
function __ZNKSt3__210moneypunctIcLb0EE16do_positive_signEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var $__i$0$i$i = 0, $arrayidx$i$i = 0, $exitcond$i$i = 0, $inc$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 ;HEAP32[$agg$result>>2]=0|0;HEAP32[$agg$result+4>>2]=0|0;HEAP32[$agg$result+8>>2]=0|0;
 $__i$0$i$i = 0;
 while(1) {
  $exitcond$i$i = ($__i$0$i$i|0)==(3);
  if ($exitcond$i$i) {
   break;
  }
  $arrayidx$i$i = (($agg$result) + ($__i$0$i$i<<2)|0);
  HEAP32[$arrayidx$i$i>>2] = 0;
  $inc$i$i = (($__i$0$i$i) + 1)|0;
  $__i$0$i$i = $inc$i$i;
 }
 return;
}
function __ZNKSt3__210moneypunctIcLb0EE16do_negative_signEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 ;HEAP32[$agg$result>>2]=0|0;HEAP32[$agg$result+4>>2]=0|0;HEAP32[$agg$result+8>>2]=0|0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEjc($agg$result,1,45);
 return;
}
function __ZNKSt3__210moneypunctIcLb0EE14do_frac_digitsEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 0;
}
function __ZNKSt3__210moneypunctIcLb0EE13do_pos_formatEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP8[$agg$result>>0]=67109634&255;HEAP8[$agg$result+1>>0]=(67109634>>8)&255;HEAP8[$agg$result+2>>0]=(67109634>>16)&255;HEAP8[$agg$result+3>>0]=67109634>>24;
 return;
}
function __ZNKSt3__210moneypunctIcLb0EE13do_neg_formatEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP8[$agg$result>>0]=67109634&255;HEAP8[$agg$result+1>>0]=(67109634>>8)&255;HEAP8[$agg$result+2>>0]=(67109634>>16)&255;HEAP8[$agg$result+3>>0]=67109634>>24;
 return;
}
function __ZNSt3__210moneypunctIcLb1EED2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__26locale5facetD2Ev($this);
 return;
}
function __ZNSt3__210moneypunctIcLb1EED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__26locale5facetD2Ev($this);
 __ZdlPv($this);
 return;
}
function __ZNKSt3__210moneypunctIcLb1EE16do_decimal_pointEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 127;
}
function __ZNKSt3__210moneypunctIcLb1EE16do_thousands_sepEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 127;
}
function __ZNKSt3__210moneypunctIcLb1EE11do_groupingEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var $__i$0$i$i = 0, $arrayidx$i$i = 0, $exitcond$i$i = 0, $inc$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 ;HEAP32[$agg$result>>2]=0|0;HEAP32[$agg$result+4>>2]=0|0;HEAP32[$agg$result+8>>2]=0|0;
 $__i$0$i$i = 0;
 while(1) {
  $exitcond$i$i = ($__i$0$i$i|0)==(3);
  if ($exitcond$i$i) {
   break;
  }
  $arrayidx$i$i = (($agg$result) + ($__i$0$i$i<<2)|0);
  HEAP32[$arrayidx$i$i>>2] = 0;
  $inc$i$i = (($__i$0$i$i) + 1)|0;
  $__i$0$i$i = $inc$i$i;
 }
 return;
}
function __ZNKSt3__210moneypunctIcLb1EE14do_curr_symbolEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var $__i$0$i$i = 0, $arrayidx$i$i = 0, $exitcond$i$i = 0, $inc$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 ;HEAP32[$agg$result>>2]=0|0;HEAP32[$agg$result+4>>2]=0|0;HEAP32[$agg$result+8>>2]=0|0;
 $__i$0$i$i = 0;
 while(1) {
  $exitcond$i$i = ($__i$0$i$i|0)==(3);
  if ($exitcond$i$i) {
   break;
  }
  $arrayidx$i$i = (($agg$result) + ($__i$0$i$i<<2)|0);
  HEAP32[$arrayidx$i$i>>2] = 0;
  $inc$i$i = (($__i$0$i$i) + 1)|0;
  $__i$0$i$i = $inc$i$i;
 }
 return;
}
function __ZNKSt3__210moneypunctIcLb1EE16do_positive_signEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var $__i$0$i$i = 0, $arrayidx$i$i = 0, $exitcond$i$i = 0, $inc$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 ;HEAP32[$agg$result>>2]=0|0;HEAP32[$agg$result+4>>2]=0|0;HEAP32[$agg$result+8>>2]=0|0;
 $__i$0$i$i = 0;
 while(1) {
  $exitcond$i$i = ($__i$0$i$i|0)==(3);
  if ($exitcond$i$i) {
   break;
  }
  $arrayidx$i$i = (($agg$result) + ($__i$0$i$i<<2)|0);
  HEAP32[$arrayidx$i$i>>2] = 0;
  $inc$i$i = (($__i$0$i$i) + 1)|0;
  $__i$0$i$i = $inc$i$i;
 }
 return;
}
function __ZNKSt3__210moneypunctIcLb1EE16do_negative_signEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 ;HEAP32[$agg$result>>2]=0|0;HEAP32[$agg$result+4>>2]=0|0;HEAP32[$agg$result+8>>2]=0|0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEjc($agg$result,1,45);
 return;
}
function __ZNKSt3__210moneypunctIcLb1EE14do_frac_digitsEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 0;
}
function __ZNKSt3__210moneypunctIcLb1EE13do_pos_formatEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP8[$agg$result>>0]=67109634&255;HEAP8[$agg$result+1>>0]=(67109634>>8)&255;HEAP8[$agg$result+2>>0]=(67109634>>16)&255;HEAP8[$agg$result+3>>0]=67109634>>24;
 return;
}
function __ZNKSt3__210moneypunctIcLb1EE13do_neg_formatEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP8[$agg$result>>0]=67109634&255;HEAP8[$agg$result+1>>0]=(67109634>>8)&255;HEAP8[$agg$result+2>>0]=(67109634>>16)&255;HEAP8[$agg$result+3>>0]=67109634>>24;
 return;
}
function __ZNSt3__210moneypunctIwLb0EED2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__26locale5facetD2Ev($this);
 return;
}
function __ZNSt3__210moneypunctIwLb0EED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__26locale5facetD2Ev($this);
 __ZdlPv($this);
 return;
}
function __ZNKSt3__210moneypunctIwLb0EE16do_decimal_pointEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 2147483647;
}
function __ZNKSt3__210moneypunctIwLb0EE16do_thousands_sepEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 2147483647;
}
function __ZNKSt3__210moneypunctIwLb0EE11do_groupingEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var $__i$0$i$i = 0, $arrayidx$i$i = 0, $exitcond$i$i = 0, $inc$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 ;HEAP32[$agg$result>>2]=0|0;HEAP32[$agg$result+4>>2]=0|0;HEAP32[$agg$result+8>>2]=0|0;
 $__i$0$i$i = 0;
 while(1) {
  $exitcond$i$i = ($__i$0$i$i|0)==(3);
  if ($exitcond$i$i) {
   break;
  }
  $arrayidx$i$i = (($agg$result) + ($__i$0$i$i<<2)|0);
  HEAP32[$arrayidx$i$i>>2] = 0;
  $inc$i$i = (($__i$0$i$i) + 1)|0;
  $__i$0$i$i = $inc$i$i;
 }
 return;
}
function __ZNKSt3__210moneypunctIwLb0EE14do_curr_symbolEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var $__i$0$i$i = 0, $arrayidx$i$i = 0, $exitcond$i$i = 0, $inc$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 ;HEAP32[$agg$result>>2]=0|0;HEAP32[$agg$result+4>>2]=0|0;HEAP32[$agg$result+8>>2]=0|0;
 $__i$0$i$i = 0;
 while(1) {
  $exitcond$i$i = ($__i$0$i$i|0)==(3);
  if ($exitcond$i$i) {
   break;
  }
  $arrayidx$i$i = (($agg$result) + ($__i$0$i$i<<2)|0);
  HEAP32[$arrayidx$i$i>>2] = 0;
  $inc$i$i = (($__i$0$i$i) + 1)|0;
  $__i$0$i$i = $inc$i$i;
 }
 return;
}
function __ZNKSt3__210moneypunctIwLb0EE16do_positive_signEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var $__i$0$i$i = 0, $arrayidx$i$i = 0, $exitcond$i$i = 0, $inc$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 ;HEAP32[$agg$result>>2]=0|0;HEAP32[$agg$result+4>>2]=0|0;HEAP32[$agg$result+8>>2]=0|0;
 $__i$0$i$i = 0;
 while(1) {
  $exitcond$i$i = ($__i$0$i$i|0)==(3);
  if ($exitcond$i$i) {
   break;
  }
  $arrayidx$i$i = (($agg$result) + ($__i$0$i$i<<2)|0);
  HEAP32[$arrayidx$i$i>>2] = 0;
  $inc$i$i = (($__i$0$i$i) + 1)|0;
  $__i$0$i$i = $inc$i$i;
 }
 return;
}
function __ZNKSt3__210moneypunctIwLb0EE16do_negative_signEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 ;HEAP32[$agg$result>>2]=0|0;HEAP32[$agg$result+4>>2]=0|0;HEAP32[$agg$result+8>>2]=0|0;
 __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initEjw($agg$result,1,45);
 return;
}
function __ZNKSt3__210moneypunctIwLb0EE14do_frac_digitsEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 0;
}
function __ZNKSt3__210moneypunctIwLb0EE13do_pos_formatEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP8[$agg$result>>0]=67109634&255;HEAP8[$agg$result+1>>0]=(67109634>>8)&255;HEAP8[$agg$result+2>>0]=(67109634>>16)&255;HEAP8[$agg$result+3>>0]=67109634>>24;
 return;
}
function __ZNKSt3__210moneypunctIwLb0EE13do_neg_formatEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP8[$agg$result>>0]=67109634&255;HEAP8[$agg$result+1>>0]=(67109634>>8)&255;HEAP8[$agg$result+2>>0]=(67109634>>16)&255;HEAP8[$agg$result+3>>0]=67109634>>24;
 return;
}
function __ZNSt3__210moneypunctIwLb1EED2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__26locale5facetD2Ev($this);
 return;
}
function __ZNSt3__210moneypunctIwLb1EED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__26locale5facetD2Ev($this);
 __ZdlPv($this);
 return;
}
function __ZNKSt3__210moneypunctIwLb1EE16do_decimal_pointEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 2147483647;
}
function __ZNKSt3__210moneypunctIwLb1EE16do_thousands_sepEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 2147483647;
}
function __ZNKSt3__210moneypunctIwLb1EE11do_groupingEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var $__i$0$i$i = 0, $arrayidx$i$i = 0, $exitcond$i$i = 0, $inc$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 ;HEAP32[$agg$result>>2]=0|0;HEAP32[$agg$result+4>>2]=0|0;HEAP32[$agg$result+8>>2]=0|0;
 $__i$0$i$i = 0;
 while(1) {
  $exitcond$i$i = ($__i$0$i$i|0)==(3);
  if ($exitcond$i$i) {
   break;
  }
  $arrayidx$i$i = (($agg$result) + ($__i$0$i$i<<2)|0);
  HEAP32[$arrayidx$i$i>>2] = 0;
  $inc$i$i = (($__i$0$i$i) + 1)|0;
  $__i$0$i$i = $inc$i$i;
 }
 return;
}
function __ZNKSt3__210moneypunctIwLb1EE14do_curr_symbolEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var $__i$0$i$i = 0, $arrayidx$i$i = 0, $exitcond$i$i = 0, $inc$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 ;HEAP32[$agg$result>>2]=0|0;HEAP32[$agg$result+4>>2]=0|0;HEAP32[$agg$result+8>>2]=0|0;
 $__i$0$i$i = 0;
 while(1) {
  $exitcond$i$i = ($__i$0$i$i|0)==(3);
  if ($exitcond$i$i) {
   break;
  }
  $arrayidx$i$i = (($agg$result) + ($__i$0$i$i<<2)|0);
  HEAP32[$arrayidx$i$i>>2] = 0;
  $inc$i$i = (($__i$0$i$i) + 1)|0;
  $__i$0$i$i = $inc$i$i;
 }
 return;
}
function __ZNKSt3__210moneypunctIwLb1EE16do_positive_signEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var $__i$0$i$i = 0, $arrayidx$i$i = 0, $exitcond$i$i = 0, $inc$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 ;HEAP32[$agg$result>>2]=0|0;HEAP32[$agg$result+4>>2]=0|0;HEAP32[$agg$result+8>>2]=0|0;
 $__i$0$i$i = 0;
 while(1) {
  $exitcond$i$i = ($__i$0$i$i|0)==(3);
  if ($exitcond$i$i) {
   break;
  }
  $arrayidx$i$i = (($agg$result) + ($__i$0$i$i<<2)|0);
  HEAP32[$arrayidx$i$i>>2] = 0;
  $inc$i$i = (($__i$0$i$i) + 1)|0;
  $__i$0$i$i = $inc$i$i;
 }
 return;
}
function __ZNKSt3__210moneypunctIwLb1EE16do_negative_signEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 ;HEAP32[$agg$result>>2]=0|0;HEAP32[$agg$result+4>>2]=0|0;HEAP32[$agg$result+8>>2]=0|0;
 __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initEjw($agg$result,1,45);
 return;
}
function __ZNKSt3__210moneypunctIwLb1EE14do_frac_digitsEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 0;
}
function __ZNKSt3__210moneypunctIwLb1EE13do_pos_formatEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP8[$agg$result>>0]=67109634&255;HEAP8[$agg$result+1>>0]=(67109634>>8)&255;HEAP8[$agg$result+2>>0]=(67109634>>16)&255;HEAP8[$agg$result+3>>0]=67109634>>24;
 return;
}
function __ZNKSt3__210moneypunctIwLb1EE13do_neg_formatEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP8[$agg$result>>0]=67109634&255;HEAP8[$agg$result+1>>0]=(67109634>>8)&255;HEAP8[$agg$result+2>>0]=(67109634>>16)&255;HEAP8[$agg$result+3>>0]=67109634>>24;
 return;
}
function __ZNSt3__29money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__26locale5facetD2Ev($this);
 return;
}
function __ZNSt3__29money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__26locale5facetD2Ev($this);
 __ZdlPv($this);
 return;
}
function __ZNKSt3__29money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_bRNS_8ios_baseERjRe($this,$__b,$__e,$__intl,$__iob,$__err,$__v) {
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__intl = $__intl|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$pre = 0, $$pre$i$i$i = 0, $$pre66 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $7 = 0, $8 = 0, $9 = 0, $__atoms = 0, $__einp_$i$i$i$i = 0, $__einp_$i$i4$i$i = 0, $__first$addr$0$i = 0, $__first$addr$0$lcssa$i = 0, $__fmtflags_$i = 0, $__h$sroa$0$0 = 0, $__h$sroa$0$1 = 0, $__loc = 0, $__nbuf = 0, $__nc$0 = 0, $__nc$1 = 0;
 var $__nc$2 = 0, $__neg = 0, $__ninp_$i$i$i$i = 0, $__ninp_$i$i3$i$i = 0, $__second_$i$i$i = 0, $__w$0 = 0, $__wb = 0, $__wbuf = 0, $__wn = 0, $add = 0, $add$ptr = 0, $add$ptr$i = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $arrayidx = 0, $call$i$i$i$i39 = 0, $call$i$i9$i$i40 = 0, $call$i18 = 0, $call24 = 0, $call3$i$i$i = 0;
 var $call3$i$i$i$i = 0, $call3$i$i11$i$i = 0, $call3$i14$i$i = 0, $call4$i$i$i = 0, $call4$i15$i$i = 0, $call50 = 0, $call9 = 0, $cmp = 0, $cmp$i = 0, $cmp$i$i$i$i = 0, $cmp$i$i5$i$i = 0, $cmp2$i = 0, $cmp26 = 0, $cmp35 = 0, $cmp51 = 0, $ehselector$slot$0 = 0, $ehselector$slot$1 = 0, $ehselector$slot$2 = 0, $ehselector$slot$362 = 0, $ehselector$slot$363 = 0;
 var $exn$slot$0 = 0, $exn$slot$1 = 0, $exn$slot$2 = 0, $exn$slot$364 = 0, $exn$slot$365 = 0, $incdec$ptr = 0, $incdec$ptr$i = 0, $incdec$ptr46 = 0, $incdec$ptr47 = 0, $or = 0, $phitmp$i$i$i = 0, $retval$0$i$i$i$i = 0, $retval$0$i$i13$i$i = 0, $retval$sroa$0$0$copyload = 0, $sub$ptr$lhs$cast43 = 0, $sub$ptr$rhs$cast44 = 0, $sub$ptr$sub = 0, $sub$ptr$sub45 = 0, $tobool$i$i = 0, $tobool$i$i$i = 0;
 var $tobool$i$i22 = 0, $tobool$i$i32 = 0, $tobool$i$i42 = 0, $tobool$i2$i$i = 0, $tobool31 = 0, $vararg_buffer = 0, $vfn$i = 0, $vfn$i$i$i$i = 0, $vfn$i$i8$i$i = 0, $vtable$i = 0, $vtable$i$i$i$i = 0, $vtable$i$i7$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 240|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(240|0);
 $agg$tmp$byval_copy = sp + 24|0;
 $vararg_buffer = sp;
 $__wbuf = sp + 140|0;
 $__wb = sp + 16|0;
 $__wn = sp + 12|0;
 $__loc = sp + 8|0;
 $__neg = sp + 138|0;
 $agg$tmp = sp + 4|0;
 $__atoms = sp + 128|0;
 $__nbuf = sp + 28|0;
 $0 = $__wbuf;
 HEAP32[$__wb>>2] = $0;
 $__second_$i$i$i = ((($__wb)) + 4|0);
 HEAP32[$__second_$i$i$i>>2] = (441);
 $add$ptr = ((($__wbuf)) + 100|0);
 __THREW__ = 0;
 invoke_vii(379,($__loc|0),($__iob|0));
 $1 = __THREW__; __THREW__ = 0;
 $2 = $1&1;
 if ($2) {
  $17 = ___cxa_find_matching_catch_2()|0;
  $18 = tempRet0;
  HEAP32[$__wb>>2] = 0;
  $58 = 441;$59 = $__wbuf;$ehselector$slot$362 = $18;$exn$slot$364 = $17;
  label = 54;
 } else {
  __THREW__ = 0;
  $call$i18 = (invoke_iii(380,($__loc|0),(20096|0))|0);
  $3 = __THREW__; __THREW__ = 0;
  $4 = $3&1;
  if ($4) {
   $19 = ___cxa_find_matching_catch_2()|0;
   $20 = tempRet0;
   $ehselector$slot$2 = $20;$exn$slot$2 = $19;
  } else {
   HEAP8[$__neg>>0] = 0;
   $5 = HEAP32[$__e>>2]|0;
   HEAP32[$agg$tmp>>2] = $5;
   $__fmtflags_$i = ((($__iob)) + 4|0);
   $6 = HEAP32[$__fmtflags_$i>>2]|0;
   __THREW__ = 0;
   ;HEAP32[$agg$tmp$byval_copy>>2]=HEAP32[$agg$tmp>>2]|0;
   $call9 = (invoke_iiiiiiiiiiii(442,($__b|0),($agg$tmp$byval_copy|0),($__intl|0),($__loc|0),($6|0),($__err|0),($__neg|0),($call$i18|0),($__wb|0),($__wn|0),($add$ptr|0))|0);
   $7 = __THREW__; __THREW__ = 0;
   $8 = $7&1;
   L7: do {
    if ($8) {
     label = 11;
    } else {
     L9: do {
      if ($call9) {
       $vtable$i = HEAP32[$call$i18>>2]|0;
       $vfn$i = ((($vtable$i)) + 32|0);
       $9 = HEAP32[$vfn$i>>2]|0;
       __THREW__ = 0;
       (invoke_iiiii($9|0,($call$i18|0),(17015|0),((17025)|0),($__atoms|0))|0);
       $10 = __THREW__; __THREW__ = 0;
       $11 = $10&1;
       if ($11) {
        $23 = ___cxa_find_matching_catch_2()|0;
        $24 = tempRet0;
        $ehselector$slot$0 = $24;$exn$slot$0 = $23;
       } else {
        $12 = HEAP32[$__wn>>2]|0;
        $13 = HEAP32[$__wb>>2]|0;
        $sub$ptr$sub = (($12) - ($13))|0;
        $cmp = ($sub$ptr$sub|0)>(98);
        if ($cmp) {
         $add = (($sub$ptr$sub) + 2)|0;
         $call24 = (_malloc($add)|0);
         $14 = $call24;
         $cmp26 = ($call24|0)==(0|0);
         if ($cmp26) {
          __THREW__ = 0;
          invoke_v(409);
          $15 = __THREW__; __THREW__ = 0;
          $16 = $15&1;
          if ($16) {
           $__h$sroa$0$0 = $14;
          } else {
           $__h$sroa$0$1 = $14;$__nc$0 = 0;
           label = 16;
          }
         } else {
          $__h$sroa$0$1 = $14;$__nc$0 = $call24;
          label = 16;
         }
        } else {
         $__h$sroa$0$1 = 0;$__nc$0 = $__nbuf;
         label = 16;
        }
        do {
         if ((label|0) == 16) {
          $28 = HEAP8[$__neg>>0]|0;
          $tobool31 = ($28<<24>>24)==(0);
          if ($tobool31) {
           $__nc$1 = $__nc$0;
          } else {
           $incdec$ptr = ((($__nc$0)) + 1|0);
           HEAP8[$__nc$0>>0] = 45;
           $__nc$1 = $incdec$ptr;
          }
          $29 = HEAP32[$__wb>>2]|0;
          $add$ptr$i = ((($__atoms)) + 10|0);
          $sub$ptr$rhs$cast44 = $__atoms;
          $__nc$2 = $__nc$1;$__w$0 = $29;
          while(1) {
           $30 = HEAP32[$__wn>>2]|0;
           $cmp35 = ($__w$0>>>0)<($30>>>0);
           if (!($cmp35)) {
            break;
           }
           $31 = HEAP8[$__w$0>>0]|0;
           $__first$addr$0$i = $__atoms;
           while(1) {
            $cmp$i = ($__first$addr$0$i|0)==($add$ptr$i|0);
            if ($cmp$i) {
             $__first$addr$0$lcssa$i = $add$ptr$i;
             break;
            }
            $32 = HEAP8[$__first$addr$0$i>>0]|0;
            $cmp2$i = ($32<<24>>24)==($31<<24>>24);
            if ($cmp2$i) {
             $__first$addr$0$lcssa$i = $__first$addr$0$i;
             break;
            }
            $incdec$ptr$i = ((($__first$addr$0$i)) + 1|0);
            $__first$addr$0$i = $incdec$ptr$i;
           }
           $sub$ptr$lhs$cast43 = $__first$addr$0$lcssa$i;
           $sub$ptr$sub45 = (($sub$ptr$lhs$cast43) - ($sub$ptr$rhs$cast44))|0;
           $arrayidx = (17015 + ($sub$ptr$sub45)|0);
           $33 = HEAP8[$arrayidx>>0]|0;
           HEAP8[$__nc$2>>0] = $33;
           $incdec$ptr46 = ((($__w$0)) + 1|0);
           $incdec$ptr47 = ((($__nc$2)) + 1|0);
           $__nc$2 = $incdec$ptr47;$__w$0 = $incdec$ptr46;
          }
          HEAP8[$__nc$2>>0] = 0;
          HEAP32[$vararg_buffer>>2] = $__v;
          $call50 = (_sscanf($__nbuf,17026,$vararg_buffer)|0);
          $cmp51 = ($call50|0)==(1);
          if (!($cmp51)) {
           __THREW__ = 0;
           invoke_vi(443,(17030|0));
           $34 = __THREW__; __THREW__ = 0;
           $35 = $34&1;
           if ($35) {
            $__h$sroa$0$0 = $__h$sroa$0$1;
            break;
           }
          }
          $tobool$i$i42 = ($__h$sroa$0$1|0)==(0);
          if (!($tobool$i$i42)) {
           $36 = $__h$sroa$0$1;
           _free($36);
          }
          break L9;
         }
        } while(0);
        $25 = ___cxa_find_matching_catch_2()|0;
        $26 = tempRet0;
        $tobool$i$i32 = ($__h$sroa$0$0|0)==(0);
        if (!($tobool$i$i32)) {
         $27 = $__h$sroa$0$0;
         _free($27);
        }
        $ehselector$slot$0 = $26;$exn$slot$0 = $25;
       }
       $ehselector$slot$1 = $ehselector$slot$0;$exn$slot$1 = $exn$slot$0;
       break L7;
      }
     } while(0);
     $37 = HEAP32[$__b>>2]|0;
     $tobool$i$i$i = ($37|0)==(0|0);
     do {
      if ($tobool$i$i$i) {
       $64 = 1;
      } else {
       $__ninp_$i$i$i$i = ((($37)) + 12|0);
       $38 = HEAP32[$__ninp_$i$i$i$i>>2]|0;
       $__einp_$i$i$i$i = ((($37)) + 16|0);
       $39 = HEAP32[$__einp_$i$i$i$i>>2]|0;
       $cmp$i$i$i$i = ($38|0)==($39|0);
       if ($cmp$i$i$i$i) {
        $vtable$i$i$i$i = HEAP32[$37>>2]|0;
        $vfn$i$i$i$i = ((($vtable$i$i$i$i)) + 36|0);
        $40 = HEAP32[$vfn$i$i$i$i>>2]|0;
        __THREW__ = 0;
        $call$i$i$i$i39 = (invoke_ii($40|0,($37|0))|0);
        $41 = __THREW__; __THREW__ = 0;
        $42 = $41&1;
        if ($42) {
         label = 11;
         break L7;
        } else {
         $retval$0$i$i$i$i = $call$i$i$i$i39;
        }
       } else {
        $43 = HEAP8[$38>>0]|0;
        $call3$i$i$i$i = (__ZNSt3__211char_traitsIcE11to_int_typeEc($43)|0);
        $retval$0$i$i$i$i = $call3$i$i$i$i;
       }
       $call3$i$i$i = (__ZNSt3__211char_traitsIcE3eofEv()|0);
       $call4$i$i$i = (__ZNSt3__211char_traitsIcE11eq_int_typeEii($retval$0$i$i$i$i,$call3$i$i$i)|0);
       if ($call4$i$i$i) {
        HEAP32[$__b>>2] = 0;
        $64 = 1;
        break;
       } else {
        $$pre$i$i$i = HEAP32[$__b>>2]|0;
        $phitmp$i$i$i = ($$pre$i$i$i|0)==(0|0);
        $64 = $phitmp$i$i$i;
        break;
       }
      }
     } while(0);
     $44 = HEAP32[$__e>>2]|0;
     $tobool$i2$i$i = ($44|0)==(0|0);
     do {
      if ($tobool$i2$i$i) {
       label = 44;
      } else {
       $__ninp_$i$i3$i$i = ((($44)) + 12|0);
       $45 = HEAP32[$__ninp_$i$i3$i$i>>2]|0;
       $__einp_$i$i4$i$i = ((($44)) + 16|0);
       $46 = HEAP32[$__einp_$i$i4$i$i>>2]|0;
       $cmp$i$i5$i$i = ($45|0)==($46|0);
       if ($cmp$i$i5$i$i) {
        $vtable$i$i7$i$i = HEAP32[$44>>2]|0;
        $vfn$i$i8$i$i = ((($vtable$i$i7$i$i)) + 36|0);
        $47 = HEAP32[$vfn$i$i8$i$i>>2]|0;
        __THREW__ = 0;
        $call$i$i9$i$i40 = (invoke_ii($47|0,($44|0))|0);
        $48 = __THREW__; __THREW__ = 0;
        $49 = $48&1;
        if ($49) {
         label = 11;
         break L7;
        } else {
         $retval$0$i$i13$i$i = $call$i$i9$i$i40;
        }
       } else {
        $50 = HEAP8[$45>>0]|0;
        $call3$i$i11$i$i = (__ZNSt3__211char_traitsIcE11to_int_typeEc($50)|0);
        $retval$0$i$i13$i$i = $call3$i$i11$i$i;
       }
       $call3$i14$i$i = (__ZNSt3__211char_traitsIcE3eofEv()|0);
       $call4$i15$i$i = (__ZNSt3__211char_traitsIcE11eq_int_typeEii($retval$0$i$i13$i$i,$call3$i14$i$i)|0);
       if ($call4$i15$i$i) {
        HEAP32[$__e>>2] = 0;
        label = 44;
        break;
       } else {
        if ($64) {
         break;
        } else {
         label = 46;
         break;
        }
       }
      }
     } while(0);
     if ((label|0) == 44) {
      if ($64) {
       label = 46;
      }
     }
     if ((label|0) == 46) {
      $51 = HEAP32[$__err>>2]|0;
      $or = $51 | 2;
      HEAP32[$__err>>2] = $or;
     }
     $retval$sroa$0$0$copyload = HEAP32[$__b>>2]|0;
     __ZNSt3__26localeD2Ev($__loc);
     $52 = HEAP32[$__wb>>2]|0;
     HEAP32[$__wb>>2] = 0;
     $tobool$i$i22 = ($52|0)==(0|0);
     if (!($tobool$i$i22)) {
      $53 = HEAP32[$__second_$i$i$i>>2]|0;
      __THREW__ = 0;
      invoke_vi($53|0,($52|0));
      $54 = __THREW__; __THREW__ = 0;
      $55 = $54&1;
      if ($55) {
       $56 = ___cxa_find_matching_catch_3(0|0)|0;
       $57 = tempRet0;
       ___clang_call_terminate($56);
       // unreachable;
      }
     }
     STACKTOP = sp;return ($retval$sroa$0$0$copyload|0);
    }
   } while(0);
   if ((label|0) == 11) {
    $21 = ___cxa_find_matching_catch_2()|0;
    $22 = tempRet0;
    $ehselector$slot$1 = $22;$exn$slot$1 = $21;
   }
   $ehselector$slot$2 = $ehselector$slot$1;$exn$slot$2 = $exn$slot$1;
  }
  __ZNSt3__26localeD2Ev($__loc);
  $$pre = HEAP32[$__wb>>2]|0;
  HEAP32[$__wb>>2] = 0;
  $tobool$i$i = ($$pre|0)==(0|0);
  if ($tobool$i$i) {
   $ehselector$slot$363 = $ehselector$slot$2;$exn$slot$365 = $exn$slot$2;
  } else {
   $$pre66 = HEAP32[$__second_$i$i$i>>2]|0;
   $58 = $$pre66;$59 = $$pre;$ehselector$slot$362 = $ehselector$slot$2;$exn$slot$364 = $exn$slot$2;
   label = 54;
  }
 }
 if ((label|0) == 54) {
  __THREW__ = 0;
  invoke_vi($58|0,($59|0));
  $60 = __THREW__; __THREW__ = 0;
  $61 = $60&1;
  if ($61) {
   $62 = ___cxa_find_matching_catch_3(0|0)|0;
   $63 = tempRet0;
   ___clang_call_terminate($62);
   // unreachable;
  } else {
   $ehselector$slot$363 = $ehselector$slot$362;$exn$slot$365 = $exn$slot$364;
  }
 }
 ___resumeException($exn$slot$365|0);
 // unreachable;
 return (0)|0;
}
function __ZNKSt3__29money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_bRNS_8ios_baseERjRNS_12basic_stringIcS3_NS_9allocatorIcEEEE($this,$__b,$__e,$__intl,$__iob,$__err,$__v) {
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__intl = $__intl|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$pre = 0, $$pre$i$i$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $__einp_$i$i$i$i = 0, $__einp_$i$i4$i$i = 0, $__fmtflags_$i = 0, $__loc = 0, $__neg = 0, $__ninp_$i$i$i$i = 0, $__ninp_$i$i3$i$i = 0, $__second_$i$i$i = 0, $__size_$i1$i = 0, $__size_$i2$i = 0, $__w$0 = 0, $__wb = 0, $__wbuf = 0, $__wn = 0, $add$ptr = 0, $add$ptr18 = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0;
 var $call$i$i$i$i26 = 0, $call$i$i9$i$i27 = 0, $call$i19 = 0, $call$i21 = 0, $call$i24 = 0, $call3$i$i$i = 0, $call3$i$i$i$i = 0, $call3$i$i11$i$i = 0, $call3$i14$i$i = 0, $call4$i$i$i = 0, $call4$i15$i$i = 0, $call9 = 0, $cmp = 0, $cmp$i$i$i$i = 0, $cmp$i$i5$i$i = 0, $cmp20 = 0, $ehselector$slot$1 = 0, $ehselector$slot$239 = 0, $ehselector$slot$240 = 0, $exn$slot$1 = 0;
 var $exn$slot$241 = 0, $exn$slot$242 = 0, $incdec$ptr = 0, $or = 0, $phitmp$i$i$i = 0, $ref$tmp$i = 0, $ref$tmp4$i = 0, $retval$0$i$i$i$i = 0, $retval$0$i$i13$i$i = 0, $retval$sroa$0$0$copyload = 0, $tobool$i$i = 0, $tobool$i$i$i = 0, $tobool$i$i20 = 0, $tobool$i$i29 = 0, $tobool$i2$i$i = 0, $tobool10 = 0, $vfn$i = 0, $vfn$i$i$i$i = 0, $vfn$i$i8$i$i = 0, $vfn$i23 = 0;
 var $vtable$i = 0, $vtable$i$i$i$i = 0, $vtable$i$i7$i$i = 0, $vtable$i22 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(144|0);
 $agg$tmp$byval_copy = sp + 24|0;
 $ref$tmp$i = sp + 133|0;
 $ref$tmp4$i = sp + 132|0;
 $__wbuf = sp + 32|0;
 $__wb = sp + 16|0;
 $__wn = sp + 8|0;
 $__loc = sp + 4|0;
 $__neg = sp + 28|0;
 $agg$tmp = sp;
 $0 = $__wbuf;
 HEAP32[$__wb>>2] = $0;
 $__second_$i$i$i = ((($__wb)) + 4|0);
 HEAP32[$__second_$i$i$i>>2] = (441);
 $add$ptr = ((($__wbuf)) + 100|0);
 __THREW__ = 0;
 invoke_vii(379,($__loc|0),($__iob|0));
 $1 = __THREW__; __THREW__ = 0;
 $2 = $1&1;
 if ($2) {
  $18 = ___cxa_find_matching_catch_2()|0;
  $19 = tempRet0;
  HEAP32[$__wb>>2] = 0;
  $54 = $__wbuf;$ehselector$slot$239 = $19;$exn$slot$241 = $18;
  label = 41;
 } else {
  __THREW__ = 0;
  $call$i19 = (invoke_iii(380,($__loc|0),(20096|0))|0);
  $3 = __THREW__; __THREW__ = 0;
  $4 = $3&1;
  if ($4) {
   $20 = ___cxa_find_matching_catch_2()|0;
   $21 = tempRet0;
   $ehselector$slot$1 = $21;$exn$slot$1 = $20;
  } else {
   HEAP8[$__neg>>0] = 0;
   $5 = HEAP32[$__e>>2]|0;
   HEAP32[$agg$tmp>>2] = $5;
   $__fmtflags_$i = ((($__iob)) + 4|0);
   $6 = HEAP32[$__fmtflags_$i>>2]|0;
   $7 = $5;
   __THREW__ = 0;
   ;HEAP32[$agg$tmp$byval_copy>>2]=HEAP32[$agg$tmp>>2]|0;
   $call9 = (invoke_iiiiiiiiiiii(442,($__b|0),($agg$tmp$byval_copy|0),($__intl|0),($__loc|0),($6|0),($__err|0),($__neg|0),($call$i19|0),($__wb|0),($__wn|0),($add$ptr|0))|0);
   $8 = __THREW__; __THREW__ = 0;
   $9 = $8&1;
   L7: do {
    if (!($9)) {
     if ($call9) {
      $__size_$i1$i = ((($__v)) + 11|0);
      $10 = HEAP8[$__size_$i1$i>>0]|0;
      $tobool$i$i20 = ($10<<24>>24)<(0);
      if ($tobool$i$i20) {
       $11 = HEAP32[$__v>>2]|0;
       HEAP8[$ref$tmp$i>>0] = 0;
       __ZNSt3__211char_traitsIcE6assignERcRKc($11,$ref$tmp$i);
       $__size_$i2$i = ((($__v)) + 4|0);
       HEAP32[$__size_$i2$i>>2] = 0;
      } else {
       HEAP8[$ref$tmp4$i>>0] = 0;
       __ZNSt3__211char_traitsIcE6assignERcRKc($__v,$ref$tmp4$i);
       HEAP8[$__size_$i1$i>>0] = 0;
      }
      $12 = HEAP8[$__neg>>0]|0;
      $tobool10 = ($12<<24>>24)==(0);
      if (!($tobool10)) {
       $vtable$i = HEAP32[$call$i19>>2]|0;
       $vfn$i = ((($vtable$i)) + 28|0);
       $13 = HEAP32[$vfn$i>>2]|0;
       __THREW__ = 0;
       $call$i21 = (invoke_iii($13|0,($call$i19|0),45)|0);
       $14 = __THREW__; __THREW__ = 0;
       $15 = $14&1;
       if ($15) {
        break;
       }
       __THREW__ = 0;
       invoke_vii(376,($__v|0),($call$i21|0));
       $16 = __THREW__; __THREW__ = 0;
       $17 = $16&1;
       if ($17) {
        break;
       }
      }
      $vtable$i22 = HEAP32[$call$i19>>2]|0;
      $vfn$i23 = ((($vtable$i22)) + 28|0);
      $22 = HEAP32[$vfn$i23>>2]|0;
      __THREW__ = 0;
      $call$i24 = (invoke_iii($22|0,($call$i19|0),48)|0);
      $23 = __THREW__; __THREW__ = 0;
      $24 = $23&1;
      if ($24) {
       break;
      }
      $25 = HEAP32[$__wb>>2]|0;
      $26 = HEAP32[$__wn>>2]|0;
      $add$ptr18 = ((($26)) + -1|0);
      $__w$0 = $25;
      while(1) {
       $cmp = ($__w$0>>>0)<($add$ptr18>>>0);
       if (!($cmp)) {
        break;
       }
       $27 = HEAP8[$__w$0>>0]|0;
       $cmp20 = ($27<<24>>24)==($call$i24<<24>>24);
       if (!($cmp20)) {
        break;
       }
       $incdec$ptr = ((($__w$0)) + 1|0);
       $__w$0 = $incdec$ptr;
      }
      __THREW__ = 0;
      (invoke_iiii(444,($__v|0),($__w$0|0),($26|0))|0);
      $28 = __THREW__; __THREW__ = 0;
      $29 = $28&1;
      if ($29) {
       break;
      }
     }
     $30 = HEAP32[$__b>>2]|0;
     $tobool$i$i$i = ($30|0)==(0|0);
     do {
      if ($tobool$i$i$i) {
       $59 = 1;
      } else {
       $__ninp_$i$i$i$i = ((($30)) + 12|0);
       $31 = HEAP32[$__ninp_$i$i$i$i>>2]|0;
       $__einp_$i$i$i$i = ((($30)) + 16|0);
       $32 = HEAP32[$__einp_$i$i$i$i>>2]|0;
       $cmp$i$i$i$i = ($31|0)==($32|0);
       if ($cmp$i$i$i$i) {
        $vtable$i$i$i$i = HEAP32[$30>>2]|0;
        $vfn$i$i$i$i = ((($vtable$i$i$i$i)) + 36|0);
        $33 = HEAP32[$vfn$i$i$i$i>>2]|0;
        __THREW__ = 0;
        $call$i$i$i$i26 = (invoke_ii($33|0,($30|0))|0);
        $34 = __THREW__; __THREW__ = 0;
        $35 = $34&1;
        if ($35) {
         break L7;
        } else {
         $retval$0$i$i$i$i = $call$i$i$i$i26;
        }
       } else {
        $36 = HEAP8[$31>>0]|0;
        $call3$i$i$i$i = (__ZNSt3__211char_traitsIcE11to_int_typeEc($36)|0);
        $retval$0$i$i$i$i = $call3$i$i$i$i;
       }
       $call3$i$i$i = (__ZNSt3__211char_traitsIcE3eofEv()|0);
       $call4$i$i$i = (__ZNSt3__211char_traitsIcE11eq_int_typeEii($retval$0$i$i$i$i,$call3$i$i$i)|0);
       if ($call4$i$i$i) {
        HEAP32[$__b>>2] = 0;
        $59 = 1;
        break;
       } else {
        $$pre$i$i$i = HEAP32[$__b>>2]|0;
        $phitmp$i$i$i = ($$pre$i$i$i|0)==(0|0);
        $59 = $phitmp$i$i$i;
        break;
       }
      }
     } while(0);
     $tobool$i2$i$i = ($5|0)==(0);
     do {
      if ($tobool$i2$i$i) {
       label = 32;
      } else {
       $__ninp_$i$i3$i$i = ((($7)) + 12|0);
       $37 = HEAP32[$__ninp_$i$i3$i$i>>2]|0;
       $__einp_$i$i4$i$i = ((($7)) + 16|0);
       $38 = HEAP32[$__einp_$i$i4$i$i>>2]|0;
       $cmp$i$i5$i$i = ($37|0)==($38|0);
       if ($cmp$i$i5$i$i) {
        $39 = $5;
        $vtable$i$i7$i$i = HEAP32[$39>>2]|0;
        $vfn$i$i8$i$i = ((($vtable$i$i7$i$i)) + 36|0);
        $40 = HEAP32[$vfn$i$i8$i$i>>2]|0;
        __THREW__ = 0;
        $call$i$i9$i$i27 = (invoke_ii($40|0,($7|0))|0);
        $41 = __THREW__; __THREW__ = 0;
        $42 = $41&1;
        if ($42) {
         break L7;
        } else {
         $retval$0$i$i13$i$i = $call$i$i9$i$i27;
        }
       } else {
        $43 = HEAP8[$37>>0]|0;
        $call3$i$i11$i$i = (__ZNSt3__211char_traitsIcE11to_int_typeEc($43)|0);
        $retval$0$i$i13$i$i = $call3$i$i11$i$i;
       }
       $call3$i14$i$i = (__ZNSt3__211char_traitsIcE3eofEv()|0);
       $call4$i15$i$i = (__ZNSt3__211char_traitsIcE11eq_int_typeEii($retval$0$i$i13$i$i,$call3$i14$i$i)|0);
       if ($call4$i15$i$i) {
        HEAP32[$__e>>2] = 0;
        label = 32;
        break;
       } else {
        if ($59) {
         break;
        } else {
         label = 34;
         break;
        }
       }
      }
     } while(0);
     if ((label|0) == 32) {
      if ($59) {
       label = 34;
      }
     }
     if ((label|0) == 34) {
      $44 = HEAP32[$__err>>2]|0;
      $or = $44 | 2;
      HEAP32[$__err>>2] = $or;
     }
     $retval$sroa$0$0$copyload = HEAP32[$__b>>2]|0;
     __ZNSt3__26localeD2Ev($__loc);
     $45 = HEAP32[$__wb>>2]|0;
     HEAP32[$__wb>>2] = 0;
     $tobool$i$i29 = ($45|0)==(0|0);
     if (!($tobool$i$i29)) {
      $46 = HEAP32[$__second_$i$i$i>>2]|0;
      __THREW__ = 0;
      invoke_vi($46|0,($45|0));
      $47 = __THREW__; __THREW__ = 0;
      $48 = $47&1;
      if ($48) {
       $49 = ___cxa_find_matching_catch_3(0|0)|0;
       $50 = tempRet0;
       ___clang_call_terminate($49);
       // unreachable;
      }
     }
     STACKTOP = sp;return ($retval$sroa$0$0$copyload|0);
    }
   } while(0);
   $51 = ___cxa_find_matching_catch_2()|0;
   $52 = tempRet0;
   $ehselector$slot$1 = $52;$exn$slot$1 = $51;
  }
  __ZNSt3__26localeD2Ev($__loc);
  $$pre = HEAP32[$__wb>>2]|0;
  HEAP32[$__wb>>2] = 0;
  $tobool$i$i = ($$pre|0)==(0|0);
  if ($tobool$i$i) {
   $ehselector$slot$240 = $ehselector$slot$1;$exn$slot$242 = $exn$slot$1;
  } else {
   $54 = $$pre;$ehselector$slot$239 = $ehselector$slot$1;$exn$slot$241 = $exn$slot$1;
   label = 41;
  }
 }
 if ((label|0) == 41) {
  $53 = HEAP32[$__second_$i$i$i>>2]|0;
  __THREW__ = 0;
  invoke_vi($53|0,($54|0));
  $55 = __THREW__; __THREW__ = 0;
  $56 = $55&1;
  if ($56) {
   $57 = ___cxa_find_matching_catch_3(0|0)|0;
   $58 = tempRet0;
   ___clang_call_terminate($57);
   // unreachable;
  } else {
   $ehselector$slot$240 = $ehselector$slot$239;$exn$slot$242 = $exn$slot$241;
  }
 }
 ___resumeException($exn$slot$242|0);
 // unreachable;
 return (0)|0;
}
function __ZNSt3__212__do_nothingEPv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNSt3__29money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE8__do_getERS4_S4_bRKNS_6localeEjRjRbRKNS_5ctypeIcEERNS_10unique_ptrIcPFvPvEEERPcSM_($__b,$__e,$__intl,$__loc,$__flags,$__err,$__neg,$__ct,$__wb,$__wn,$__we) {
 $__b = $__b|0;
 $__e = $__e|0;
 $__intl = $__intl|0;
 $__loc = $__loc|0;
 $__flags = $__flags|0;
 $__err = $__err|0;
 $__neg = $__neg|0;
 $__ct = $__ct|0;
 $__wb = $__wb|0;
 $__wn = $__wn|0;
 $__we = $__we|0;
 var $$lcssa = 0, $$pre = 0, $$pre$i$i$i = 0, $$pre$i$i$i204 = 0, $$pre$i$i$i556 = 0, $$pre$i$i$i677 = 0, $$pre$i$i$i768 = 0, $$pre$i$i$i859 = 0, $$pre$i$i$i932 = 0, $$pre$i17$i$i224 = 0, $$pre$i17$i$i2241121 = 0, $$pre$i17$i$i2241123 = 0, $$pre$i17$i$i697 = 0, $$pre$i17$i$i6971118 = 0, $$pre$i17$i$i6971119 = 0, $$pre$i17$i$i788 = 0, $$pre$i17$i$i7881109 = 0, $$pre$i17$i$i7881111 = 0, $$pre$i17$i$i879 = 0, $$pre$i17$i$i952 = 0;
 var $$pre$i17$i$i9521114$ph = 0, $$pre$i17$i$i95211141130 = 0, $$pre1112 = 0, $$pre1113 = 0, $$pre1116 = 0, $$pre1117 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0;
 var $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0;
 var $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0;
 var $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0;
 var $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0;
 var $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0;
 var $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0;
 var $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0;
 var $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0;
 var $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0;
 var $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0;
 var $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0;
 var $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0;
 var $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0;
 var $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0;
 var $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0;
 var $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0;
 var $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0;
 var $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0;
 var $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0;
 var $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__dp = 0, $__einp_$i$i = 0, $__einp_$i$i$i$i = 0, $__einp_$i$i$i$i192 = 0, $__einp_$i$i$i$i544 = 0, $__einp_$i$i$i$i665 = 0, $__einp_$i$i$i$i756 = 0, $__einp_$i$i$i$i847 = 0, $__einp_$i$i$i$i920 = 0;
 var $__einp_$i$i149 = 0, $__einp_$i$i162 = 0, $__einp_$i$i177 = 0, $__einp_$i$i236 = 0, $__einp_$i$i259 = 0, $__einp_$i$i331 = 0, $__einp_$i$i353 = 0, $__einp_$i$i3531125 = 0, $__einp_$i$i376 = 0, $__einp_$i$i4$i$i = 0, $__einp_$i$i4$i$i212 = 0, $__einp_$i$i4$i$i564 = 0, $__einp_$i$i4$i$i685 = 0, $__einp_$i$i4$i$i776 = 0, $__einp_$i$i4$i$i867 = 0, $__einp_$i$i4$i$i940 = 0, $__einp_$i$i421 = 0, $__einp_$i$i466 = 0, $__einp_$i$i651 = 0, $__einp_$i$i709 = 0;
 var $__einp_$i$i724 = 0, $__einp_$i$i800 = 0, $__einp_$i$i832 = 0, $__einp_$i$i892 = 0, $__einp_$i$i906 = 0, $__einp_$i$i965 = 0, $__einp_$i$i988 = 0, $__et = 0, $__fd = 0, $__gb = 0, $__gbuf = 0, $__ge = 0, $__gn = 0, $__grp = 0, $__i$0 = 0, $__i$0$i$i = 0, $__i$0$i$i111 = 0, $__i$0$i$i119 = 0, $__i$0$i$i127 = 0, $__i$0$i$i139 = 0;
 var $__ng$0 = 0, $__ng$2$ph = 0, $__ninp_$i$i = 0, $__ninp_$i$i$i$i = 0, $__ninp_$i$i$i$i191 = 0, $__ninp_$i$i$i$i543 = 0, $__ninp_$i$i$i$i664 = 0, $__ninp_$i$i$i$i755 = 0, $__ninp_$i$i$i$i846 = 0, $__ninp_$i$i$i$i919 = 0, $__ninp_$i$i148 = 0, $__ninp_$i$i161 = 0, $__ninp_$i$i176 = 0, $__ninp_$i$i235 = 0, $__ninp_$i$i258 = 0, $__ninp_$i$i3$i$i = 0, $__ninp_$i$i3$i$i211 = 0, $__ninp_$i$i3$i$i563 = 0, $__ninp_$i$i3$i$i684 = 0, $__ninp_$i$i3$i$i775 = 0;
 var $__ninp_$i$i3$i$i866 = 0, $__ninp_$i$i3$i$i939 = 0, $__ninp_$i$i330 = 0, $__ninp_$i$i352 = 0, $__ninp_$i$i3521124 = 0, $__ninp_$i$i375 = 0, $__ninp_$i$i420 = 0, $__ninp_$i$i465 = 0, $__ninp_$i$i650 = 0, $__ninp_$i$i708 = 0, $__ninp_$i$i723 = 0, $__ninp_$i$i799 = 0, $__ninp_$i$i831 = 0, $__ninp_$i$i891 = 0, $__ninp_$i$i905 = 0, $__ninp_$i$i964 = 0, $__ninp_$i$i987 = 0, $__nsn = 0, $__nsn$__trailing_sign$0 = 0, $__nsn$__trailing_sign$0100 = 0;
 var $__p$0 = 0, $__pat = 0, $__psn = 0, $__psn$__trailing_sign$0 = 0, $__psn$__trailing_sign$099 = 0, $__second_$i$i$i = 0, $__size_$i$i = 0, $__size_$i$i$i487 = 0, $__size_$i$i279 = 0, $__size_$i$i520 = 0, $__size_$i$i640 = 0, $__size_$i$i822 = 0, $__size_$i3$i = 0, $__size_$i3$i$i = 0, $__size_$i3$i281 = 0, $__size_$i3$i522 = 0, $__size_$i3$i642 = 0, $__size_$i3$i824 = 0, $__spaces = 0, $__sym = 0;
 var $__sym_curr_char$sroa$0$0 = 0, $__sym_space_end$sroa$0$0 = 0, $__tab_$i = 0, $__trailing_sign$0 = 0, $__trailing_sign$1 = 0, $__ts = 0, $__we$addr = 0, $add = 0, $add$ptr = 0, $add$ptr$i = 0, $add$ptr$i$i$i = 0, $add$ptr$i499 = 0, $add$ptr$i539 = 0, $add$ptr$i634 = 0, $add$ptr$i748 = 0, $and1027 = 0, $and3$i = 0, $and3$i252 = 0, $and3$i504 = 0, $and3$i816 = 0;
 var $and3$i981 = 0, $arrayidx = 0, $arrayidx$i = 0, $arrayidx$i$i = 0, $arrayidx$i$i114 = 0, $arrayidx$i$i122 = 0, $arrayidx$i$i130 = 0, $arrayidx$i$i142 = 0, $arrayidx$i251 = 0, $arrayidx$i503 = 0, $arrayidx$i815 = 0, $arrayidx$i980 = 0, $arrayidx123 = 0, $arrayidx140 = 0, $brmerge = 0, $call$i$i$i$i158 = 0, $call$i$i$i$i230 = 0, $call$i$i$i$i583 = 0, $call$i$i$i$i703 = 0, $call$i$i$i$i794 = 0;
 var $call$i$i$i$i886 = 0, $call$i$i$i$i959 = 0, $call$i$i157 = 0, $call$i$i172 = 0, $call$i$i188 = 0, $call$i$i246 = 0, $call$i$i272 = 0, $call$i$i326 = 0, $call$i$i363 = 0, $call$i$i408 = 0, $call$i$i453 = 0, $call$i$i719 = 0, $call$i$i810 = 0, $call$i$i9$i$i159 = 0, $call$i$i9$i$i232 = 0, $call$i$i9$i$i585 = 0, $call$i$i9$i$i705 = 0, $call$i$i9$i$i796 = 0, $call$i$i9$i$i888 = 0, $call$i$i9$i$i961 = 0;
 var $call$i$i902 = 0, $call$i$i975 = 0, $call$i$i998 = 0, $call3$i$i$i = 0, $call3$i$i$i$i = 0, $call3$i$i$i$i198 = 0, $call3$i$i$i$i550 = 0, $call3$i$i$i$i671 = 0, $call3$i$i$i$i762 = 0, $call3$i$i$i$i853 = 0, $call3$i$i$i$i926 = 0, $call3$i$i$i201 = 0, $call3$i$i$i553 = 0, $call3$i$i$i674 = 0, $call3$i$i$i765 = 0, $call3$i$i$i856 = 0, $call3$i$i$i929 = 0, $call3$i$i11$i$i = 0, $call3$i$i11$i$i218 = 0, $call3$i$i11$i$i570 = 0;
 var $call3$i$i11$i$i691 = 0, $call3$i$i11$i$i782 = 0, $call3$i$i11$i$i873 = 0, $call3$i$i11$i$i946 = 0, $call3$i$i154 = 0, $call3$i$i167 = 0, $call3$i$i183 = 0, $call3$i$i241 = 0, $call3$i$i265 = 0, $call3$i$i321 = 0, $call3$i$i358 = 0, $call3$i$i403 = 0, $call3$i$i448 = 0, $call3$i$i714 = 0, $call3$i$i805 = 0, $call3$i$i897 = 0, $call3$i$i970 = 0, $call3$i$i993 = 0, $call3$i14$i$i = 0, $call3$i14$i$i221 = 0;
 var $call3$i14$i$i573 = 0, $call3$i14$i$i694 = 0, $call3$i14$i$i785 = 0, $call3$i14$i$i876 = 0, $call3$i14$i$i949 = 0, $call4$i$i$i = 0, $call4$i$i$i202 = 0, $call4$i$i$i554 = 0, $call4$i$i$i675 = 0, $call4$i$i$i766 = 0, $call4$i$i$i857 = 0, $call4$i$i$i930 = 0, $call4$i15$i$i = 0, $call4$i15$i$i222 = 0, $call4$i15$i$i574 = 0, $call4$i15$i$i695 = 0, $call4$i15$i$i786 = 0, $call4$i15$i$i877 = 0, $call4$i15$i$i950 = 0, $cmp = 0;
 var $cmp$i$i = 0, $cmp$i$i$i = 0, $cmp$i$i$i$i = 0, $cmp$i$i$i$i193 = 0, $cmp$i$i$i$i545 = 0, $cmp$i$i$i$i666 = 0, $cmp$i$i$i$i757 = 0, $cmp$i$i$i$i848 = 0, $cmp$i$i$i$i921 = 0, $cmp$i$i150 = 0, $cmp$i$i163 = 0, $cmp$i$i178 = 0, $cmp$i$i237 = 0, $cmp$i$i260 = 0, $cmp$i$i332 = 0, $cmp$i$i354 = 0, $cmp$i$i3541126 = 0, $cmp$i$i377 = 0, $cmp$i$i422 = 0, $cmp$i$i467 = 0;
 var $cmp$i$i5$i$i = 0, $cmp$i$i5$i$i213 = 0, $cmp$i$i5$i$i565 = 0, $cmp$i$i5$i$i686 = 0, $cmp$i$i5$i$i777 = 0, $cmp$i$i5$i$i868 = 0, $cmp$i$i5$i$i941 = 0, $cmp$i$i652 = 0, $cmp$i$i710 = 0, $cmp$i$i725 = 0, $cmp$i$i801 = 0, $cmp$i$i833 = 0, $cmp$i$i893 = 0, $cmp$i$i907 = 0, $cmp$i$i966 = 0, $cmp$i$i989 = 0, $cmp101 = 0, $cmp106 = 0, $cmp119 = 0, $cmp120 = 0;
 var $cmp125 = 0, $cmp1291028 = 0, $cmp138 = 0, $cmp170 = 0, $cmp2$i = 0, $cmp2$i248 = 0, $cmp2$i500 = 0, $cmp2$i812 = 0, $cmp2$i977 = 0, $cmp209 = 0, $cmp250 = 0, $cmp256 = 0, $cmp258 = 0, $cmp262 = 0, $cmp264 = 0, $cmp279 = 0, $cmp281 = 0, $cmp283 = 0, $cmp289 = 0, $cmp298 = 0;
 var $cmp305 = 0, $cmp317 = 0, $cmp330 = 0, $cmp349 = 0, $cmp36 = 0, $cmp362 = 0, $cmp376 = 0, $cmp39 = 0, $cmp41 = 0, $cmp5 = 0, $cmp52 = 0, $cmp57 = 0, $cmp6$i = 0, $cmp6$i253 = 0, $cmp6$i505 = 0, $cmp6$i817 = 0, $cmp6$i982 = 0, $cmp69 = 0, $cmp74 = 0, $cmp86 = 0;
 var $cmp91 = 0, $cmptmp$i$i228 = 0, $cmptmp$i$i701 = 0, $cmptmp$i$i792 = 0, $cmptmp$i$i956 = 0, $cond$i$i = 0, $cond$i$i$i = 0, $cond$i$i372 = 0, $cond$i$i417 = 0, $cond$i$i462 = 0, $cond$i$i493 = 0, $cond$i277 = 0, $cond$i285 = 0, $cond$i349 = 0, $cond$i394 = 0, $cond$i439 = 0, $cond$i484 = 0, $cond$i526 = 0, $cond$i6$i = 0, $cond$i6$i633 = 0;
 var $cond$i6$i747 = 0, $cond$i646 = 0, $cond$i7$i537 = 0, $cond$i7$i632 = 0, $cond$i7$i746 = 0, $cond$i828 = 0, $conv = 0, $conv$i = 0, $conv$i$i = 0, $conv$i$i$i = 0, $conv$i$i$i630 = 0, $conv$i$i$i744 = 0, $conv$i$i283 = 0, $conv$i$i347 = 0, $conv$i$i392 = 0, $conv$i$i437 = 0, $conv$i$i482 = 0, $conv$i$i524 = 0, $conv$i$i644 = 0, $conv$i$i826 = 0;
 var $conv$i170 = 0, $conv$i174 = 0, $conv$i186 = 0, $conv$i244 = 0, $conv$i249 = 0, $conv$i268 = 0, $conv$i324 = 0, $conv$i361 = 0, $conv$i406 = 0, $conv$i451 = 0, $conv$i501 = 0, $conv$i717 = 0, $conv$i808 = 0, $conv$i813 = 0, $conv$i900 = 0, $conv$i973 = 0, $conv$i978 = 0, $conv$i996 = 0, $dec = 0, $ehselector$slot$5 = 0;
 var $exitcond$i$i = 0, $exitcond$i$i112 = 0, $exitcond$i$i120 = 0, $exitcond$i$i128 = 0, $exitcond$i$i140 = 0, $exn$slot$5 = 0, $inc = 0, $inc$i$i = 0, $inc$i$i115 = 0, $inc$i$i123 = 0, $inc$i$i131 = 0, $inc$i$i143 = 0, $inc339 = 0, $inc367 = 0, $incdec$ptr = 0, $incdec$ptr$i = 0, $incdec$ptr$i$i = 0, $incdec$ptr$i$i$i = 0, $incdec$ptr$i$i$i$sink = 0, $incdec$ptr$i$i182 = 0;
 var $incdec$ptr$i$i264 = 0, $incdec$ptr$i$i336 = 0, $incdec$ptr$i$i381 = 0, $incdec$ptr$i$i426 = 0, $incdec$ptr$i$i471 = 0, $incdec$ptr$i$i656 = 0, $incdec$ptr$i$i729 = 0, $incdec$ptr$i$i837 = 0, $incdec$ptr$i$i911 = 0, $incdec$ptr$i2$i$i = 0, $incdec$ptr$i736 = 0, $incdec$ptr268 = 0, $incdec$ptr287 = 0, $incdec$ptr323 = 0, $lnot$i = 0, $lnot$i$i$i = 0, $lnot$i638 = 0, $lnot$i752 = 0, $or = 0, $or$cond = 0;
 var $or$cond102 = 0, $or$cond7 = 0, $or$cond8 = 0, $or110 = 0, $or225 = 0, $or332 = 0, $or364 = 0, $or384 = 0, $phitmp$i$i$i = 0, $phitmp$i$i$i205 = 0, $phitmp$i$i$i557 = 0, $phitmp$i$i$i678 = 0, $phitmp$i$i$i769 = 0, $phitmp$i$i$i860 = 0, $phitmp$i$i$i933 = 0, $phitmp$i18$i$i225 = 0, $phitmp$i18$i$i698 = 0, $phitmp$i18$i$i789 = 0, $phitmp$i18$i$i953 = 0, $retval$0$i$i = 0;
 var $retval$0$i$i$i$i = 0, $retval$0$i$i$i$i200 = 0, $retval$0$i$i$i$i552 = 0, $retval$0$i$i$i$i673 = 0, $retval$0$i$i$i$i764 = 0, $retval$0$i$i$i$i855 = 0, $retval$0$i$i$i$i928 = 0, $retval$0$i$i13$i$i = 0, $retval$0$i$i13$i$i220 = 0, $retval$0$i$i13$i$i572 = 0, $retval$0$i$i13$i$i693 = 0, $retval$0$i$i13$i$i784 = 0, $retval$0$i$i13$i$i875 = 0, $retval$0$i$i13$i$i948 = 0, $retval$0$i$i169 = 0, $retval$0$i$i185 = 0, $retval$0$i$i243 = 0, $retval$0$i$i267 = 0, $retval$0$i$i323 = 0, $retval$0$i$i360 = 0;
 var $retval$0$i$i405 = 0, $retval$0$i$i450 = 0, $retval$0$i$i716 = 0, $retval$0$i$i807 = 0, $retval$0$i$i899 = 0, $retval$0$i$i972 = 0, $retval$0$i$i995 = 0, $retval$10 = 0, $sext = 0, $sext1038 = 0, $sext1039 = 0, $sext1040 = 0, $sub = 0, $sub$i = 0, $sub$ptr$sub$i = 0, $switch = 0, $tobool$i$i = 0, $tobool$i$i$i = 0, $tobool$i$i$i$i = 0, $tobool$i$i$i190 = 0;
 var $tobool$i$i$i328 = 0, $tobool$i$i$i367 = 0, $tobool$i$i$i412 = 0, $tobool$i$i$i457 = 0, $tobool$i$i$i488 = 0, $tobool$i$i$i542 = 0, $tobool$i$i$i625 = 0, $tobool$i$i$i663 = 0, $tobool$i$i$i739 = 0, $tobool$i$i$i754 = 0, $tobool$i$i$i845 = 0, $tobool$i$i$i918 = 0, $tobool$i$i105 = 0, $tobool$i$i275 = 0, $tobool$i$i280 = 0, $tobool$i$i344 = 0, $tobool$i$i389 = 0, $tobool$i$i434 = 0, $tobool$i$i479 = 0, $tobool$i$i521 = 0;
 var $tobool$i$i641 = 0, $tobool$i$i823 = 0, $tobool$i2$i$i = 0, $tobool$i2$i$i209 = 0, $tobool$i2$i$i561 = 0, $tobool$i2$i$i682 = 0, $tobool$i2$i$i773 = 0, $tobool$i2$i$i864 = 0, $tobool$i2$i$i937 = 0, $tobool344 = 0, $tobool382 = 0, $vfn$i$i = 0, $vfn$i$i$i$i = 0, $vfn$i$i$i$i196 = 0, $vfn$i$i$i$i548 = 0, $vfn$i$i$i$i669 = 0, $vfn$i$i$i$i760 = 0, $vfn$i$i$i$i851 = 0, $vfn$i$i$i$i924 = 0, $vfn$i$i152 = 0;
 var $vfn$i$i165 = 0, $vfn$i$i180 = 0, $vfn$i$i239 = 0, $vfn$i$i262 = 0, $vfn$i$i319 = 0, $vfn$i$i334 = 0, $vfn$i$i356 = 0, $vfn$i$i379 = 0, $vfn$i$i401 = 0, $vfn$i$i424 = 0, $vfn$i$i446 = 0, $vfn$i$i469 = 0, $vfn$i$i654 = 0, $vfn$i$i712 = 0, $vfn$i$i727 = 0, $vfn$i$i8$i$i = 0, $vfn$i$i8$i$i216 = 0, $vfn$i$i8$i$i568 = 0, $vfn$i$i8$i$i689 = 0, $vfn$i$i8$i$i780 = 0;
 var $vfn$i$i8$i$i871 = 0, $vfn$i$i8$i$i944 = 0, $vfn$i$i803 = 0, $vfn$i$i835 = 0, $vfn$i$i895 = 0, $vfn$i$i909 = 0, $vfn$i$i968 = 0, $vfn$i$i991 = 0, $vtable$i$i = 0, $vtable$i$i$i$i = 0, $vtable$i$i$i$i195 = 0, $vtable$i$i$i$i547 = 0, $vtable$i$i$i$i668 = 0, $vtable$i$i$i$i759 = 0, $vtable$i$i$i$i850 = 0, $vtable$i$i$i$i923 = 0, $vtable$i$i151 = 0, $vtable$i$i164 = 0, $vtable$i$i179 = 0, $vtable$i$i238 = 0;
 var $vtable$i$i261 = 0, $vtable$i$i318 = 0, $vtable$i$i333 = 0, $vtable$i$i355 = 0, $vtable$i$i378 = 0, $vtable$i$i400 = 0, $vtable$i$i423 = 0, $vtable$i$i445 = 0, $vtable$i$i468 = 0, $vtable$i$i653 = 0, $vtable$i$i7$i$i = 0, $vtable$i$i7$i$i215 = 0, $vtable$i$i7$i$i567 = 0, $vtable$i$i7$i$i688 = 0, $vtable$i$i7$i$i779 = 0, $vtable$i$i7$i$i870 = 0, $vtable$i$i7$i$i943 = 0, $vtable$i$i711 = 0, $vtable$i$i726 = 0, $vtable$i$i802 = 0;
 var $vtable$i$i834 = 0, $vtable$i$i894 = 0, $vtable$i$i908 = 0, $vtable$i$i967 = 0, $vtable$i$i990 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 512|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(512|0);
 $__we$addr = sp + 488|0;
 $__gbuf = sp + 88|0;
 $__gb = sp + 80|0;
 $__gn = sp + 72|0;
 $__ge = sp + 68|0;
 $__pat = sp + 496|0;
 $__dp = sp + 493|0;
 $__ts = sp + 492|0;
 $__grp = sp + 56|0;
 $__sym = sp + 44|0;
 $__psn = sp + 32|0;
 $__nsn = sp + 20|0;
 $__spaces = sp + 8|0;
 $__fd = sp + 4|0;
 $__et = sp;
 HEAP32[$__we$addr>>2] = $__we;
 $0 = $__gbuf;
 HEAP32[$__gb>>2] = $0;
 $__second_$i$i$i = ((($__gb)) + 4|0);
 HEAP32[$__second_$i$i$i>>2] = (441);
 HEAP32[$__gn>>2] = $__gbuf;
 $add$ptr = ((($__gbuf)) + 400|0);
 HEAP32[$__ge>>2] = $add$ptr;
 ;HEAP32[$__grp>>2]=0|0;HEAP32[$__grp+4>>2]=0|0;HEAP32[$__grp+8>>2]=0|0;
 $__i$0$i$i = 0;
 while(1) {
  $exitcond$i$i = ($__i$0$i$i|0)==(3);
  if ($exitcond$i$i) {
   break;
  }
  $arrayidx$i$i = (($__grp) + ($__i$0$i$i<<2)|0);
  HEAP32[$arrayidx$i$i>>2] = 0;
  $inc$i$i = (($__i$0$i$i) + 1)|0;
  $__i$0$i$i = $inc$i$i;
 }
 ;HEAP32[$__sym>>2]=0|0;HEAP32[$__sym+4>>2]=0|0;HEAP32[$__sym+8>>2]=0|0;
 $__i$0$i$i111 = 0;
 while(1) {
  $exitcond$i$i112 = ($__i$0$i$i111|0)==(3);
  if ($exitcond$i$i112) {
   break;
  }
  $arrayidx$i$i114 = (($__sym) + ($__i$0$i$i111<<2)|0);
  HEAP32[$arrayidx$i$i114>>2] = 0;
  $inc$i$i115 = (($__i$0$i$i111) + 1)|0;
  $__i$0$i$i111 = $inc$i$i115;
 }
 ;HEAP32[$__psn>>2]=0|0;HEAP32[$__psn+4>>2]=0|0;HEAP32[$__psn+8>>2]=0|0;
 $__i$0$i$i119 = 0;
 while(1) {
  $exitcond$i$i120 = ($__i$0$i$i119|0)==(3);
  if ($exitcond$i$i120) {
   break;
  }
  $arrayidx$i$i122 = (($__psn) + ($__i$0$i$i119<<2)|0);
  HEAP32[$arrayidx$i$i122>>2] = 0;
  $inc$i$i123 = (($__i$0$i$i119) + 1)|0;
  $__i$0$i$i119 = $inc$i$i123;
 }
 ;HEAP32[$__nsn>>2]=0|0;HEAP32[$__nsn+4>>2]=0|0;HEAP32[$__nsn+8>>2]=0|0;
 $__i$0$i$i127 = 0;
 while(1) {
  $exitcond$i$i128 = ($__i$0$i$i127|0)==(3);
  if ($exitcond$i$i128) {
   break;
  }
  $arrayidx$i$i130 = (($__nsn) + ($__i$0$i$i127<<2)|0);
  HEAP32[$arrayidx$i$i130>>2] = 0;
  $inc$i$i131 = (($__i$0$i$i127) + 1)|0;
  $__i$0$i$i127 = $inc$i$i131;
 }
 ;HEAP32[$__spaces>>2]=0|0;HEAP32[$__spaces+4>>2]=0|0;HEAP32[$__spaces+8>>2]=0|0;
 $__i$0$i$i139 = 0;
 while(1) {
  $exitcond$i$i140 = ($__i$0$i$i139|0)==(3);
  if ($exitcond$i$i140) {
   break;
  }
  $arrayidx$i$i142 = (($__spaces) + ($__i$0$i$i139<<2)|0);
  HEAP32[$arrayidx$i$i142>>2] = 0;
  $inc$i$i143 = (($__i$0$i$i139) + 1)|0;
  $__i$0$i$i139 = $inc$i$i143;
 }
 __THREW__ = 0;
 invoke_viiiiiiiiii(445,($__intl|0),($__loc|0),($__pat|0),($__dp|0),($__ts|0),($__grp|0),($__sym|0),($__psn|0),($__nsn|0),($__fd|0));
 $1 = __THREW__; __THREW__ = 0;
 $2 = $1&1;
 L21: do {
  if ($2) {
   $18 = ___cxa_find_matching_catch_2()|0;
   $19 = tempRet0;
   $ehselector$slot$5 = $19;$exn$slot$5 = $18;
  } else {
   $3 = HEAP32[$__wb>>2]|0;
   HEAP32[$__wn>>2] = $3;
   $__tab_$i = ((($__ct)) + 8|0);
   $__size_$i$i = ((($__psn)) + 11|0);
   $__size_$i3$i = ((($__psn)) + 4|0);
   $__size_$i$i279 = ((($__nsn)) + 11|0);
   $__size_$i3$i281 = ((($__nsn)) + 4|0);
   $and1027 = $__flags & 512;
   $cmp1291028 = ($and1027|0)!=(0);
   $__size_$i$i$i487 = ((($__sym)) + 11|0);
   $__size_$i3$i$i = ((($__sym)) + 4|0);
   $__size_$i$i520 = ((($__spaces)) + 11|0);
   $__size_$i3$i522 = ((($__spaces)) + 4|0);
   $arrayidx123 = ((($__pat)) + 3|0);
   $__size_$i$i822 = ((($__grp)) + 11|0);
   $__size_$i3$i824 = ((($__grp)) + 4|0);
   $__p$0 = 0;$__trailing_sign$0 = 0;
   L24: while(1) {
    $cmp = ($__p$0>>>0)<(4);
    $tobool344 = ($__trailing_sign$0|0)!=(0|0);
    if (!($cmp)) {
     label = 246;
     break;
    }
    $4 = HEAP32[$__b>>2]|0;
    $tobool$i$i$i = ($4|0)==(0|0);
    do {
     if ($tobool$i$i$i) {
      $396 = 1;
     } else {
      $__ninp_$i$i$i$i = ((($4)) + 12|0);
      $5 = HEAP32[$__ninp_$i$i$i$i>>2]|0;
      $__einp_$i$i$i$i = ((($4)) + 16|0);
      $6 = HEAP32[$__einp_$i$i$i$i>>2]|0;
      $cmp$i$i$i$i = ($5|0)==($6|0);
      if ($cmp$i$i$i$i) {
       $vtable$i$i$i$i = HEAP32[$4>>2]|0;
       $vfn$i$i$i$i = ((($vtable$i$i$i$i)) + 36|0);
       $7 = HEAP32[$vfn$i$i$i$i>>2]|0;
       __THREW__ = 0;
       $call$i$i$i$i158 = (invoke_ii($7|0,($4|0))|0);
       $8 = __THREW__; __THREW__ = 0;
       $9 = $8&1;
       if ($9) {
        label = 35;
        break L24;
       } else {
        $retval$0$i$i$i$i = $call$i$i$i$i158;
       }
      } else {
       $10 = HEAP8[$5>>0]|0;
       $call3$i$i$i$i = (__ZNSt3__211char_traitsIcE11to_int_typeEc($10)|0);
       $retval$0$i$i$i$i = $call3$i$i$i$i;
      }
      $call3$i$i$i = (__ZNSt3__211char_traitsIcE3eofEv()|0);
      $call4$i$i$i = (__ZNSt3__211char_traitsIcE11eq_int_typeEii($retval$0$i$i$i$i,$call3$i$i$i)|0);
      if ($call4$i$i$i) {
       HEAP32[$__b>>2] = 0;
       $396 = 1;
       break;
      } else {
       $$pre$i$i$i = HEAP32[$__b>>2]|0;
       $phitmp$i$i$i = ($$pre$i$i$i|0)==(0|0);
       $396 = $phitmp$i$i$i;
       break;
      }
     }
    } while(0);
    $11 = HEAP32[$__e>>2]|0;
    $tobool$i2$i$i = ($11|0)==(0|0);
    do {
     if ($tobool$i2$i$i) {
      label = 32;
     } else {
      $__ninp_$i$i3$i$i = ((($11)) + 12|0);
      $12 = HEAP32[$__ninp_$i$i3$i$i>>2]|0;
      $__einp_$i$i4$i$i = ((($11)) + 16|0);
      $13 = HEAP32[$__einp_$i$i4$i$i>>2]|0;
      $cmp$i$i5$i$i = ($12|0)==($13|0);
      if ($cmp$i$i5$i$i) {
       $vtable$i$i7$i$i = HEAP32[$11>>2]|0;
       $vfn$i$i8$i$i = ((($vtable$i$i7$i$i)) + 36|0);
       $14 = HEAP32[$vfn$i$i8$i$i>>2]|0;
       __THREW__ = 0;
       $call$i$i9$i$i159 = (invoke_ii($14|0,($11|0))|0);
       $15 = __THREW__; __THREW__ = 0;
       $16 = $15&1;
       if ($16) {
        label = 35;
        break L24;
       } else {
        $retval$0$i$i13$i$i = $call$i$i9$i$i159;
       }
      } else {
       $17 = HEAP8[$12>>0]|0;
       $call3$i$i11$i$i = (__ZNSt3__211char_traitsIcE11to_int_typeEc($17)|0);
       $retval$0$i$i13$i$i = $call3$i$i11$i$i;
      }
      $call3$i14$i$i = (__ZNSt3__211char_traitsIcE3eofEv()|0);
      $call4$i15$i$i = (__ZNSt3__211char_traitsIcE11eq_int_typeEii($retval$0$i$i13$i$i,$call3$i14$i$i)|0);
      if ($call4$i15$i$i) {
       HEAP32[$__e>>2] = 0;
       label = 32;
       break;
      } else {
       if ($396) {
        $397 = $11;
        break;
       } else {
        label = 246;
        break L24;
       }
      }
     }
    } while(0);
    if ((label|0) == 32) {
     label = 0;
     if ($396) {
      label = 246;
      break;
     } else {
      $397 = 0;
     }
    }
    $arrayidx = (($__pat) + ($__p$0)|0);
    $22 = HEAP8[$arrayidx>>0]|0;
    $conv = $22 << 24 >> 24;
    $cmp5 = ($__p$0|0)!=(3);
    L49: do {
     switch ($conv|0) {
     case 1:  {
      if ($cmp5) {
       $23 = HEAP32[$__b>>2]|0;
       $__ninp_$i$i161 = ((($23)) + 12|0);
       $24 = HEAP32[$__ninp_$i$i161>>2]|0;
       $__einp_$i$i162 = ((($23)) + 16|0);
       $25 = HEAP32[$__einp_$i$i162>>2]|0;
       $cmp$i$i163 = ($24|0)==($25|0);
       if ($cmp$i$i163) {
        $vtable$i$i164 = HEAP32[$23>>2]|0;
        $vfn$i$i165 = ((($vtable$i$i164)) + 36|0);
        $26 = HEAP32[$vfn$i$i165>>2]|0;
        __THREW__ = 0;
        $call$i$i172 = (invoke_ii($26|0,($23|0))|0);
        $27 = __THREW__; __THREW__ = 0;
        $28 = $27&1;
        if ($28) {
         label = 35;
         break L24;
        } else {
         $retval$0$i$i169 = $call$i$i172;
        }
       } else {
        $29 = HEAP8[$24>>0]|0;
        $call3$i$i167 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($29)|0);
        $retval$0$i$i169 = $call3$i$i167;
       }
       $conv$i170 = $retval$0$i$i169&255;
       $cmp2$i = ($conv$i170<<24>>24)>(-1);
       if (!($cmp2$i)) {
        label = 47;
        break L24;
       }
       $sext1040 = $retval$0$i$i169 << 24;
       $conv$i174 = $sext1040 >> 24;
       $30 = HEAP32[$__tab_$i>>2]|0;
       $arrayidx$i = (($30) + ($conv$i174<<1)|0);
       $31 = HEAP16[$arrayidx$i>>1]|0;
       $and3$i = $31 & 8192;
       $cmp6$i = ($and3$i<<16>>16)==(0);
       if ($cmp6$i) {
        label = 47;
        break L24;
       }
       $32 = HEAP32[$__b>>2]|0;
       $__ninp_$i$i176 = ((($32)) + 12|0);
       $33 = HEAP32[$__ninp_$i$i176>>2]|0;
       $__einp_$i$i177 = ((($32)) + 16|0);
       $34 = HEAP32[$__einp_$i$i177>>2]|0;
       $cmp$i$i178 = ($33|0)==($34|0);
       if ($cmp$i$i178) {
        $vtable$i$i179 = HEAP32[$32>>2]|0;
        $vfn$i$i180 = ((($vtable$i$i179)) + 40|0);
        $35 = HEAP32[$vfn$i$i180>>2]|0;
        __THREW__ = 0;
        $call$i$i188 = (invoke_ii($35|0,($32|0))|0);
        $36 = __THREW__; __THREW__ = 0;
        $37 = $36&1;
        if ($37) {
         label = 35;
         break L24;
        } else {
         $retval$0$i$i185 = $call$i$i188;
        }
       } else {
        $incdec$ptr$i$i182 = ((($33)) + 1|0);
        HEAP32[$__ninp_$i$i176>>2] = $incdec$ptr$i$i182;
        $38 = HEAP8[$33>>0]|0;
        $call3$i$i183 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($38)|0);
        $retval$0$i$i185 = $call3$i$i183;
       }
       $conv$i186 = $retval$0$i$i185&255;
       __THREW__ = 0;
       invoke_vii(376,($__spaces|0),($conv$i186|0));
       $39 = __THREW__; __THREW__ = 0;
       $40 = $39&1;
       if ($40) {
        label = 35;
        break L24;
       } else {
        $$pre$i17$i$i224 = $397;$49 = $397;
        label = 49;
       }
      } else {
       $__trailing_sign$1 = $__trailing_sign$0;
      }
      break;
     }
     case 0:  {
      if ($cmp5) {
       $$pre$i17$i$i224 = $397;$49 = $397;
       label = 49;
      } else {
       $__trailing_sign$1 = $__trailing_sign$0;
      }
      break;
     }
     case 3:  {
      $75 = HEAP8[$__size_$i$i>>0]|0;
      $tobool$i$i275 = ($75<<24>>24)<(0);
      $76 = HEAP32[$__size_$i3$i>>2]|0;
      $conv$i$i = $75&255;
      $cond$i277 = $tobool$i$i275 ? $76 : $conv$i$i;
      $77 = HEAP8[$__size_$i$i279>>0]|0;
      $tobool$i$i280 = ($77<<24>>24)<(0);
      $78 = HEAP32[$__size_$i3$i281>>2]|0;
      $conv$i$i283 = $77&255;
      $cond$i285 = $tobool$i$i280 ? $78 : $conv$i$i283;
      $add = (0 - ($cond$i285))|0;
      $cmp36 = ($cond$i277|0)==($add|0);
      if ($cmp36) {
       $__trailing_sign$1 = $__trailing_sign$0;
      } else {
       $cmp39 = ($cond$i277|0)==(0);
       if ($cmp39) {
        $98 = HEAP32[$__b>>2]|0;
        $__ninp_$i$i3521124 = ((($98)) + 12|0);
        $99 = HEAP32[$__ninp_$i$i3521124>>2]|0;
        $__einp_$i$i3531125 = ((($98)) + 16|0);
        $100 = HEAP32[$__einp_$i$i3531125>>2]|0;
        $cmp$i$i3541126 = ($99|0)==($100|0);
        if ($cmp$i$i3541126) {
         $vtable$i$i355 = HEAP32[$98>>2]|0;
         $vfn$i$i356 = ((($vtable$i$i355)) + 36|0);
         $101 = HEAP32[$vfn$i$i356>>2]|0;
         __THREW__ = 0;
         $call$i$i363 = (invoke_ii($101|0,($98|0))|0);
         $102 = __THREW__; __THREW__ = 0;
         $103 = $102&1;
         if ($103) {
          label = 35;
          break L24;
         } else {
          $retval$0$i$i360 = $call$i$i363;
         }
        } else {
         $104 = HEAP8[$99>>0]|0;
         $call3$i$i358 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($104)|0);
         $retval$0$i$i360 = $call3$i$i358;
        }
        $conv$i361 = $retval$0$i$i360&255;
        $105 = HEAP8[$__size_$i$i279>>0]|0;
        $tobool$i$i$i367 = ($105<<24>>24)<(0);
        $106 = HEAP32[$__nsn>>2]|0;
        $cond$i$i372 = $tobool$i$i$i367 ? $106 : $__nsn;
        $107 = HEAP8[$cond$i$i372>>0]|0;
        $cmp69 = ($conv$i361<<24>>24)==($107<<24>>24);
        if (!($cmp69)) {
         $__trailing_sign$1 = $__trailing_sign$0;
         break L49;
        }
        $108 = HEAP32[$__b>>2]|0;
        $__ninp_$i$i375 = ((($108)) + 12|0);
        $109 = HEAP32[$__ninp_$i$i375>>2]|0;
        $__einp_$i$i376 = ((($108)) + 16|0);
        $110 = HEAP32[$__einp_$i$i376>>2]|0;
        $cmp$i$i377 = ($109|0)==($110|0);
        if ($cmp$i$i377) {
         $vtable$i$i378 = HEAP32[$108>>2]|0;
         $vfn$i$i379 = ((($vtable$i$i378)) + 40|0);
         $111 = HEAP32[$vfn$i$i379>>2]|0;
         __THREW__ = 0;
         (invoke_ii($111|0,($108|0))|0);
         $112 = __THREW__; __THREW__ = 0;
         $113 = $112&1;
         if ($113) {
          label = 35;
          break L24;
         }
        } else {
         $incdec$ptr$i$i381 = ((($109)) + 1|0);
         HEAP32[$__ninp_$i$i375>>2] = $incdec$ptr$i$i381;
         $114 = HEAP8[$109>>0]|0;
         (__ZNSt3__211char_traitsIcE11to_int_typeEc($114)|0);
        }
        HEAP8[$__neg>>0] = 1;
        $115 = HEAP8[$__size_$i$i279>>0]|0;
        $tobool$i$i389 = ($115<<24>>24)<(0);
        $116 = HEAP32[$__size_$i3$i281>>2]|0;
        $conv$i$i392 = $115&255;
        $cond$i394 = $tobool$i$i389 ? $116 : $conv$i$i392;
        $cmp74 = ($cond$i394>>>0)>(1);
        $__nsn$__trailing_sign$0 = $cmp74 ? $__nsn : $__trailing_sign$0;
        $__trailing_sign$1 = $__nsn$__trailing_sign$0;
        break L49;
       }
       $cmp41 = ($cond$i285|0)==(0);
       $79 = HEAP32[$__b>>2]|0;
       $__ninp_$i$i352 = ((($79)) + 12|0);
       $80 = HEAP32[$__ninp_$i$i352>>2]|0;
       $__einp_$i$i353 = ((($79)) + 16|0);
       $81 = HEAP32[$__einp_$i$i353>>2]|0;
       $cmp$i$i354 = ($80|0)==($81|0);
       if ($cmp41) {
        if ($cmp$i$i354) {
         $vtable$i$i318 = HEAP32[$79>>2]|0;
         $vfn$i$i319 = ((($vtable$i$i318)) + 36|0);
         $82 = HEAP32[$vfn$i$i319>>2]|0;
         __THREW__ = 0;
         $call$i$i326 = (invoke_ii($82|0,($79|0))|0);
         $83 = __THREW__; __THREW__ = 0;
         $84 = $83&1;
         if ($84) {
          label = 35;
          break L24;
         } else {
          $retval$0$i$i323 = $call$i$i326;
         }
        } else {
         $85 = HEAP8[$80>>0]|0;
         $call3$i$i321 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($85)|0);
         $retval$0$i$i323 = $call3$i$i321;
        }
        $conv$i324 = $retval$0$i$i323&255;
        $86 = HEAP8[$__size_$i$i>>0]|0;
        $tobool$i$i$i328 = ($86<<24>>24)<(0);
        $87 = HEAP32[$__psn>>2]|0;
        $cond$i$i = $tobool$i$i$i328 ? $87 : $__psn;
        $88 = HEAP8[$cond$i$i>>0]|0;
        $cmp52 = ($conv$i324<<24>>24)==($88<<24>>24);
        if (!($cmp52)) {
         HEAP8[$__neg>>0] = 1;
         $__trailing_sign$1 = $__trailing_sign$0;
         break L49;
        }
        $89 = HEAP32[$__b>>2]|0;
        $__ninp_$i$i330 = ((($89)) + 12|0);
        $90 = HEAP32[$__ninp_$i$i330>>2]|0;
        $__einp_$i$i331 = ((($89)) + 16|0);
        $91 = HEAP32[$__einp_$i$i331>>2]|0;
        $cmp$i$i332 = ($90|0)==($91|0);
        if ($cmp$i$i332) {
         $vtable$i$i333 = HEAP32[$89>>2]|0;
         $vfn$i$i334 = ((($vtable$i$i333)) + 40|0);
         $92 = HEAP32[$vfn$i$i334>>2]|0;
         __THREW__ = 0;
         (invoke_ii($92|0,($89|0))|0);
         $93 = __THREW__; __THREW__ = 0;
         $94 = $93&1;
         if ($94) {
          label = 35;
          break L24;
         }
        } else {
         $incdec$ptr$i$i336 = ((($90)) + 1|0);
         HEAP32[$__ninp_$i$i330>>2] = $incdec$ptr$i$i336;
         $95 = HEAP8[$90>>0]|0;
         (__ZNSt3__211char_traitsIcE11to_int_typeEc($95)|0);
        }
        $96 = HEAP8[$__size_$i$i>>0]|0;
        $tobool$i$i344 = ($96<<24>>24)<(0);
        $97 = HEAP32[$__size_$i3$i>>2]|0;
        $conv$i$i347 = $96&255;
        $cond$i349 = $tobool$i$i344 ? $97 : $conv$i$i347;
        $cmp57 = ($cond$i349>>>0)>(1);
        $__psn$__trailing_sign$0 = $cmp57 ? $__psn : $__trailing_sign$0;
        $__trailing_sign$1 = $__psn$__trailing_sign$0;
        break L49;
       }
       if ($cmp$i$i354) {
        $vtable$i$i400 = HEAP32[$79>>2]|0;
        $vfn$i$i401 = ((($vtable$i$i400)) + 36|0);
        $117 = HEAP32[$vfn$i$i401>>2]|0;
        __THREW__ = 0;
        $call$i$i408 = (invoke_ii($117|0,($79|0))|0);
        $118 = __THREW__; __THREW__ = 0;
        $119 = $118&1;
        if ($119) {
         label = 35;
         break L24;
        } else {
         $retval$0$i$i405 = $call$i$i408;
        }
       } else {
        $120 = HEAP8[$80>>0]|0;
        $call3$i$i403 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($120)|0);
        $retval$0$i$i405 = $call3$i$i403;
       }
       $conv$i406 = $retval$0$i$i405&255;
       $121 = HEAP8[$__size_$i$i>>0]|0;
       $tobool$i$i$i412 = ($121<<24>>24)<(0);
       $122 = HEAP32[$__psn>>2]|0;
       $cond$i$i417 = $tobool$i$i$i412 ? $122 : $__psn;
       $123 = HEAP8[$cond$i$i417>>0]|0;
       $cmp86 = ($conv$i406<<24>>24)==($123<<24>>24);
       $124 = HEAP32[$__b>>2]|0;
       $__ninp_$i$i420 = ((($124)) + 12|0);
       $125 = HEAP32[$__ninp_$i$i420>>2]|0;
       $__einp_$i$i421 = ((($124)) + 16|0);
       $126 = HEAP32[$__einp_$i$i421>>2]|0;
       $cmp$i$i422 = ($125|0)==($126|0);
       if ($cmp86) {
        if ($cmp$i$i422) {
         $vtable$i$i423 = HEAP32[$124>>2]|0;
         $vfn$i$i424 = ((($vtable$i$i423)) + 40|0);
         $127 = HEAP32[$vfn$i$i424>>2]|0;
         __THREW__ = 0;
         (invoke_ii($127|0,($124|0))|0);
         $128 = __THREW__; __THREW__ = 0;
         $129 = $128&1;
         if ($129) {
          label = 35;
          break L24;
         }
        } else {
         $incdec$ptr$i$i426 = ((($125)) + 1|0);
         HEAP32[$__ninp_$i$i420>>2] = $incdec$ptr$i$i426;
         $130 = HEAP8[$125>>0]|0;
         (__ZNSt3__211char_traitsIcE11to_int_typeEc($130)|0);
        }
        $131 = HEAP8[$__size_$i$i>>0]|0;
        $tobool$i$i434 = ($131<<24>>24)<(0);
        $132 = HEAP32[$__size_$i3$i>>2]|0;
        $conv$i$i437 = $131&255;
        $cond$i439 = $tobool$i$i434 ? $132 : $conv$i$i437;
        $cmp91 = ($cond$i439>>>0)>(1);
        $__psn$__trailing_sign$099 = $cmp91 ? $__psn : $__trailing_sign$0;
        $__trailing_sign$1 = $__psn$__trailing_sign$099;
        break L49;
       }
       if ($cmp$i$i422) {
        $vtable$i$i445 = HEAP32[$124>>2]|0;
        $vfn$i$i446 = ((($vtable$i$i445)) + 36|0);
        $133 = HEAP32[$vfn$i$i446>>2]|0;
        __THREW__ = 0;
        $call$i$i453 = (invoke_ii($133|0,($124|0))|0);
        $134 = __THREW__; __THREW__ = 0;
        $135 = $134&1;
        if ($135) {
         label = 35;
         break L24;
        } else {
         $retval$0$i$i450 = $call$i$i453;
        }
       } else {
        $136 = HEAP8[$125>>0]|0;
        $call3$i$i448 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($136)|0);
        $retval$0$i$i450 = $call3$i$i448;
       }
       $conv$i451 = $retval$0$i$i450&255;
       $137 = HEAP8[$__size_$i$i279>>0]|0;
       $tobool$i$i$i457 = ($137<<24>>24)<(0);
       $138 = HEAP32[$__nsn>>2]|0;
       $cond$i$i462 = $tobool$i$i$i457 ? $138 : $__nsn;
       $139 = HEAP8[$cond$i$i462>>0]|0;
       $cmp101 = ($conv$i451<<24>>24)==($139<<24>>24);
       if (!($cmp101)) {
        label = 109;
        break L24;
       }
       $140 = HEAP32[$__b>>2]|0;
       $__ninp_$i$i465 = ((($140)) + 12|0);
       $141 = HEAP32[$__ninp_$i$i465>>2]|0;
       $__einp_$i$i466 = ((($140)) + 16|0);
       $142 = HEAP32[$__einp_$i$i466>>2]|0;
       $cmp$i$i467 = ($141|0)==($142|0);
       if ($cmp$i$i467) {
        $vtable$i$i468 = HEAP32[$140>>2]|0;
        $vfn$i$i469 = ((($vtable$i$i468)) + 40|0);
        $143 = HEAP32[$vfn$i$i469>>2]|0;
        __THREW__ = 0;
        (invoke_ii($143|0,($140|0))|0);
        $144 = __THREW__; __THREW__ = 0;
        $145 = $144&1;
        if ($145) {
         label = 35;
         break L24;
        }
       } else {
        $incdec$ptr$i$i471 = ((($141)) + 1|0);
        HEAP32[$__ninp_$i$i465>>2] = $incdec$ptr$i$i471;
        $146 = HEAP8[$141>>0]|0;
        (__ZNSt3__211char_traitsIcE11to_int_typeEc($146)|0);
       }
       HEAP8[$__neg>>0] = 1;
       $147 = HEAP8[$__size_$i$i279>>0]|0;
       $tobool$i$i479 = ($147<<24>>24)<(0);
       $148 = HEAP32[$__size_$i3$i281>>2]|0;
       $conv$i$i482 = $147&255;
       $cond$i484 = $tobool$i$i479 ? $148 : $conv$i$i482;
       $cmp106 = ($cond$i484>>>0)>(1);
       $__nsn$__trailing_sign$0100 = $cmp106 ? $__nsn : $__trailing_sign$0;
       $__trailing_sign$1 = $__nsn$__trailing_sign$0100;
      }
      break;
     }
     case 2:  {
      $cmp119 = ($__p$0>>>0)<(2);
      $or$cond = $cmp119 | $tobool344;
      if (!($or$cond)) {
       $cmp120 = ($__p$0|0)==(2);
       $150 = HEAP8[$arrayidx123>>0]|0;
       $cmp125 = ($150<<24>>24)!=(0);
       $151 = $cmp120 & $cmp125;
       $brmerge = $cmp1291028 | $151;
       if (!($brmerge)) {
        $__trailing_sign$1 = 0;
        break L49;
       }
      }
      $152 = HEAP8[$__size_$i$i$i487>>0]|0;
      $tobool$i$i$i488 = ($152<<24>>24)<(0);
      $153 = HEAP32[$__sym>>2]|0;
      $cond$i$i493 = $tobool$i$i$i488 ? $153 : $__sym;
      $154 = $cond$i$i493;
      $cmp138 = ($__p$0|0)==(0);
      L115: do {
       if ($cmp138) {
        $$pre$i17$i$i697 = $397;$168 = $152;$170 = $153;$179 = $397;$__sym_curr_char$sroa$0$0 = $154;
       } else {
        $sub = (($__p$0) + -1)|0;
        $arrayidx140 = (($__pat) + ($sub)|0);
        $155 = HEAP8[$arrayidx140>>0]|0;
        $switch = ($155&255)<(2);
        if ($switch) {
         $156 = HEAP32[$__size_$i3$i$i>>2]|0;
         $conv$i$i$i = $152&255;
         $cond$i6$i = $tobool$i$i$i488 ? $156 : $conv$i$i$i;
         $add$ptr$i499 = (($cond$i$i493) + ($cond$i6$i)|0);
         $__sym_space_end$sroa$0$0 = $154;
         while(1) {
          $157 = $__sym_space_end$sroa$0$0;
          $lnot$i = ($157|0)==($add$ptr$i499|0);
          if ($lnot$i) {
           break;
          }
          $158 = HEAP8[$157>>0]|0;
          $cmp2$i500 = ($158<<24>>24)>(-1);
          if (!($cmp2$i500)) {
           break;
          }
          $conv$i501 = $158 << 24 >> 24;
          $159 = HEAP32[$__tab_$i>>2]|0;
          $arrayidx$i503 = (($159) + ($conv$i501<<1)|0);
          $160 = HEAP16[$arrayidx$i503>>1]|0;
          $and3$i504 = $160 & 8192;
          $cmp6$i505 = ($and3$i504<<16>>16)==(0);
          if ($cmp6$i505) {
           break;
          }
          $incdec$ptr$i = ((($157)) + 1|0);
          $161 = $incdec$ptr$i;
          $__sym_space_end$sroa$0$0 = $161;
         }
         $sub$ptr$sub$i = (($__sym_space_end$sroa$0$0) - ($154))|0;
         $162 = HEAP8[$__size_$i$i520>>0]|0;
         $tobool$i$i521 = ($162<<24>>24)<(0);
         $163 = HEAP32[$__size_$i3$i522>>2]|0;
         $conv$i$i524 = $162&255;
         $cond$i526 = $tobool$i$i521 ? $163 : $conv$i$i524;
         $cmp170 = ($sub$ptr$sub$i>>>0)>($cond$i526>>>0);
         if ($cmp170) {
          $$pre$i17$i$i697 = $397;$168 = $152;$170 = $153;$179 = $397;$__sym_curr_char$sroa$0$0 = $154;
         } else {
          $164 = HEAP32[$__spaces>>2]|0;
          $cond$i7$i537 = $tobool$i$i521 ? $164 : $__spaces;
          $add$ptr$i539 = (($cond$i7$i537) + ($cond$i526)|0);
          $sub$i = (0 - ($sub$ptr$sub$i))|0;
          $add$ptr$i$i$i = (($add$ptr$i539) + ($sub$i)|0);
          $165 = $add$ptr$i$i$i;$incdec$ptr$i$i$i$sink = $cond$i$i493;
          while(1) {
           $lnot$i$i$i = ($165|0)==($add$ptr$i539|0);
           if ($lnot$i$i$i) {
            $$pre$i17$i$i697 = $397;$168 = $152;$170 = $153;$179 = $397;$__sym_curr_char$sroa$0$0 = $__sym_space_end$sroa$0$0;
            break L115;
           }
           $166 = HEAP8[$165>>0]|0;
           $167 = HEAP8[$incdec$ptr$i$i$i$sink>>0]|0;
           $cmp$i$i$i = ($166<<24>>24)==($167<<24>>24);
           if (!($cmp$i$i$i)) {
            $$pre$i17$i$i697 = $397;$168 = $152;$170 = $153;$179 = $397;$__sym_curr_char$sroa$0$0 = $154;
            break L115;
           }
           $incdec$ptr$i2$i$i = ((($165)) + 1|0);
           $incdec$ptr$i$i$i = ((($incdec$ptr$i$i$i$sink)) + 1|0);
           $165 = $incdec$ptr$i2$i$i;$incdec$ptr$i$i$i$sink = $incdec$ptr$i$i$i;
          }
         }
        } else {
         $$pre$i17$i$i697 = $397;$168 = $152;$170 = $153;$179 = $397;$__sym_curr_char$sroa$0$0 = $154;
        }
       }
      } while(0);
      L129: while(1) {
       $tobool$i$i$i625 = ($168<<24>>24)<(0);
       $169 = HEAP32[$__size_$i3$i$i>>2]|0;
       $conv$i$i$i630 = $168&255;
       $cond$i7$i632 = $tobool$i$i$i625 ? $170 : $__sym;
       $cond$i6$i633 = $tobool$i$i$i625 ? $169 : $conv$i$i$i630;
       $add$ptr$i634 = (($cond$i7$i632) + ($cond$i6$i633)|0);
       $171 = $__sym_curr_char$sroa$0$0;
       $lnot$i638 = ($171|0)==($add$ptr$i634|0);
       if ($lnot$i638) {
        $$lcssa = $add$ptr$i634;
        break;
       }
       $172 = HEAP32[$__b>>2]|0;
       $tobool$i$i$i663 = ($172|0)==(0|0);
       do {
        if ($tobool$i$i$i663) {
         $186 = 1;
        } else {
         $__ninp_$i$i$i$i664 = ((($172)) + 12|0);
         $173 = HEAP32[$__ninp_$i$i$i$i664>>2]|0;
         $__einp_$i$i$i$i665 = ((($172)) + 16|0);
         $174 = HEAP32[$__einp_$i$i$i$i665>>2]|0;
         $cmp$i$i$i$i666 = ($173|0)==($174|0);
         if ($cmp$i$i$i$i666) {
          $vtable$i$i$i$i668 = HEAP32[$172>>2]|0;
          $vfn$i$i$i$i669 = ((($vtable$i$i$i$i668)) + 36|0);
          $175 = HEAP32[$vfn$i$i$i$i669>>2]|0;
          __THREW__ = 0;
          $call$i$i$i$i703 = (invoke_ii($175|0,($172|0))|0);
          $176 = __THREW__; __THREW__ = 0;
          $177 = $176&1;
          if ($177) {
           label = 148;
           break L24;
          } else {
           $retval$0$i$i$i$i673 = $call$i$i$i$i703;
          }
         } else {
          $178 = HEAP8[$173>>0]|0;
          $call3$i$i$i$i671 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($178)|0);
          $retval$0$i$i$i$i673 = $call3$i$i$i$i671;
         }
         $call3$i$i$i674 = (__ZNSt3__211char_traitsIcE3eofEv()|0);
         $call4$i$i$i675 = (__ZNSt3__211char_traitsIcE11eq_int_typeEii($retval$0$i$i$i$i673,$call3$i$i$i674)|0);
         if ($call4$i$i$i675) {
          HEAP32[$__b>>2] = 0;
          $186 = 1;
          break;
         } else {
          $$pre$i$i$i677 = HEAP32[$__b>>2]|0;
          $phitmp$i$i$i678 = ($$pre$i$i$i677|0)==(0|0);
          $186 = $phitmp$i$i$i678;
          break;
         }
        }
       } while(0);
       $tobool$i2$i$i682 = ($179|0)==(0|0);
       do {
        if ($tobool$i2$i$i682) {
         $$pre$i17$i$i6971119 = $$pre$i17$i$i697;
         label = 138;
        } else {
         $__ninp_$i$i3$i$i684 = ((($179)) + 12|0);
         $180 = HEAP32[$__ninp_$i$i3$i$i684>>2]|0;
         $__einp_$i$i4$i$i685 = ((($179)) + 16|0);
         $181 = HEAP32[$__einp_$i$i4$i$i685>>2]|0;
         $cmp$i$i5$i$i686 = ($180|0)==($181|0);
         if ($cmp$i$i5$i$i686) {
          $vtable$i$i7$i$i688 = HEAP32[$179>>2]|0;
          $vfn$i$i8$i$i689 = ((($vtable$i$i7$i$i688)) + 36|0);
          $182 = HEAP32[$vfn$i$i8$i$i689>>2]|0;
          __THREW__ = 0;
          $call$i$i9$i$i705 = (invoke_ii($182|0,($179|0))|0);
          $183 = __THREW__; __THREW__ = 0;
          $184 = $183&1;
          if ($184) {
           label = 148;
           break L24;
          } else {
           $retval$0$i$i13$i$i693 = $call$i$i9$i$i705;
          }
         } else {
          $185 = HEAP8[$180>>0]|0;
          $call3$i$i11$i$i691 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($185)|0);
          $retval$0$i$i13$i$i693 = $call3$i$i11$i$i691;
         }
         $call3$i14$i$i694 = (__ZNSt3__211char_traitsIcE3eofEv()|0);
         $call4$i15$i$i695 = (__ZNSt3__211char_traitsIcE11eq_int_typeEii($retval$0$i$i13$i$i693,$call3$i14$i$i694)|0);
         if ($call4$i15$i$i695) {
          HEAP32[$__e>>2] = 0;
          $$pre$i17$i$i6971119 = 0;
          label = 138;
          break;
         } else {
          $phitmp$i18$i$i698 = ($$pre$i17$i$i697|0)==(0|0);
          $cmptmp$i$i701 = $186 ^ $phitmp$i18$i$i698;
          if ($cmptmp$i$i701) {
           $$pre$i17$i$i6971118 = $$pre$i17$i$i697;$399 = $$pre$i17$i$i697;
           break;
          } else {
           $$lcssa = $171;
           break L129;
          }
         }
        }
       } while(0);
       if ((label|0) == 138) {
        label = 0;
        if ($186) {
         $$lcssa = $171;
         break;
        } else {
         $$pre$i17$i$i6971118 = $$pre$i17$i$i6971119;$399 = 0;
        }
       }
       $187 = HEAP32[$__b>>2]|0;
       $__ninp_$i$i708 = ((($187)) + 12|0);
       $188 = HEAP32[$__ninp_$i$i708>>2]|0;
       $__einp_$i$i709 = ((($187)) + 16|0);
       $189 = HEAP32[$__einp_$i$i709>>2]|0;
       $cmp$i$i710 = ($188|0)==($189|0);
       if ($cmp$i$i710) {
        $vtable$i$i711 = HEAP32[$187>>2]|0;
        $vfn$i$i712 = ((($vtable$i$i711)) + 36|0);
        $190 = HEAP32[$vfn$i$i712>>2]|0;
        __THREW__ = 0;
        $call$i$i719 = (invoke_ii($190|0,($187|0))|0);
        $191 = __THREW__; __THREW__ = 0;
        $192 = $191&1;
        if ($192) {
         label = 148;
         break L24;
        } else {
         $retval$0$i$i716 = $call$i$i719;
        }
       } else {
        $193 = HEAP8[$188>>0]|0;
        $call3$i$i714 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($193)|0);
        $retval$0$i$i716 = $call3$i$i714;
       }
       $conv$i717 = $retval$0$i$i716&255;
       $194 = HEAP8[$171>>0]|0;
       $cmp209 = ($conv$i717<<24>>24)==($194<<24>>24);
       if (!($cmp209)) {
        $$lcssa = $171;
        break;
       }
       $195 = HEAP32[$__b>>2]|0;
       $__ninp_$i$i723 = ((($195)) + 12|0);
       $196 = HEAP32[$__ninp_$i$i723>>2]|0;
       $__einp_$i$i724 = ((($195)) + 16|0);
       $197 = HEAP32[$__einp_$i$i724>>2]|0;
       $cmp$i$i725 = ($196|0)==($197|0);
       if ($cmp$i$i725) {
        $vtable$i$i726 = HEAP32[$195>>2]|0;
        $vfn$i$i727 = ((($vtable$i$i726)) + 40|0);
        $198 = HEAP32[$vfn$i$i727>>2]|0;
        __THREW__ = 0;
        (invoke_ii($198|0,($195|0))|0);
        $199 = __THREW__; __THREW__ = 0;
        $200 = $199&1;
        if ($200) {
         label = 149;
         break L24;
        }
       } else {
        $incdec$ptr$i$i729 = ((($196)) + 1|0);
        HEAP32[$__ninp_$i$i723>>2] = $incdec$ptr$i$i729;
        $201 = HEAP8[$196>>0]|0;
        (__ZNSt3__211char_traitsIcE11to_int_typeEc($201)|0);
       }
       $incdec$ptr$i736 = ((($171)) + 1|0);
       $202 = $incdec$ptr$i736;
       $$pre1116 = HEAP8[$__size_$i$i$i487>>0]|0;
       $$pre1117 = HEAP32[$__sym>>2]|0;
       $$pre$i17$i$i697 = $$pre$i17$i$i6971118;$168 = $$pre1116;$170 = $$pre1117;$179 = $399;$__sym_curr_char$sroa$0$0 = $202;
      }
      if ($cmp1291028) {
       $207 = HEAP8[$__size_$i$i$i487>>0]|0;
       $tobool$i$i$i739 = ($207<<24>>24)<(0);
       $208 = HEAP32[$__sym>>2]|0;
       $209 = HEAP32[$__size_$i3$i$i>>2]|0;
       $conv$i$i$i744 = $207&255;
       $cond$i7$i746 = $tobool$i$i$i739 ? $208 : $__sym;
       $cond$i6$i747 = $tobool$i$i$i739 ? $209 : $conv$i$i$i744;
       $add$ptr$i748 = (($cond$i7$i746) + ($cond$i6$i747)|0);
       $lnot$i752 = ($$lcssa|0)==($add$ptr$i748|0);
       if ($lnot$i752) {
        $__trailing_sign$1 = $__trailing_sign$0;
       } else {
        label = 152;
        break L24;
       }
      } else {
       $__trailing_sign$1 = $__trailing_sign$0;
      }
      break;
     }
     case 4:  {
      $$pre$i17$i$i788 = $397;$218 = $397;$__ng$0 = 0;
      L165: while(1) {
       $211 = HEAP32[$__b>>2]|0;
       $tobool$i$i$i754 = ($211|0)==(0|0);
       do {
        if ($tobool$i$i$i754) {
         $225 = 1;
        } else {
         $__ninp_$i$i$i$i755 = ((($211)) + 12|0);
         $212 = HEAP32[$__ninp_$i$i$i$i755>>2]|0;
         $__einp_$i$i$i$i756 = ((($211)) + 16|0);
         $213 = HEAP32[$__einp_$i$i$i$i756>>2]|0;
         $cmp$i$i$i$i757 = ($212|0)==($213|0);
         if ($cmp$i$i$i$i757) {
          $vtable$i$i$i$i759 = HEAP32[$211>>2]|0;
          $vfn$i$i$i$i760 = ((($vtable$i$i$i$i759)) + 36|0);
          $214 = HEAP32[$vfn$i$i$i$i760>>2]|0;
          __THREW__ = 0;
          $call$i$i$i$i794 = (invoke_ii($214|0,($211|0))|0);
          $215 = __THREW__; __THREW__ = 0;
          $216 = $215&1;
          if ($216) {
           label = 244;
           break L24;
          } else {
           $retval$0$i$i$i$i764 = $call$i$i$i$i794;
          }
         } else {
          $217 = HEAP8[$212>>0]|0;
          $call3$i$i$i$i762 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($217)|0);
          $retval$0$i$i$i$i764 = $call3$i$i$i$i762;
         }
         $call3$i$i$i765 = (__ZNSt3__211char_traitsIcE3eofEv()|0);
         $call4$i$i$i766 = (__ZNSt3__211char_traitsIcE11eq_int_typeEii($retval$0$i$i$i$i764,$call3$i$i$i765)|0);
         if ($call4$i$i$i766) {
          HEAP32[$__b>>2] = 0;
          $225 = 1;
          break;
         } else {
          $$pre$i$i$i768 = HEAP32[$__b>>2]|0;
          $phitmp$i$i$i769 = ($$pre$i$i$i768|0)==(0|0);
          $225 = $phitmp$i$i$i769;
          break;
         }
        }
       } while(0);
       $tobool$i2$i$i773 = ($218|0)==(0|0);
       do {
        if ($tobool$i2$i$i773) {
         $$pre$i17$i$i7881109 = $$pre$i17$i$i788;
         label = 166;
        } else {
         $__ninp_$i$i3$i$i775 = ((($218)) + 12|0);
         $219 = HEAP32[$__ninp_$i$i3$i$i775>>2]|0;
         $__einp_$i$i4$i$i776 = ((($218)) + 16|0);
         $220 = HEAP32[$__einp_$i$i4$i$i776>>2]|0;
         $cmp$i$i5$i$i777 = ($219|0)==($220|0);
         if ($cmp$i$i5$i$i777) {
          $vtable$i$i7$i$i779 = HEAP32[$218>>2]|0;
          $vfn$i$i8$i$i780 = ((($vtable$i$i7$i$i779)) + 36|0);
          $221 = HEAP32[$vfn$i$i8$i$i780>>2]|0;
          __THREW__ = 0;
          $call$i$i9$i$i796 = (invoke_ii($221|0,($218|0))|0);
          $222 = __THREW__; __THREW__ = 0;
          $223 = $222&1;
          if ($223) {
           label = 244;
           break L24;
          } else {
           $retval$0$i$i13$i$i784 = $call$i$i9$i$i796;
          }
         } else {
          $224 = HEAP8[$219>>0]|0;
          $call3$i$i11$i$i782 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($224)|0);
          $retval$0$i$i13$i$i784 = $call3$i$i11$i$i782;
         }
         $call3$i14$i$i785 = (__ZNSt3__211char_traitsIcE3eofEv()|0);
         $call4$i15$i$i786 = (__ZNSt3__211char_traitsIcE11eq_int_typeEii($retval$0$i$i13$i$i784,$call3$i14$i$i785)|0);
         if ($call4$i15$i$i786) {
          HEAP32[$__e>>2] = 0;
          $$pre$i17$i$i7881109 = 0;
          label = 166;
          break;
         } else {
          $phitmp$i18$i$i789 = ($$pre$i17$i$i788|0)==(0|0);
          $cmptmp$i$i792 = $225 ^ $phitmp$i18$i$i789;
          if ($cmptmp$i$i792) {
           $$pre$i17$i$i7881111 = $$pre$i17$i$i788;$400 = $$pre$i17$i$i788;
           break;
          } else {
           $$pre$i17$i$i879 = $$pre$i17$i$i788;
           break L165;
          }
         }
        }
       } while(0);
       if ((label|0) == 166) {
        label = 0;
        if ($225) {
         $$pre$i17$i$i879 = $$pre$i17$i$i7881109;
         break;
        } else {
         $$pre$i17$i$i7881111 = $$pre$i17$i$i7881109;$400 = 0;
        }
       }
       $226 = HEAP32[$__b>>2]|0;
       $__ninp_$i$i799 = ((($226)) + 12|0);
       $227 = HEAP32[$__ninp_$i$i799>>2]|0;
       $__einp_$i$i800 = ((($226)) + 16|0);
       $228 = HEAP32[$__einp_$i$i800>>2]|0;
       $cmp$i$i801 = ($227|0)==($228|0);
       if ($cmp$i$i801) {
        $vtable$i$i802 = HEAP32[$226>>2]|0;
        $vfn$i$i803 = ((($vtable$i$i802)) + 36|0);
        $229 = HEAP32[$vfn$i$i803>>2]|0;
        __THREW__ = 0;
        $call$i$i810 = (invoke_ii($229|0,($226|0))|0);
        $230 = __THREW__; __THREW__ = 0;
        $231 = $230&1;
        if ($231) {
         label = 244;
         break L24;
        } else {
         $retval$0$i$i807 = $call$i$i810;
        }
       } else {
        $232 = HEAP8[$227>>0]|0;
        $call3$i$i805 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($232)|0);
        $retval$0$i$i807 = $call3$i$i805;
       }
       $conv$i808 = $retval$0$i$i807&255;
       $cmp2$i812 = ($conv$i808<<24>>24)>(-1);
       if ($cmp2$i812) {
        $sext1038 = $retval$0$i$i807 << 24;
        $conv$i813 = $sext1038 >> 24;
        $233 = HEAP32[$__tab_$i>>2]|0;
        $arrayidx$i815 = (($233) + ($conv$i813<<1)|0);
        $234 = HEAP16[$arrayidx$i815>>1]|0;
        $and3$i816 = $234 & 2048;
        $cmp6$i817 = ($and3$i816<<16>>16)==(0);
        if ($cmp6$i817) {
         label = 177;
        } else {
         $235 = HEAP32[$__wn>>2]|0;
         $236 = HEAP32[$__we$addr>>2]|0;
         $cmp250 = ($235|0)==($236|0);
         if ($cmp250) {
          __THREW__ = 0;
          invoke_viii(446,($__wb|0),($__wn|0),($__we$addr|0));
          $237 = __THREW__; __THREW__ = 0;
          $238 = $237&1;
          if ($238) {
           label = 244;
           break L24;
          }
          $$pre = HEAP32[$__wn>>2]|0;
          $239 = $$pre;
         } else {
          $239 = $235;
         }
         $incdec$ptr = ((($239)) + 1|0);
         HEAP32[$__wn>>2] = $incdec$ptr;
         HEAP8[$239>>0] = $conv$i808;
         $inc = (($__ng$0) + 1)|0;
         $__ng$2$ph = $inc;
        }
       } else {
        label = 177;
       }
       if ((label|0) == 177) {
        label = 0;
        $240 = HEAP8[$__size_$i$i822>>0]|0;
        $tobool$i$i823 = ($240<<24>>24)<(0);
        $241 = HEAP32[$__size_$i3$i824>>2]|0;
        $conv$i$i826 = $240&255;
        $cond$i828 = $tobool$i$i823 ? $241 : $conv$i$i826;
        $cmp256 = ($cond$i828|0)!=(0);
        $cmp258 = ($__ng$0|0)!=(0);
        $or$cond7 = $cmp258 & $cmp256;
        $242 = HEAP8[$__ts>>0]|0;
        $cmp262 = ($conv$i808<<24>>24)==($242<<24>>24);
        $or$cond102 = $cmp262 & $or$cond7;
        if (!($or$cond102)) {
         $$pre$i17$i$i879 = $$pre$i17$i$i7881111;
         break;
        }
        $243 = HEAP32[$__gn>>2]|0;
        $244 = HEAP32[$__ge>>2]|0;
        $cmp264 = ($243|0)==($244|0);
        if ($cmp264) {
         __THREW__ = 0;
         invoke_viii(447,($__gb|0),($__gn|0),($__ge|0));
         $245 = __THREW__; __THREW__ = 0;
         $246 = $245&1;
         if ($246) {
          label = 244;
          break L24;
         }
         $$pre1112 = HEAP32[$__gn>>2]|0;
         $247 = $$pre1112;
        } else {
         $247 = $243;
        }
        $incdec$ptr268 = ((($247)) + 4|0);
        HEAP32[$__gn>>2] = $incdec$ptr268;
        HEAP32[$247>>2] = $__ng$0;
        $__ng$2$ph = 0;
       }
       $248 = HEAP32[$__b>>2]|0;
       $__ninp_$i$i831 = ((($248)) + 12|0);
       $249 = HEAP32[$__ninp_$i$i831>>2]|0;
       $__einp_$i$i832 = ((($248)) + 16|0);
       $250 = HEAP32[$__einp_$i$i832>>2]|0;
       $cmp$i$i833 = ($249|0)==($250|0);
       if ($cmp$i$i833) {
        $vtable$i$i834 = HEAP32[$248>>2]|0;
        $vfn$i$i835 = ((($vtable$i$i834)) + 40|0);
        $251 = HEAP32[$vfn$i$i835>>2]|0;
        __THREW__ = 0;
        (invoke_ii($251|0,($248|0))|0);
        $252 = __THREW__; __THREW__ = 0;
        $253 = $252&1;
        if ($253) {
         label = 244;
         break L24;
        } else {
         $$pre$i17$i$i788 = $$pre$i17$i$i7881111;$218 = $400;$__ng$0 = $__ng$2$ph;
         continue;
        }
       } else {
        $incdec$ptr$i$i837 = ((($249)) + 1|0);
        HEAP32[$__ninp_$i$i831>>2] = $incdec$ptr$i$i837;
        $254 = HEAP8[$249>>0]|0;
        (__ZNSt3__211char_traitsIcE11to_int_typeEc($254)|0);
        $$pre$i17$i$i788 = $$pre$i17$i$i7881111;$218 = $400;$__ng$0 = $__ng$2$ph;
        continue;
       }
      }
      $255 = HEAP32[$__gb>>2]|0;
      $256 = HEAP32[$__gn>>2]|0;
      $cmp279 = ($255|0)!=($256|0);
      $cmp281 = ($__ng$0|0)!=(0);
      $or$cond8 = $cmp281 & $cmp279;
      if ($or$cond8) {
       $257 = HEAP32[$__ge>>2]|0;
       $cmp283 = ($256|0)==($257|0);
       if ($cmp283) {
        __THREW__ = 0;
        invoke_viii(447,($__gb|0),($__gn|0),($__ge|0));
        $258 = __THREW__; __THREW__ = 0;
        $259 = $258&1;
        if ($259) {
         label = 244;
         break L24;
        }
        $$pre1113 = HEAP32[$__gn>>2]|0;
        $260 = $$pre1113;
       } else {
        $260 = $256;
       }
       $incdec$ptr287 = ((($260)) + 4|0);
       HEAP32[$__gn>>2] = $incdec$ptr287;
       HEAP32[$260>>2] = $__ng$0;
      }
      $261 = HEAP32[$__fd>>2]|0;
      $cmp289 = ($261|0)>(0);
      L219: do {
       if ($cmp289) {
        $262 = HEAP32[$__b>>2]|0;
        $tobool$i$i$i845 = ($262|0)==(0|0);
        do {
         if ($tobool$i$i$i845) {
          $401 = 1;
         } else {
          $__ninp_$i$i$i$i846 = ((($262)) + 12|0);
          $263 = HEAP32[$__ninp_$i$i$i$i846>>2]|0;
          $__einp_$i$i$i$i847 = ((($262)) + 16|0);
          $264 = HEAP32[$__einp_$i$i$i$i847>>2]|0;
          $cmp$i$i$i$i848 = ($263|0)==($264|0);
          if ($cmp$i$i$i$i848) {
           $vtable$i$i$i$i850 = HEAP32[$262>>2]|0;
           $vfn$i$i$i$i851 = ((($vtable$i$i$i$i850)) + 36|0);
           $265 = HEAP32[$vfn$i$i$i$i851>>2]|0;
           __THREW__ = 0;
           $call$i$i$i$i886 = (invoke_ii($265|0,($262|0))|0);
           $266 = __THREW__; __THREW__ = 0;
           $267 = $266&1;
           if ($267) {
            label = 244;
            break L24;
           } else {
            $retval$0$i$i$i$i855 = $call$i$i$i$i886;
           }
          } else {
           $268 = HEAP8[$263>>0]|0;
           $call3$i$i$i$i853 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($268)|0);
           $retval$0$i$i$i$i855 = $call3$i$i$i$i853;
          }
          $call3$i$i$i856 = (__ZNSt3__211char_traitsIcE3eofEv()|0);
          $call4$i$i$i857 = (__ZNSt3__211char_traitsIcE11eq_int_typeEii($retval$0$i$i$i$i855,$call3$i$i$i856)|0);
          if ($call4$i$i$i857) {
           HEAP32[$__b>>2] = 0;
           $401 = 1;
           break;
          } else {
           $$pre$i$i$i859 = HEAP32[$__b>>2]|0;
           $phitmp$i$i$i860 = ($$pre$i$i$i859|0)==(0|0);
           $401 = $phitmp$i$i$i860;
           break;
          }
         }
        } while(0);
        $tobool$i2$i$i864 = ($$pre$i17$i$i879|0)==(0|0);
        do {
         if ($tobool$i2$i$i864) {
          label = 204;
         } else {
          $__ninp_$i$i3$i$i866 = ((($$pre$i17$i$i879)) + 12|0);
          $269 = HEAP32[$__ninp_$i$i3$i$i866>>2]|0;
          $__einp_$i$i4$i$i867 = ((($$pre$i17$i$i879)) + 16|0);
          $270 = HEAP32[$__einp_$i$i4$i$i867>>2]|0;
          $cmp$i$i5$i$i868 = ($269|0)==($270|0);
          if ($cmp$i$i5$i$i868) {
           $vtable$i$i7$i$i870 = HEAP32[$$pre$i17$i$i879>>2]|0;
           $vfn$i$i8$i$i871 = ((($vtable$i$i7$i$i870)) + 36|0);
           $271 = HEAP32[$vfn$i$i8$i$i871>>2]|0;
           __THREW__ = 0;
           $call$i$i9$i$i888 = (invoke_ii($271|0,($$pre$i17$i$i879|0))|0);
           $272 = __THREW__; __THREW__ = 0;
           $273 = $272&1;
           if ($273) {
            label = 244;
            break L24;
           } else {
            $retval$0$i$i13$i$i875 = $call$i$i9$i$i888;
           }
          } else {
           $274 = HEAP8[$269>>0]|0;
           $call3$i$i11$i$i873 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($274)|0);
           $retval$0$i$i13$i$i875 = $call3$i$i11$i$i873;
          }
          $call3$i14$i$i876 = (__ZNSt3__211char_traitsIcE3eofEv()|0);
          $call4$i15$i$i877 = (__ZNSt3__211char_traitsIcE11eq_int_typeEii($retval$0$i$i13$i$i875,$call3$i14$i$i876)|0);
          if ($call4$i15$i$i877) {
           HEAP32[$__e>>2] = 0;
           label = 204;
           break;
          } else {
           if ($401) {
            $402 = $$pre$i17$i$i879;
            break;
           } else {
            label = 243;
            break L24;
           }
          }
         }
        } while(0);
        if ((label|0) == 204) {
         label = 0;
         if ($401) {
          label = 243;
          break L24;
         } else {
          $402 = 0;
         }
        }
        $275 = HEAP32[$__b>>2]|0;
        $__ninp_$i$i891 = ((($275)) + 12|0);
        $276 = HEAP32[$__ninp_$i$i891>>2]|0;
        $__einp_$i$i892 = ((($275)) + 16|0);
        $277 = HEAP32[$__einp_$i$i892>>2]|0;
        $cmp$i$i893 = ($276|0)==($277|0);
        if ($cmp$i$i893) {
         $vtable$i$i894 = HEAP32[$275>>2]|0;
         $vfn$i$i895 = ((($vtable$i$i894)) + 36|0);
         $278 = HEAP32[$vfn$i$i895>>2]|0;
         __THREW__ = 0;
         $call$i$i902 = (invoke_ii($278|0,($275|0))|0);
         $279 = __THREW__; __THREW__ = 0;
         $280 = $279&1;
         if ($280) {
          label = 244;
          break L24;
         } else {
          $retval$0$i$i899 = $call$i$i902;
         }
        } else {
         $281 = HEAP8[$276>>0]|0;
         $call3$i$i897 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($281)|0);
         $retval$0$i$i899 = $call3$i$i897;
        }
        $conv$i900 = $retval$0$i$i899&255;
        $282 = HEAP8[$__dp>>0]|0;
        $cmp298 = ($conv$i900<<24>>24)==($282<<24>>24);
        if (!($cmp298)) {
         label = 243;
         break L24;
        }
        $283 = HEAP32[$__b>>2]|0;
        $__ninp_$i$i905 = ((($283)) + 12|0);
        $284 = HEAP32[$__ninp_$i$i905>>2]|0;
        $__einp_$i$i906 = ((($283)) + 16|0);
        $285 = HEAP32[$__einp_$i$i906>>2]|0;
        $cmp$i$i907 = ($284|0)==($285|0);
        if ($cmp$i$i907) {
         $vtable$i$i908 = HEAP32[$283>>2]|0;
         $vfn$i$i909 = ((($vtable$i$i908)) + 40|0);
         $286 = HEAP32[$vfn$i$i909>>2]|0;
         __THREW__ = 0;
         (invoke_ii($286|0,($283|0))|0);
         $287 = __THREW__; __THREW__ = 0;
         $288 = $287&1;
         if ($288) {
          label = 244;
          break L24;
         } else {
          $$pre$i17$i$i952 = $402;$298 = $402;
         }
        } else {
         $incdec$ptr$i$i911 = ((($284)) + 1|0);
         HEAP32[$__ninp_$i$i905>>2] = $incdec$ptr$i$i911;
         $289 = HEAP8[$284>>0]|0;
         (__ZNSt3__211char_traitsIcE11to_int_typeEc($289)|0);
         $$pre$i17$i$i952 = $402;$298 = $402;
        }
        while(1) {
         $290 = HEAP32[$__fd>>2]|0;
         $cmp305 = ($290|0)>(0);
         if (!($cmp305)) {
          break L219;
         }
         $291 = HEAP32[$__b>>2]|0;
         $tobool$i$i$i918 = ($291|0)==(0|0);
         do {
          if ($tobool$i$i$i918) {
           $305 = 1;
          } else {
           $__ninp_$i$i$i$i919 = ((($291)) + 12|0);
           $292 = HEAP32[$__ninp_$i$i$i$i919>>2]|0;
           $__einp_$i$i$i$i920 = ((($291)) + 16|0);
           $293 = HEAP32[$__einp_$i$i$i$i920>>2]|0;
           $cmp$i$i$i$i921 = ($292|0)==($293|0);
           if ($cmp$i$i$i$i921) {
            $vtable$i$i$i$i923 = HEAP32[$291>>2]|0;
            $vfn$i$i$i$i924 = ((($vtable$i$i$i$i923)) + 36|0);
            $294 = HEAP32[$vfn$i$i$i$i924>>2]|0;
            __THREW__ = 0;
            $call$i$i$i$i959 = (invoke_ii($294|0,($291|0))|0);
            $295 = __THREW__; __THREW__ = 0;
            $296 = $295&1;
            if ($296) {
             label = 244;
             break L24;
            } else {
             $retval$0$i$i$i$i928 = $call$i$i$i$i959;
            }
           } else {
            $297 = HEAP8[$292>>0]|0;
            $call3$i$i$i$i926 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($297)|0);
            $retval$0$i$i$i$i928 = $call3$i$i$i$i926;
           }
           $call3$i$i$i929 = (__ZNSt3__211char_traitsIcE3eofEv()|0);
           $call4$i$i$i930 = (__ZNSt3__211char_traitsIcE11eq_int_typeEii($retval$0$i$i$i$i928,$call3$i$i$i929)|0);
           if ($call4$i$i$i930) {
            HEAP32[$__b>>2] = 0;
            $305 = 1;
            break;
           } else {
            $$pre$i$i$i932 = HEAP32[$__b>>2]|0;
            $phitmp$i$i$i933 = ($$pre$i$i$i932|0)==(0|0);
            $305 = $phitmp$i$i$i933;
            break;
           }
          }
         } while(0);
         $tobool$i2$i$i937 = ($298|0)==(0|0);
         do {
          if ($tobool$i2$i$i937) {
           $$pre$i17$i$i9521114$ph = $$pre$i17$i$i952;
           label = 227;
          } else {
           $__ninp_$i$i3$i$i939 = ((($298)) + 12|0);
           $299 = HEAP32[$__ninp_$i$i3$i$i939>>2]|0;
           $__einp_$i$i4$i$i940 = ((($298)) + 16|0);
           $300 = HEAP32[$__einp_$i$i4$i$i940>>2]|0;
           $cmp$i$i5$i$i941 = ($299|0)==($300|0);
           if ($cmp$i$i5$i$i941) {
            $vtable$i$i7$i$i943 = HEAP32[$298>>2]|0;
            $vfn$i$i8$i$i944 = ((($vtable$i$i7$i$i943)) + 36|0);
            $301 = HEAP32[$vfn$i$i8$i$i944>>2]|0;
            __THREW__ = 0;
            $call$i$i9$i$i961 = (invoke_ii($301|0,($298|0))|0);
            $302 = __THREW__; __THREW__ = 0;
            $303 = $302&1;
            if ($303) {
             label = 244;
             break L24;
            } else {
             $retval$0$i$i13$i$i948 = $call$i$i9$i$i961;
            }
           } else {
            $304 = HEAP8[$299>>0]|0;
            $call3$i$i11$i$i946 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($304)|0);
            $retval$0$i$i13$i$i948 = $call3$i$i11$i$i946;
           }
           $call3$i14$i$i949 = (__ZNSt3__211char_traitsIcE3eofEv()|0);
           $call4$i15$i$i950 = (__ZNSt3__211char_traitsIcE11eq_int_typeEii($retval$0$i$i13$i$i948,$call3$i14$i$i949)|0);
           if ($call4$i15$i$i950) {
            HEAP32[$__e>>2] = 0;
            $$pre$i17$i$i9521114$ph = 0;
            label = 227;
            break;
           } else {
            $phitmp$i18$i$i953 = ($$pre$i17$i$i952|0)==(0|0);
            $cmptmp$i$i956 = $305 ^ $phitmp$i18$i$i953;
            if ($cmptmp$i$i956) {
             $$pre$i17$i$i95211141130 = $$pre$i17$i$i952;$403 = $$pre$i17$i$i952;
             break;
            } else {
             label = 243;
             break L24;
            }
           }
          }
         } while(0);
         if ((label|0) == 227) {
          label = 0;
          if ($305) {
           label = 243;
           break L24;
          } else {
           $$pre$i17$i$i95211141130 = $$pre$i17$i$i9521114$ph;$403 = 0;
          }
         }
         $306 = HEAP32[$__b>>2]|0;
         $__ninp_$i$i964 = ((($306)) + 12|0);
         $307 = HEAP32[$__ninp_$i$i964>>2]|0;
         $__einp_$i$i965 = ((($306)) + 16|0);
         $308 = HEAP32[$__einp_$i$i965>>2]|0;
         $cmp$i$i966 = ($307|0)==($308|0);
         if ($cmp$i$i966) {
          $vtable$i$i967 = HEAP32[$306>>2]|0;
          $vfn$i$i968 = ((($vtable$i$i967)) + 36|0);
          $309 = HEAP32[$vfn$i$i968>>2]|0;
          __THREW__ = 0;
          $call$i$i975 = (invoke_ii($309|0,($306|0))|0);
          $310 = __THREW__; __THREW__ = 0;
          $311 = $310&1;
          if ($311) {
           label = 244;
           break L24;
          } else {
           $retval$0$i$i972 = $call$i$i975;
          }
         } else {
          $312 = HEAP8[$307>>0]|0;
          $call3$i$i970 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($312)|0);
          $retval$0$i$i972 = $call3$i$i970;
         }
         $conv$i973 = $retval$0$i$i972&255;
         $cmp2$i977 = ($conv$i973<<24>>24)>(-1);
         if (!($cmp2$i977)) {
          label = 243;
          break L24;
         }
         $sext = $retval$0$i$i972 << 24;
         $conv$i978 = $sext >> 24;
         $313 = HEAP32[$__tab_$i>>2]|0;
         $arrayidx$i980 = (($313) + ($conv$i978<<1)|0);
         $314 = HEAP16[$arrayidx$i980>>1]|0;
         $and3$i981 = $314 & 2048;
         $cmp6$i982 = ($and3$i981<<16>>16)==(0);
         if ($cmp6$i982) {
          label = 243;
          break L24;
         }
         $315 = HEAP32[$__wn>>2]|0;
         $316 = HEAP32[$__we$addr>>2]|0;
         $cmp317 = ($315|0)==($316|0);
         if ($cmp317) {
          __THREW__ = 0;
          invoke_viii(446,($__wb|0),($__wn|0),($__we$addr|0));
          $317 = __THREW__; __THREW__ = 0;
          $318 = $317&1;
          if ($318) {
           label = 244;
           break L24;
          }
         }
         $319 = HEAP32[$__b>>2]|0;
         $__ninp_$i$i987 = ((($319)) + 12|0);
         $320 = HEAP32[$__ninp_$i$i987>>2]|0;
         $__einp_$i$i988 = ((($319)) + 16|0);
         $321 = HEAP32[$__einp_$i$i988>>2]|0;
         $cmp$i$i989 = ($320|0)==($321|0);
         if ($cmp$i$i989) {
          $vtable$i$i990 = HEAP32[$319>>2]|0;
          $vfn$i$i991 = ((($vtable$i$i990)) + 36|0);
          $322 = HEAP32[$vfn$i$i991>>2]|0;
          __THREW__ = 0;
          $call$i$i998 = (invoke_ii($322|0,($319|0))|0);
          $323 = __THREW__; __THREW__ = 0;
          $324 = $323&1;
          if ($324) {
           label = 244;
           break L24;
          } else {
           $retval$0$i$i995 = $call$i$i998;
          }
         } else {
          $325 = HEAP8[$320>>0]|0;
          $call3$i$i993 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($325)|0);
          $retval$0$i$i995 = $call3$i$i993;
         }
         $conv$i996 = $retval$0$i$i995&255;
         $326 = HEAP32[$__wn>>2]|0;
         $incdec$ptr323 = ((($326)) + 1|0);
         HEAP32[$__wn>>2] = $incdec$ptr323;
         HEAP8[$326>>0] = $conv$i996;
         $327 = HEAP32[$__fd>>2]|0;
         $dec = (($327) + -1)|0;
         HEAP32[$__fd>>2] = $dec;
         $328 = HEAP32[$__b>>2]|0;
         $__ninp_$i$i650 = ((($328)) + 12|0);
         $329 = HEAP32[$__ninp_$i$i650>>2]|0;
         $__einp_$i$i651 = ((($328)) + 16|0);
         $330 = HEAP32[$__einp_$i$i651>>2]|0;
         $cmp$i$i652 = ($329|0)==($330|0);
         if ($cmp$i$i652) {
          $vtable$i$i653 = HEAP32[$328>>2]|0;
          $vfn$i$i654 = ((($vtable$i$i653)) + 40|0);
          $331 = HEAP32[$vfn$i$i654>>2]|0;
          __THREW__ = 0;
          (invoke_ii($331|0,($328|0))|0);
          $332 = __THREW__; __THREW__ = 0;
          $333 = $332&1;
          if ($333) {
           label = 244;
           break L24;
          } else {
           $$pre$i17$i$i952 = $$pre$i17$i$i95211141130;$298 = $403;
           continue;
          }
         } else {
          $incdec$ptr$i$i656 = ((($329)) + 1|0);
          HEAP32[$__ninp_$i$i650>>2] = $incdec$ptr$i$i656;
          $334 = HEAP8[$329>>0]|0;
          (__ZNSt3__211char_traitsIcE11to_int_typeEc($334)|0);
          $$pre$i17$i$i952 = $$pre$i17$i$i95211141130;$298 = $403;
          continue;
         }
        }
       }
      } while(0);
      $335 = HEAP32[$__wn>>2]|0;
      $336 = HEAP32[$__wb>>2]|0;
      $cmp330 = ($335|0)==($336|0);
      if ($cmp330) {
       label = 243;
       break L24;
      } else {
       $__trailing_sign$1 = $__trailing_sign$0;
      }
      break;
     }
     default: {
      $__trailing_sign$1 = $__trailing_sign$0;
     }
     }
    } while(0);
    L293: do {
     if ((label|0) == 49) {
      while(1) {
       label = 0;
       $42 = HEAP32[$__b>>2]|0;
       $tobool$i$i$i190 = ($42|0)==(0|0);
       do {
        if ($tobool$i$i$i190) {
         $56 = 1;
        } else {
         $__ninp_$i$i$i$i191 = ((($42)) + 12|0);
         $43 = HEAP32[$__ninp_$i$i$i$i191>>2]|0;
         $__einp_$i$i$i$i192 = ((($42)) + 16|0);
         $44 = HEAP32[$__einp_$i$i$i$i192>>2]|0;
         $cmp$i$i$i$i193 = ($43|0)==($44|0);
         if ($cmp$i$i$i$i193) {
          $vtable$i$i$i$i195 = HEAP32[$42>>2]|0;
          $vfn$i$i$i$i196 = ((($vtable$i$i$i$i195)) + 36|0);
          $45 = HEAP32[$vfn$i$i$i$i196>>2]|0;
          __THREW__ = 0;
          $call$i$i$i$i230 = (invoke_ii($45|0,($42|0))|0);
          $46 = __THREW__; __THREW__ = 0;
          $47 = $46&1;
          if ($47) {
           label = 35;
           break L24;
          } else {
           $retval$0$i$i$i$i200 = $call$i$i$i$i230;
          }
         } else {
          $48 = HEAP8[$43>>0]|0;
          $call3$i$i$i$i198 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($48)|0);
          $retval$0$i$i$i$i200 = $call3$i$i$i$i198;
         }
         $call3$i$i$i201 = (__ZNSt3__211char_traitsIcE3eofEv()|0);
         $call4$i$i$i202 = (__ZNSt3__211char_traitsIcE11eq_int_typeEii($retval$0$i$i$i$i200,$call3$i$i$i201)|0);
         if ($call4$i$i$i202) {
          HEAP32[$__b>>2] = 0;
          $56 = 1;
          break;
         } else {
          $$pre$i$i$i204 = HEAP32[$__b>>2]|0;
          $phitmp$i$i$i205 = ($$pre$i$i$i204|0)==(0|0);
          $56 = $phitmp$i$i$i205;
          break;
         }
        }
       } while(0);
       $tobool$i2$i$i209 = ($49|0)==(0|0);
       do {
        if ($tobool$i2$i$i209) {
         $$pre$i17$i$i2241121 = $$pre$i17$i$i224;
         label = 62;
        } else {
         $__ninp_$i$i3$i$i211 = ((($49)) + 12|0);
         $50 = HEAP32[$__ninp_$i$i3$i$i211>>2]|0;
         $__einp_$i$i4$i$i212 = ((($49)) + 16|0);
         $51 = HEAP32[$__einp_$i$i4$i$i212>>2]|0;
         $cmp$i$i5$i$i213 = ($50|0)==($51|0);
         if ($cmp$i$i5$i$i213) {
          $vtable$i$i7$i$i215 = HEAP32[$49>>2]|0;
          $vfn$i$i8$i$i216 = ((($vtable$i$i7$i$i215)) + 36|0);
          $52 = HEAP32[$vfn$i$i8$i$i216>>2]|0;
          __THREW__ = 0;
          $call$i$i9$i$i232 = (invoke_ii($52|0,($49|0))|0);
          $53 = __THREW__; __THREW__ = 0;
          $54 = $53&1;
          if ($54) {
           label = 35;
           break L24;
          } else {
           $retval$0$i$i13$i$i220 = $call$i$i9$i$i232;
          }
         } else {
          $55 = HEAP8[$50>>0]|0;
          $call3$i$i11$i$i218 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($55)|0);
          $retval$0$i$i13$i$i220 = $call3$i$i11$i$i218;
         }
         $call3$i14$i$i221 = (__ZNSt3__211char_traitsIcE3eofEv()|0);
         $call4$i15$i$i222 = (__ZNSt3__211char_traitsIcE11eq_int_typeEii($retval$0$i$i13$i$i220,$call3$i14$i$i221)|0);
         if ($call4$i15$i$i222) {
          HEAP32[$__e>>2] = 0;
          $$pre$i17$i$i2241121 = 0;
          label = 62;
          break;
         } else {
          $phitmp$i18$i$i225 = ($$pre$i17$i$i224|0)==(0|0);
          $cmptmp$i$i228 = $56 ^ $phitmp$i18$i$i225;
          if ($cmptmp$i$i228) {
           $$pre$i17$i$i2241123 = $$pre$i17$i$i224;$398 = $$pre$i17$i$i224;
           break;
          } else {
           $__trailing_sign$1 = $__trailing_sign$0;
           break L293;
          }
         }
        }
       } while(0);
       if ((label|0) == 62) {
        label = 0;
        if ($56) {
         $__trailing_sign$1 = $__trailing_sign$0;
         break L293;
        } else {
         $$pre$i17$i$i2241123 = $$pre$i17$i$i2241121;$398 = 0;
        }
       }
       $57 = HEAP32[$__b>>2]|0;
       $__ninp_$i$i235 = ((($57)) + 12|0);
       $58 = HEAP32[$__ninp_$i$i235>>2]|0;
       $__einp_$i$i236 = ((($57)) + 16|0);
       $59 = HEAP32[$__einp_$i$i236>>2]|0;
       $cmp$i$i237 = ($58|0)==($59|0);
       if ($cmp$i$i237) {
        $vtable$i$i238 = HEAP32[$57>>2]|0;
        $vfn$i$i239 = ((($vtable$i$i238)) + 36|0);
        $60 = HEAP32[$vfn$i$i239>>2]|0;
        __THREW__ = 0;
        $call$i$i246 = (invoke_ii($60|0,($57|0))|0);
        $61 = __THREW__; __THREW__ = 0;
        $62 = $61&1;
        if ($62) {
         label = 35;
         break L24;
        } else {
         $retval$0$i$i243 = $call$i$i246;
        }
       } else {
        $63 = HEAP8[$58>>0]|0;
        $call3$i$i241 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($63)|0);
        $retval$0$i$i243 = $call3$i$i241;
       }
       $conv$i244 = $retval$0$i$i243&255;
       $cmp2$i248 = ($conv$i244<<24>>24)>(-1);
       if (!($cmp2$i248)) {
        $__trailing_sign$1 = $__trailing_sign$0;
        break L293;
       }
       $sext1039 = $retval$0$i$i243 << 24;
       $conv$i249 = $sext1039 >> 24;
       $64 = HEAP32[$__tab_$i>>2]|0;
       $arrayidx$i251 = (($64) + ($conv$i249<<1)|0);
       $65 = HEAP16[$arrayidx$i251>>1]|0;
       $and3$i252 = $65 & 8192;
       $cmp6$i253 = ($and3$i252<<16>>16)==(0);
       if ($cmp6$i253) {
        $__trailing_sign$1 = $__trailing_sign$0;
        break L293;
       }
       $66 = HEAP32[$__b>>2]|0;
       $__ninp_$i$i258 = ((($66)) + 12|0);
       $67 = HEAP32[$__ninp_$i$i258>>2]|0;
       $__einp_$i$i259 = ((($66)) + 16|0);
       $68 = HEAP32[$__einp_$i$i259>>2]|0;
       $cmp$i$i260 = ($67|0)==($68|0);
       if ($cmp$i$i260) {
        $vtable$i$i261 = HEAP32[$66>>2]|0;
        $vfn$i$i262 = ((($vtable$i$i261)) + 40|0);
        $69 = HEAP32[$vfn$i$i262>>2]|0;
        __THREW__ = 0;
        $call$i$i272 = (invoke_ii($69|0,($66|0))|0);
        $70 = __THREW__; __THREW__ = 0;
        $71 = $70&1;
        if ($71) {
         label = 35;
         break L24;
        } else {
         $retval$0$i$i267 = $call$i$i272;
        }
       } else {
        $incdec$ptr$i$i264 = ((($67)) + 1|0);
        HEAP32[$__ninp_$i$i258>>2] = $incdec$ptr$i$i264;
        $72 = HEAP8[$67>>0]|0;
        $call3$i$i265 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($72)|0);
        $retval$0$i$i267 = $call3$i$i265;
       }
       $conv$i268 = $retval$0$i$i267&255;
       __THREW__ = 0;
       invoke_vii(376,($__spaces|0),($conv$i268|0));
       $73 = __THREW__; __THREW__ = 0;
       $74 = $73&1;
       if ($74) {
        label = 35;
        break L24;
       } else {
        $$pre$i17$i$i224 = $$pre$i17$i$i2241123;$49 = $398;
        label = 49;
       }
      }
     }
    } while(0);
    $inc339 = (($__p$0) + 1)|0;
    $__p$0 = $inc339;$__trailing_sign$0 = $__trailing_sign$1;
   }
   L329: do {
    if ((label|0) == 35) {
     $20 = ___cxa_find_matching_catch_2()|0;
     $21 = tempRet0;
     $ehselector$slot$5 = $21;$exn$slot$5 = $20;
     break L21;
    }
    else if ((label|0) == 47) {
     $41 = HEAP32[$__err>>2]|0;
     $or = $41 | 4;
     HEAP32[$__err>>2] = $or;
     $retval$10 = 0;
    }
    else if ((label|0) == 109) {
     $149 = HEAP32[$__err>>2]|0;
     $or110 = $149 | 4;
     HEAP32[$__err>>2] = $or110;
     $retval$10 = 0;
    }
    else if ((label|0) == 148) {
     $203 = ___cxa_find_matching_catch_2()|0;
     $204 = tempRet0;
     $ehselector$slot$5 = $204;$exn$slot$5 = $203;
     break L21;
    }
    else if ((label|0) == 149) {
     $205 = ___cxa_find_matching_catch_2()|0;
     $206 = tempRet0;
     $ehselector$slot$5 = $206;$exn$slot$5 = $205;
     break L21;
    }
    else if ((label|0) == 152) {
     $210 = HEAP32[$__err>>2]|0;
     $or225 = $210 | 4;
     HEAP32[$__err>>2] = $or225;
     $retval$10 = 0;
    }
    else if ((label|0) == 243) {
     $337 = HEAP32[$__err>>2]|0;
     $or332 = $337 | 4;
     HEAP32[$__err>>2] = $or332;
     $retval$10 = 0;
    }
    else if ((label|0) == 244) {
     $338 = ___cxa_find_matching_catch_2()|0;
     $339 = tempRet0;
     $ehselector$slot$5 = $339;$exn$slot$5 = $338;
     break L21;
    }
    else if ((label|0) == 246) {
     L331: do {
      if ($tobool344) {
       $__size_$i$i640 = ((($__trailing_sign$0)) + 11|0);
       $__size_$i3$i642 = ((($__trailing_sign$0)) + 4|0);
       $__i$0 = 1;
       L333: while(1) {
        $340 = HEAP8[$__size_$i$i640>>0]|0;
        $tobool$i$i641 = ($340<<24>>24)<(0);
        if ($tobool$i$i641) {
         $341 = HEAP32[$__size_$i3$i642>>2]|0;
         $cond$i646 = $341;
        } else {
         $conv$i$i644 = $340&255;
         $cond$i646 = $conv$i$i644;
        }
        $cmp349 = ($__i$0>>>0)<($cond$i646>>>0);
        if (!($cmp349)) {
         break L331;
        }
        $342 = HEAP32[$__b>>2]|0;
        $tobool$i$i$i542 = ($342|0)==(0|0);
        do {
         if ($tobool$i$i$i542) {
          $404 = 1;
         } else {
          $__ninp_$i$i$i$i543 = ((($342)) + 12|0);
          $343 = HEAP32[$__ninp_$i$i$i$i543>>2]|0;
          $__einp_$i$i$i$i544 = ((($342)) + 16|0);
          $344 = HEAP32[$__einp_$i$i$i$i544>>2]|0;
          $cmp$i$i$i$i545 = ($343|0)==($344|0);
          if ($cmp$i$i$i$i545) {
           $vtable$i$i$i$i547 = HEAP32[$342>>2]|0;
           $vfn$i$i$i$i548 = ((($vtable$i$i$i$i547)) + 36|0);
           $345 = HEAP32[$vfn$i$i$i$i548>>2]|0;
           __THREW__ = 0;
           $call$i$i$i$i583 = (invoke_ii($345|0,($342|0))|0);
           $346 = __THREW__; __THREW__ = 0;
           $347 = $346&1;
           if ($347) {
            label = 274;
            break L333;
           } else {
            $retval$0$i$i$i$i552 = $call$i$i$i$i583;
           }
          } else {
           $348 = HEAP8[$343>>0]|0;
           $call3$i$i$i$i550 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($348)|0);
           $retval$0$i$i$i$i552 = $call3$i$i$i$i550;
          }
          $call3$i$i$i553 = (__ZNSt3__211char_traitsIcE3eofEv()|0);
          $call4$i$i$i554 = (__ZNSt3__211char_traitsIcE11eq_int_typeEii($retval$0$i$i$i$i552,$call3$i$i$i553)|0);
          if ($call4$i$i$i554) {
           HEAP32[$__b>>2] = 0;
           $404 = 1;
           break;
          } else {
           $$pre$i$i$i556 = HEAP32[$__b>>2]|0;
           $phitmp$i$i$i557 = ($$pre$i$i$i556|0)==(0|0);
           $404 = $phitmp$i$i$i557;
           break;
          }
         }
        } while(0);
        $349 = HEAP32[$__e>>2]|0;
        $tobool$i2$i$i561 = ($349|0)==(0|0);
        do {
         if ($tobool$i2$i$i561) {
          label = 265;
         } else {
          $__ninp_$i$i3$i$i563 = ((($349)) + 12|0);
          $350 = HEAP32[$__ninp_$i$i3$i$i563>>2]|0;
          $__einp_$i$i4$i$i564 = ((($349)) + 16|0);
          $351 = HEAP32[$__einp_$i$i4$i$i564>>2]|0;
          $cmp$i$i5$i$i565 = ($350|0)==($351|0);
          if ($cmp$i$i5$i$i565) {
           $vtable$i$i7$i$i567 = HEAP32[$349>>2]|0;
           $vfn$i$i8$i$i568 = ((($vtable$i$i7$i$i567)) + 36|0);
           $352 = HEAP32[$vfn$i$i8$i$i568>>2]|0;
           __THREW__ = 0;
           $call$i$i9$i$i585 = (invoke_ii($352|0,($349|0))|0);
           $353 = __THREW__; __THREW__ = 0;
           $354 = $353&1;
           if ($354) {
            label = 274;
            break L333;
           } else {
            $retval$0$i$i13$i$i572 = $call$i$i9$i$i585;
           }
          } else {
           $355 = HEAP8[$350>>0]|0;
           $call3$i$i11$i$i570 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($355)|0);
           $retval$0$i$i13$i$i572 = $call3$i$i11$i$i570;
          }
          $call3$i14$i$i573 = (__ZNSt3__211char_traitsIcE3eofEv()|0);
          $call4$i15$i$i574 = (__ZNSt3__211char_traitsIcE11eq_int_typeEii($retval$0$i$i13$i$i572,$call3$i14$i$i573)|0);
          if ($call4$i15$i$i574) {
           HEAP32[$__e>>2] = 0;
           label = 265;
           break;
          } else {
           if ($404) {
            break;
           } else {
            label = 273;
            break L333;
           }
          }
         }
        } while(0);
        if ((label|0) == 265) {
         label = 0;
         if ($404) {
          label = 273;
          break;
         }
        }
        $356 = HEAP32[$__b>>2]|0;
        $__ninp_$i$i148 = ((($356)) + 12|0);
        $357 = HEAP32[$__ninp_$i$i148>>2]|0;
        $__einp_$i$i149 = ((($356)) + 16|0);
        $358 = HEAP32[$__einp_$i$i149>>2]|0;
        $cmp$i$i150 = ($357|0)==($358|0);
        if ($cmp$i$i150) {
         $vtable$i$i151 = HEAP32[$356>>2]|0;
         $vfn$i$i152 = ((($vtable$i$i151)) + 36|0);
         $359 = HEAP32[$vfn$i$i152>>2]|0;
         __THREW__ = 0;
         $call$i$i157 = (invoke_ii($359|0,($356|0))|0);
         $360 = __THREW__; __THREW__ = 0;
         $361 = $360&1;
         if ($361) {
          label = 274;
          break;
         } else {
          $retval$0$i$i = $call$i$i157;
         }
        } else {
         $362 = HEAP8[$357>>0]|0;
         $call3$i$i154 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($362)|0);
         $retval$0$i$i = $call3$i$i154;
        }
        $conv$i = $retval$0$i$i&255;
        $363 = HEAP8[$__size_$i$i640>>0]|0;
        $tobool$i$i$i$i = ($363<<24>>24)<(0);
        if ($tobool$i$i$i$i) {
         $364 = HEAP32[$__trailing_sign$0>>2]|0;
         $cond$i$i$i = $364;
        } else {
         $cond$i$i$i = $__trailing_sign$0;
        }
        $add$ptr$i = (($cond$i$i$i) + ($__i$0)|0);
        $365 = HEAP8[$add$ptr$i>>0]|0;
        $cmp362 = ($conv$i<<24>>24)==($365<<24>>24);
        if (!($cmp362)) {
         label = 273;
         break;
        }
        $inc367 = (($__i$0) + 1)|0;
        $369 = HEAP32[$__b>>2]|0;
        $__ninp_$i$i = ((($369)) + 12|0);
        $370 = HEAP32[$__ninp_$i$i>>2]|0;
        $__einp_$i$i = ((($369)) + 16|0);
        $371 = HEAP32[$__einp_$i$i>>2]|0;
        $cmp$i$i = ($370|0)==($371|0);
        if ($cmp$i$i) {
         $vtable$i$i = HEAP32[$369>>2]|0;
         $vfn$i$i = ((($vtable$i$i)) + 40|0);
         $372 = HEAP32[$vfn$i$i>>2]|0;
         __THREW__ = 0;
         (invoke_ii($372|0,($369|0))|0);
         $373 = __THREW__; __THREW__ = 0;
         $374 = $373&1;
         if ($374) {
          label = 274;
          break;
         } else {
          $__i$0 = $inc367;
          continue;
         }
        } else {
         $incdec$ptr$i$i = ((($370)) + 1|0);
         HEAP32[$__ninp_$i$i>>2] = $incdec$ptr$i$i;
         $375 = HEAP8[$370>>0]|0;
         (__ZNSt3__211char_traitsIcE11to_int_typeEc($375)|0);
         $__i$0 = $inc367;
         continue;
        }
       }
       if ((label|0) == 273) {
        $366 = HEAP32[$__err>>2]|0;
        $or364 = $366 | 4;
        HEAP32[$__err>>2] = $or364;
        $retval$10 = 0;
        break L329;
       }
       else if ((label|0) == 274) {
        $367 = ___cxa_find_matching_catch_2()|0;
        $368 = tempRet0;
        $ehselector$slot$5 = $368;$exn$slot$5 = $367;
        break L21;
       }
      }
     } while(0);
     $376 = HEAP32[$__gb>>2]|0;
     $377 = HEAP32[$__gn>>2]|0;
     $cmp376 = ($376|0)==($377|0);
     if ($cmp376) {
      $retval$10 = 1;
     } else {
      HEAP32[$__et>>2] = 0;
      __THREW__ = 0;
      invoke_viiii(400,($__grp|0),($376|0),($377|0),($__et|0));
      $378 = __THREW__; __THREW__ = 0;
      $379 = $378&1;
      if ($379) {
       $382 = ___cxa_find_matching_catch_2()|0;
       $383 = tempRet0;
       $ehselector$slot$5 = $383;$exn$slot$5 = $382;
       break L21;
      }
      $380 = HEAP32[$__et>>2]|0;
      $tobool382 = ($380|0)==(0);
      if ($tobool382) {
       $retval$10 = 1;
       break;
      } else {
       $381 = HEAP32[$__err>>2]|0;
       $or384 = $381 | 4;
       HEAP32[$__err>>2] = $or384;
       $retval$10 = 0;
       break;
      }
     }
    }
   } while(0);
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__spaces);
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__nsn);
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__psn);
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__sym);
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grp);
   $384 = HEAP32[$__gb>>2]|0;
   HEAP32[$__gb>>2] = 0;
   $tobool$i$i105 = ($384|0)==(0|0);
   if (!($tobool$i$i105)) {
    $385 = HEAP32[$__second_$i$i$i>>2]|0;
    __THREW__ = 0;
    invoke_vi($385|0,($384|0));
    $386 = __THREW__; __THREW__ = 0;
    $387 = $386&1;
    if ($387) {
     $388 = ___cxa_find_matching_catch_3(0|0)|0;
     $389 = tempRet0;
     ___clang_call_terminate($388);
     // unreachable;
    }
   }
   STACKTOP = sp;return ($retval$10|0);
  }
 } while(0);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__spaces);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__nsn);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__psn);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__sym);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grp);
 $390 = HEAP32[$__gb>>2]|0;
 HEAP32[$__gb>>2] = 0;
 $tobool$i$i = ($390|0)==(0|0);
 if (!($tobool$i$i)) {
  $391 = HEAP32[$__second_$i$i$i>>2]|0;
  __THREW__ = 0;
  invoke_vi($391|0,($390|0));
  $392 = __THREW__; __THREW__ = 0;
  $393 = $392&1;
  if ($393) {
   $394 = ___cxa_find_matching_catch_3(0|0)|0;
   $395 = tempRet0;
   ___clang_call_terminate($394);
   // unreachable;
  }
 }
 ___resumeException($exn$slot$5|0);
 // unreachable;
 return (0)|0;
}
function __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendIPcEENS_9enable_ifIXaasr21__is_forward_iteratorIT_EE5valuesr38__libcpp_string_gets_noexcept_iteratorIS9_EE5valueERS5_E4typeES9_S9_($this,$__first,$__last) {
 $this = $this|0;
 $__first = $__first|0;
 $__last = $__last|0;
 var $$pre = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $__cap_$i$i = 0, $__first$addr$0 = 0, $__p$0 = 0, $__size_$i$i = 0, $__size_$i2$i = 0, $__size_$i3$i = 0, $add = 0, $add$ptr = 0, $and$i$i = 0, $cmp = 0, $cmp7 = 0, $cond$i28 = 0;
 var $cond$i34 = 0, $cond$i37 = 0, $conv$i$i = 0, $conv$i$i23 = 0, $incdec$ptr = 0, $incdec$ptr8 = 0, $phitmp$i = 0, $ref$tmp = 0, $scevgep = 0, $scevgep35 = 0, $scevgep36 = 0, $sub = 0, $sub$ptr$lhs$cast$i$i = 0, $sub$ptr$rhs$cast$i$i = 0, $sub$ptr$sub$i$i = 0, $sub5 = 0, $tobool = 0, $tobool$i$i = 0, $tobool$i$i22 = 0, $tobool$i$i31 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $sub$ptr$rhs$cast$i$i = $__first;
 $ref$tmp = sp;
 $__size_$i$i = ((($this)) + 11|0);
 $0 = HEAP8[$__size_$i$i>>0]|0;
 $tobool$i$i = ($0<<24>>24)<(0);
 if ($tobool$i$i) {
  $__size_$i3$i = ((($this)) + 4|0);
  $1 = HEAP32[$__size_$i3$i>>2]|0;
  $__cap_$i$i = ((($this)) + 8|0);
  $2 = HEAP32[$__cap_$i$i>>2]|0;
  $and$i$i = $2 & 2147483647;
  $phitmp$i = (($and$i$i) + -1)|0;
  $cond$i28 = $phitmp$i;$cond$i37 = $1;
 } else {
  $conv$i$i = $0&255;
  $cond$i28 = 10;$cond$i37 = $conv$i$i;
 }
 $sub$ptr$lhs$cast$i$i = $__last;
 $sub$ptr$sub$i$i = (($sub$ptr$lhs$cast$i$i) - ($sub$ptr$rhs$cast$i$i))|0;
 $tobool = ($sub$ptr$sub$i$i|0)==(0);
 do {
  if (!($tobool)) {
   $sub = (($cond$i28) - ($cond$i37))|0;
   $cmp = ($sub>>>0)<($sub$ptr$sub$i$i>>>0);
   $add = (($cond$i37) + ($sub$ptr$sub$i$i))|0;
   if ($cmp) {
    $sub5 = (($add) - ($cond$i28))|0;
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9__grow_byEjjjjjj($this,$cond$i28,$sub5,$cond$i37,$cond$i37,0,0);
    $$pre = HEAP8[$__size_$i$i>>0]|0;
    $3 = $$pre;
   } else {
    $3 = $0;
   }
   $tobool$i$i31 = ($3<<24>>24)<(0);
   if ($tobool$i$i31) {
    $4 = HEAP32[$this>>2]|0;
    $cond$i34 = $4;
   } else {
    $cond$i34 = $this;
   }
   $add$ptr = (($cond$i34) + ($cond$i37)|0);
   $5 = (($cond$i37) - ($sub$ptr$rhs$cast$i$i))|0;
   $scevgep = (($__last) + ($5)|0);
   $scevgep35 = $scevgep;
   $__first$addr$0 = $__first;$__p$0 = $add$ptr;
   while(1) {
    $cmp7 = ($__first$addr$0|0)==($__last|0);
    if ($cmp7) {
     break;
    }
    __ZNSt3__211char_traitsIcE6assignERcRKc($__p$0,$__first$addr$0);
    $incdec$ptr = ((($__p$0)) + 1|0);
    $incdec$ptr8 = ((($__first$addr$0)) + 1|0);
    $__first$addr$0 = $incdec$ptr8;$__p$0 = $incdec$ptr;
   }
   $scevgep36 = (($cond$i34) + ($scevgep35)|0);
   HEAP8[$ref$tmp>>0] = 0;
   __ZNSt3__211char_traitsIcE6assignERcRKc($scevgep36,$ref$tmp);
   $6 = HEAP8[$__size_$i$i>>0]|0;
   $tobool$i$i22 = ($6<<24>>24)<(0);
   if ($tobool$i$i22) {
    $__size_$i2$i = ((($this)) + 4|0);
    HEAP32[$__size_$i2$i>>2] = $add;
    break;
   } else {
    $conv$i$i23 = $add&255;
    HEAP8[$__size_$i$i>>0] = $conv$i$i23;
    break;
   }
  }
 } while(0);
 STACKTOP = sp;return ($this|0);
}
function __ZNSt3__211__money_getIcE13__gather_infoEbRKNS_6localeERNS_10money_base7patternERcS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEESF_SF_SF_Ri($__intl,$__loc,$__pat,$__dp,$__ts,$__grp,$__sym,$__psn,$__nsn,$__fd) {
 $__intl = $__intl|0;
 $__loc = $__loc|0;
 $__pat = $__pat|0;
 $__dp = $__dp|0;
 $__ts = $__ts|0;
 $__grp = $__grp|0;
 $__sym = $__sym|0;
 $__psn = $__psn|0;
 $__nsn = $__nsn|0;
 $__fd = $__fd|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $7 = 0, $8 = 0, $9 = 0, $__i$0$i$i$i = 0, $__i$0$i$i$i126 = 0, $__i$0$i$i$i149 = 0, $__i$0$i$i$i178 = 0, $__i$0$i$i$i201 = 0, $__i$0$i$i$i45 = 0, $__i$0$i$i$i74 = 0, $__i$0$i$i$i97 = 0, $__size_$i1$i$i$i = 0, $__size_$i1$i$i$i115 = 0, $__size_$i1$i$i$i138 = 0, $__size_$i1$i$i$i167 = 0, $__size_$i1$i$i$i190 = 0, $__size_$i1$i$i$i34 = 0;
 var $__size_$i1$i$i$i63 = 0, $__size_$i1$i$i$i86 = 0, $__size_$i2$i$i$i = 0, $__size_$i2$i$i$i118 = 0, $__size_$i2$i$i$i141 = 0, $__size_$i2$i$i$i170 = 0, $__size_$i2$i$i$i193 = 0, $__size_$i2$i$i$i37 = 0, $__size_$i2$i$i$i66 = 0, $__size_$i2$i$i$i89 = 0, $arrayidx$i$i$i = 0, $arrayidx$i$i$i100 = 0, $arrayidx$i$i$i129 = 0, $arrayidx$i$i$i152 = 0, $arrayidx$i$i$i181 = 0, $arrayidx$i$i$i204 = 0, $arrayidx$i$i$i48 = 0, $arrayidx$i$i$i77 = 0, $call$i = 0, $call$i106 = 0;
 var $call$i107 = 0, $call$i158 = 0, $call$i161 = 0, $call$i210 = 0, $call$i54 = 0, $call$i57 = 0, $exitcond$i$i$i = 0, $exitcond$i$i$i127 = 0, $exitcond$i$i$i150 = 0, $exitcond$i$i$i179 = 0, $exitcond$i$i$i202 = 0, $exitcond$i$i$i46 = 0, $exitcond$i$i$i75 = 0, $exitcond$i$i$i98 = 0, $inc$i$i$i = 0, $inc$i$i$i101 = 0, $inc$i$i$i130 = 0, $inc$i$i$i153 = 0, $inc$i$i$i182 = 0, $inc$i$i$i205 = 0;
 var $inc$i$i$i49 = 0, $inc$i$i$i78 = 0, $ref$tmp = 0, $ref$tmp$i$i$i = 0, $ref$tmp$i$i$i112 = 0, $ref$tmp$i$i$i135 = 0, $ref$tmp$i$i$i164 = 0, $ref$tmp$i$i$i187 = 0, $ref$tmp$i$i$i31 = 0, $ref$tmp$i$i$i60 = 0, $ref$tmp$i$i$i83 = 0, $ref$tmp1 = 0, $ref$tmp14 = 0, $ref$tmp15 = 0, $ref$tmp17 = 0, $ref$tmp21 = 0, $ref$tmp23 = 0, $ref$tmp3 = 0, $ref$tmp4$i$i$i = 0, $ref$tmp4$i$i$i113 = 0;
 var $ref$tmp4$i$i$i136 = 0, $ref$tmp4$i$i$i165 = 0, $ref$tmp4$i$i$i188 = 0, $ref$tmp4$i$i$i32 = 0, $ref$tmp4$i$i$i61 = 0, $ref$tmp4$i$i$i84 = 0, $ref$tmp7 = 0, $ref$tmp9 = 0, $storemerge = 0, $tobool$i$i$i$i = 0, $tobool$i$i$i$i116 = 0, $tobool$i$i$i$i139 = 0, $tobool$i$i$i$i168 = 0, $tobool$i$i$i$i191 = 0, $tobool$i$i$i$i35 = 0, $tobool$i$i$i$i64 = 0, $tobool$i$i$i$i87 = 0, $vfn$i = 0, $vfn$i105 = 0, $vfn$i109 = 0;
 var $vfn$i111 = 0, $vfn$i134 = 0, $vfn$i157 = 0, $vfn$i160 = 0, $vfn$i163 = 0, $vfn$i186 = 0, $vfn$i209 = 0, $vfn$i28 = 0, $vfn$i30 = 0, $vfn$i53 = 0, $vfn$i56 = 0, $vfn$i59 = 0, $vfn$i82 = 0, $vtable$i = 0, $vtable$i104 = 0, $vtable$i108 = 0, $vtable$i110 = 0, $vtable$i133 = 0, $vtable$i156 = 0, $vtable$i159 = 0;
 var $vtable$i162 = 0, $vtable$i185 = 0, $vtable$i208 = 0, $vtable$i27 = 0, $vtable$i29 = 0, $vtable$i52 = 0, $vtable$i55 = 0, $vtable$i58 = 0, $vtable$i81 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(128|0);
 $ref$tmp$i$i$i187 = sp + 119|0;
 $ref$tmp4$i$i$i188 = sp + 118|0;
 $ref$tmp$i$i$i164 = sp + 117|0;
 $ref$tmp4$i$i$i165 = sp + 116|0;
 $ref$tmp$i$i$i135 = sp + 115|0;
 $ref$tmp4$i$i$i136 = sp + 114|0;
 $ref$tmp$i$i$i112 = sp + 113|0;
 $ref$tmp4$i$i$i113 = sp + 112|0;
 $ref$tmp$i$i$i83 = sp + 111|0;
 $ref$tmp4$i$i$i84 = sp + 110|0;
 $ref$tmp$i$i$i60 = sp + 109|0;
 $ref$tmp4$i$i$i61 = sp + 108|0;
 $ref$tmp$i$i$i31 = sp + 107|0;
 $ref$tmp4$i$i$i32 = sp + 106|0;
 $ref$tmp$i$i$i = sp + 105|0;
 $ref$tmp4$i$i$i = sp + 104|0;
 $ref$tmp = sp + 100|0;
 $ref$tmp1 = sp + 88|0;
 $ref$tmp3 = sp + 76|0;
 $ref$tmp7 = sp + 64|0;
 $ref$tmp9 = sp + 52|0;
 $ref$tmp14 = sp + 48|0;
 $ref$tmp15 = sp + 36|0;
 $ref$tmp17 = sp + 24|0;
 $ref$tmp21 = sp + 12|0;
 $ref$tmp23 = sp;
 if ($__intl) {
  $call$i = (__ZNKSt3__26locale9use_facetERNS0_2idE($__loc,21816)|0);
  $vtable$i = HEAP32[$call$i>>2]|0;
  $vfn$i = ((($vtable$i)) + 44|0);
  $0 = HEAP32[$vfn$i>>2]|0;
  FUNCTION_TABLE_vii[$0 & 1023]($ref$tmp,$call$i);
  $1 = HEAP32[$ref$tmp>>2]|0;
  HEAP8[$__pat>>0]=$1&255;HEAP8[$__pat+1>>0]=($1>>8)&255;HEAP8[$__pat+2>>0]=($1>>16)&255;HEAP8[$__pat+3>>0]=$1>>24;
  $vtable$i27 = HEAP32[$call$i>>2]|0;
  $vfn$i28 = ((($vtable$i27)) + 32|0);
  $2 = HEAP32[$vfn$i28>>2]|0;
  FUNCTION_TABLE_vii[$2 & 1023]($ref$tmp1,$call$i);
  $__size_$i1$i$i$i = ((($__nsn)) + 11|0);
  $3 = HEAP8[$__size_$i1$i$i$i>>0]|0;
  $tobool$i$i$i$i = ($3<<24>>24)<(0);
  if ($tobool$i$i$i$i) {
   $4 = HEAP32[$__nsn>>2]|0;
   HEAP8[$ref$tmp$i$i$i>>0] = 0;
   __ZNSt3__211char_traitsIcE6assignERcRKc($4,$ref$tmp$i$i$i);
   $__size_$i2$i$i$i = ((($__nsn)) + 4|0);
   HEAP32[$__size_$i2$i$i$i>>2] = 0;
  } else {
   HEAP8[$ref$tmp4$i$i$i>>0] = 0;
   __ZNSt3__211char_traitsIcE6assignERcRKc($__nsn,$ref$tmp4$i$i$i);
   HEAP8[$__size_$i1$i$i$i>>0] = 0;
  }
  __THREW__ = 0;
  invoke_vii(448,($__nsn|0),0);
  $5 = __THREW__; __THREW__ = 0;
  $6 = $5&1;
  if ($6) {
   $7 = ___cxa_find_matching_catch_3(0|0)|0;
   $8 = tempRet0;
   ___clang_call_terminate($7);
   // unreachable;
  }
  ;HEAP32[$__nsn>>2]=HEAP32[$ref$tmp1>>2]|0;HEAP32[$__nsn+4>>2]=HEAP32[$ref$tmp1+4>>2]|0;HEAP32[$__nsn+8>>2]=HEAP32[$ref$tmp1+8>>2]|0;
  $__i$0$i$i$i = 0;
  while(1) {
   $exitcond$i$i$i = ($__i$0$i$i$i|0)==(3);
   if ($exitcond$i$i$i) {
    break;
   }
   $arrayidx$i$i$i = (($ref$tmp1) + ($__i$0$i$i$i<<2)|0);
   HEAP32[$arrayidx$i$i$i>>2] = 0;
   $inc$i$i$i = (($__i$0$i$i$i) + 1)|0;
   $__i$0$i$i$i = $inc$i$i$i;
  }
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($ref$tmp1);
  $vtable$i29 = HEAP32[$call$i>>2]|0;
  $vfn$i30 = ((($vtable$i29)) + 28|0);
  $9 = HEAP32[$vfn$i30>>2]|0;
  FUNCTION_TABLE_vii[$9 & 1023]($ref$tmp3,$call$i);
  $__size_$i1$i$i$i34 = ((($__psn)) + 11|0);
  $10 = HEAP8[$__size_$i1$i$i$i34>>0]|0;
  $tobool$i$i$i$i35 = ($10<<24>>24)<(0);
  if ($tobool$i$i$i$i35) {
   $11 = HEAP32[$__psn>>2]|0;
   HEAP8[$ref$tmp$i$i$i31>>0] = 0;
   __ZNSt3__211char_traitsIcE6assignERcRKc($11,$ref$tmp$i$i$i31);
   $__size_$i2$i$i$i37 = ((($__psn)) + 4|0);
   HEAP32[$__size_$i2$i$i$i37>>2] = 0;
  } else {
   HEAP8[$ref$tmp4$i$i$i32>>0] = 0;
   __ZNSt3__211char_traitsIcE6assignERcRKc($__psn,$ref$tmp4$i$i$i32);
   HEAP8[$__size_$i1$i$i$i34>>0] = 0;
  }
  __THREW__ = 0;
  invoke_vii(448,($__psn|0),0);
  $12 = __THREW__; __THREW__ = 0;
  $13 = $12&1;
  if ($13) {
   $14 = ___cxa_find_matching_catch_3(0|0)|0;
   $15 = tempRet0;
   ___clang_call_terminate($14);
   // unreachable;
  }
  ;HEAP32[$__psn>>2]=HEAP32[$ref$tmp3>>2]|0;HEAP32[$__psn+4>>2]=HEAP32[$ref$tmp3+4>>2]|0;HEAP32[$__psn+8>>2]=HEAP32[$ref$tmp3+8>>2]|0;
  $__i$0$i$i$i45 = 0;
  while(1) {
   $exitcond$i$i$i46 = ($__i$0$i$i$i45|0)==(3);
   if ($exitcond$i$i$i46) {
    break;
   }
   $arrayidx$i$i$i48 = (($ref$tmp3) + ($__i$0$i$i$i45<<2)|0);
   HEAP32[$arrayidx$i$i$i48>>2] = 0;
   $inc$i$i$i49 = (($__i$0$i$i$i45) + 1)|0;
   $__i$0$i$i$i45 = $inc$i$i$i49;
  }
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($ref$tmp3);
  $vtable$i52 = HEAP32[$call$i>>2]|0;
  $vfn$i53 = ((($vtable$i52)) + 12|0);
  $16 = HEAP32[$vfn$i53>>2]|0;
  $call$i54 = (FUNCTION_TABLE_ii[$16 & 1023]($call$i)|0);
  HEAP8[$__dp>>0] = $call$i54;
  $vtable$i55 = HEAP32[$call$i>>2]|0;
  $vfn$i56 = ((($vtable$i55)) + 16|0);
  $17 = HEAP32[$vfn$i56>>2]|0;
  $call$i57 = (FUNCTION_TABLE_ii[$17 & 1023]($call$i)|0);
  HEAP8[$__ts>>0] = $call$i57;
  $vtable$i58 = HEAP32[$call$i>>2]|0;
  $vfn$i59 = ((($vtable$i58)) + 20|0);
  $18 = HEAP32[$vfn$i59>>2]|0;
  FUNCTION_TABLE_vii[$18 & 1023]($ref$tmp7,$call$i);
  $__size_$i1$i$i$i63 = ((($__grp)) + 11|0);
  $19 = HEAP8[$__size_$i1$i$i$i63>>0]|0;
  $tobool$i$i$i$i64 = ($19<<24>>24)<(0);
  if ($tobool$i$i$i$i64) {
   $20 = HEAP32[$__grp>>2]|0;
   HEAP8[$ref$tmp$i$i$i60>>0] = 0;
   __ZNSt3__211char_traitsIcE6assignERcRKc($20,$ref$tmp$i$i$i60);
   $__size_$i2$i$i$i66 = ((($__grp)) + 4|0);
   HEAP32[$__size_$i2$i$i$i66>>2] = 0;
  } else {
   HEAP8[$ref$tmp4$i$i$i61>>0] = 0;
   __ZNSt3__211char_traitsIcE6assignERcRKc($__grp,$ref$tmp4$i$i$i61);
   HEAP8[$__size_$i1$i$i$i63>>0] = 0;
  }
  __THREW__ = 0;
  invoke_vii(448,($__grp|0),0);
  $21 = __THREW__; __THREW__ = 0;
  $22 = $21&1;
  if ($22) {
   $23 = ___cxa_find_matching_catch_3(0|0)|0;
   $24 = tempRet0;
   ___clang_call_terminate($23);
   // unreachable;
  }
  ;HEAP32[$__grp>>2]=HEAP32[$ref$tmp7>>2]|0;HEAP32[$__grp+4>>2]=HEAP32[$ref$tmp7+4>>2]|0;HEAP32[$__grp+8>>2]=HEAP32[$ref$tmp7+8>>2]|0;
  $__i$0$i$i$i74 = 0;
  while(1) {
   $exitcond$i$i$i75 = ($__i$0$i$i$i74|0)==(3);
   if ($exitcond$i$i$i75) {
    break;
   }
   $arrayidx$i$i$i77 = (($ref$tmp7) + ($__i$0$i$i$i74<<2)|0);
   HEAP32[$arrayidx$i$i$i77>>2] = 0;
   $inc$i$i$i78 = (($__i$0$i$i$i74) + 1)|0;
   $__i$0$i$i$i74 = $inc$i$i$i78;
  }
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($ref$tmp7);
  $vtable$i81 = HEAP32[$call$i>>2]|0;
  $vfn$i82 = ((($vtable$i81)) + 24|0);
  $25 = HEAP32[$vfn$i82>>2]|0;
  FUNCTION_TABLE_vii[$25 & 1023]($ref$tmp9,$call$i);
  $__size_$i1$i$i$i86 = ((($__sym)) + 11|0);
  $26 = HEAP8[$__size_$i1$i$i$i86>>0]|0;
  $tobool$i$i$i$i87 = ($26<<24>>24)<(0);
  if ($tobool$i$i$i$i87) {
   $27 = HEAP32[$__sym>>2]|0;
   HEAP8[$ref$tmp$i$i$i83>>0] = 0;
   __ZNSt3__211char_traitsIcE6assignERcRKc($27,$ref$tmp$i$i$i83);
   $__size_$i2$i$i$i89 = ((($__sym)) + 4|0);
   HEAP32[$__size_$i2$i$i$i89>>2] = 0;
  } else {
   HEAP8[$ref$tmp4$i$i$i84>>0] = 0;
   __ZNSt3__211char_traitsIcE6assignERcRKc($__sym,$ref$tmp4$i$i$i84);
   HEAP8[$__size_$i1$i$i$i86>>0] = 0;
  }
  __THREW__ = 0;
  invoke_vii(448,($__sym|0),0);
  $28 = __THREW__; __THREW__ = 0;
  $29 = $28&1;
  if ($29) {
   $30 = ___cxa_find_matching_catch_3(0|0)|0;
   $31 = tempRet0;
   ___clang_call_terminate($30);
   // unreachable;
  }
  ;HEAP32[$__sym>>2]=HEAP32[$ref$tmp9>>2]|0;HEAP32[$__sym+4>>2]=HEAP32[$ref$tmp9+4>>2]|0;HEAP32[$__sym+8>>2]=HEAP32[$ref$tmp9+8>>2]|0;
  $__i$0$i$i$i97 = 0;
  while(1) {
   $exitcond$i$i$i98 = ($__i$0$i$i$i97|0)==(3);
   if ($exitcond$i$i$i98) {
    break;
   }
   $arrayidx$i$i$i100 = (($ref$tmp9) + ($__i$0$i$i$i97<<2)|0);
   HEAP32[$arrayidx$i$i$i100>>2] = 0;
   $inc$i$i$i101 = (($__i$0$i$i$i97) + 1)|0;
   $__i$0$i$i$i97 = $inc$i$i$i101;
  }
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($ref$tmp9);
  $vtable$i104 = HEAP32[$call$i>>2]|0;
  $vfn$i105 = ((($vtable$i104)) + 36|0);
  $32 = HEAP32[$vfn$i105>>2]|0;
  $call$i106 = (FUNCTION_TABLE_ii[$32 & 1023]($call$i)|0);
  $storemerge = $call$i106;
 } else {
  $call$i107 = (__ZNKSt3__26locale9use_facetERNS0_2idE($__loc,21808)|0);
  $vtable$i108 = HEAP32[$call$i107>>2]|0;
  $vfn$i109 = ((($vtable$i108)) + 44|0);
  $33 = HEAP32[$vfn$i109>>2]|0;
  FUNCTION_TABLE_vii[$33 & 1023]($ref$tmp14,$call$i107);
  $34 = HEAP32[$ref$tmp14>>2]|0;
  HEAP8[$__pat>>0]=$34&255;HEAP8[$__pat+1>>0]=($34>>8)&255;HEAP8[$__pat+2>>0]=($34>>16)&255;HEAP8[$__pat+3>>0]=$34>>24;
  $vtable$i110 = HEAP32[$call$i107>>2]|0;
  $vfn$i111 = ((($vtable$i110)) + 32|0);
  $35 = HEAP32[$vfn$i111>>2]|0;
  FUNCTION_TABLE_vii[$35 & 1023]($ref$tmp15,$call$i107);
  $__size_$i1$i$i$i115 = ((($__nsn)) + 11|0);
  $36 = HEAP8[$__size_$i1$i$i$i115>>0]|0;
  $tobool$i$i$i$i116 = ($36<<24>>24)<(0);
  if ($tobool$i$i$i$i116) {
   $37 = HEAP32[$__nsn>>2]|0;
   HEAP8[$ref$tmp$i$i$i112>>0] = 0;
   __ZNSt3__211char_traitsIcE6assignERcRKc($37,$ref$tmp$i$i$i112);
   $__size_$i2$i$i$i118 = ((($__nsn)) + 4|0);
   HEAP32[$__size_$i2$i$i$i118>>2] = 0;
  } else {
   HEAP8[$ref$tmp4$i$i$i113>>0] = 0;
   __ZNSt3__211char_traitsIcE6assignERcRKc($__nsn,$ref$tmp4$i$i$i113);
   HEAP8[$__size_$i1$i$i$i115>>0] = 0;
  }
  __THREW__ = 0;
  invoke_vii(448,($__nsn|0),0);
  $38 = __THREW__; __THREW__ = 0;
  $39 = $38&1;
  if ($39) {
   $40 = ___cxa_find_matching_catch_3(0|0)|0;
   $41 = tempRet0;
   ___clang_call_terminate($40);
   // unreachable;
  }
  ;HEAP32[$__nsn>>2]=HEAP32[$ref$tmp15>>2]|0;HEAP32[$__nsn+4>>2]=HEAP32[$ref$tmp15+4>>2]|0;HEAP32[$__nsn+8>>2]=HEAP32[$ref$tmp15+8>>2]|0;
  $__i$0$i$i$i126 = 0;
  while(1) {
   $exitcond$i$i$i127 = ($__i$0$i$i$i126|0)==(3);
   if ($exitcond$i$i$i127) {
    break;
   }
   $arrayidx$i$i$i129 = (($ref$tmp15) + ($__i$0$i$i$i126<<2)|0);
   HEAP32[$arrayidx$i$i$i129>>2] = 0;
   $inc$i$i$i130 = (($__i$0$i$i$i126) + 1)|0;
   $__i$0$i$i$i126 = $inc$i$i$i130;
  }
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($ref$tmp15);
  $vtable$i133 = HEAP32[$call$i107>>2]|0;
  $vfn$i134 = ((($vtable$i133)) + 28|0);
  $42 = HEAP32[$vfn$i134>>2]|0;
  FUNCTION_TABLE_vii[$42 & 1023]($ref$tmp17,$call$i107);
  $__size_$i1$i$i$i138 = ((($__psn)) + 11|0);
  $43 = HEAP8[$__size_$i1$i$i$i138>>0]|0;
  $tobool$i$i$i$i139 = ($43<<24>>24)<(0);
  if ($tobool$i$i$i$i139) {
   $44 = HEAP32[$__psn>>2]|0;
   HEAP8[$ref$tmp$i$i$i135>>0] = 0;
   __ZNSt3__211char_traitsIcE6assignERcRKc($44,$ref$tmp$i$i$i135);
   $__size_$i2$i$i$i141 = ((($__psn)) + 4|0);
   HEAP32[$__size_$i2$i$i$i141>>2] = 0;
  } else {
   HEAP8[$ref$tmp4$i$i$i136>>0] = 0;
   __ZNSt3__211char_traitsIcE6assignERcRKc($__psn,$ref$tmp4$i$i$i136);
   HEAP8[$__size_$i1$i$i$i138>>0] = 0;
  }
  __THREW__ = 0;
  invoke_vii(448,($__psn|0),0);
  $45 = __THREW__; __THREW__ = 0;
  $46 = $45&1;
  if ($46) {
   $47 = ___cxa_find_matching_catch_3(0|0)|0;
   $48 = tempRet0;
   ___clang_call_terminate($47);
   // unreachable;
  }
  ;HEAP32[$__psn>>2]=HEAP32[$ref$tmp17>>2]|0;HEAP32[$__psn+4>>2]=HEAP32[$ref$tmp17+4>>2]|0;HEAP32[$__psn+8>>2]=HEAP32[$ref$tmp17+8>>2]|0;
  $__i$0$i$i$i149 = 0;
  while(1) {
   $exitcond$i$i$i150 = ($__i$0$i$i$i149|0)==(3);
   if ($exitcond$i$i$i150) {
    break;
   }
   $arrayidx$i$i$i152 = (($ref$tmp17) + ($__i$0$i$i$i149<<2)|0);
   HEAP32[$arrayidx$i$i$i152>>2] = 0;
   $inc$i$i$i153 = (($__i$0$i$i$i149) + 1)|0;
   $__i$0$i$i$i149 = $inc$i$i$i153;
  }
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($ref$tmp17);
  $vtable$i156 = HEAP32[$call$i107>>2]|0;
  $vfn$i157 = ((($vtable$i156)) + 12|0);
  $49 = HEAP32[$vfn$i157>>2]|0;
  $call$i158 = (FUNCTION_TABLE_ii[$49 & 1023]($call$i107)|0);
  HEAP8[$__dp>>0] = $call$i158;
  $vtable$i159 = HEAP32[$call$i107>>2]|0;
  $vfn$i160 = ((($vtable$i159)) + 16|0);
  $50 = HEAP32[$vfn$i160>>2]|0;
  $call$i161 = (FUNCTION_TABLE_ii[$50 & 1023]($call$i107)|0);
  HEAP8[$__ts>>0] = $call$i161;
  $vtable$i162 = HEAP32[$call$i107>>2]|0;
  $vfn$i163 = ((($vtable$i162)) + 20|0);
  $51 = HEAP32[$vfn$i163>>2]|0;
  FUNCTION_TABLE_vii[$51 & 1023]($ref$tmp21,$call$i107);
  $__size_$i1$i$i$i167 = ((($__grp)) + 11|0);
  $52 = HEAP8[$__size_$i1$i$i$i167>>0]|0;
  $tobool$i$i$i$i168 = ($52<<24>>24)<(0);
  if ($tobool$i$i$i$i168) {
   $53 = HEAP32[$__grp>>2]|0;
   HEAP8[$ref$tmp$i$i$i164>>0] = 0;
   __ZNSt3__211char_traitsIcE6assignERcRKc($53,$ref$tmp$i$i$i164);
   $__size_$i2$i$i$i170 = ((($__grp)) + 4|0);
   HEAP32[$__size_$i2$i$i$i170>>2] = 0;
  } else {
   HEAP8[$ref$tmp4$i$i$i165>>0] = 0;
   __ZNSt3__211char_traitsIcE6assignERcRKc($__grp,$ref$tmp4$i$i$i165);
   HEAP8[$__size_$i1$i$i$i167>>0] = 0;
  }
  __THREW__ = 0;
  invoke_vii(448,($__grp|0),0);
  $54 = __THREW__; __THREW__ = 0;
  $55 = $54&1;
  if ($55) {
   $56 = ___cxa_find_matching_catch_3(0|0)|0;
   $57 = tempRet0;
   ___clang_call_terminate($56);
   // unreachable;
  }
  ;HEAP32[$__grp>>2]=HEAP32[$ref$tmp21>>2]|0;HEAP32[$__grp+4>>2]=HEAP32[$ref$tmp21+4>>2]|0;HEAP32[$__grp+8>>2]=HEAP32[$ref$tmp21+8>>2]|0;
  $__i$0$i$i$i178 = 0;
  while(1) {
   $exitcond$i$i$i179 = ($__i$0$i$i$i178|0)==(3);
   if ($exitcond$i$i$i179) {
    break;
   }
   $arrayidx$i$i$i181 = (($ref$tmp21) + ($__i$0$i$i$i178<<2)|0);
   HEAP32[$arrayidx$i$i$i181>>2] = 0;
   $inc$i$i$i182 = (($__i$0$i$i$i178) + 1)|0;
   $__i$0$i$i$i178 = $inc$i$i$i182;
  }
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($ref$tmp21);
  $vtable$i185 = HEAP32[$call$i107>>2]|0;
  $vfn$i186 = ((($vtable$i185)) + 24|0);
  $58 = HEAP32[$vfn$i186>>2]|0;
  FUNCTION_TABLE_vii[$58 & 1023]($ref$tmp23,$call$i107);
  $__size_$i1$i$i$i190 = ((($__sym)) + 11|0);
  $59 = HEAP8[$__size_$i1$i$i$i190>>0]|0;
  $tobool$i$i$i$i191 = ($59<<24>>24)<(0);
  if ($tobool$i$i$i$i191) {
   $60 = HEAP32[$__sym>>2]|0;
   HEAP8[$ref$tmp$i$i$i187>>0] = 0;
   __ZNSt3__211char_traitsIcE6assignERcRKc($60,$ref$tmp$i$i$i187);
   $__size_$i2$i$i$i193 = ((($__sym)) + 4|0);
   HEAP32[$__size_$i2$i$i$i193>>2] = 0;
  } else {
   HEAP8[$ref$tmp4$i$i$i188>>0] = 0;
   __ZNSt3__211char_traitsIcE6assignERcRKc($__sym,$ref$tmp4$i$i$i188);
   HEAP8[$__size_$i1$i$i$i190>>0] = 0;
  }
  __THREW__ = 0;
  invoke_vii(448,($__sym|0),0);
  $61 = __THREW__; __THREW__ = 0;
  $62 = $61&1;
  if ($62) {
   $63 = ___cxa_find_matching_catch_3(0|0)|0;
   $64 = tempRet0;
   ___clang_call_terminate($63);
   // unreachable;
  }
  ;HEAP32[$__sym>>2]=HEAP32[$ref$tmp23>>2]|0;HEAP32[$__sym+4>>2]=HEAP32[$ref$tmp23+4>>2]|0;HEAP32[$__sym+8>>2]=HEAP32[$ref$tmp23+8>>2]|0;
  $__i$0$i$i$i201 = 0;
  while(1) {
   $exitcond$i$i$i202 = ($__i$0$i$i$i201|0)==(3);
   if ($exitcond$i$i$i202) {
    break;
   }
   $arrayidx$i$i$i204 = (($ref$tmp23) + ($__i$0$i$i$i201<<2)|0);
   HEAP32[$arrayidx$i$i$i204>>2] = 0;
   $inc$i$i$i205 = (($__i$0$i$i$i201) + 1)|0;
   $__i$0$i$i$i201 = $inc$i$i$i205;
  }
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($ref$tmp23);
  $vtable$i208 = HEAP32[$call$i107>>2]|0;
  $vfn$i209 = ((($vtable$i208)) + 36|0);
  $65 = HEAP32[$vfn$i209>>2]|0;
  $call$i210 = (FUNCTION_TABLE_ii[$65 & 1023]($call$i107)|0);
  $storemerge = $call$i210;
 }
 HEAP32[$__fd>>2] = $storemerge;
 STACKTOP = sp;return;
}
function __ZNSt3__219__double_or_nothingIcEEvRNS_10unique_ptrIT_PFvPvEEERPS2_S9_($__b,$__n,$__e) {
 $__b = $__b|0;
 $__n = $__n|0;
 $__e = $__e|0;
 var $$cond = 0, $$pr = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__second_$i$i$i = 0, $add$ptr = 0, $add$ptr29 = 0;
 var $call16 = 0, $cmp = 0, $cmp17 = 0, $cmp3 = 0, $cmp6 = 0, $cond15 = 0, $mul4 = 0, $mul4$ = 0, $sub$ptr$sub = 0, $sub$ptr$sub10 = 0, $tobool$i$i23 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $__second_$i$i$i = ((($__b)) + 4|0);
 $0 = HEAP32[$__second_$i$i$i>>2]|0;
 $cmp = ($0|0)!=(441|0);
 $1 = HEAP32[$__e>>2]|0;
 $2 = HEAP32[$__b>>2]|0;
 $sub$ptr$sub = (($1) - ($2))|0;
 $cmp3 = ($sub$ptr$sub>>>0)<(2147483647);
 $mul4 = $sub$ptr$sub << 1;
 $mul4$ = $cmp3 ? $mul4 : -1;
 $cmp6 = ($mul4$|0)==(0);
 $$cond = $cmp6 ? 1 : $mul4$;
 $3 = HEAP32[$__n>>2]|0;
 $4 = $2;
 $sub$ptr$sub10 = (($3) - ($2))|0;
 $cond15 = $cmp ? $4 : 0;
 $call16 = (_realloc($cond15,$$cond)|0);
 $cmp17 = ($call16|0)==(0|0);
 if ($cmp17) {
  __ZSt17__throw_bad_allocv();
 }
 do {
  if ($cmp) {
   $5 = $call16;
   HEAP32[$__b>>2] = $5;
   $12 = $call16;
  } else {
   $$pr = HEAP32[$__b>>2]|0;
   $6 = $call16;
   HEAP32[$__b>>2] = $6;
   $tobool$i$i23 = ($$pr|0)==(0|0);
   if ($tobool$i$i23) {
    $12 = $call16;
   } else {
    $7 = HEAP32[$__second_$i$i$i>>2]|0;
    __THREW__ = 0;
    invoke_vi($7|0,($$pr|0));
    $8 = __THREW__; __THREW__ = 0;
    $9 = $8&1;
    if ($9) {
     $10 = ___cxa_find_matching_catch_3(0|0)|0;
     $11 = tempRet0;
     ___clang_call_terminate($10);
     // unreachable;
    } else {
     $$pre = HEAP32[$__b>>2]|0;
     $12 = $$pre;
     break;
    }
   }
  }
 } while(0);
 HEAP32[$__second_$i$i$i>>2] = (355);
 $add$ptr = (($12) + ($sub$ptr$sub10)|0);
 HEAP32[$__n>>2] = $add$ptr;
 $13 = HEAP32[$__b>>2]|0;
 $add$ptr29 = (($13) + ($$cond)|0);
 HEAP32[$__e>>2] = $add$ptr29;
 return;
}
function __ZNSt3__219__double_or_nothingIjEEvRNS_10unique_ptrIT_PFvPvEEERPS2_S9_($__b,$__n,$__e) {
 $__b = $__b|0;
 $__n = $__n|0;
 $__e = $__e|0;
 var $$cond = 0, $$pr = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__second_$i$i$i = 0, $add$ptr = 0, $add$ptr30 = 0, $call17 = 0;
 var $cmp = 0, $cmp18 = 0, $cmp3 = 0, $cmp6 = 0, $cond16 = 0, $div27 = 0, $mul4 = 0, $mul4$ = 0, $phitmp = 0, $sub$ptr$div11 = 0, $sub$ptr$sub = 0, $sub$ptr$sub10 = 0, $tobool$i$i23 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $__second_$i$i$i = ((($__b)) + 4|0);
 $0 = HEAP32[$__second_$i$i$i>>2]|0;
 $cmp = ($0|0)!=(441|0);
 $1 = HEAP32[$__e>>2]|0;
 $2 = HEAP32[$__b>>2]|0;
 $sub$ptr$sub = (($1) - ($2))|0;
 $cmp3 = ($sub$ptr$sub>>>0)<(2147483647);
 $mul4 = $sub$ptr$sub << 1;
 $mul4$ = $cmp3 ? $mul4 : -1;
 $cmp6 = ($mul4$|0)==(0);
 $$cond = $cmp6 ? 4 : $mul4$;
 $3 = HEAP32[$__n>>2]|0;
 $sub$ptr$sub10 = (($3) - ($2))|0;
 $sub$ptr$div11 = $sub$ptr$sub10 >> 2;
 $phitmp = $2;
 $cond16 = $cmp ? $phitmp : 0;
 $call17 = (_realloc($cond16,$$cond)|0);
 $cmp18 = ($call17|0)==(0|0);
 if ($cmp18) {
  __ZSt17__throw_bad_allocv();
 }
 do {
  if ($cmp) {
   $4 = $call17;
   HEAP32[$__b>>2] = $4;
   $11 = $call17;
  } else {
   $$pr = HEAP32[$__b>>2]|0;
   $5 = $call17;
   HEAP32[$__b>>2] = $5;
   $tobool$i$i23 = ($$pr|0)==(0|0);
   if ($tobool$i$i23) {
    $11 = $call17;
   } else {
    $6 = HEAP32[$__second_$i$i$i>>2]|0;
    __THREW__ = 0;
    invoke_vi($6|0,($$pr|0));
    $7 = __THREW__; __THREW__ = 0;
    $8 = $7&1;
    if ($8) {
     $9 = ___cxa_find_matching_catch_3(0|0)|0;
     $10 = tempRet0;
     ___clang_call_terminate($9);
     // unreachable;
    } else {
     $$pre = HEAP32[$__b>>2]|0;
     $11 = $$pre;
     break;
    }
   }
  }
 } while(0);
 HEAP32[$__second_$i$i$i>>2] = (355);
 $div27 = $$cond >>> 2;
 $add$ptr = (($11) + ($sub$ptr$div11<<2)|0);
 HEAP32[$__n>>2] = $add$ptr;
 $12 = HEAP32[$__b>>2]|0;
 $add$ptr30 = (($12) + ($div27<<2)|0);
 HEAP32[$__e>>2] = $add$ptr30;
 return;
}
function __ZNSt3__29money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__26locale5facetD2Ev($this);
 return;
}
function __ZNSt3__29money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__26locale5facetD2Ev($this);
 __ZdlPv($this);
 return;
}
function __ZNKSt3__29money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_bRNS_8ios_baseERjRe($this,$__b,$__e,$__intl,$__iob,$__err,$__v) {
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__intl = $__intl|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$pre = 0, $$pre$i$i$i = 0, $$pre66 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $7 = 0, $8 = 0, $9 = 0, $__atoms = 0, $__einp_$i$i$i$i = 0, $__einp_$i$i4$i$i = 0, $__first$addr$0$i = 0, $__first$addr$0$lcssa$i = 0, $__fmtflags_$i = 0, $__h$sroa$0$0 = 0, $__h$sroa$0$1 = 0, $__loc = 0, $__nbuf = 0, $__nc$0 = 0, $__nc$1 = 0;
 var $__nc$2 = 0, $__neg = 0, $__ninp_$i$i$i$i = 0, $__ninp_$i$i3$i$i = 0, $__second_$i$i$i = 0, $__w$0 = 0, $__wb = 0, $__wbuf = 0, $__wn = 0, $add = 0, $add$ptr = 0, $add$ptr$i = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $arrayidx = 0, $call$i$i$i$i38 = 0, $call$i$i9$i$i39 = 0, $call$i18 = 0, $call25 = 0, $call3$i$i$i = 0;
 var $call3$i$i$i$i = 0, $call3$i$i11$i$i = 0, $call3$i14$i$i = 0, $call4$i$i$i = 0, $call4$i15$i$i = 0, $call52 = 0, $call9 = 0, $cmp = 0, $cmp$i = 0, $cmp$i$i$i$i = 0, $cmp$i$i5$i$i = 0, $cmp1$i = 0, $cmp27 = 0, $cmp36 = 0, $cmp53 = 0, $ehselector$slot$0 = 0, $ehselector$slot$1 = 0, $ehselector$slot$2 = 0, $ehselector$slot$362 = 0, $ehselector$slot$363 = 0;
 var $exn$slot$0 = 0, $exn$slot$1 = 0, $exn$slot$2 = 0, $exn$slot$364 = 0, $exn$slot$365 = 0, $incdec$ptr = 0, $incdec$ptr$i = 0, $incdec$ptr48 = 0, $incdec$ptr49 = 0, $or = 0, $phitmp$i$i$i = 0, $retval$0$i$i$i$i = 0, $retval$0$i$i13$i$i = 0, $retval$sroa$0$0$copyload = 0, $sub$ptr$div2258 = 0, $sub$ptr$div47 = 0, $sub$ptr$lhs$cast44 = 0, $sub$ptr$rhs$cast45 = 0, $sub$ptr$sub = 0, $sub$ptr$sub46 = 0;
 var $tobool$i$i = 0, $tobool$i$i$i = 0, $tobool$i$i22 = 0, $tobool$i$i32 = 0, $tobool$i$i41 = 0, $tobool$i2$i$i = 0, $tobool32 = 0, $vararg_buffer = 0, $vfn$i = 0, $vfn$i$i$i$i = 0, $vfn$i$i8$i$i = 0, $vtable$i = 0, $vtable$i$i$i$i = 0, $vtable$i$i7$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 592|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(592|0);
 $agg$tmp$byval_copy = sp + 472|0;
 $vararg_buffer = sp;
 $__wbuf = sp + 72|0;
 $__wb = sp + 64|0;
 $__wn = sp + 56|0;
 $__loc = sp + 52|0;
 $__neg = sp + 576|0;
 $agg$tmp = sp + 48|0;
 $__atoms = sp + 8|0;
 $__nbuf = sp + 476|0;
 $0 = $__wbuf;
 HEAP32[$__wb>>2] = $0;
 $__second_$i$i$i = ((($__wb)) + 4|0);
 HEAP32[$__second_$i$i$i>>2] = (441);
 $add$ptr = ((($__wbuf)) + 400|0);
 __THREW__ = 0;
 invoke_vii(379,($__loc|0),($__iob|0));
 $1 = __THREW__; __THREW__ = 0;
 $2 = $1&1;
 if ($2) {
  $17 = ___cxa_find_matching_catch_2()|0;
  $18 = tempRet0;
  HEAP32[$__wb>>2] = 0;
  $58 = 441;$59 = $__wbuf;$ehselector$slot$362 = $18;$exn$slot$364 = $17;
  label = 54;
 } else {
  __THREW__ = 0;
  $call$i18 = (invoke_iii(380,($__loc|0),(20128|0))|0);
  $3 = __THREW__; __THREW__ = 0;
  $4 = $3&1;
  if ($4) {
   $19 = ___cxa_find_matching_catch_2()|0;
   $20 = tempRet0;
   $ehselector$slot$2 = $20;$exn$slot$2 = $19;
  } else {
   HEAP8[$__neg>>0] = 0;
   $5 = HEAP32[$__e>>2]|0;
   HEAP32[$agg$tmp>>2] = $5;
   $__fmtflags_$i = ((($__iob)) + 4|0);
   $6 = HEAP32[$__fmtflags_$i>>2]|0;
   __THREW__ = 0;
   ;HEAP32[$agg$tmp$byval_copy>>2]=HEAP32[$agg$tmp>>2]|0;
   $call9 = (invoke_iiiiiiiiiiii(449,($__b|0),($agg$tmp$byval_copy|0),($__intl|0),($__loc|0),($6|0),($__err|0),($__neg|0),($call$i18|0),($__wb|0),($__wn|0),($add$ptr|0))|0);
   $7 = __THREW__; __THREW__ = 0;
   $8 = $7&1;
   L7: do {
    if ($8) {
     label = 11;
    } else {
     L9: do {
      if ($call9) {
       $vtable$i = HEAP32[$call$i18>>2]|0;
       $vfn$i = ((($vtable$i)) + 48|0);
       $9 = HEAP32[$vfn$i>>2]|0;
       __THREW__ = 0;
       (invoke_iiiii($9|0,($call$i18|0),(17141|0),((17151)|0),($__atoms|0))|0);
       $10 = __THREW__; __THREW__ = 0;
       $11 = $10&1;
       if ($11) {
        $23 = ___cxa_find_matching_catch_2()|0;
        $24 = tempRet0;
        $ehselector$slot$0 = $24;$exn$slot$0 = $23;
       } else {
        $12 = HEAP32[$__wn>>2]|0;
        $13 = HEAP32[$__wb>>2]|0;
        $sub$ptr$sub = (($12) - ($13))|0;
        $cmp = ($sub$ptr$sub|0)>(392);
        if ($cmp) {
         $sub$ptr$div2258 = $sub$ptr$sub >>> 2;
         $add = (($sub$ptr$div2258) + 2)|0;
         $call25 = (_malloc($add)|0);
         $14 = $call25;
         $cmp27 = ($call25|0)==(0|0);
         if ($cmp27) {
          __THREW__ = 0;
          invoke_v(409);
          $15 = __THREW__; __THREW__ = 0;
          $16 = $15&1;
          if ($16) {
           $__h$sroa$0$0 = $14;
          } else {
           $__h$sroa$0$1 = $14;$__nc$0 = 0;
           label = 16;
          }
         } else {
          $__h$sroa$0$1 = $14;$__nc$0 = $call25;
          label = 16;
         }
        } else {
         $__h$sroa$0$1 = 0;$__nc$0 = $__nbuf;
         label = 16;
        }
        do {
         if ((label|0) == 16) {
          $28 = HEAP8[$__neg>>0]|0;
          $tobool32 = ($28<<24>>24)==(0);
          if ($tobool32) {
           $__nc$1 = $__nc$0;
          } else {
           $incdec$ptr = ((($__nc$0)) + 1|0);
           HEAP8[$__nc$0>>0] = 45;
           $__nc$1 = $incdec$ptr;
          }
          $29 = HEAP32[$__wb>>2]|0;
          $add$ptr$i = ((($__atoms)) + 40|0);
          $sub$ptr$rhs$cast45 = $__atoms;
          $__nc$2 = $__nc$1;$__w$0 = $29;
          while(1) {
           $30 = HEAP32[$__wn>>2]|0;
           $cmp36 = ($__w$0>>>0)<($30>>>0);
           if (!($cmp36)) {
            break;
           }
           $31 = HEAP32[$__w$0>>2]|0;
           $__first$addr$0$i = $__atoms;
           while(1) {
            $cmp$i = ($__first$addr$0$i|0)==($add$ptr$i|0);
            if ($cmp$i) {
             $__first$addr$0$lcssa$i = $add$ptr$i;
             break;
            }
            $32 = HEAP32[$__first$addr$0$i>>2]|0;
            $cmp1$i = ($32|0)==($31|0);
            if ($cmp1$i) {
             $__first$addr$0$lcssa$i = $__first$addr$0$i;
             break;
            }
            $incdec$ptr$i = ((($__first$addr$0$i)) + 4|0);
            $__first$addr$0$i = $incdec$ptr$i;
           }
           $sub$ptr$lhs$cast44 = $__first$addr$0$lcssa$i;
           $sub$ptr$sub46 = (($sub$ptr$lhs$cast44) - ($sub$ptr$rhs$cast45))|0;
           $sub$ptr$div47 = $sub$ptr$sub46 >> 2;
           $arrayidx = (17141 + ($sub$ptr$div47)|0);
           $33 = HEAP8[$arrayidx>>0]|0;
           HEAP8[$__nc$2>>0] = $33;
           $incdec$ptr48 = ((($__w$0)) + 4|0);
           $incdec$ptr49 = ((($__nc$2)) + 1|0);
           $__nc$2 = $incdec$ptr49;$__w$0 = $incdec$ptr48;
          }
          HEAP8[$__nc$2>>0] = 0;
          HEAP32[$vararg_buffer>>2] = $__v;
          $call52 = (_sscanf($__nbuf,17026,$vararg_buffer)|0);
          $cmp53 = ($call52|0)==(1);
          if (!($cmp53)) {
           __THREW__ = 0;
           invoke_vi(443,(17030|0));
           $34 = __THREW__; __THREW__ = 0;
           $35 = $34&1;
           if ($35) {
            $__h$sroa$0$0 = $__h$sroa$0$1;
            break;
           }
          }
          $tobool$i$i41 = ($__h$sroa$0$1|0)==(0);
          if (!($tobool$i$i41)) {
           $36 = $__h$sroa$0$1;
           _free($36);
          }
          break L9;
         }
        } while(0);
        $25 = ___cxa_find_matching_catch_2()|0;
        $26 = tempRet0;
        $tobool$i$i32 = ($__h$sroa$0$0|0)==(0);
        if (!($tobool$i$i32)) {
         $27 = $__h$sroa$0$0;
         _free($27);
        }
        $ehselector$slot$0 = $26;$exn$slot$0 = $25;
       }
       $ehselector$slot$1 = $ehselector$slot$0;$exn$slot$1 = $exn$slot$0;
       break L7;
      }
     } while(0);
     $37 = HEAP32[$__b>>2]|0;
     $tobool$i$i$i = ($37|0)==(0|0);
     do {
      if ($tobool$i$i$i) {
       $64 = 1;
      } else {
       $__ninp_$i$i$i$i = ((($37)) + 12|0);
       $38 = HEAP32[$__ninp_$i$i$i$i>>2]|0;
       $__einp_$i$i$i$i = ((($37)) + 16|0);
       $39 = HEAP32[$__einp_$i$i$i$i>>2]|0;
       $cmp$i$i$i$i = ($38|0)==($39|0);
       if ($cmp$i$i$i$i) {
        $vtable$i$i$i$i = HEAP32[$37>>2]|0;
        $vfn$i$i$i$i = ((($vtable$i$i$i$i)) + 36|0);
        $40 = HEAP32[$vfn$i$i$i$i>>2]|0;
        __THREW__ = 0;
        $call$i$i$i$i38 = (invoke_ii($40|0,($37|0))|0);
        $41 = __THREW__; __THREW__ = 0;
        $42 = $41&1;
        if ($42) {
         label = 11;
         break L7;
        } else {
         $retval$0$i$i$i$i = $call$i$i$i$i38;
        }
       } else {
        $43 = HEAP32[$38>>2]|0;
        $call3$i$i$i$i = (__ZNSt3__211char_traitsIwE11to_int_typeEw($43)|0);
        $retval$0$i$i$i$i = $call3$i$i$i$i;
       }
       $call3$i$i$i = (__ZNSt3__211char_traitsIwE3eofEv()|0);
       $call4$i$i$i = (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($retval$0$i$i$i$i,$call3$i$i$i)|0);
       if ($call4$i$i$i) {
        HEAP32[$__b>>2] = 0;
        $64 = 1;
        break;
       } else {
        $$pre$i$i$i = HEAP32[$__b>>2]|0;
        $phitmp$i$i$i = ($$pre$i$i$i|0)==(0|0);
        $64 = $phitmp$i$i$i;
        break;
       }
      }
     } while(0);
     $44 = HEAP32[$__e>>2]|0;
     $tobool$i2$i$i = ($44|0)==(0|0);
     do {
      if ($tobool$i2$i$i) {
       label = 44;
      } else {
       $__ninp_$i$i3$i$i = ((($44)) + 12|0);
       $45 = HEAP32[$__ninp_$i$i3$i$i>>2]|0;
       $__einp_$i$i4$i$i = ((($44)) + 16|0);
       $46 = HEAP32[$__einp_$i$i4$i$i>>2]|0;
       $cmp$i$i5$i$i = ($45|0)==($46|0);
       if ($cmp$i$i5$i$i) {
        $vtable$i$i7$i$i = HEAP32[$44>>2]|0;
        $vfn$i$i8$i$i = ((($vtable$i$i7$i$i)) + 36|0);
        $47 = HEAP32[$vfn$i$i8$i$i>>2]|0;
        __THREW__ = 0;
        $call$i$i9$i$i39 = (invoke_ii($47|0,($44|0))|0);
        $48 = __THREW__; __THREW__ = 0;
        $49 = $48&1;
        if ($49) {
         label = 11;
         break L7;
        } else {
         $retval$0$i$i13$i$i = $call$i$i9$i$i39;
        }
       } else {
        $50 = HEAP32[$45>>2]|0;
        $call3$i$i11$i$i = (__ZNSt3__211char_traitsIwE11to_int_typeEw($50)|0);
        $retval$0$i$i13$i$i = $call3$i$i11$i$i;
       }
       $call3$i14$i$i = (__ZNSt3__211char_traitsIwE3eofEv()|0);
       $call4$i15$i$i = (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($retval$0$i$i13$i$i,$call3$i14$i$i)|0);
       if ($call4$i15$i$i) {
        HEAP32[$__e>>2] = 0;
        label = 44;
        break;
       } else {
        if ($64) {
         break;
        } else {
         label = 46;
         break;
        }
       }
      }
     } while(0);
     if ((label|0) == 44) {
      if ($64) {
       label = 46;
      }
     }
     if ((label|0) == 46) {
      $51 = HEAP32[$__err>>2]|0;
      $or = $51 | 2;
      HEAP32[$__err>>2] = $or;
     }
     $retval$sroa$0$0$copyload = HEAP32[$__b>>2]|0;
     __ZNSt3__26localeD2Ev($__loc);
     $52 = HEAP32[$__wb>>2]|0;
     HEAP32[$__wb>>2] = 0;
     $tobool$i$i22 = ($52|0)==(0|0);
     if (!($tobool$i$i22)) {
      $53 = HEAP32[$__second_$i$i$i>>2]|0;
      __THREW__ = 0;
      invoke_vi($53|0,($52|0));
      $54 = __THREW__; __THREW__ = 0;
      $55 = $54&1;
      if ($55) {
       $56 = ___cxa_find_matching_catch_3(0|0)|0;
       $57 = tempRet0;
       ___clang_call_terminate($56);
       // unreachable;
      }
     }
     STACKTOP = sp;return ($retval$sroa$0$0$copyload|0);
    }
   } while(0);
   if ((label|0) == 11) {
    $21 = ___cxa_find_matching_catch_2()|0;
    $22 = tempRet0;
    $ehselector$slot$1 = $22;$exn$slot$1 = $21;
   }
   $ehselector$slot$2 = $ehselector$slot$1;$exn$slot$2 = $exn$slot$1;
  }
  __ZNSt3__26localeD2Ev($__loc);
  $$pre = HEAP32[$__wb>>2]|0;
  HEAP32[$__wb>>2] = 0;
  $tobool$i$i = ($$pre|0)==(0|0);
  if ($tobool$i$i) {
   $ehselector$slot$363 = $ehselector$slot$2;$exn$slot$365 = $exn$slot$2;
  } else {
   $$pre66 = HEAP32[$__second_$i$i$i>>2]|0;
   $58 = $$pre66;$59 = $$pre;$ehselector$slot$362 = $ehselector$slot$2;$exn$slot$364 = $exn$slot$2;
   label = 54;
  }
 }
 if ((label|0) == 54) {
  __THREW__ = 0;
  invoke_vi($58|0,($59|0));
  $60 = __THREW__; __THREW__ = 0;
  $61 = $60&1;
  if ($61) {
   $62 = ___cxa_find_matching_catch_3(0|0)|0;
   $63 = tempRet0;
   ___clang_call_terminate($62);
   // unreachable;
  } else {
   $ehselector$slot$363 = $ehselector$slot$362;$exn$slot$365 = $exn$slot$364;
  }
 }
 ___resumeException($exn$slot$365|0);
 // unreachable;
 return (0)|0;
}
function __ZNKSt3__29money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_bRNS_8ios_baseERjRNS_12basic_stringIwS3_NS_9allocatorIwEEEE($this,$__b,$__e,$__intl,$__iob,$__err,$__v) {
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__intl = $__intl|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$pre = 0, $$pre$i$i$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $__einp_$i$i$i$i = 0, $__einp_$i$i4$i$i = 0, $__fmtflags_$i = 0, $__loc = 0, $__neg = 0, $__ninp_$i$i$i$i = 0, $__ninp_$i$i3$i$i = 0, $__second_$i$i$i = 0, $__size_$i1$i = 0, $__size_$i2$i = 0, $__w$0 = 0, $__wb = 0, $__wbuf = 0, $__wn = 0, $add$ptr = 0, $add$ptr18 = 0, $agg$tmp = 0;
 var $agg$tmp$byval_copy = 0, $call$i$i$i$i28 = 0, $call$i$i9$i$i29 = 0, $call$i21 = 0, $call$i23 = 0, $call$i26 = 0, $call3$i$i$i = 0, $call3$i$i$i$i = 0, $call3$i$i11$i$i = 0, $call3$i14$i$i = 0, $call4$i$i$i = 0, $call4$i15$i$i = 0, $call9 = 0, $cmp = 0, $cmp$i$i$i$i = 0, $cmp$i$i5$i$i = 0, $cmp19 = 0, $ehselector$slot$1 = 0, $ehselector$slot$241 = 0, $ehselector$slot$242 = 0;
 var $exn$slot$1 = 0, $exn$slot$243 = 0, $exn$slot$244 = 0, $incdec$ptr = 0, $or = 0, $phitmp$i$i$i = 0, $ref$tmp$i = 0, $ref$tmp4$i = 0, $retval$0$i$i$i$i = 0, $retval$0$i$i13$i$i = 0, $retval$sroa$0$0$copyload = 0, $tobool$i$i = 0, $tobool$i$i$i = 0, $tobool$i$i22 = 0, $tobool$i$i31 = 0, $tobool$i2$i$i = 0, $tobool10 = 0, $vfn$i = 0, $vfn$i$i$i$i = 0, $vfn$i$i8$i$i = 0;
 var $vfn$i25 = 0, $vtable$i = 0, $vtable$i$i$i$i = 0, $vtable$i$i7$i$i = 0, $vtable$i24 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 448|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(448|0);
 $agg$tmp$byval_copy = sp + 432|0;
 $ref$tmp$i = sp + 428|0;
 $ref$tmp4$i = sp + 424|0;
 $__wbuf = sp + 24|0;
 $__wb = sp + 16|0;
 $__wn = sp + 8|0;
 $__loc = sp + 4|0;
 $__neg = sp + 436|0;
 $agg$tmp = sp;
 $0 = $__wbuf;
 HEAP32[$__wb>>2] = $0;
 $__second_$i$i$i = ((($__wb)) + 4|0);
 HEAP32[$__second_$i$i$i>>2] = (441);
 $add$ptr = ((($__wbuf)) + 400|0);
 __THREW__ = 0;
 invoke_vii(379,($__loc|0),($__iob|0));
 $1 = __THREW__; __THREW__ = 0;
 $2 = $1&1;
 if ($2) {
  $19 = ___cxa_find_matching_catch_2()|0;
  $20 = tempRet0;
  HEAP32[$__wb>>2] = 0;
  $55 = $__wbuf;$ehselector$slot$241 = $20;$exn$slot$243 = $19;
  label = 41;
 } else {
  __THREW__ = 0;
  $call$i21 = (invoke_iii(380,($__loc|0),(20128|0))|0);
  $3 = __THREW__; __THREW__ = 0;
  $4 = $3&1;
  if ($4) {
   $21 = ___cxa_find_matching_catch_2()|0;
   $22 = tempRet0;
   $ehselector$slot$1 = $22;$exn$slot$1 = $21;
  } else {
   HEAP8[$__neg>>0] = 0;
   $5 = HEAP32[$__e>>2]|0;
   HEAP32[$agg$tmp>>2] = $5;
   $__fmtflags_$i = ((($__iob)) + 4|0);
   $6 = HEAP32[$__fmtflags_$i>>2]|0;
   $7 = $5;
   __THREW__ = 0;
   ;HEAP32[$agg$tmp$byval_copy>>2]=HEAP32[$agg$tmp>>2]|0;
   $call9 = (invoke_iiiiiiiiiiii(449,($__b|0),($agg$tmp$byval_copy|0),($__intl|0),($__loc|0),($6|0),($__err|0),($__neg|0),($call$i21|0),($__wb|0),($__wn|0),($add$ptr|0))|0);
   $8 = __THREW__; __THREW__ = 0;
   $9 = $8&1;
   L7: do {
    if (!($9)) {
     if ($call9) {
      $10 = ((($__v)) + 8|0);
      $__size_$i1$i = ((($10)) + 3|0);
      $11 = HEAP8[$__size_$i1$i>>0]|0;
      $tobool$i$i22 = ($11<<24>>24)<(0);
      if ($tobool$i$i22) {
       $12 = HEAP32[$__v>>2]|0;
       HEAP32[$ref$tmp$i>>2] = 0;
       __ZNSt3__211char_traitsIwE6assignERwRKw($12,$ref$tmp$i);
       $__size_$i2$i = ((($__v)) + 4|0);
       HEAP32[$__size_$i2$i>>2] = 0;
      } else {
       HEAP32[$ref$tmp4$i>>2] = 0;
       __ZNSt3__211char_traitsIwE6assignERwRKw($__v,$ref$tmp4$i);
       HEAP8[$__size_$i1$i>>0] = 0;
      }
      $13 = HEAP8[$__neg>>0]|0;
      $tobool10 = ($13<<24>>24)==(0);
      if (!($tobool10)) {
       $vtable$i = HEAP32[$call$i21>>2]|0;
       $vfn$i = ((($vtable$i)) + 44|0);
       $14 = HEAP32[$vfn$i>>2]|0;
       __THREW__ = 0;
       $call$i23 = (invoke_iii($14|0,($call$i21|0),45)|0);
       $15 = __THREW__; __THREW__ = 0;
       $16 = $15&1;
       if ($16) {
        break;
       }
       __THREW__ = 0;
       invoke_vii(450,($__v|0),($call$i23|0));
       $17 = __THREW__; __THREW__ = 0;
       $18 = $17&1;
       if ($18) {
        break;
       }
      }
      $vtable$i24 = HEAP32[$call$i21>>2]|0;
      $vfn$i25 = ((($vtable$i24)) + 44|0);
      $23 = HEAP32[$vfn$i25>>2]|0;
      __THREW__ = 0;
      $call$i26 = (invoke_iii($23|0,($call$i21|0),48)|0);
      $24 = __THREW__; __THREW__ = 0;
      $25 = $24&1;
      if ($25) {
       break;
      }
      $26 = HEAP32[$__wb>>2]|0;
      $27 = HEAP32[$__wn>>2]|0;
      $add$ptr18 = ((($27)) + -4|0);
      $__w$0 = $26;
      while(1) {
       $cmp = ($__w$0>>>0)<($add$ptr18>>>0);
       if (!($cmp)) {
        break;
       }
       $28 = HEAP32[$__w$0>>2]|0;
       $cmp19 = ($28|0)==($call$i26|0);
       if (!($cmp19)) {
        break;
       }
       $incdec$ptr = ((($__w$0)) + 4|0);
       $__w$0 = $incdec$ptr;
      }
      __THREW__ = 0;
      (invoke_iiii(451,($__v|0),($__w$0|0),($27|0))|0);
      $29 = __THREW__; __THREW__ = 0;
      $30 = $29&1;
      if ($30) {
       break;
      }
     }
     $31 = HEAP32[$__b>>2]|0;
     $tobool$i$i$i = ($31|0)==(0|0);
     do {
      if ($tobool$i$i$i) {
       $60 = 1;
      } else {
       $__ninp_$i$i$i$i = ((($31)) + 12|0);
       $32 = HEAP32[$__ninp_$i$i$i$i>>2]|0;
       $__einp_$i$i$i$i = ((($31)) + 16|0);
       $33 = HEAP32[$__einp_$i$i$i$i>>2]|0;
       $cmp$i$i$i$i = ($32|0)==($33|0);
       if ($cmp$i$i$i$i) {
        $vtable$i$i$i$i = HEAP32[$31>>2]|0;
        $vfn$i$i$i$i = ((($vtable$i$i$i$i)) + 36|0);
        $34 = HEAP32[$vfn$i$i$i$i>>2]|0;
        __THREW__ = 0;
        $call$i$i$i$i28 = (invoke_ii($34|0,($31|0))|0);
        $35 = __THREW__; __THREW__ = 0;
        $36 = $35&1;
        if ($36) {
         break L7;
        } else {
         $retval$0$i$i$i$i = $call$i$i$i$i28;
        }
       } else {
        $37 = HEAP32[$32>>2]|0;
        $call3$i$i$i$i = (__ZNSt3__211char_traitsIwE11to_int_typeEw($37)|0);
        $retval$0$i$i$i$i = $call3$i$i$i$i;
       }
       $call3$i$i$i = (__ZNSt3__211char_traitsIwE3eofEv()|0);
       $call4$i$i$i = (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($retval$0$i$i$i$i,$call3$i$i$i)|0);
       if ($call4$i$i$i) {
        HEAP32[$__b>>2] = 0;
        $60 = 1;
        break;
       } else {
        $$pre$i$i$i = HEAP32[$__b>>2]|0;
        $phitmp$i$i$i = ($$pre$i$i$i|0)==(0|0);
        $60 = $phitmp$i$i$i;
        break;
       }
      }
     } while(0);
     $tobool$i2$i$i = ($5|0)==(0);
     do {
      if ($tobool$i2$i$i) {
       label = 32;
      } else {
       $__ninp_$i$i3$i$i = ((($7)) + 12|0);
       $38 = HEAP32[$__ninp_$i$i3$i$i>>2]|0;
       $__einp_$i$i4$i$i = ((($7)) + 16|0);
       $39 = HEAP32[$__einp_$i$i4$i$i>>2]|0;
       $cmp$i$i5$i$i = ($38|0)==($39|0);
       if ($cmp$i$i5$i$i) {
        $40 = $5;
        $vtable$i$i7$i$i = HEAP32[$40>>2]|0;
        $vfn$i$i8$i$i = ((($vtable$i$i7$i$i)) + 36|0);
        $41 = HEAP32[$vfn$i$i8$i$i>>2]|0;
        __THREW__ = 0;
        $call$i$i9$i$i29 = (invoke_ii($41|0,($7|0))|0);
        $42 = __THREW__; __THREW__ = 0;
        $43 = $42&1;
        if ($43) {
         break L7;
        } else {
         $retval$0$i$i13$i$i = $call$i$i9$i$i29;
        }
       } else {
        $44 = HEAP32[$38>>2]|0;
        $call3$i$i11$i$i = (__ZNSt3__211char_traitsIwE11to_int_typeEw($44)|0);
        $retval$0$i$i13$i$i = $call3$i$i11$i$i;
       }
       $call3$i14$i$i = (__ZNSt3__211char_traitsIwE3eofEv()|0);
       $call4$i15$i$i = (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($retval$0$i$i13$i$i,$call3$i14$i$i)|0);
       if ($call4$i15$i$i) {
        HEAP32[$__e>>2] = 0;
        label = 32;
        break;
       } else {
        if ($60) {
         break;
        } else {
         label = 34;
         break;
        }
       }
      }
     } while(0);
     if ((label|0) == 32) {
      if ($60) {
       label = 34;
      }
     }
     if ((label|0) == 34) {
      $45 = HEAP32[$__err>>2]|0;
      $or = $45 | 2;
      HEAP32[$__err>>2] = $or;
     }
     $retval$sroa$0$0$copyload = HEAP32[$__b>>2]|0;
     __ZNSt3__26localeD2Ev($__loc);
     $46 = HEAP32[$__wb>>2]|0;
     HEAP32[$__wb>>2] = 0;
     $tobool$i$i31 = ($46|0)==(0|0);
     if (!($tobool$i$i31)) {
      $47 = HEAP32[$__second_$i$i$i>>2]|0;
      __THREW__ = 0;
      invoke_vi($47|0,($46|0));
      $48 = __THREW__; __THREW__ = 0;
      $49 = $48&1;
      if ($49) {
       $50 = ___cxa_find_matching_catch_3(0|0)|0;
       $51 = tempRet0;
       ___clang_call_terminate($50);
       // unreachable;
      }
     }
     STACKTOP = sp;return ($retval$sroa$0$0$copyload|0);
    }
   } while(0);
   $52 = ___cxa_find_matching_catch_2()|0;
   $53 = tempRet0;
   $ehselector$slot$1 = $53;$exn$slot$1 = $52;
  }
  __ZNSt3__26localeD2Ev($__loc);
  $$pre = HEAP32[$__wb>>2]|0;
  HEAP32[$__wb>>2] = 0;
  $tobool$i$i = ($$pre|0)==(0|0);
  if ($tobool$i$i) {
   $ehselector$slot$242 = $ehselector$slot$1;$exn$slot$244 = $exn$slot$1;
  } else {
   $55 = $$pre;$ehselector$slot$241 = $ehselector$slot$1;$exn$slot$243 = $exn$slot$1;
   label = 41;
  }
 }
 if ((label|0) == 41) {
  $54 = HEAP32[$__second_$i$i$i>>2]|0;
  __THREW__ = 0;
  invoke_vi($54|0,($55|0));
  $56 = __THREW__; __THREW__ = 0;
  $57 = $56&1;
  if ($57) {
   $58 = ___cxa_find_matching_catch_3(0|0)|0;
   $59 = tempRet0;
   ___clang_call_terminate($58);
   // unreachable;
  } else {
   $ehselector$slot$242 = $ehselector$slot$241;$exn$slot$244 = $exn$slot$243;
  }
 }
 ___resumeException($exn$slot$244|0);
 // unreachable;
 return (0)|0;
}
function __ZNSt3__29money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE8__do_getERS4_S4_bRKNS_6localeEjRjRbRKNS_5ctypeIwEERNS_10unique_ptrIwPFvPvEEERPwSM_($__b,$__e,$__intl,$__loc,$__flags,$__err,$__neg,$__ct,$__wb,$__wn,$__we) {
 $__b = $__b|0;
 $__e = $__e|0;
 $__intl = $__intl|0;
 $__loc = $__loc|0;
 $__flags = $__flags|0;
 $__err = $__err|0;
 $__neg = $__neg|0;
 $__ct = $__ct|0;
 $__wb = $__wb|0;
 $__wn = $__wn|0;
 $__we = $__we|0;
 var $$lcssa = 0, $$pre = 0, $$pre$i$i$i = 0, $$pre$i$i$i203 = 0, $$pre$i$i$i541 = 0, $$pre$i$i$i615 = 0, $$pre$i$i$i704 = 0, $$pre$i$i$i786 = 0, $$pre$i$i$i858 = 0, $$pre$i17$i$i223 = 0, $$pre$i17$i$i2231070 = 0, $$pre$i17$i$i2231072 = 0, $$pre$i17$i$i635 = 0, $$pre$i17$i$i6351067 = 0, $$pre$i17$i$i6351068 = 0, $$pre$i17$i$i724 = 0, $$pre$i17$i$i7241054 = 0, $$pre$i17$i$i7241056 = 0, $$pre$i17$i$i806 = 0, $$pre$i17$i$i878 = 0;
 var $$pre$i17$i$i8781059$ph = 0, $$pre$i17$i$i87810591079 = 0, $$pre1057 = 0, $$pre1058 = 0, $$pre1061 = 0, $$pre1062 = 0, $$pre1063 = 0, $$pre1064 = 0, $$pre1065 = 0, $$pre1066 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0;
 var $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0;
 var $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0;
 var $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0;
 var $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0;
 var $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0;
 var $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0;
 var $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0;
 var $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0;
 var $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0;
 var $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0;
 var $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0;
 var $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0;
 var $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0;
 var $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0;
 var $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0;
 var $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0;
 var $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0;
 var $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0;
 var $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0;
 var $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0;
 var $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__dp = 0, $__einp_$i$i = 0, $__einp_$i$i$i$i = 0, $__einp_$i$i$i$i191 = 0, $__einp_$i$i$i$i529 = 0, $__einp_$i$i$i$i603 = 0, $__einp_$i$i$i$i692 = 0, $__einp_$i$i$i$i774 = 0;
 var $__einp_$i$i$i$i846 = 0, $__einp_$i$i150 = 0, $__einp_$i$i163 = 0, $__einp_$i$i177 = 0, $__einp_$i$i235 = 0, $__einp_$i$i252 = 0, $__einp_$i$i316 = 0, $__einp_$i$i337 = 0, $__einp_$i$i3371074 = 0, $__einp_$i$i358 = 0, $__einp_$i$i4$i$i = 0, $__einp_$i$i4$i$i211 = 0, $__einp_$i$i4$i$i549 = 0, $__einp_$i$i4$i$i623 = 0, $__einp_$i$i4$i$i712 = 0, $__einp_$i$i4$i$i794 = 0, $__einp_$i$i4$i$i866 = 0, $__einp_$i$i400 = 0, $__einp_$i$i442 = 0, $__einp_$i$i647 = 0;
 var $__einp_$i$i661 = 0, $__einp_$i$i736 = 0, $__einp_$i$i759 = 0, $__einp_$i$i819 = 0, $__einp_$i$i832 = 0, $__einp_$i$i891 = 0, $__einp_$i$i908 = 0, $__einp_$i$i921 = 0, $__et = 0, $__fd = 0, $__gb = 0, $__gbuf = 0, $__ge = 0, $__gn = 0, $__grp = 0, $__i$0 = 0, $__i$0$i$i = 0, $__i$0$i$i113 = 0, $__i$0$i$i120 = 0, $__i$0$i$i128 = 0;
 var $__i$0$i$i140 = 0, $__ng$0 = 0, $__ng$2$ph = 0, $__ninp_$i$i = 0, $__ninp_$i$i$i$i = 0, $__ninp_$i$i$i$i190 = 0, $__ninp_$i$i$i$i528 = 0, $__ninp_$i$i$i$i602 = 0, $__ninp_$i$i$i$i691 = 0, $__ninp_$i$i$i$i773 = 0, $__ninp_$i$i$i$i845 = 0, $__ninp_$i$i149 = 0, $__ninp_$i$i162 = 0, $__ninp_$i$i176 = 0, $__ninp_$i$i234 = 0, $__ninp_$i$i251 = 0, $__ninp_$i$i3$i$i = 0, $__ninp_$i$i3$i$i210 = 0, $__ninp_$i$i3$i$i548 = 0, $__ninp_$i$i3$i$i622 = 0;
 var $__ninp_$i$i3$i$i711 = 0, $__ninp_$i$i3$i$i793 = 0, $__ninp_$i$i3$i$i865 = 0, $__ninp_$i$i315 = 0, $__ninp_$i$i336 = 0, $__ninp_$i$i3361073 = 0, $__ninp_$i$i357 = 0, $__ninp_$i$i399 = 0, $__ninp_$i$i441 = 0, $__ninp_$i$i646 = 0, $__ninp_$i$i660 = 0, $__ninp_$i$i735 = 0, $__ninp_$i$i758 = 0, $__ninp_$i$i818 = 0, $__ninp_$i$i831 = 0, $__ninp_$i$i890 = 0, $__ninp_$i$i907 = 0, $__ninp_$i$i920 = 0, $__nsn = 0, $__nsn$__trailing_sign$0 = 0;
 var $__nsn$__trailing_sign$0102 = 0, $__p$0 = 0, $__pat = 0, $__psn = 0, $__psn$__trailing_sign$0 = 0, $__psn$__trailing_sign$0101 = 0, $__second_$i$i$i = 0, $__size_$i$i = 0, $__size_$i$i$i461 = 0, $__size_$i$i268 = 0, $__size_$i$i486 = 0, $__size_$i$i751 = 0, $__size_$i$i933 = 0, $__size_$i2$i = 0, $__size_$i2$i$i = 0, $__size_$i2$i270 = 0, $__size_$i2$i488 = 0, $__size_$i2$i935 = 0, $__size_$i3$i = 0, $__spaces = 0;
 var $__sym = 0, $__sym_curr_char$sroa$0$0 = 0, $__sym_space_end$sroa$0$0 = 0, $__trailing_sign$0 = 0, $__trailing_sign$1 = 0, $__ts = 0, $__we$addr = 0, $add = 0, $add$ptr = 0, $add$ptr$i = 0, $add$ptr$i$i$i = 0, $add$ptr$i472 = 0, $add$ptr$i504 = 0, $add$ptr$i595 = 0, $add$ptr$i684 = 0, $and969 = 0, $arrayidx = 0, $arrayidx$i$i = 0, $arrayidx$i$i116 = 0, $arrayidx$i$i123 = 0;
 var $arrayidx$i$i131 = 0, $arrayidx$i$i143 = 0, $arrayidx115 = 0, $arrayidx132 = 0, $brmerge = 0, $call$i$i$i$i159 = 0, $call$i$i$i$i229 = 0, $call$i$i$i$i568 = 0, $call$i$i$i$i641 = 0, $call$i$i$i$i730 = 0, $call$i$i$i$i813 = 0, $call$i$i$i$i885 = 0, $call$i$i158 = 0, $call$i$i172 = 0, $call$i$i187 = 0, $call$i$i244 = 0, $call$i$i264 = 0, $call$i$i311 = 0, $call$i$i346 = 0, $call$i$i388 = 0;
 var $call$i$i430 = 0, $call$i$i656 = 0, $call$i$i745 = 0, $call$i$i828 = 0, $call$i$i9$i$i160 = 0, $call$i$i9$i$i231 = 0, $call$i$i9$i$i570 = 0, $call$i$i9$i$i643 = 0, $call$i$i9$i$i732 = 0, $call$i$i9$i$i815 = 0, $call$i$i9$i$i887 = 0, $call$i$i900 = 0, $call$i$i917 = 0, $call$i174 = 0, $call$i248 = 0, $call$i475 = 0, $call$i749 = 0, $call$i904 = 0, $call3$i$i$i = 0, $call3$i$i$i$i = 0;
 var $call3$i$i$i$i197 = 0, $call3$i$i$i$i535 = 0, $call3$i$i$i$i609 = 0, $call3$i$i$i$i698 = 0, $call3$i$i$i$i780 = 0, $call3$i$i$i$i852 = 0, $call3$i$i$i200 = 0, $call3$i$i$i538 = 0, $call3$i$i$i612 = 0, $call3$i$i$i701 = 0, $call3$i$i$i783 = 0, $call3$i$i$i855 = 0, $call3$i$i11$i$i = 0, $call3$i$i11$i$i217 = 0, $call3$i$i11$i$i555 = 0, $call3$i$i11$i$i629 = 0, $call3$i$i11$i$i718 = 0, $call3$i$i11$i$i800 = 0, $call3$i$i11$i$i872 = 0, $call3$i$i155 = 0;
 var $call3$i$i168 = 0, $call3$i$i183 = 0, $call3$i$i240 = 0, $call3$i$i258 = 0, $call3$i$i307 = 0, $call3$i$i342 = 0, $call3$i$i384 = 0, $call3$i$i426 = 0, $call3$i$i652 = 0, $call3$i$i741 = 0, $call3$i$i824 = 0, $call3$i$i896 = 0, $call3$i$i913 = 0, $call3$i14$i$i = 0, $call3$i14$i$i220 = 0, $call3$i14$i$i558 = 0, $call3$i14$i$i632 = 0, $call3$i14$i$i721 = 0, $call3$i14$i$i803 = 0, $call3$i14$i$i875 = 0;
 var $call4$i$i$i = 0, $call4$i$i$i201 = 0, $call4$i$i$i539 = 0, $call4$i$i$i613 = 0, $call4$i$i$i702 = 0, $call4$i$i$i784 = 0, $call4$i$i$i856 = 0, $call4$i15$i$i = 0, $call4$i15$i$i221 = 0, $call4$i15$i$i559 = 0, $call4$i15$i$i633 = 0, $call4$i15$i$i722 = 0, $call4$i15$i$i804 = 0, $call4$i15$i$i876 = 0, $cmp = 0, $cmp$i$i = 0, $cmp$i$i$i = 0, $cmp$i$i$i$i = 0, $cmp$i$i$i$i192 = 0, $cmp$i$i$i$i530 = 0;
 var $cmp$i$i$i$i604 = 0, $cmp$i$i$i$i693 = 0, $cmp$i$i$i$i775 = 0, $cmp$i$i$i$i847 = 0, $cmp$i$i151 = 0, $cmp$i$i164 = 0, $cmp$i$i178 = 0, $cmp$i$i236 = 0, $cmp$i$i253 = 0, $cmp$i$i317 = 0, $cmp$i$i338 = 0, $cmp$i$i3381075 = 0, $cmp$i$i359 = 0, $cmp$i$i401 = 0, $cmp$i$i443 = 0, $cmp$i$i5$i$i = 0, $cmp$i$i5$i$i212 = 0, $cmp$i$i5$i$i550 = 0, $cmp$i$i5$i$i624 = 0, $cmp$i$i5$i$i713 = 0;
 var $cmp$i$i5$i$i795 = 0, $cmp$i$i5$i$i867 = 0, $cmp$i$i648 = 0, $cmp$i$i662 = 0, $cmp$i$i737 = 0, $cmp$i$i760 = 0, $cmp$i$i820 = 0, $cmp$i$i833 = 0, $cmp$i$i892 = 0, $cmp$i$i909 = 0, $cmp$i$i922 = 0, $cmp111 = 0, $cmp112 = 0, $cmp117 = 0, $cmp121970 = 0, $cmp130 = 0, $cmp162 = 0, $cmp199 = 0, $cmp240 = 0, $cmp246 = 0;
 var $cmp248 = 0, $cmp250 = 0, $cmp252 = 0, $cmp267 = 0, $cmp269 = 0, $cmp271 = 0, $cmp277 = 0, $cmp284 = 0, $cmp291 = 0, $cmp303 = 0, $cmp316 = 0, $cmp335 = 0, $cmp346 = 0, $cmp36 = 0, $cmp360 = 0, $cmp39 = 0, $cmp41 = 0, $cmp5 = 0, $cmp50 = 0, $cmp55 = 0;
 var $cmp65 = 0, $cmp70 = 0, $cmp80 = 0, $cmp85 = 0, $cmp93 = 0, $cmp98 = 0, $cmptmp$i$i227 = 0, $cmptmp$i$i639 = 0, $cmptmp$i$i728 = 0, $cmptmp$i$i882 = 0, $cond$i = 0, $cond$i$i = 0, $cond$i$i$i = 0, $cond$i$i354 = 0, $cond$i$i396 = 0, $cond$i$i438 = 0, $cond$i$i467 = 0, $cond$i$i484 = 0, $cond$i274 = 0, $cond$i333 = 0;
 var $cond$i375 = 0, $cond$i417 = 0, $cond$i459 = 0, $cond$i492 = 0, $cond$i5$i = 0, $cond$i5$i594 = 0, $cond$i5$i683 = 0, $cond$i6$i = 0, $cond$i6$i502 = 0, $cond$i6$i593 = 0, $cond$i6$i682 = 0, $cond$i756 = 0, $cond$i939 = 0, $conv = 0, $conv$i$i = 0, $conv$i$i$i = 0, $conv$i$i$i591 = 0, $conv$i$i$i680 = 0, $conv$i$i272 = 0, $conv$i$i331 = 0;
 var $conv$i$i373 = 0, $conv$i$i415 = 0, $conv$i$i457 = 0, $conv$i$i490 = 0, $conv$i$i754 = 0, $conv$i$i937 = 0, $dec = 0, $ehselector$slot$5 = 0, $exitcond$i$i = 0, $exitcond$i$i114 = 0, $exitcond$i$i121 = 0, $exitcond$i$i129 = 0, $exitcond$i$i141 = 0, $exn$slot$5 = 0, $inc = 0, $inc$i$i = 0, $inc$i$i117 = 0, $inc$i$i124 = 0, $inc$i$i132 = 0, $inc$i$i144 = 0;
 var $inc325 = 0, $inc351 = 0, $incdec$ptr = 0, $incdec$ptr$i = 0, $incdec$ptr$i$i = 0, $incdec$ptr$i$i$i = 0, $incdec$ptr$i$i$i$sink = 0, $incdec$ptr$i$i182 = 0, $incdec$ptr$i$i257 = 0, $incdec$ptr$i$i321 = 0, $incdec$ptr$i$i363 = 0, $incdec$ptr$i$i405 = 0, $incdec$ptr$i$i447 = 0, $incdec$ptr$i$i666 = 0, $incdec$ptr$i$i764 = 0, $incdec$ptr$i$i837 = 0, $incdec$ptr$i$i926 = 0, $incdec$ptr$i2$i$i = 0, $incdec$ptr$i673 = 0, $incdec$ptr256 = 0;
 var $incdec$ptr275 = 0, $incdec$ptr309 = 0, $lnot$i = 0, $lnot$i$i$i = 0, $lnot$i599 = 0, $lnot$i688 = 0, $or = 0, $or$cond = 0, $or$cond104 = 0, $or$cond7 = 0, $or$cond8 = 0, $or102 = 0, $or215 = 0, $or318 = 0, $or348 = 0, $or368 = 0, $phitmp$i$i$i = 0, $phitmp$i$i$i204 = 0, $phitmp$i$i$i542 = 0, $phitmp$i$i$i616 = 0;
 var $phitmp$i$i$i705 = 0, $phitmp$i$i$i787 = 0, $phitmp$i$i$i859 = 0, $phitmp$i18$i$i224 = 0, $phitmp$i18$i$i636 = 0, $phitmp$i18$i$i725 = 0, $phitmp$i18$i$i879 = 0, $retval$0$i$i = 0, $retval$0$i$i$i$i = 0, $retval$0$i$i$i$i199 = 0, $retval$0$i$i$i$i537 = 0, $retval$0$i$i$i$i611 = 0, $retval$0$i$i$i$i700 = 0, $retval$0$i$i$i$i782 = 0, $retval$0$i$i$i$i854 = 0, $retval$0$i$i13$i$i = 0, $retval$0$i$i13$i$i219 = 0, $retval$0$i$i13$i$i557 = 0, $retval$0$i$i13$i$i631 = 0, $retval$0$i$i13$i$i720 = 0;
 var $retval$0$i$i13$i$i802 = 0, $retval$0$i$i13$i$i874 = 0, $retval$0$i$i170 = 0, $retval$0$i$i185 = 0, $retval$0$i$i242 = 0, $retval$0$i$i260 = 0, $retval$0$i$i309 = 0, $retval$0$i$i344 = 0, $retval$0$i$i386 = 0, $retval$0$i$i428 = 0, $retval$0$i$i654 = 0, $retval$0$i$i743 = 0, $retval$0$i$i826 = 0, $retval$0$i$i898 = 0, $retval$0$i$i915 = 0, $retval$10 = 0, $sub = 0, $sub$i = 0, $sub$ptr$div$i = 0, $sub$ptr$sub$i = 0;
 var $switch = 0, $tobool$i$i = 0, $tobool$i$i$i = 0, $tobool$i$i$i$i = 0, $tobool$i$i$i189 = 0, $tobool$i$i$i313 = 0, $tobool$i$i$i349 = 0, $tobool$i$i$i391 = 0, $tobool$i$i$i433 = 0, $tobool$i$i$i462 = 0, $tobool$i$i$i469 = 0, $tobool$i$i$i479 = 0, $tobool$i$i$i527 = 0, $tobool$i$i$i586 = 0, $tobool$i$i$i601 = 0, $tobool$i$i$i675 = 0, $tobool$i$i$i690 = 0, $tobool$i$i$i772 = 0, $tobool$i$i$i844 = 0, $tobool$i$i107 = 0;
 var $tobool$i$i267 = 0, $tobool$i$i269 = 0, $tobool$i$i328 = 0, $tobool$i$i370 = 0, $tobool$i$i412 = 0, $tobool$i$i454 = 0, $tobool$i$i487 = 0, $tobool$i$i752 = 0, $tobool$i$i934 = 0, $tobool$i2$i$i = 0, $tobool$i2$i$i208 = 0, $tobool$i2$i$i546 = 0, $tobool$i2$i$i620 = 0, $tobool$i2$i$i709 = 0, $tobool$i2$i$i791 = 0, $tobool$i2$i$i863 = 0, $tobool330 = 0, $tobool366 = 0, $vfn$i = 0, $vfn$i$i = 0;
 var $vfn$i$i$i$i = 0, $vfn$i$i$i$i195 = 0, $vfn$i$i$i$i533 = 0, $vfn$i$i$i$i607 = 0, $vfn$i$i$i$i696 = 0, $vfn$i$i$i$i778 = 0, $vfn$i$i$i$i850 = 0, $vfn$i$i153 = 0, $vfn$i$i166 = 0, $vfn$i$i180 = 0, $vfn$i$i238 = 0, $vfn$i$i255 = 0, $vfn$i$i305 = 0, $vfn$i$i319 = 0, $vfn$i$i340 = 0, $vfn$i$i361 = 0, $vfn$i$i382 = 0, $vfn$i$i403 = 0, $vfn$i$i424 = 0, $vfn$i$i445 = 0;
 var $vfn$i$i650 = 0, $vfn$i$i664 = 0, $vfn$i$i739 = 0, $vfn$i$i762 = 0, $vfn$i$i8$i$i = 0, $vfn$i$i8$i$i215 = 0, $vfn$i$i8$i$i553 = 0, $vfn$i$i8$i$i627 = 0, $vfn$i$i8$i$i716 = 0, $vfn$i$i8$i$i798 = 0, $vfn$i$i8$i$i870 = 0, $vfn$i$i822 = 0, $vfn$i$i835 = 0, $vfn$i$i894 = 0, $vfn$i$i911 = 0, $vfn$i$i924 = 0, $vfn$i247 = 0, $vfn$i474 = 0, $vfn$i748 = 0, $vfn$i903 = 0;
 var $vtable$i = 0, $vtable$i$i = 0, $vtable$i$i$i$i = 0, $vtable$i$i$i$i194 = 0, $vtable$i$i$i$i532 = 0, $vtable$i$i$i$i606 = 0, $vtable$i$i$i$i695 = 0, $vtable$i$i$i$i777 = 0, $vtable$i$i$i$i849 = 0, $vtable$i$i152 = 0, $vtable$i$i165 = 0, $vtable$i$i179 = 0, $vtable$i$i237 = 0, $vtable$i$i254 = 0, $vtable$i$i304 = 0, $vtable$i$i318 = 0, $vtable$i$i339 = 0, $vtable$i$i360 = 0, $vtable$i$i381 = 0, $vtable$i$i402 = 0;
 var $vtable$i$i423 = 0, $vtable$i$i444 = 0, $vtable$i$i649 = 0, $vtable$i$i663 = 0, $vtable$i$i7$i$i = 0, $vtable$i$i7$i$i214 = 0, $vtable$i$i7$i$i552 = 0, $vtable$i$i7$i$i626 = 0, $vtable$i$i7$i$i715 = 0, $vtable$i$i7$i$i797 = 0, $vtable$i$i7$i$i869 = 0, $vtable$i$i738 = 0, $vtable$i$i761 = 0, $vtable$i$i821 = 0, $vtable$i$i834 = 0, $vtable$i$i893 = 0, $vtable$i$i910 = 0, $vtable$i$i923 = 0, $vtable$i246 = 0, $vtable$i473 = 0;
 var $vtable$i747 = 0, $vtable$i902 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 512|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(512|0);
 $__we$addr = sp + 496|0;
 $__gbuf = sp + 96|0;
 $__gb = sp + 88|0;
 $__gn = sp + 80|0;
 $__ge = sp + 76|0;
 $__pat = sp + 500|0;
 $__dp = sp + 72|0;
 $__ts = sp + 68|0;
 $__grp = sp + 56|0;
 $__sym = sp + 44|0;
 $__psn = sp + 32|0;
 $__nsn = sp + 20|0;
 $__spaces = sp + 8|0;
 $__fd = sp + 4|0;
 $__et = sp;
 HEAP32[$__we$addr>>2] = $__we;
 $0 = $__gbuf;
 HEAP32[$__gb>>2] = $0;
 $__second_$i$i$i = ((($__gb)) + 4|0);
 HEAP32[$__second_$i$i$i>>2] = (441);
 HEAP32[$__gn>>2] = $__gbuf;
 $add$ptr = ((($__gbuf)) + 400|0);
 HEAP32[$__ge>>2] = $add$ptr;
 ;HEAP32[$__grp>>2]=0|0;HEAP32[$__grp+4>>2]=0|0;HEAP32[$__grp+8>>2]=0|0;
 $__i$0$i$i = 0;
 while(1) {
  $exitcond$i$i = ($__i$0$i$i|0)==(3);
  if ($exitcond$i$i) {
   break;
  }
  $arrayidx$i$i = (($__grp) + ($__i$0$i$i<<2)|0);
  HEAP32[$arrayidx$i$i>>2] = 0;
  $inc$i$i = (($__i$0$i$i) + 1)|0;
  $__i$0$i$i = $inc$i$i;
 }
 ;HEAP32[$__sym>>2]=0|0;HEAP32[$__sym+4>>2]=0|0;HEAP32[$__sym+8>>2]=0|0;
 $__i$0$i$i113 = 0;
 while(1) {
  $exitcond$i$i114 = ($__i$0$i$i113|0)==(3);
  if ($exitcond$i$i114) {
   break;
  }
  $arrayidx$i$i116 = (($__sym) + ($__i$0$i$i113<<2)|0);
  HEAP32[$arrayidx$i$i116>>2] = 0;
  $inc$i$i117 = (($__i$0$i$i113) + 1)|0;
  $__i$0$i$i113 = $inc$i$i117;
 }
 ;HEAP32[$__psn>>2]=0|0;HEAP32[$__psn+4>>2]=0|0;HEAP32[$__psn+8>>2]=0|0;
 $__i$0$i$i120 = 0;
 while(1) {
  $exitcond$i$i121 = ($__i$0$i$i120|0)==(3);
  if ($exitcond$i$i121) {
   break;
  }
  $arrayidx$i$i123 = (($__psn) + ($__i$0$i$i120<<2)|0);
  HEAP32[$arrayidx$i$i123>>2] = 0;
  $inc$i$i124 = (($__i$0$i$i120) + 1)|0;
  $__i$0$i$i120 = $inc$i$i124;
 }
 ;HEAP32[$__nsn>>2]=0|0;HEAP32[$__nsn+4>>2]=0|0;HEAP32[$__nsn+8>>2]=0|0;
 $__i$0$i$i128 = 0;
 while(1) {
  $exitcond$i$i129 = ($__i$0$i$i128|0)==(3);
  if ($exitcond$i$i129) {
   break;
  }
  $arrayidx$i$i131 = (($__nsn) + ($__i$0$i$i128<<2)|0);
  HEAP32[$arrayidx$i$i131>>2] = 0;
  $inc$i$i132 = (($__i$0$i$i128) + 1)|0;
  $__i$0$i$i128 = $inc$i$i132;
 }
 ;HEAP32[$__spaces>>2]=0|0;HEAP32[$__spaces+4>>2]=0|0;HEAP32[$__spaces+8>>2]=0|0;
 $__i$0$i$i140 = 0;
 while(1) {
  $exitcond$i$i141 = ($__i$0$i$i140|0)==(3);
  if ($exitcond$i$i141) {
   break;
  }
  $arrayidx$i$i143 = (($__spaces) + ($__i$0$i$i140<<2)|0);
  HEAP32[$arrayidx$i$i143>>2] = 0;
  $inc$i$i144 = (($__i$0$i$i140) + 1)|0;
  $__i$0$i$i140 = $inc$i$i144;
 }
 __THREW__ = 0;
 invoke_viiiiiiiiii(452,($__intl|0),($__loc|0),($__pat|0),($__dp|0),($__ts|0),($__grp|0),($__sym|0),($__psn|0),($__nsn|0),($__fd|0));
 $1 = __THREW__; __THREW__ = 0;
 $2 = $1&1;
 L21: do {
  if ($2) {
   $22 = ___cxa_find_matching_catch_2()|0;
   $23 = tempRet0;
   $ehselector$slot$5 = $23;$exn$slot$5 = $22;
  } else {
   $3 = HEAP32[$__wb>>2]|0;
   HEAP32[$__wn>>2] = $3;
   $4 = ((($__psn)) + 8|0);
   $__size_$i$i = ((($4)) + 3|0);
   $__size_$i2$i = ((($__psn)) + 4|0);
   $5 = ((($__nsn)) + 8|0);
   $__size_$i$i268 = ((($5)) + 3|0);
   $__size_$i2$i270 = ((($__nsn)) + 4|0);
   $and969 = $__flags & 512;
   $cmp121970 = ($and969|0)!=(0);
   $6 = ((($__sym)) + 8|0);
   $__size_$i$i$i461 = ((($6)) + 3|0);
   $__size_$i2$i$i = ((($__sym)) + 4|0);
   $7 = ((($__spaces)) + 8|0);
   $__size_$i$i486 = ((($7)) + 3|0);
   $__size_$i2$i488 = ((($__spaces)) + 4|0);
   $arrayidx115 = ((($__pat)) + 3|0);
   $__size_$i$i751 = ((($__grp)) + 11|0);
   $__size_$i3$i = ((($__grp)) + 4|0);
   $__p$0 = 0;$__trailing_sign$0 = 0;
   L24: while(1) {
    $cmp = ($__p$0>>>0)<(4);
    $tobool330 = ($__trailing_sign$0|0)!=(0|0);
    if (!($cmp)) {
     label = 247;
     break;
    }
    $8 = HEAP32[$__b>>2]|0;
    $tobool$i$i$i = ($8|0)==(0|0);
    do {
     if ($tobool$i$i$i) {
      $413 = 1;
     } else {
      $__ninp_$i$i$i$i = ((($8)) + 12|0);
      $9 = HEAP32[$__ninp_$i$i$i$i>>2]|0;
      $__einp_$i$i$i$i = ((($8)) + 16|0);
      $10 = HEAP32[$__einp_$i$i$i$i>>2]|0;
      $cmp$i$i$i$i = ($9|0)==($10|0);
      if ($cmp$i$i$i$i) {
       $vtable$i$i$i$i = HEAP32[$8>>2]|0;
       $vfn$i$i$i$i = ((($vtable$i$i$i$i)) + 36|0);
       $11 = HEAP32[$vfn$i$i$i$i>>2]|0;
       __THREW__ = 0;
       $call$i$i$i$i159 = (invoke_ii($11|0,($8|0))|0);
       $12 = __THREW__; __THREW__ = 0;
       $13 = $12&1;
       if ($13) {
        label = 35;
        break L24;
       } else {
        $retval$0$i$i$i$i = $call$i$i$i$i159;
       }
      } else {
       $14 = HEAP32[$9>>2]|0;
       $call3$i$i$i$i = (__ZNSt3__211char_traitsIwE11to_int_typeEw($14)|0);
       $retval$0$i$i$i$i = $call3$i$i$i$i;
      }
      $call3$i$i$i = (__ZNSt3__211char_traitsIwE3eofEv()|0);
      $call4$i$i$i = (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($retval$0$i$i$i$i,$call3$i$i$i)|0);
      if ($call4$i$i$i) {
       HEAP32[$__b>>2] = 0;
       $413 = 1;
       break;
      } else {
       $$pre$i$i$i = HEAP32[$__b>>2]|0;
       $phitmp$i$i$i = ($$pre$i$i$i|0)==(0|0);
       $413 = $phitmp$i$i$i;
       break;
      }
     }
    } while(0);
    $15 = HEAP32[$__e>>2]|0;
    $tobool$i2$i$i = ($15|0)==(0|0);
    do {
     if ($tobool$i2$i$i) {
      label = 32;
     } else {
      $__ninp_$i$i3$i$i = ((($15)) + 12|0);
      $16 = HEAP32[$__ninp_$i$i3$i$i>>2]|0;
      $__einp_$i$i4$i$i = ((($15)) + 16|0);
      $17 = HEAP32[$__einp_$i$i4$i$i>>2]|0;
      $cmp$i$i5$i$i = ($16|0)==($17|0);
      if ($cmp$i$i5$i$i) {
       $vtable$i$i7$i$i = HEAP32[$15>>2]|0;
       $vfn$i$i8$i$i = ((($vtable$i$i7$i$i)) + 36|0);
       $18 = HEAP32[$vfn$i$i8$i$i>>2]|0;
       __THREW__ = 0;
       $call$i$i9$i$i160 = (invoke_ii($18|0,($15|0))|0);
       $19 = __THREW__; __THREW__ = 0;
       $20 = $19&1;
       if ($20) {
        label = 35;
        break L24;
       } else {
        $retval$0$i$i13$i$i = $call$i$i9$i$i160;
       }
      } else {
       $21 = HEAP32[$16>>2]|0;
       $call3$i$i11$i$i = (__ZNSt3__211char_traitsIwE11to_int_typeEw($21)|0);
       $retval$0$i$i13$i$i = $call3$i$i11$i$i;
      }
      $call3$i14$i$i = (__ZNSt3__211char_traitsIwE3eofEv()|0);
      $call4$i15$i$i = (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($retval$0$i$i13$i$i,$call3$i14$i$i)|0);
      if ($call4$i15$i$i) {
       HEAP32[$__e>>2] = 0;
       label = 32;
       break;
      } else {
       if ($413) {
        $414 = $15;
        break;
       } else {
        label = 247;
        break L24;
       }
      }
     }
    } while(0);
    if ((label|0) == 32) {
     label = 0;
     if ($413) {
      label = 247;
      break;
     } else {
      $414 = 0;
     }
    }
    $arrayidx = (($__pat) + ($__p$0)|0);
    $26 = HEAP8[$arrayidx>>0]|0;
    $conv = $26 << 24 >> 24;
    $cmp5 = ($__p$0|0)!=(3);
    L49: do {
     switch ($conv|0) {
     case 1:  {
      if ($cmp5) {
       $27 = HEAP32[$__b>>2]|0;
       $__ninp_$i$i162 = ((($27)) + 12|0);
       $28 = HEAP32[$__ninp_$i$i162>>2]|0;
       $__einp_$i$i163 = ((($27)) + 16|0);
       $29 = HEAP32[$__einp_$i$i163>>2]|0;
       $cmp$i$i164 = ($28|0)==($29|0);
       if ($cmp$i$i164) {
        $vtable$i$i165 = HEAP32[$27>>2]|0;
        $vfn$i$i166 = ((($vtable$i$i165)) + 36|0);
        $30 = HEAP32[$vfn$i$i166>>2]|0;
        __THREW__ = 0;
        $call$i$i172 = (invoke_ii($30|0,($27|0))|0);
        $31 = __THREW__; __THREW__ = 0;
        $32 = $31&1;
        if ($32) {
         label = 35;
         break L24;
        } else {
         $retval$0$i$i170 = $call$i$i172;
        }
       } else {
        $33 = HEAP32[$28>>2]|0;
        $call3$i$i168 = (__ZNSt3__211char_traitsIwE11to_int_typeEw($33)|0);
        $retval$0$i$i170 = $call3$i$i168;
       }
       $vtable$i = HEAP32[$__ct>>2]|0;
       $vfn$i = ((($vtable$i)) + 12|0);
       $34 = HEAP32[$vfn$i>>2]|0;
       __THREW__ = 0;
       $call$i174 = (invoke_iiii($34|0,($__ct|0),8192,($retval$0$i$i170|0))|0);
       $35 = __THREW__; __THREW__ = 0;
       $36 = $35&1;
       if ($36) {
        label = 35;
        break L24;
       }
       if (!($call$i174)) {
        label = 47;
        break L24;
       }
       $37 = HEAP32[$__b>>2]|0;
       $__ninp_$i$i176 = ((($37)) + 12|0);
       $38 = HEAP32[$__ninp_$i$i176>>2]|0;
       $__einp_$i$i177 = ((($37)) + 16|0);
       $39 = HEAP32[$__einp_$i$i177>>2]|0;
       $cmp$i$i178 = ($38|0)==($39|0);
       if ($cmp$i$i178) {
        $vtable$i$i179 = HEAP32[$37>>2]|0;
        $vfn$i$i180 = ((($vtable$i$i179)) + 40|0);
        $40 = HEAP32[$vfn$i$i180>>2]|0;
        __THREW__ = 0;
        $call$i$i187 = (invoke_ii($40|0,($37|0))|0);
        $41 = __THREW__; __THREW__ = 0;
        $42 = $41&1;
        if ($42) {
         label = 35;
         break L24;
        } else {
         $retval$0$i$i185 = $call$i$i187;
        }
       } else {
        $incdec$ptr$i$i182 = ((($38)) + 4|0);
        HEAP32[$__ninp_$i$i176>>2] = $incdec$ptr$i$i182;
        $43 = HEAP32[$38>>2]|0;
        $call3$i$i183 = (__ZNSt3__211char_traitsIwE11to_int_typeEw($43)|0);
        $retval$0$i$i185 = $call3$i$i183;
       }
       __THREW__ = 0;
       invoke_vii(450,($__spaces|0),($retval$0$i$i185|0));
       $44 = __THREW__; __THREW__ = 0;
       $45 = $44&1;
       if ($45) {
        label = 35;
        break L24;
       } else {
        $$pre$i17$i$i223 = $414;$54 = $414;
        label = 49;
       }
      } else {
       $__trailing_sign$1 = $__trailing_sign$0;
      }
      break;
     }
     case 0:  {
      if ($cmp5) {
       $$pre$i17$i$i223 = $414;$54 = $414;
       label = 49;
      } else {
       $__trailing_sign$1 = $__trailing_sign$0;
      }
      break;
     }
     case 3:  {
      $81 = HEAP8[$__size_$i$i>>0]|0;
      $tobool$i$i267 = ($81<<24>>24)<(0);
      $82 = HEAP32[$__size_$i2$i>>2]|0;
      $conv$i$i = $81&255;
      $cond$i = $tobool$i$i267 ? $82 : $conv$i$i;
      $83 = HEAP8[$__size_$i$i268>>0]|0;
      $tobool$i$i269 = ($83<<24>>24)<(0);
      $84 = HEAP32[$__size_$i2$i270>>2]|0;
      $conv$i$i272 = $83&255;
      $cond$i274 = $tobool$i$i269 ? $84 : $conv$i$i272;
      $add = (0 - ($cond$i274))|0;
      $cmp36 = ($cond$i|0)==($add|0);
      if ($cmp36) {
       $__trailing_sign$1 = $__trailing_sign$0;
      } else {
       $cmp39 = ($cond$i|0)==(0);
       if ($cmp39) {
        $104 = HEAP32[$__b>>2]|0;
        $__ninp_$i$i3361073 = ((($104)) + 12|0);
        $105 = HEAP32[$__ninp_$i$i3361073>>2]|0;
        $__einp_$i$i3371074 = ((($104)) + 16|0);
        $106 = HEAP32[$__einp_$i$i3371074>>2]|0;
        $cmp$i$i3381075 = ($105|0)==($106|0);
        if ($cmp$i$i3381075) {
         $vtable$i$i339 = HEAP32[$104>>2]|0;
         $vfn$i$i340 = ((($vtable$i$i339)) + 36|0);
         $107 = HEAP32[$vfn$i$i340>>2]|0;
         __THREW__ = 0;
         $call$i$i346 = (invoke_ii($107|0,($104|0))|0);
         $108 = __THREW__; __THREW__ = 0;
         $109 = $108&1;
         if ($109) {
          label = 35;
          break L24;
         } else {
          $retval$0$i$i344 = $call$i$i346;
         }
        } else {
         $110 = HEAP32[$105>>2]|0;
         $call3$i$i342 = (__ZNSt3__211char_traitsIwE11to_int_typeEw($110)|0);
         $retval$0$i$i344 = $call3$i$i342;
        }
        $111 = HEAP8[$__size_$i$i268>>0]|0;
        $tobool$i$i$i349 = ($111<<24>>24)<(0);
        $112 = HEAP32[$__nsn>>2]|0;
        $cond$i$i354 = $tobool$i$i$i349 ? $112 : $__nsn;
        $113 = HEAP32[$cond$i$i354>>2]|0;
        $cmp65 = ($retval$0$i$i344|0)==($113|0);
        if (!($cmp65)) {
         $__trailing_sign$1 = $__trailing_sign$0;
         break L49;
        }
        $114 = HEAP32[$__b>>2]|0;
        $__ninp_$i$i357 = ((($114)) + 12|0);
        $115 = HEAP32[$__ninp_$i$i357>>2]|0;
        $__einp_$i$i358 = ((($114)) + 16|0);
        $116 = HEAP32[$__einp_$i$i358>>2]|0;
        $cmp$i$i359 = ($115|0)==($116|0);
        if ($cmp$i$i359) {
         $vtable$i$i360 = HEAP32[$114>>2]|0;
         $vfn$i$i361 = ((($vtable$i$i360)) + 40|0);
         $117 = HEAP32[$vfn$i$i361>>2]|0;
         __THREW__ = 0;
         (invoke_ii($117|0,($114|0))|0);
         $118 = __THREW__; __THREW__ = 0;
         $119 = $118&1;
         if ($119) {
          label = 35;
          break L24;
         }
        } else {
         $incdec$ptr$i$i363 = ((($115)) + 4|0);
         HEAP32[$__ninp_$i$i357>>2] = $incdec$ptr$i$i363;
         $120 = HEAP32[$115>>2]|0;
         (__ZNSt3__211char_traitsIwE11to_int_typeEw($120)|0);
        }
        HEAP8[$__neg>>0] = 1;
        $121 = HEAP8[$__size_$i$i268>>0]|0;
        $tobool$i$i370 = ($121<<24>>24)<(0);
        $122 = HEAP32[$__size_$i2$i270>>2]|0;
        $conv$i$i373 = $121&255;
        $cond$i375 = $tobool$i$i370 ? $122 : $conv$i$i373;
        $cmp70 = ($cond$i375>>>0)>(1);
        $__nsn$__trailing_sign$0 = $cmp70 ? $__nsn : $__trailing_sign$0;
        $__trailing_sign$1 = $__nsn$__trailing_sign$0;
        break L49;
       }
       $cmp41 = ($cond$i274|0)==(0);
       $85 = HEAP32[$__b>>2]|0;
       $__ninp_$i$i336 = ((($85)) + 12|0);
       $86 = HEAP32[$__ninp_$i$i336>>2]|0;
       $__einp_$i$i337 = ((($85)) + 16|0);
       $87 = HEAP32[$__einp_$i$i337>>2]|0;
       $cmp$i$i338 = ($86|0)==($87|0);
       if ($cmp41) {
        if ($cmp$i$i338) {
         $vtable$i$i304 = HEAP32[$85>>2]|0;
         $vfn$i$i305 = ((($vtable$i$i304)) + 36|0);
         $88 = HEAP32[$vfn$i$i305>>2]|0;
         __THREW__ = 0;
         $call$i$i311 = (invoke_ii($88|0,($85|0))|0);
         $89 = __THREW__; __THREW__ = 0;
         $90 = $89&1;
         if ($90) {
          label = 35;
          break L24;
         } else {
          $retval$0$i$i309 = $call$i$i311;
         }
        } else {
         $91 = HEAP32[$86>>2]|0;
         $call3$i$i307 = (__ZNSt3__211char_traitsIwE11to_int_typeEw($91)|0);
         $retval$0$i$i309 = $call3$i$i307;
        }
        $92 = HEAP8[$__size_$i$i>>0]|0;
        $tobool$i$i$i313 = ($92<<24>>24)<(0);
        $93 = HEAP32[$__psn>>2]|0;
        $cond$i$i = $tobool$i$i$i313 ? $93 : $__psn;
        $94 = HEAP32[$cond$i$i>>2]|0;
        $cmp50 = ($retval$0$i$i309|0)==($94|0);
        if (!($cmp50)) {
         HEAP8[$__neg>>0] = 1;
         $__trailing_sign$1 = $__trailing_sign$0;
         break L49;
        }
        $95 = HEAP32[$__b>>2]|0;
        $__ninp_$i$i315 = ((($95)) + 12|0);
        $96 = HEAP32[$__ninp_$i$i315>>2]|0;
        $__einp_$i$i316 = ((($95)) + 16|0);
        $97 = HEAP32[$__einp_$i$i316>>2]|0;
        $cmp$i$i317 = ($96|0)==($97|0);
        if ($cmp$i$i317) {
         $vtable$i$i318 = HEAP32[$95>>2]|0;
         $vfn$i$i319 = ((($vtable$i$i318)) + 40|0);
         $98 = HEAP32[$vfn$i$i319>>2]|0;
         __THREW__ = 0;
         (invoke_ii($98|0,($95|0))|0);
         $99 = __THREW__; __THREW__ = 0;
         $100 = $99&1;
         if ($100) {
          label = 35;
          break L24;
         }
        } else {
         $incdec$ptr$i$i321 = ((($96)) + 4|0);
         HEAP32[$__ninp_$i$i315>>2] = $incdec$ptr$i$i321;
         $101 = HEAP32[$96>>2]|0;
         (__ZNSt3__211char_traitsIwE11to_int_typeEw($101)|0);
        }
        $102 = HEAP8[$__size_$i$i>>0]|0;
        $tobool$i$i328 = ($102<<24>>24)<(0);
        $103 = HEAP32[$__size_$i2$i>>2]|0;
        $conv$i$i331 = $102&255;
        $cond$i333 = $tobool$i$i328 ? $103 : $conv$i$i331;
        $cmp55 = ($cond$i333>>>0)>(1);
        $__psn$__trailing_sign$0 = $cmp55 ? $__psn : $__trailing_sign$0;
        $__trailing_sign$1 = $__psn$__trailing_sign$0;
        break L49;
       }
       if ($cmp$i$i338) {
        $vtable$i$i381 = HEAP32[$85>>2]|0;
        $vfn$i$i382 = ((($vtable$i$i381)) + 36|0);
        $123 = HEAP32[$vfn$i$i382>>2]|0;
        __THREW__ = 0;
        $call$i$i388 = (invoke_ii($123|0,($85|0))|0);
        $124 = __THREW__; __THREW__ = 0;
        $125 = $124&1;
        if ($125) {
         label = 35;
         break L24;
        } else {
         $retval$0$i$i386 = $call$i$i388;
        }
       } else {
        $126 = HEAP32[$86>>2]|0;
        $call3$i$i384 = (__ZNSt3__211char_traitsIwE11to_int_typeEw($126)|0);
        $retval$0$i$i386 = $call3$i$i384;
       }
       $127 = HEAP8[$__size_$i$i>>0]|0;
       $tobool$i$i$i391 = ($127<<24>>24)<(0);
       $128 = HEAP32[$__psn>>2]|0;
       $cond$i$i396 = $tobool$i$i$i391 ? $128 : $__psn;
       $129 = HEAP32[$cond$i$i396>>2]|0;
       $cmp80 = ($retval$0$i$i386|0)==($129|0);
       $130 = HEAP32[$__b>>2]|0;
       $__ninp_$i$i399 = ((($130)) + 12|0);
       $131 = HEAP32[$__ninp_$i$i399>>2]|0;
       $__einp_$i$i400 = ((($130)) + 16|0);
       $132 = HEAP32[$__einp_$i$i400>>2]|0;
       $cmp$i$i401 = ($131|0)==($132|0);
       if ($cmp80) {
        if ($cmp$i$i401) {
         $vtable$i$i402 = HEAP32[$130>>2]|0;
         $vfn$i$i403 = ((($vtable$i$i402)) + 40|0);
         $133 = HEAP32[$vfn$i$i403>>2]|0;
         __THREW__ = 0;
         (invoke_ii($133|0,($130|0))|0);
         $134 = __THREW__; __THREW__ = 0;
         $135 = $134&1;
         if ($135) {
          label = 35;
          break L24;
         }
        } else {
         $incdec$ptr$i$i405 = ((($131)) + 4|0);
         HEAP32[$__ninp_$i$i399>>2] = $incdec$ptr$i$i405;
         $136 = HEAP32[$131>>2]|0;
         (__ZNSt3__211char_traitsIwE11to_int_typeEw($136)|0);
        }
        $137 = HEAP8[$__size_$i$i>>0]|0;
        $tobool$i$i412 = ($137<<24>>24)<(0);
        $138 = HEAP32[$__size_$i2$i>>2]|0;
        $conv$i$i415 = $137&255;
        $cond$i417 = $tobool$i$i412 ? $138 : $conv$i$i415;
        $cmp85 = ($cond$i417>>>0)>(1);
        $__psn$__trailing_sign$0101 = $cmp85 ? $__psn : $__trailing_sign$0;
        $__trailing_sign$1 = $__psn$__trailing_sign$0101;
        break L49;
       }
       if ($cmp$i$i401) {
        $vtable$i$i423 = HEAP32[$130>>2]|0;
        $vfn$i$i424 = ((($vtable$i$i423)) + 36|0);
        $139 = HEAP32[$vfn$i$i424>>2]|0;
        __THREW__ = 0;
        $call$i$i430 = (invoke_ii($139|0,($130|0))|0);
        $140 = __THREW__; __THREW__ = 0;
        $141 = $140&1;
        if ($141) {
         label = 35;
         break L24;
        } else {
         $retval$0$i$i428 = $call$i$i430;
        }
       } else {
        $142 = HEAP32[$131>>2]|0;
        $call3$i$i426 = (__ZNSt3__211char_traitsIwE11to_int_typeEw($142)|0);
        $retval$0$i$i428 = $call3$i$i426;
       }
       $143 = HEAP8[$__size_$i$i268>>0]|0;
       $tobool$i$i$i433 = ($143<<24>>24)<(0);
       $144 = HEAP32[$__nsn>>2]|0;
       $cond$i$i438 = $tobool$i$i$i433 ? $144 : $__nsn;
       $145 = HEAP32[$cond$i$i438>>2]|0;
       $cmp93 = ($retval$0$i$i428|0)==($145|0);
       if (!($cmp93)) {
        label = 109;
        break L24;
       }
       $146 = HEAP32[$__b>>2]|0;
       $__ninp_$i$i441 = ((($146)) + 12|0);
       $147 = HEAP32[$__ninp_$i$i441>>2]|0;
       $__einp_$i$i442 = ((($146)) + 16|0);
       $148 = HEAP32[$__einp_$i$i442>>2]|0;
       $cmp$i$i443 = ($147|0)==($148|0);
       if ($cmp$i$i443) {
        $vtable$i$i444 = HEAP32[$146>>2]|0;
        $vfn$i$i445 = ((($vtable$i$i444)) + 40|0);
        $149 = HEAP32[$vfn$i$i445>>2]|0;
        __THREW__ = 0;
        (invoke_ii($149|0,($146|0))|0);
        $150 = __THREW__; __THREW__ = 0;
        $151 = $150&1;
        if ($151) {
         label = 35;
         break L24;
        }
       } else {
        $incdec$ptr$i$i447 = ((($147)) + 4|0);
        HEAP32[$__ninp_$i$i441>>2] = $incdec$ptr$i$i447;
        $152 = HEAP32[$147>>2]|0;
        (__ZNSt3__211char_traitsIwE11to_int_typeEw($152)|0);
       }
       HEAP8[$__neg>>0] = 1;
       $153 = HEAP8[$__size_$i$i268>>0]|0;
       $tobool$i$i454 = ($153<<24>>24)<(0);
       $154 = HEAP32[$__size_$i2$i270>>2]|0;
       $conv$i$i457 = $153&255;
       $cond$i459 = $tobool$i$i454 ? $154 : $conv$i$i457;
       $cmp98 = ($cond$i459>>>0)>(1);
       $__nsn$__trailing_sign$0102 = $cmp98 ? $__nsn : $__trailing_sign$0;
       $__trailing_sign$1 = $__nsn$__trailing_sign$0102;
      }
      break;
     }
     case 2:  {
      $cmp111 = ($__p$0>>>0)<(2);
      $or$cond = $cmp111 | $tobool330;
      if (!($or$cond)) {
       $cmp112 = ($__p$0|0)==(2);
       $156 = HEAP8[$arrayidx115>>0]|0;
       $cmp117 = ($156<<24>>24)!=(0);
       $157 = $cmp112 & $cmp117;
       $brmerge = $cmp121970 | $157;
       if (!($brmerge)) {
        $__trailing_sign$1 = 0;
        break L49;
       }
      }
      $158 = HEAP8[$__size_$i$i$i461>>0]|0;
      $tobool$i$i$i462 = ($158<<24>>24)<(0);
      $159 = HEAP32[$__sym>>2]|0;
      $cond$i$i467 = $tobool$i$i$i462 ? $159 : $__sym;
      $160 = $cond$i$i467;
      $cmp130 = ($__p$0|0)==(0);
      L115: do {
       if ($cmp130) {
        $$pre$i17$i$i635 = $414;$182 = $158;$184 = $159;$193 = $414;$__sym_curr_char$sroa$0$0 = $160;
       } else {
        $sub = (($__p$0) + -1)|0;
        $arrayidx132 = (($__pat) + ($sub)|0);
        $161 = HEAP8[$arrayidx132>>0]|0;
        $switch = ($161&255)<(2);
        if ($switch) {
         $162 = $158;$164 = $159;$__sym_space_end$sroa$0$0 = $160;
         while(1) {
          $tobool$i$i$i469 = ($162<<24>>24)<(0);
          $163 = HEAP32[$__size_$i2$i$i>>2]|0;
          $conv$i$i$i = $162&255;
          $cond$i6$i = $tobool$i$i$i469 ? $164 : $__sym;
          $cond$i5$i = $tobool$i$i$i469 ? $163 : $conv$i$i$i;
          $add$ptr$i472 = (($cond$i6$i) + ($cond$i5$i<<2)|0);
          $165 = $__sym_space_end$sroa$0$0;
          $lnot$i = ($165|0)==($add$ptr$i472|0);
          if ($lnot$i) {
           $173 = $162;$174 = $164;
           break;
          }
          $166 = HEAP32[$165>>2]|0;
          $vtable$i473 = HEAP32[$__ct>>2]|0;
          $vfn$i474 = ((($vtable$i473)) + 12|0);
          $167 = HEAP32[$vfn$i474>>2]|0;
          __THREW__ = 0;
          $call$i475 = (invoke_iiii($167|0,($__ct|0),8192,($166|0))|0);
          $168 = __THREW__; __THREW__ = 0;
          $169 = $168&1;
          if ($169) {
           label = 119;
           break L24;
          }
          if (!($call$i475)) {
           label = 117;
           break;
          }
          $incdec$ptr$i = ((($165)) + 4|0);
          $170 = $incdec$ptr$i;
          $$pre1061 = HEAP8[$__size_$i$i$i461>>0]|0;
          $$pre1062 = HEAP32[$__sym>>2]|0;
          $162 = $$pre1061;$164 = $$pre1062;$__sym_space_end$sroa$0$0 = $170;
         }
         if ((label|0) == 117) {
          label = 0;
          $$pre1063 = HEAP8[$__size_$i$i$i461>>0]|0;
          $$pre1064 = HEAP32[$__sym>>2]|0;
          $173 = $$pre1063;$174 = $$pre1064;
         }
         $tobool$i$i$i479 = ($173<<24>>24)<(0);
         $cond$i$i484 = $tobool$i$i$i479 ? $174 : $__sym;
         $175 = $cond$i$i484;
         $sub$ptr$sub$i = (($__sym_space_end$sroa$0$0) - ($175))|0;
         $sub$ptr$div$i = $sub$ptr$sub$i >> 2;
         $176 = HEAP8[$__size_$i$i486>>0]|0;
         $tobool$i$i487 = ($176<<24>>24)<(0);
         $177 = HEAP32[$__size_$i2$i488>>2]|0;
         $conv$i$i490 = $176&255;
         $cond$i492 = $tobool$i$i487 ? $177 : $conv$i$i490;
         $cmp162 = ($sub$ptr$div$i>>>0)>($cond$i492>>>0);
         if ($cmp162) {
          $$pre$i17$i$i635 = $414;$182 = $173;$184 = $174;$193 = $414;$__sym_curr_char$sroa$0$0 = $175;
         } else {
          $178 = HEAP32[$__spaces>>2]|0;
          $cond$i6$i502 = $tobool$i$i487 ? $178 : $__spaces;
          $add$ptr$i504 = (($cond$i6$i502) + ($cond$i492<<2)|0);
          $sub$i = (0 - ($sub$ptr$div$i))|0;
          $add$ptr$i$i$i = (($add$ptr$i504) + ($sub$i<<2)|0);
          $179 = $add$ptr$i$i$i;$incdec$ptr$i$i$i$sink = $cond$i$i484;
          while(1) {
           $lnot$i$i$i = ($179|0)==($add$ptr$i504|0);
           if ($lnot$i$i$i) {
            $$pre$i17$i$i635 = $414;$182 = $173;$184 = $174;$193 = $414;$__sym_curr_char$sroa$0$0 = $__sym_space_end$sroa$0$0;
            break L115;
           }
           $180 = HEAP32[$179>>2]|0;
           $181 = HEAP32[$incdec$ptr$i$i$i$sink>>2]|0;
           $cmp$i$i$i = ($180|0)==($181|0);
           if (!($cmp$i$i$i)) {
            $$pre$i17$i$i635 = $414;$182 = $173;$184 = $174;$193 = $414;$__sym_curr_char$sroa$0$0 = $175;
            break L115;
           }
           $incdec$ptr$i2$i$i = ((($179)) + 4|0);
           $incdec$ptr$i$i$i = ((($incdec$ptr$i$i$i$sink)) + 4|0);
           $179 = $incdec$ptr$i2$i$i;$incdec$ptr$i$i$i$sink = $incdec$ptr$i$i$i;
          }
         }
        } else {
         $$pre$i17$i$i635 = $414;$182 = $158;$184 = $159;$193 = $414;$__sym_curr_char$sroa$0$0 = $160;
        }
       }
      } while(0);
      L130: while(1) {
       $tobool$i$i$i586 = ($182<<24>>24)<(0);
       $183 = HEAP32[$__size_$i2$i$i>>2]|0;
       $conv$i$i$i591 = $182&255;
       $cond$i6$i593 = $tobool$i$i$i586 ? $184 : $__sym;
       $cond$i5$i594 = $tobool$i$i$i586 ? $183 : $conv$i$i$i591;
       $add$ptr$i595 = (($cond$i6$i593) + ($cond$i5$i594<<2)|0);
       $185 = $__sym_curr_char$sroa$0$0;
       $lnot$i599 = ($185|0)==($add$ptr$i595|0);
       if ($lnot$i599) {
        $$lcssa = $add$ptr$i595;
        break;
       }
       $186 = HEAP32[$__b>>2]|0;
       $tobool$i$i$i601 = ($186|0)==(0|0);
       do {
        if ($tobool$i$i$i601) {
         $200 = 1;
        } else {
         $__ninp_$i$i$i$i602 = ((($186)) + 12|0);
         $187 = HEAP32[$__ninp_$i$i$i$i602>>2]|0;
         $__einp_$i$i$i$i603 = ((($186)) + 16|0);
         $188 = HEAP32[$__einp_$i$i$i$i603>>2]|0;
         $cmp$i$i$i$i604 = ($187|0)==($188|0);
         if ($cmp$i$i$i$i604) {
          $vtable$i$i$i$i606 = HEAP32[$186>>2]|0;
          $vfn$i$i$i$i607 = ((($vtable$i$i$i$i606)) + 36|0);
          $189 = HEAP32[$vfn$i$i$i$i607>>2]|0;
          __THREW__ = 0;
          $call$i$i$i$i641 = (invoke_ii($189|0,($186|0))|0);
          $190 = __THREW__; __THREW__ = 0;
          $191 = $190&1;
          if ($191) {
           label = 149;
           break L24;
          } else {
           $retval$0$i$i$i$i611 = $call$i$i$i$i641;
          }
         } else {
          $192 = HEAP32[$187>>2]|0;
          $call3$i$i$i$i609 = (__ZNSt3__211char_traitsIwE11to_int_typeEw($192)|0);
          $retval$0$i$i$i$i611 = $call3$i$i$i$i609;
         }
         $call3$i$i$i612 = (__ZNSt3__211char_traitsIwE3eofEv()|0);
         $call4$i$i$i613 = (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($retval$0$i$i$i$i611,$call3$i$i$i612)|0);
         if ($call4$i$i$i613) {
          HEAP32[$__b>>2] = 0;
          $200 = 1;
          break;
         } else {
          $$pre$i$i$i615 = HEAP32[$__b>>2]|0;
          $phitmp$i$i$i616 = ($$pre$i$i$i615|0)==(0|0);
          $200 = $phitmp$i$i$i616;
          break;
         }
        }
       } while(0);
       $tobool$i2$i$i620 = ($193|0)==(0|0);
       do {
        if ($tobool$i2$i$i620) {
         $$pre$i17$i$i6351068 = $$pre$i17$i$i635;
         label = 139;
        } else {
         $__ninp_$i$i3$i$i622 = ((($193)) + 12|0);
         $194 = HEAP32[$__ninp_$i$i3$i$i622>>2]|0;
         $__einp_$i$i4$i$i623 = ((($193)) + 16|0);
         $195 = HEAP32[$__einp_$i$i4$i$i623>>2]|0;
         $cmp$i$i5$i$i624 = ($194|0)==($195|0);
         if ($cmp$i$i5$i$i624) {
          $vtable$i$i7$i$i626 = HEAP32[$193>>2]|0;
          $vfn$i$i8$i$i627 = ((($vtable$i$i7$i$i626)) + 36|0);
          $196 = HEAP32[$vfn$i$i8$i$i627>>2]|0;
          __THREW__ = 0;
          $call$i$i9$i$i643 = (invoke_ii($196|0,($193|0))|0);
          $197 = __THREW__; __THREW__ = 0;
          $198 = $197&1;
          if ($198) {
           label = 149;
           break L24;
          } else {
           $retval$0$i$i13$i$i631 = $call$i$i9$i$i643;
          }
         } else {
          $199 = HEAP32[$194>>2]|0;
          $call3$i$i11$i$i629 = (__ZNSt3__211char_traitsIwE11to_int_typeEw($199)|0);
          $retval$0$i$i13$i$i631 = $call3$i$i11$i$i629;
         }
         $call3$i14$i$i632 = (__ZNSt3__211char_traitsIwE3eofEv()|0);
         $call4$i15$i$i633 = (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($retval$0$i$i13$i$i631,$call3$i14$i$i632)|0);
         if ($call4$i15$i$i633) {
          HEAP32[$__e>>2] = 0;
          $$pre$i17$i$i6351068 = 0;
          label = 139;
          break;
         } else {
          $phitmp$i18$i$i636 = ($$pre$i17$i$i635|0)==(0|0);
          $cmptmp$i$i639 = $200 ^ $phitmp$i18$i$i636;
          if ($cmptmp$i$i639) {
           $$pre$i17$i$i6351067 = $$pre$i17$i$i635;$416 = $$pre$i17$i$i635;
           break;
          } else {
           $$lcssa = $185;
           break L130;
          }
         }
        }
       } while(0);
       if ((label|0) == 139) {
        label = 0;
        if ($200) {
         $$lcssa = $185;
         break;
        } else {
         $$pre$i17$i$i6351067 = $$pre$i17$i$i6351068;$416 = 0;
        }
       }
       $201 = HEAP32[$__b>>2]|0;
       $__ninp_$i$i646 = ((($201)) + 12|0);
       $202 = HEAP32[$__ninp_$i$i646>>2]|0;
       $__einp_$i$i647 = ((($201)) + 16|0);
       $203 = HEAP32[$__einp_$i$i647>>2]|0;
       $cmp$i$i648 = ($202|0)==($203|0);
       if ($cmp$i$i648) {
        $vtable$i$i649 = HEAP32[$201>>2]|0;
        $vfn$i$i650 = ((($vtable$i$i649)) + 36|0);
        $204 = HEAP32[$vfn$i$i650>>2]|0;
        __THREW__ = 0;
        $call$i$i656 = (invoke_ii($204|0,($201|0))|0);
        $205 = __THREW__; __THREW__ = 0;
        $206 = $205&1;
        if ($206) {
         label = 149;
         break L24;
        } else {
         $retval$0$i$i654 = $call$i$i656;
        }
       } else {
        $207 = HEAP32[$202>>2]|0;
        $call3$i$i652 = (__ZNSt3__211char_traitsIwE11to_int_typeEw($207)|0);
        $retval$0$i$i654 = $call3$i$i652;
       }
       $208 = HEAP32[$185>>2]|0;
       $cmp199 = ($retval$0$i$i654|0)==($208|0);
       if (!($cmp199)) {
        $$lcssa = $185;
        break;
       }
       $209 = HEAP32[$__b>>2]|0;
       $__ninp_$i$i660 = ((($209)) + 12|0);
       $210 = HEAP32[$__ninp_$i$i660>>2]|0;
       $__einp_$i$i661 = ((($209)) + 16|0);
       $211 = HEAP32[$__einp_$i$i661>>2]|0;
       $cmp$i$i662 = ($210|0)==($211|0);
       if ($cmp$i$i662) {
        $vtable$i$i663 = HEAP32[$209>>2]|0;
        $vfn$i$i664 = ((($vtable$i$i663)) + 40|0);
        $212 = HEAP32[$vfn$i$i664>>2]|0;
        __THREW__ = 0;
        (invoke_ii($212|0,($209|0))|0);
        $213 = __THREW__; __THREW__ = 0;
        $214 = $213&1;
        if ($214) {
         label = 150;
         break L24;
        }
       } else {
        $incdec$ptr$i$i666 = ((($210)) + 4|0);
        HEAP32[$__ninp_$i$i660>>2] = $incdec$ptr$i$i666;
        $215 = HEAP32[$210>>2]|0;
        (__ZNSt3__211char_traitsIwE11to_int_typeEw($215)|0);
       }
       $incdec$ptr$i673 = ((($185)) + 4|0);
       $216 = $incdec$ptr$i673;
       $$pre1065 = HEAP8[$__size_$i$i$i461>>0]|0;
       $$pre1066 = HEAP32[$__sym>>2]|0;
       $$pre$i17$i$i635 = $$pre$i17$i$i6351067;$182 = $$pre1065;$184 = $$pre1066;$193 = $416;$__sym_curr_char$sroa$0$0 = $216;
      }
      if ($cmp121970) {
       $221 = HEAP8[$__size_$i$i$i461>>0]|0;
       $tobool$i$i$i675 = ($221<<24>>24)<(0);
       $222 = HEAP32[$__sym>>2]|0;
       $223 = HEAP32[$__size_$i2$i$i>>2]|0;
       $conv$i$i$i680 = $221&255;
       $cond$i6$i682 = $tobool$i$i$i675 ? $222 : $__sym;
       $cond$i5$i683 = $tobool$i$i$i675 ? $223 : $conv$i$i$i680;
       $add$ptr$i684 = (($cond$i6$i682) + ($cond$i5$i683<<2)|0);
       $lnot$i688 = ($$lcssa|0)==($add$ptr$i684|0);
       if ($lnot$i688) {
        $__trailing_sign$1 = $__trailing_sign$0;
       } else {
        label = 153;
        break L24;
       }
      } else {
       $__trailing_sign$1 = $__trailing_sign$0;
      }
      break;
     }
     case 4:  {
      $$pre$i17$i$i724 = $414;$232 = $414;$__ng$0 = 0;
      L166: while(1) {
       $225 = HEAP32[$__b>>2]|0;
       $tobool$i$i$i690 = ($225|0)==(0|0);
       do {
        if ($tobool$i$i$i690) {
         $239 = 1;
        } else {
         $__ninp_$i$i$i$i691 = ((($225)) + 12|0);
         $226 = HEAP32[$__ninp_$i$i$i$i691>>2]|0;
         $__einp_$i$i$i$i692 = ((($225)) + 16|0);
         $227 = HEAP32[$__einp_$i$i$i$i692>>2]|0;
         $cmp$i$i$i$i693 = ($226|0)==($227|0);
         if ($cmp$i$i$i$i693) {
          $vtable$i$i$i$i695 = HEAP32[$225>>2]|0;
          $vfn$i$i$i$i696 = ((($vtable$i$i$i$i695)) + 36|0);
          $228 = HEAP32[$vfn$i$i$i$i696>>2]|0;
          __THREW__ = 0;
          $call$i$i$i$i730 = (invoke_ii($228|0,($225|0))|0);
          $229 = __THREW__; __THREW__ = 0;
          $230 = $229&1;
          if ($230) {
           label = 245;
           break L24;
          } else {
           $retval$0$i$i$i$i700 = $call$i$i$i$i730;
          }
         } else {
          $231 = HEAP32[$226>>2]|0;
          $call3$i$i$i$i698 = (__ZNSt3__211char_traitsIwE11to_int_typeEw($231)|0);
          $retval$0$i$i$i$i700 = $call3$i$i$i$i698;
         }
         $call3$i$i$i701 = (__ZNSt3__211char_traitsIwE3eofEv()|0);
         $call4$i$i$i702 = (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($retval$0$i$i$i$i700,$call3$i$i$i701)|0);
         if ($call4$i$i$i702) {
          HEAP32[$__b>>2] = 0;
          $239 = 1;
          break;
         } else {
          $$pre$i$i$i704 = HEAP32[$__b>>2]|0;
          $phitmp$i$i$i705 = ($$pre$i$i$i704|0)==(0|0);
          $239 = $phitmp$i$i$i705;
          break;
         }
        }
       } while(0);
       $tobool$i2$i$i709 = ($232|0)==(0|0);
       do {
        if ($tobool$i2$i$i709) {
         $$pre$i17$i$i7241054 = $$pre$i17$i$i724;
         label = 167;
        } else {
         $__ninp_$i$i3$i$i711 = ((($232)) + 12|0);
         $233 = HEAP32[$__ninp_$i$i3$i$i711>>2]|0;
         $__einp_$i$i4$i$i712 = ((($232)) + 16|0);
         $234 = HEAP32[$__einp_$i$i4$i$i712>>2]|0;
         $cmp$i$i5$i$i713 = ($233|0)==($234|0);
         if ($cmp$i$i5$i$i713) {
          $vtable$i$i7$i$i715 = HEAP32[$232>>2]|0;
          $vfn$i$i8$i$i716 = ((($vtable$i$i7$i$i715)) + 36|0);
          $235 = HEAP32[$vfn$i$i8$i$i716>>2]|0;
          __THREW__ = 0;
          $call$i$i9$i$i732 = (invoke_ii($235|0,($232|0))|0);
          $236 = __THREW__; __THREW__ = 0;
          $237 = $236&1;
          if ($237) {
           label = 245;
           break L24;
          } else {
           $retval$0$i$i13$i$i720 = $call$i$i9$i$i732;
          }
         } else {
          $238 = HEAP32[$233>>2]|0;
          $call3$i$i11$i$i718 = (__ZNSt3__211char_traitsIwE11to_int_typeEw($238)|0);
          $retval$0$i$i13$i$i720 = $call3$i$i11$i$i718;
         }
         $call3$i14$i$i721 = (__ZNSt3__211char_traitsIwE3eofEv()|0);
         $call4$i15$i$i722 = (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($retval$0$i$i13$i$i720,$call3$i14$i$i721)|0);
         if ($call4$i15$i$i722) {
          HEAP32[$__e>>2] = 0;
          $$pre$i17$i$i7241054 = 0;
          label = 167;
          break;
         } else {
          $phitmp$i18$i$i725 = ($$pre$i17$i$i724|0)==(0|0);
          $cmptmp$i$i728 = $239 ^ $phitmp$i18$i$i725;
          if ($cmptmp$i$i728) {
           $$pre$i17$i$i7241056 = $$pre$i17$i$i724;$417 = $$pre$i17$i$i724;
           break;
          } else {
           $$pre$i17$i$i806 = $$pre$i17$i$i724;
           break L166;
          }
         }
        }
       } while(0);
       if ((label|0) == 167) {
        label = 0;
        if ($239) {
         $$pre$i17$i$i806 = $$pre$i17$i$i7241054;
         break;
        } else {
         $$pre$i17$i$i7241056 = $$pre$i17$i$i7241054;$417 = 0;
        }
       }
       $240 = HEAP32[$__b>>2]|0;
       $__ninp_$i$i735 = ((($240)) + 12|0);
       $241 = HEAP32[$__ninp_$i$i735>>2]|0;
       $__einp_$i$i736 = ((($240)) + 16|0);
       $242 = HEAP32[$__einp_$i$i736>>2]|0;
       $cmp$i$i737 = ($241|0)==($242|0);
       if ($cmp$i$i737) {
        $vtable$i$i738 = HEAP32[$240>>2]|0;
        $vfn$i$i739 = ((($vtable$i$i738)) + 36|0);
        $243 = HEAP32[$vfn$i$i739>>2]|0;
        __THREW__ = 0;
        $call$i$i745 = (invoke_ii($243|0,($240|0))|0);
        $244 = __THREW__; __THREW__ = 0;
        $245 = $244&1;
        if ($245) {
         label = 245;
         break L24;
        } else {
         $retval$0$i$i743 = $call$i$i745;
        }
       } else {
        $246 = HEAP32[$241>>2]|0;
        $call3$i$i741 = (__ZNSt3__211char_traitsIwE11to_int_typeEw($246)|0);
        $retval$0$i$i743 = $call3$i$i741;
       }
       $vtable$i747 = HEAP32[$__ct>>2]|0;
       $vfn$i748 = ((($vtable$i747)) + 12|0);
       $247 = HEAP32[$vfn$i748>>2]|0;
       __THREW__ = 0;
       $call$i749 = (invoke_iiii($247|0,($__ct|0),2048,($retval$0$i$i743|0))|0);
       $248 = __THREW__; __THREW__ = 0;
       $249 = $248&1;
       if ($249) {
        label = 245;
        break L24;
       }
       if ($call$i749) {
        $250 = HEAP32[$__wn>>2]|0;
        $251 = HEAP32[$__we$addr>>2]|0;
        $cmp240 = ($250|0)==($251|0);
        if ($cmp240) {
         __THREW__ = 0;
         invoke_viii(453,($__wb|0),($__wn|0),($__we$addr|0));
         $252 = __THREW__; __THREW__ = 0;
         $253 = $252&1;
         if ($253) {
          label = 245;
          break L24;
         }
         $$pre1057 = HEAP32[$__wn>>2]|0;
         $254 = $$pre1057;
        } else {
         $254 = $250;
        }
        $incdec$ptr = ((($254)) + 4|0);
        HEAP32[$__wn>>2] = $incdec$ptr;
        HEAP32[$254>>2] = $retval$0$i$i743;
        $inc = (($__ng$0) + 1)|0;
        $__ng$2$ph = $inc;
       } else {
        $255 = HEAP8[$__size_$i$i751>>0]|0;
        $tobool$i$i752 = ($255<<24>>24)<(0);
        $256 = HEAP32[$__size_$i3$i>>2]|0;
        $conv$i$i754 = $255&255;
        $cond$i756 = $tobool$i$i752 ? $256 : $conv$i$i754;
        $cmp246 = ($cond$i756|0)!=(0);
        $cmp248 = ($__ng$0|0)!=(0);
        $or$cond7 = $cmp248 & $cmp246;
        $257 = HEAP32[$__ts>>2]|0;
        $cmp250 = ($retval$0$i$i743|0)==($257|0);
        $or$cond104 = $cmp250 & $or$cond7;
        if (!($or$cond104)) {
         $$pre$i17$i$i806 = $$pre$i17$i$i7241056;
         break;
        }
        $258 = HEAP32[$__gn>>2]|0;
        $259 = HEAP32[$__ge>>2]|0;
        $cmp252 = ($258|0)==($259|0);
        if ($cmp252) {
         __THREW__ = 0;
         invoke_viii(447,($__gb|0),($__gn|0),($__ge|0));
         $260 = __THREW__; __THREW__ = 0;
         $261 = $260&1;
         if ($261) {
          label = 245;
          break L24;
         }
         $$pre = HEAP32[$__gn>>2]|0;
         $262 = $$pre;
        } else {
         $262 = $258;
        }
        $incdec$ptr256 = ((($262)) + 4|0);
        HEAP32[$__gn>>2] = $incdec$ptr256;
        HEAP32[$262>>2] = $__ng$0;
        $__ng$2$ph = 0;
       }
       $263 = HEAP32[$__b>>2]|0;
       $__ninp_$i$i758 = ((($263)) + 12|0);
       $264 = HEAP32[$__ninp_$i$i758>>2]|0;
       $__einp_$i$i759 = ((($263)) + 16|0);
       $265 = HEAP32[$__einp_$i$i759>>2]|0;
       $cmp$i$i760 = ($264|0)==($265|0);
       if ($cmp$i$i760) {
        $vtable$i$i761 = HEAP32[$263>>2]|0;
        $vfn$i$i762 = ((($vtable$i$i761)) + 40|0);
        $266 = HEAP32[$vfn$i$i762>>2]|0;
        __THREW__ = 0;
        (invoke_ii($266|0,($263|0))|0);
        $267 = __THREW__; __THREW__ = 0;
        $268 = $267&1;
        if ($268) {
         label = 245;
         break L24;
        } else {
         $$pre$i17$i$i724 = $$pre$i17$i$i7241056;$232 = $417;$__ng$0 = $__ng$2$ph;
         continue;
        }
       } else {
        $incdec$ptr$i$i764 = ((($264)) + 4|0);
        HEAP32[$__ninp_$i$i758>>2] = $incdec$ptr$i$i764;
        $269 = HEAP32[$264>>2]|0;
        (__ZNSt3__211char_traitsIwE11to_int_typeEw($269)|0);
        $$pre$i17$i$i724 = $$pre$i17$i$i7241056;$232 = $417;$__ng$0 = $__ng$2$ph;
        continue;
       }
      }
      $270 = HEAP32[$__gb>>2]|0;
      $271 = HEAP32[$__gn>>2]|0;
      $cmp267 = ($270|0)!=($271|0);
      $cmp269 = ($__ng$0|0)!=(0);
      $or$cond8 = $cmp269 & $cmp267;
      if ($or$cond8) {
       $272 = HEAP32[$__ge>>2]|0;
       $cmp271 = ($271|0)==($272|0);
       if ($cmp271) {
        __THREW__ = 0;
        invoke_viii(447,($__gb|0),($__gn|0),($__ge|0));
        $273 = __THREW__; __THREW__ = 0;
        $274 = $273&1;
        if ($274) {
         label = 245;
         break L24;
        }
        $$pre1058 = HEAP32[$__gn>>2]|0;
        $275 = $$pre1058;
       } else {
        $275 = $271;
       }
       $incdec$ptr275 = ((($275)) + 4|0);
       HEAP32[$__gn>>2] = $incdec$ptr275;
       HEAP32[$275>>2] = $__ng$0;
      }
      $276 = HEAP32[$__fd>>2]|0;
      $cmp277 = ($276|0)>(0);
      L219: do {
       if ($cmp277) {
        $277 = HEAP32[$__b>>2]|0;
        $tobool$i$i$i772 = ($277|0)==(0|0);
        do {
         if ($tobool$i$i$i772) {
          $418 = 1;
         } else {
          $__ninp_$i$i$i$i773 = ((($277)) + 12|0);
          $278 = HEAP32[$__ninp_$i$i$i$i773>>2]|0;
          $__einp_$i$i$i$i774 = ((($277)) + 16|0);
          $279 = HEAP32[$__einp_$i$i$i$i774>>2]|0;
          $cmp$i$i$i$i775 = ($278|0)==($279|0);
          if ($cmp$i$i$i$i775) {
           $vtable$i$i$i$i777 = HEAP32[$277>>2]|0;
           $vfn$i$i$i$i778 = ((($vtable$i$i$i$i777)) + 36|0);
           $280 = HEAP32[$vfn$i$i$i$i778>>2]|0;
           __THREW__ = 0;
           $call$i$i$i$i813 = (invoke_ii($280|0,($277|0))|0);
           $281 = __THREW__; __THREW__ = 0;
           $282 = $281&1;
           if ($282) {
            label = 245;
            break L24;
           } else {
            $retval$0$i$i$i$i782 = $call$i$i$i$i813;
           }
          } else {
           $283 = HEAP32[$278>>2]|0;
           $call3$i$i$i$i780 = (__ZNSt3__211char_traitsIwE11to_int_typeEw($283)|0);
           $retval$0$i$i$i$i782 = $call3$i$i$i$i780;
          }
          $call3$i$i$i783 = (__ZNSt3__211char_traitsIwE3eofEv()|0);
          $call4$i$i$i784 = (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($retval$0$i$i$i$i782,$call3$i$i$i783)|0);
          if ($call4$i$i$i784) {
           HEAP32[$__b>>2] = 0;
           $418 = 1;
           break;
          } else {
           $$pre$i$i$i786 = HEAP32[$__b>>2]|0;
           $phitmp$i$i$i787 = ($$pre$i$i$i786|0)==(0|0);
           $418 = $phitmp$i$i$i787;
           break;
          }
         }
        } while(0);
        $tobool$i2$i$i791 = ($$pre$i17$i$i806|0)==(0|0);
        do {
         if ($tobool$i2$i$i791) {
          label = 205;
         } else {
          $__ninp_$i$i3$i$i793 = ((($$pre$i17$i$i806)) + 12|0);
          $284 = HEAP32[$__ninp_$i$i3$i$i793>>2]|0;
          $__einp_$i$i4$i$i794 = ((($$pre$i17$i$i806)) + 16|0);
          $285 = HEAP32[$__einp_$i$i4$i$i794>>2]|0;
          $cmp$i$i5$i$i795 = ($284|0)==($285|0);
          if ($cmp$i$i5$i$i795) {
           $vtable$i$i7$i$i797 = HEAP32[$$pre$i17$i$i806>>2]|0;
           $vfn$i$i8$i$i798 = ((($vtable$i$i7$i$i797)) + 36|0);
           $286 = HEAP32[$vfn$i$i8$i$i798>>2]|0;
           __THREW__ = 0;
           $call$i$i9$i$i815 = (invoke_ii($286|0,($$pre$i17$i$i806|0))|0);
           $287 = __THREW__; __THREW__ = 0;
           $288 = $287&1;
           if ($288) {
            label = 245;
            break L24;
           } else {
            $retval$0$i$i13$i$i802 = $call$i$i9$i$i815;
           }
          } else {
           $289 = HEAP32[$284>>2]|0;
           $call3$i$i11$i$i800 = (__ZNSt3__211char_traitsIwE11to_int_typeEw($289)|0);
           $retval$0$i$i13$i$i802 = $call3$i$i11$i$i800;
          }
          $call3$i14$i$i803 = (__ZNSt3__211char_traitsIwE3eofEv()|0);
          $call4$i15$i$i804 = (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($retval$0$i$i13$i$i802,$call3$i14$i$i803)|0);
          if ($call4$i15$i$i804) {
           HEAP32[$__e>>2] = 0;
           label = 205;
           break;
          } else {
           if ($418) {
            $419 = $$pre$i17$i$i806;
            break;
           } else {
            label = 244;
            break L24;
           }
          }
         }
        } while(0);
        if ((label|0) == 205) {
         label = 0;
         if ($418) {
          label = 244;
          break L24;
         } else {
          $419 = 0;
         }
        }
        $290 = HEAP32[$__b>>2]|0;
        $__ninp_$i$i818 = ((($290)) + 12|0);
        $291 = HEAP32[$__ninp_$i$i818>>2]|0;
        $__einp_$i$i819 = ((($290)) + 16|0);
        $292 = HEAP32[$__einp_$i$i819>>2]|0;
        $cmp$i$i820 = ($291|0)==($292|0);
        if ($cmp$i$i820) {
         $vtable$i$i821 = HEAP32[$290>>2]|0;
         $vfn$i$i822 = ((($vtable$i$i821)) + 36|0);
         $293 = HEAP32[$vfn$i$i822>>2]|0;
         __THREW__ = 0;
         $call$i$i828 = (invoke_ii($293|0,($290|0))|0);
         $294 = __THREW__; __THREW__ = 0;
         $295 = $294&1;
         if ($295) {
          label = 245;
          break L24;
         } else {
          $retval$0$i$i826 = $call$i$i828;
         }
        } else {
         $296 = HEAP32[$291>>2]|0;
         $call3$i$i824 = (__ZNSt3__211char_traitsIwE11to_int_typeEw($296)|0);
         $retval$0$i$i826 = $call3$i$i824;
        }
        $297 = HEAP32[$__dp>>2]|0;
        $cmp284 = ($retval$0$i$i826|0)==($297|0);
        if (!($cmp284)) {
         label = 244;
         break L24;
        }
        $298 = HEAP32[$__b>>2]|0;
        $__ninp_$i$i831 = ((($298)) + 12|0);
        $299 = HEAP32[$__ninp_$i$i831>>2]|0;
        $__einp_$i$i832 = ((($298)) + 16|0);
        $300 = HEAP32[$__einp_$i$i832>>2]|0;
        $cmp$i$i833 = ($299|0)==($300|0);
        if ($cmp$i$i833) {
         $vtable$i$i834 = HEAP32[$298>>2]|0;
         $vfn$i$i835 = ((($vtable$i$i834)) + 40|0);
         $301 = HEAP32[$vfn$i$i835>>2]|0;
         __THREW__ = 0;
         (invoke_ii($301|0,($298|0))|0);
         $302 = __THREW__; __THREW__ = 0;
         $303 = $302&1;
         if ($303) {
          label = 245;
          break L24;
         } else {
          $$pre$i17$i$i878 = $419;$313 = $419;
         }
        } else {
         $incdec$ptr$i$i837 = ((($299)) + 4|0);
         HEAP32[$__ninp_$i$i831>>2] = $incdec$ptr$i$i837;
         $304 = HEAP32[$299>>2]|0;
         (__ZNSt3__211char_traitsIwE11to_int_typeEw($304)|0);
         $$pre$i17$i$i878 = $419;$313 = $419;
        }
        while(1) {
         $305 = HEAP32[$__fd>>2]|0;
         $cmp291 = ($305|0)>(0);
         if (!($cmp291)) {
          break L219;
         }
         $306 = HEAP32[$__b>>2]|0;
         $tobool$i$i$i844 = ($306|0)==(0|0);
         do {
          if ($tobool$i$i$i844) {
           $320 = 1;
          } else {
           $__ninp_$i$i$i$i845 = ((($306)) + 12|0);
           $307 = HEAP32[$__ninp_$i$i$i$i845>>2]|0;
           $__einp_$i$i$i$i846 = ((($306)) + 16|0);
           $308 = HEAP32[$__einp_$i$i$i$i846>>2]|0;
           $cmp$i$i$i$i847 = ($307|0)==($308|0);
           if ($cmp$i$i$i$i847) {
            $vtable$i$i$i$i849 = HEAP32[$306>>2]|0;
            $vfn$i$i$i$i850 = ((($vtable$i$i$i$i849)) + 36|0);
            $309 = HEAP32[$vfn$i$i$i$i850>>2]|0;
            __THREW__ = 0;
            $call$i$i$i$i885 = (invoke_ii($309|0,($306|0))|0);
            $310 = __THREW__; __THREW__ = 0;
            $311 = $310&1;
            if ($311) {
             label = 245;
             break L24;
            } else {
             $retval$0$i$i$i$i854 = $call$i$i$i$i885;
            }
           } else {
            $312 = HEAP32[$307>>2]|0;
            $call3$i$i$i$i852 = (__ZNSt3__211char_traitsIwE11to_int_typeEw($312)|0);
            $retval$0$i$i$i$i854 = $call3$i$i$i$i852;
           }
           $call3$i$i$i855 = (__ZNSt3__211char_traitsIwE3eofEv()|0);
           $call4$i$i$i856 = (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($retval$0$i$i$i$i854,$call3$i$i$i855)|0);
           if ($call4$i$i$i856) {
            HEAP32[$__b>>2] = 0;
            $320 = 1;
            break;
           } else {
            $$pre$i$i$i858 = HEAP32[$__b>>2]|0;
            $phitmp$i$i$i859 = ($$pre$i$i$i858|0)==(0|0);
            $320 = $phitmp$i$i$i859;
            break;
           }
          }
         } while(0);
         $tobool$i2$i$i863 = ($313|0)==(0|0);
         do {
          if ($tobool$i2$i$i863) {
           $$pre$i17$i$i8781059$ph = $$pre$i17$i$i878;
           label = 228;
          } else {
           $__ninp_$i$i3$i$i865 = ((($313)) + 12|0);
           $314 = HEAP32[$__ninp_$i$i3$i$i865>>2]|0;
           $__einp_$i$i4$i$i866 = ((($313)) + 16|0);
           $315 = HEAP32[$__einp_$i$i4$i$i866>>2]|0;
           $cmp$i$i5$i$i867 = ($314|0)==($315|0);
           if ($cmp$i$i5$i$i867) {
            $vtable$i$i7$i$i869 = HEAP32[$313>>2]|0;
            $vfn$i$i8$i$i870 = ((($vtable$i$i7$i$i869)) + 36|0);
            $316 = HEAP32[$vfn$i$i8$i$i870>>2]|0;
            __THREW__ = 0;
            $call$i$i9$i$i887 = (invoke_ii($316|0,($313|0))|0);
            $317 = __THREW__; __THREW__ = 0;
            $318 = $317&1;
            if ($318) {
             label = 245;
             break L24;
            } else {
             $retval$0$i$i13$i$i874 = $call$i$i9$i$i887;
            }
           } else {
            $319 = HEAP32[$314>>2]|0;
            $call3$i$i11$i$i872 = (__ZNSt3__211char_traitsIwE11to_int_typeEw($319)|0);
            $retval$0$i$i13$i$i874 = $call3$i$i11$i$i872;
           }
           $call3$i14$i$i875 = (__ZNSt3__211char_traitsIwE3eofEv()|0);
           $call4$i15$i$i876 = (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($retval$0$i$i13$i$i874,$call3$i14$i$i875)|0);
           if ($call4$i15$i$i876) {
            HEAP32[$__e>>2] = 0;
            $$pre$i17$i$i8781059$ph = 0;
            label = 228;
            break;
           } else {
            $phitmp$i18$i$i879 = ($$pre$i17$i$i878|0)==(0|0);
            $cmptmp$i$i882 = $320 ^ $phitmp$i18$i$i879;
            if ($cmptmp$i$i882) {
             $$pre$i17$i$i87810591079 = $$pre$i17$i$i878;$420 = $$pre$i17$i$i878;
             break;
            } else {
             label = 244;
             break L24;
            }
           }
          }
         } while(0);
         if ((label|0) == 228) {
          label = 0;
          if ($320) {
           label = 244;
           break L24;
          } else {
           $$pre$i17$i$i87810591079 = $$pre$i17$i$i8781059$ph;$420 = 0;
          }
         }
         $321 = HEAP32[$__b>>2]|0;
         $__ninp_$i$i890 = ((($321)) + 12|0);
         $322 = HEAP32[$__ninp_$i$i890>>2]|0;
         $__einp_$i$i891 = ((($321)) + 16|0);
         $323 = HEAP32[$__einp_$i$i891>>2]|0;
         $cmp$i$i892 = ($322|0)==($323|0);
         if ($cmp$i$i892) {
          $vtable$i$i893 = HEAP32[$321>>2]|0;
          $vfn$i$i894 = ((($vtable$i$i893)) + 36|0);
          $324 = HEAP32[$vfn$i$i894>>2]|0;
          __THREW__ = 0;
          $call$i$i900 = (invoke_ii($324|0,($321|0))|0);
          $325 = __THREW__; __THREW__ = 0;
          $326 = $325&1;
          if ($326) {
           label = 245;
           break L24;
          } else {
           $retval$0$i$i898 = $call$i$i900;
          }
         } else {
          $327 = HEAP32[$322>>2]|0;
          $call3$i$i896 = (__ZNSt3__211char_traitsIwE11to_int_typeEw($327)|0);
          $retval$0$i$i898 = $call3$i$i896;
         }
         $vtable$i902 = HEAP32[$__ct>>2]|0;
         $vfn$i903 = ((($vtable$i902)) + 12|0);
         $328 = HEAP32[$vfn$i903>>2]|0;
         __THREW__ = 0;
         $call$i904 = (invoke_iiii($328|0,($__ct|0),2048,($retval$0$i$i898|0))|0);
         $329 = __THREW__; __THREW__ = 0;
         $330 = $329&1;
         if ($330) {
          label = 245;
          break L24;
         }
         if (!($call$i904)) {
          label = 244;
          break L24;
         }
         $331 = HEAP32[$__wn>>2]|0;
         $332 = HEAP32[$__we$addr>>2]|0;
         $cmp303 = ($331|0)==($332|0);
         if ($cmp303) {
          __THREW__ = 0;
          invoke_viii(453,($__wb|0),($__wn|0),($__we$addr|0));
          $333 = __THREW__; __THREW__ = 0;
          $334 = $333&1;
          if ($334) {
           label = 245;
           break L24;
          }
         }
         $335 = HEAP32[$__b>>2]|0;
         $__ninp_$i$i907 = ((($335)) + 12|0);
         $336 = HEAP32[$__ninp_$i$i907>>2]|0;
         $__einp_$i$i908 = ((($335)) + 16|0);
         $337 = HEAP32[$__einp_$i$i908>>2]|0;
         $cmp$i$i909 = ($336|0)==($337|0);
         if ($cmp$i$i909) {
          $vtable$i$i910 = HEAP32[$335>>2]|0;
          $vfn$i$i911 = ((($vtable$i$i910)) + 36|0);
          $338 = HEAP32[$vfn$i$i911>>2]|0;
          __THREW__ = 0;
          $call$i$i917 = (invoke_ii($338|0,($335|0))|0);
          $339 = __THREW__; __THREW__ = 0;
          $340 = $339&1;
          if ($340) {
           label = 245;
           break L24;
          } else {
           $retval$0$i$i915 = $call$i$i917;
          }
         } else {
          $341 = HEAP32[$336>>2]|0;
          $call3$i$i913 = (__ZNSt3__211char_traitsIwE11to_int_typeEw($341)|0);
          $retval$0$i$i915 = $call3$i$i913;
         }
         $342 = HEAP32[$__wn>>2]|0;
         $incdec$ptr309 = ((($342)) + 4|0);
         HEAP32[$__wn>>2] = $incdec$ptr309;
         HEAP32[$342>>2] = $retval$0$i$i915;
         $343 = HEAP32[$__fd>>2]|0;
         $dec = (($343) + -1)|0;
         HEAP32[$__fd>>2] = $dec;
         $344 = HEAP32[$__b>>2]|0;
         $__ninp_$i$i920 = ((($344)) + 12|0);
         $345 = HEAP32[$__ninp_$i$i920>>2]|0;
         $__einp_$i$i921 = ((($344)) + 16|0);
         $346 = HEAP32[$__einp_$i$i921>>2]|0;
         $cmp$i$i922 = ($345|0)==($346|0);
         if ($cmp$i$i922) {
          $vtable$i$i923 = HEAP32[$344>>2]|0;
          $vfn$i$i924 = ((($vtable$i$i923)) + 40|0);
          $347 = HEAP32[$vfn$i$i924>>2]|0;
          __THREW__ = 0;
          (invoke_ii($347|0,($344|0))|0);
          $348 = __THREW__; __THREW__ = 0;
          $349 = $348&1;
          if ($349) {
           label = 245;
           break L24;
          } else {
           $$pre$i17$i$i878 = $$pre$i17$i$i87810591079;$313 = $420;
           continue;
          }
         } else {
          $incdec$ptr$i$i926 = ((($345)) + 4|0);
          HEAP32[$__ninp_$i$i920>>2] = $incdec$ptr$i$i926;
          $350 = HEAP32[$345>>2]|0;
          (__ZNSt3__211char_traitsIwE11to_int_typeEw($350)|0);
          $$pre$i17$i$i878 = $$pre$i17$i$i87810591079;$313 = $420;
          continue;
         }
        }
       }
      } while(0);
      $351 = HEAP32[$__wn>>2]|0;
      $352 = HEAP32[$__wb>>2]|0;
      $cmp316 = ($351|0)==($352|0);
      if ($cmp316) {
       label = 244;
       break L24;
      } else {
       $__trailing_sign$1 = $__trailing_sign$0;
      }
      break;
     }
     default: {
      $__trailing_sign$1 = $__trailing_sign$0;
     }
     }
    } while(0);
    L293: do {
     if ((label|0) == 49) {
      while(1) {
       label = 0;
       $47 = HEAP32[$__b>>2]|0;
       $tobool$i$i$i189 = ($47|0)==(0|0);
       do {
        if ($tobool$i$i$i189) {
         $61 = 1;
        } else {
         $__ninp_$i$i$i$i190 = ((($47)) + 12|0);
         $48 = HEAP32[$__ninp_$i$i$i$i190>>2]|0;
         $__einp_$i$i$i$i191 = ((($47)) + 16|0);
         $49 = HEAP32[$__einp_$i$i$i$i191>>2]|0;
         $cmp$i$i$i$i192 = ($48|0)==($49|0);
         if ($cmp$i$i$i$i192) {
          $vtable$i$i$i$i194 = HEAP32[$47>>2]|0;
          $vfn$i$i$i$i195 = ((($vtable$i$i$i$i194)) + 36|0);
          $50 = HEAP32[$vfn$i$i$i$i195>>2]|0;
          __THREW__ = 0;
          $call$i$i$i$i229 = (invoke_ii($50|0,($47|0))|0);
          $51 = __THREW__; __THREW__ = 0;
          $52 = $51&1;
          if ($52) {
           label = 35;
           break L24;
          } else {
           $retval$0$i$i$i$i199 = $call$i$i$i$i229;
          }
         } else {
          $53 = HEAP32[$48>>2]|0;
          $call3$i$i$i$i197 = (__ZNSt3__211char_traitsIwE11to_int_typeEw($53)|0);
          $retval$0$i$i$i$i199 = $call3$i$i$i$i197;
         }
         $call3$i$i$i200 = (__ZNSt3__211char_traitsIwE3eofEv()|0);
         $call4$i$i$i201 = (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($retval$0$i$i$i$i199,$call3$i$i$i200)|0);
         if ($call4$i$i$i201) {
          HEAP32[$__b>>2] = 0;
          $61 = 1;
          break;
         } else {
          $$pre$i$i$i203 = HEAP32[$__b>>2]|0;
          $phitmp$i$i$i204 = ($$pre$i$i$i203|0)==(0|0);
          $61 = $phitmp$i$i$i204;
          break;
         }
        }
       } while(0);
       $tobool$i2$i$i208 = ($54|0)==(0|0);
       do {
        if ($tobool$i2$i$i208) {
         $$pre$i17$i$i2231070 = $$pre$i17$i$i223;
         label = 62;
        } else {
         $__ninp_$i$i3$i$i210 = ((($54)) + 12|0);
         $55 = HEAP32[$__ninp_$i$i3$i$i210>>2]|0;
         $__einp_$i$i4$i$i211 = ((($54)) + 16|0);
         $56 = HEAP32[$__einp_$i$i4$i$i211>>2]|0;
         $cmp$i$i5$i$i212 = ($55|0)==($56|0);
         if ($cmp$i$i5$i$i212) {
          $vtable$i$i7$i$i214 = HEAP32[$54>>2]|0;
          $vfn$i$i8$i$i215 = ((($vtable$i$i7$i$i214)) + 36|0);
          $57 = HEAP32[$vfn$i$i8$i$i215>>2]|0;
          __THREW__ = 0;
          $call$i$i9$i$i231 = (invoke_ii($57|0,($54|0))|0);
          $58 = __THREW__; __THREW__ = 0;
          $59 = $58&1;
          if ($59) {
           label = 35;
           break L24;
          } else {
           $retval$0$i$i13$i$i219 = $call$i$i9$i$i231;
          }
         } else {
          $60 = HEAP32[$55>>2]|0;
          $call3$i$i11$i$i217 = (__ZNSt3__211char_traitsIwE11to_int_typeEw($60)|0);
          $retval$0$i$i13$i$i219 = $call3$i$i11$i$i217;
         }
         $call3$i14$i$i220 = (__ZNSt3__211char_traitsIwE3eofEv()|0);
         $call4$i15$i$i221 = (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($retval$0$i$i13$i$i219,$call3$i14$i$i220)|0);
         if ($call4$i15$i$i221) {
          HEAP32[$__e>>2] = 0;
          $$pre$i17$i$i2231070 = 0;
          label = 62;
          break;
         } else {
          $phitmp$i18$i$i224 = ($$pre$i17$i$i223|0)==(0|0);
          $cmptmp$i$i227 = $61 ^ $phitmp$i18$i$i224;
          if ($cmptmp$i$i227) {
           $$pre$i17$i$i2231072 = $$pre$i17$i$i223;$415 = $$pre$i17$i$i223;
           break;
          } else {
           $__trailing_sign$1 = $__trailing_sign$0;
           break L293;
          }
         }
        }
       } while(0);
       if ((label|0) == 62) {
        label = 0;
        if ($61) {
         $__trailing_sign$1 = $__trailing_sign$0;
         break L293;
        } else {
         $$pre$i17$i$i2231072 = $$pre$i17$i$i2231070;$415 = 0;
        }
       }
       $62 = HEAP32[$__b>>2]|0;
       $__ninp_$i$i234 = ((($62)) + 12|0);
       $63 = HEAP32[$__ninp_$i$i234>>2]|0;
       $__einp_$i$i235 = ((($62)) + 16|0);
       $64 = HEAP32[$__einp_$i$i235>>2]|0;
       $cmp$i$i236 = ($63|0)==($64|0);
       if ($cmp$i$i236) {
        $vtable$i$i237 = HEAP32[$62>>2]|0;
        $vfn$i$i238 = ((($vtable$i$i237)) + 36|0);
        $65 = HEAP32[$vfn$i$i238>>2]|0;
        __THREW__ = 0;
        $call$i$i244 = (invoke_ii($65|0,($62|0))|0);
        $66 = __THREW__; __THREW__ = 0;
        $67 = $66&1;
        if ($67) {
         label = 35;
         break L24;
        } else {
         $retval$0$i$i242 = $call$i$i244;
        }
       } else {
        $68 = HEAP32[$63>>2]|0;
        $call3$i$i240 = (__ZNSt3__211char_traitsIwE11to_int_typeEw($68)|0);
        $retval$0$i$i242 = $call3$i$i240;
       }
       $vtable$i246 = HEAP32[$__ct>>2]|0;
       $vfn$i247 = ((($vtable$i246)) + 12|0);
       $69 = HEAP32[$vfn$i247>>2]|0;
       __THREW__ = 0;
       $call$i248 = (invoke_iiii($69|0,($__ct|0),8192,($retval$0$i$i242|0))|0);
       $70 = __THREW__; __THREW__ = 0;
       $71 = $70&1;
       if ($71) {
        label = 35;
        break L24;
       }
       if (!($call$i248)) {
        $__trailing_sign$1 = $__trailing_sign$0;
        break L293;
       }
       $72 = HEAP32[$__b>>2]|0;
       $__ninp_$i$i251 = ((($72)) + 12|0);
       $73 = HEAP32[$__ninp_$i$i251>>2]|0;
       $__einp_$i$i252 = ((($72)) + 16|0);
       $74 = HEAP32[$__einp_$i$i252>>2]|0;
       $cmp$i$i253 = ($73|0)==($74|0);
       if ($cmp$i$i253) {
        $vtable$i$i254 = HEAP32[$72>>2]|0;
        $vfn$i$i255 = ((($vtable$i$i254)) + 40|0);
        $75 = HEAP32[$vfn$i$i255>>2]|0;
        __THREW__ = 0;
        $call$i$i264 = (invoke_ii($75|0,($72|0))|0);
        $76 = __THREW__; __THREW__ = 0;
        $77 = $76&1;
        if ($77) {
         label = 35;
         break L24;
        } else {
         $retval$0$i$i260 = $call$i$i264;
        }
       } else {
        $incdec$ptr$i$i257 = ((($73)) + 4|0);
        HEAP32[$__ninp_$i$i251>>2] = $incdec$ptr$i$i257;
        $78 = HEAP32[$73>>2]|0;
        $call3$i$i258 = (__ZNSt3__211char_traitsIwE11to_int_typeEw($78)|0);
        $retval$0$i$i260 = $call3$i$i258;
       }
       __THREW__ = 0;
       invoke_vii(450,($__spaces|0),($retval$0$i$i260|0));
       $79 = __THREW__; __THREW__ = 0;
       $80 = $79&1;
       if ($80) {
        label = 35;
        break L24;
       } else {
        $$pre$i17$i$i223 = $$pre$i17$i$i2231072;$54 = $415;
        label = 49;
       }
      }
     }
    } while(0);
    $inc325 = (($__p$0) + 1)|0;
    $__p$0 = $inc325;$__trailing_sign$0 = $__trailing_sign$1;
   }
   L329:    switch (label|0) {
    case 35: {
     $24 = ___cxa_find_matching_catch_2()|0;
     $25 = tempRet0;
     $ehselector$slot$5 = $25;$exn$slot$5 = $24;
     break L21;
     break;
    }
    case 47: {
     $46 = HEAP32[$__err>>2]|0;
     $or = $46 | 4;
     HEAP32[$__err>>2] = $or;
     $retval$10 = 0;
     break;
    }
    case 109: {
     $155 = HEAP32[$__err>>2]|0;
     $or102 = $155 | 4;
     HEAP32[$__err>>2] = $or102;
     $retval$10 = 0;
     break;
    }
    case 119: {
     $171 = ___cxa_find_matching_catch_2()|0;
     $172 = tempRet0;
     $ehselector$slot$5 = $172;$exn$slot$5 = $171;
     break L21;
     break;
    }
    case 149: {
     $217 = ___cxa_find_matching_catch_2()|0;
     $218 = tempRet0;
     $ehselector$slot$5 = $218;$exn$slot$5 = $217;
     break L21;
     break;
    }
    case 150: {
     $219 = ___cxa_find_matching_catch_2()|0;
     $220 = tempRet0;
     $ehselector$slot$5 = $220;$exn$slot$5 = $219;
     break L21;
     break;
    }
    case 153: {
     $224 = HEAP32[$__err>>2]|0;
     $or215 = $224 | 4;
     HEAP32[$__err>>2] = $or215;
     $retval$10 = 0;
     break;
    }
    case 244: {
     $353 = HEAP32[$__err>>2]|0;
     $or318 = $353 | 4;
     HEAP32[$__err>>2] = $or318;
     $retval$10 = 0;
     break;
    }
    case 245: {
     $354 = ___cxa_find_matching_catch_2()|0;
     $355 = tempRet0;
     $ehselector$slot$5 = $355;$exn$slot$5 = $354;
     break L21;
     break;
    }
    case 247: {
     L331: do {
      if ($tobool330) {
       $356 = ((($__trailing_sign$0)) + 8|0);
       $__size_$i$i933 = ((($356)) + 3|0);
       $__size_$i2$i935 = ((($__trailing_sign$0)) + 4|0);
       $__i$0 = 1;
       L333: while(1) {
        $357 = HEAP8[$__size_$i$i933>>0]|0;
        $tobool$i$i934 = ($357<<24>>24)<(0);
        if ($tobool$i$i934) {
         $358 = HEAP32[$__size_$i2$i935>>2]|0;
         $cond$i939 = $358;
        } else {
         $conv$i$i937 = $357&255;
         $cond$i939 = $conv$i$i937;
        }
        $cmp335 = ($__i$0>>>0)<($cond$i939>>>0);
        if (!($cmp335)) {
         break L331;
        }
        $359 = HEAP32[$__b>>2]|0;
        $tobool$i$i$i527 = ($359|0)==(0|0);
        do {
         if ($tobool$i$i$i527) {
          $421 = 1;
         } else {
          $__ninp_$i$i$i$i528 = ((($359)) + 12|0);
          $360 = HEAP32[$__ninp_$i$i$i$i528>>2]|0;
          $__einp_$i$i$i$i529 = ((($359)) + 16|0);
          $361 = HEAP32[$__einp_$i$i$i$i529>>2]|0;
          $cmp$i$i$i$i530 = ($360|0)==($361|0);
          if ($cmp$i$i$i$i530) {
           $vtable$i$i$i$i532 = HEAP32[$359>>2]|0;
           $vfn$i$i$i$i533 = ((($vtable$i$i$i$i532)) + 36|0);
           $362 = HEAP32[$vfn$i$i$i$i533>>2]|0;
           __THREW__ = 0;
           $call$i$i$i$i568 = (invoke_ii($362|0,($359|0))|0);
           $363 = __THREW__; __THREW__ = 0;
           $364 = $363&1;
           if ($364) {
            label = 275;
            break L333;
           } else {
            $retval$0$i$i$i$i537 = $call$i$i$i$i568;
           }
          } else {
           $365 = HEAP32[$360>>2]|0;
           $call3$i$i$i$i535 = (__ZNSt3__211char_traitsIwE11to_int_typeEw($365)|0);
           $retval$0$i$i$i$i537 = $call3$i$i$i$i535;
          }
          $call3$i$i$i538 = (__ZNSt3__211char_traitsIwE3eofEv()|0);
          $call4$i$i$i539 = (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($retval$0$i$i$i$i537,$call3$i$i$i538)|0);
          if ($call4$i$i$i539) {
           HEAP32[$__b>>2] = 0;
           $421 = 1;
           break;
          } else {
           $$pre$i$i$i541 = HEAP32[$__b>>2]|0;
           $phitmp$i$i$i542 = ($$pre$i$i$i541|0)==(0|0);
           $421 = $phitmp$i$i$i542;
           break;
          }
         }
        } while(0);
        $366 = HEAP32[$__e>>2]|0;
        $tobool$i2$i$i546 = ($366|0)==(0|0);
        do {
         if ($tobool$i2$i$i546) {
          label = 266;
         } else {
          $__ninp_$i$i3$i$i548 = ((($366)) + 12|0);
          $367 = HEAP32[$__ninp_$i$i3$i$i548>>2]|0;
          $__einp_$i$i4$i$i549 = ((($366)) + 16|0);
          $368 = HEAP32[$__einp_$i$i4$i$i549>>2]|0;
          $cmp$i$i5$i$i550 = ($367|0)==($368|0);
          if ($cmp$i$i5$i$i550) {
           $vtable$i$i7$i$i552 = HEAP32[$366>>2]|0;
           $vfn$i$i8$i$i553 = ((($vtable$i$i7$i$i552)) + 36|0);
           $369 = HEAP32[$vfn$i$i8$i$i553>>2]|0;
           __THREW__ = 0;
           $call$i$i9$i$i570 = (invoke_ii($369|0,($366|0))|0);
           $370 = __THREW__; __THREW__ = 0;
           $371 = $370&1;
           if ($371) {
            label = 275;
            break L333;
           } else {
            $retval$0$i$i13$i$i557 = $call$i$i9$i$i570;
           }
          } else {
           $372 = HEAP32[$367>>2]|0;
           $call3$i$i11$i$i555 = (__ZNSt3__211char_traitsIwE11to_int_typeEw($372)|0);
           $retval$0$i$i13$i$i557 = $call3$i$i11$i$i555;
          }
          $call3$i14$i$i558 = (__ZNSt3__211char_traitsIwE3eofEv()|0);
          $call4$i15$i$i559 = (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($retval$0$i$i13$i$i557,$call3$i14$i$i558)|0);
          if ($call4$i15$i$i559) {
           HEAP32[$__e>>2] = 0;
           label = 266;
           break;
          } else {
           if ($421) {
            break;
           } else {
            label = 274;
            break L333;
           }
          }
         }
        } while(0);
        if ((label|0) == 266) {
         label = 0;
         if ($421) {
          label = 274;
          break;
         }
        }
        $373 = HEAP32[$__b>>2]|0;
        $__ninp_$i$i149 = ((($373)) + 12|0);
        $374 = HEAP32[$__ninp_$i$i149>>2]|0;
        $__einp_$i$i150 = ((($373)) + 16|0);
        $375 = HEAP32[$__einp_$i$i150>>2]|0;
        $cmp$i$i151 = ($374|0)==($375|0);
        if ($cmp$i$i151) {
         $vtable$i$i152 = HEAP32[$373>>2]|0;
         $vfn$i$i153 = ((($vtable$i$i152)) + 36|0);
         $376 = HEAP32[$vfn$i$i153>>2]|0;
         __THREW__ = 0;
         $call$i$i158 = (invoke_ii($376|0,($373|0))|0);
         $377 = __THREW__; __THREW__ = 0;
         $378 = $377&1;
         if ($378) {
          label = 275;
          break;
         } else {
          $retval$0$i$i = $call$i$i158;
         }
        } else {
         $379 = HEAP32[$374>>2]|0;
         $call3$i$i155 = (__ZNSt3__211char_traitsIwE11to_int_typeEw($379)|0);
         $retval$0$i$i = $call3$i$i155;
        }
        $380 = HEAP8[$__size_$i$i933>>0]|0;
        $tobool$i$i$i$i = ($380<<24>>24)<(0);
        if ($tobool$i$i$i$i) {
         $381 = HEAP32[$__trailing_sign$0>>2]|0;
         $cond$i$i$i = $381;
        } else {
         $cond$i$i$i = $__trailing_sign$0;
        }
        $add$ptr$i = (($cond$i$i$i) + ($__i$0<<2)|0);
        $382 = HEAP32[$add$ptr$i>>2]|0;
        $cmp346 = ($retval$0$i$i|0)==($382|0);
        if (!($cmp346)) {
         label = 274;
         break;
        }
        $inc351 = (($__i$0) + 1)|0;
        $386 = HEAP32[$__b>>2]|0;
        $__ninp_$i$i = ((($386)) + 12|0);
        $387 = HEAP32[$__ninp_$i$i>>2]|0;
        $__einp_$i$i = ((($386)) + 16|0);
        $388 = HEAP32[$__einp_$i$i>>2]|0;
        $cmp$i$i = ($387|0)==($388|0);
        if ($cmp$i$i) {
         $vtable$i$i = HEAP32[$386>>2]|0;
         $vfn$i$i = ((($vtable$i$i)) + 40|0);
         $389 = HEAP32[$vfn$i$i>>2]|0;
         __THREW__ = 0;
         (invoke_ii($389|0,($386|0))|0);
         $390 = __THREW__; __THREW__ = 0;
         $391 = $390&1;
         if ($391) {
          label = 275;
          break;
         } else {
          $__i$0 = $inc351;
          continue;
         }
        } else {
         $incdec$ptr$i$i = ((($387)) + 4|0);
         HEAP32[$__ninp_$i$i>>2] = $incdec$ptr$i$i;
         $392 = HEAP32[$387>>2]|0;
         (__ZNSt3__211char_traitsIwE11to_int_typeEw($392)|0);
         $__i$0 = $inc351;
         continue;
        }
       }
       if ((label|0) == 274) {
        $383 = HEAP32[$__err>>2]|0;
        $or348 = $383 | 4;
        HEAP32[$__err>>2] = $or348;
        $retval$10 = 0;
        break L329;
       }
       else if ((label|0) == 275) {
        $384 = ___cxa_find_matching_catch_2()|0;
        $385 = tempRet0;
        $ehselector$slot$5 = $385;$exn$slot$5 = $384;
        break L21;
       }
      }
     } while(0);
     $393 = HEAP32[$__gb>>2]|0;
     $394 = HEAP32[$__gn>>2]|0;
     $cmp360 = ($393|0)==($394|0);
     if ($cmp360) {
      $retval$10 = 1;
     } else {
      HEAP32[$__et>>2] = 0;
      __THREW__ = 0;
      invoke_viiii(400,($__grp|0),($393|0),($394|0),($__et|0));
      $395 = __THREW__; __THREW__ = 0;
      $396 = $395&1;
      if ($396) {
       $399 = ___cxa_find_matching_catch_2()|0;
       $400 = tempRet0;
       $ehselector$slot$5 = $400;$exn$slot$5 = $399;
       break L21;
      }
      $397 = HEAP32[$__et>>2]|0;
      $tobool366 = ($397|0)==(0);
      if ($tobool366) {
       $retval$10 = 1;
       break;
      } else {
       $398 = HEAP32[$__err>>2]|0;
       $or368 = $398 | 4;
       HEAP32[$__err>>2] = $or368;
       $retval$10 = 0;
       break;
      }
     }
     break;
    }
   }
   __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($__spaces);
   __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($__nsn);
   __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($__psn);
   __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($__sym);
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grp);
   $401 = HEAP32[$__gb>>2]|0;
   HEAP32[$__gb>>2] = 0;
   $tobool$i$i107 = ($401|0)==(0|0);
   if (!($tobool$i$i107)) {
    $402 = HEAP32[$__second_$i$i$i>>2]|0;
    __THREW__ = 0;
    invoke_vi($402|0,($401|0));
    $403 = __THREW__; __THREW__ = 0;
    $404 = $403&1;
    if ($404) {
     $405 = ___cxa_find_matching_catch_3(0|0)|0;
     $406 = tempRet0;
     ___clang_call_terminate($405);
     // unreachable;
    }
   }
   STACKTOP = sp;return ($retval$10|0);
  }
 } while(0);
 __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($__spaces);
 __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($__nsn);
 __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($__psn);
 __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($__sym);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grp);
 $407 = HEAP32[$__gb>>2]|0;
 HEAP32[$__gb>>2] = 0;
 $tobool$i$i = ($407|0)==(0|0);
 if (!($tobool$i$i)) {
  $408 = HEAP32[$__second_$i$i$i>>2]|0;
  __THREW__ = 0;
  invoke_vi($408|0,($407|0));
  $409 = __THREW__; __THREW__ = 0;
  $410 = $409&1;
  if ($410) {
   $411 = ___cxa_find_matching_catch_3(0|0)|0;
   $412 = tempRet0;
   ___clang_call_terminate($411);
   // unreachable;
  }
 }
 ___resumeException($exn$slot$5|0);
 // unreachable;
 return (0)|0;
}
function __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6appendIPwEENS_9enable_ifIXaasr21__is_forward_iteratorIT_EE5valuesr38__libcpp_string_gets_noexcept_iteratorIS9_EE5valueERS5_E4typeES9_S9_($this,$__first,$__last) {
 $this = $this|0;
 $__first = $__first|0;
 $__last = $__last|0;
 var $$pre = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $__first$addr$0 = 0, $__p$0 = 0, $__size_$i$i = 0, $__size_$i2$i = 0, $__size_$i2$i22 = 0, $add = 0, $add$ptr = 0, $and$i$i = 0, $cmp = 0, $cmp7 = 0, $cond$i27 = 0, $cond$i32 = 0;
 var $cond$i33 = 0, $conv$i$i = 0, $conv$i$i23 = 0, $incdec$ptr = 0, $incdec$ptr8 = 0, $phitmp$i = 0, $ref$tmp = 0, $sub = 0, $sub$ptr$div$i$i = 0, $sub$ptr$lhs$cast$i$i = 0, $sub$ptr$rhs$cast$i$i = 0, $sub$ptr$sub$i$i = 0, $sub5 = 0, $tobool = 0, $tobool$i$i = 0, $tobool$i$i21 = 0, $tobool$i$i29 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $ref$tmp = sp;
 $0 = ((($this)) + 8|0);
 $__size_$i$i = ((($0)) + 3|0);
 $1 = HEAP8[$__size_$i$i>>0]|0;
 $tobool$i$i = ($1<<24>>24)<(0);
 if ($tobool$i$i) {
  $__size_$i2$i = ((($this)) + 4|0);
  $2 = HEAP32[$__size_$i2$i>>2]|0;
  $3 = HEAP32[$0>>2]|0;
  $and$i$i = $3 & 2147483647;
  $phitmp$i = (($and$i$i) + -1)|0;
  $cond$i27 = $phitmp$i;$cond$i33 = $2;
 } else {
  $conv$i$i = $1&255;
  $cond$i27 = 1;$cond$i33 = $conv$i$i;
 }
 $sub$ptr$lhs$cast$i$i = $__last;
 $sub$ptr$rhs$cast$i$i = $__first;
 $sub$ptr$sub$i$i = (($sub$ptr$lhs$cast$i$i) - ($sub$ptr$rhs$cast$i$i))|0;
 $sub$ptr$div$i$i = $sub$ptr$sub$i$i >> 2;
 $tobool = ($sub$ptr$div$i$i|0)==(0);
 do {
  if (!($tobool)) {
   $sub = (($cond$i27) - ($cond$i33))|0;
   $cmp = ($sub>>>0)<($sub$ptr$div$i$i>>>0);
   $add = (($cond$i33) + ($sub$ptr$div$i$i))|0;
   if ($cmp) {
    $sub5 = (($add) - ($cond$i27))|0;
    __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE9__grow_byEjjjjjj($this,$cond$i27,$sub5,$cond$i33,$cond$i33,0,0);
    $$pre = HEAP8[$__size_$i$i>>0]|0;
    $4 = $$pre;
   } else {
    $4 = $1;
   }
   $tobool$i$i29 = ($4<<24>>24)<(0);
   if ($tobool$i$i29) {
    $5 = HEAP32[$this>>2]|0;
    $cond$i32 = $5;
   } else {
    $cond$i32 = $this;
   }
   $add$ptr = (($cond$i32) + ($cond$i33<<2)|0);
   $__first$addr$0 = $__first;$__p$0 = $add$ptr;
   while(1) {
    $cmp7 = ($__first$addr$0|0)==($__last|0);
    if ($cmp7) {
     break;
    }
    __ZNSt3__211char_traitsIwE6assignERwRKw($__p$0,$__first$addr$0);
    $incdec$ptr = ((($__p$0)) + 4|0);
    $incdec$ptr8 = ((($__first$addr$0)) + 4|0);
    $__first$addr$0 = $incdec$ptr8;$__p$0 = $incdec$ptr;
   }
   HEAP32[$ref$tmp>>2] = 0;
   __ZNSt3__211char_traitsIwE6assignERwRKw($__p$0,$ref$tmp);
   $6 = HEAP8[$__size_$i$i>>0]|0;
   $tobool$i$i21 = ($6<<24>>24)<(0);
   if ($tobool$i$i21) {
    $__size_$i2$i22 = ((($this)) + 4|0);
    HEAP32[$__size_$i2$i22>>2] = $add;
    break;
   } else {
    $conv$i$i23 = $add&255;
    HEAP8[$__size_$i$i>>0] = $conv$i$i23;
    break;
   }
  }
 } while(0);
 STACKTOP = sp;return ($this|0);
}
function __ZNSt3__211__money_getIwE13__gather_infoEbRKNS_6localeERNS_10money_base7patternERwS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERNS9_IwNSA_IwEENSC_IwEEEESJ_SJ_Ri($__intl,$__loc,$__pat,$__dp,$__ts,$__grp,$__sym,$__psn,$__nsn,$__fd) {
 $__intl = $__intl|0;
 $__loc = $__loc|0;
 $__pat = $__pat|0;
 $__dp = $__dp|0;
 $__ts = $__ts|0;
 $__grp = $__grp|0;
 $__sym = $__sym|0;
 $__psn = $__psn|0;
 $__nsn = $__nsn|0;
 $__fd = $__fd|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $8 = 0, $9 = 0, $__i$0$i$i$i = 0, $__i$0$i$i$i119 = 0, $__i$0$i$i$i141 = 0, $__i$0$i$i$i170 = 0, $__i$0$i$i$i192 = 0, $__i$0$i$i$i44 = 0, $__i$0$i$i$i70 = 0, $__i$0$i$i$i91 = 0;
 var $__size_$i1$i$i$i = 0, $__size_$i1$i$i$i108 = 0, $__size_$i1$i$i$i130 = 0, $__size_$i1$i$i$i159 = 0, $__size_$i1$i$i$i181 = 0, $__size_$i1$i$i$i33 = 0, $__size_$i1$i$i$i61 = 0, $__size_$i1$i$i$i80 = 0, $__size_$i2$i$i$i = 0, $__size_$i2$i$i$i111 = 0, $__size_$i2$i$i$i133 = 0, $__size_$i2$i$i$i162 = 0, $__size_$i2$i$i$i184 = 0, $__size_$i2$i$i$i36 = 0, $__size_$i2$i$i$i64 = 0, $__size_$i2$i$i$i83 = 0, $arrayidx$i$i$i = 0, $arrayidx$i$i$i122 = 0, $arrayidx$i$i$i144 = 0, $arrayidx$i$i$i173 = 0;
 var $arrayidx$i$i$i195 = 0, $arrayidx$i$i$i47 = 0, $arrayidx$i$i$i73 = 0, $arrayidx$i$i$i94 = 0, $call$i = 0, $call$i100 = 0, $call$i101 = 0, $call$i150 = 0, $call$i153 = 0, $call$i201 = 0, $call$i53 = 0, $call$i56 = 0, $exitcond$i$i$i = 0, $exitcond$i$i$i120 = 0, $exitcond$i$i$i142 = 0, $exitcond$i$i$i171 = 0, $exitcond$i$i$i193 = 0, $exitcond$i$i$i45 = 0, $exitcond$i$i$i71 = 0, $exitcond$i$i$i92 = 0;
 var $inc$i$i$i = 0, $inc$i$i$i123 = 0, $inc$i$i$i145 = 0, $inc$i$i$i174 = 0, $inc$i$i$i196 = 0, $inc$i$i$i48 = 0, $inc$i$i$i74 = 0, $inc$i$i$i95 = 0, $ref$tmp = 0, $ref$tmp$i$i$i = 0, $ref$tmp$i$i$i106 = 0, $ref$tmp$i$i$i128 = 0, $ref$tmp$i$i$i156 = 0, $ref$tmp$i$i$i179 = 0, $ref$tmp$i$i$i31 = 0, $ref$tmp$i$i$i59 = 0, $ref$tmp$i$i$i78 = 0, $ref$tmp1 = 0, $ref$tmp14 = 0, $ref$tmp15 = 0;
 var $ref$tmp17 = 0, $ref$tmp21 = 0, $ref$tmp23 = 0, $ref$tmp3 = 0, $ref$tmp4$i$i$i = 0, $ref$tmp4$i$i$i107 = 0, $ref$tmp4$i$i$i129 = 0, $ref$tmp4$i$i$i157 = 0, $ref$tmp4$i$i$i180 = 0, $ref$tmp4$i$i$i32 = 0, $ref$tmp4$i$i$i60 = 0, $ref$tmp4$i$i$i79 = 0, $ref$tmp7 = 0, $ref$tmp9 = 0, $storemerge = 0, $tobool$i$i$i$i = 0, $tobool$i$i$i$i109 = 0, $tobool$i$i$i$i131 = 0, $tobool$i$i$i$i160 = 0, $tobool$i$i$i$i182 = 0;
 var $tobool$i$i$i$i34 = 0, $tobool$i$i$i$i62 = 0, $tobool$i$i$i$i81 = 0, $vfn$i = 0, $vfn$i103 = 0, $vfn$i105 = 0, $vfn$i127 = 0, $vfn$i149 = 0, $vfn$i152 = 0, $vfn$i155 = 0, $vfn$i178 = 0, $vfn$i200 = 0, $vfn$i28 = 0, $vfn$i30 = 0, $vfn$i52 = 0, $vfn$i55 = 0, $vfn$i58 = 0, $vfn$i77 = 0, $vfn$i99 = 0, $vtable$i = 0;
 var $vtable$i102 = 0, $vtable$i104 = 0, $vtable$i126 = 0, $vtable$i148 = 0, $vtable$i151 = 0, $vtable$i154 = 0, $vtable$i177 = 0, $vtable$i199 = 0, $vtable$i27 = 0, $vtable$i29 = 0, $vtable$i51 = 0, $vtable$i54 = 0, $vtable$i57 = 0, $vtable$i76 = 0, $vtable$i98 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 160|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(160|0);
 $ref$tmp$i$i$i179 = sp + 148|0;
 $ref$tmp4$i$i$i180 = sp + 144|0;
 $ref$tmp$i$i$i156 = sp + 155|0;
 $ref$tmp4$i$i$i157 = sp + 154|0;
 $ref$tmp$i$i$i128 = sp + 140|0;
 $ref$tmp4$i$i$i129 = sp + 136|0;
 $ref$tmp$i$i$i106 = sp + 132|0;
 $ref$tmp4$i$i$i107 = sp + 128|0;
 $ref$tmp$i$i$i78 = sp + 124|0;
 $ref$tmp4$i$i$i79 = sp + 120|0;
 $ref$tmp$i$i$i59 = sp + 153|0;
 $ref$tmp4$i$i$i60 = sp + 152|0;
 $ref$tmp$i$i$i31 = sp + 116|0;
 $ref$tmp4$i$i$i32 = sp + 112|0;
 $ref$tmp$i$i$i = sp + 108|0;
 $ref$tmp4$i$i$i = sp + 104|0;
 $ref$tmp = sp + 100|0;
 $ref$tmp1 = sp + 88|0;
 $ref$tmp3 = sp + 76|0;
 $ref$tmp7 = sp + 64|0;
 $ref$tmp9 = sp + 52|0;
 $ref$tmp14 = sp + 48|0;
 $ref$tmp15 = sp + 36|0;
 $ref$tmp17 = sp + 24|0;
 $ref$tmp21 = sp + 12|0;
 $ref$tmp23 = sp;
 if ($__intl) {
  $call$i = (__ZNKSt3__26locale9use_facetERNS0_2idE($__loc,21832)|0);
  $vtable$i = HEAP32[$call$i>>2]|0;
  $vfn$i = ((($vtable$i)) + 44|0);
  $0 = HEAP32[$vfn$i>>2]|0;
  FUNCTION_TABLE_vii[$0 & 1023]($ref$tmp,$call$i);
  $1 = HEAP32[$ref$tmp>>2]|0;
  HEAP8[$__pat>>0]=$1&255;HEAP8[$__pat+1>>0]=($1>>8)&255;HEAP8[$__pat+2>>0]=($1>>16)&255;HEAP8[$__pat+3>>0]=$1>>24;
  $vtable$i27 = HEAP32[$call$i>>2]|0;
  $vfn$i28 = ((($vtable$i27)) + 32|0);
  $2 = HEAP32[$vfn$i28>>2]|0;
  FUNCTION_TABLE_vii[$2 & 1023]($ref$tmp1,$call$i);
  $3 = ((($__nsn)) + 8|0);
  $__size_$i1$i$i$i = ((($3)) + 3|0);
  $4 = HEAP8[$__size_$i1$i$i$i>>0]|0;
  $tobool$i$i$i$i = ($4<<24>>24)<(0);
  if ($tobool$i$i$i$i) {
   $5 = HEAP32[$__nsn>>2]|0;
   HEAP32[$ref$tmp$i$i$i>>2] = 0;
   __ZNSt3__211char_traitsIwE6assignERwRKw($5,$ref$tmp$i$i$i);
   $__size_$i2$i$i$i = ((($__nsn)) + 4|0);
   HEAP32[$__size_$i2$i$i$i>>2] = 0;
  } else {
   HEAP32[$ref$tmp4$i$i$i>>2] = 0;
   __ZNSt3__211char_traitsIwE6assignERwRKw($__nsn,$ref$tmp4$i$i$i);
   HEAP8[$__size_$i1$i$i$i>>0] = 0;
  }
  __THREW__ = 0;
  invoke_vii(454,($__nsn|0),0);
  $6 = __THREW__; __THREW__ = 0;
  $7 = $6&1;
  if ($7) {
   $8 = ___cxa_find_matching_catch_3(0|0)|0;
   $9 = tempRet0;
   ___clang_call_terminate($8);
   // unreachable;
  }
  ;HEAP32[$__nsn>>2]=HEAP32[$ref$tmp1>>2]|0;HEAP32[$__nsn+4>>2]=HEAP32[$ref$tmp1+4>>2]|0;HEAP32[$__nsn+8>>2]=HEAP32[$ref$tmp1+8>>2]|0;
  $__i$0$i$i$i = 0;
  while(1) {
   $exitcond$i$i$i = ($__i$0$i$i$i|0)==(3);
   if ($exitcond$i$i$i) {
    break;
   }
   $arrayidx$i$i$i = (($ref$tmp1) + ($__i$0$i$i$i<<2)|0);
   HEAP32[$arrayidx$i$i$i>>2] = 0;
   $inc$i$i$i = (($__i$0$i$i$i) + 1)|0;
   $__i$0$i$i$i = $inc$i$i$i;
  }
  __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($ref$tmp1);
  $vtable$i29 = HEAP32[$call$i>>2]|0;
  $vfn$i30 = ((($vtable$i29)) + 28|0);
  $10 = HEAP32[$vfn$i30>>2]|0;
  FUNCTION_TABLE_vii[$10 & 1023]($ref$tmp3,$call$i);
  $11 = ((($__psn)) + 8|0);
  $__size_$i1$i$i$i33 = ((($11)) + 3|0);
  $12 = HEAP8[$__size_$i1$i$i$i33>>0]|0;
  $tobool$i$i$i$i34 = ($12<<24>>24)<(0);
  if ($tobool$i$i$i$i34) {
   $13 = HEAP32[$__psn>>2]|0;
   HEAP32[$ref$tmp$i$i$i31>>2] = 0;
   __ZNSt3__211char_traitsIwE6assignERwRKw($13,$ref$tmp$i$i$i31);
   $__size_$i2$i$i$i36 = ((($__psn)) + 4|0);
   HEAP32[$__size_$i2$i$i$i36>>2] = 0;
  } else {
   HEAP32[$ref$tmp4$i$i$i32>>2] = 0;
   __ZNSt3__211char_traitsIwE6assignERwRKw($__psn,$ref$tmp4$i$i$i32);
   HEAP8[$__size_$i1$i$i$i33>>0] = 0;
  }
  __THREW__ = 0;
  invoke_vii(454,($__psn|0),0);
  $14 = __THREW__; __THREW__ = 0;
  $15 = $14&1;
  if ($15) {
   $16 = ___cxa_find_matching_catch_3(0|0)|0;
   $17 = tempRet0;
   ___clang_call_terminate($16);
   // unreachable;
  }
  ;HEAP32[$__psn>>2]=HEAP32[$ref$tmp3>>2]|0;HEAP32[$__psn+4>>2]=HEAP32[$ref$tmp3+4>>2]|0;HEAP32[$__psn+8>>2]=HEAP32[$ref$tmp3+8>>2]|0;
  $__i$0$i$i$i44 = 0;
  while(1) {
   $exitcond$i$i$i45 = ($__i$0$i$i$i44|0)==(3);
   if ($exitcond$i$i$i45) {
    break;
   }
   $arrayidx$i$i$i47 = (($ref$tmp3) + ($__i$0$i$i$i44<<2)|0);
   HEAP32[$arrayidx$i$i$i47>>2] = 0;
   $inc$i$i$i48 = (($__i$0$i$i$i44) + 1)|0;
   $__i$0$i$i$i44 = $inc$i$i$i48;
  }
  __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($ref$tmp3);
  $vtable$i51 = HEAP32[$call$i>>2]|0;
  $vfn$i52 = ((($vtable$i51)) + 12|0);
  $18 = HEAP32[$vfn$i52>>2]|0;
  $call$i53 = (FUNCTION_TABLE_ii[$18 & 1023]($call$i)|0);
  HEAP32[$__dp>>2] = $call$i53;
  $vtable$i54 = HEAP32[$call$i>>2]|0;
  $vfn$i55 = ((($vtable$i54)) + 16|0);
  $19 = HEAP32[$vfn$i55>>2]|0;
  $call$i56 = (FUNCTION_TABLE_ii[$19 & 1023]($call$i)|0);
  HEAP32[$__ts>>2] = $call$i56;
  $vtable$i57 = HEAP32[$call$i>>2]|0;
  $vfn$i58 = ((($vtable$i57)) + 20|0);
  $20 = HEAP32[$vfn$i58>>2]|0;
  FUNCTION_TABLE_vii[$20 & 1023]($ref$tmp7,$call$i);
  $__size_$i1$i$i$i61 = ((($__grp)) + 11|0);
  $21 = HEAP8[$__size_$i1$i$i$i61>>0]|0;
  $tobool$i$i$i$i62 = ($21<<24>>24)<(0);
  if ($tobool$i$i$i$i62) {
   $22 = HEAP32[$__grp>>2]|0;
   HEAP8[$ref$tmp$i$i$i59>>0] = 0;
   __ZNSt3__211char_traitsIcE6assignERcRKc($22,$ref$tmp$i$i$i59);
   $__size_$i2$i$i$i64 = ((($__grp)) + 4|0);
   HEAP32[$__size_$i2$i$i$i64>>2] = 0;
  } else {
   HEAP8[$ref$tmp4$i$i$i60>>0] = 0;
   __ZNSt3__211char_traitsIcE6assignERcRKc($__grp,$ref$tmp4$i$i$i60);
   HEAP8[$__size_$i1$i$i$i61>>0] = 0;
  }
  __THREW__ = 0;
  invoke_vii(448,($__grp|0),0);
  $23 = __THREW__; __THREW__ = 0;
  $24 = $23&1;
  if ($24) {
   $25 = ___cxa_find_matching_catch_3(0|0)|0;
   $26 = tempRet0;
   ___clang_call_terminate($25);
   // unreachable;
  }
  ;HEAP32[$__grp>>2]=HEAP32[$ref$tmp7>>2]|0;HEAP32[$__grp+4>>2]=HEAP32[$ref$tmp7+4>>2]|0;HEAP32[$__grp+8>>2]=HEAP32[$ref$tmp7+8>>2]|0;
  $__i$0$i$i$i70 = 0;
  while(1) {
   $exitcond$i$i$i71 = ($__i$0$i$i$i70|0)==(3);
   if ($exitcond$i$i$i71) {
    break;
   }
   $arrayidx$i$i$i73 = (($ref$tmp7) + ($__i$0$i$i$i70<<2)|0);
   HEAP32[$arrayidx$i$i$i73>>2] = 0;
   $inc$i$i$i74 = (($__i$0$i$i$i70) + 1)|0;
   $__i$0$i$i$i70 = $inc$i$i$i74;
  }
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($ref$tmp7);
  $vtable$i76 = HEAP32[$call$i>>2]|0;
  $vfn$i77 = ((($vtable$i76)) + 24|0);
  $27 = HEAP32[$vfn$i77>>2]|0;
  FUNCTION_TABLE_vii[$27 & 1023]($ref$tmp9,$call$i);
  $28 = ((($__sym)) + 8|0);
  $__size_$i1$i$i$i80 = ((($28)) + 3|0);
  $29 = HEAP8[$__size_$i1$i$i$i80>>0]|0;
  $tobool$i$i$i$i81 = ($29<<24>>24)<(0);
  if ($tobool$i$i$i$i81) {
   $30 = HEAP32[$__sym>>2]|0;
   HEAP32[$ref$tmp$i$i$i78>>2] = 0;
   __ZNSt3__211char_traitsIwE6assignERwRKw($30,$ref$tmp$i$i$i78);
   $__size_$i2$i$i$i83 = ((($__sym)) + 4|0);
   HEAP32[$__size_$i2$i$i$i83>>2] = 0;
  } else {
   HEAP32[$ref$tmp4$i$i$i79>>2] = 0;
   __ZNSt3__211char_traitsIwE6assignERwRKw($__sym,$ref$tmp4$i$i$i79);
   HEAP8[$__size_$i1$i$i$i80>>0] = 0;
  }
  __THREW__ = 0;
  invoke_vii(454,($__sym|0),0);
  $31 = __THREW__; __THREW__ = 0;
  $32 = $31&1;
  if ($32) {
   $33 = ___cxa_find_matching_catch_3(0|0)|0;
   $34 = tempRet0;
   ___clang_call_terminate($33);
   // unreachable;
  }
  ;HEAP32[$__sym>>2]=HEAP32[$ref$tmp9>>2]|0;HEAP32[$__sym+4>>2]=HEAP32[$ref$tmp9+4>>2]|0;HEAP32[$__sym+8>>2]=HEAP32[$ref$tmp9+8>>2]|0;
  $__i$0$i$i$i91 = 0;
  while(1) {
   $exitcond$i$i$i92 = ($__i$0$i$i$i91|0)==(3);
   if ($exitcond$i$i$i92) {
    break;
   }
   $arrayidx$i$i$i94 = (($ref$tmp9) + ($__i$0$i$i$i91<<2)|0);
   HEAP32[$arrayidx$i$i$i94>>2] = 0;
   $inc$i$i$i95 = (($__i$0$i$i$i91) + 1)|0;
   $__i$0$i$i$i91 = $inc$i$i$i95;
  }
  __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($ref$tmp9);
  $vtable$i98 = HEAP32[$call$i>>2]|0;
  $vfn$i99 = ((($vtable$i98)) + 36|0);
  $35 = HEAP32[$vfn$i99>>2]|0;
  $call$i100 = (FUNCTION_TABLE_ii[$35 & 1023]($call$i)|0);
  $storemerge = $call$i100;
 } else {
  $call$i101 = (__ZNKSt3__26locale9use_facetERNS0_2idE($__loc,21824)|0);
  $vtable$i102 = HEAP32[$call$i101>>2]|0;
  $vfn$i103 = ((($vtable$i102)) + 44|0);
  $36 = HEAP32[$vfn$i103>>2]|0;
  FUNCTION_TABLE_vii[$36 & 1023]($ref$tmp14,$call$i101);
  $37 = HEAP32[$ref$tmp14>>2]|0;
  HEAP8[$__pat>>0]=$37&255;HEAP8[$__pat+1>>0]=($37>>8)&255;HEAP8[$__pat+2>>0]=($37>>16)&255;HEAP8[$__pat+3>>0]=$37>>24;
  $vtable$i104 = HEAP32[$call$i101>>2]|0;
  $vfn$i105 = ((($vtable$i104)) + 32|0);
  $38 = HEAP32[$vfn$i105>>2]|0;
  FUNCTION_TABLE_vii[$38 & 1023]($ref$tmp15,$call$i101);
  $39 = ((($__nsn)) + 8|0);
  $__size_$i1$i$i$i108 = ((($39)) + 3|0);
  $40 = HEAP8[$__size_$i1$i$i$i108>>0]|0;
  $tobool$i$i$i$i109 = ($40<<24>>24)<(0);
  if ($tobool$i$i$i$i109) {
   $41 = HEAP32[$__nsn>>2]|0;
   HEAP32[$ref$tmp$i$i$i106>>2] = 0;
   __ZNSt3__211char_traitsIwE6assignERwRKw($41,$ref$tmp$i$i$i106);
   $__size_$i2$i$i$i111 = ((($__nsn)) + 4|0);
   HEAP32[$__size_$i2$i$i$i111>>2] = 0;
  } else {
   HEAP32[$ref$tmp4$i$i$i107>>2] = 0;
   __ZNSt3__211char_traitsIwE6assignERwRKw($__nsn,$ref$tmp4$i$i$i107);
   HEAP8[$__size_$i1$i$i$i108>>0] = 0;
  }
  __THREW__ = 0;
  invoke_vii(454,($__nsn|0),0);
  $42 = __THREW__; __THREW__ = 0;
  $43 = $42&1;
  if ($43) {
   $44 = ___cxa_find_matching_catch_3(0|0)|0;
   $45 = tempRet0;
   ___clang_call_terminate($44);
   // unreachable;
  }
  ;HEAP32[$__nsn>>2]=HEAP32[$ref$tmp15>>2]|0;HEAP32[$__nsn+4>>2]=HEAP32[$ref$tmp15+4>>2]|0;HEAP32[$__nsn+8>>2]=HEAP32[$ref$tmp15+8>>2]|0;
  $__i$0$i$i$i119 = 0;
  while(1) {
   $exitcond$i$i$i120 = ($__i$0$i$i$i119|0)==(3);
   if ($exitcond$i$i$i120) {
    break;
   }
   $arrayidx$i$i$i122 = (($ref$tmp15) + ($__i$0$i$i$i119<<2)|0);
   HEAP32[$arrayidx$i$i$i122>>2] = 0;
   $inc$i$i$i123 = (($__i$0$i$i$i119) + 1)|0;
   $__i$0$i$i$i119 = $inc$i$i$i123;
  }
  __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($ref$tmp15);
  $vtable$i126 = HEAP32[$call$i101>>2]|0;
  $vfn$i127 = ((($vtable$i126)) + 28|0);
  $46 = HEAP32[$vfn$i127>>2]|0;
  FUNCTION_TABLE_vii[$46 & 1023]($ref$tmp17,$call$i101);
  $47 = ((($__psn)) + 8|0);
  $__size_$i1$i$i$i130 = ((($47)) + 3|0);
  $48 = HEAP8[$__size_$i1$i$i$i130>>0]|0;
  $tobool$i$i$i$i131 = ($48<<24>>24)<(0);
  if ($tobool$i$i$i$i131) {
   $49 = HEAP32[$__psn>>2]|0;
   HEAP32[$ref$tmp$i$i$i128>>2] = 0;
   __ZNSt3__211char_traitsIwE6assignERwRKw($49,$ref$tmp$i$i$i128);
   $__size_$i2$i$i$i133 = ((($__psn)) + 4|0);
   HEAP32[$__size_$i2$i$i$i133>>2] = 0;
  } else {
   HEAP32[$ref$tmp4$i$i$i129>>2] = 0;
   __ZNSt3__211char_traitsIwE6assignERwRKw($__psn,$ref$tmp4$i$i$i129);
   HEAP8[$__size_$i1$i$i$i130>>0] = 0;
  }
  __THREW__ = 0;
  invoke_vii(454,($__psn|0),0);
  $50 = __THREW__; __THREW__ = 0;
  $51 = $50&1;
  if ($51) {
   $52 = ___cxa_find_matching_catch_3(0|0)|0;
   $53 = tempRet0;
   ___clang_call_terminate($52);
   // unreachable;
  }
  ;HEAP32[$__psn>>2]=HEAP32[$ref$tmp17>>2]|0;HEAP32[$__psn+4>>2]=HEAP32[$ref$tmp17+4>>2]|0;HEAP32[$__psn+8>>2]=HEAP32[$ref$tmp17+8>>2]|0;
  $__i$0$i$i$i141 = 0;
  while(1) {
   $exitcond$i$i$i142 = ($__i$0$i$i$i141|0)==(3);
   if ($exitcond$i$i$i142) {
    break;
   }
   $arrayidx$i$i$i144 = (($ref$tmp17) + ($__i$0$i$i$i141<<2)|0);
   HEAP32[$arrayidx$i$i$i144>>2] = 0;
   $inc$i$i$i145 = (($__i$0$i$i$i141) + 1)|0;
   $__i$0$i$i$i141 = $inc$i$i$i145;
  }
  __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($ref$tmp17);
  $vtable$i148 = HEAP32[$call$i101>>2]|0;
  $vfn$i149 = ((($vtable$i148)) + 12|0);
  $54 = HEAP32[$vfn$i149>>2]|0;
  $call$i150 = (FUNCTION_TABLE_ii[$54 & 1023]($call$i101)|0);
  HEAP32[$__dp>>2] = $call$i150;
  $vtable$i151 = HEAP32[$call$i101>>2]|0;
  $vfn$i152 = ((($vtable$i151)) + 16|0);
  $55 = HEAP32[$vfn$i152>>2]|0;
  $call$i153 = (FUNCTION_TABLE_ii[$55 & 1023]($call$i101)|0);
  HEAP32[$__ts>>2] = $call$i153;
  $vtable$i154 = HEAP32[$call$i101>>2]|0;
  $vfn$i155 = ((($vtable$i154)) + 20|0);
  $56 = HEAP32[$vfn$i155>>2]|0;
  FUNCTION_TABLE_vii[$56 & 1023]($ref$tmp21,$call$i101);
  $__size_$i1$i$i$i159 = ((($__grp)) + 11|0);
  $57 = HEAP8[$__size_$i1$i$i$i159>>0]|0;
  $tobool$i$i$i$i160 = ($57<<24>>24)<(0);
  if ($tobool$i$i$i$i160) {
   $58 = HEAP32[$__grp>>2]|0;
   HEAP8[$ref$tmp$i$i$i156>>0] = 0;
   __ZNSt3__211char_traitsIcE6assignERcRKc($58,$ref$tmp$i$i$i156);
   $__size_$i2$i$i$i162 = ((($__grp)) + 4|0);
   HEAP32[$__size_$i2$i$i$i162>>2] = 0;
  } else {
   HEAP8[$ref$tmp4$i$i$i157>>0] = 0;
   __ZNSt3__211char_traitsIcE6assignERcRKc($__grp,$ref$tmp4$i$i$i157);
   HEAP8[$__size_$i1$i$i$i159>>0] = 0;
  }
  __THREW__ = 0;
  invoke_vii(448,($__grp|0),0);
  $59 = __THREW__; __THREW__ = 0;
  $60 = $59&1;
  if ($60) {
   $61 = ___cxa_find_matching_catch_3(0|0)|0;
   $62 = tempRet0;
   ___clang_call_terminate($61);
   // unreachable;
  }
  ;HEAP32[$__grp>>2]=HEAP32[$ref$tmp21>>2]|0;HEAP32[$__grp+4>>2]=HEAP32[$ref$tmp21+4>>2]|0;HEAP32[$__grp+8>>2]=HEAP32[$ref$tmp21+8>>2]|0;
  $__i$0$i$i$i170 = 0;
  while(1) {
   $exitcond$i$i$i171 = ($__i$0$i$i$i170|0)==(3);
   if ($exitcond$i$i$i171) {
    break;
   }
   $arrayidx$i$i$i173 = (($ref$tmp21) + ($__i$0$i$i$i170<<2)|0);
   HEAP32[$arrayidx$i$i$i173>>2] = 0;
   $inc$i$i$i174 = (($__i$0$i$i$i170) + 1)|0;
   $__i$0$i$i$i170 = $inc$i$i$i174;
  }
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($ref$tmp21);
  $vtable$i177 = HEAP32[$call$i101>>2]|0;
  $vfn$i178 = ((($vtable$i177)) + 24|0);
  $63 = HEAP32[$vfn$i178>>2]|0;
  FUNCTION_TABLE_vii[$63 & 1023]($ref$tmp23,$call$i101);
  $64 = ((($__sym)) + 8|0);
  $__size_$i1$i$i$i181 = ((($64)) + 3|0);
  $65 = HEAP8[$__size_$i1$i$i$i181>>0]|0;
  $tobool$i$i$i$i182 = ($65<<24>>24)<(0);
  if ($tobool$i$i$i$i182) {
   $66 = HEAP32[$__sym>>2]|0;
   HEAP32[$ref$tmp$i$i$i179>>2] = 0;
   __ZNSt3__211char_traitsIwE6assignERwRKw($66,$ref$tmp$i$i$i179);
   $__size_$i2$i$i$i184 = ((($__sym)) + 4|0);
   HEAP32[$__size_$i2$i$i$i184>>2] = 0;
  } else {
   HEAP32[$ref$tmp4$i$i$i180>>2] = 0;
   __ZNSt3__211char_traitsIwE6assignERwRKw($__sym,$ref$tmp4$i$i$i180);
   HEAP8[$__size_$i1$i$i$i181>>0] = 0;
  }
  __THREW__ = 0;
  invoke_vii(454,($__sym|0),0);
  $67 = __THREW__; __THREW__ = 0;
  $68 = $67&1;
  if ($68) {
   $69 = ___cxa_find_matching_catch_3(0|0)|0;
   $70 = tempRet0;
   ___clang_call_terminate($69);
   // unreachable;
  }
  ;HEAP32[$__sym>>2]=HEAP32[$ref$tmp23>>2]|0;HEAP32[$__sym+4>>2]=HEAP32[$ref$tmp23+4>>2]|0;HEAP32[$__sym+8>>2]=HEAP32[$ref$tmp23+8>>2]|0;
  $__i$0$i$i$i192 = 0;
  while(1) {
   $exitcond$i$i$i193 = ($__i$0$i$i$i192|0)==(3);
   if ($exitcond$i$i$i193) {
    break;
   }
   $arrayidx$i$i$i195 = (($ref$tmp23) + ($__i$0$i$i$i192<<2)|0);
   HEAP32[$arrayidx$i$i$i195>>2] = 0;
   $inc$i$i$i196 = (($__i$0$i$i$i192) + 1)|0;
   $__i$0$i$i$i192 = $inc$i$i$i196;
  }
  __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($ref$tmp23);
  $vtable$i199 = HEAP32[$call$i101>>2]|0;
  $vfn$i200 = ((($vtable$i199)) + 36|0);
  $71 = HEAP32[$vfn$i200>>2]|0;
  $call$i201 = (FUNCTION_TABLE_ii[$71 & 1023]($call$i101)|0);
  $storemerge = $call$i201;
 }
 HEAP32[$__fd>>2] = $storemerge;
 STACKTOP = sp;return;
}
function __ZNSt3__219__double_or_nothingIwEEvRNS_10unique_ptrIT_PFvPvEEERPS2_S9_($__b,$__n,$__e) {
 $__b = $__b|0;
 $__n = $__n|0;
 $__e = $__e|0;
 var $$cond = 0, $$pr = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__second_$i$i$i = 0, $add$ptr = 0, $add$ptr30 = 0, $call17 = 0;
 var $cmp = 0, $cmp18 = 0, $cmp3 = 0, $cmp6 = 0, $cond16 = 0, $div27 = 0, $mul4 = 0, $mul4$ = 0, $phitmp = 0, $sub$ptr$div11 = 0, $sub$ptr$sub = 0, $sub$ptr$sub10 = 0, $tobool$i$i23 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $__second_$i$i$i = ((($__b)) + 4|0);
 $0 = HEAP32[$__second_$i$i$i>>2]|0;
 $cmp = ($0|0)!=(441|0);
 $1 = HEAP32[$__e>>2]|0;
 $2 = HEAP32[$__b>>2]|0;
 $sub$ptr$sub = (($1) - ($2))|0;
 $cmp3 = ($sub$ptr$sub>>>0)<(2147483647);
 $mul4 = $sub$ptr$sub << 1;
 $mul4$ = $cmp3 ? $mul4 : -1;
 $cmp6 = ($mul4$|0)==(0);
 $$cond = $cmp6 ? 4 : $mul4$;
 $3 = HEAP32[$__n>>2]|0;
 $sub$ptr$sub10 = (($3) - ($2))|0;
 $sub$ptr$div11 = $sub$ptr$sub10 >> 2;
 $phitmp = $2;
 $cond16 = $cmp ? $phitmp : 0;
 $call17 = (_realloc($cond16,$$cond)|0);
 $cmp18 = ($call17|0)==(0|0);
 if ($cmp18) {
  __ZSt17__throw_bad_allocv();
 }
 do {
  if ($cmp) {
   $4 = $call17;
   HEAP32[$__b>>2] = $4;
   $11 = $call17;
  } else {
   $$pr = HEAP32[$__b>>2]|0;
   $5 = $call17;
   HEAP32[$__b>>2] = $5;
   $tobool$i$i23 = ($$pr|0)==(0|0);
   if ($tobool$i$i23) {
    $11 = $call17;
   } else {
    $6 = HEAP32[$__second_$i$i$i>>2]|0;
    __THREW__ = 0;
    invoke_vi($6|0,($$pr|0));
    $7 = __THREW__; __THREW__ = 0;
    $8 = $7&1;
    if ($8) {
     $9 = ___cxa_find_matching_catch_3(0|0)|0;
     $10 = tempRet0;
     ___clang_call_terminate($9);
     // unreachable;
    } else {
     $$pre = HEAP32[$__b>>2]|0;
     $11 = $$pre;
     break;
    }
   }
  }
 } while(0);
 HEAP32[$__second_$i$i$i>>2] = (355);
 $div27 = $$cond >>> 2;
 $add$ptr = (($11) + ($sub$ptr$div11<<2)|0);
 HEAP32[$__n>>2] = $add$ptr;
 $12 = HEAP32[$__b>>2]|0;
 $add$ptr30 = (($12) + ($div27<<2)|0);
 HEAP32[$__e>>2] = $add$ptr30;
 return;
}
function __ZNSt3__29money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__26locale5facetD2Ev($this);
 return;
}
function __ZNSt3__29money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__26locale5facetD2Ev($this);
 __ZdlPv($this);
 return;
}
function __ZNKSt3__29money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_bRNS_8ios_baseEce($this,$__s,$__intl,$__iob,$__fl,$__units) {
 $this = $this|0;
 $__s = $__s|0;
 $__intl = $__intl|0;
 $__iob = $__iob|0;
 $__fl = $__fl|0;
 $__units = +$__units;
 var $$pre = 0, $$pre153 = 0, $$sink = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $7 = 0, $8 = 0, $9 = 0, $__bb = 0, $__buf = 0, $__db$0 = 0, $__digits = 0, $__dp = 0, $__fd = 0, $__fmtflags_$i = 0, $__grp = 0, $__hd$sroa$0$0 = 0, $__hd$sroa$0$1 = 0, $__hd$sroa$0$2 = 0;
 var $__hn$sroa$0$0 = 0, $__hn$sroa$0$1 = 0, $__hn$sroa$0$2 = 0, $__hw$sroa$0$0 = 0, $__hw$sroa$0$1 = 0, $__i$0$i$i = 0, $__i$0$i$i48 = 0, $__i$0$i$i56 = 0, $__loc = 0, $__mb$0 = 0, $__mbuf = 0, $__me = 0, $__mi = 0, $__n$0 = 0, $__pat = 0, $__size_$i$i = 0, $__size_$i$i72 = 0, $__size_$i$i87 = 0, $__size_$i$i96 = 0, $__size_$i3$i = 0;
 var $__size_$i3$i74 = 0, $__size_$i3$i89 = 0, $__size_$i3$i98 = 0, $__sn = 0, $__sym = 0, $__ts = 0, $add = 0, $add$ptr = 0, $add$ptr60 = 0, $add42 = 0, $add43$sink = 0, $add44 = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $arrayidx$i$i = 0, $arrayidx$i$i51 = 0, $arrayidx$i$i59 = 0, $call = 0, $call$i39 = 0, $call11 = 0;
 var $call4 = 0, $call50 = 0, $call6 = 0, $call64 = 0, $cmp = 0, $cmp25 = 0, $cmp26 = 0, $cmp33 = 0, $cmp45 = 0, $cmp52 = 0, $cmp7 = 0, $cond$i = 0, $cond$i102 = 0, $cond$i102$sink = 0, $cond$i78 = 0, $cond$i93 = 0, $cond$i93$sink = 0, $conv$i$i = 0, $conv$i$i100 = 0, $conv$i$i76 = 0;
 var $conv$i$i91 = 0, $ehselector$slot$0 = 0, $ehselector$slot$1 = 0, $ehselector$slot$3 = 0, $ehselector$slot$4 = 0, $exitcond$i$i = 0, $exitcond$i$i49 = 0, $exitcond$i$i57 = 0, $exn$slot$0 = 0, $exn$slot$1 = 0, $exn$slot$3 = 0, $exn$slot$4 = 0, $inc$i$i = 0, $inc$i$i52 = 0, $inc$i$i60 = 0, $lnot$i = 0, $mul34 = 0, $sub = 0, $tobool$i$i = 0, $tobool$i$i105 = 0;
 var $tobool$i$i118 = 0, $tobool$i$i42 = 0, $tobool$i$i65 = 0, $tobool$i$i70 = 0, $tobool$i$i73 = 0, $tobool$i$i81 = 0, $tobool$i$i88 = 0, $tobool$i$i97 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vfn$i = 0, $vtable$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 400|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(400|0);
 $agg$tmp$byval_copy = sp + 76|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $__buf = sp + 288|0;
 $__bb = sp + 72|0;
 $__digits = sp + 188|0;
 $__loc = sp + 68|0;
 $__pat = sp + 184|0;
 $__dp = sp + 181|0;
 $__ts = sp + 180|0;
 $__grp = sp + 56|0;
 $__sym = sp + 44|0;
 $__sn = sp + 32|0;
 $__fd = sp + 28|0;
 $__mbuf = sp + 80|0;
 $__mi = sp + 24|0;
 $__me = sp + 20|0;
 $agg$tmp = sp + 16|0;
 HEAP32[$__bb>>2] = $__buf;
 HEAPF64[$vararg_buffer>>3] = $__units;
 $call = (_snprintf($__buf,100,17247,$vararg_buffer)|0);
 $cmp = ($call>>>0)>(99);
 do {
  if ($cmp) {
   __THREW__ = 0;
   $call4 = (invoke_i(392)|0);
   $0 = __THREW__; __THREW__ = 0;
   $1 = $0&1;
   if ($1) {
    $__hd$sroa$0$0 = 0;$__hn$sroa$0$0 = 0;
    label = 8;
   } else {
    __THREW__ = 0;
    HEAPF64[$vararg_buffer1>>3] = $__units;
    $call6 = (invoke_iiiii(414,($__bb|0),($call4|0),(17247|0),($vararg_buffer1|0))|0);
    $2 = __THREW__; __THREW__ = 0;
    $3 = $2&1;
    if ($3) {
     $__hd$sroa$0$0 = 0;$__hn$sroa$0$0 = 0;
     label = 8;
    } else {
     $4 = HEAP32[$__bb>>2]|0;
     $cmp7 = ($4|0)==(0|0);
     if ($cmp7) {
      __THREW__ = 0;
      invoke_v(409);
      $6 = __THREW__; __THREW__ = 0;
      $7 = $6&1;
      if ($7) {
       $__hd$sroa$0$0 = 0;$__hn$sroa$0$0 = 0;
       label = 8;
       break;
      }
      $$pre = HEAP32[$__bb>>2]|0;
      $65 = $$pre;
     } else {
      $5 = $4;
      $65 = $5;
     }
     $call11 = (_malloc($call6)|0);
     $10 = $call11;
     $lnot$i = ($call11|0)==(0|0);
     if ($lnot$i) {
      __THREW__ = 0;
      invoke_v(409);
      $11 = __THREW__; __THREW__ = 0;
      $12 = $11&1;
      if ($12) {
       $__hd$sroa$0$0 = $10;$__hn$sroa$0$0 = $65;
       label = 8;
      } else {
       $__db$0 = 0;$__hd$sroa$0$1 = $10;$__hn$sroa$0$1 = $65;$__n$0 = $call6;
       label = 11;
      }
     } else {
      $__db$0 = $call11;$__hd$sroa$0$1 = $10;$__hn$sroa$0$1 = $65;$__n$0 = $call6;
      label = 11;
     }
    }
   }
  } else {
   $__db$0 = $__digits;$__hd$sroa$0$1 = 0;$__hn$sroa$0$1 = 0;$__n$0 = $call;
   label = 11;
  }
 } while(0);
 if ((label|0) == 11) {
  __THREW__ = 0;
  invoke_vii(379,($__loc|0),($__iob|0));
  $13 = __THREW__; __THREW__ = 0;
  $14 = $13&1;
  if ($14) {
   $__hd$sroa$0$0 = $__hd$sroa$0$1;$__hn$sroa$0$0 = $__hn$sroa$0$1;
   label = 8;
  } else {
   __THREW__ = 0;
   $call$i39 = (invoke_iii(380,($__loc|0),(20096|0))|0);
   $15 = __THREW__; __THREW__ = 0;
   $16 = $15&1;
   do {
    if ($16) {
     $38 = ___cxa_find_matching_catch_2()|0;
     $39 = tempRet0;
     $ehselector$slot$3 = $39;$exn$slot$3 = $38;
    } else {
     $17 = HEAP32[$__bb>>2]|0;
     $add$ptr = (($17) + ($__n$0)|0);
     $vtable$i = HEAP32[$call$i39>>2]|0;
     $vfn$i = ((($vtable$i)) + 32|0);
     $18 = HEAP32[$vfn$i>>2]|0;
     __THREW__ = 0;
     (invoke_iiiii($18|0,($call$i39|0),($17|0),($add$ptr|0),($__db$0|0))|0);
     $19 = __THREW__; __THREW__ = 0;
     $20 = $19&1;
     if ($20) {
      $40 = ___cxa_find_matching_catch_2()|0;
      $41 = tempRet0;
      $ehselector$slot$3 = $41;$exn$slot$3 = $40;
      break;
     }
     $cmp25 = ($__n$0|0)==(0);
     if ($cmp25) {
      $23 = 0;
     } else {
      $21 = HEAP32[$__bb>>2]|0;
      $22 = HEAP8[$21>>0]|0;
      $cmp26 = ($22<<24>>24)==(45);
      $23 = $cmp26;
     }
     ;HEAP32[$__grp>>2]=0|0;HEAP32[$__grp+4>>2]=0|0;HEAP32[$__grp+8>>2]=0|0;
     $__i$0$i$i = 0;
     while(1) {
      $exitcond$i$i = ($__i$0$i$i|0)==(3);
      if ($exitcond$i$i) {
       break;
      }
      $arrayidx$i$i = (($__grp) + ($__i$0$i$i<<2)|0);
      HEAP32[$arrayidx$i$i>>2] = 0;
      $inc$i$i = (($__i$0$i$i) + 1)|0;
      $__i$0$i$i = $inc$i$i;
     }
     ;HEAP32[$__sym>>2]=0|0;HEAP32[$__sym+4>>2]=0|0;HEAP32[$__sym+8>>2]=0|0;
     $__i$0$i$i48 = 0;
     while(1) {
      $exitcond$i$i49 = ($__i$0$i$i48|0)==(3);
      if ($exitcond$i$i49) {
       break;
      }
      $arrayidx$i$i51 = (($__sym) + ($__i$0$i$i48<<2)|0);
      HEAP32[$arrayidx$i$i51>>2] = 0;
      $inc$i$i52 = (($__i$0$i$i48) + 1)|0;
      $__i$0$i$i48 = $inc$i$i52;
     }
     ;HEAP32[$__sn>>2]=0|0;HEAP32[$__sn+4>>2]=0|0;HEAP32[$__sn+8>>2]=0|0;
     $__i$0$i$i56 = 0;
     while(1) {
      $exitcond$i$i57 = ($__i$0$i$i56|0)==(3);
      if ($exitcond$i$i57) {
       break;
      }
      $arrayidx$i$i59 = (($__sn) + ($__i$0$i$i56<<2)|0);
      HEAP32[$arrayidx$i$i59>>2] = 0;
      $inc$i$i60 = (($__i$0$i$i56) + 1)|0;
      $__i$0$i$i56 = $inc$i$i60;
     }
     __THREW__ = 0;
     invoke_viiiiiiiiii(455,($__intl|0),($23|0),($__loc|0),($__pat|0),($__dp|0),($__ts|0),($__grp|0),($__sym|0),($__sn|0),($__fd|0));
     $24 = __THREW__; __THREW__ = 0;
     $25 = $24&1;
     if ($25) {
      $42 = ___cxa_find_matching_catch_2()|0;
      $43 = tempRet0;
      $ehselector$slot$1 = $43;$exn$slot$1 = $42;
     } else {
      $26 = HEAP32[$__fd>>2]|0;
      $cmp33 = ($__n$0|0)>($26|0);
      if ($cmp33) {
       $sub = (($__n$0) - ($26))|0;
       $mul34 = $sub << 1;
       $__size_$i$i = ((($__sn)) + 11|0);
       $27 = HEAP8[$__size_$i$i>>0]|0;
       $tobool$i$i70 = ($27<<24>>24)<(0);
       $__size_$i3$i = ((($__sn)) + 4|0);
       $28 = HEAP32[$__size_$i3$i>>2]|0;
       $conv$i$i = $27&255;
       $cond$i = $tobool$i$i70 ? $28 : $conv$i$i;
       $add = (($cond$i) + ($mul34))|0;
       $__size_$i$i72 = ((($__sym)) + 11|0);
       $29 = HEAP8[$__size_$i$i72>>0]|0;
       $tobool$i$i73 = ($29<<24>>24)<(0);
       $__size_$i3$i74 = ((($__sym)) + 4|0);
       $30 = HEAP32[$__size_$i3$i74>>2]|0;
       $conv$i$i76 = $29&255;
       $cond$i78 = $tobool$i$i73 ? $30 : $conv$i$i76;
       $$sink = 1;$cond$i102$sink = $add;$cond$i93$sink = $cond$i78;
      } else {
       $__size_$i$i87 = ((($__sn)) + 11|0);
       $31 = HEAP8[$__size_$i$i87>>0]|0;
       $tobool$i$i88 = ($31<<24>>24)<(0);
       $__size_$i3$i89 = ((($__sn)) + 4|0);
       $32 = HEAP32[$__size_$i3$i89>>2]|0;
       $conv$i$i91 = $31&255;
       $cond$i93 = $tobool$i$i88 ? $32 : $conv$i$i91;
       $__size_$i$i96 = ((($__sym)) + 11|0);
       $33 = HEAP8[$__size_$i$i96>>0]|0;
       $tobool$i$i97 = ($33<<24>>24)<(0);
       $__size_$i3$i98 = ((($__sym)) + 4|0);
       $34 = HEAP32[$__size_$i3$i98>>2]|0;
       $conv$i$i100 = $33&255;
       $cond$i102 = $tobool$i$i97 ? $34 : $conv$i$i100;
       $$sink = 2;$cond$i102$sink = $cond$i102;$cond$i93$sink = $cond$i93;
      }
      $add42 = (($cond$i93$sink) + ($26))|0;
      $add43$sink = (($add42) + ($cond$i102$sink))|0;
      $add44 = (($add43$sink) + ($$sink))|0;
      $cmp45 = ($add44>>>0)>(100);
      do {
       if ($cmp45) {
        $call50 = (_malloc($add44)|0);
        $35 = $call50;
        $cmp52 = ($call50|0)==(0|0);
        if ($cmp52) {
         __THREW__ = 0;
         invoke_v(409);
         $36 = __THREW__; __THREW__ = 0;
         $37 = $36&1;
         if ($37) {
          $44 = ___cxa_find_matching_catch_2()|0;
          $45 = tempRet0;
          $__hw$sroa$0$1 = $35;$ehselector$slot$0 = $45;$exn$slot$0 = $44;
          break;
         } else {
          $$pre153 = HEAP32[$__fd>>2]|0;
          $49 = $$pre153;$__hw$sroa$0$0 = $35;$__mb$0 = 0;
          label = 37;
          break;
         }
        } else {
         $49 = $26;$__hw$sroa$0$0 = $35;$__mb$0 = $call50;
         label = 37;
        }
       } else {
        $49 = $26;$__hw$sroa$0$0 = 0;$__mb$0 = $__mbuf;
        label = 37;
       }
      } while(0);
      if ((label|0) == 37) {
       $__fmtflags_$i = ((($__iob)) + 4|0);
       $46 = HEAP32[$__fmtflags_$i>>2]|0;
       $add$ptr60 = (($__db$0) + ($__n$0)|0);
       $47 = HEAP8[$__dp>>0]|0;
       $48 = HEAP8[$__ts>>0]|0;
       __THREW__ = 0;
       invoke_viiiiiiiiiiiiiii(456,($__mb$0|0),($__mi|0),($__me|0),($46|0),($__db$0|0),($add$ptr60|0),($call$i39|0),($23|0),($__pat|0),($47|0),($48|0),($__grp|0),($__sym|0),($__sn|0),($49|0));
       $50 = __THREW__; __THREW__ = 0;
       $51 = $50&1;
       if (!($51)) {
        $52 = HEAP32[$__s>>2]|0;
        HEAP32[$agg$tmp>>2] = $52;
        $53 = HEAP32[$__mi>>2]|0;
        $54 = HEAP32[$__me>>2]|0;
        __THREW__ = 0;
        ;HEAP32[$agg$tmp$byval_copy>>2]=HEAP32[$agg$tmp>>2]|0;
        $call64 = (invoke_iiiiiii(381,($agg$tmp$byval_copy|0),($__mb$0|0),($53|0),($54|0),($__iob|0),($__fl|0))|0);
        $55 = __THREW__; __THREW__ = 0;
        $56 = $55&1;
        if (!($56)) {
         $tobool$i$i118 = ($__hw$sroa$0$0|0)==(0);
         if (!($tobool$i$i118)) {
          $57 = $__hw$sroa$0$0;
          _free($57);
         }
         __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__sn);
         __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__sym);
         __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grp);
         __ZNSt3__26localeD2Ev($__loc);
         $tobool$i$i105 = ($__hd$sroa$0$1|0)==(0);
         if (!($tobool$i$i105)) {
          $58 = $__hd$sroa$0$1;
          _free($58);
         }
         $tobool$i$i81 = ($__hn$sroa$0$1|0)==(0);
         if (!($tobool$i$i81)) {
          $59 = $__hn$sroa$0$1;
          _free($59);
         }
         STACKTOP = sp;return ($call64|0);
        }
       }
       $60 = ___cxa_find_matching_catch_2()|0;
       $61 = tempRet0;
       $__hw$sroa$0$1 = $__hw$sroa$0$0;$ehselector$slot$0 = $61;$exn$slot$0 = $60;
      }
      $tobool$i$i65 = ($__hw$sroa$0$1|0)==(0);
      if (!($tobool$i$i65)) {
       $62 = $__hw$sroa$0$1;
       _free($62);
      }
      $ehselector$slot$1 = $ehselector$slot$0;$exn$slot$1 = $exn$slot$0;
     }
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__sn);
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__sym);
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grp);
     $ehselector$slot$3 = $ehselector$slot$1;$exn$slot$3 = $exn$slot$1;
    }
   } while(0);
   __ZNSt3__26localeD2Ev($__loc);
   $__hd$sroa$0$2 = $__hd$sroa$0$1;$__hn$sroa$0$2 = $__hn$sroa$0$1;$ehselector$slot$4 = $ehselector$slot$3;$exn$slot$4 = $exn$slot$3;
  }
 }
 if ((label|0) == 8) {
  $8 = ___cxa_find_matching_catch_2()|0;
  $9 = tempRet0;
  $__hd$sroa$0$2 = $__hd$sroa$0$0;$__hn$sroa$0$2 = $__hn$sroa$0$0;$ehselector$slot$4 = $9;$exn$slot$4 = $8;
 }
 $tobool$i$i42 = ($__hd$sroa$0$2|0)==(0);
 if (!($tobool$i$i42)) {
  $63 = $__hd$sroa$0$2;
  _free($63);
 }
 $tobool$i$i = ($__hn$sroa$0$2|0)==(0);
 if (!($tobool$i$i)) {
  $64 = $__hn$sroa$0$2;
  _free($64);
 }
 ___resumeException($exn$slot$4|0);
 // unreachable;
 return (0)|0;
}
function __ZNKSt3__29money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_bRNS_8ios_baseEcRKNS_12basic_stringIcS3_NS_9allocatorIcEEEE($this,$__s,$__intl,$__iob,$__fl,$__digits) {
 $this = $this|0;
 $__s = $__s|0;
 $__intl = $__intl|0;
 $__iob = $__iob|0;
 $__fl = $__fl|0;
 $__digits = $__digits|0;
 var $$pre = 0, $$pre129 = 0, $$pre130 = 0, $$sink = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__dp = 0, $__fd = 0, $__fmtflags_$i = 0, $__grp = 0;
 var $__h$sroa$0$0 = 0, $__h$sroa$0$1 = 0, $__i$0$i$i = 0, $__i$0$i$i24 = 0, $__i$0$i$i32 = 0, $__loc = 0, $__mb$0 = 0, $__mbuf = 0, $__me = 0, $__mi = 0, $__pat = 0, $__size_$i$i = 0, $__size_$i$i102 = 0, $__size_$i$i111 = 0, $__size_$i$i64 = 0, $__size_$i$i93 = 0, $__size_$i3$i = 0, $__size_$i3$i104 = 0, $__size_$i3$i113 = 0, $__size_$i3$i66 = 0;
 var $__size_$i3$i95 = 0, $__sn = 0, $__sym = 0, $__ts = 0, $add = 0, $add$ptr = 0, $add24 = 0, $add25$sink = 0, $add26 = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $arrayidx$i$i = 0, $arrayidx$i$i27 = 0, $arrayidx$i$i35 = 0, $call$i20 = 0, $call$i22 = 0, $call31 = 0, $call46 = 0, $cmp = 0, $cmp15 = 0;
 var $cmp27 = 0, $cmp33 = 0, $cmp9 = 0, $cond$i = 0, $cond$i$i$i = 0, $cond$i$i88 = 0, $cond$i108 = 0, $cond$i108$sink = 0, $cond$i117 = 0, $cond$i117$sink = 0, $cond$i52 = 0, $cond$i70 = 0, $cond$i79 = 0, $cond$i99 = 0, $conv$i$i = 0, $conv$i$i106 = 0, $conv$i$i115 = 0, $conv$i$i50 = 0, $conv$i$i68 = 0, $conv$i$i77 = 0;
 var $conv$i$i97 = 0, $ehselector$slot$0 = 0, $ehselector$slot$1 = 0, $ehselector$slot$3 = 0, $exitcond$i$i = 0, $exitcond$i$i25 = 0, $exitcond$i$i33 = 0, $exn$slot$0 = 0, $exn$slot$1 = 0, $exn$slot$3 = 0, $inc$i$i = 0, $inc$i$i28 = 0, $inc$i$i36 = 0, $mul = 0, $sub = 0, $tobool$i$i = 0, $tobool$i$i$i83 = 0, $tobool$i$i103 = 0, $tobool$i$i112 = 0, $tobool$i$i21 = 0;
 var $tobool$i$i40 = 0, $tobool$i$i47 = 0, $tobool$i$i65 = 0, $tobool$i$i94 = 0, $vfn$i = 0, $vtable$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 176|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(176|0);
 $agg$tmp$byval_copy = sp + 56|0;
 $__loc = sp + 52|0;
 $__pat = sp + 164|0;
 $__dp = sp + 161|0;
 $__ts = sp + 160|0;
 $__grp = sp + 40|0;
 $__sym = sp + 28|0;
 $__sn = sp + 16|0;
 $__fd = sp + 12|0;
 $__mbuf = sp + 60|0;
 $__mi = sp + 8|0;
 $__me = sp + 4|0;
 $agg$tmp = sp;
 __ZNKSt3__28ios_base6getlocEv($__loc,$__iob);
 __THREW__ = 0;
 $call$i20 = (invoke_iii(380,($__loc|0),(20096|0))|0);
 $0 = __THREW__; __THREW__ = 0;
 $1 = $0&1;
 L1: do {
  if ($1) {
   $26 = ___cxa_find_matching_catch_2()|0;
   $27 = tempRet0;
   $ehselector$slot$3 = $27;$exn$slot$3 = $26;
  } else {
   $__size_$i$i = ((($__digits)) + 11|0);
   $2 = HEAP8[$__size_$i$i>>0]|0;
   $tobool$i$i = ($2<<24>>24)<(0);
   $__size_$i3$i = ((($__digits)) + 4|0);
   $3 = HEAP32[$__size_$i3$i>>2]|0;
   $conv$i$i = $2&255;
   $cond$i = $tobool$i$i ? $3 : $conv$i$i;
   $cmp = ($cond$i|0)==(0);
   do {
    if ($cmp) {
     $9 = 0;
    } else {
     $4 = HEAP32[$__digits>>2]|0;
     $cond$i$i$i = $tobool$i$i ? $4 : $__digits;
     $5 = HEAP8[$cond$i$i$i>>0]|0;
     $vtable$i = HEAP32[$call$i20>>2]|0;
     $vfn$i = ((($vtable$i)) + 28|0);
     $6 = HEAP32[$vfn$i>>2]|0;
     __THREW__ = 0;
     $call$i22 = (invoke_iii($6|0,($call$i20|0),45)|0);
     $7 = __THREW__; __THREW__ = 0;
     $8 = $7&1;
     if ($8) {
      $28 = ___cxa_find_matching_catch_2()|0;
      $29 = tempRet0;
      $ehselector$slot$3 = $29;$exn$slot$3 = $28;
      break L1;
     } else {
      $cmp9 = ($5<<24>>24)==($call$i22<<24>>24);
      $9 = $cmp9;
      break;
     }
    }
   } while(0);
   ;HEAP32[$__grp>>2]=0|0;HEAP32[$__grp+4>>2]=0|0;HEAP32[$__grp+8>>2]=0|0;
   $__i$0$i$i = 0;
   while(1) {
    $exitcond$i$i = ($__i$0$i$i|0)==(3);
    if ($exitcond$i$i) {
     break;
    }
    $arrayidx$i$i = (($__grp) + ($__i$0$i$i<<2)|0);
    HEAP32[$arrayidx$i$i>>2] = 0;
    $inc$i$i = (($__i$0$i$i) + 1)|0;
    $__i$0$i$i = $inc$i$i;
   }
   ;HEAP32[$__sym>>2]=0|0;HEAP32[$__sym+4>>2]=0|0;HEAP32[$__sym+8>>2]=0|0;
   $__i$0$i$i24 = 0;
   while(1) {
    $exitcond$i$i25 = ($__i$0$i$i24|0)==(3);
    if ($exitcond$i$i25) {
     break;
    }
    $arrayidx$i$i27 = (($__sym) + ($__i$0$i$i24<<2)|0);
    HEAP32[$arrayidx$i$i27>>2] = 0;
    $inc$i$i28 = (($__i$0$i$i24) + 1)|0;
    $__i$0$i$i24 = $inc$i$i28;
   }
   ;HEAP32[$__sn>>2]=0|0;HEAP32[$__sn+4>>2]=0|0;HEAP32[$__sn+8>>2]=0|0;
   $__i$0$i$i32 = 0;
   while(1) {
    $exitcond$i$i33 = ($__i$0$i$i32|0)==(3);
    if ($exitcond$i$i33) {
     break;
    }
    $arrayidx$i$i35 = (($__sn) + ($__i$0$i$i32<<2)|0);
    HEAP32[$arrayidx$i$i35>>2] = 0;
    $inc$i$i36 = (($__i$0$i$i32) + 1)|0;
    $__i$0$i$i32 = $inc$i$i36;
   }
   __THREW__ = 0;
   invoke_viiiiiiiiii(455,($__intl|0),($9|0),($__loc|0),($__pat|0),($__dp|0),($__ts|0),($__grp|0),($__sym|0),($__sn|0),($__fd|0));
   $10 = __THREW__; __THREW__ = 0;
   $11 = $10&1;
   if ($11) {
    $30 = ___cxa_find_matching_catch_2()|0;
    $31 = tempRet0;
    $ehselector$slot$1 = $31;$exn$slot$1 = $30;
   } else {
    $12 = HEAP8[$__size_$i$i>>0]|0;
    $tobool$i$i47 = ($12<<24>>24)<(0);
    $13 = HEAP32[$__size_$i3$i>>2]|0;
    $conv$i$i50 = $12&255;
    $cond$i52 = $tobool$i$i47 ? $13 : $conv$i$i50;
    $14 = HEAP32[$__fd>>2]|0;
    $cmp15 = ($cond$i52|0)>($14|0);
    if ($cmp15) {
     $sub = (($cond$i52) - ($14))|0;
     $mul = $sub << 1;
     $__size_$i$i64 = ((($__sn)) + 11|0);
     $15 = HEAP8[$__size_$i$i64>>0]|0;
     $tobool$i$i65 = ($15<<24>>24)<(0);
     $__size_$i3$i66 = ((($__sn)) + 4|0);
     $16 = HEAP32[$__size_$i3$i66>>2]|0;
     $conv$i$i68 = $15&255;
     $cond$i70 = $tobool$i$i65 ? $16 : $conv$i$i68;
     $add = (($cond$i70) + ($mul))|0;
     $__size_$i$i93 = ((($__sym)) + 11|0);
     $17 = HEAP8[$__size_$i$i93>>0]|0;
     $tobool$i$i94 = ($17<<24>>24)<(0);
     $__size_$i3$i95 = ((($__sym)) + 4|0);
     $18 = HEAP32[$__size_$i3$i95>>2]|0;
     $conv$i$i97 = $17&255;
     $cond$i99 = $tobool$i$i94 ? $18 : $conv$i$i97;
     $$sink = 1;$cond$i108$sink = $cond$i99;$cond$i117$sink = $add;
    } else {
     $__size_$i$i102 = ((($__sn)) + 11|0);
     $19 = HEAP8[$__size_$i$i102>>0]|0;
     $tobool$i$i103 = ($19<<24>>24)<(0);
     $__size_$i3$i104 = ((($__sn)) + 4|0);
     $20 = HEAP32[$__size_$i3$i104>>2]|0;
     $conv$i$i106 = $19&255;
     $cond$i108 = $tobool$i$i103 ? $20 : $conv$i$i106;
     $__size_$i$i111 = ((($__sym)) + 11|0);
     $21 = HEAP8[$__size_$i$i111>>0]|0;
     $tobool$i$i112 = ($21<<24>>24)<(0);
     $__size_$i3$i113 = ((($__sym)) + 4|0);
     $22 = HEAP32[$__size_$i3$i113>>2]|0;
     $conv$i$i115 = $21&255;
     $cond$i117 = $tobool$i$i112 ? $22 : $conv$i$i115;
     $$sink = 2;$cond$i108$sink = $cond$i108;$cond$i117$sink = $cond$i117;
    }
    $add24 = (($cond$i108$sink) + ($14))|0;
    $add25$sink = (($add24) + ($cond$i117$sink))|0;
    $add26 = (($add25$sink) + ($$sink))|0;
    $cmp27 = ($add26>>>0)>(100);
    do {
     if ($cmp27) {
      $call31 = (_malloc($add26)|0);
      $23 = $call31;
      $cmp33 = ($call31|0)==(0|0);
      if ($cmp33) {
       __THREW__ = 0;
       invoke_v(409);
       $24 = __THREW__; __THREW__ = 0;
       $25 = $24&1;
       if ($25) {
        $32 = ___cxa_find_matching_catch_2()|0;
        $33 = tempRet0;
        $__h$sroa$0$1 = $23;$ehselector$slot$0 = $33;$exn$slot$0 = $32;
        break;
       } else {
        $$pre = HEAP8[$__size_$i$i>>0]|0;
        $$pre129 = HEAP32[$__size_$i3$i>>2]|0;
        $$pre130 = HEAP32[$__fd>>2]|0;
        $35 = $$pre;$37 = $$pre129;$40 = $$pre130;$__h$sroa$0$0 = $23;$__mb$0 = 0;
        label = 26;
        break;
       }
      } else {
       $35 = $12;$37 = $13;$40 = $14;$__h$sroa$0$0 = $23;$__mb$0 = $call31;
       label = 26;
      }
     } else {
      $35 = $12;$37 = $13;$40 = $14;$__h$sroa$0$0 = 0;$__mb$0 = $__mbuf;
      label = 26;
     }
    } while(0);
    if ((label|0) == 26) {
     $__fmtflags_$i = ((($__iob)) + 4|0);
     $34 = HEAP32[$__fmtflags_$i>>2]|0;
     $tobool$i$i$i83 = ($35<<24>>24)<(0);
     $36 = HEAP32[$__digits>>2]|0;
     $cond$i$i88 = $tobool$i$i$i83 ? $36 : $__digits;
     $conv$i$i77 = $35&255;
     $cond$i79 = $tobool$i$i$i83 ? $37 : $conv$i$i77;
     $add$ptr = (($cond$i$i88) + ($cond$i79)|0);
     $38 = HEAP8[$__dp>>0]|0;
     $39 = HEAP8[$__ts>>0]|0;
     __THREW__ = 0;
     invoke_viiiiiiiiiiiiiii(456,($__mb$0|0),($__mi|0),($__me|0),($34|0),($cond$i$i88|0),($add$ptr|0),($call$i20|0),($9|0),($__pat|0),($38|0),($39|0),($__grp|0),($__sym|0),($__sn|0),($40|0));
     $41 = __THREW__; __THREW__ = 0;
     $42 = $41&1;
     if (!($42)) {
      $43 = HEAP32[$__s>>2]|0;
      HEAP32[$agg$tmp>>2] = $43;
      $44 = HEAP32[$__mi>>2]|0;
      $45 = HEAP32[$__me>>2]|0;
      __THREW__ = 0;
      ;HEAP32[$agg$tmp$byval_copy>>2]=HEAP32[$agg$tmp>>2]|0;
      $call46 = (invoke_iiiiiii(381,($agg$tmp$byval_copy|0),($__mb$0|0),($44|0),($45|0),($__iob|0),($__fl|0))|0);
      $46 = __THREW__; __THREW__ = 0;
      $47 = $46&1;
      if (!($47)) {
       $tobool$i$i40 = ($__h$sroa$0$0|0)==(0);
       if (!($tobool$i$i40)) {
        $48 = $__h$sroa$0$0;
        _free($48);
       }
       __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__sn);
       __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__sym);
       __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grp);
       __ZNSt3__26localeD2Ev($__loc);
       STACKTOP = sp;return ($call46|0);
      }
     }
     $49 = ___cxa_find_matching_catch_2()|0;
     $50 = tempRet0;
     $__h$sroa$0$1 = $__h$sroa$0$0;$ehselector$slot$0 = $50;$exn$slot$0 = $49;
    }
    $tobool$i$i21 = ($__h$sroa$0$1|0)==(0);
    if (!($tobool$i$i21)) {
     $51 = $__h$sroa$0$1;
     _free($51);
    }
    $ehselector$slot$1 = $ehselector$slot$0;$exn$slot$1 = $exn$slot$0;
   }
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__sn);
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__sym);
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grp);
   $ehselector$slot$3 = $ehselector$slot$1;$exn$slot$3 = $exn$slot$1;
  }
 } while(0);
 __ZNSt3__26localeD2Ev($__loc);
 ___resumeException($exn$slot$3|0);
 // unreachable;
 return (0)|0;
}
function __ZNSt3__211__money_putIcE13__gather_infoEbbRKNS_6localeERNS_10money_base7patternERcS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEESF_SF_Ri($__intl,$__neg,$__loc,$__pat,$__dp,$__ts,$__grp,$__sym,$__sn,$__fd) {
 $__intl = $__intl|0;
 $__neg = $__neg|0;
 $__loc = $__loc|0;
 $__pat = $__pat|0;
 $__dp = $__dp|0;
 $__ts = $__ts|0;
 $__grp = $__grp|0;
 $__sym = $__sym|0;
 $__sn = $__sn|0;
 $__fd = $__fd|0;
 var $$pre$phi223Z2D = 0, $$pre$phiZ2D = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $8 = 0, $9 = 0, $__i$0$i$i$i = 0, $__i$0$i$i$i107 = 0, $__i$0$i$i$i136 = 0, $__i$0$i$i$i161 = 0, $__i$0$i$i$i190 = 0, $__i$0$i$i$i213 = 0, $__i$0$i$i$i55 = 0, $__i$0$i$i$i84 = 0;
 var $__size_$i1$i$i$i = 0, $__size_$i1$i$i$i125 = 0, $__size_$i1$i$i$i150 = 0, $__size_$i1$i$i$i179 = 0, $__size_$i1$i$i$i202 = 0, $__size_$i1$i$i$i44 = 0, $__size_$i1$i$i$i73 = 0, $__size_$i1$i$i$i96 = 0, $__size_$i2$i$i$i = 0, $__size_$i2$i$i$i128 = 0, $__size_$i2$i$i$i153 = 0, $__size_$i2$i$i$i182 = 0, $__size_$i2$i$i$i205 = 0, $__size_$i2$i$i$i47 = 0, $__size_$i2$i$i$i76 = 0, $__size_$i2$i$i$i99 = 0, $arrayidx$i$i$i = 0, $arrayidx$i$i$i110 = 0, $arrayidx$i$i$i139 = 0, $arrayidx$i$i$i164 = 0;
 var $arrayidx$i$i$i193 = 0, $arrayidx$i$i$i216 = 0, $arrayidx$i$i$i58 = 0, $arrayidx$i$i$i87 = 0, $call$i = 0, $call$i116 = 0, $call$i117 = 0, $call$i170 = 0, $call$i173 = 0, $call$i222 = 0, $call$i64 = 0, $call$i67 = 0, $exitcond$i$i$i = 0, $exitcond$i$i$i108 = 0, $exitcond$i$i$i137 = 0, $exitcond$i$i$i162 = 0, $exitcond$i$i$i191 = 0, $exitcond$i$i$i214 = 0, $exitcond$i$i$i56 = 0, $exitcond$i$i$i85 = 0;
 var $inc$i$i$i = 0, $inc$i$i$i111 = 0, $inc$i$i$i140 = 0, $inc$i$i$i165 = 0, $inc$i$i$i194 = 0, $inc$i$i$i217 = 0, $inc$i$i$i59 = 0, $inc$i$i$i88 = 0, $ref$tmp = 0, $ref$tmp$i$i$i = 0, $ref$tmp$i$i$i122 = 0, $ref$tmp$i$i$i147 = 0, $ref$tmp$i$i$i176 = 0, $ref$tmp$i$i$i199 = 0, $ref$tmp$i$i$i41 = 0, $ref$tmp$i$i$i70 = 0, $ref$tmp$i$i$i93 = 0, $ref$tmp11 = 0, $ref$tmp13 = 0, $ref$tmp21 = 0;
 var $ref$tmp22 = 0, $ref$tmp25 = 0, $ref$tmp26 = 0, $ref$tmp31 = 0, $ref$tmp33 = 0, $ref$tmp4 = 0, $ref$tmp4$i$i$i = 0, $ref$tmp4$i$i$i123 = 0, $ref$tmp4$i$i$i148 = 0, $ref$tmp4$i$i$i177 = 0, $ref$tmp4$i$i$i200 = 0, $ref$tmp4$i$i$i42 = 0, $ref$tmp4$i$i$i71 = 0, $ref$tmp4$i$i$i94 = 0, $ref$tmp6 = 0, $ref$tmp7 = 0, $storemerge = 0, $tobool$i$i$i$i = 0, $tobool$i$i$i$i126 = 0, $tobool$i$i$i$i151 = 0;
 var $tobool$i$i$i$i180 = 0, $tobool$i$i$i$i203 = 0, $tobool$i$i$i$i45 = 0, $tobool$i$i$i$i74 = 0, $tobool$i$i$i$i97 = 0, $vfn$i = 0, $vfn$i115 = 0, $vfn$i119 = 0, $vfn$i121 = 0, $vfn$i144 = 0, $vfn$i146 = 0, $vfn$i169 = 0, $vfn$i172 = 0, $vfn$i175 = 0, $vfn$i198 = 0, $vfn$i221 = 0, $vfn$i36 = 0, $vfn$i38 = 0, $vfn$i40 = 0, $vfn$i63 = 0;
 var $vfn$i66 = 0, $vfn$i69 = 0, $vfn$i92 = 0, $vtable$i = 0, $vtable$i114 = 0, $vtable$i118 = 0, $vtable$i120 = 0, $vtable$i143 = 0, $vtable$i145 = 0, $vtable$i168 = 0, $vtable$i171 = 0, $vtable$i174 = 0, $vtable$i197 = 0, $vtable$i220 = 0, $vtable$i35 = 0, $vtable$i37 = 0, $vtable$i39 = 0, $vtable$i62 = 0, $vtable$i65 = 0, $vtable$i68 = 0;
 var $vtable$i91 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(128|0);
 $ref$tmp$i$i$i199 = sp + 127|0;
 $ref$tmp4$i$i$i200 = sp + 126|0;
 $ref$tmp$i$i$i176 = sp + 125|0;
 $ref$tmp4$i$i$i177 = sp + 124|0;
 $ref$tmp$i$i$i147 = sp + 123|0;
 $ref$tmp4$i$i$i148 = sp + 122|0;
 $ref$tmp$i$i$i122 = sp + 121|0;
 $ref$tmp4$i$i$i123 = sp + 120|0;
 $ref$tmp$i$i$i93 = sp + 119|0;
 $ref$tmp4$i$i$i94 = sp + 118|0;
 $ref$tmp$i$i$i70 = sp + 117|0;
 $ref$tmp4$i$i$i71 = sp + 116|0;
 $ref$tmp$i$i$i41 = sp + 115|0;
 $ref$tmp4$i$i$i42 = sp + 114|0;
 $ref$tmp$i$i$i = sp + 113|0;
 $ref$tmp4$i$i$i = sp + 112|0;
 $ref$tmp = sp + 108|0;
 $ref$tmp4 = sp + 96|0;
 $ref$tmp6 = sp + 92|0;
 $ref$tmp7 = sp + 80|0;
 $ref$tmp11 = sp + 68|0;
 $ref$tmp13 = sp + 56|0;
 $ref$tmp21 = sp + 52|0;
 $ref$tmp22 = sp + 40|0;
 $ref$tmp25 = sp + 36|0;
 $ref$tmp26 = sp + 24|0;
 $ref$tmp31 = sp + 12|0;
 $ref$tmp33 = sp;
 if ($__intl) {
  $call$i = (__ZNKSt3__26locale9use_facetERNS0_2idE($__loc,21816)|0);
  if ($__neg) {
   $vtable$i = HEAP32[$call$i>>2]|0;
   $vfn$i = ((($vtable$i)) + 44|0);
   $0 = HEAP32[$vfn$i>>2]|0;
   FUNCTION_TABLE_vii[$0 & 1023]($ref$tmp,$call$i);
   $1 = HEAP32[$ref$tmp>>2]|0;
   HEAP8[$__pat>>0]=$1&255;HEAP8[$__pat+1>>0]=($1>>8)&255;HEAP8[$__pat+2>>0]=($1>>16)&255;HEAP8[$__pat+3>>0]=$1>>24;
   $vtable$i35 = HEAP32[$call$i>>2]|0;
   $vfn$i36 = ((($vtable$i35)) + 32|0);
   $2 = HEAP32[$vfn$i36>>2]|0;
   FUNCTION_TABLE_vii[$2 & 1023]($ref$tmp4,$call$i);
   $__size_$i1$i$i$i = ((($__sn)) + 11|0);
   $3 = HEAP8[$__size_$i1$i$i$i>>0]|0;
   $tobool$i$i$i$i = ($3<<24>>24)<(0);
   if ($tobool$i$i$i$i) {
    $4 = HEAP32[$__sn>>2]|0;
    HEAP8[$ref$tmp$i$i$i>>0] = 0;
    __ZNSt3__211char_traitsIcE6assignERcRKc($4,$ref$tmp$i$i$i);
    $__size_$i2$i$i$i = ((($__sn)) + 4|0);
    HEAP32[$__size_$i2$i$i$i>>2] = 0;
   } else {
    HEAP8[$ref$tmp4$i$i$i>>0] = 0;
    __ZNSt3__211char_traitsIcE6assignERcRKc($__sn,$ref$tmp4$i$i$i);
    HEAP8[$__size_$i1$i$i$i>>0] = 0;
   }
   __THREW__ = 0;
   invoke_vii(448,($__sn|0),0);
   $5 = __THREW__; __THREW__ = 0;
   $6 = $5&1;
   if ($6) {
    $7 = ___cxa_find_matching_catch_3(0|0)|0;
    $8 = tempRet0;
    ___clang_call_terminate($7);
    // unreachable;
   }
   ;HEAP32[$__sn>>2]=HEAP32[$ref$tmp4>>2]|0;HEAP32[$__sn+4>>2]=HEAP32[$ref$tmp4+4>>2]|0;HEAP32[$__sn+8>>2]=HEAP32[$ref$tmp4+8>>2]|0;
   $__i$0$i$i$i = 0;
   while(1) {
    $exitcond$i$i$i = ($__i$0$i$i$i|0)==(3);
    if ($exitcond$i$i$i) {
     break;
    }
    $arrayidx$i$i$i = (($ref$tmp4) + ($__i$0$i$i$i<<2)|0);
    HEAP32[$arrayidx$i$i$i>>2] = 0;
    $inc$i$i$i = (($__i$0$i$i$i) + 1)|0;
    $__i$0$i$i$i = $inc$i$i$i;
   }
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($ref$tmp4);
   $$pre$phiZ2D = $call$i;
  } else {
   $vtable$i37 = HEAP32[$call$i>>2]|0;
   $vfn$i38 = ((($vtable$i37)) + 40|0);
   $9 = HEAP32[$vfn$i38>>2]|0;
   FUNCTION_TABLE_vii[$9 & 1023]($ref$tmp6,$call$i);
   $10 = HEAP32[$ref$tmp6>>2]|0;
   HEAP8[$__pat>>0]=$10&255;HEAP8[$__pat+1>>0]=($10>>8)&255;HEAP8[$__pat+2>>0]=($10>>16)&255;HEAP8[$__pat+3>>0]=$10>>24;
   $vtable$i39 = HEAP32[$call$i>>2]|0;
   $vfn$i40 = ((($vtable$i39)) + 28|0);
   $11 = HEAP32[$vfn$i40>>2]|0;
   FUNCTION_TABLE_vii[$11 & 1023]($ref$tmp7,$call$i);
   $__size_$i1$i$i$i44 = ((($__sn)) + 11|0);
   $12 = HEAP8[$__size_$i1$i$i$i44>>0]|0;
   $tobool$i$i$i$i45 = ($12<<24>>24)<(0);
   if ($tobool$i$i$i$i45) {
    $13 = HEAP32[$__sn>>2]|0;
    HEAP8[$ref$tmp$i$i$i41>>0] = 0;
    __ZNSt3__211char_traitsIcE6assignERcRKc($13,$ref$tmp$i$i$i41);
    $__size_$i2$i$i$i47 = ((($__sn)) + 4|0);
    HEAP32[$__size_$i2$i$i$i47>>2] = 0;
   } else {
    HEAP8[$ref$tmp4$i$i$i42>>0] = 0;
    __ZNSt3__211char_traitsIcE6assignERcRKc($__sn,$ref$tmp4$i$i$i42);
    HEAP8[$__size_$i1$i$i$i44>>0] = 0;
   }
   __THREW__ = 0;
   invoke_vii(448,($__sn|0),0);
   $14 = __THREW__; __THREW__ = 0;
   $15 = $14&1;
   if ($15) {
    $16 = ___cxa_find_matching_catch_3(0|0)|0;
    $17 = tempRet0;
    ___clang_call_terminate($16);
    // unreachable;
   }
   ;HEAP32[$__sn>>2]=HEAP32[$ref$tmp7>>2]|0;HEAP32[$__sn+4>>2]=HEAP32[$ref$tmp7+4>>2]|0;HEAP32[$__sn+8>>2]=HEAP32[$ref$tmp7+8>>2]|0;
   $__i$0$i$i$i55 = 0;
   while(1) {
    $exitcond$i$i$i56 = ($__i$0$i$i$i55|0)==(3);
    if ($exitcond$i$i$i56) {
     break;
    }
    $arrayidx$i$i$i58 = (($ref$tmp7) + ($__i$0$i$i$i55<<2)|0);
    HEAP32[$arrayidx$i$i$i58>>2] = 0;
    $inc$i$i$i59 = (($__i$0$i$i$i55) + 1)|0;
    $__i$0$i$i$i55 = $inc$i$i$i59;
   }
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($ref$tmp7);
   $$pre$phiZ2D = $call$i;
  }
  $vtable$i62 = HEAP32[$call$i>>2]|0;
  $vfn$i63 = ((($vtable$i62)) + 12|0);
  $18 = HEAP32[$vfn$i63>>2]|0;
  $call$i64 = (FUNCTION_TABLE_ii[$18 & 1023]($call$i)|0);
  HEAP8[$__dp>>0] = $call$i64;
  $vtable$i65 = HEAP32[$call$i>>2]|0;
  $vfn$i66 = ((($vtable$i65)) + 16|0);
  $19 = HEAP32[$vfn$i66>>2]|0;
  $call$i67 = (FUNCTION_TABLE_ii[$19 & 1023]($call$i)|0);
  HEAP8[$__ts>>0] = $call$i67;
  $vtable$i68 = HEAP32[$$pre$phiZ2D>>2]|0;
  $vfn$i69 = ((($vtable$i68)) + 20|0);
  $20 = HEAP32[$vfn$i69>>2]|0;
  FUNCTION_TABLE_vii[$20 & 1023]($ref$tmp11,$call$i);
  $__size_$i1$i$i$i73 = ((($__grp)) + 11|0);
  $21 = HEAP8[$__size_$i1$i$i$i73>>0]|0;
  $tobool$i$i$i$i74 = ($21<<24>>24)<(0);
  if ($tobool$i$i$i$i74) {
   $22 = HEAP32[$__grp>>2]|0;
   HEAP8[$ref$tmp$i$i$i70>>0] = 0;
   __ZNSt3__211char_traitsIcE6assignERcRKc($22,$ref$tmp$i$i$i70);
   $__size_$i2$i$i$i76 = ((($__grp)) + 4|0);
   HEAP32[$__size_$i2$i$i$i76>>2] = 0;
  } else {
   HEAP8[$ref$tmp4$i$i$i71>>0] = 0;
   __ZNSt3__211char_traitsIcE6assignERcRKc($__grp,$ref$tmp4$i$i$i71);
   HEAP8[$__size_$i1$i$i$i73>>0] = 0;
  }
  __THREW__ = 0;
  invoke_vii(448,($__grp|0),0);
  $23 = __THREW__; __THREW__ = 0;
  $24 = $23&1;
  if ($24) {
   $25 = ___cxa_find_matching_catch_3(0|0)|0;
   $26 = tempRet0;
   ___clang_call_terminate($25);
   // unreachable;
  }
  ;HEAP32[$__grp>>2]=HEAP32[$ref$tmp11>>2]|0;HEAP32[$__grp+4>>2]=HEAP32[$ref$tmp11+4>>2]|0;HEAP32[$__grp+8>>2]=HEAP32[$ref$tmp11+8>>2]|0;
  $__i$0$i$i$i84 = 0;
  while(1) {
   $exitcond$i$i$i85 = ($__i$0$i$i$i84|0)==(3);
   if ($exitcond$i$i$i85) {
    break;
   }
   $arrayidx$i$i$i87 = (($ref$tmp11) + ($__i$0$i$i$i84<<2)|0);
   HEAP32[$arrayidx$i$i$i87>>2] = 0;
   $inc$i$i$i88 = (($__i$0$i$i$i84) + 1)|0;
   $__i$0$i$i$i84 = $inc$i$i$i88;
  }
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($ref$tmp11);
  $vtable$i91 = HEAP32[$$pre$phiZ2D>>2]|0;
  $vfn$i92 = ((($vtable$i91)) + 24|0);
  $27 = HEAP32[$vfn$i92>>2]|0;
  FUNCTION_TABLE_vii[$27 & 1023]($ref$tmp13,$call$i);
  $__size_$i1$i$i$i96 = ((($__sym)) + 11|0);
  $28 = HEAP8[$__size_$i1$i$i$i96>>0]|0;
  $tobool$i$i$i$i97 = ($28<<24>>24)<(0);
  if ($tobool$i$i$i$i97) {
   $29 = HEAP32[$__sym>>2]|0;
   HEAP8[$ref$tmp$i$i$i93>>0] = 0;
   __ZNSt3__211char_traitsIcE6assignERcRKc($29,$ref$tmp$i$i$i93);
   $__size_$i2$i$i$i99 = ((($__sym)) + 4|0);
   HEAP32[$__size_$i2$i$i$i99>>2] = 0;
  } else {
   HEAP8[$ref$tmp4$i$i$i94>>0] = 0;
   __ZNSt3__211char_traitsIcE6assignERcRKc($__sym,$ref$tmp4$i$i$i94);
   HEAP8[$__size_$i1$i$i$i96>>0] = 0;
  }
  __THREW__ = 0;
  invoke_vii(448,($__sym|0),0);
  $30 = __THREW__; __THREW__ = 0;
  $31 = $30&1;
  if ($31) {
   $32 = ___cxa_find_matching_catch_3(0|0)|0;
   $33 = tempRet0;
   ___clang_call_terminate($32);
   // unreachable;
  }
  ;HEAP32[$__sym>>2]=HEAP32[$ref$tmp13>>2]|0;HEAP32[$__sym+4>>2]=HEAP32[$ref$tmp13+4>>2]|0;HEAP32[$__sym+8>>2]=HEAP32[$ref$tmp13+8>>2]|0;
  $__i$0$i$i$i107 = 0;
  while(1) {
   $exitcond$i$i$i108 = ($__i$0$i$i$i107|0)==(3);
   if ($exitcond$i$i$i108) {
    break;
   }
   $arrayidx$i$i$i110 = (($ref$tmp13) + ($__i$0$i$i$i107<<2)|0);
   HEAP32[$arrayidx$i$i$i110>>2] = 0;
   $inc$i$i$i111 = (($__i$0$i$i$i107) + 1)|0;
   $__i$0$i$i$i107 = $inc$i$i$i111;
  }
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($ref$tmp13);
  $vtable$i114 = HEAP32[$call$i>>2]|0;
  $vfn$i115 = ((($vtable$i114)) + 36|0);
  $34 = HEAP32[$vfn$i115>>2]|0;
  $call$i116 = (FUNCTION_TABLE_ii[$34 & 1023]($call$i)|0);
  $storemerge = $call$i116;
 } else {
  $call$i117 = (__ZNKSt3__26locale9use_facetERNS0_2idE($__loc,21808)|0);
  if ($__neg) {
   $vtable$i118 = HEAP32[$call$i117>>2]|0;
   $vfn$i119 = ((($vtable$i118)) + 44|0);
   $35 = HEAP32[$vfn$i119>>2]|0;
   FUNCTION_TABLE_vii[$35 & 1023]($ref$tmp21,$call$i117);
   $36 = HEAP32[$ref$tmp21>>2]|0;
   HEAP8[$__pat>>0]=$36&255;HEAP8[$__pat+1>>0]=($36>>8)&255;HEAP8[$__pat+2>>0]=($36>>16)&255;HEAP8[$__pat+3>>0]=$36>>24;
   $vtable$i120 = HEAP32[$call$i117>>2]|0;
   $vfn$i121 = ((($vtable$i120)) + 32|0);
   $37 = HEAP32[$vfn$i121>>2]|0;
   FUNCTION_TABLE_vii[$37 & 1023]($ref$tmp22,$call$i117);
   $__size_$i1$i$i$i125 = ((($__sn)) + 11|0);
   $38 = HEAP8[$__size_$i1$i$i$i125>>0]|0;
   $tobool$i$i$i$i126 = ($38<<24>>24)<(0);
   if ($tobool$i$i$i$i126) {
    $39 = HEAP32[$__sn>>2]|0;
    HEAP8[$ref$tmp$i$i$i122>>0] = 0;
    __ZNSt3__211char_traitsIcE6assignERcRKc($39,$ref$tmp$i$i$i122);
    $__size_$i2$i$i$i128 = ((($__sn)) + 4|0);
    HEAP32[$__size_$i2$i$i$i128>>2] = 0;
   } else {
    HEAP8[$ref$tmp4$i$i$i123>>0] = 0;
    __ZNSt3__211char_traitsIcE6assignERcRKc($__sn,$ref$tmp4$i$i$i123);
    HEAP8[$__size_$i1$i$i$i125>>0] = 0;
   }
   __THREW__ = 0;
   invoke_vii(448,($__sn|0),0);
   $40 = __THREW__; __THREW__ = 0;
   $41 = $40&1;
   if ($41) {
    $42 = ___cxa_find_matching_catch_3(0|0)|0;
    $43 = tempRet0;
    ___clang_call_terminate($42);
    // unreachable;
   }
   ;HEAP32[$__sn>>2]=HEAP32[$ref$tmp22>>2]|0;HEAP32[$__sn+4>>2]=HEAP32[$ref$tmp22+4>>2]|0;HEAP32[$__sn+8>>2]=HEAP32[$ref$tmp22+8>>2]|0;
   $__i$0$i$i$i136 = 0;
   while(1) {
    $exitcond$i$i$i137 = ($__i$0$i$i$i136|0)==(3);
    if ($exitcond$i$i$i137) {
     break;
    }
    $arrayidx$i$i$i139 = (($ref$tmp22) + ($__i$0$i$i$i136<<2)|0);
    HEAP32[$arrayidx$i$i$i139>>2] = 0;
    $inc$i$i$i140 = (($__i$0$i$i$i136) + 1)|0;
    $__i$0$i$i$i136 = $inc$i$i$i140;
   }
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($ref$tmp22);
   $$pre$phi223Z2D = $call$i117;
  } else {
   $vtable$i143 = HEAP32[$call$i117>>2]|0;
   $vfn$i144 = ((($vtable$i143)) + 40|0);
   $44 = HEAP32[$vfn$i144>>2]|0;
   FUNCTION_TABLE_vii[$44 & 1023]($ref$tmp25,$call$i117);
   $45 = HEAP32[$ref$tmp25>>2]|0;
   HEAP8[$__pat>>0]=$45&255;HEAP8[$__pat+1>>0]=($45>>8)&255;HEAP8[$__pat+2>>0]=($45>>16)&255;HEAP8[$__pat+3>>0]=$45>>24;
   $vtable$i145 = HEAP32[$call$i117>>2]|0;
   $vfn$i146 = ((($vtable$i145)) + 28|0);
   $46 = HEAP32[$vfn$i146>>2]|0;
   FUNCTION_TABLE_vii[$46 & 1023]($ref$tmp26,$call$i117);
   $__size_$i1$i$i$i150 = ((($__sn)) + 11|0);
   $47 = HEAP8[$__size_$i1$i$i$i150>>0]|0;
   $tobool$i$i$i$i151 = ($47<<24>>24)<(0);
   if ($tobool$i$i$i$i151) {
    $48 = HEAP32[$__sn>>2]|0;
    HEAP8[$ref$tmp$i$i$i147>>0] = 0;
    __ZNSt3__211char_traitsIcE6assignERcRKc($48,$ref$tmp$i$i$i147);
    $__size_$i2$i$i$i153 = ((($__sn)) + 4|0);
    HEAP32[$__size_$i2$i$i$i153>>2] = 0;
   } else {
    HEAP8[$ref$tmp4$i$i$i148>>0] = 0;
    __ZNSt3__211char_traitsIcE6assignERcRKc($__sn,$ref$tmp4$i$i$i148);
    HEAP8[$__size_$i1$i$i$i150>>0] = 0;
   }
   __THREW__ = 0;
   invoke_vii(448,($__sn|0),0);
   $49 = __THREW__; __THREW__ = 0;
   $50 = $49&1;
   if ($50) {
    $51 = ___cxa_find_matching_catch_3(0|0)|0;
    $52 = tempRet0;
    ___clang_call_terminate($51);
    // unreachable;
   }
   ;HEAP32[$__sn>>2]=HEAP32[$ref$tmp26>>2]|0;HEAP32[$__sn+4>>2]=HEAP32[$ref$tmp26+4>>2]|0;HEAP32[$__sn+8>>2]=HEAP32[$ref$tmp26+8>>2]|0;
   $__i$0$i$i$i161 = 0;
   while(1) {
    $exitcond$i$i$i162 = ($__i$0$i$i$i161|0)==(3);
    if ($exitcond$i$i$i162) {
     break;
    }
    $arrayidx$i$i$i164 = (($ref$tmp26) + ($__i$0$i$i$i161<<2)|0);
    HEAP32[$arrayidx$i$i$i164>>2] = 0;
    $inc$i$i$i165 = (($__i$0$i$i$i161) + 1)|0;
    $__i$0$i$i$i161 = $inc$i$i$i165;
   }
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($ref$tmp26);
   $$pre$phi223Z2D = $call$i117;
  }
  $vtable$i168 = HEAP32[$call$i117>>2]|0;
  $vfn$i169 = ((($vtable$i168)) + 12|0);
  $53 = HEAP32[$vfn$i169>>2]|0;
  $call$i170 = (FUNCTION_TABLE_ii[$53 & 1023]($call$i117)|0);
  HEAP8[$__dp>>0] = $call$i170;
  $vtable$i171 = HEAP32[$call$i117>>2]|0;
  $vfn$i172 = ((($vtable$i171)) + 16|0);
  $54 = HEAP32[$vfn$i172>>2]|0;
  $call$i173 = (FUNCTION_TABLE_ii[$54 & 1023]($call$i117)|0);
  HEAP8[$__ts>>0] = $call$i173;
  $vtable$i174 = HEAP32[$$pre$phi223Z2D>>2]|0;
  $vfn$i175 = ((($vtable$i174)) + 20|0);
  $55 = HEAP32[$vfn$i175>>2]|0;
  FUNCTION_TABLE_vii[$55 & 1023]($ref$tmp31,$call$i117);
  $__size_$i1$i$i$i179 = ((($__grp)) + 11|0);
  $56 = HEAP8[$__size_$i1$i$i$i179>>0]|0;
  $tobool$i$i$i$i180 = ($56<<24>>24)<(0);
  if ($tobool$i$i$i$i180) {
   $57 = HEAP32[$__grp>>2]|0;
   HEAP8[$ref$tmp$i$i$i176>>0] = 0;
   __ZNSt3__211char_traitsIcE6assignERcRKc($57,$ref$tmp$i$i$i176);
   $__size_$i2$i$i$i182 = ((($__grp)) + 4|0);
   HEAP32[$__size_$i2$i$i$i182>>2] = 0;
  } else {
   HEAP8[$ref$tmp4$i$i$i177>>0] = 0;
   __ZNSt3__211char_traitsIcE6assignERcRKc($__grp,$ref$tmp4$i$i$i177);
   HEAP8[$__size_$i1$i$i$i179>>0] = 0;
  }
  __THREW__ = 0;
  invoke_vii(448,($__grp|0),0);
  $58 = __THREW__; __THREW__ = 0;
  $59 = $58&1;
  if ($59) {
   $60 = ___cxa_find_matching_catch_3(0|0)|0;
   $61 = tempRet0;
   ___clang_call_terminate($60);
   // unreachable;
  }
  ;HEAP32[$__grp>>2]=HEAP32[$ref$tmp31>>2]|0;HEAP32[$__grp+4>>2]=HEAP32[$ref$tmp31+4>>2]|0;HEAP32[$__grp+8>>2]=HEAP32[$ref$tmp31+8>>2]|0;
  $__i$0$i$i$i190 = 0;
  while(1) {
   $exitcond$i$i$i191 = ($__i$0$i$i$i190|0)==(3);
   if ($exitcond$i$i$i191) {
    break;
   }
   $arrayidx$i$i$i193 = (($ref$tmp31) + ($__i$0$i$i$i190<<2)|0);
   HEAP32[$arrayidx$i$i$i193>>2] = 0;
   $inc$i$i$i194 = (($__i$0$i$i$i190) + 1)|0;
   $__i$0$i$i$i190 = $inc$i$i$i194;
  }
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($ref$tmp31);
  $vtable$i197 = HEAP32[$$pre$phi223Z2D>>2]|0;
  $vfn$i198 = ((($vtable$i197)) + 24|0);
  $62 = HEAP32[$vfn$i198>>2]|0;
  FUNCTION_TABLE_vii[$62 & 1023]($ref$tmp33,$call$i117);
  $__size_$i1$i$i$i202 = ((($__sym)) + 11|0);
  $63 = HEAP8[$__size_$i1$i$i$i202>>0]|0;
  $tobool$i$i$i$i203 = ($63<<24>>24)<(0);
  if ($tobool$i$i$i$i203) {
   $64 = HEAP32[$__sym>>2]|0;
   HEAP8[$ref$tmp$i$i$i199>>0] = 0;
   __ZNSt3__211char_traitsIcE6assignERcRKc($64,$ref$tmp$i$i$i199);
   $__size_$i2$i$i$i205 = ((($__sym)) + 4|0);
   HEAP32[$__size_$i2$i$i$i205>>2] = 0;
  } else {
   HEAP8[$ref$tmp4$i$i$i200>>0] = 0;
   __ZNSt3__211char_traitsIcE6assignERcRKc($__sym,$ref$tmp4$i$i$i200);
   HEAP8[$__size_$i1$i$i$i202>>0] = 0;
  }
  __THREW__ = 0;
  invoke_vii(448,($__sym|0),0);
  $65 = __THREW__; __THREW__ = 0;
  $66 = $65&1;
  if ($66) {
   $67 = ___cxa_find_matching_catch_3(0|0)|0;
   $68 = tempRet0;
   ___clang_call_terminate($67);
   // unreachable;
  }
  ;HEAP32[$__sym>>2]=HEAP32[$ref$tmp33>>2]|0;HEAP32[$__sym+4>>2]=HEAP32[$ref$tmp33+4>>2]|0;HEAP32[$__sym+8>>2]=HEAP32[$ref$tmp33+8>>2]|0;
  $__i$0$i$i$i213 = 0;
  while(1) {
   $exitcond$i$i$i214 = ($__i$0$i$i$i213|0)==(3);
   if ($exitcond$i$i$i214) {
    break;
   }
   $arrayidx$i$i$i216 = (($ref$tmp33) + ($__i$0$i$i$i213<<2)|0);
   HEAP32[$arrayidx$i$i$i216>>2] = 0;
   $inc$i$i$i217 = (($__i$0$i$i$i213) + 1)|0;
   $__i$0$i$i$i213 = $inc$i$i$i217;
  }
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($ref$tmp33);
  $vtable$i220 = HEAP32[$call$i117>>2]|0;
  $vfn$i221 = ((($vtable$i220)) + 36|0);
  $69 = HEAP32[$vfn$i221>>2]|0;
  $call$i222 = (FUNCTION_TABLE_ii[$69 & 1023]($call$i117)|0);
  $storemerge = $call$i222;
 }
 HEAP32[$__fd>>2] = $storemerge;
 STACKTOP = sp;return;
}
function __ZNSt3__211__money_putIcE8__formatEPcRS2_S3_jPKcS5_RKNS_5ctypeIcEEbRKNS_10money_base7patternEccRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEESL_SL_i($__mb,$__mi,$__me,$__flags,$__db,$__de,$__ct,$__neg,$__pat,$__dp,$__ts,$__grp,$__sym,$__sn,$__fd) {
 $__mb = $__mb|0;
 $__mi = $__mi|0;
 $__me = $__me|0;
 $__flags = $__flags|0;
 $__db = $__db|0;
 $__de = $__de|0;
 $__ct = $__ct|0;
 $__neg = $__neg|0;
 $__pat = $__pat|0;
 $__dp = $__dp|0;
 $__ts = $__ts|0;
 $__grp = $__grp|0;
 $__sym = $__sym|0;
 $__sn = $__sn|0;
 $__fd = $__fd|0;
 var $$conv76 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__d$0 = 0, $__d$1 = 0, $__d$2 = 0, $__d$3 = 0, $__db$addr$0 = 0, $__db$addr$2 = 0, $__f$0 = 0, $__f$1 = 0, $__first$addr$0$i$i = 0, $__gl$0 = 0, $__gl$1 = 0, $__ig$0 = 0, $__ig$1 = 0;
 var $__last$addr$0$i$i = 0, $__ng$0 = 0, $__ng$1 = 0, $__p$0 = 0, $__result$addr$0$i$i = 0, $__result$addr$0$i$i143 = 0, $__size_$i$i$i106 = 0, $__size_$i$i$i117 = 0, $__size_$i$i$i173 = 0, $__size_$i3$i$i108 = 0, $__size_$i3$i$i119 = 0, $__size_$i3$i$i175 = 0, $__tab_$i = 0, $add$ptr$i = 0, $add$ptr$i161 = 0, $add$ptr$i85 = 0, $agg$tmp4$sroa$0$0$i = 0, $agg$tmp4$sroa$0$0$i142 = 0, $and = 0, $and101 = 0;
 var $and3$i = 0, $arrayidx = 0, $arrayidx$i = 0, $call$i = 0, $call$i115 = 0, $call$i128 = 0, $cmp$i = 0, $cmp$i$i = 0, $cmp$i124 = 0, $cmp$i180 = 0, $cmp1$i$i = 0, $cmp2$i = 0, $cmp21 = 0, $cmp27 = 0, $cmp30 = 0, $cmp31 = 0, $cmp40 = 0, $cmp48 = 0, $cmp6$i = 0, $cmp60 = 0;
 var $cmp61 = 0, $cmp65 = 0, $cmp71 = 0, $cmp89 = 0, $cond = 0, $cond$i = 0, $cond$i$i = 0, $cond$i$i$i103 = 0, $cond$i$i$i136 = 0, $cond$i$i$i84 = 0, $cond$i$i$pn = 0, $cond$i$i112 = 0, $cond$i$i123 = 0, $cond$i$i170 = 0, $cond$i$i179 = 0, $cond$i94 = 0, $conv = 0, $conv$i = 0, $conv$i$i = 0, $conv$i$i$i110 = 0;
 var $conv$i$i$i121 = 0, $conv$i$i$i177 = 0, $conv$i$i92 = 0, $conv57 = 0, $conv76 = 0, $dec = 0, $dec44 = 0, $exitcond = 0, $inc = 0, $inc83 = 0, $inc86 = 0, $incdec$ptr = 0, $incdec$ptr$i$i = 0, $incdec$ptr$i$i$i146 = 0, $incdec$ptr$i$i147 = 0, $incdec$ptr$i$i73 = 0, $incdec$ptr18 = 0, $incdec$ptr18$__db$addr$0 = 0, $incdec$ptr2$i$i = 0, $incdec$ptr26 = 0;
 var $incdec$ptr33 = 0, $incdec$ptr34 = 0, $incdec$ptr42 = 0, $incdec$ptr5 = 0, $incdec$ptr51 = 0, $incdec$ptr63 = 0, $incdec$ptr81 = 0, $incdec$ptr82 = 0, $lnot$i$i$i = 0, $lnot$i$i$i144 = 0, $or$cond = 0, $tobool = 0, $tobool$i$i = 0, $tobool$i$i$i107 = 0, $tobool$i$i$i118 = 0, $tobool$i$i$i174 = 0, $tobool$i$i89 = 0, $trunc = 0, $vfn$i = 0, $vfn$i114 = 0;
 var $vfn$i127 = 0, $vtable$i = 0, $vtable$i113 = 0, $vtable$i126 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$__me>>2] = $__mb;
 $__size_$i$i$i117 = ((($__sn)) + 11|0);
 $__size_$i3$i$i119 = ((($__sn)) + 4|0);
 $__size_$i$i$i173 = ((($__sym)) + 11|0);
 $__size_$i3$i$i175 = ((($__sym)) + 4|0);
 $and = $__flags & 512;
 $tobool = ($and|0)==(0);
 $__tab_$i = ((($__ct)) + 8|0);
 $cmp27 = ($__fd|0)>(0);
 $__size_$i$i$i106 = ((($__grp)) + 11|0);
 $__size_$i3$i$i108 = ((($__grp)) + 4|0);
 $__db$addr$0 = $__db;$__p$0 = 0;
 while(1) {
  $exitcond = ($__p$0|0)==(4);
  if ($exitcond) {
   break;
  }
  $arrayidx = (($__pat) + ($__p$0)|0);
  $2 = HEAP8[$arrayidx>>0]|0;
  $conv = $2 << 24 >> 24;
  L4: do {
   switch ($conv|0) {
   case 0:  {
    $3 = HEAP32[$__me>>2]|0;
    HEAP32[$__mi>>2] = $3;
    $__db$addr$2 = $__db$addr$0;
    break;
   }
   case 1:  {
    $4 = HEAP32[$__me>>2]|0;
    HEAP32[$__mi>>2] = $4;
    $vtable$i113 = HEAP32[$__ct>>2]|0;
    $vfn$i114 = ((($vtable$i113)) + 28|0);
    $5 = HEAP32[$vfn$i114>>2]|0;
    $call$i115 = (FUNCTION_TABLE_iii[$5 & 511]($__ct,32)|0);
    $6 = HEAP32[$__me>>2]|0;
    $incdec$ptr = ((($6)) + 1|0);
    HEAP32[$__me>>2] = $incdec$ptr;
    HEAP8[$6>>0] = $call$i115;
    $__db$addr$2 = $__db$addr$0;
    break;
   }
   case 3:  {
    $7 = HEAP8[$__size_$i$i$i117>>0]|0;
    $tobool$i$i$i118 = ($7<<24>>24)<(0);
    $8 = HEAP32[$__size_$i3$i$i119>>2]|0;
    $conv$i$i$i121 = $7&255;
    $cond$i$i123 = $tobool$i$i$i118 ? $8 : $conv$i$i$i121;
    $cmp$i124 = ($cond$i$i123|0)==(0);
    if ($cmp$i124) {
     $__db$addr$2 = $__db$addr$0;
    } else {
     $9 = HEAP32[$__sn>>2]|0;
     $cond$i$i$i136 = $tobool$i$i$i118 ? $9 : $__sn;
     $10 = HEAP8[$cond$i$i$i136>>0]|0;
     $11 = HEAP32[$__me>>2]|0;
     $incdec$ptr5 = ((($11)) + 1|0);
     HEAP32[$__me>>2] = $incdec$ptr5;
     HEAP8[$11>>0] = $10;
     $__db$addr$2 = $__db$addr$0;
    }
    break;
   }
   case 2:  {
    $12 = HEAP8[$__size_$i$i$i173>>0]|0;
    $tobool$i$i$i174 = ($12<<24>>24)<(0);
    $13 = HEAP32[$__size_$i3$i$i175>>2]|0;
    $conv$i$i$i177 = $12&255;
    $cond$i$i179 = $tobool$i$i$i174 ? $13 : $conv$i$i$i177;
    $cmp$i180 = ($cond$i$i179|0)==(0);
    $or$cond = $tobool | $cmp$i180;
    if ($or$cond) {
     $__db$addr$2 = $__db$addr$0;
    } else {
     $14 = HEAP32[$__sym>>2]|0;
     $cond$i$i170 = $tobool$i$i$i174 ? $14 : $__sym;
     $add$ptr$i161 = (($cond$i$i170) + ($cond$i$i179)|0);
     $15 = HEAP32[$__me>>2]|0;
     $__result$addr$0$i$i143 = $15;$agg$tmp4$sroa$0$0$i142 = $cond$i$i170;
     while(1) {
      $lnot$i$i$i144 = ($agg$tmp4$sroa$0$0$i142|0)==($add$ptr$i161|0);
      if ($lnot$i$i$i144) {
       break;
      }
      $16 = HEAP8[$agg$tmp4$sroa$0$0$i142>>0]|0;
      HEAP8[$__result$addr$0$i$i143>>0] = $16;
      $incdec$ptr$i$i$i146 = ((($agg$tmp4$sroa$0$0$i142)) + 1|0);
      $incdec$ptr$i$i147 = ((($__result$addr$0$i$i143)) + 1|0);
      $__result$addr$0$i$i143 = $incdec$ptr$i$i147;$agg$tmp4$sroa$0$0$i142 = $incdec$ptr$i$i$i146;
     }
     HEAP32[$__me>>2] = $__result$addr$0$i$i143;
     $__db$addr$2 = $__db$addr$0;
    }
    break;
   }
   case 4:  {
    $17 = HEAP32[$__me>>2]|0;
    $incdec$ptr18 = ((($__db$addr$0)) + 1|0);
    $incdec$ptr18$__db$addr$0 = $__neg ? $incdec$ptr18 : $__db$addr$0;
    $__d$0 = $incdec$ptr18$__db$addr$0;
    while(1) {
     $cmp21 = ($__d$0>>>0)<($__de>>>0);
     if (!($cmp21)) {
      break;
     }
     $18 = HEAP8[$__d$0>>0]|0;
     $cmp2$i = ($18<<24>>24)>(-1);
     if (!($cmp2$i)) {
      break;
     }
     $conv$i = $18 << 24 >> 24;
     $19 = HEAP32[$__tab_$i>>2]|0;
     $arrayidx$i = (($19) + ($conv$i<<1)|0);
     $20 = HEAP16[$arrayidx$i>>1]|0;
     $and3$i = $20 & 2048;
     $cmp6$i = ($and3$i<<16>>16)==(0);
     if ($cmp6$i) {
      break;
     }
     $incdec$ptr26 = ((($__d$0)) + 1|0);
     $__d$0 = $incdec$ptr26;
    }
    if ($cmp27) {
     $__d$1 = $__d$0;$__f$0 = $__fd;
     while(1) {
      $cmp30 = ($__d$1>>>0)>($incdec$ptr18$__db$addr$0>>>0);
      $cmp31 = ($__f$0|0)>(0);
      $21 = $cmp30 & $cmp31;
      if (!($21)) {
       break;
      }
      $incdec$ptr33 = ((($__d$1)) + -1|0);
      $22 = HEAP8[$incdec$ptr33>>0]|0;
      $23 = HEAP32[$__me>>2]|0;
      $incdec$ptr34 = ((($23)) + 1|0);
      HEAP32[$__me>>2] = $incdec$ptr34;
      HEAP8[$23>>0] = $22;
      $dec = (($__f$0) + -1)|0;
      $__d$1 = $incdec$ptr33;$__f$0 = $dec;
     }
     if ($cmp31) {
      $vtable$i126 = HEAP32[$__ct>>2]|0;
      $vfn$i127 = ((($vtable$i126)) + 28|0);
      $24 = HEAP32[$vfn$i127>>2]|0;
      $call$i128 = (FUNCTION_TABLE_iii[$24 & 511]($__ct,48)|0);
      $cond = $call$i128;
     } else {
      $cond = 0;
     }
     $__f$1 = $__f$0;
     while(1) {
      $cmp40 = ($__f$1|0)>(0);
      $25 = HEAP32[$__me>>2]|0;
      $incdec$ptr42 = ((($25)) + 1|0);
      HEAP32[$__me>>2] = $incdec$ptr42;
      if (!($cmp40)) {
       break;
      }
      HEAP8[$25>>0] = $cond;
      $dec44 = (($__f$1) + -1)|0;
      $__f$1 = $dec44;
     }
     HEAP8[$25>>0] = $__dp;
     $__d$2 = $__d$1;
    } else {
     $__d$2 = $__d$0;
    }
    $cmp48 = ($__d$2|0)==($incdec$ptr18$__db$addr$0|0);
    L35: do {
     if ($cmp48) {
      $vtable$i = HEAP32[$__ct>>2]|0;
      $vfn$i = ((($vtable$i)) + 28|0);
      $26 = HEAP32[$vfn$i>>2]|0;
      $call$i = (FUNCTION_TABLE_iii[$26 & 511]($__ct,48)|0);
      $27 = HEAP32[$__me>>2]|0;
      $incdec$ptr51 = ((($27)) + 1|0);
      HEAP32[$__me>>2] = $incdec$ptr51;
      HEAP8[$27>>0] = $call$i;
     } else {
      $28 = HEAP8[$__size_$i$i$i106>>0]|0;
      $tobool$i$i$i107 = ($28<<24>>24)<(0);
      $29 = HEAP32[$__size_$i3$i$i108>>2]|0;
      $conv$i$i$i110 = $28&255;
      $cond$i$i112 = $tobool$i$i$i107 ? $29 : $conv$i$i$i110;
      $cmp$i = ($cond$i$i112|0)==(0);
      if ($cmp$i) {
       $__d$3 = $__d$2;$__gl$0 = -1;$__ig$0 = 0;$__ng$0 = 0;
      } else {
       $30 = HEAP32[$__grp>>2]|0;
       $cond$i$i$i103 = $tobool$i$i$i107 ? $30 : $__grp;
       $31 = HEAP8[$cond$i$i$i103>>0]|0;
       $conv57 = $31 << 24 >> 24;
       $__d$3 = $__d$2;$__gl$0 = $conv57;$__ig$0 = 0;$__ng$0 = 0;
      }
      while(1) {
       $cmp60 = ($__d$3|0)==($incdec$ptr18$__db$addr$0|0);
       if ($cmp60) {
        break L35;
       }
       $cmp61 = ($__ng$0|0)==($__gl$0|0);
       if ($cmp61) {
        $32 = HEAP32[$__me>>2]|0;
        $incdec$ptr63 = ((($32)) + 1|0);
        HEAP32[$__me>>2] = $incdec$ptr63;
        HEAP8[$32>>0] = $__ts;
        $inc = (($__ig$0) + 1)|0;
        $33 = HEAP8[$__size_$i$i$i106>>0]|0;
        $tobool$i$i89 = ($33<<24>>24)<(0);
        $34 = HEAP32[$__size_$i3$i$i108>>2]|0;
        $conv$i$i92 = $33&255;
        $cond$i94 = $tobool$i$i89 ? $34 : $conv$i$i92;
        $cmp65 = ($inc>>>0)<($cond$i94>>>0);
        if ($cmp65) {
         $35 = HEAP32[$__grp>>2]|0;
         $cond$i$i$i84 = $tobool$i$i89 ? $35 : $__grp;
         $add$ptr$i85 = (($cond$i$i$i84) + ($inc)|0);
         $36 = HEAP8[$add$ptr$i85>>0]|0;
         $cmp71 = ($36<<24>>24)==(127);
         $conv76 = $36 << 24 >> 24;
         $$conv76 = $cmp71 ? -1 : $conv76;
         $__gl$1 = $$conv76;$__ig$1 = $inc;$__ng$1 = 0;
        } else {
         $__gl$1 = $__ng$0;$__ig$1 = $inc;$__ng$1 = 0;
        }
       } else {
        $__gl$1 = $__gl$0;$__ig$1 = $__ig$0;$__ng$1 = $__ng$0;
       }
       $incdec$ptr81 = ((($__d$3)) + -1|0);
       $37 = HEAP8[$incdec$ptr81>>0]|0;
       $38 = HEAP32[$__me>>2]|0;
       $incdec$ptr82 = ((($38)) + 1|0);
       HEAP32[$__me>>2] = $incdec$ptr82;
       HEAP8[$38>>0] = $37;
       $inc83 = (($__ng$1) + 1)|0;
       $__d$3 = $incdec$ptr81;$__gl$0 = $__gl$1;$__ig$0 = $__ig$1;$__ng$0 = $inc83;
      }
     }
    } while(0);
    $39 = HEAP32[$__me>>2]|0;
    $cmp$i$i = ($17|0)==($39|0);
    if ($cmp$i$i) {
     $__db$addr$2 = $incdec$ptr18$__db$addr$0;
    } else {
     $__first$addr$0$i$i = $17;$__last$addr$0$i$i = $39;
     while(1) {
      $incdec$ptr$i$i73 = ((($__last$addr$0$i$i)) + -1|0);
      $cmp1$i$i = ($__first$addr$0$i$i>>>0)<($incdec$ptr$i$i73>>>0);
      if (!($cmp1$i$i)) {
       $__db$addr$2 = $incdec$ptr18$__db$addr$0;
       break L4;
      }
      $40 = HEAP8[$__first$addr$0$i$i>>0]|0;
      $41 = HEAP8[$incdec$ptr$i$i73>>0]|0;
      HEAP8[$__first$addr$0$i$i>>0] = $41;
      HEAP8[$incdec$ptr$i$i73>>0] = $40;
      $incdec$ptr2$i$i = ((($__first$addr$0$i$i)) + 1|0);
      $__first$addr$0$i$i = $incdec$ptr2$i$i;$__last$addr$0$i$i = $incdec$ptr$i$i73;
     }
    }
    break;
   }
   default: {
    $__db$addr$2 = $__db$addr$0;
   }
   }
  } while(0);
  $inc86 = (($__p$0) + 1)|0;
  $__db$addr$0 = $__db$addr$2;$__p$0 = $inc86;
 }
 $0 = HEAP8[$__size_$i$i$i117>>0]|0;
 $tobool$i$i = ($0<<24>>24)<(0);
 $1 = HEAP32[$__size_$i3$i$i119>>2]|0;
 $conv$i$i = $0&255;
 $cond$i = $tobool$i$i ? $1 : $conv$i$i;
 $cmp89 = ($cond$i>>>0)>(1);
 if ($cmp89) {
  $42 = HEAP32[$__sn>>2]|0;
  $cond$i$i = $tobool$i$i ? $42 : $__sn;
  $add$ptr$i = (($cond$i$i) + ($cond$i)|0);
  $43 = HEAP32[$__me>>2]|0;
  $__result$addr$0$i$i = $43;$cond$i$i$pn = $cond$i$i;
  while(1) {
   $agg$tmp4$sroa$0$0$i = ((($cond$i$i$pn)) + 1|0);
   $lnot$i$i$i = ($agg$tmp4$sroa$0$0$i|0)==($add$ptr$i|0);
   if ($lnot$i$i$i) {
    break;
   }
   $44 = HEAP8[$agg$tmp4$sroa$0$0$i>>0]|0;
   HEAP8[$__result$addr$0$i$i>>0] = $44;
   $incdec$ptr$i$i = ((($__result$addr$0$i$i)) + 1|0);
   $__result$addr$0$i$i = $incdec$ptr$i$i;$cond$i$i$pn = $agg$tmp4$sroa$0$0$i;
  }
  HEAP32[$__me>>2] = $__result$addr$0$i$i;
 }
 $and101 = $__flags & 176;
 $trunc = $and101&255;
 switch ($trunc<<24>>24) {
 case 32:  {
  $45 = HEAP32[$__me>>2]|0;
  HEAP32[$__mi>>2] = $45;
  break;
 }
 case 16:  {
  break;
 }
 default: {
  HEAP32[$__mi>>2] = $__mb;
 }
 }
 return;
}
function __ZNSt3__29money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__26locale5facetD2Ev($this);
 return;
}
function __ZNSt3__29money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__26locale5facetD2Ev($this);
 __ZdlPv($this);
 return;
}
function __ZNKSt3__29money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_bRNS_8ios_baseEwe($this,$__s,$__intl,$__iob,$__fl,$__units) {
 $this = $this|0;
 $__s = $__s|0;
 $__intl = $__intl|0;
 $__iob = $__iob|0;
 $__fl = $__fl|0;
 $__units = +$__units;
 var $$pre = 0, $$pre147 = 0, $$sink = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $8 = 0, $9 = 0, $__bb = 0, $__buf = 0, $__db$0 = 0, $__digits = 0, $__dp = 0, $__fd = 0, $__fmtflags_$i = 0;
 var $__grp = 0, $__hd$sroa$0$0 = 0, $__hd$sroa$0$1 = 0, $__hd$sroa$0$2 = 0, $__hn$sroa$0$0 = 0, $__hn$sroa$0$1 = 0, $__hn$sroa$0$2 = 0, $__hw$sroa$0$0 = 0, $__hw$sroa$0$1 = 0, $__i$0$i$i = 0, $__i$0$i$i46 = 0, $__i$0$i$i53 = 0, $__loc = 0, $__mb$0 = 0, $__mbuf = 0, $__me = 0, $__mi = 0, $__n$0 = 0, $__pat = 0, $__size_$i$i = 0;
 var $__size_$i$i68 = 0, $__size_$i$i82 = 0, $__size_$i$i90 = 0, $__size_$i2$i = 0, $__size_$i2$i70 = 0, $__size_$i2$i84 = 0, $__size_$i2$i92 = 0, $__sn = 0, $__sym = 0, $__ts = 0, $add = 0, $add$ptr = 0, $add$ptr60 = 0, $add42 = 0, $add43$sink = 0, $add44 = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $arrayidx$i$i = 0, $arrayidx$i$i49 = 0;
 var $arrayidx$i$i56 = 0, $call = 0, $call$i38 = 0, $call11 = 0, $call4 = 0, $call50 = 0, $call6 = 0, $call64 = 0, $cmp = 0, $cmp25 = 0, $cmp26 = 0, $cmp33 = 0, $cmp45 = 0, $cmp52 = 0, $cmp7 = 0, $cond$i = 0, $cond$i74 = 0, $cond$i88 = 0, $cond$i88$sink = 0, $cond$i96 = 0;
 var $cond$i96$sink = 0, $conv$i$i = 0, $conv$i$i72 = 0, $conv$i$i86 = 0, $conv$i$i94 = 0, $ehselector$slot$0 = 0, $ehselector$slot$1 = 0, $ehselector$slot$3 = 0, $ehselector$slot$4 = 0, $exitcond$i$i = 0, $exitcond$i$i47 = 0, $exitcond$i$i54 = 0, $exn$slot$0 = 0, $exn$slot$1 = 0, $exn$slot$3 = 0, $exn$slot$4 = 0, $inc$i$i = 0, $inc$i$i50 = 0, $inc$i$i57 = 0, $lnot$i = 0;
 var $mul = 0, $mul34 = 0, $mul47 = 0, $sub = 0, $tobool$i$i = 0, $tobool$i$i112 = 0, $tobool$i$i41 = 0, $tobool$i$i62 = 0, $tobool$i$i67 = 0, $tobool$i$i69 = 0, $tobool$i$i77 = 0, $tobool$i$i83 = 0, $tobool$i$i91 = 0, $tobool$i$i99 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vfn$i = 0, $vtable$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1008|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(1008|0);
 $agg$tmp$byval_copy = sp + 892|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $__buf = sp + 900|0;
 $__bb = sp + 888|0;
 $__digits = sp + 488|0;
 $__loc = sp + 480|0;
 $__pat = sp + 896|0;
 $__dp = sp + 476|0;
 $__ts = sp + 472|0;
 $__grp = sp + 460|0;
 $__sym = sp + 448|0;
 $__sn = sp + 436|0;
 $__fd = sp + 432|0;
 $__mbuf = sp + 32|0;
 $__mi = sp + 24|0;
 $__me = sp + 20|0;
 $agg$tmp = sp + 16|0;
 HEAP32[$__bb>>2] = $__buf;
 HEAPF64[$vararg_buffer>>3] = $__units;
 $call = (_snprintf($__buf,100,17247,$vararg_buffer)|0);
 $cmp = ($call>>>0)>(99);
 do {
  if ($cmp) {
   __THREW__ = 0;
   $call4 = (invoke_i(392)|0);
   $0 = __THREW__; __THREW__ = 0;
   $1 = $0&1;
   if ($1) {
    $__hd$sroa$0$0 = 0;$__hn$sroa$0$0 = 0;
    label = 8;
   } else {
    __THREW__ = 0;
    HEAPF64[$vararg_buffer1>>3] = $__units;
    $call6 = (invoke_iiiii(414,($__bb|0),($call4|0),(17247|0),($vararg_buffer1|0))|0);
    $2 = __THREW__; __THREW__ = 0;
    $3 = $2&1;
    if ($3) {
     $__hd$sroa$0$0 = 0;$__hn$sroa$0$0 = 0;
     label = 8;
    } else {
     $4 = HEAP32[$__bb>>2]|0;
     $cmp7 = ($4|0)==(0|0);
     if ($cmp7) {
      __THREW__ = 0;
      invoke_v(409);
      $6 = __THREW__; __THREW__ = 0;
      $7 = $6&1;
      if ($7) {
       $__hd$sroa$0$0 = 0;$__hn$sroa$0$0 = 0;
       label = 8;
       break;
      }
      $$pre = HEAP32[$__bb>>2]|0;
      $69 = $$pre;
     } else {
      $5 = $4;
      $69 = $5;
     }
     $mul = $call6 << 2;
     $call11 = (_malloc($mul)|0);
     $10 = $call11;
     $lnot$i = ($call11|0)==(0|0);
     if ($lnot$i) {
      __THREW__ = 0;
      invoke_v(409);
      $11 = __THREW__; __THREW__ = 0;
      $12 = $11&1;
      if ($12) {
       $__hd$sroa$0$0 = $10;$__hn$sroa$0$0 = $69;
       label = 8;
      } else {
       $__db$0 = 0;$__hd$sroa$0$1 = $10;$__hn$sroa$0$1 = $69;$__n$0 = $call6;
       label = 11;
      }
     } else {
      $__db$0 = $call11;$__hd$sroa$0$1 = $10;$__hn$sroa$0$1 = $69;$__n$0 = $call6;
      label = 11;
     }
    }
   }
  } else {
   $__db$0 = $__digits;$__hd$sroa$0$1 = 0;$__hn$sroa$0$1 = 0;$__n$0 = $call;
   label = 11;
  }
 } while(0);
 if ((label|0) == 11) {
  __THREW__ = 0;
  invoke_vii(379,($__loc|0),($__iob|0));
  $13 = __THREW__; __THREW__ = 0;
  $14 = $13&1;
  if ($14) {
   $__hd$sroa$0$0 = $__hd$sroa$0$1;$__hn$sroa$0$0 = $__hn$sroa$0$1;
   label = 8;
  } else {
   __THREW__ = 0;
   $call$i38 = (invoke_iii(380,($__loc|0),(20128|0))|0);
   $15 = __THREW__; __THREW__ = 0;
   $16 = $15&1;
   do {
    if ($16) {
     $42 = ___cxa_find_matching_catch_2()|0;
     $43 = tempRet0;
     $ehselector$slot$3 = $43;$exn$slot$3 = $42;
    } else {
     $17 = HEAP32[$__bb>>2]|0;
     $add$ptr = (($17) + ($__n$0)|0);
     $vtable$i = HEAP32[$call$i38>>2]|0;
     $vfn$i = ((($vtable$i)) + 48|0);
     $18 = HEAP32[$vfn$i>>2]|0;
     __THREW__ = 0;
     (invoke_iiiii($18|0,($call$i38|0),($17|0),($add$ptr|0),($__db$0|0))|0);
     $19 = __THREW__; __THREW__ = 0;
     $20 = $19&1;
     if ($20) {
      $44 = ___cxa_find_matching_catch_2()|0;
      $45 = tempRet0;
      $ehselector$slot$3 = $45;$exn$slot$3 = $44;
      break;
     }
     $cmp25 = ($__n$0|0)==(0);
     if ($cmp25) {
      $23 = 0;
     } else {
      $21 = HEAP32[$__bb>>2]|0;
      $22 = HEAP8[$21>>0]|0;
      $cmp26 = ($22<<24>>24)==(45);
      $23 = $cmp26;
     }
     ;HEAP32[$__grp>>2]=0|0;HEAP32[$__grp+4>>2]=0|0;HEAP32[$__grp+8>>2]=0|0;
     $__i$0$i$i = 0;
     while(1) {
      $exitcond$i$i = ($__i$0$i$i|0)==(3);
      if ($exitcond$i$i) {
       break;
      }
      $arrayidx$i$i = (($__grp) + ($__i$0$i$i<<2)|0);
      HEAP32[$arrayidx$i$i>>2] = 0;
      $inc$i$i = (($__i$0$i$i) + 1)|0;
      $__i$0$i$i = $inc$i$i;
     }
     ;HEAP32[$__sym>>2]=0|0;HEAP32[$__sym+4>>2]=0|0;HEAP32[$__sym+8>>2]=0|0;
     $__i$0$i$i46 = 0;
     while(1) {
      $exitcond$i$i47 = ($__i$0$i$i46|0)==(3);
      if ($exitcond$i$i47) {
       break;
      }
      $arrayidx$i$i49 = (($__sym) + ($__i$0$i$i46<<2)|0);
      HEAP32[$arrayidx$i$i49>>2] = 0;
      $inc$i$i50 = (($__i$0$i$i46) + 1)|0;
      $__i$0$i$i46 = $inc$i$i50;
     }
     ;HEAP32[$__sn>>2]=0|0;HEAP32[$__sn+4>>2]=0|0;HEAP32[$__sn+8>>2]=0|0;
     $__i$0$i$i53 = 0;
     while(1) {
      $exitcond$i$i54 = ($__i$0$i$i53|0)==(3);
      if ($exitcond$i$i54) {
       break;
      }
      $arrayidx$i$i56 = (($__sn) + ($__i$0$i$i53<<2)|0);
      HEAP32[$arrayidx$i$i56>>2] = 0;
      $inc$i$i57 = (($__i$0$i$i53) + 1)|0;
      $__i$0$i$i53 = $inc$i$i57;
     }
     __THREW__ = 0;
     invoke_viiiiiiiiii(457,($__intl|0),($23|0),($__loc|0),($__pat|0),($__dp|0),($__ts|0),($__grp|0),($__sym|0),($__sn|0),($__fd|0));
     $24 = __THREW__; __THREW__ = 0;
     $25 = $24&1;
     if ($25) {
      $46 = ___cxa_find_matching_catch_2()|0;
      $47 = tempRet0;
      $ehselector$slot$1 = $47;$exn$slot$1 = $46;
     } else {
      $26 = HEAP32[$__fd>>2]|0;
      $cmp33 = ($__n$0|0)>($26|0);
      if ($cmp33) {
       $sub = (($__n$0) - ($26))|0;
       $mul34 = $sub << 1;
       $27 = ((($__sn)) + 8|0);
       $__size_$i$i = ((($27)) + 3|0);
       $28 = HEAP8[$__size_$i$i>>0]|0;
       $tobool$i$i67 = ($28<<24>>24)<(0);
       $__size_$i2$i = ((($__sn)) + 4|0);
       $29 = HEAP32[$__size_$i2$i>>2]|0;
       $conv$i$i = $28&255;
       $cond$i = $tobool$i$i67 ? $29 : $conv$i$i;
       $add = (($cond$i) + ($mul34))|0;
       $30 = ((($__sym)) + 8|0);
       $__size_$i$i68 = ((($30)) + 3|0);
       $31 = HEAP8[$__size_$i$i68>>0]|0;
       $tobool$i$i69 = ($31<<24>>24)<(0);
       $__size_$i2$i70 = ((($__sym)) + 4|0);
       $32 = HEAP32[$__size_$i2$i70>>2]|0;
       $conv$i$i72 = $31&255;
       $cond$i74 = $tobool$i$i69 ? $32 : $conv$i$i72;
       $$sink = 1;$cond$i88$sink = $cond$i74;$cond$i96$sink = $add;
      } else {
       $33 = ((($__sn)) + 8|0);
       $__size_$i$i82 = ((($33)) + 3|0);
       $34 = HEAP8[$__size_$i$i82>>0]|0;
       $tobool$i$i83 = ($34<<24>>24)<(0);
       $__size_$i2$i84 = ((($__sn)) + 4|0);
       $35 = HEAP32[$__size_$i2$i84>>2]|0;
       $conv$i$i86 = $34&255;
       $cond$i88 = $tobool$i$i83 ? $35 : $conv$i$i86;
       $36 = ((($__sym)) + 8|0);
       $__size_$i$i90 = ((($36)) + 3|0);
       $37 = HEAP8[$__size_$i$i90>>0]|0;
       $tobool$i$i91 = ($37<<24>>24)<(0);
       $__size_$i2$i92 = ((($__sym)) + 4|0);
       $38 = HEAP32[$__size_$i2$i92>>2]|0;
       $conv$i$i94 = $37&255;
       $cond$i96 = $tobool$i$i91 ? $38 : $conv$i$i94;
       $$sink = 2;$cond$i88$sink = $cond$i88;$cond$i96$sink = $cond$i96;
      }
      $add42 = (($cond$i88$sink) + ($26))|0;
      $add43$sink = (($add42) + ($cond$i96$sink))|0;
      $add44 = (($add43$sink) + ($$sink))|0;
      $cmp45 = ($add44>>>0)>(100);
      do {
       if ($cmp45) {
        $mul47 = $add44 << 2;
        $call50 = (_malloc($mul47)|0);
        $39 = $call50;
        $cmp52 = ($call50|0)==(0|0);
        if ($cmp52) {
         __THREW__ = 0;
         invoke_v(409);
         $40 = __THREW__; __THREW__ = 0;
         $41 = $40&1;
         if ($41) {
          $48 = ___cxa_find_matching_catch_2()|0;
          $49 = tempRet0;
          $__hw$sroa$0$1 = $39;$ehselector$slot$0 = $49;$exn$slot$0 = $48;
          break;
         } else {
          $$pre147 = HEAP32[$__fd>>2]|0;
          $53 = $$pre147;$__hw$sroa$0$0 = $39;$__mb$0 = 0;
          label = 37;
          break;
         }
        } else {
         $53 = $26;$__hw$sroa$0$0 = $39;$__mb$0 = $call50;
         label = 37;
        }
       } else {
        $53 = $26;$__hw$sroa$0$0 = 0;$__mb$0 = $__mbuf;
        label = 37;
       }
      } while(0);
      if ((label|0) == 37) {
       $__fmtflags_$i = ((($__iob)) + 4|0);
       $50 = HEAP32[$__fmtflags_$i>>2]|0;
       $add$ptr60 = (($__db$0) + ($__n$0<<2)|0);
       $51 = HEAP32[$__dp>>2]|0;
       $52 = HEAP32[$__ts>>2]|0;
       __THREW__ = 0;
       invoke_viiiiiiiiiiiiiii(458,($__mb$0|0),($__mi|0),($__me|0),($50|0),($__db$0|0),($add$ptr60|0),($call$i38|0),($23|0),($__pat|0),($51|0),($52|0),($__grp|0),($__sym|0),($__sn|0),($53|0));
       $54 = __THREW__; __THREW__ = 0;
       $55 = $54&1;
       if (!($55)) {
        $56 = HEAP32[$__s>>2]|0;
        HEAP32[$agg$tmp>>2] = $56;
        $57 = HEAP32[$__mi>>2]|0;
        $58 = HEAP32[$__me>>2]|0;
        __THREW__ = 0;
        ;HEAP32[$agg$tmp$byval_copy>>2]=HEAP32[$agg$tmp>>2]|0;
        $call64 = (invoke_iiiiiii(421,($agg$tmp$byval_copy|0),($__mb$0|0),($57|0),($58|0),($__iob|0),($__fl|0))|0);
        $59 = __THREW__; __THREW__ = 0;
        $60 = $59&1;
        if (!($60)) {
         $tobool$i$i112 = ($__hw$sroa$0$0|0)==(0);
         if (!($tobool$i$i112)) {
          $61 = $__hw$sroa$0$0;
          _free($61);
         }
         __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($__sn);
         __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($__sym);
         __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grp);
         __ZNSt3__26localeD2Ev($__loc);
         $tobool$i$i99 = ($__hd$sroa$0$1|0)==(0);
         if (!($tobool$i$i99)) {
          $62 = $__hd$sroa$0$1;
          _free($62);
         }
         $tobool$i$i77 = ($__hn$sroa$0$1|0)==(0);
         if (!($tobool$i$i77)) {
          $63 = $__hn$sroa$0$1;
          _free($63);
         }
         STACKTOP = sp;return ($call64|0);
        }
       }
       $64 = ___cxa_find_matching_catch_2()|0;
       $65 = tempRet0;
       $__hw$sroa$0$1 = $__hw$sroa$0$0;$ehselector$slot$0 = $65;$exn$slot$0 = $64;
      }
      $tobool$i$i62 = ($__hw$sroa$0$1|0)==(0);
      if (!($tobool$i$i62)) {
       $66 = $__hw$sroa$0$1;
       _free($66);
      }
      $ehselector$slot$1 = $ehselector$slot$0;$exn$slot$1 = $exn$slot$0;
     }
     __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($__sn);
     __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($__sym);
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grp);
     $ehselector$slot$3 = $ehselector$slot$1;$exn$slot$3 = $exn$slot$1;
    }
   } while(0);
   __ZNSt3__26localeD2Ev($__loc);
   $__hd$sroa$0$2 = $__hd$sroa$0$1;$__hn$sroa$0$2 = $__hn$sroa$0$1;$ehselector$slot$4 = $ehselector$slot$3;$exn$slot$4 = $exn$slot$3;
  }
 }
 if ((label|0) == 8) {
  $8 = ___cxa_find_matching_catch_2()|0;
  $9 = tempRet0;
  $__hd$sroa$0$2 = $__hd$sroa$0$0;$__hn$sroa$0$2 = $__hn$sroa$0$0;$ehselector$slot$4 = $9;$exn$slot$4 = $8;
 }
 $tobool$i$i41 = ($__hd$sroa$0$2|0)==(0);
 if (!($tobool$i$i41)) {
  $67 = $__hd$sroa$0$2;
  _free($67);
 }
 $tobool$i$i = ($__hn$sroa$0$2|0)==(0);
 if (!($tobool$i$i)) {
  $68 = $__hn$sroa$0$2;
  _free($68);
 }
 ___resumeException($exn$slot$4|0);
 // unreachable;
 return (0)|0;
}
function __ZNKSt3__29money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_bRNS_8ios_baseEwRKNS_12basic_stringIwS3_NS_9allocatorIwEEEE($this,$__s,$__intl,$__iob,$__fl,$__digits) {
 $this = $this|0;
 $__s = $__s|0;
 $__intl = $__intl|0;
 $__iob = $__iob|0;
 $__fl = $__fl|0;
 $__digits = $__digits|0;
 var $$pre = 0, $$pre120 = 0, $$pre121 = 0, $$sink = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $__dp = 0, $__fd = 0, $__fmtflags_$i = 0, $__grp = 0, $__h$sroa$0$0 = 0, $__h$sroa$0$1 = 0, $__i$0$i$i = 0, $__i$0$i$i24 = 0, $__i$0$i$i31 = 0, $__loc = 0, $__mb$0 = 0, $__mbuf = 0, $__me = 0, $__mi = 0, $__pat = 0, $__size_$i$i = 0, $__size_$i$i102 = 0, $__size_$i$i60 = 0, $__size_$i$i86 = 0;
 var $__size_$i$i94 = 0, $__size_$i2$i = 0, $__size_$i2$i104 = 0, $__size_$i2$i62 = 0, $__size_$i2$i88 = 0, $__size_$i2$i96 = 0, $__sn = 0, $__sym = 0, $__ts = 0, $add = 0, $add$ptr = 0, $add23 = 0, $add24$sink = 0, $add25 = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $arrayidx$i$i = 0, $arrayidx$i$i27 = 0, $arrayidx$i$i34 = 0, $call$i20 = 0;
 var $call$i22 = 0, $call30 = 0, $call45 = 0, $cmp = 0, $cmp14 = 0, $cmp26 = 0, $cmp32 = 0, $cmp8 = 0, $cond$i = 0, $cond$i$i$i = 0, $cond$i$i82 = 0, $cond$i100 = 0, $cond$i100$sink = 0, $cond$i108 = 0, $cond$i108$sink = 0, $cond$i50 = 0, $cond$i66 = 0, $cond$i74 = 0, $cond$i92 = 0, $conv$i$i = 0;
 var $conv$i$i106 = 0, $conv$i$i48 = 0, $conv$i$i64 = 0, $conv$i$i72 = 0, $conv$i$i90 = 0, $conv$i$i98 = 0, $ehselector$slot$0 = 0, $ehselector$slot$1 = 0, $ehselector$slot$3 = 0, $exitcond$i$i = 0, $exitcond$i$i25 = 0, $exitcond$i$i32 = 0, $exn$slot$0 = 0, $exn$slot$1 = 0, $exn$slot$3 = 0, $inc$i$i = 0, $inc$i$i28 = 0, $inc$i$i35 = 0, $mul = 0, $mul27 = 0;
 var $sub = 0, $tobool$i$i = 0, $tobool$i$i$i77 = 0, $tobool$i$i103 = 0, $tobool$i$i21 = 0, $tobool$i$i39 = 0, $tobool$i$i45 = 0, $tobool$i$i61 = 0, $tobool$i$i87 = 0, $tobool$i$i95 = 0, $vfn$i = 0, $vtable$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 480|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(480|0);
 $agg$tmp$byval_copy = sp + 468|0;
 $__loc = sp + 464|0;
 $__pat = sp + 472|0;
 $__dp = sp + 460|0;
 $__ts = sp + 456|0;
 $__grp = sp + 444|0;
 $__sym = sp + 432|0;
 $__sn = sp + 420|0;
 $__fd = sp + 416|0;
 $__mbuf = sp + 16|0;
 $__mi = sp + 8|0;
 $__me = sp + 4|0;
 $agg$tmp = sp;
 __ZNKSt3__28ios_base6getlocEv($__loc,$__iob);
 __THREW__ = 0;
 $call$i20 = (invoke_iii(380,($__loc|0),(20128|0))|0);
 $0 = __THREW__; __THREW__ = 0;
 $1 = $0&1;
 L1: do {
  if ($1) {
   $31 = ___cxa_find_matching_catch_2()|0;
   $32 = tempRet0;
   $ehselector$slot$3 = $32;$exn$slot$3 = $31;
  } else {
   $2 = ((($__digits)) + 8|0);
   $__size_$i$i = ((($2)) + 3|0);
   $3 = HEAP8[$__size_$i$i>>0]|0;
   $tobool$i$i = ($3<<24>>24)<(0);
   $__size_$i2$i = ((($__digits)) + 4|0);
   $4 = HEAP32[$__size_$i2$i>>2]|0;
   $conv$i$i = $3&255;
   $cond$i = $tobool$i$i ? $4 : $conv$i$i;
   $cmp = ($cond$i|0)==(0);
   do {
    if ($cmp) {
     $10 = 0;
    } else {
     $5 = HEAP32[$__digits>>2]|0;
     $cond$i$i$i = $tobool$i$i ? $5 : $__digits;
     $6 = HEAP32[$cond$i$i$i>>2]|0;
     $vtable$i = HEAP32[$call$i20>>2]|0;
     $vfn$i = ((($vtable$i)) + 44|0);
     $7 = HEAP32[$vfn$i>>2]|0;
     __THREW__ = 0;
     $call$i22 = (invoke_iii($7|0,($call$i20|0),45)|0);
     $8 = __THREW__; __THREW__ = 0;
     $9 = $8&1;
     if ($9) {
      $33 = ___cxa_find_matching_catch_2()|0;
      $34 = tempRet0;
      $ehselector$slot$3 = $34;$exn$slot$3 = $33;
      break L1;
     } else {
      $cmp8 = ($6|0)==($call$i22|0);
      $10 = $cmp8;
      break;
     }
    }
   } while(0);
   ;HEAP32[$__grp>>2]=0|0;HEAP32[$__grp+4>>2]=0|0;HEAP32[$__grp+8>>2]=0|0;
   $__i$0$i$i = 0;
   while(1) {
    $exitcond$i$i = ($__i$0$i$i|0)==(3);
    if ($exitcond$i$i) {
     break;
    }
    $arrayidx$i$i = (($__grp) + ($__i$0$i$i<<2)|0);
    HEAP32[$arrayidx$i$i>>2] = 0;
    $inc$i$i = (($__i$0$i$i) + 1)|0;
    $__i$0$i$i = $inc$i$i;
   }
   ;HEAP32[$__sym>>2]=0|0;HEAP32[$__sym+4>>2]=0|0;HEAP32[$__sym+8>>2]=0|0;
   $__i$0$i$i24 = 0;
   while(1) {
    $exitcond$i$i25 = ($__i$0$i$i24|0)==(3);
    if ($exitcond$i$i25) {
     break;
    }
    $arrayidx$i$i27 = (($__sym) + ($__i$0$i$i24<<2)|0);
    HEAP32[$arrayidx$i$i27>>2] = 0;
    $inc$i$i28 = (($__i$0$i$i24) + 1)|0;
    $__i$0$i$i24 = $inc$i$i28;
   }
   ;HEAP32[$__sn>>2]=0|0;HEAP32[$__sn+4>>2]=0|0;HEAP32[$__sn+8>>2]=0|0;
   $__i$0$i$i31 = 0;
   while(1) {
    $exitcond$i$i32 = ($__i$0$i$i31|0)==(3);
    if ($exitcond$i$i32) {
     break;
    }
    $arrayidx$i$i34 = (($__sn) + ($__i$0$i$i31<<2)|0);
    HEAP32[$arrayidx$i$i34>>2] = 0;
    $inc$i$i35 = (($__i$0$i$i31) + 1)|0;
    $__i$0$i$i31 = $inc$i$i35;
   }
   __THREW__ = 0;
   invoke_viiiiiiiiii(457,($__intl|0),($10|0),($__loc|0),($__pat|0),($__dp|0),($__ts|0),($__grp|0),($__sym|0),($__sn|0),($__fd|0));
   $11 = __THREW__; __THREW__ = 0;
   $12 = $11&1;
   if ($12) {
    $35 = ___cxa_find_matching_catch_2()|0;
    $36 = tempRet0;
    $ehselector$slot$1 = $36;$exn$slot$1 = $35;
   } else {
    $13 = HEAP8[$__size_$i$i>>0]|0;
    $tobool$i$i45 = ($13<<24>>24)<(0);
    $14 = HEAP32[$__size_$i2$i>>2]|0;
    $conv$i$i48 = $13&255;
    $cond$i50 = $tobool$i$i45 ? $14 : $conv$i$i48;
    $15 = HEAP32[$__fd>>2]|0;
    $cmp14 = ($cond$i50|0)>($15|0);
    if ($cmp14) {
     $sub = (($cond$i50) - ($15))|0;
     $mul = $sub << 1;
     $16 = ((($__sn)) + 8|0);
     $__size_$i$i60 = ((($16)) + 3|0);
     $17 = HEAP8[$__size_$i$i60>>0]|0;
     $tobool$i$i61 = ($17<<24>>24)<(0);
     $__size_$i2$i62 = ((($__sn)) + 4|0);
     $18 = HEAP32[$__size_$i2$i62>>2]|0;
     $conv$i$i64 = $17&255;
     $cond$i66 = $tobool$i$i61 ? $18 : $conv$i$i64;
     $add = (($cond$i66) + ($mul))|0;
     $19 = ((($__sym)) + 8|0);
     $__size_$i$i86 = ((($19)) + 3|0);
     $20 = HEAP8[$__size_$i$i86>>0]|0;
     $tobool$i$i87 = ($20<<24>>24)<(0);
     $__size_$i2$i88 = ((($__sym)) + 4|0);
     $21 = HEAP32[$__size_$i2$i88>>2]|0;
     $conv$i$i90 = $20&255;
     $cond$i92 = $tobool$i$i87 ? $21 : $conv$i$i90;
     $$sink = 1;$cond$i100$sink = $cond$i92;$cond$i108$sink = $add;
    } else {
     $22 = ((($__sn)) + 8|0);
     $__size_$i$i94 = ((($22)) + 3|0);
     $23 = HEAP8[$__size_$i$i94>>0]|0;
     $tobool$i$i95 = ($23<<24>>24)<(0);
     $__size_$i2$i96 = ((($__sn)) + 4|0);
     $24 = HEAP32[$__size_$i2$i96>>2]|0;
     $conv$i$i98 = $23&255;
     $cond$i100 = $tobool$i$i95 ? $24 : $conv$i$i98;
     $25 = ((($__sym)) + 8|0);
     $__size_$i$i102 = ((($25)) + 3|0);
     $26 = HEAP8[$__size_$i$i102>>0]|0;
     $tobool$i$i103 = ($26<<24>>24)<(0);
     $__size_$i2$i104 = ((($__sym)) + 4|0);
     $27 = HEAP32[$__size_$i2$i104>>2]|0;
     $conv$i$i106 = $26&255;
     $cond$i108 = $tobool$i$i103 ? $27 : $conv$i$i106;
     $$sink = 2;$cond$i100$sink = $cond$i100;$cond$i108$sink = $cond$i108;
    }
    $add23 = (($cond$i100$sink) + ($15))|0;
    $add24$sink = (($add23) + ($cond$i108$sink))|0;
    $add25 = (($add24$sink) + ($$sink))|0;
    $cmp26 = ($add25>>>0)>(100);
    do {
     if ($cmp26) {
      $mul27 = $add25 << 2;
      $call30 = (_malloc($mul27)|0);
      $28 = $call30;
      $cmp32 = ($call30|0)==(0|0);
      if ($cmp32) {
       __THREW__ = 0;
       invoke_v(409);
       $29 = __THREW__; __THREW__ = 0;
       $30 = $29&1;
       if ($30) {
        $37 = ___cxa_find_matching_catch_2()|0;
        $38 = tempRet0;
        $__h$sroa$0$1 = $28;$ehselector$slot$0 = $38;$exn$slot$0 = $37;
        break;
       } else {
        $$pre = HEAP8[$__size_$i$i>>0]|0;
        $$pre120 = HEAP32[$__size_$i2$i>>2]|0;
        $$pre121 = HEAP32[$__fd>>2]|0;
        $40 = $$pre;$42 = $$pre120;$45 = $$pre121;$__h$sroa$0$0 = $28;$__mb$0 = 0;
        label = 26;
        break;
       }
      } else {
       $40 = $13;$42 = $14;$45 = $15;$__h$sroa$0$0 = $28;$__mb$0 = $call30;
       label = 26;
      }
     } else {
      $40 = $13;$42 = $14;$45 = $15;$__h$sroa$0$0 = 0;$__mb$0 = $__mbuf;
      label = 26;
     }
    } while(0);
    if ((label|0) == 26) {
     $__fmtflags_$i = ((($__iob)) + 4|0);
     $39 = HEAP32[$__fmtflags_$i>>2]|0;
     $tobool$i$i$i77 = ($40<<24>>24)<(0);
     $41 = HEAP32[$__digits>>2]|0;
     $cond$i$i82 = $tobool$i$i$i77 ? $41 : $__digits;
     $conv$i$i72 = $40&255;
     $cond$i74 = $tobool$i$i$i77 ? $42 : $conv$i$i72;
     $add$ptr = (($cond$i$i82) + ($cond$i74<<2)|0);
     $43 = HEAP32[$__dp>>2]|0;
     $44 = HEAP32[$__ts>>2]|0;
     __THREW__ = 0;
     invoke_viiiiiiiiiiiiiii(458,($__mb$0|0),($__mi|0),($__me|0),($39|0),($cond$i$i82|0),($add$ptr|0),($call$i20|0),($10|0),($__pat|0),($43|0),($44|0),($__grp|0),($__sym|0),($__sn|0),($45|0));
     $46 = __THREW__; __THREW__ = 0;
     $47 = $46&1;
     if (!($47)) {
      $48 = HEAP32[$__s>>2]|0;
      HEAP32[$agg$tmp>>2] = $48;
      $49 = HEAP32[$__mi>>2]|0;
      $50 = HEAP32[$__me>>2]|0;
      __THREW__ = 0;
      ;HEAP32[$agg$tmp$byval_copy>>2]=HEAP32[$agg$tmp>>2]|0;
      $call45 = (invoke_iiiiiii(421,($agg$tmp$byval_copy|0),($__mb$0|0),($49|0),($50|0),($__iob|0),($__fl|0))|0);
      $51 = __THREW__; __THREW__ = 0;
      $52 = $51&1;
      if (!($52)) {
       $tobool$i$i39 = ($__h$sroa$0$0|0)==(0);
       if (!($tobool$i$i39)) {
        $53 = $__h$sroa$0$0;
        _free($53);
       }
       __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($__sn);
       __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($__sym);
       __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grp);
       __ZNSt3__26localeD2Ev($__loc);
       STACKTOP = sp;return ($call45|0);
      }
     }
     $54 = ___cxa_find_matching_catch_2()|0;
     $55 = tempRet0;
     $__h$sroa$0$1 = $__h$sroa$0$0;$ehselector$slot$0 = $55;$exn$slot$0 = $54;
    }
    $tobool$i$i21 = ($__h$sroa$0$1|0)==(0);
    if (!($tobool$i$i21)) {
     $56 = $__h$sroa$0$1;
     _free($56);
    }
    $ehselector$slot$1 = $ehselector$slot$0;$exn$slot$1 = $exn$slot$0;
   }
   __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($__sn);
   __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($__sym);
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grp);
   $ehselector$slot$3 = $ehselector$slot$1;$exn$slot$3 = $exn$slot$1;
  }
 } while(0);
 __ZNSt3__26localeD2Ev($__loc);
 ___resumeException($exn$slot$3|0);
 // unreachable;
 return (0)|0;
}
function __ZNSt3__211__money_putIwE13__gather_infoEbbRKNS_6localeERNS_10money_base7patternERwS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERNS9_IwNSA_IwEENSC_IwEEEESJ_Ri($__intl,$__neg,$__loc,$__pat,$__dp,$__ts,$__grp,$__sym,$__sn,$__fd) {
 $__intl = $__intl|0;
 $__neg = $__neg|0;
 $__loc = $__loc|0;
 $__pat = $__pat|0;
 $__dp = $__dp|0;
 $__ts = $__ts|0;
 $__grp = $__grp|0;
 $__sym = $__sym|0;
 $__sn = $__sn|0;
 $__fd = $__fd|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $8 = 0, $9 = 0, $__i$0$i$i$i = 0, $__i$0$i$i$i101 = 0, $__i$0$i$i$i129 = 0, $__i$0$i$i$i153 = 0;
 var $__i$0$i$i$i182 = 0, $__i$0$i$i$i204 = 0, $__i$0$i$i$i54 = 0, $__i$0$i$i$i80 = 0, $__size_$i1$i$i$i = 0, $__size_$i1$i$i$i118 = 0, $__size_$i1$i$i$i142 = 0, $__size_$i1$i$i$i171 = 0, $__size_$i1$i$i$i193 = 0, $__size_$i1$i$i$i43 = 0, $__size_$i1$i$i$i71 = 0, $__size_$i1$i$i$i90 = 0, $__size_$i2$i$i$i = 0, $__size_$i2$i$i$i121 = 0, $__size_$i2$i$i$i145 = 0, $__size_$i2$i$i$i174 = 0, $__size_$i2$i$i$i196 = 0, $__size_$i2$i$i$i46 = 0, $__size_$i2$i$i$i74 = 0, $__size_$i2$i$i$i93 = 0;
 var $arrayidx$i$i$i = 0, $arrayidx$i$i$i104 = 0, $arrayidx$i$i$i132 = 0, $arrayidx$i$i$i156 = 0, $arrayidx$i$i$i185 = 0, $arrayidx$i$i$i207 = 0, $arrayidx$i$i$i57 = 0, $arrayidx$i$i$i83 = 0, $call$i = 0, $call$i110 = 0, $call$i111 = 0, $call$i162 = 0, $call$i165 = 0, $call$i213 = 0, $call$i63 = 0, $call$i66 = 0, $exitcond$i$i$i = 0, $exitcond$i$i$i102 = 0, $exitcond$i$i$i130 = 0, $exitcond$i$i$i154 = 0;
 var $exitcond$i$i$i183 = 0, $exitcond$i$i$i205 = 0, $exitcond$i$i$i55 = 0, $exitcond$i$i$i81 = 0, $inc$i$i$i = 0, $inc$i$i$i105 = 0, $inc$i$i$i133 = 0, $inc$i$i$i157 = 0, $inc$i$i$i186 = 0, $inc$i$i$i208 = 0, $inc$i$i$i58 = 0, $inc$i$i$i84 = 0, $ref$tmp = 0, $ref$tmp$i$i$i = 0, $ref$tmp$i$i$i116 = 0, $ref$tmp$i$i$i140 = 0, $ref$tmp$i$i$i168 = 0, $ref$tmp$i$i$i191 = 0, $ref$tmp$i$i$i41 = 0, $ref$tmp$i$i$i69 = 0;
 var $ref$tmp$i$i$i88 = 0, $ref$tmp11 = 0, $ref$tmp13 = 0, $ref$tmp21 = 0, $ref$tmp22 = 0, $ref$tmp25 = 0, $ref$tmp26 = 0, $ref$tmp31 = 0, $ref$tmp33 = 0, $ref$tmp4 = 0, $ref$tmp4$i$i$i = 0, $ref$tmp4$i$i$i117 = 0, $ref$tmp4$i$i$i141 = 0, $ref$tmp4$i$i$i169 = 0, $ref$tmp4$i$i$i192 = 0, $ref$tmp4$i$i$i42 = 0, $ref$tmp4$i$i$i70 = 0, $ref$tmp4$i$i$i89 = 0, $ref$tmp6 = 0, $ref$tmp7 = 0;
 var $storemerge = 0, $tobool$i$i$i$i = 0, $tobool$i$i$i$i119 = 0, $tobool$i$i$i$i143 = 0, $tobool$i$i$i$i172 = 0, $tobool$i$i$i$i194 = 0, $tobool$i$i$i$i44 = 0, $tobool$i$i$i$i72 = 0, $tobool$i$i$i$i91 = 0, $vfn$i = 0, $vfn$i109 = 0, $vfn$i113 = 0, $vfn$i115 = 0, $vfn$i137 = 0, $vfn$i139 = 0, $vfn$i161 = 0, $vfn$i164 = 0, $vfn$i167 = 0, $vfn$i190 = 0, $vfn$i212 = 0;
 var $vfn$i36 = 0, $vfn$i38 = 0, $vfn$i40 = 0, $vfn$i62 = 0, $vfn$i65 = 0, $vfn$i68 = 0, $vfn$i87 = 0, $vtable$i = 0, $vtable$i108 = 0, $vtable$i112 = 0, $vtable$i114 = 0, $vtable$i136 = 0, $vtable$i138 = 0, $vtable$i160 = 0, $vtable$i163 = 0, $vtable$i166 = 0, $vtable$i189 = 0, $vtable$i211 = 0, $vtable$i35 = 0, $vtable$i37 = 0;
 var $vtable$i39 = 0, $vtable$i61 = 0, $vtable$i64 = 0, $vtable$i67 = 0, $vtable$i86 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 176|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(176|0);
 $ref$tmp$i$i$i191 = sp + 156|0;
 $ref$tmp4$i$i$i192 = sp + 152|0;
 $ref$tmp$i$i$i168 = sp + 163|0;
 $ref$tmp4$i$i$i169 = sp + 162|0;
 $ref$tmp$i$i$i140 = sp + 148|0;
 $ref$tmp4$i$i$i141 = sp + 144|0;
 $ref$tmp$i$i$i116 = sp + 140|0;
 $ref$tmp4$i$i$i117 = sp + 136|0;
 $ref$tmp$i$i$i88 = sp + 132|0;
 $ref$tmp4$i$i$i89 = sp + 128|0;
 $ref$tmp$i$i$i69 = sp + 161|0;
 $ref$tmp4$i$i$i70 = sp + 160|0;
 $ref$tmp$i$i$i41 = sp + 124|0;
 $ref$tmp4$i$i$i42 = sp + 120|0;
 $ref$tmp$i$i$i = sp + 116|0;
 $ref$tmp4$i$i$i = sp + 112|0;
 $ref$tmp = sp + 108|0;
 $ref$tmp4 = sp + 96|0;
 $ref$tmp6 = sp + 92|0;
 $ref$tmp7 = sp + 80|0;
 $ref$tmp11 = sp + 68|0;
 $ref$tmp13 = sp + 56|0;
 $ref$tmp21 = sp + 52|0;
 $ref$tmp22 = sp + 40|0;
 $ref$tmp25 = sp + 36|0;
 $ref$tmp26 = sp + 24|0;
 $ref$tmp31 = sp + 12|0;
 $ref$tmp33 = sp;
 if ($__intl) {
  $call$i = (__ZNKSt3__26locale9use_facetERNS0_2idE($__loc,21832)|0);
  if ($__neg) {
   $vtable$i = HEAP32[$call$i>>2]|0;
   $vfn$i = ((($vtable$i)) + 44|0);
   $0 = HEAP32[$vfn$i>>2]|0;
   FUNCTION_TABLE_vii[$0 & 1023]($ref$tmp,$call$i);
   $1 = HEAP32[$ref$tmp>>2]|0;
   HEAP8[$__pat>>0]=$1&255;HEAP8[$__pat+1>>0]=($1>>8)&255;HEAP8[$__pat+2>>0]=($1>>16)&255;HEAP8[$__pat+3>>0]=$1>>24;
   $vtable$i35 = HEAP32[$call$i>>2]|0;
   $vfn$i36 = ((($vtable$i35)) + 32|0);
   $2 = HEAP32[$vfn$i36>>2]|0;
   FUNCTION_TABLE_vii[$2 & 1023]($ref$tmp4,$call$i);
   $3 = ((($__sn)) + 8|0);
   $__size_$i1$i$i$i = ((($3)) + 3|0);
   $4 = HEAP8[$__size_$i1$i$i$i>>0]|0;
   $tobool$i$i$i$i = ($4<<24>>24)<(0);
   if ($tobool$i$i$i$i) {
    $5 = HEAP32[$__sn>>2]|0;
    HEAP32[$ref$tmp$i$i$i>>2] = 0;
    __ZNSt3__211char_traitsIwE6assignERwRKw($5,$ref$tmp$i$i$i);
    $__size_$i2$i$i$i = ((($__sn)) + 4|0);
    HEAP32[$__size_$i2$i$i$i>>2] = 0;
   } else {
    HEAP32[$ref$tmp4$i$i$i>>2] = 0;
    __ZNSt3__211char_traitsIwE6assignERwRKw($__sn,$ref$tmp4$i$i$i);
    HEAP8[$__size_$i1$i$i$i>>0] = 0;
   }
   __THREW__ = 0;
   invoke_vii(454,($__sn|0),0);
   $6 = __THREW__; __THREW__ = 0;
   $7 = $6&1;
   if ($7) {
    $8 = ___cxa_find_matching_catch_3(0|0)|0;
    $9 = tempRet0;
    ___clang_call_terminate($8);
    // unreachable;
   }
   ;HEAP32[$__sn>>2]=HEAP32[$ref$tmp4>>2]|0;HEAP32[$__sn+4>>2]=HEAP32[$ref$tmp4+4>>2]|0;HEAP32[$__sn+8>>2]=HEAP32[$ref$tmp4+8>>2]|0;
   $__i$0$i$i$i = 0;
   while(1) {
    $exitcond$i$i$i = ($__i$0$i$i$i|0)==(3);
    if ($exitcond$i$i$i) {
     break;
    }
    $arrayidx$i$i$i = (($ref$tmp4) + ($__i$0$i$i$i<<2)|0);
    HEAP32[$arrayidx$i$i$i>>2] = 0;
    $inc$i$i$i = (($__i$0$i$i$i) + 1)|0;
    $__i$0$i$i$i = $inc$i$i$i;
   }
   __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($ref$tmp4);
  } else {
   $vtable$i37 = HEAP32[$call$i>>2]|0;
   $vfn$i38 = ((($vtable$i37)) + 40|0);
   $10 = HEAP32[$vfn$i38>>2]|0;
   FUNCTION_TABLE_vii[$10 & 1023]($ref$tmp6,$call$i);
   $11 = HEAP32[$ref$tmp6>>2]|0;
   HEAP8[$__pat>>0]=$11&255;HEAP8[$__pat+1>>0]=($11>>8)&255;HEAP8[$__pat+2>>0]=($11>>16)&255;HEAP8[$__pat+3>>0]=$11>>24;
   $vtable$i39 = HEAP32[$call$i>>2]|0;
   $vfn$i40 = ((($vtable$i39)) + 28|0);
   $12 = HEAP32[$vfn$i40>>2]|0;
   FUNCTION_TABLE_vii[$12 & 1023]($ref$tmp7,$call$i);
   $13 = ((($__sn)) + 8|0);
   $__size_$i1$i$i$i43 = ((($13)) + 3|0);
   $14 = HEAP8[$__size_$i1$i$i$i43>>0]|0;
   $tobool$i$i$i$i44 = ($14<<24>>24)<(0);
   if ($tobool$i$i$i$i44) {
    $15 = HEAP32[$__sn>>2]|0;
    HEAP32[$ref$tmp$i$i$i41>>2] = 0;
    __ZNSt3__211char_traitsIwE6assignERwRKw($15,$ref$tmp$i$i$i41);
    $__size_$i2$i$i$i46 = ((($__sn)) + 4|0);
    HEAP32[$__size_$i2$i$i$i46>>2] = 0;
   } else {
    HEAP32[$ref$tmp4$i$i$i42>>2] = 0;
    __ZNSt3__211char_traitsIwE6assignERwRKw($__sn,$ref$tmp4$i$i$i42);
    HEAP8[$__size_$i1$i$i$i43>>0] = 0;
   }
   __THREW__ = 0;
   invoke_vii(454,($__sn|0),0);
   $16 = __THREW__; __THREW__ = 0;
   $17 = $16&1;
   if ($17) {
    $18 = ___cxa_find_matching_catch_3(0|0)|0;
    $19 = tempRet0;
    ___clang_call_terminate($18);
    // unreachable;
   }
   ;HEAP32[$__sn>>2]=HEAP32[$ref$tmp7>>2]|0;HEAP32[$__sn+4>>2]=HEAP32[$ref$tmp7+4>>2]|0;HEAP32[$__sn+8>>2]=HEAP32[$ref$tmp7+8>>2]|0;
   $__i$0$i$i$i54 = 0;
   while(1) {
    $exitcond$i$i$i55 = ($__i$0$i$i$i54|0)==(3);
    if ($exitcond$i$i$i55) {
     break;
    }
    $arrayidx$i$i$i57 = (($ref$tmp7) + ($__i$0$i$i$i54<<2)|0);
    HEAP32[$arrayidx$i$i$i57>>2] = 0;
    $inc$i$i$i58 = (($__i$0$i$i$i54) + 1)|0;
    $__i$0$i$i$i54 = $inc$i$i$i58;
   }
   __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($ref$tmp7);
  }
  $vtable$i61 = HEAP32[$call$i>>2]|0;
  $vfn$i62 = ((($vtable$i61)) + 12|0);
  $20 = HEAP32[$vfn$i62>>2]|0;
  $call$i63 = (FUNCTION_TABLE_ii[$20 & 1023]($call$i)|0);
  HEAP32[$__dp>>2] = $call$i63;
  $vtable$i64 = HEAP32[$call$i>>2]|0;
  $vfn$i65 = ((($vtable$i64)) + 16|0);
  $21 = HEAP32[$vfn$i65>>2]|0;
  $call$i66 = (FUNCTION_TABLE_ii[$21 & 1023]($call$i)|0);
  HEAP32[$__ts>>2] = $call$i66;
  $vtable$i67 = HEAP32[$call$i>>2]|0;
  $vfn$i68 = ((($vtable$i67)) + 20|0);
  $22 = HEAP32[$vfn$i68>>2]|0;
  FUNCTION_TABLE_vii[$22 & 1023]($ref$tmp11,$call$i);
  $__size_$i1$i$i$i71 = ((($__grp)) + 11|0);
  $23 = HEAP8[$__size_$i1$i$i$i71>>0]|0;
  $tobool$i$i$i$i72 = ($23<<24>>24)<(0);
  if ($tobool$i$i$i$i72) {
   $24 = HEAP32[$__grp>>2]|0;
   HEAP8[$ref$tmp$i$i$i69>>0] = 0;
   __ZNSt3__211char_traitsIcE6assignERcRKc($24,$ref$tmp$i$i$i69);
   $__size_$i2$i$i$i74 = ((($__grp)) + 4|0);
   HEAP32[$__size_$i2$i$i$i74>>2] = 0;
  } else {
   HEAP8[$ref$tmp4$i$i$i70>>0] = 0;
   __ZNSt3__211char_traitsIcE6assignERcRKc($__grp,$ref$tmp4$i$i$i70);
   HEAP8[$__size_$i1$i$i$i71>>0] = 0;
  }
  __THREW__ = 0;
  invoke_vii(448,($__grp|0),0);
  $25 = __THREW__; __THREW__ = 0;
  $26 = $25&1;
  if ($26) {
   $27 = ___cxa_find_matching_catch_3(0|0)|0;
   $28 = tempRet0;
   ___clang_call_terminate($27);
   // unreachable;
  }
  ;HEAP32[$__grp>>2]=HEAP32[$ref$tmp11>>2]|0;HEAP32[$__grp+4>>2]=HEAP32[$ref$tmp11+4>>2]|0;HEAP32[$__grp+8>>2]=HEAP32[$ref$tmp11+8>>2]|0;
  $__i$0$i$i$i80 = 0;
  while(1) {
   $exitcond$i$i$i81 = ($__i$0$i$i$i80|0)==(3);
   if ($exitcond$i$i$i81) {
    break;
   }
   $arrayidx$i$i$i83 = (($ref$tmp11) + ($__i$0$i$i$i80<<2)|0);
   HEAP32[$arrayidx$i$i$i83>>2] = 0;
   $inc$i$i$i84 = (($__i$0$i$i$i80) + 1)|0;
   $__i$0$i$i$i80 = $inc$i$i$i84;
  }
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($ref$tmp11);
  $vtable$i86 = HEAP32[$call$i>>2]|0;
  $vfn$i87 = ((($vtable$i86)) + 24|0);
  $29 = HEAP32[$vfn$i87>>2]|0;
  FUNCTION_TABLE_vii[$29 & 1023]($ref$tmp13,$call$i);
  $30 = ((($__sym)) + 8|0);
  $__size_$i1$i$i$i90 = ((($30)) + 3|0);
  $31 = HEAP8[$__size_$i1$i$i$i90>>0]|0;
  $tobool$i$i$i$i91 = ($31<<24>>24)<(0);
  if ($tobool$i$i$i$i91) {
   $32 = HEAP32[$__sym>>2]|0;
   HEAP32[$ref$tmp$i$i$i88>>2] = 0;
   __ZNSt3__211char_traitsIwE6assignERwRKw($32,$ref$tmp$i$i$i88);
   $__size_$i2$i$i$i93 = ((($__sym)) + 4|0);
   HEAP32[$__size_$i2$i$i$i93>>2] = 0;
  } else {
   HEAP32[$ref$tmp4$i$i$i89>>2] = 0;
   __ZNSt3__211char_traitsIwE6assignERwRKw($__sym,$ref$tmp4$i$i$i89);
   HEAP8[$__size_$i1$i$i$i90>>0] = 0;
  }
  __THREW__ = 0;
  invoke_vii(454,($__sym|0),0);
  $33 = __THREW__; __THREW__ = 0;
  $34 = $33&1;
  if ($34) {
   $35 = ___cxa_find_matching_catch_3(0|0)|0;
   $36 = tempRet0;
   ___clang_call_terminate($35);
   // unreachable;
  }
  ;HEAP32[$__sym>>2]=HEAP32[$ref$tmp13>>2]|0;HEAP32[$__sym+4>>2]=HEAP32[$ref$tmp13+4>>2]|0;HEAP32[$__sym+8>>2]=HEAP32[$ref$tmp13+8>>2]|0;
  $__i$0$i$i$i101 = 0;
  while(1) {
   $exitcond$i$i$i102 = ($__i$0$i$i$i101|0)==(3);
   if ($exitcond$i$i$i102) {
    break;
   }
   $arrayidx$i$i$i104 = (($ref$tmp13) + ($__i$0$i$i$i101<<2)|0);
   HEAP32[$arrayidx$i$i$i104>>2] = 0;
   $inc$i$i$i105 = (($__i$0$i$i$i101) + 1)|0;
   $__i$0$i$i$i101 = $inc$i$i$i105;
  }
  __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($ref$tmp13);
  $vtable$i108 = HEAP32[$call$i>>2]|0;
  $vfn$i109 = ((($vtable$i108)) + 36|0);
  $37 = HEAP32[$vfn$i109>>2]|0;
  $call$i110 = (FUNCTION_TABLE_ii[$37 & 1023]($call$i)|0);
  $storemerge = $call$i110;
 } else {
  $call$i111 = (__ZNKSt3__26locale9use_facetERNS0_2idE($__loc,21824)|0);
  if ($__neg) {
   $vtable$i112 = HEAP32[$call$i111>>2]|0;
   $vfn$i113 = ((($vtable$i112)) + 44|0);
   $38 = HEAP32[$vfn$i113>>2]|0;
   FUNCTION_TABLE_vii[$38 & 1023]($ref$tmp21,$call$i111);
   $39 = HEAP32[$ref$tmp21>>2]|0;
   HEAP8[$__pat>>0]=$39&255;HEAP8[$__pat+1>>0]=($39>>8)&255;HEAP8[$__pat+2>>0]=($39>>16)&255;HEAP8[$__pat+3>>0]=$39>>24;
   $vtable$i114 = HEAP32[$call$i111>>2]|0;
   $vfn$i115 = ((($vtable$i114)) + 32|0);
   $40 = HEAP32[$vfn$i115>>2]|0;
   FUNCTION_TABLE_vii[$40 & 1023]($ref$tmp22,$call$i111);
   $41 = ((($__sn)) + 8|0);
   $__size_$i1$i$i$i118 = ((($41)) + 3|0);
   $42 = HEAP8[$__size_$i1$i$i$i118>>0]|0;
   $tobool$i$i$i$i119 = ($42<<24>>24)<(0);
   if ($tobool$i$i$i$i119) {
    $43 = HEAP32[$__sn>>2]|0;
    HEAP32[$ref$tmp$i$i$i116>>2] = 0;
    __ZNSt3__211char_traitsIwE6assignERwRKw($43,$ref$tmp$i$i$i116);
    $__size_$i2$i$i$i121 = ((($__sn)) + 4|0);
    HEAP32[$__size_$i2$i$i$i121>>2] = 0;
   } else {
    HEAP32[$ref$tmp4$i$i$i117>>2] = 0;
    __ZNSt3__211char_traitsIwE6assignERwRKw($__sn,$ref$tmp4$i$i$i117);
    HEAP8[$__size_$i1$i$i$i118>>0] = 0;
   }
   __THREW__ = 0;
   invoke_vii(454,($__sn|0),0);
   $44 = __THREW__; __THREW__ = 0;
   $45 = $44&1;
   if ($45) {
    $46 = ___cxa_find_matching_catch_3(0|0)|0;
    $47 = tempRet0;
    ___clang_call_terminate($46);
    // unreachable;
   }
   ;HEAP32[$__sn>>2]=HEAP32[$ref$tmp22>>2]|0;HEAP32[$__sn+4>>2]=HEAP32[$ref$tmp22+4>>2]|0;HEAP32[$__sn+8>>2]=HEAP32[$ref$tmp22+8>>2]|0;
   $__i$0$i$i$i129 = 0;
   while(1) {
    $exitcond$i$i$i130 = ($__i$0$i$i$i129|0)==(3);
    if ($exitcond$i$i$i130) {
     break;
    }
    $arrayidx$i$i$i132 = (($ref$tmp22) + ($__i$0$i$i$i129<<2)|0);
    HEAP32[$arrayidx$i$i$i132>>2] = 0;
    $inc$i$i$i133 = (($__i$0$i$i$i129) + 1)|0;
    $__i$0$i$i$i129 = $inc$i$i$i133;
   }
   __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($ref$tmp22);
  } else {
   $vtable$i136 = HEAP32[$call$i111>>2]|0;
   $vfn$i137 = ((($vtable$i136)) + 40|0);
   $48 = HEAP32[$vfn$i137>>2]|0;
   FUNCTION_TABLE_vii[$48 & 1023]($ref$tmp25,$call$i111);
   $49 = HEAP32[$ref$tmp25>>2]|0;
   HEAP8[$__pat>>0]=$49&255;HEAP8[$__pat+1>>0]=($49>>8)&255;HEAP8[$__pat+2>>0]=($49>>16)&255;HEAP8[$__pat+3>>0]=$49>>24;
   $vtable$i138 = HEAP32[$call$i111>>2]|0;
   $vfn$i139 = ((($vtable$i138)) + 28|0);
   $50 = HEAP32[$vfn$i139>>2]|0;
   FUNCTION_TABLE_vii[$50 & 1023]($ref$tmp26,$call$i111);
   $51 = ((($__sn)) + 8|0);
   $__size_$i1$i$i$i142 = ((($51)) + 3|0);
   $52 = HEAP8[$__size_$i1$i$i$i142>>0]|0;
   $tobool$i$i$i$i143 = ($52<<24>>24)<(0);
   if ($tobool$i$i$i$i143) {
    $53 = HEAP32[$__sn>>2]|0;
    HEAP32[$ref$tmp$i$i$i140>>2] = 0;
    __ZNSt3__211char_traitsIwE6assignERwRKw($53,$ref$tmp$i$i$i140);
    $__size_$i2$i$i$i145 = ((($__sn)) + 4|0);
    HEAP32[$__size_$i2$i$i$i145>>2] = 0;
   } else {
    HEAP32[$ref$tmp4$i$i$i141>>2] = 0;
    __ZNSt3__211char_traitsIwE6assignERwRKw($__sn,$ref$tmp4$i$i$i141);
    HEAP8[$__size_$i1$i$i$i142>>0] = 0;
   }
   __THREW__ = 0;
   invoke_vii(454,($__sn|0),0);
   $54 = __THREW__; __THREW__ = 0;
   $55 = $54&1;
   if ($55) {
    $56 = ___cxa_find_matching_catch_3(0|0)|0;
    $57 = tempRet0;
    ___clang_call_terminate($56);
    // unreachable;
   }
   ;HEAP32[$__sn>>2]=HEAP32[$ref$tmp26>>2]|0;HEAP32[$__sn+4>>2]=HEAP32[$ref$tmp26+4>>2]|0;HEAP32[$__sn+8>>2]=HEAP32[$ref$tmp26+8>>2]|0;
   $__i$0$i$i$i153 = 0;
   while(1) {
    $exitcond$i$i$i154 = ($__i$0$i$i$i153|0)==(3);
    if ($exitcond$i$i$i154) {
     break;
    }
    $arrayidx$i$i$i156 = (($ref$tmp26) + ($__i$0$i$i$i153<<2)|0);
    HEAP32[$arrayidx$i$i$i156>>2] = 0;
    $inc$i$i$i157 = (($__i$0$i$i$i153) + 1)|0;
    $__i$0$i$i$i153 = $inc$i$i$i157;
   }
   __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($ref$tmp26);
  }
  $vtable$i160 = HEAP32[$call$i111>>2]|0;
  $vfn$i161 = ((($vtable$i160)) + 12|0);
  $58 = HEAP32[$vfn$i161>>2]|0;
  $call$i162 = (FUNCTION_TABLE_ii[$58 & 1023]($call$i111)|0);
  HEAP32[$__dp>>2] = $call$i162;
  $vtable$i163 = HEAP32[$call$i111>>2]|0;
  $vfn$i164 = ((($vtable$i163)) + 16|0);
  $59 = HEAP32[$vfn$i164>>2]|0;
  $call$i165 = (FUNCTION_TABLE_ii[$59 & 1023]($call$i111)|0);
  HEAP32[$__ts>>2] = $call$i165;
  $vtable$i166 = HEAP32[$call$i111>>2]|0;
  $vfn$i167 = ((($vtable$i166)) + 20|0);
  $60 = HEAP32[$vfn$i167>>2]|0;
  FUNCTION_TABLE_vii[$60 & 1023]($ref$tmp31,$call$i111);
  $__size_$i1$i$i$i171 = ((($__grp)) + 11|0);
  $61 = HEAP8[$__size_$i1$i$i$i171>>0]|0;
  $tobool$i$i$i$i172 = ($61<<24>>24)<(0);
  if ($tobool$i$i$i$i172) {
   $62 = HEAP32[$__grp>>2]|0;
   HEAP8[$ref$tmp$i$i$i168>>0] = 0;
   __ZNSt3__211char_traitsIcE6assignERcRKc($62,$ref$tmp$i$i$i168);
   $__size_$i2$i$i$i174 = ((($__grp)) + 4|0);
   HEAP32[$__size_$i2$i$i$i174>>2] = 0;
  } else {
   HEAP8[$ref$tmp4$i$i$i169>>0] = 0;
   __ZNSt3__211char_traitsIcE6assignERcRKc($__grp,$ref$tmp4$i$i$i169);
   HEAP8[$__size_$i1$i$i$i171>>0] = 0;
  }
  __THREW__ = 0;
  invoke_vii(448,($__grp|0),0);
  $63 = __THREW__; __THREW__ = 0;
  $64 = $63&1;
  if ($64) {
   $65 = ___cxa_find_matching_catch_3(0|0)|0;
   $66 = tempRet0;
   ___clang_call_terminate($65);
   // unreachable;
  }
  ;HEAP32[$__grp>>2]=HEAP32[$ref$tmp31>>2]|0;HEAP32[$__grp+4>>2]=HEAP32[$ref$tmp31+4>>2]|0;HEAP32[$__grp+8>>2]=HEAP32[$ref$tmp31+8>>2]|0;
  $__i$0$i$i$i182 = 0;
  while(1) {
   $exitcond$i$i$i183 = ($__i$0$i$i$i182|0)==(3);
   if ($exitcond$i$i$i183) {
    break;
   }
   $arrayidx$i$i$i185 = (($ref$tmp31) + ($__i$0$i$i$i182<<2)|0);
   HEAP32[$arrayidx$i$i$i185>>2] = 0;
   $inc$i$i$i186 = (($__i$0$i$i$i182) + 1)|0;
   $__i$0$i$i$i182 = $inc$i$i$i186;
  }
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($ref$tmp31);
  $vtable$i189 = HEAP32[$call$i111>>2]|0;
  $vfn$i190 = ((($vtable$i189)) + 24|0);
  $67 = HEAP32[$vfn$i190>>2]|0;
  FUNCTION_TABLE_vii[$67 & 1023]($ref$tmp33,$call$i111);
  $68 = ((($__sym)) + 8|0);
  $__size_$i1$i$i$i193 = ((($68)) + 3|0);
  $69 = HEAP8[$__size_$i1$i$i$i193>>0]|0;
  $tobool$i$i$i$i194 = ($69<<24>>24)<(0);
  if ($tobool$i$i$i$i194) {
   $70 = HEAP32[$__sym>>2]|0;
   HEAP32[$ref$tmp$i$i$i191>>2] = 0;
   __ZNSt3__211char_traitsIwE6assignERwRKw($70,$ref$tmp$i$i$i191);
   $__size_$i2$i$i$i196 = ((($__sym)) + 4|0);
   HEAP32[$__size_$i2$i$i$i196>>2] = 0;
  } else {
   HEAP32[$ref$tmp4$i$i$i192>>2] = 0;
   __ZNSt3__211char_traitsIwE6assignERwRKw($__sym,$ref$tmp4$i$i$i192);
   HEAP8[$__size_$i1$i$i$i193>>0] = 0;
  }
  __THREW__ = 0;
  invoke_vii(454,($__sym|0),0);
  $71 = __THREW__; __THREW__ = 0;
  $72 = $71&1;
  if ($72) {
   $73 = ___cxa_find_matching_catch_3(0|0)|0;
   $74 = tempRet0;
   ___clang_call_terminate($73);
   // unreachable;
  }
  ;HEAP32[$__sym>>2]=HEAP32[$ref$tmp33>>2]|0;HEAP32[$__sym+4>>2]=HEAP32[$ref$tmp33+4>>2]|0;HEAP32[$__sym+8>>2]=HEAP32[$ref$tmp33+8>>2]|0;
  $__i$0$i$i$i204 = 0;
  while(1) {
   $exitcond$i$i$i205 = ($__i$0$i$i$i204|0)==(3);
   if ($exitcond$i$i$i205) {
    break;
   }
   $arrayidx$i$i$i207 = (($ref$tmp33) + ($__i$0$i$i$i204<<2)|0);
   HEAP32[$arrayidx$i$i$i207>>2] = 0;
   $inc$i$i$i208 = (($__i$0$i$i$i204) + 1)|0;
   $__i$0$i$i$i204 = $inc$i$i$i208;
  }
  __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($ref$tmp33);
  $vtable$i211 = HEAP32[$call$i111>>2]|0;
  $vfn$i212 = ((($vtable$i211)) + 36|0);
  $75 = HEAP32[$vfn$i212>>2]|0;
  $call$i213 = (FUNCTION_TABLE_ii[$75 & 1023]($call$i111)|0);
  $storemerge = $call$i213;
 }
 HEAP32[$__fd>>2] = $storemerge;
 STACKTOP = sp;return;
}
function __ZNSt3__211__money_putIwE8__formatEPwRS2_S3_jPKwS5_RKNS_5ctypeIwEEbRKNS_10money_base7patternEwwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERKNSE_IwNSF_IwEENSH_IwEEEESQ_i($__mb,$__mi,$__me,$__flags,$__db,$__de,$__ct,$__neg,$__pat,$__dp,$__ts,$__grp,$__sym,$__sn,$__fd) {
 $__mb = $__mb|0;
 $__mi = $__mi|0;
 $__me = $__me|0;
 $__flags = $__flags|0;
 $__db = $__db|0;
 $__de = $__de|0;
 $__ct = $__ct|0;
 $__neg = $__neg|0;
 $__pat = $__pat|0;
 $__dp = $__dp|0;
 $__ts = $__ts|0;
 $__grp = $__grp|0;
 $__sym = $__sym|0;
 $__sn = $__sn|0;
 $__fd = $__fd|0;
 var $$conv76 = 0, $$pre179 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__d$0 = 0, $__d$1 = 0, $__d$2 = 0, $__d$3 = 0, $__db$addr$0 = 0, $__db$addr$2 = 0, $__f$0 = 0;
 var $__f$1 = 0, $__first$addr$0$i$i = 0, $__gl$0 = 0, $__gl$1 = 0, $__ig$0 = 0, $__ig$1 = 0, $__last$addr$0$i$i = 0, $__me$promoted = 0, $__ng$0 = 0, $__ng$1 = 0, $__p$0 = 0, $__result$addr$0$i$i = 0, $__result$addr$0$i$i143 = 0, $__size_$i$i$i102 = 0, $__size_$i$i$i111 = 0, $__size_$i$i$i132 = 0, $__size_$i2$i$i113 = 0, $__size_$i2$i$i134 = 0, $__size_$i3$i$i = 0, $add$ptr$i = 0;
 var $add$ptr$i$i = 0, $add$ptr$i161 = 0, $add$ptr$i85 = 0, $and = 0, $and101 = 0, $arrayidx = 0, $call$i = 0, $call$i110 = 0, $call$i121 = 0, $call$i131 = 0, $cmp$i = 0, $cmp$i$i = 0, $cmp$i118 = 0, $cmp$i139 = 0, $cmp1$i$i = 0, $cmp21 = 0, $cmp27 = 0, $cmp30 = 0, $cmp31 = 0, $cmp40 = 0;
 var $cmp48 = 0, $cmp60 = 0, $cmp61 = 0, $cmp65 = 0, $cmp71 = 0, $cmp89 = 0, $cond = 0, $cond$i = 0, $cond$i$i = 0, $cond$i$i$i100 = 0, $cond$i$i$i128 = 0, $cond$i$i$i84 = 0, $cond$i$i107 = 0, $cond$i$i117 = 0, $cond$i$i138 = 0, $cond$i$i169 = 0, $cond$i92 = 0, $conv = 0, $conv$i$i = 0, $conv$i$i$i105 = 0;
 var $conv$i$i$i115 = 0, $conv$i$i$i136 = 0, $conv57 = 0, $conv76 = 0, $dec = 0, $dec44 = 0, $exitcond = 0, $inc = 0, $inc83 = 0, $inc86 = 0, $incdec$ptr = 0, $incdec$ptr$i$i = 0, $incdec$ptr$i$i$i = 0, $incdec$ptr$i$i$i146 = 0, $incdec$ptr$i$i147 = 0, $incdec$ptr$i$i73 = 0, $incdec$ptr18 = 0, $incdec$ptr18$__db$addr$0 = 0, $incdec$ptr2$i$i = 0, $incdec$ptr26 = 0;
 var $incdec$ptr33 = 0, $incdec$ptr34 = 0, $incdec$ptr42 = 0, $incdec$ptr42175 = 0, $incdec$ptr5 = 0, $incdec$ptr51 = 0, $incdec$ptr63 = 0, $incdec$ptr81 = 0, $incdec$ptr82 = 0, $lnot$i$i$i = 0, $lnot$i$i$i144 = 0, $or$cond = 0, $scevgep$i = 0, $scevgep$i149 = 0, $tobool = 0, $tobool$i$i = 0, $tobool$i$i$i103 = 0, $tobool$i$i$i112 = 0, $tobool$i$i$i133 = 0, $trunc = 0;
 var $vfn$i = 0, $vfn$i109 = 0, $vfn$i120 = 0, $vfn$i130 = 0, $vtable$i = 0, $vtable$i108 = 0, $vtable$i119 = 0, $vtable$i129 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$__me>>2] = $__mb;
 $0 = ((($__sn)) + 8|0);
 $__size_$i$i$i111 = ((($0)) + 3|0);
 $__size_$i2$i$i113 = ((($__sn)) + 4|0);
 $1 = ((($__sym)) + 8|0);
 $__size_$i$i$i132 = ((($1)) + 3|0);
 $__size_$i2$i$i134 = ((($__sym)) + 4|0);
 $and = $__flags & 512;
 $tobool = ($and|0)==(0);
 $cmp27 = ($__fd|0)>(0);
 $__size_$i$i$i102 = ((($__grp)) + 11|0);
 $__size_$i3$i$i = ((($__grp)) + 4|0);
 $__db$addr$0 = $__db;$__p$0 = 0;
 while(1) {
  $exitcond = ($__p$0|0)==(4);
  if ($exitcond) {
   break;
  }
  $arrayidx = (($__pat) + ($__p$0)|0);
  $4 = HEAP8[$arrayidx>>0]|0;
  $conv = $4 << 24 >> 24;
  L4: do {
   switch ($conv|0) {
   case 0:  {
    $5 = HEAP32[$__me>>2]|0;
    HEAP32[$__mi>>2] = $5;
    $__db$addr$2 = $__db$addr$0;
    break;
   }
   case 1:  {
    $6 = HEAP32[$__me>>2]|0;
    HEAP32[$__mi>>2] = $6;
    $vtable$i108 = HEAP32[$__ct>>2]|0;
    $vfn$i109 = ((($vtable$i108)) + 44|0);
    $7 = HEAP32[$vfn$i109>>2]|0;
    $call$i110 = (FUNCTION_TABLE_iii[$7 & 511]($__ct,32)|0);
    $8 = HEAP32[$__me>>2]|0;
    $incdec$ptr = ((($8)) + 4|0);
    HEAP32[$__me>>2] = $incdec$ptr;
    HEAP32[$8>>2] = $call$i110;
    $__db$addr$2 = $__db$addr$0;
    break;
   }
   case 3:  {
    $9 = HEAP8[$__size_$i$i$i111>>0]|0;
    $tobool$i$i$i112 = ($9<<24>>24)<(0);
    $10 = HEAP32[$__size_$i2$i$i113>>2]|0;
    $conv$i$i$i115 = $9&255;
    $cond$i$i117 = $tobool$i$i$i112 ? $10 : $conv$i$i$i115;
    $cmp$i118 = ($cond$i$i117|0)==(0);
    if ($cmp$i118) {
     $__db$addr$2 = $__db$addr$0;
    } else {
     $11 = HEAP32[$__sn>>2]|0;
     $cond$i$i$i128 = $tobool$i$i$i112 ? $11 : $__sn;
     $12 = HEAP32[$cond$i$i$i128>>2]|0;
     $13 = HEAP32[$__me>>2]|0;
     $incdec$ptr5 = ((($13)) + 4|0);
     HEAP32[$__me>>2] = $incdec$ptr5;
     HEAP32[$13>>2] = $12;
     $__db$addr$2 = $__db$addr$0;
    }
    break;
   }
   case 2:  {
    $14 = HEAP8[$__size_$i$i$i132>>0]|0;
    $tobool$i$i$i133 = ($14<<24>>24)<(0);
    $15 = HEAP32[$__size_$i2$i$i134>>2]|0;
    $conv$i$i$i136 = $14&255;
    $cond$i$i138 = $tobool$i$i$i133 ? $15 : $conv$i$i$i136;
    $cmp$i139 = ($cond$i$i138|0)==(0);
    $or$cond = $tobool | $cmp$i139;
    if ($or$cond) {
     $__db$addr$2 = $__db$addr$0;
    } else {
     $16 = HEAP32[$__sym>>2]|0;
     $cond$i$i169 = $tobool$i$i$i133 ? $16 : $__sym;
     $add$ptr$i161 = (($cond$i$i169) + ($cond$i$i138<<2)|0);
     $17 = HEAP32[$__me>>2]|0;
     $18 = $cond$i$i169;$__result$addr$0$i$i143 = $17;
     while(1) {
      $lnot$i$i$i144 = ($18|0)==($add$ptr$i161|0);
      if ($lnot$i$i$i144) {
       break;
      }
      $19 = HEAP32[$18>>2]|0;
      HEAP32[$__result$addr$0$i$i143>>2] = $19;
      $incdec$ptr$i$i$i146 = ((($18)) + 4|0);
      $incdec$ptr$i$i147 = ((($__result$addr$0$i$i143)) + 4|0);
      $18 = $incdec$ptr$i$i$i146;$__result$addr$0$i$i143 = $incdec$ptr$i$i147;
     }
     $scevgep$i149 = (($17) + ($cond$i$i138<<2)|0);
     HEAP32[$__me>>2] = $scevgep$i149;
     $__db$addr$2 = $__db$addr$0;
    }
    break;
   }
   case 4:  {
    $20 = HEAP32[$__me>>2]|0;
    $incdec$ptr18 = ((($__db$addr$0)) + 4|0);
    $incdec$ptr18$__db$addr$0 = $__neg ? $incdec$ptr18 : $__db$addr$0;
    $__d$0 = $incdec$ptr18$__db$addr$0;
    while(1) {
     $cmp21 = ($__d$0>>>0)<($__de>>>0);
     if (!($cmp21)) {
      break;
     }
     $21 = HEAP32[$__d$0>>2]|0;
     $vtable$i129 = HEAP32[$__ct>>2]|0;
     $vfn$i130 = ((($vtable$i129)) + 12|0);
     $22 = HEAP32[$vfn$i130>>2]|0;
     $call$i131 = (FUNCTION_TABLE_iiii[$22 & 1023]($__ct,2048,$21)|0);
     if (!($call$i131)) {
      break;
     }
     $incdec$ptr26 = ((($__d$0)) + 4|0);
     $__d$0 = $incdec$ptr26;
    }
    if ($cmp27) {
     $__d$1 = $__d$0;$__f$0 = $__fd;
     while(1) {
      $cmp30 = ($__d$1>>>0)>($incdec$ptr18$__db$addr$0>>>0);
      $cmp31 = ($__f$0|0)>(0);
      $23 = $cmp30 & $cmp31;
      if (!($23)) {
       break;
      }
      $incdec$ptr33 = ((($__d$1)) + -4|0);
      $24 = HEAP32[$incdec$ptr33>>2]|0;
      $25 = HEAP32[$__me>>2]|0;
      $incdec$ptr34 = ((($25)) + 4|0);
      HEAP32[$__me>>2] = $incdec$ptr34;
      HEAP32[$25>>2] = $24;
      $dec = (($__f$0) + -1)|0;
      $__d$1 = $incdec$ptr33;$__f$0 = $dec;
     }
     if ($cmp31) {
      $vtable$i119 = HEAP32[$__ct>>2]|0;
      $vfn$i120 = ((($vtable$i119)) + 44|0);
      $26 = HEAP32[$vfn$i120>>2]|0;
      $call$i121 = (FUNCTION_TABLE_iii[$26 & 511]($__ct,48)|0);
      $cond = $call$i121;
     } else {
      $cond = 0;
     }
     $__me$promoted = HEAP32[$__me>>2]|0;
     $__f$1 = $__f$0;$incdec$ptr42175 = $__me$promoted;
     while(1) {
      $cmp40 = ($__f$1|0)>(0);
      $incdec$ptr42 = ((($incdec$ptr42175)) + 4|0);
      if (!($cmp40)) {
       break;
      }
      HEAP32[$incdec$ptr42175>>2] = $cond;
      $dec44 = (($__f$1) + -1)|0;
      $__f$1 = $dec44;$incdec$ptr42175 = $incdec$ptr42;
     }
     HEAP32[$__me>>2] = $incdec$ptr42;
     HEAP32[$incdec$ptr42175>>2] = $__dp;
     $__d$2 = $__d$1;
    } else {
     $__d$2 = $__d$0;
    }
    $cmp48 = ($__d$2|0)==($incdec$ptr18$__db$addr$0|0);
    if ($cmp48) {
     $vtable$i = HEAP32[$__ct>>2]|0;
     $vfn$i = ((($vtable$i)) + 44|0);
     $27 = HEAP32[$vfn$i>>2]|0;
     $call$i = (FUNCTION_TABLE_iii[$27 & 511]($__ct,48)|0);
     $28 = HEAP32[$__me>>2]|0;
     $incdec$ptr51 = ((($28)) + 4|0);
     HEAP32[$__me>>2] = $incdec$ptr51;
     HEAP32[$28>>2] = $call$i;
     $39 = $incdec$ptr51;
    } else {
     $29 = HEAP8[$__size_$i$i$i102>>0]|0;
     $tobool$i$i$i103 = ($29<<24>>24)<(0);
     $30 = HEAP32[$__size_$i3$i$i>>2]|0;
     $conv$i$i$i105 = $29&255;
     $cond$i$i107 = $tobool$i$i$i103 ? $30 : $conv$i$i$i105;
     $cmp$i = ($cond$i$i107|0)==(0);
     if ($cmp$i) {
      $__d$3 = $__d$2;$__gl$0 = -1;$__ig$0 = 0;$__ng$0 = 0;
     } else {
      $31 = HEAP32[$__grp>>2]|0;
      $cond$i$i$i100 = $tobool$i$i$i103 ? $31 : $__grp;
      $32 = HEAP8[$cond$i$i$i100>>0]|0;
      $conv57 = $32 << 24 >> 24;
      $__d$3 = $__d$2;$__gl$0 = $conv57;$__ig$0 = 0;$__ng$0 = 0;
     }
     while(1) {
      $cmp60 = ($__d$3|0)==($incdec$ptr18$__db$addr$0|0);
      if ($cmp60) {
       break;
      }
      $cmp61 = ($__ng$0|0)==($__gl$0|0);
      $33 = HEAP32[$__me>>2]|0;
      if ($cmp61) {
       $incdec$ptr63 = ((($33)) + 4|0);
       HEAP32[$__me>>2] = $incdec$ptr63;
       HEAP32[$33>>2] = $__ts;
       $inc = (($__ig$0) + 1)|0;
       $34 = HEAP32[$__size_$i3$i$i>>2]|0;
       $cond$i92 = $tobool$i$i$i103 ? $34 : $conv$i$i$i105;
       $cmp65 = ($inc>>>0)<($cond$i92>>>0);
       if ($cmp65) {
        $35 = HEAP32[$__grp>>2]|0;
        $cond$i$i$i84 = $tobool$i$i$i103 ? $35 : $__grp;
        $add$ptr$i85 = (($cond$i$i$i84) + ($inc)|0);
        $36 = HEAP8[$add$ptr$i85>>0]|0;
        $cmp71 = ($36<<24>>24)==(127);
        $conv76 = $36 << 24 >> 24;
        $$conv76 = $cmp71 ? -1 : $conv76;
        $38 = $incdec$ptr63;$__gl$1 = $$conv76;$__ig$1 = $inc;$__ng$1 = 0;
       } else {
        $38 = $incdec$ptr63;$__gl$1 = $__ng$0;$__ig$1 = $inc;$__ng$1 = 0;
       }
      } else {
       $38 = $33;$__gl$1 = $__gl$0;$__ig$1 = $__ig$0;$__ng$1 = $__ng$0;
      }
      $incdec$ptr81 = ((($__d$3)) + -4|0);
      $37 = HEAP32[$incdec$ptr81>>2]|0;
      $incdec$ptr82 = ((($38)) + 4|0);
      HEAP32[$__me>>2] = $incdec$ptr82;
      HEAP32[$38>>2] = $37;
      $inc83 = (($__ng$1) + 1)|0;
      $__d$3 = $incdec$ptr81;$__gl$0 = $__gl$1;$__ig$0 = $__ig$1;$__ng$0 = $inc83;
     }
     $$pre179 = HEAP32[$__me>>2]|0;
     $39 = $$pre179;
    }
    $cmp$i$i = ($20|0)==($39|0);
    if ($cmp$i$i) {
     $__db$addr$2 = $incdec$ptr18$__db$addr$0;
    } else {
     $__first$addr$0$i$i = $20;$__last$addr$0$i$i = $39;
     while(1) {
      $incdec$ptr$i$i73 = ((($__last$addr$0$i$i)) + -4|0);
      $cmp1$i$i = ($__first$addr$0$i$i>>>0)<($incdec$ptr$i$i73>>>0);
      if (!($cmp1$i$i)) {
       $__db$addr$2 = $incdec$ptr18$__db$addr$0;
       break L4;
      }
      $40 = HEAP32[$__first$addr$0$i$i>>2]|0;
      $41 = HEAP32[$incdec$ptr$i$i73>>2]|0;
      HEAP32[$__first$addr$0$i$i>>2] = $41;
      HEAP32[$incdec$ptr$i$i73>>2] = $40;
      $incdec$ptr2$i$i = ((($__first$addr$0$i$i)) + 4|0);
      $__first$addr$0$i$i = $incdec$ptr2$i$i;$__last$addr$0$i$i = $incdec$ptr$i$i73;
     }
    }
    break;
   }
   default: {
    $__db$addr$2 = $__db$addr$0;
   }
   }
  } while(0);
  $inc86 = (($__p$0) + 1)|0;
  $__db$addr$0 = $__db$addr$2;$__p$0 = $inc86;
 }
 $2 = HEAP8[$__size_$i$i$i111>>0]|0;
 $tobool$i$i = ($2<<24>>24)<(0);
 $3 = HEAP32[$__size_$i2$i$i113>>2]|0;
 $conv$i$i = $2&255;
 $cond$i = $tobool$i$i ? $3 : $conv$i$i;
 $cmp89 = ($cond$i>>>0)>(1);
 if ($cmp89) {
  $42 = HEAP32[$__sn>>2]|0;
  $cond$i$i = $tobool$i$i ? $42 : $__sn;
  $add$ptr$i$i = ((($cond$i$i)) + 4|0);
  $add$ptr$i = (($cond$i$i) + ($cond$i<<2)|0);
  $43 = HEAP32[$__me>>2]|0;
  $44 = $add$ptr$i$i;
  $45 = $add$ptr$i;
  $46 = (($45) - ($44))|0;
  $47 = $add$ptr$i$i;$__result$addr$0$i$i = $43;
  while(1) {
   $lnot$i$i$i = ($47|0)==($add$ptr$i|0);
   if ($lnot$i$i$i) {
    break;
   }
   $48 = HEAP32[$47>>2]|0;
   HEAP32[$__result$addr$0$i$i>>2] = $48;
   $incdec$ptr$i$i$i = ((($47)) + 4|0);
   $incdec$ptr$i$i = ((($__result$addr$0$i$i)) + 4|0);
   $47 = $incdec$ptr$i$i$i;$__result$addr$0$i$i = $incdec$ptr$i$i;
  }
  $49 = $46 >>> 2;
  $scevgep$i = (($43) + ($49<<2)|0);
  HEAP32[$__me>>2] = $scevgep$i;
 }
 $and101 = $__flags & 176;
 $trunc = $and101&255;
 switch ($trunc<<24>>24) {
 case 32:  {
  $50 = HEAP32[$__me>>2]|0;
  HEAP32[$__mi>>2] = $50;
  break;
 }
 case 16:  {
  break;
 }
 default: {
  HEAP32[$__mi>>2] = $__mb;
 }
 }
 return;
}
function __ZNSt3__28messagesIcED2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__26locale5facetD2Ev($this);
 return;
}
function __ZNSt3__28messagesIcED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__26locale5facetD2Ev($this);
 __ZdlPv($this);
 return;
}
function __ZNKSt3__28messagesIcE7do_openERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERKNS_6localeE($this,$__nm,$0) {
 $this = $this|0;
 $__nm = $__nm|0;
 $0 = $0|0;
 var $$shr = 0, $1 = 0, $2 = 0, $3 = 0, $__size_$i$i$i$i = 0, $call2 = 0, $cond$i$i$i = 0, $not$cmp = 0, $shr = 0, $tobool$i$i$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $__size_$i$i$i$i = ((($__nm)) + 11|0);
 $1 = HEAP8[$__size_$i$i$i$i>>0]|0;
 $tobool$i$i$i$i = ($1<<24>>24)<(0);
 $2 = HEAP32[$__nm>>2]|0;
 $cond$i$i$i = $tobool$i$i$i$i ? $2 : $__nm;
 $call2 = (_catopen($cond$i$i$i,1)|0);
 $3 = $call2;
 $not$cmp = ($call2|0)!=((-1)|0);
 $shr = $not$cmp&1;
 $$shr = $3 >>> $shr;
 return ($$shr|0);
}
function __ZNKSt3__28messagesIcE6do_getEiiiRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE($agg$result,$this,$__c,$__set,$__msgid,$__dflt) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__c = $__c|0;
 $__set = $__set|0;
 $__msgid = $__msgid|0;
 $__dflt = $__dflt|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $__i$0$i$i = 0, $__i$0$i$i13 = 0, $__nb$addr$0$i = 0, $__ndflt = 0, $__size_$i$i$i$i = 0, $__size_$i$i$i$i29 = 0, $__size_$i3$i = 0, $__wb$addr$0$i = 0, $add$ptr = 0, $add$ptr22 = 0, $arrayidx$i$i = 0, $arrayidx$i$i16 = 0, $call13 = 0, $call21 = 0, $cmp = 0, $cmp$i = 0, $cmp$i23 = 0, $cond$i = 0, $cond$i$i$i = 0;
 var $cond$i$i$i35 = 0, $conv$i$i = 0, $ehselector$slot$1 = 0, $exitcond$i$i = 0, $exitcond$i$i14 = 0, $exn$slot$1 = 0, $inc$i$i = 0, $inc$i$i17 = 0, $incdec$ptr$i = 0, $incdec$ptr$i25 = 0, $shl = 0, $tobool$i$i$i$i = 0, $tobool$i$i$i$i30 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $__ndflt = sp;
 ;HEAP32[$__ndflt>>2]=0|0;HEAP32[$__ndflt+4>>2]=0|0;HEAP32[$__ndflt+8>>2]=0|0;
 $__i$0$i$i = 0;
 while(1) {
  $exitcond$i$i = ($__i$0$i$i|0)==(3);
  if ($exitcond$i$i) {
   break;
  }
  $arrayidx$i$i = (($__ndflt) + ($__i$0$i$i<<2)|0);
  HEAP32[$arrayidx$i$i>>2] = 0;
  $inc$i$i = (($__i$0$i$i) + 1)|0;
  $__i$0$i$i = $inc$i$i;
 }
 $__size_$i$i$i$i29 = ((($__dflt)) + 11|0);
 $0 = HEAP8[$__size_$i$i$i$i29>>0]|0;
 $tobool$i$i$i$i30 = ($0<<24>>24)<(0);
 $1 = HEAP32[$__dflt>>2]|0;
 $cond$i$i$i35 = $tobool$i$i$i$i30 ? $1 : $__dflt;
 $__size_$i3$i = ((($__dflt)) + 4|0);
 $2 = HEAP32[$__size_$i3$i>>2]|0;
 $conv$i$i = $0&255;
 $cond$i = $tobool$i$i$i$i30 ? $2 : $conv$i$i;
 $add$ptr = (($cond$i$i$i35) + ($cond$i)|0);
 $__wb$addr$0$i = $cond$i$i$i35;
 while(1) {
  $cmp$i23 = ($__wb$addr$0$i>>>0)<($add$ptr>>>0);
  if (!($cmp$i23)) {
   label = 8;
   break;
  }
  $3 = HEAP8[$__wb$addr$0$i>>0]|0;
  __THREW__ = 0;
  invoke_vii(376,($__ndflt|0),($3|0));
  $4 = __THREW__; __THREW__ = 0;
  $5 = $4&1;
  if ($5) {
   label = 9;
   break;
  }
  $incdec$ptr$i25 = ((($__wb$addr$0$i)) + 1|0);
  $__wb$addr$0$i = $incdec$ptr$i25;
 }
 do {
  if ((label|0) == 8) {
   $cmp = ($__c|0)==(-1);
   $shl = $__c << 1;
   $6 = $shl;
   $7 = $cmp ? (-1) : $6;
   $__size_$i$i$i$i = ((($__ndflt)) + 11|0);
   $8 = HEAP8[$__size_$i$i$i$i>>0]|0;
   $tobool$i$i$i$i = ($8<<24>>24)<(0);
   $9 = HEAP32[$__ndflt>>2]|0;
   $cond$i$i$i = $tobool$i$i$i$i ? $9 : $__ndflt;
   __THREW__ = 0;
   $call13 = (invoke_iiiii(459,($7|0),($__set|0),($__msgid|0),($cond$i$i$i|0))|0);
   $10 = __THREW__; __THREW__ = 0;
   $11 = $10&1;
   if ($11) {
    $17 = ___cxa_find_matching_catch_2()|0;
    $18 = tempRet0;
    $ehselector$slot$1 = $18;$exn$slot$1 = $17;
    break;
   }
   ;HEAP32[$agg$result>>2]=0|0;HEAP32[$agg$result+4>>2]=0|0;HEAP32[$agg$result+8>>2]=0|0;
   $__i$0$i$i13 = 0;
   while(1) {
    $exitcond$i$i14 = ($__i$0$i$i13|0)==(3);
    if ($exitcond$i$i14) {
     break;
    }
    $arrayidx$i$i16 = (($agg$result) + ($__i$0$i$i13<<2)|0);
    HEAP32[$arrayidx$i$i16>>2] = 0;
    $inc$i$i17 = (($__i$0$i$i13) + 1)|0;
    $__i$0$i$i13 = $inc$i$i17;
   }
   $call21 = (_strlen($call13)|0);
   $add$ptr22 = (($cond$i$i$i) + ($call21)|0);
   $__nb$addr$0$i = $cond$i$i$i;
   while(1) {
    $cmp$i = ($__nb$addr$0$i>>>0)<($add$ptr22>>>0);
    if (!($cmp$i)) {
     label = 19;
     break;
    }
    $14 = HEAP8[$__nb$addr$0$i>>0]|0;
    __THREW__ = 0;
    invoke_vii(376,($agg$result|0),($14|0));
    $15 = __THREW__; __THREW__ = 0;
    $16 = $15&1;
    if ($16) {
     label = 18;
     break;
    }
    $incdec$ptr$i = ((($__nb$addr$0$i)) + 1|0);
    $__nb$addr$0$i = $incdec$ptr$i;
   }
   if ((label|0) == 18) {
    $19 = ___cxa_find_matching_catch_2()|0;
    $20 = tempRet0;
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($agg$result);
    $ehselector$slot$1 = $20;$exn$slot$1 = $19;
    break;
   }
   else if ((label|0) == 19) {
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__ndflt);
    STACKTOP = sp;return;
   }
  }
  else if ((label|0) == 9) {
   $12 = ___cxa_find_matching_catch_2()|0;
   $13 = tempRet0;
   $ehselector$slot$1 = $13;$exn$slot$1 = $12;
  }
 } while(0);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__ndflt);
 ___resumeException($exn$slot$1|0);
 // unreachable;
}
function __ZNKSt3__28messagesIcE8do_closeEi($this,$__c) {
 $this = $this|0;
 $__c = $__c|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNSt3__28messagesIwED2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__26locale5facetD2Ev($this);
 return;
}
function __ZNSt3__28messagesIwED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__26locale5facetD2Ev($this);
 __ZdlPv($this);
 return;
}
function __ZNKSt3__28messagesIwE7do_openERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERKNS_6localeE($this,$__nm,$0) {
 $this = $this|0;
 $__nm = $__nm|0;
 $0 = $0|0;
 var $$shr = 0, $1 = 0, $2 = 0, $3 = 0, $__size_$i$i$i$i = 0, $call2 = 0, $cond$i$i$i = 0, $not$cmp = 0, $shr = 0, $tobool$i$i$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $__size_$i$i$i$i = ((($__nm)) + 11|0);
 $1 = HEAP8[$__size_$i$i$i$i>>0]|0;
 $tobool$i$i$i$i = ($1<<24>>24)<(0);
 $2 = HEAP32[$__nm>>2]|0;
 $cond$i$i$i = $tobool$i$i$i$i ? $2 : $__nm;
 $call2 = (_catopen($cond$i$i$i,1)|0);
 $3 = $call2;
 $not$cmp = ($call2|0)!=((-1)|0);
 $shr = $not$cmp&1;
 $$shr = $3 >>> $shr;
 return ($$shr|0);
}
function __ZNKSt3__28messagesIwE6do_getEiiiRKNS_12basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEE($agg$result,$this,$__c,$__set,$__msgid,$__dflt) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__c = $__c|0;
 $__set = $__set|0;
 $__msgid = $__msgid|0;
 $__dflt = $__dflt|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__bn$i = 0, $__bn$i34 = 0;
 var $__buf$i = 0, $__buf$i33 = 0, $__i$0$i$i = 0, $__i$0$i$i25 = 0, $__mb$i = 0, $__mb$i32 = 0, $__nb$addr$0$i = 0, $__ndflt = 0, $__nn$i = 0, $__p$0$i = 0, $__p$0$i46 = 0, $__r$0$i = 0, $__r$0$i37 = 0, $__shared_owners_$i$i$i$i = 0, $__shared_owners_$i$i$i$i23 = 0, $__size_$i$i$i$i = 0, $__size_$i$i$i$i56 = 0, $__size_$i2$i = 0, $__wb$addr$0$i = 0, $__wn$i = 0;
 var $add$ptr = 0, $add$ptr$i = 0, $add$ptr$i35 = 0, $add$ptr24 = 0, $add$ptr5$i = 0, $arrayidx$i$i = 0, $arrayidx$i$i28 = 0, $call$i12 = 0, $call$i53 = 0, $call13 = 0, $call23 = 0, $cmp = 0, $cmp$i = 0, $cmp$i38 = 0, $cmp2$i = 0, $cmp2$i39 = 0, $cmp3$i = 0, $cmp4$i = 0, $cmp5$i = 0, $cmp6$i = 0;
 var $cmp7$i = 0, $cmp7$i47 = 0, $cmp9$i = 0, $cond$i = 0, $cond$i$i$i = 0, $cond$i$i$i62 = 0, $cond$i22 = 0, $conv$i$i = 0, $ehselector$slot$2 = 0, $exitcond$i$i = 0, $exitcond$i$i26 = 0, $exn$slot$2 = 0, $inc$i$i = 0, $inc$i$i29 = 0, $incdec$ptr$i = 0, $incdec$ptr$i50 = 0, $or$cond$i = 0, $or$cond$i43 = 0, $shl = 0, $sub$ptr$lhs$cast$i = 0;
 var $sub$ptr$rhs$cast$i = 0, $sub$ptr$sub$i = 0, $temp$lvalue = 0, $temp$lvalue14 = 0, $tobool$i$i$i$i = 0, $tobool$i$i$i$i57 = 0, $vfn$i = 0, $vfn$i42 = 0, $vtable$i = 0, $vtable$i41 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(224|0);
 $__mb$i32 = sp + 184|0;
 $__buf$i33 = sp + 192|0;
 $__bn$i34 = sp + 180|0;
 $__wn$i = sp + 176|0;
 $__mb$i = sp + 168|0;
 $__buf$i = sp + 40|0;
 $__bn$i = sp + 32|0;
 $__nn$i = sp + 28|0;
 $__ndflt = sp + 16|0;
 $temp$lvalue = sp + 8|0;
 $temp$lvalue14 = sp;
 ;HEAP32[$__ndflt>>2]=0|0;HEAP32[$__ndflt+4>>2]=0|0;HEAP32[$__ndflt+8>>2]=0|0;
 $__i$0$i$i = 0;
 while(1) {
  $exitcond$i$i = ($__i$0$i$i|0)==(3);
  if ($exitcond$i$i) {
   break;
  }
  $arrayidx$i$i = (($__ndflt) + ($__i$0$i$i<<2)|0);
  HEAP32[$arrayidx$i$i>>2] = 0;
  $inc$i$i = (($__i$0$i$i) + 1)|0;
  $__i$0$i$i = $inc$i$i;
 }
 $__shared_owners_$i$i$i$i = ((($temp$lvalue)) + 4|0);
 HEAP32[$__shared_owners_$i$i$i$i>>2] = 0;
 HEAP32[$temp$lvalue>>2] = (8876);
 $0 = ((($__dflt)) + 8|0);
 $__size_$i$i$i$i = ((($0)) + 3|0);
 $1 = HEAP8[$__size_$i$i$i$i>>0]|0;
 $tobool$i$i$i$i = ($1<<24>>24)<(0);
 $2 = HEAP32[$__dflt>>2]|0;
 $cond$i$i$i = $tobool$i$i$i$i ? $2 : $__dflt;
 $__size_$i2$i = ((($__dflt)) + 4|0);
 $3 = HEAP32[$__size_$i2$i>>2]|0;
 $conv$i$i = $1&255;
 $cond$i22 = $tobool$i$i$i$i ? $3 : $conv$i$i;
 $add$ptr = (($cond$i$i$i) + ($cond$i22<<2)|0);
 $add$ptr$i35 = ((($__buf$i33)) + 32|0);
 $__r$0$i37 = 0;$__wb$addr$0$i = $cond$i$i$i;
 L5: while(1) {
  $cmp$i38 = ($__wb$addr$0$i>>>0)<($add$ptr>>>0);
  $cmp2$i39 = ($__r$0$i37|0)!=(2);
  $4 = $cmp2$i39 & $cmp$i38;
  if (!($4)) {
   label = 13;
   break;
  }
  HEAP32[$__wn$i>>2] = $__wb$addr$0$i;
  $vtable$i41 = HEAP32[$temp$lvalue>>2]|0;
  $vfn$i42 = ((($vtable$i41)) + 12|0);
  $5 = HEAP32[$vfn$i42>>2]|0;
  __THREW__ = 0;
  $call$i53 = (invoke_iiiiiiiii($5|0,($temp$lvalue|0),($__mb$i32|0),($__wb$addr$0$i|0),($add$ptr|0),($__wn$i|0),($__buf$i33|0),($add$ptr$i35|0),($__bn$i34|0))|0);
  $6 = __THREW__; __THREW__ = 0;
  $7 = $6&1;
  if ($7) {
   label = 14;
   break;
  }
  $cmp4$i = ($call$i53|0)==(2);
  $8 = HEAP32[$__wn$i>>2]|0;
  $cmp5$i = ($8|0)==($__wb$addr$0$i|0);
  $or$cond$i43 = $cmp4$i | $cmp5$i;
  if ($or$cond$i43) {
   label = 8;
   break;
  } else {
   $__p$0$i46 = $__buf$i33;
  }
  while(1) {
   $10 = HEAP32[$__bn$i34>>2]|0;
   $cmp7$i47 = ($__p$0$i46>>>0)<($10>>>0);
   if (!($cmp7$i47)) {
    break;
   }
   $12 = HEAP8[$__p$0$i46>>0]|0;
   __THREW__ = 0;
   invoke_vii(376,($__ndflt|0),($12|0));
   $13 = __THREW__; __THREW__ = 0;
   $14 = $13&1;
   if ($14) {
    label = 14;
    break L5;
   }
   $incdec$ptr$i50 = ((($__p$0$i46)) + 1|0);
   $__p$0$i46 = $incdec$ptr$i50;
  }
  $11 = HEAP32[$__wn$i>>2]|0;
  $__r$0$i37 = $call$i53;$__wb$addr$0$i = $11;
 }
 do {
  if ((label|0) == 8) {
   __THREW__ = 0;
   invoke_vi(443,(16792|0));
   $9 = __THREW__; __THREW__ = 0;
   label = 14;
  }
  else if ((label|0) == 13) {
   __ZNSt3__26locale5facetD2Ev($temp$lvalue);
   $cmp = ($__c|0)==(-1);
   $shl = $__c << 1;
   $15 = $shl;
   $16 = $cmp ? (-1) : $15;
   $__size_$i$i$i$i56 = ((($__ndflt)) + 11|0);
   $17 = HEAP8[$__size_$i$i$i$i56>>0]|0;
   $tobool$i$i$i$i57 = ($17<<24>>24)<(0);
   $18 = HEAP32[$__ndflt>>2]|0;
   $cond$i$i$i62 = $tobool$i$i$i$i57 ? $18 : $__ndflt;
   __THREW__ = 0;
   $call13 = (invoke_iiiii(459,($16|0),($__set|0),($__msgid|0),($cond$i$i$i62|0))|0);
   $19 = __THREW__; __THREW__ = 0;
   $20 = $19&1;
   if ($20) {
    $34 = ___cxa_find_matching_catch_2()|0;
    $35 = tempRet0;
    $ehselector$slot$2 = $35;$exn$slot$2 = $34;
    break;
   }
   ;HEAP32[$agg$result>>2]=0|0;HEAP32[$agg$result+4>>2]=0|0;HEAP32[$agg$result+8>>2]=0|0;
   $__i$0$i$i25 = 0;
   while(1) {
    $exitcond$i$i26 = ($__i$0$i$i25|0)==(3);
    if ($exitcond$i$i26) {
     break;
    }
    $arrayidx$i$i28 = (($agg$result) + ($__i$0$i$i25<<2)|0);
    HEAP32[$arrayidx$i$i28>>2] = 0;
    $inc$i$i29 = (($__i$0$i$i25) + 1)|0;
    $__i$0$i$i25 = $inc$i$i29;
   }
   $__shared_owners_$i$i$i$i23 = ((($temp$lvalue14)) + 4|0);
   HEAP32[$__shared_owners_$i$i$i$i23>>2] = 0;
   HEAP32[$temp$lvalue14>>2] = (8924);
   $call23 = (_strlen($call13)|0);
   $add$ptr24 = (($cond$i$i$i62) + ($call23)|0);
   $sub$ptr$lhs$cast$i = $add$ptr24;
   $add$ptr5$i = ((($__buf$i)) + 128|0);
   $__nb$addr$0$i = $cond$i$i$i62;$__r$0$i = 0;
   L23: while(1) {
    $cmp$i = ($__nb$addr$0$i>>>0)<($add$ptr24>>>0);
    $cmp2$i = ($__r$0$i|0)!=(2);
    $23 = $cmp2$i & $cmp$i;
    if (!($23)) {
     label = 27;
     break;
    }
    HEAP32[$__nn$i>>2] = $__nb$addr$0$i;
    $vtable$i = HEAP32[$temp$lvalue14>>2]|0;
    $vfn$i = ((($vtable$i)) + 16|0);
    $24 = HEAP32[$vfn$i>>2]|0;
    $sub$ptr$rhs$cast$i = $__nb$addr$0$i;
    $sub$ptr$sub$i = (($sub$ptr$lhs$cast$i) - ($sub$ptr$rhs$cast$i))|0;
    $cmp3$i = ($sub$ptr$sub$i|0)>(32);
    $add$ptr$i = ((($__nb$addr$0$i)) + 32|0);
    $cond$i = $cmp3$i ? $add$ptr$i : $add$ptr24;
    __THREW__ = 0;
    $call$i12 = (invoke_iiiiiiiii($24|0,($temp$lvalue14|0),($__mb$i|0),($__nb$addr$0$i|0),($cond$i|0),($__nn$i|0),($__buf$i|0),($add$ptr5$i|0),($__bn$i|0))|0);
    $25 = __THREW__; __THREW__ = 0;
    $26 = $25&1;
    if ($26) {
     break;
    }
    $cmp6$i = ($call$i12|0)==(2);
    $27 = HEAP32[$__nn$i>>2]|0;
    $cmp7$i = ($27|0)==($__nb$addr$0$i|0);
    $or$cond$i = $cmp6$i | $cmp7$i;
    if ($or$cond$i) {
     label = 22;
     break;
    } else {
     $__p$0$i = $__buf$i;
    }
    while(1) {
     $29 = HEAP32[$__bn$i>>2]|0;
     $cmp9$i = ($__p$0$i>>>0)<($29>>>0);
     if (!($cmp9$i)) {
      break;
     }
     $31 = HEAP32[$__p$0$i>>2]|0;
     __THREW__ = 0;
     invoke_vii(450,($agg$result|0),($31|0));
     $32 = __THREW__; __THREW__ = 0;
     $33 = $32&1;
     if ($33) {
      break L23;
     }
     $incdec$ptr$i = ((($__p$0$i)) + 4|0);
     $__p$0$i = $incdec$ptr$i;
    }
    $30 = HEAP32[$__nn$i>>2]|0;
    $__nb$addr$0$i = $30;$__r$0$i = $call$i12;
   }
   if ((label|0) == 22) {
    __THREW__ = 0;
    invoke_vi(443,(16792|0));
    $28 = __THREW__; __THREW__ = 0;
   }
   else if ((label|0) == 27) {
    __ZNSt3__26locale5facetD2Ev($temp$lvalue14);
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__ndflt);
    STACKTOP = sp;return;
   }
   $36 = ___cxa_find_matching_catch_2()|0;
   $37 = tempRet0;
   __ZNSt3__26locale5facetD2Ev($temp$lvalue14);
   __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($agg$result);
   $ehselector$slot$2 = $37;$exn$slot$2 = $36;
  }
 } while(0);
 if ((label|0) == 14) {
  $21 = ___cxa_find_matching_catch_2()|0;
  $22 = tempRet0;
  __ZNSt3__26locale5facetD2Ev($temp$lvalue);
  $ehselector$slot$2 = $22;$exn$slot$2 = $21;
 }
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__ndflt);
 ___resumeException($exn$slot$2|0);
 // unreachable;
}
function __ZNKSt3__28messagesIwE8do_closeEi($this,$__c) {
 $this = $this|0;
 $__c = $__c|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNSt3__217__widen_from_utf8ILj32EED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__26locale5facetD2Ev($this);
 __ZdlPv($this);
 return;
}
function __ZNKSt3__27codecvtIDic11__mbstate_tE6do_outERS1_PKDiS5_RS5_PcS7_RS7_($this,$0,$frm,$frm_end,$frm_nxt,$to,$to_end,$to_nxt) {
 $this = $this|0;
 $0 = $0|0;
 $frm = $frm|0;
 $frm_end = $frm_end|0;
 $frm_nxt = $frm_nxt|0;
 $to = $to|0;
 $to_end = $to_end|0;
 $to_nxt = $to_nxt|0;
 var $1 = 0, $2 = 0, $_frm_nxt = 0, $_to_nxt = 0, $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $_frm_nxt = sp + 4|0;
 $_to_nxt = sp;
 HEAP32[$_frm_nxt>>2] = $frm;
 HEAP32[$_to_nxt>>2] = $to;
 $call = (__ZNSt3__2L12ucs4_to_utf8EPKjS1_RS1_PhS3_RS3_mNS_12codecvt_modeE($frm,$frm_end,$_frm_nxt,$to,$to_end,$_to_nxt,1114111,0)|0);
 $1 = HEAP32[$_frm_nxt>>2]|0;
 HEAP32[$frm_nxt>>2] = $1;
 $2 = HEAP32[$_to_nxt>>2]|0;
 HEAP32[$to_nxt>>2] = $2;
 STACKTOP = sp;return ($call|0);
}
function __ZNKSt3__27codecvtIDic11__mbstate_tE5do_inERS1_PKcS5_RS5_PDiS7_RS7_($this,$0,$frm,$frm_end,$frm_nxt,$to,$to_end,$to_nxt) {
 $this = $this|0;
 $0 = $0|0;
 $frm = $frm|0;
 $frm_end = $frm_end|0;
 $frm_nxt = $frm_nxt|0;
 $to = $to|0;
 $to_end = $to_end|0;
 $to_nxt = $to_nxt|0;
 var $1 = 0, $2 = 0, $_frm_nxt = 0, $_to_nxt = 0, $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $_frm_nxt = sp + 4|0;
 $_to_nxt = sp;
 HEAP32[$_frm_nxt>>2] = $frm;
 HEAP32[$_to_nxt>>2] = $to;
 $call = (__ZNSt3__2L12utf8_to_ucs4EPKhS1_RS1_PjS3_RS3_mNS_12codecvt_modeE($frm,$frm_end,$_frm_nxt,$to,$to_end,$_to_nxt,1114111,0)|0);
 $1 = HEAP32[$_frm_nxt>>2]|0;
 HEAP32[$frm_nxt>>2] = $1;
 $2 = HEAP32[$_to_nxt>>2]|0;
 HEAP32[$to_nxt>>2] = $2;
 STACKTOP = sp;return ($call|0);
}
function __ZNKSt3__27codecvtIDic11__mbstate_tE10do_unshiftERS1_PcS4_RS4_($this,$0,$to,$1,$to_nxt) {
 $this = $this|0;
 $0 = $0|0;
 $to = $to|0;
 $1 = $1|0;
 $to_nxt = $to_nxt|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$to_nxt>>2] = $to;
 return 3;
}
function __ZNKSt3__27codecvtIDic11__mbstate_tE11do_encodingEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 0;
}
function __ZNKSt3__27codecvtIDic11__mbstate_tE16do_always_noconvEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 0;
}
function __ZNKSt3__27codecvtIDic11__mbstate_tE9do_lengthERS1_PKcS5_j($this,$0,$frm,$frm_end,$mx) {
 $this = $this|0;
 $0 = $0|0;
 $frm = $frm|0;
 $frm_end = $frm_end|0;
 $mx = $mx|0;
 var $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = (__ZNSt3__2L19utf8_to_ucs4_lengthEPKhS1_jmNS_12codecvt_modeE($frm,$frm_end,$mx,1114111,0)|0);
 return ($call|0);
}
function __ZNKSt3__27codecvtIDic11__mbstate_tE13do_max_lengthEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 4;
}
function __ZNSt3__2L19utf8_to_ucs4_lengthEPKhS1_jmNS_12codecvt_modeE($frm,$frm_end,$mx,$Maxcode,$mode) {
 $frm = $frm|0;
 $frm_end = $frm_end|0;
 $mx = $mx|0;
 $Maxcode = $Maxcode|0;
 $mode = $mode|0;
 var $$off = 0, $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $add$ptr = 0, $add$ptr$frm = 0, $add$ptr103 = 0, $add$ptr177 = 0, $add$ptr46 = 0, $and = 0, $and134 = 0, $and143 = 0;
 var $and152 = 0, $and156 = 0, $and161 = 0, $and164 = 0, $and168 = 0, $and172 = 0, $and34 = 0, $and39 = 0, $and42 = 0, $and61 = 0, $and78 = 0, $and86 = 0, $and91 = 0, $and94 = 0, $and98 = 0, $arrayidx3 = 0, $arrayidx7 = 0, $cmp = 0, $cmp1 = 0, $cmp100 = 0;
 var $cmp107 = 0, $cmp112 = 0, $cmp12 = 0, $cmp13 = 0, $cmp135 = 0, $cmp144 = 0, $cmp15 = 0, $cmp153 = 0, $cmp157 = 0, $cmp174 = 0, $cmp18 = 0, $cmp22 = 0, $cmp26 = 0, $cmp31 = 0, $cmp35 = 0, $cmp43 = 0, $cmp49 = 0, $cmp5 = 0, $cmp54 = 0, $cmp62 = 0;
 var $cmp71 = 0, $cmp79 = 0, $cmp87 = 0, $cmp9 = 0, $conv14 = 0, $conv142 = 0, $conv151 = 0, $conv155 = 0, $conv33 = 0, $conv77 = 0, $conv85 = 0, $frm_nxt$1 = 0, $frm_nxt$4 = 0, $inc = 0, $incdec$ptr = 0, $nchar32_t$0 = 0, $or = 0, $or$cond = 0, $or$cond70 = 0, $or$cond72 = 0;
 var $or166 = 0, $or170 = 0, $or173 = 0, $or96 = 0, $or99 = 0, $shl = 0, $shl162 = 0, $shl165 = 0, $shl169 = 0, $shl92 = 0, $shl95 = 0, $sub$ptr$lhs$cast = 0, $sub$ptr$lhs$cast19478 = 0, $sub$ptr$rhs$cast = 0, $sub$ptr$rhs$cast29 = 0, $sub$ptr$rhs$cast29$lcssa$sink = 0, $sub$ptr$sub = 0, $sub$ptr$sub30 = 0, $sub$ptr$sub83$le = 0, $tobool = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $and = $mode & 4;
 $tobool = ($and|0)!=(0);
 $sub$ptr$lhs$cast = $frm_end;
 $sub$ptr$rhs$cast = $frm;
 $sub$ptr$sub = (($sub$ptr$lhs$cast) - ($sub$ptr$rhs$cast))|0;
 $cmp = ($sub$ptr$sub|0)>(2);
 $or$cond = $cmp & $tobool;
 if ($or$cond) {
  $0 = HEAP8[$frm>>0]|0;
  $cmp1 = ($0<<24>>24)==(-17);
  if ($cmp1) {
   $arrayidx3 = ((($frm)) + 1|0);
   $1 = HEAP8[$arrayidx3>>0]|0;
   $cmp5 = ($1<<24>>24)==(-69);
   if ($cmp5) {
    $arrayidx7 = ((($frm)) + 2|0);
    $2 = HEAP8[$arrayidx7>>0]|0;
    $cmp9 = ($2<<24>>24)==(-65);
    $add$ptr = ((($frm)) + 3|0);
    $add$ptr$frm = $cmp9 ? $add$ptr : $frm;
    $frm_nxt$1 = $add$ptr$frm;$nchar32_t$0 = 0;
   } else {
    $frm_nxt$1 = $frm;$nchar32_t$0 = 0;
   }
  } else {
   $frm_nxt$1 = $frm;$nchar32_t$0 = 0;
  }
 } else {
  $frm_nxt$1 = $frm;$nchar32_t$0 = 0;
 }
 L5: while(1) {
  $cmp12 = ($frm_nxt$1>>>0)<($frm_end>>>0);
  $cmp13 = ($nchar32_t$0>>>0)<($mx>>>0);
  $or$cond70 = $cmp13 & $cmp12;
  if (!($or$cond70)) {
   label = 30;
   break;
  }
  $3 = HEAP8[$frm_nxt$1>>0]|0;
  $conv14 = $3&255;
  $cmp15 = ($3<<24>>24)>(-1);
  $incdec$ptr = ((($frm_nxt$1)) + 1|0);
  do {
   if ($cmp15) {
    $cmp18 = ($conv14>>>0)>($Maxcode>>>0);
    if ($cmp18) {
     label = 30;
     break L5;
    } else {
     $frm_nxt$4 = $incdec$ptr;
    }
   } else {
    $cmp22 = ($3&255)<(194);
    if ($cmp22) {
     label = 30;
     break L5;
    }
    $cmp26 = ($3&255)<(224);
    $add$ptr46 = ((($frm_nxt$1)) + 2|0);
    $sub$ptr$rhs$cast29 = $frm_nxt$1;
    $sub$ptr$sub30 = (($sub$ptr$lhs$cast) - ($sub$ptr$rhs$cast29))|0;
    if ($cmp26) {
     $cmp31 = ($sub$ptr$sub30|0)<(2);
     if ($cmp31) {
      label = 30;
      break L5;
     }
     $4 = HEAP8[$incdec$ptr>>0]|0;
     $conv33 = $4&255;
     $and34 = $conv33 & 192;
     $cmp35 = ($and34|0)==(128);
     if (!($cmp35)) {
      label = 30;
      break L5;
     }
     $and39 = $conv14 << 6;
     $shl = $and39 & 1984;
     $and42 = $conv33 & 63;
     $or = $and42 | $shl;
     $cmp43 = ($or>>>0)>($Maxcode>>>0);
     if ($cmp43) {
      label = 30;
      break L5;
     } else {
      $frm_nxt$4 = $add$ptr46;
      break;
     }
    }
    $cmp49 = ($3&255)<(240);
    $add$ptr103 = ((($frm_nxt$1)) + 3|0);
    if ($cmp49) {
     $cmp54 = ($sub$ptr$sub30|0)<(3);
     if ($cmp54) {
      label = 30;
      break L5;
     }
     $5 = HEAP8[$incdec$ptr>>0]|0;
     $6 = HEAP8[$add$ptr46>>0]|0;
     $conv77 = $5&255;
     $and61 = $conv77 & 224;
     switch ($3<<24>>24) {
     case -32:  {
      $cmp62 = ($and61|0)==(160);
      if (!($cmp62)) {
       $sub$ptr$rhs$cast29$lcssa$sink = $sub$ptr$rhs$cast29;
       break L5;
      }
      break;
     }
     case -19:  {
      $cmp71 = ($and61|0)==(128);
      if (!($cmp71)) {
       $sub$ptr$rhs$cast29$lcssa$sink = $sub$ptr$rhs$cast29;
       break L5;
      }
      break;
     }
     default: {
      $and78 = $conv77 & 192;
      $cmp79 = ($and78|0)==(128);
      if (!($cmp79)) {
       $sub$ptr$rhs$cast29$lcssa$sink = $sub$ptr$rhs$cast29;
       break L5;
      }
     }
     }
     $conv85 = $6&255;
     $and86 = $conv85 & 192;
     $cmp87 = ($and86|0)==(128);
     if (!($cmp87)) {
      label = 30;
      break L5;
     }
     $and91 = $conv14 << 12;
     $shl92 = $and91 & 61440;
     $and94 = $conv77 << 6;
     $shl95 = $and94 & 4032;
     $or96 = $shl95 | $shl92;
     $and98 = $conv85 & 63;
     $or99 = $or96 | $and98;
     $cmp100 = ($or99>>>0)>($Maxcode>>>0);
     if ($cmp100) {
      label = 30;
      break L5;
     } else {
      $frm_nxt$4 = $add$ptr103;
      break;
     }
    }
    $cmp107 = ($3&255)>(244);
    $cmp112 = ($sub$ptr$sub30|0)<(4);
    $or$cond72 = $cmp112 | $cmp107;
    if ($or$cond72) {
     label = 30;
     break L5;
    }
    $7 = HEAP8[$incdec$ptr>>0]|0;
    $8 = HEAP8[$add$ptr46>>0]|0;
    $9 = HEAP8[$add$ptr103>>0]|0;
    $conv142 = $7&255;
    switch ($3<<24>>24) {
    case -16:  {
     $$off = (($7) + 112)<<24>>24;
     $10 = ($$off&255)<(48);
     if (!($10)) {
      $sub$ptr$rhs$cast29$lcssa$sink = $sub$ptr$rhs$cast29;
      break L5;
     }
     break;
    }
    case -12:  {
     $and134 = $conv142 & 240;
     $cmp135 = ($and134|0)==(128);
     if (!($cmp135)) {
      $sub$ptr$rhs$cast29$lcssa$sink = $sub$ptr$rhs$cast29;
      break L5;
     }
     break;
    }
    default: {
     $and143 = $conv142 & 192;
     $cmp144 = ($and143|0)==(128);
     if (!($cmp144)) {
      $sub$ptr$rhs$cast29$lcssa$sink = $sub$ptr$rhs$cast29;
      break L5;
     }
    }
    }
    $conv151 = $8&255;
    $and152 = $conv151 & 192;
    $cmp153 = ($and152|0)==(128);
    if (!($cmp153)) {
     label = 30;
     break L5;
    }
    $conv155 = $9&255;
    $and156 = $conv155 & 192;
    $cmp157 = ($and156|0)==(128);
    if (!($cmp157)) {
     label = 30;
     break L5;
    }
    $and161 = $conv14 << 18;
    $shl162 = $and161 & 1835008;
    $and164 = $conv142 << 12;
    $shl165 = $and164 & 258048;
    $or166 = $shl165 | $shl162;
    $and168 = $conv151 << 6;
    $shl169 = $and168 & 4032;
    $or170 = $or166 | $shl169;
    $and172 = $conv155 & 63;
    $or173 = $or170 | $and172;
    $cmp174 = ($or173>>>0)>($Maxcode>>>0);
    $add$ptr177 = ((($frm_nxt$1)) + 4|0);
    if ($cmp174) {
     label = 30;
     break L5;
    } else {
     $frm_nxt$4 = $add$ptr177;
    }
   }
  } while(0);
  $inc = (($nchar32_t$0) + 1)|0;
  $frm_nxt$1 = $frm_nxt$4;$nchar32_t$0 = $inc;
 }
 if ((label|0) == 30) {
  $sub$ptr$lhs$cast19478 = $frm_nxt$1;
  $sub$ptr$rhs$cast29$lcssa$sink = $sub$ptr$lhs$cast19478;
 }
 $sub$ptr$sub83$le = (($sub$ptr$rhs$cast29$lcssa$sink) - ($sub$ptr$rhs$cast))|0;
 return ($sub$ptr$sub83$le|0);
}
function __ZNSt3__2L12utf8_to_ucs4EPKhS1_RS1_PjS3_RS3_mNS_12codecvt_modeE($frm,$frm_end,$frm_nxt,$to,$to_end,$to_nxt,$Maxcode,$mode) {
 $frm = $frm|0;
 $frm_end = $frm_end|0;
 $frm_nxt = $frm_nxt|0;
 $to = $to|0;
 $to_end = $to_end|0;
 $to_nxt = $to_nxt|0;
 $Maxcode = $Maxcode|0;
 $mode = $mode|0;
 var $$off = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $add$ptr = 0, $add$ptr168 = 0, $add$ptr168$sink = 0, $add$ptr48 = 0;
 var $add$ptr99 = 0, $and = 0, $and131 = 0, $and137 = 0, $and143 = 0, $and146 = 0, $and152 = 0, $and155 = 0, $and159 = 0, $and163 = 0, $and37 = 0, $and42 = 0, $and44 = 0, $and65 = 0, $and76 = 0, $and81 = 0, $and87 = 0, $and90 = 0, $and94 = 0, $arrayidx3 = 0;
 var $arrayidx7 = 0, $cmp = 0, $cmp1 = 0, $cmp107 = 0, $cmp112 = 0, $cmp12 = 0, $cmp13 = 0, $cmp132 = 0, $cmp138 = 0, $cmp144 = 0, $cmp147 = 0, $cmp15 = 0, $cmp165 = 0, $cmp18 = 0, $cmp23 = 0, $cmp27 = 0, $cmp32 = 0, $cmp38 = 0, $cmp45 = 0, $cmp5 = 0;
 var $cmp52 = 0, $cmp57 = 0, $cmp66 = 0, $cmp72 = 0, $cmp77 = 0, $cmp82 = 0, $cmp9 = 0, $cmp96 = 0, $conv136 = 0, $conv14 = 0, $conv142 = 0, $conv145 = 0, $conv36 = 0, $conv75 = 0, $conv80 = 0, $incdec$ptr = 0, $incdec$ptr184 = 0, $or = 0, $or157 = 0, $or161 = 0;
 var $or164 = 0, $or92 = 0, $or95 = 0, $retval$9 = 0, $shl = 0, $shl153 = 0, $shl156 = 0, $shl160 = 0, $shl88 = 0, $shl91 = 0, $sub$ptr$lhs$cast = 0, $sub$ptr$rhs$cast = 0, $sub$ptr$rhs$cast30 = 0, $sub$ptr$sub = 0, $sub$ptr$sub31 = 0, $tobool = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$frm_nxt>>2] = $frm;
 HEAP32[$to_nxt>>2] = $to;
 $and = $mode & 4;
 $tobool = ($and|0)==(0);
 $sub$ptr$lhs$cast = $frm_end;
 if (!($tobool)) {
  $0 = HEAP32[$frm_nxt>>2]|0;
  $sub$ptr$rhs$cast = $0;
  $sub$ptr$sub = (($sub$ptr$lhs$cast) - ($sub$ptr$rhs$cast))|0;
  $cmp = ($sub$ptr$sub|0)>(2);
  if ($cmp) {
   $1 = HEAP8[$0>>0]|0;
   $cmp1 = ($1<<24>>24)==(-17);
   if ($cmp1) {
    $arrayidx3 = ((($0)) + 1|0);
    $2 = HEAP8[$arrayidx3>>0]|0;
    $cmp5 = ($2<<24>>24)==(-69);
    if ($cmp5) {
     $arrayidx7 = ((($0)) + 2|0);
     $3 = HEAP8[$arrayidx7>>0]|0;
     $cmp9 = ($3<<24>>24)==(-65);
     if ($cmp9) {
      $add$ptr = ((($0)) + 3|0);
      HEAP32[$frm_nxt>>2] = $add$ptr;
     }
    }
   }
  }
 }
 L7: while(1) {
  $4 = HEAP32[$frm_nxt>>2]|0;
  $cmp12 = ($4>>>0)<($frm_end>>>0);
  if (!($cmp12)) {
   $retval$9 = 0;
   break;
  }
  $5 = HEAP32[$to_nxt>>2]|0;
  $cmp13 = ($5>>>0)<($to_end>>>0);
  if (!($cmp13)) {
   $retval$9 = 1;
   break;
  }
  $6 = HEAP8[$4>>0]|0;
  $conv14 = $6&255;
  $cmp15 = ($6<<24>>24)>(-1);
  $incdec$ptr = ((($4)) + 1|0);
  do {
   if ($cmp15) {
    $cmp18 = ($conv14>>>0)>($Maxcode>>>0);
    if ($cmp18) {
     $retval$9 = 2;
     break L7;
    }
    HEAP32[$5>>2] = $conv14;
    $add$ptr168$sink = $incdec$ptr;
   } else {
    $cmp23 = ($6&255)<(194);
    if ($cmp23) {
     $retval$9 = 2;
     break L7;
    }
    $cmp27 = ($6&255)<(224);
    $sub$ptr$rhs$cast30 = $4;
    $add$ptr48 = ((($4)) + 2|0);
    $sub$ptr$sub31 = (($sub$ptr$lhs$cast) - ($sub$ptr$rhs$cast30))|0;
    if ($cmp27) {
     $cmp32 = ($sub$ptr$sub31|0)<(2);
     if ($cmp32) {
      $retval$9 = 1;
      break L7;
     }
     $7 = HEAP8[$incdec$ptr>>0]|0;
     $conv36 = $7&255;
     $and37 = $conv36 & 192;
     $cmp38 = ($and37|0)==(128);
     if (!($cmp38)) {
      $retval$9 = 2;
      break L7;
     }
     $and42 = $conv14 << 6;
     $shl = $and42 & 1984;
     $and44 = $conv36 & 63;
     $or = $and44 | $shl;
     $cmp45 = ($or>>>0)>($Maxcode>>>0);
     if ($cmp45) {
      $retval$9 = 2;
      break L7;
     }
     HEAP32[$5>>2] = $or;
     $add$ptr168$sink = $add$ptr48;
     break;
    }
    $cmp52 = ($6&255)<(240);
    $add$ptr99 = ((($4)) + 3|0);
    if ($cmp52) {
     $cmp57 = ($sub$ptr$sub31|0)<(3);
     if ($cmp57) {
      $retval$9 = 1;
      break L7;
     }
     $8 = HEAP8[$incdec$ptr>>0]|0;
     $9 = HEAP8[$add$ptr48>>0]|0;
     $conv75 = $8&255;
     $and65 = $conv75 & 224;
     switch ($6<<24>>24) {
     case -32:  {
      $cmp66 = ($and65|0)==(160);
      if (!($cmp66)) {
       $retval$9 = 2;
       break L7;
      }
      break;
     }
     case -19:  {
      $cmp72 = ($and65|0)==(128);
      if (!($cmp72)) {
       $retval$9 = 2;
       break L7;
      }
      break;
     }
     default: {
      $and76 = $conv75 & 192;
      $cmp77 = ($and76|0)==(128);
      if (!($cmp77)) {
       $retval$9 = 2;
       break L7;
      }
     }
     }
     $conv80 = $9&255;
     $and81 = $conv80 & 192;
     $cmp82 = ($and81|0)==(128);
     if (!($cmp82)) {
      $retval$9 = 2;
      break L7;
     }
     $and87 = $conv14 << 12;
     $shl88 = $and87 & 61440;
     $and90 = $conv75 << 6;
     $shl91 = $and90 & 4032;
     $or92 = $shl91 | $shl88;
     $and94 = $conv80 & 63;
     $or95 = $or92 | $and94;
     $cmp96 = ($or95>>>0)>($Maxcode>>>0);
     if ($cmp96) {
      $retval$9 = 2;
      break L7;
     }
     HEAP32[$5>>2] = $or95;
     $add$ptr168$sink = $add$ptr99;
     break;
    }
    $cmp107 = ($6&255)<(245);
    if (!($cmp107)) {
     $retval$9 = 2;
     break L7;
    }
    $cmp112 = ($sub$ptr$sub31|0)<(4);
    if ($cmp112) {
     $retval$9 = 1;
     break L7;
    }
    $10 = HEAP8[$incdec$ptr>>0]|0;
    $11 = HEAP8[$add$ptr48>>0]|0;
    $12 = HEAP8[$add$ptr99>>0]|0;
    $conv136 = $10&255;
    switch ($6<<24>>24) {
    case -16:  {
     $$off = (($10) + 112)<<24>>24;
     $13 = ($$off&255)<(48);
     if (!($13)) {
      $retval$9 = 2;
      break L7;
     }
     break;
    }
    case -12:  {
     $and131 = $conv136 & 240;
     $cmp132 = ($and131|0)==(128);
     if (!($cmp132)) {
      $retval$9 = 2;
      break L7;
     }
     break;
    }
    default: {
     $and137 = $conv136 & 192;
     $cmp138 = ($and137|0)==(128);
     if (!($cmp138)) {
      $retval$9 = 2;
      break L7;
     }
    }
    }
    $conv142 = $11&255;
    $and143 = $conv142 & 192;
    $cmp144 = ($and143|0)==(128);
    if (!($cmp144)) {
     $retval$9 = 2;
     break L7;
    }
    $conv145 = $12&255;
    $and146 = $conv145 & 192;
    $cmp147 = ($and146|0)==(128);
    if (!($cmp147)) {
     $retval$9 = 2;
     break L7;
    }
    $and152 = $conv14 << 18;
    $shl153 = $and152 & 1835008;
    $and155 = $conv136 << 12;
    $shl156 = $and155 & 258048;
    $or157 = $shl156 | $shl153;
    $and159 = $conv142 << 6;
    $shl160 = $and159 & 4032;
    $or161 = $or157 | $shl160;
    $and163 = $conv145 & 63;
    $or164 = $or161 | $and163;
    $cmp165 = ($or164>>>0)>($Maxcode>>>0);
    if ($cmp165) {
     $retval$9 = 2;
     break L7;
    }
    HEAP32[$5>>2] = $or164;
    $add$ptr168 = ((($4)) + 4|0);
    $add$ptr168$sink = $add$ptr168;
   }
  } while(0);
  HEAP32[$frm_nxt>>2] = $add$ptr168$sink;
  $14 = HEAP32[$to_nxt>>2]|0;
  $incdec$ptr184 = ((($14)) + 4|0);
  HEAP32[$to_nxt>>2] = $incdec$ptr184;
 }
 return ($retval$9|0);
}
function __ZNSt3__2L12ucs4_to_utf8EPKjS1_RS1_PhS3_RS3_mNS_12codecvt_modeE($frm,$frm_end,$frm_nxt,$to,$to_end,$to_nxt,$Maxcode,$mode) {
 $frm = $frm|0;
 $frm_end = $frm_end|0;
 $frm_nxt = $frm_nxt|0;
 $to = $to|0;
 $to_end = $to_end|0;
 $to_nxt = $to_nxt|0;
 $Maxcode = $Maxcode|0;
 $mode = $mode|0;
 var $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $and = 0, $and30 = 0, $and47 = 0, $and6 = 0, $and67 = 0;
 var $cmp = 0, $cmp11 = 0, $cmp16 = 0, $cmp20 = 0, $cmp25 = 0, $cmp35 = 0, $cmp40 = 0, $cmp5 = 0, $cmp60 = 0, $cmp7 = 0, $cmp8 = 0, $conv = 0, $conv28 = 0, $conv32 = 0, $conv45 = 0, $conv50 = 0, $conv65 = 0, $conv70 = 0, $incdec$ptr = 0, $incdec$ptr19 = 0;
 var $incdec$ptr2 = 0, $incdec$ptr29 = 0, $incdec$ptr3 = 0, $incdec$ptr33 = 0, $incdec$ptr46 = 0, $incdec$ptr51 = 0, $incdec$ptr55 = 0, $incdec$ptr71 = 0, $incdec$ptr76 = 0, $incdec$ptr80 = 0, $incdec$ptr84 = 0, $or = 0, $or$cond = 0, $or31 = 0, $or44 = 0, $or49 = 0, $or64 = 0, $or69 = 0, $retval$2 = 0, $shr = 0;
 var $shr43 = 0, $shr48 = 0, $shr63 = 0, $shr68 = 0, $sub$ptr$lhs$cast = 0, $sub$ptr$rhs$cast = 0, $sub$ptr$rhs$cast14 = 0, $sub$ptr$rhs$cast23 = 0, $sub$ptr$rhs$cast38 = 0, $sub$ptr$sub = 0, $sub$ptr$sub15 = 0, $sub$ptr$sub24 = 0, $sub$ptr$sub39 = 0, $tobool = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$frm_nxt>>2] = $frm;
 HEAP32[$to_nxt>>2] = $to;
 $and = $mode & 2;
 $tobool = ($and|0)==(0);
 $sub$ptr$lhs$cast = $to_end;
 if ($tobool) {
  label = 4;
 } else {
  $sub$ptr$rhs$cast = $to;
  $sub$ptr$sub = (($sub$ptr$lhs$cast) - ($sub$ptr$rhs$cast))|0;
  $cmp = ($sub$ptr$sub|0)<(3);
  if ($cmp) {
   $retval$2 = 1;
  } else {
   $incdec$ptr = ((($to)) + 1|0);
   HEAP32[$to_nxt>>2] = $incdec$ptr;
   HEAP8[$to>>0] = -17;
   $0 = HEAP32[$to_nxt>>2]|0;
   $incdec$ptr2 = ((($0)) + 1|0);
   HEAP32[$to_nxt>>2] = $incdec$ptr2;
   HEAP8[$0>>0] = -69;
   $1 = HEAP32[$to_nxt>>2]|0;
   $incdec$ptr3 = ((($1)) + 1|0);
   HEAP32[$to_nxt>>2] = $incdec$ptr3;
   HEAP8[$1>>0] = -65;
   label = 4;
  }
 }
 L4: do {
  if ((label|0) == 4) {
   $$pre = HEAP32[$frm_nxt>>2]|0;
   $2 = $$pre;
   while(1) {
    $cmp5 = ($2>>>0)<($frm_end>>>0);
    if (!($cmp5)) {
     $retval$2 = 0;
     break L4;
    }
    $3 = HEAP32[$2>>2]|0;
    $and6 = $3 & -2048;
    $cmp7 = ($and6|0)==(55296);
    $cmp8 = ($3>>>0)>($Maxcode>>>0);
    $or$cond = $cmp8 | $cmp7;
    if ($or$cond) {
     $retval$2 = 2;
     break L4;
    }
    $cmp11 = ($3>>>0)<(128);
    do {
     if ($cmp11) {
      $4 = HEAP32[$to_nxt>>2]|0;
      $sub$ptr$rhs$cast14 = $4;
      $sub$ptr$sub15 = (($sub$ptr$lhs$cast) - ($sub$ptr$rhs$cast14))|0;
      $cmp16 = ($sub$ptr$sub15|0)<(1);
      if ($cmp16) {
       $retval$2 = 1;
       break L4;
      }
      $conv = $3&255;
      $incdec$ptr19 = ((($4)) + 1|0);
      HEAP32[$to_nxt>>2] = $incdec$ptr19;
      HEAP8[$4>>0] = $conv;
     } else {
      $cmp20 = ($3>>>0)<(2048);
      $and30 = $3 & 63;
      $or31 = $and30 | 128;
      $conv32 = $or31&255;
      if ($cmp20) {
       $5 = HEAP32[$to_nxt>>2]|0;
       $sub$ptr$rhs$cast23 = $5;
       $sub$ptr$sub24 = (($sub$ptr$lhs$cast) - ($sub$ptr$rhs$cast23))|0;
       $cmp25 = ($sub$ptr$sub24|0)<(2);
       if ($cmp25) {
        $retval$2 = 1;
        break L4;
       }
       $shr = $3 >>> 6;
       $or = $shr | 192;
       $conv28 = $or&255;
       $incdec$ptr29 = ((($5)) + 1|0);
       HEAP32[$to_nxt>>2] = $incdec$ptr29;
       HEAP8[$5>>0] = $conv28;
       $6 = HEAP32[$to_nxt>>2]|0;
       $incdec$ptr33 = ((($6)) + 1|0);
       HEAP32[$to_nxt>>2] = $incdec$ptr33;
       HEAP8[$6>>0] = $conv32;
       break;
      }
      $cmp35 = ($3>>>0)<(65536);
      $7 = HEAP32[$to_nxt>>2]|0;
      $sub$ptr$rhs$cast38 = $7;
      $sub$ptr$sub39 = (($sub$ptr$lhs$cast) - ($sub$ptr$rhs$cast38))|0;
      $and47 = $3 >>> 6;
      $shr48 = $and47 & 63;
      $or49 = $shr48 | 128;
      $incdec$ptr46 = ((($7)) + 1|0);
      $conv50 = $or49&255;
      if ($cmp35) {
       $cmp40 = ($sub$ptr$sub39|0)<(3);
       if ($cmp40) {
        $retval$2 = 1;
        break L4;
       }
       $shr43 = $3 >>> 12;
       $or44 = $shr43 | 224;
       $conv45 = $or44&255;
       HEAP32[$to_nxt>>2] = $incdec$ptr46;
       HEAP8[$7>>0] = $conv45;
       $8 = HEAP32[$to_nxt>>2]|0;
       $incdec$ptr51 = ((($8)) + 1|0);
       HEAP32[$to_nxt>>2] = $incdec$ptr51;
       HEAP8[$8>>0] = $conv50;
       $9 = HEAP32[$to_nxt>>2]|0;
       $incdec$ptr55 = ((($9)) + 1|0);
       HEAP32[$to_nxt>>2] = $incdec$ptr55;
       HEAP8[$9>>0] = $conv32;
       break;
      } else {
       $cmp60 = ($sub$ptr$sub39|0)<(4);
       if ($cmp60) {
        $retval$2 = 1;
        break L4;
       }
       $shr63 = $3 >>> 18;
       $or64 = $shr63 | 240;
       $conv65 = $or64&255;
       HEAP32[$to_nxt>>2] = $incdec$ptr46;
       HEAP8[$7>>0] = $conv65;
       $and67 = $3 >>> 12;
       $shr68 = $and67 & 63;
       $or69 = $shr68 | 128;
       $conv70 = $or69&255;
       $10 = HEAP32[$to_nxt>>2]|0;
       $incdec$ptr71 = ((($10)) + 1|0);
       HEAP32[$to_nxt>>2] = $incdec$ptr71;
       HEAP8[$10>>0] = $conv70;
       $11 = HEAP32[$to_nxt>>2]|0;
       $incdec$ptr76 = ((($11)) + 1|0);
       HEAP32[$to_nxt>>2] = $incdec$ptr76;
       HEAP8[$11>>0] = $conv50;
       $12 = HEAP32[$to_nxt>>2]|0;
       $incdec$ptr80 = ((($12)) + 1|0);
       HEAP32[$to_nxt>>2] = $incdec$ptr80;
       HEAP8[$12>>0] = $conv32;
       break;
      }
     }
    } while(0);
    $13 = HEAP32[$frm_nxt>>2]|0;
    $incdec$ptr84 = ((($13)) + 4|0);
    HEAP32[$frm_nxt>>2] = $incdec$ptr84;
    $2 = $incdec$ptr84;
   }
  }
 } while(0);
 return ($retval$2|0);
}
function __ZNSt3__216__narrow_to_utf8ILj32EED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__26locale5facetD2Ev($this);
 __ZdlPv($this);
 return;
}
function __ZNKSt3__27codecvtIcc11__mbstate_tE6do_outERS1_PKcS5_RS5_PcS7_RS7_($this,$0,$frm,$1,$frm_nxt,$to,$2,$to_nxt) {
 $this = $this|0;
 $0 = $0|0;
 $frm = $frm|0;
 $1 = $1|0;
 $frm_nxt = $frm_nxt|0;
 $to = $to|0;
 $2 = $2|0;
 $to_nxt = $to_nxt|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$frm_nxt>>2] = $frm;
 HEAP32[$to_nxt>>2] = $to;
 return 3;
}
function __ZNKSt3__27codecvtIcc11__mbstate_tE5do_inERS1_PKcS5_RS5_PcS7_RS7_($this,$0,$frm,$1,$frm_nxt,$to,$2,$to_nxt) {
 $this = $this|0;
 $0 = $0|0;
 $frm = $frm|0;
 $1 = $1|0;
 $frm_nxt = $frm_nxt|0;
 $to = $to|0;
 $2 = $2|0;
 $to_nxt = $to_nxt|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$frm_nxt>>2] = $frm;
 HEAP32[$to_nxt>>2] = $to;
 return 3;
}
function __ZNKSt3__27codecvtIcc11__mbstate_tE10do_unshiftERS1_PcS4_RS4_($this,$0,$to,$1,$to_nxt) {
 $this = $this|0;
 $0 = $0|0;
 $to = $to|0;
 $1 = $1|0;
 $to_nxt = $to_nxt|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$to_nxt>>2] = $to;
 return 3;
}
function __ZNKSt3__27codecvtIcc11__mbstate_tE11do_encodingEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 1;
}
function __ZNKSt3__27codecvtIcc11__mbstate_tE16do_always_noconvEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 1;
}
function __ZNKSt3__27codecvtIcc11__mbstate_tE9do_lengthERS1_PKcS5_j($this,$0,$frm,$end,$mx) {
 $this = $this|0;
 $0 = $0|0;
 $frm = $frm|0;
 $end = $end|0;
 $mx = $mx|0;
 var $$sroa$speculated = 0, $cmp$i$i$i = 0, $sub$ptr$lhs$cast = 0, $sub$ptr$rhs$cast = 0, $sub$ptr$sub = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $sub$ptr$lhs$cast = $end;
 $sub$ptr$rhs$cast = $frm;
 $sub$ptr$sub = (($sub$ptr$lhs$cast) - ($sub$ptr$rhs$cast))|0;
 $cmp$i$i$i = ($sub$ptr$sub>>>0)<($mx>>>0);
 $$sroa$speculated = $cmp$i$i$i ? $sub$ptr$sub : $mx;
 return ($$sroa$speculated|0);
}
function __ZNKSt3__27codecvtIcc11__mbstate_tE13do_max_lengthEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 1;
}
function __ZNKSt3__27codecvtIwc11__mbstate_tE6do_outERS1_PKwS5_RS5_PcS7_RS7_($this,$st,$frm,$frm_end,$frm_nxt,$to,$to_end,$to_nxt) {
 $this = $this|0;
 $st = $st|0;
 $frm = $frm|0;
 $frm_end = $frm_end|0;
 $frm_nxt = $frm_nxt|0;
 $to = $to|0;
 $to_end = $to_end|0;
 $to_nxt = $to_nxt|0;
 var $$pre = 0, $$pre162 = 0, $$pre163 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $7 = 0, $8 = 0, $9 = 0, $__l = 0, $add$ptr = 0, $add$ptr27 = 0, $call$i = 0, $call$i56 = 0, $call$i69 = 0, $call1$i = 0, $call1$i57 = 0, $call1$i70 = 0, $cmp = 0, $cmp13 = 0, $cmp17 = 0, $cmp2 = 0, $cmp28 = 0;
 var $cmp31 = 0, $cmp35 = 0, $cmp4 = 0, $cmp41 = 0, $cmp5 = 0, $cmp54 = 0, $cmp56 = 0, $cond = 0, $dec = 0, $fend$0 = 0, $fend$0$lcssa = 0, $fend$1 = 0, $fend$2 = 0, $fend$2$lcssa = 0, $fend$5$ph85 = 0, $frm$addr$0 = 0, $frm$addr$1 = 0, $incdec$ptr = 0, $incdec$ptr21 = 0, $incdec$ptr48 = 0;
 var $incdec$ptr49 = 0, $incdec$ptr52 = 0, $incdec$ptr60 = 0, $n$0 = 0, $not$cmp69 = 0, $or$cond = 0, $p$0 = 0, $retval$1 = 0, $retval$3$ph = 0, $retval$4 = 0, $save_state = 0, $sub$ptr$div = 0, $sub$ptr$lhs$cast = 0, $sub$ptr$lhs$cast7 = 0, $sub$ptr$rhs$cast = 0, $sub$ptr$rhs$cast8 = 0, $sub$ptr$sub = 0, $sub$ptr$sub40 = 0, $sub$ptr$sub9 = 0, $tmp = 0;
 var $to$addr$0 = 0, $tobool = 0, $tobool$i$i$i = 0, $tobool$i$i$i63 = 0, $tobool$i$i$i76 = 0, $tobool$i$i2$i = 0, $tobool$i$i2$i58 = 0, $tobool$i$i2$i71 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $save_state = sp;
 $tmp = sp + 8|0;
 $fend$0 = $frm;
 while(1) {
  $cmp = ($fend$0|0)==($frm_end|0);
  if ($cmp) {
   $fend$0$lcssa = $frm_end;
   break;
  }
  $0 = HEAP32[$fend$0>>2]|0;
  $cmp2 = ($0|0)==(0);
  if ($cmp2) {
   $fend$0$lcssa = $fend$0;
   break;
  }
  $incdec$ptr = ((($fend$0)) + 4|0);
  $fend$0 = $incdec$ptr;
 }
 HEAP32[$to_nxt>>2] = $to;
 HEAP32[$frm_nxt>>2] = $frm;
 $sub$ptr$lhs$cast7 = $to_end;
 $__l = ((($this)) + 8|0);
 $fend$1 = $fend$0$lcssa;$frm$addr$0 = $frm;$to$addr$0 = $to;
 L6: while(1) {
  $cmp4 = ($frm$addr$0|0)==($frm_end|0);
  $cmp5 = ($to$addr$0|0)==($to_end|0);
  $or$cond = $cmp5 | $cmp4;
  if ($or$cond) {
   $60 = $frm$addr$0;
   label = 53;
   break;
  }
  $1 = $st;
  $2 = $1;
  $3 = HEAP32[$2>>2]|0;
  $4 = (($1) + 4)|0;
  $5 = $4;
  $6 = HEAP32[$5>>2]|0;
  $7 = $save_state;
  $8 = $7;
  HEAP32[$8>>2] = $3;
  $9 = (($7) + 4)|0;
  $10 = $9;
  HEAP32[$10>>2] = $6;
  $sub$ptr$lhs$cast = $fend$1;
  $sub$ptr$rhs$cast = $frm$addr$0;
  $sub$ptr$sub = (($sub$ptr$lhs$cast) - ($sub$ptr$rhs$cast))|0;
  $sub$ptr$div = $sub$ptr$sub >> 2;
  $sub$ptr$rhs$cast8 = $to$addr$0;
  $sub$ptr$sub9 = (($sub$ptr$lhs$cast7) - ($sub$ptr$rhs$cast8))|0;
  $11 = HEAP32[$__l>>2]|0;
  $call$i = (___uselocale($11)|0);
  __THREW__ = 0;
  $call1$i = (invoke_iiiiii(460,($to$addr$0|0),($frm_nxt|0),($sub$ptr$div|0),($sub$ptr$sub9|0),($st|0))|0);
  $12 = __THREW__; __THREW__ = 0;
  $13 = $12&1;
  if ($13) {
   label = 11;
   break;
  }
  $tobool$i$i2$i = ($call$i|0)==(0|0);
  if (!($tobool$i$i2$i)) {
   __THREW__ = 0;
   (invoke_ii(395,($call$i|0))|0);
   $14 = __THREW__; __THREW__ = 0;
   $15 = $14&1;
   if ($15) {
    label = 10;
    break;
   }
  }
  switch ($call1$i|0) {
  case -1:  {
   label = 16;
   break L6;
   break;
  }
  case 0:  {
   $retval$3$ph = 1;
   label = 50;
   break L6;
   break;
  }
  default: {
  }
  }
  $41 = HEAP32[$to_nxt>>2]|0;
  $add$ptr27 = (($41) + ($call1$i)|0);
  HEAP32[$to_nxt>>2] = $add$ptr27;
  $cmp28 = ($add$ptr27|0)==($to_end|0);
  if ($cmp28) {
   label = 51;
   break;
  }
  $cmp31 = ($fend$1|0)==($frm_end|0);
  if ($cmp31) {
   $$pre = HEAP32[$frm_nxt>>2]|0;
   $61 = $add$ptr27;$62 = $$pre;$fend$5$ph85 = $frm_end;
  } else {
   $42 = HEAP32[$__l>>2]|0;
   $call$i69 = (___uselocale($42)|0);
   __THREW__ = 0;
   $call1$i70 = (invoke_iiii(461,($tmp|0),0,($st|0))|0);
   $43 = __THREW__; __THREW__ = 0;
   $44 = $43&1;
   if ($44) {
    label = 36;
    break;
   }
   $tobool$i$i2$i71 = ($call$i69|0)==(0|0);
   if (!($tobool$i$i2$i71)) {
    __THREW__ = 0;
    (invoke_ii(395,($call$i69|0))|0);
    $45 = __THREW__; __THREW__ = 0;
    $46 = $45&1;
    if ($46) {
     label = 35;
     break;
    }
   }
   $cmp35 = ($call1$i70|0)==(-1);
   if ($cmp35) {
    $retval$1 = 2;
    label = 49;
    break;
   }
   $55 = HEAP32[$to_nxt>>2]|0;
   $sub$ptr$sub40 = (($sub$ptr$lhs$cast7) - ($55))|0;
   $cmp41 = ($call1$i70>>>0)>($sub$ptr$sub40>>>0);
   if ($cmp41) {
    $retval$1 = 1;
    label = 49;
    break;
   } else {
    $n$0 = $call1$i70;$p$0 = $tmp;
   }
   while(1) {
    $tobool = ($n$0|0)==(0);
    if ($tobool) {
     break;
    }
    $incdec$ptr48 = ((($p$0)) + 1|0);
    $57 = HEAP8[$p$0>>0]|0;
    $58 = HEAP32[$to_nxt>>2]|0;
    $incdec$ptr49 = ((($58)) + 1|0);
    HEAP32[$to_nxt>>2] = $incdec$ptr49;
    HEAP8[$58>>0] = $57;
    $dec = (($n$0) + -1)|0;
    $n$0 = $dec;$p$0 = $incdec$ptr48;
   }
   $56 = HEAP32[$frm_nxt>>2]|0;
   $incdec$ptr52 = ((($56)) + 4|0);
   HEAP32[$frm_nxt>>2] = $incdec$ptr52;
   $fend$2 = $incdec$ptr52;
   while(1) {
    $cmp54 = ($fend$2|0)==($frm_end|0);
    if ($cmp54) {
     $fend$2$lcssa = $frm_end;
     break;
    }
    $59 = HEAP32[$fend$2>>2]|0;
    $cmp56 = ($59|0)==(0);
    if ($cmp56) {
     $fend$2$lcssa = $fend$2;
     break;
    }
    $incdec$ptr60 = ((($fend$2)) + 4|0);
    $fend$2 = $incdec$ptr60;
   }
   $$pre162 = HEAP32[$to_nxt>>2]|0;
   $61 = $$pre162;$62 = $incdec$ptr52;$fend$5$ph85 = $fend$2$lcssa;
  }
  $fend$1 = $fend$5$ph85;$frm$addr$0 = $62;$to$addr$0 = $61;
 }
 do {
  if ((label|0) == 10) {
   $16 = ___cxa_find_matching_catch_3(0|0)|0;
   $17 = tempRet0;
   ___clang_call_terminate($16);
   // unreachable;
  }
  else if ((label|0) == 11) {
   $18 = ___cxa_find_matching_catch_2()|0;
   $19 = tempRet0;
   $tobool$i$i$i = ($call$i|0)==(0|0);
   if (!($tobool$i$i$i)) {
    __THREW__ = 0;
    (invoke_ii(395,($call$i|0))|0);
    $20 = __THREW__; __THREW__ = 0;
    $21 = $20&1;
    if ($21) {
     $22 = ___cxa_find_matching_catch_3(0|0)|0;
     $23 = tempRet0;
     ___clang_call_terminate($22);
     // unreachable;
    }
   }
   ___resumeException($18|0);
   // unreachable;
  }
  else if ((label|0) == 16) {
   HEAP32[$to_nxt>>2] = $to$addr$0;
   $27 = $to$addr$0;$frm$addr$1 = $frm$addr$0;
   while(1) {
    $24 = HEAP32[$frm_nxt>>2]|0;
    $cmp13 = ($frm$addr$1|0)==($24|0);
    if ($cmp13) {
     label = 28;
     break;
    }
    $25 = HEAP32[$frm$addr$1>>2]|0;
    $26 = HEAP32[$__l>>2]|0;
    $call$i56 = (___uselocale($26)|0);
    __THREW__ = 0;
    $call1$i57 = (invoke_iiii(461,($27|0),($25|0),($save_state|0))|0);
    $28 = __THREW__; __THREW__ = 0;
    $29 = $28&1;
    if ($29) {
     label = 22;
     break;
    }
    $tobool$i$i2$i58 = ($call$i56|0)==(0|0);
    if (!($tobool$i$i2$i58)) {
     __THREW__ = 0;
     (invoke_ii(395,($call$i56|0))|0);
     $30 = __THREW__; __THREW__ = 0;
     $31 = $30&1;
     if ($31) {
      label = 21;
      break;
     }
    }
    $cmp17 = ($call1$i57|0)==(-1);
    if ($cmp17) {
     label = 28;
     break;
    }
    $40 = HEAP32[$to_nxt>>2]|0;
    $add$ptr = (($40) + ($call1$i57)|0);
    HEAP32[$to_nxt>>2] = $add$ptr;
    $incdec$ptr21 = ((($frm$addr$1)) + 4|0);
    $27 = $add$ptr;$frm$addr$1 = $incdec$ptr21;
   }
   if ((label|0) == 21) {
    $32 = ___cxa_find_matching_catch_3(0|0)|0;
    $33 = tempRet0;
    ___clang_call_terminate($32);
    // unreachable;
   }
   else if ((label|0) == 22) {
    $34 = ___cxa_find_matching_catch_2()|0;
    $35 = tempRet0;
    $tobool$i$i$i63 = ($call$i56|0)==(0|0);
    if (!($tobool$i$i$i63)) {
     __THREW__ = 0;
     (invoke_ii(395,($call$i56|0))|0);
     $36 = __THREW__; __THREW__ = 0;
     $37 = $36&1;
     if ($37) {
      $38 = ___cxa_find_matching_catch_3(0|0)|0;
      $39 = tempRet0;
      ___clang_call_terminate($38);
      // unreachable;
     }
    }
    ___resumeException($34|0);
    // unreachable;
   }
   else if ((label|0) == 28) {
    HEAP32[$frm_nxt>>2] = $frm$addr$1;
    $retval$3$ph = 2;
    label = 50;
    break;
   }
  }
  else if ((label|0) == 35) {
   $47 = ___cxa_find_matching_catch_3(0|0)|0;
   $48 = tempRet0;
   ___clang_call_terminate($47);
   // unreachable;
  }
  else if ((label|0) == 36) {
   $49 = ___cxa_find_matching_catch_2()|0;
   $50 = tempRet0;
   $tobool$i$i$i76 = ($call$i69|0)==(0|0);
   if (!($tobool$i$i$i76)) {
    __THREW__ = 0;
    (invoke_ii(395,($call$i69|0))|0);
    $51 = __THREW__; __THREW__ = 0;
    $52 = $51&1;
    if ($52) {
     $53 = ___cxa_find_matching_catch_3(0|0)|0;
     $54 = tempRet0;
     ___clang_call_terminate($53);
     // unreachable;
    }
   }
   ___resumeException($49|0);
   // unreachable;
  }
  else if ((label|0) == 49) {
   $retval$3$ph = $retval$1;
   label = 50;
  }
  else if ((label|0) == 51) {
   $$pre163 = HEAP32[$frm_nxt>>2]|0;
   $60 = $$pre163;
   label = 53;
  }
 } while(0);
 if ((label|0) == 50) {
  $retval$4 = $retval$3$ph;
 }
 else if ((label|0) == 53) {
  $not$cmp69 = ($60|0)!=($frm_end|0);
  $cond = $not$cmp69&1;
  $retval$4 = $cond;
 }
 STACKTOP = sp;return ($retval$4|0);
}
function __ZNKSt3__27codecvtIwc11__mbstate_tE5do_inERS1_PKcS5_RS5_PwS7_RS7_($this,$st,$frm,$frm_end,$frm_nxt,$to,$to_end,$to_nxt) {
 $this = $this|0;
 $st = $st|0;
 $frm = $frm|0;
 $frm_end = $frm_end|0;
 $frm_nxt = $frm_nxt|0;
 $to = $to|0;
 $to_end = $to_end|0;
 $to_nxt = $to_nxt|0;
 var $$pre = 0, $$pre172 = 0, $$pre173 = 0, $$sink = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $__l = 0, $add$ptr31 = 0, $call$i = 0, $call$i59 = 0, $call$i72 = 0, $call1$i = 0, $call1$i60 = 0, $call1$i73 = 0, $cmp = 0, $cmp10 = 0, $cmp13 = 0, $cmp2 = 0, $cmp32 = 0, $cmp35 = 0, $cmp39 = 0, $cmp4 = 0, $cmp45 = 0;
 var $cmp48 = 0, $cmp5 = 0, $cond = 0, $cond59 = 0, $fend$0 = 0, $fend$0$lcssa = 0, $fend$1 = 0, $fend$2 = 0, $fend$2$lcssa = 0, $fend$4$ph = 0, $frm$addr$0 = 0, $frm$addr$1 = 0, $incdec$ptr = 0, $incdec$ptr20 = 0, $incdec$ptr24 = 0, $incdec$ptr42 = 0, $incdec$ptr43 = 0, $incdec$ptr52 = 0, $not$cmp26 = 0, $not$cmp58 = 0;
 var $or$cond = 0, $retval$1$ph = 0, $retval$2 = 0, $save_state = 0, $storemerge = 0, $sub$ptr$div = 0, $sub$ptr$lhs$cast = 0, $sub$ptr$lhs$cast7 = 0, $sub$ptr$rhs$cast = 0, $sub$ptr$rhs$cast16 = 0, $sub$ptr$rhs$cast8 = 0, $sub$ptr$sub = 0, $sub$ptr$sub17 = 0, $sub$ptr$sub9 = 0, $to$addr$0 = 0, $tobool$i$i$i = 0, $tobool$i$i$i66 = 0, $tobool$i$i$i79 = 0, $tobool$i$i2$i = 0, $tobool$i$i2$i61 = 0;
 var $tobool$i$i2$i74 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $save_state = sp;
 $fend$0 = $frm;
 while(1) {
  $cmp = ($fend$0|0)==($frm_end|0);
  if ($cmp) {
   $fend$0$lcssa = $frm_end;
   break;
  }
  $0 = HEAP8[$fend$0>>0]|0;
  $cmp2 = ($0<<24>>24)==(0);
  if ($cmp2) {
   $fend$0$lcssa = $fend$0;
   break;
  }
  $incdec$ptr = ((($fend$0)) + 1|0);
  $fend$0 = $incdec$ptr;
 }
 HEAP32[$to_nxt>>2] = $to;
 HEAP32[$frm_nxt>>2] = $frm;
 $sub$ptr$lhs$cast7 = $to_end;
 $__l = ((($this)) + 8|0);
 $fend$1 = $fend$0$lcssa;$frm$addr$0 = $frm;$to$addr$0 = $to;
 while(1) {
  $cmp4 = ($frm$addr$0|0)==($frm_end|0);
  $cmp5 = ($to$addr$0|0)==($to_end|0);
  $or$cond = $cmp5 | $cmp4;
  if ($or$cond) {
   $56 = $frm$addr$0;
   label = 50;
   break;
  }
  $1 = $st;
  $2 = $1;
  $3 = HEAP32[$2>>2]|0;
  $4 = (($1) + 4)|0;
  $5 = $4;
  $6 = HEAP32[$5>>2]|0;
  $7 = $save_state;
  $8 = $7;
  HEAP32[$8>>2] = $3;
  $9 = (($7) + 4)|0;
  $10 = $9;
  HEAP32[$10>>2] = $6;
  $sub$ptr$lhs$cast = $fend$1;
  $sub$ptr$rhs$cast = $frm$addr$0;
  $sub$ptr$sub = (($sub$ptr$lhs$cast) - ($sub$ptr$rhs$cast))|0;
  $sub$ptr$rhs$cast8 = $to$addr$0;
  $sub$ptr$sub9 = (($sub$ptr$lhs$cast7) - ($sub$ptr$rhs$cast8))|0;
  $sub$ptr$div = $sub$ptr$sub9 >> 2;
  $11 = HEAP32[$__l>>2]|0;
  $call$i = (___uselocale($11)|0);
  __THREW__ = 0;
  $call1$i = (invoke_iiiiii(462,($to$addr$0|0),($frm_nxt|0),($sub$ptr$sub|0),($sub$ptr$div|0),($st|0))|0);
  $12 = __THREW__; __THREW__ = 0;
  $13 = $12&1;
  if ($13) {
   label = 11;
   break;
  }
  $tobool$i$i2$i = ($call$i|0)==(0|0);
  if (!($tobool$i$i2$i)) {
   __THREW__ = 0;
   (invoke_ii(395,($call$i|0))|0);
   $14 = __THREW__; __THREW__ = 0;
   $15 = $14&1;
   if ($15) {
    label = 10;
    break;
   }
  }
  $cmp10 = ($call1$i|0)==(-1);
  if ($cmp10) {
   $frm$addr$1 = $frm$addr$0;$storemerge = $to$addr$0;
   label = 16;
   break;
  }
  $39 = HEAP32[$to_nxt>>2]|0;
  $add$ptr31 = (($39) + ($call1$i<<2)|0);
  HEAP32[$to_nxt>>2] = $add$ptr31;
  $cmp32 = ($add$ptr31|0)==($to_end|0);
  if ($cmp32) {
   label = 47;
   break;
  }
  $cmp35 = ($fend$1|0)==($frm_end|0);
  $$pre = HEAP32[$frm_nxt>>2]|0;
  if ($cmp35) {
   $57 = $add$ptr31;$58 = $$pre;$fend$4$ph = $frm_end;
  } else {
   $40 = HEAP32[$__l>>2]|0;
   $call$i72 = (___uselocale($40)|0);
   __THREW__ = 0;
   $call1$i73 = (invoke_iiiii(463,($add$ptr31|0),($$pre|0),1,($st|0))|0);
   $41 = __THREW__; __THREW__ = 0;
   $42 = $41&1;
   if ($42) {
    label = 37;
    break;
   }
   $tobool$i$i2$i74 = ($call$i72|0)==(0|0);
   if (!($tobool$i$i2$i74)) {
    __THREW__ = 0;
    (invoke_ii(395,($call$i72|0))|0);
    $43 = __THREW__; __THREW__ = 0;
    $44 = $43&1;
    if ($44) {
     label = 36;
     break;
    }
   }
   $cmp39 = ($call1$i73|0)==(0);
   if (!($cmp39)) {
    $retval$1$ph = 2;
    label = 46;
    break;
   }
   $53 = HEAP32[$to_nxt>>2]|0;
   $incdec$ptr42 = ((($53)) + 4|0);
   HEAP32[$to_nxt>>2] = $incdec$ptr42;
   $54 = HEAP32[$frm_nxt>>2]|0;
   $incdec$ptr43 = ((($54)) + 1|0);
   HEAP32[$frm_nxt>>2] = $incdec$ptr43;
   $fend$2 = $incdec$ptr43;
   while(1) {
    $cmp45 = ($fend$2|0)==($frm_end|0);
    if ($cmp45) {
     $fend$2$lcssa = $frm_end;
     break;
    }
    $55 = HEAP8[$fend$2>>0]|0;
    $cmp48 = ($55<<24>>24)==(0);
    if ($cmp48) {
     $fend$2$lcssa = $fend$2;
     break;
    }
    $incdec$ptr52 = ((($fend$2)) + 1|0);
    $fend$2 = $incdec$ptr52;
   }
   $$pre172 = HEAP32[$to_nxt>>2]|0;
   $57 = $$pre172;$58 = $incdec$ptr43;$fend$4$ph = $fend$2$lcssa;
  }
  $fend$1 = $fend$4$ph;$frm$addr$0 = $58;$to$addr$0 = $57;
 }
 do {
  if ((label|0) == 10) {
   $16 = ___cxa_find_matching_catch_3(0|0)|0;
   $17 = tempRet0;
   ___clang_call_terminate($16);
   // unreachable;
  }
  else if ((label|0) == 11) {
   $18 = ___cxa_find_matching_catch_2()|0;
   $19 = tempRet0;
   $tobool$i$i$i = ($call$i|0)==(0|0);
   if (!($tobool$i$i$i)) {
    __THREW__ = 0;
    (invoke_ii(395,($call$i|0))|0);
    $20 = __THREW__; __THREW__ = 0;
    $21 = $20&1;
    if ($21) {
     $22 = ___cxa_find_matching_catch_3(0|0)|0;
     $23 = tempRet0;
     ___clang_call_terminate($22);
     // unreachable;
    }
   }
   ___resumeException($18|0);
   // unreachable;
  }
  else if ((label|0) == 16) {
   L30: while(1) {
    label = 0;
    HEAP32[$to_nxt>>2] = $storemerge;
    $24 = HEAP32[$frm_nxt>>2]|0;
    $cmp13 = ($frm$addr$1|0)==($24|0);
    if ($cmp13) {
     label = 30;
     break;
    }
    $sub$ptr$rhs$cast16 = $frm$addr$1;
    $sub$ptr$sub17 = (($sub$ptr$lhs$cast) - ($sub$ptr$rhs$cast16))|0;
    $25 = HEAP32[$__l>>2]|0;
    $call$i59 = (___uselocale($25)|0);
    __THREW__ = 0;
    $call1$i60 = (invoke_iiiii(463,($storemerge|0),($frm$addr$1|0),($sub$ptr$sub17|0),($save_state|0))|0);
    $26 = __THREW__; __THREW__ = 0;
    $27 = $26&1;
    if ($27) {
     label = 21;
     break;
    }
    $tobool$i$i2$i61 = ($call$i59|0)==(0|0);
    if (!($tobool$i$i2$i61)) {
     __THREW__ = 0;
     (invoke_ii(395,($call$i59|0))|0);
     $28 = __THREW__; __THREW__ = 0;
     $29 = $28&1;
     if ($29) {
      label = 20;
      break;
     }
    }
    switch ($call1$i60|0) {
    case -1:  {
     label = 27;
     break L30;
     break;
    }
    case -2:  {
     label = 28;
     break L30;
     break;
    }
    case 0:  {
     $$sink = 1;
     break;
    }
    default: {
     $$sink = $call1$i60;
    }
    }
    $incdec$ptr20 = (($frm$addr$1) + ($$sink)|0);
    $38 = HEAP32[$to_nxt>>2]|0;
    $incdec$ptr24 = ((($38)) + 4|0);
    $frm$addr$1 = $incdec$ptr20;$storemerge = $incdec$ptr24;
    label = 16;
   }
   if ((label|0) == 20) {
    $30 = ___cxa_find_matching_catch_3(0|0)|0;
    $31 = tempRet0;
    ___clang_call_terminate($30);
    // unreachable;
   }
   else if ((label|0) == 21) {
    $32 = ___cxa_find_matching_catch_2()|0;
    $33 = tempRet0;
    $tobool$i$i$i66 = ($call$i59|0)==(0|0);
    if (!($tobool$i$i$i66)) {
     __THREW__ = 0;
     (invoke_ii(395,($call$i59|0))|0);
     $34 = __THREW__; __THREW__ = 0;
     $35 = $34&1;
     if ($35) {
      $36 = ___cxa_find_matching_catch_3(0|0)|0;
      $37 = tempRet0;
      ___clang_call_terminate($36);
      // unreachable;
     }
    }
    ___resumeException($32|0);
    // unreachable;
   }
   else if ((label|0) == 27) {
    HEAP32[$frm_nxt>>2] = $frm$addr$1;
    $retval$1$ph = 2;
    label = 46;
    break;
   }
   else if ((label|0) == 28) {
    HEAP32[$frm_nxt>>2] = $frm$addr$1;
    $retval$1$ph = 1;
    label = 46;
    break;
   }
   else if ((label|0) == 30) {
    HEAP32[$frm_nxt>>2] = $frm$addr$1;
    $not$cmp26 = ($frm$addr$1|0)!=($frm_end|0);
    $cond = $not$cmp26&1;
    $retval$1$ph = $cond;
    label = 46;
    break;
   }
  }
  else if ((label|0) == 36) {
   $45 = ___cxa_find_matching_catch_3(0|0)|0;
   $46 = tempRet0;
   ___clang_call_terminate($45);
   // unreachable;
  }
  else if ((label|0) == 37) {
   $47 = ___cxa_find_matching_catch_2()|0;
   $48 = tempRet0;
   $tobool$i$i$i79 = ($call$i72|0)==(0|0);
   if (!($tobool$i$i$i79)) {
    __THREW__ = 0;
    (invoke_ii(395,($call$i72|0))|0);
    $49 = __THREW__; __THREW__ = 0;
    $50 = $49&1;
    if ($50) {
     $51 = ___cxa_find_matching_catch_3(0|0)|0;
     $52 = tempRet0;
     ___clang_call_terminate($51);
     // unreachable;
    }
   }
   ___resumeException($47|0);
   // unreachable;
  }
  else if ((label|0) == 47) {
   $$pre173 = HEAP32[$frm_nxt>>2]|0;
   $56 = $$pre173;
   label = 50;
  }
 } while(0);
 if ((label|0) == 46) {
  $retval$2 = $retval$1$ph;
 }
 else if ((label|0) == 50) {
  $not$cmp58 = ($56|0)!=($frm_end|0);
  $cond59 = $not$cmp58&1;
  $retval$2 = $cond59;
 }
 STACKTOP = sp;return ($retval$2|0);
}
function __ZNKSt3__27codecvtIwc11__mbstate_tE10do_unshiftERS1_PcS4_RS4_($this,$st,$to,$to_end,$to_nxt) {
 $this = $this|0;
 $st = $st|0;
 $to = $to|0;
 $to_end = $to_end|0;
 $to_nxt = $to_nxt|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__l = 0, $call$i = 0, $call1$i = 0, $cmp4 = 0;
 var $dec = 0, $dec10 = 0, $incdec$ptr = 0, $incdec$ptr9 = 0, $n$0 = 0, $p$0 = 0, $retval$0 = 0, $sub$ptr$lhs$cast = 0, $sub$ptr$sub = 0, $tmp = 0, $tobool = 0, $tobool$i$i$i = 0, $tobool$i$i2$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $tmp = sp;
 HEAP32[$to_nxt>>2] = $to;
 $__l = ((($this)) + 8|0);
 $0 = HEAP32[$__l>>2]|0;
 $call$i = (___uselocale($0)|0);
 __THREW__ = 0;
 $call1$i = (invoke_iiii(461,($tmp|0),0,($st|0))|0);
 $1 = __THREW__; __THREW__ = 0;
 $2 = $1&1;
 if ($2) {
  $7 = ___cxa_find_matching_catch_2()|0;
  $8 = tempRet0;
  $tobool$i$i$i = ($call$i|0)==(0|0);
  if (!($tobool$i$i$i)) {
   __THREW__ = 0;
   (invoke_ii(395,($call$i|0))|0);
   $9 = __THREW__; __THREW__ = 0;
   $10 = $9&1;
   if ($10) {
    $11 = ___cxa_find_matching_catch_3(0|0)|0;
    $12 = tempRet0;
    ___clang_call_terminate($11);
    // unreachable;
   }
  }
  ___resumeException($7|0);
  // unreachable;
 }
 $tobool$i$i2$i = ($call$i|0)==(0|0);
 if (!($tobool$i$i2$i)) {
  __THREW__ = 0;
  (invoke_ii(395,($call$i|0))|0);
  $3 = __THREW__; __THREW__ = 0;
  $4 = $3&1;
  if ($4) {
   $5 = ___cxa_find_matching_catch_3(0|0)|0;
   $6 = tempRet0;
   ___clang_call_terminate($5);
   // unreachable;
  }
 }
 L12: do {
  switch ($call1$i|0) {
  case 0: case -1:  {
   $retval$0 = 2;
   break;
  }
  default: {
   $dec = (($call1$i) + -1)|0;
   $13 = HEAP32[$to_nxt>>2]|0;
   $sub$ptr$lhs$cast = $to_end;
   $sub$ptr$sub = (($sub$ptr$lhs$cast) - ($13))|0;
   $cmp4 = ($dec>>>0)>($sub$ptr$sub>>>0);
   if ($cmp4) {
    $retval$0 = 1;
   } else {
    $n$0 = $dec;$p$0 = $tmp;
    while(1) {
     $tobool = ($n$0|0)==(0);
     if ($tobool) {
      $retval$0 = 0;
      break L12;
     }
     $incdec$ptr = ((($p$0)) + 1|0);
     $14 = HEAP8[$p$0>>0]|0;
     $15 = HEAP32[$to_nxt>>2]|0;
     $incdec$ptr9 = ((($15)) + 1|0);
     HEAP32[$to_nxt>>2] = $incdec$ptr9;
     HEAP8[$15>>0] = $14;
     $dec10 = (($n$0) + -1)|0;
     $n$0 = $dec10;$p$0 = $incdec$ptr;
    }
   }
  }
  }
 } while(0);
 STACKTOP = sp;return ($retval$0|0);
}
function __ZNKSt3__27codecvtIwc11__mbstate_tE11do_encodingEv($this) {
 $this = $this|0;
 var $$ = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__l = 0, $call$i1 = 0, $call$i15 = 0, $call1$i = 0, $call1$i2 = 0, $cmp = 0, $cmp3 = 0;
 var $cmp7 = 0, $eh$lpad$body$indexZ2D = 0, $retval$0 = 0, $tobool$i$i$i = 0, $tobool$i$i$i8 = 0, $tobool$i$i2$i = 0, $tobool$i$i2$i3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $__l = ((($this)) + 8|0);
 $0 = HEAP32[$__l>>2]|0;
 __THREW__ = 0;
 $call$i1 = (invoke_ii(395,($0|0))|0);
 $1 = __THREW__; __THREW__ = 0;
 $2 = $1&1;
 do {
  if ($2) {
   label = 21;
  } else {
   __THREW__ = 0;
   $call1$i = (invoke_iiii(464,(0|0),(0|0),4)|0);
   $3 = __THREW__; __THREW__ = 0;
   $4 = $3&1;
   if ($4) {
    $9 = ___cxa_find_matching_catch_3(0|0)|0;
    $10 = tempRet0;
    $tobool$i$i$i = ($call$i1|0)==(0|0);
    if ($tobool$i$i$i) {
     $eh$lpad$body$indexZ2D = $9;
     break;
    }
    __THREW__ = 0;
    (invoke_ii(395,($call$i1|0))|0);
    $11 = __THREW__; __THREW__ = 0;
    $12 = $11&1;
    if (!($12)) {
     $eh$lpad$body$indexZ2D = $9;
     break;
    }
    $13 = ___cxa_find_matching_catch_3(0|0)|0;
    $14 = tempRet0;
    ___clang_call_terminate($13);
    // unreachable;
   }
   $tobool$i$i2$i = ($call$i1|0)==(0|0);
   if (!($tobool$i$i2$i)) {
    __THREW__ = 0;
    (invoke_ii(395,($call$i1|0))|0);
    $5 = __THREW__; __THREW__ = 0;
    $6 = $5&1;
    if ($6) {
     $7 = ___cxa_find_matching_catch_3(0|0)|0;
     $8 = tempRet0;
     ___clang_call_terminate($7);
     // unreachable;
    }
   }
   $cmp = ($call1$i|0)==(0);
   if ($cmp) {
    $15 = HEAP32[$__l>>2]|0;
    $cmp3 = ($15|0)==(0|0);
    if ($cmp3) {
     $retval$0 = 1;
    } else {
     __THREW__ = 0;
     $call$i15 = (invoke_ii(395,($15|0))|0);
     $16 = __THREW__; __THREW__ = 0;
     $17 = $16&1;
     if ($17) {
      label = 21;
      break;
     }
     __THREW__ = 0;
     $call1$i2 = (invoke_i(465)|0);
     $18 = __THREW__; __THREW__ = 0;
     $19 = $18&1;
     if ($19) {
      $24 = ___cxa_find_matching_catch_3(0|0)|0;
      $25 = tempRet0;
      $tobool$i$i$i8 = ($call$i15|0)==(0|0);
      if ($tobool$i$i$i8) {
       $eh$lpad$body$indexZ2D = $24;
       break;
      }
      __THREW__ = 0;
      (invoke_ii(395,($call$i15|0))|0);
      $26 = __THREW__; __THREW__ = 0;
      $27 = $26&1;
      if (!($27)) {
       $eh$lpad$body$indexZ2D = $24;
       break;
      }
      $28 = ___cxa_find_matching_catch_3(0|0)|0;
      $29 = tempRet0;
      ___clang_call_terminate($28);
      // unreachable;
     }
     $tobool$i$i2$i3 = ($call$i15|0)==(0|0);
     if (!($tobool$i$i2$i3)) {
      __THREW__ = 0;
      (invoke_ii(395,($call$i15|0))|0);
      $20 = __THREW__; __THREW__ = 0;
      $21 = $20&1;
      if ($21) {
       $22 = ___cxa_find_matching_catch_3(0|0)|0;
       $23 = tempRet0;
       ___clang_call_terminate($22);
       // unreachable;
      }
     }
     $cmp7 = ($call1$i2|0)==(1);
     $$ = $cmp7&1;
     return ($$|0);
    }
   } else {
    $retval$0 = -1;
   }
   return ($retval$0|0);
  }
 } while(0);
 if ((label|0) == 21) {
  $30 = ___cxa_find_matching_catch_3(0|0)|0;
  $31 = tempRet0;
  $eh$lpad$body$indexZ2D = $30;
 }
 ___clang_call_terminate($eh$lpad$body$indexZ2D);
 // unreachable;
 return (0)|0;
}
function __ZNKSt3__27codecvtIwc11__mbstate_tE16do_always_noconvEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 0;
}
function __ZNKSt3__27codecvtIwc11__mbstate_tE9do_lengthERS1_PKcS5_j($this,$st,$frm,$frm_end,$mx) {
 $this = $this|0;
 $st = $st|0;
 $frm = $frm|0;
 $frm_end = $frm_end|0;
 $mx = $mx|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__l = 0, $add$ptr = 0, $call$i = 0, $call$sink = 0, $call1$i = 0, $cmp = 0, $cmp2 = 0;
 var $frm$addr$0 = 0, $inc4 = 0, $nbytes$0 = 0, $nbytes$1 = 0, $nwchar_t$0 = 0, $or$cond = 0, $sub$ptr$lhs$cast = 0, $sub$ptr$rhs$cast = 0, $sub$ptr$sub = 0, $tobool$i$i$i = 0, $tobool$i$i2$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $sub$ptr$lhs$cast = $frm_end;
 $__l = ((($this)) + 8|0);
 $frm$addr$0 = $frm;$nbytes$0 = 0;$nwchar_t$0 = 0;
 L1: while(1) {
  $cmp = ($nwchar_t$0>>>0)>=($mx>>>0);
  $cmp2 = ($frm$addr$0|0)==($frm_end|0);
  $or$cond = $cmp2 | $cmp;
  if ($or$cond) {
   label = 14;
   break;
  }
  $sub$ptr$rhs$cast = $frm$addr$0;
  $sub$ptr$sub = (($sub$ptr$lhs$cast) - ($sub$ptr$rhs$cast))|0;
  $0 = HEAP32[$__l>>2]|0;
  $call$i = (___uselocale($0)|0);
  __THREW__ = 0;
  $call1$i = (invoke_iiii(466,($frm$addr$0|0),($sub$ptr$sub|0),($st|0))|0);
  $1 = __THREW__; __THREW__ = 0;
  $2 = $1&1;
  if ($2) {
   label = 7;
   break;
  }
  $tobool$i$i2$i = ($call$i|0)==(0|0);
  if (!($tobool$i$i2$i)) {
   __THREW__ = 0;
   (invoke_ii(395,($call$i|0))|0);
   $3 = __THREW__; __THREW__ = 0;
   $4 = $3&1;
   if ($4) {
    label = 6;
    break;
   }
  }
  switch ($call1$i|0) {
  case -2: case -1:  {
   label = 14;
   break L1;
   break;
  }
  case 0:  {
   $call$sink = 1;
   break;
  }
  default: {
   $call$sink = $call1$i;
  }
  }
  $add$ptr = (($frm$addr$0) + ($call$sink)|0);
  $nbytes$1 = (($call$sink) + ($nbytes$0))|0;
  $inc4 = (($nwchar_t$0) + 1)|0;
  $frm$addr$0 = $add$ptr;$nbytes$0 = $nbytes$1;$nwchar_t$0 = $inc4;
 }
 if ((label|0) == 6) {
  $5 = ___cxa_find_matching_catch_3(0|0)|0;
  $6 = tempRet0;
  ___clang_call_terminate($5);
  // unreachable;
 }
 else if ((label|0) == 7) {
  $7 = ___cxa_find_matching_catch_2()|0;
  $8 = tempRet0;
  $tobool$i$i$i = ($call$i|0)==(0|0);
  if (!($tobool$i$i$i)) {
   __THREW__ = 0;
   (invoke_ii(395,($call$i|0))|0);
   $9 = __THREW__; __THREW__ = 0;
   $10 = $9&1;
   if ($10) {
    $11 = ___cxa_find_matching_catch_3(0|0)|0;
    $12 = tempRet0;
    ___clang_call_terminate($11);
    // unreachable;
   }
  }
  ___resumeException($7|0);
  // unreachable;
 }
 else if ((label|0) == 14) {
  return ($nbytes$0|0);
 }
 return (0)|0;
}
function __ZNKSt3__27codecvtIwc11__mbstate_tE13do_max_lengthEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__l = 0, $call$i1 = 0, $call1$i = 0;
 var $cmp = 0, $cond = 0, $eh$lpad$body$indexZ2D = 0, $tobool$i$i$i = 0, $tobool$i$i2$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $__l = ((($this)) + 8|0);
 $0 = HEAP32[$__l>>2]|0;
 $cmp = ($0|0)==(0|0);
 L1: do {
  if ($cmp) {
   $cond = 1;
  } else {
   __THREW__ = 0;
   $call$i1 = (invoke_ii(395,($0|0))|0);
   $1 = __THREW__; __THREW__ = 0;
   $2 = $1&1;
   do {
    if ($2) {
     $15 = ___cxa_find_matching_catch_3(0|0)|0;
     $16 = tempRet0;
     $eh$lpad$body$indexZ2D = $15;
    } else {
     __THREW__ = 0;
     $call1$i = (invoke_i(465)|0);
     $3 = __THREW__; __THREW__ = 0;
     $4 = $3&1;
     if ($4) {
      $9 = ___cxa_find_matching_catch_3(0|0)|0;
      $10 = tempRet0;
      $tobool$i$i$i = ($call$i1|0)==(0|0);
      if ($tobool$i$i$i) {
       $eh$lpad$body$indexZ2D = $9;
       break;
      }
      __THREW__ = 0;
      (invoke_ii(395,($call$i1|0))|0);
      $11 = __THREW__; __THREW__ = 0;
      $12 = $11&1;
      if (!($12)) {
       $eh$lpad$body$indexZ2D = $9;
       break;
      }
      $13 = ___cxa_find_matching_catch_3(0|0)|0;
      $14 = tempRet0;
      ___clang_call_terminate($13);
      // unreachable;
     } else {
      $tobool$i$i2$i = ($call$i1|0)==(0|0);
      if ($tobool$i$i2$i) {
       $cond = $call1$i;
       break L1;
      }
      __THREW__ = 0;
      (invoke_ii(395,($call$i1|0))|0);
      $5 = __THREW__; __THREW__ = 0;
      $6 = $5&1;
      if (!($6)) {
       $cond = $call1$i;
       break L1;
      }
      $7 = ___cxa_find_matching_catch_3(0|0)|0;
      $8 = tempRet0;
      ___clang_call_terminate($7);
      // unreachable;
     }
    }
   } while(0);
   ___clang_call_terminate($eh$lpad$body$indexZ2D);
   // unreachable;
  }
 } while(0);
 return ($cond|0);
}
function __ZNSt3__27codecvtIwc11__mbstate_tED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $__l = 0, $call = 0, $cmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = (8972);
 $__l = ((($this)) + 8|0);
 $0 = HEAP32[$__l>>2]|0;
 __THREW__ = 0;
 $call = (invoke_i(392)|0);
 $1 = __THREW__; __THREW__ = 0;
 $2 = $1&1;
 do {
  if (!($2)) {
   $cmp = ($0|0)==($call|0);
   if (!($cmp)) {
    $3 = HEAP32[$__l>>2]|0;
    __THREW__ = 0;
    invoke_vi(438,($3|0));
    $4 = __THREW__; __THREW__ = 0;
    $5 = $4&1;
    if ($5) {
     break;
    }
   }
   __ZNSt3__26locale5facetD2Ev($this);
   return;
  }
 } while(0);
 $6 = ___cxa_find_matching_catch_3(0|0)|0;
 $7 = tempRet0;
 __ZNSt3__26locale5facetD2Ev($this);
 ___clang_call_terminate($6);
 // unreachable;
}
function __ZNSt3__27codecvtIwc11__mbstate_tED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__27codecvtIwc11__mbstate_tED2Ev($this);
 __ZdlPv($this);
 return;
}
function __ZNKSt3__27codecvtIDsc11__mbstate_tE6do_outERS1_PKDsS5_RS5_PcS7_RS7_($this,$0,$frm,$frm_end,$frm_nxt,$to,$to_end,$to_nxt) {
 $this = $this|0;
 $0 = $0|0;
 $frm = $frm|0;
 $frm_end = $frm_end|0;
 $frm_nxt = $frm_nxt|0;
 $to = $to|0;
 $to_end = $to_end|0;
 $to_nxt = $to_nxt|0;
 var $1 = 0, $2 = 0, $_frm_nxt = 0, $_to_nxt = 0, $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $_frm_nxt = sp + 4|0;
 $_to_nxt = sp;
 HEAP32[$_frm_nxt>>2] = $frm;
 HEAP32[$_to_nxt>>2] = $to;
 $call = (__ZNSt3__2L13utf16_to_utf8EPKtS1_RS1_PhS3_RS3_mNS_12codecvt_modeE($frm,$frm_end,$_frm_nxt,$to,$to_end,$_to_nxt,1114111,0)|0);
 $1 = HEAP32[$_frm_nxt>>2]|0;
 HEAP32[$frm_nxt>>2] = $1;
 $2 = HEAP32[$_to_nxt>>2]|0;
 HEAP32[$to_nxt>>2] = $2;
 STACKTOP = sp;return ($call|0);
}
function __ZNKSt3__27codecvtIDsc11__mbstate_tE5do_inERS1_PKcS5_RS5_PDsS7_RS7_($this,$0,$frm,$frm_end,$frm_nxt,$to,$to_end,$to_nxt) {
 $this = $this|0;
 $0 = $0|0;
 $frm = $frm|0;
 $frm_end = $frm_end|0;
 $frm_nxt = $frm_nxt|0;
 $to = $to|0;
 $to_end = $to_end|0;
 $to_nxt = $to_nxt|0;
 var $1 = 0, $2 = 0, $_frm_nxt = 0, $_to_nxt = 0, $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $_frm_nxt = sp + 4|0;
 $_to_nxt = sp;
 HEAP32[$_frm_nxt>>2] = $frm;
 HEAP32[$_to_nxt>>2] = $to;
 $call = (__ZNSt3__2L13utf8_to_utf16EPKhS1_RS1_PtS3_RS3_mNS_12codecvt_modeE($frm,$frm_end,$_frm_nxt,$to,$to_end,$_to_nxt,1114111,0)|0);
 $1 = HEAP32[$_frm_nxt>>2]|0;
 HEAP32[$frm_nxt>>2] = $1;
 $2 = HEAP32[$_to_nxt>>2]|0;
 HEAP32[$to_nxt>>2] = $2;
 STACKTOP = sp;return ($call|0);
}
function __ZNKSt3__27codecvtIDsc11__mbstate_tE10do_unshiftERS1_PcS4_RS4_($this,$0,$to,$1,$to_nxt) {
 $this = $this|0;
 $0 = $0|0;
 $to = $to|0;
 $1 = $1|0;
 $to_nxt = $to_nxt|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$to_nxt>>2] = $to;
 return 3;
}
function __ZNKSt3__27codecvtIDsc11__mbstate_tE11do_encodingEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 0;
}
function __ZNKSt3__27codecvtIDsc11__mbstate_tE16do_always_noconvEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 0;
}
function __ZNKSt3__27codecvtIDsc11__mbstate_tE9do_lengthERS1_PKcS5_j($this,$0,$frm,$frm_end,$mx) {
 $this = $this|0;
 $0 = $0|0;
 $frm = $frm|0;
 $frm_end = $frm_end|0;
 $mx = $mx|0;
 var $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = (__ZNSt3__2L20utf8_to_utf16_lengthEPKhS1_jmNS_12codecvt_modeE($frm,$frm_end,$mx,1114111,0)|0);
 return ($call|0);
}
function __ZNKSt3__27codecvtIDsc11__mbstate_tE13do_max_lengthEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 4;
}
function __ZNSt3__2L20utf8_to_utf16_lengthEPKhS1_jmNS_12codecvt_modeE($frm,$frm_end,$mx,$Maxcode,$mode) {
 $frm = $frm|0;
 $frm_end = $frm_end|0;
 $mx = $mx|0;
 $Maxcode = $Maxcode|0;
 $mode = $mode|0;
 var $$off = 0, $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $add = 0, $add$ptr = 0, $add$ptr$frm = 0, $add$ptr105 = 0, $add$ptr183 = 0, $add$ptr48 = 0, $add176 = 0, $add179 = 0;
 var $and = 0, $and100 = 0, $and141 = 0, $and150 = 0, $and159 = 0, $and163 = 0, $and168 = 0, $and171 = 0, $and174 = 0, $and178 = 0, $and34 = 0, $and39 = 0, $and42 = 0, $and63 = 0, $and80 = 0, $and88 = 0, $and93 = 0, $and96 = 0, $arrayidx3 = 0, $arrayidx7 = 0;
 var $cmp = 0, $cmp1 = 0, $cmp102 = 0, $cmp112 = 0, $cmp117 = 0, $cmp119 = 0, $cmp12 = 0, $cmp13 = 0, $cmp142 = 0, $cmp15 = 0, $cmp151 = 0, $cmp160 = 0, $cmp164 = 0, $cmp180 = 0, $cmp19 = 0, $cmp22 = 0, $cmp26 = 0, $cmp31 = 0, $cmp35 = 0, $cmp45 = 0;
 var $cmp5 = 0, $cmp51 = 0, $cmp56 = 0, $cmp64 = 0, $cmp73 = 0, $cmp81 = 0, $cmp89 = 0, $cmp9 = 0, $conv14 = 0, $conv149 = 0, $conv158 = 0, $conv162 = 0, $conv33 = 0, $conv79 = 0, $conv87 = 0, $frm_nxt$1 = 0, $frm_nxt$5 = 0, $inc = 0, $inc198 = 0, $incdec$ptr = 0;
 var $nchar16_t$0 = 0, $nchar16_t$2 = 0, $or = 0, $or$cond = 0, $or$cond77 = 0, $or$cond79 = 0, $or101 = 0, $or98 = 0, $shl = 0, $shl169 = 0, $shl172 = 0, $shl175 = 0, $shl94 = 0, $shl97 = 0, $sub = 0, $sub$ptr$lhs$cast = 0, $sub$ptr$lhs$cast20184 = 0, $sub$ptr$rhs$cast = 0, $sub$ptr$rhs$cast29 = 0, $sub$ptr$rhs$cast29$lcssa$sink = 0;
 var $sub$ptr$sub = 0, $sub$ptr$sub30 = 0, $sub$ptr$sub85$le = 0, $tobool = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $and = $mode & 4;
 $tobool = ($and|0)!=(0);
 $sub$ptr$lhs$cast = $frm_end;
 $sub$ptr$rhs$cast = $frm;
 $sub$ptr$sub = (($sub$ptr$lhs$cast) - ($sub$ptr$rhs$cast))|0;
 $cmp = ($sub$ptr$sub|0)>(2);
 $or$cond = $cmp & $tobool;
 if ($or$cond) {
  $0 = HEAP8[$frm>>0]|0;
  $cmp1 = ($0<<24>>24)==(-17);
  if ($cmp1) {
   $arrayidx3 = ((($frm)) + 1|0);
   $1 = HEAP8[$arrayidx3>>0]|0;
   $cmp5 = ($1<<24>>24)==(-69);
   if ($cmp5) {
    $arrayidx7 = ((($frm)) + 2|0);
    $2 = HEAP8[$arrayidx7>>0]|0;
    $cmp9 = ($2<<24>>24)==(-65);
    $add$ptr = ((($frm)) + 3|0);
    $add$ptr$frm = $cmp9 ? $add$ptr : $frm;
    $frm_nxt$1 = $add$ptr$frm;$nchar16_t$0 = 0;
   } else {
    $frm_nxt$1 = $frm;$nchar16_t$0 = 0;
   }
  } else {
   $frm_nxt$1 = $frm;$nchar16_t$0 = 0;
  }
 } else {
  $frm_nxt$1 = $frm;$nchar16_t$0 = 0;
 }
 L5: while(1) {
  $cmp12 = ($frm_nxt$1>>>0)<($frm_end>>>0);
  $cmp13 = ($nchar16_t$0>>>0)<($mx>>>0);
  $or$cond77 = $cmp13 & $cmp12;
  if (!($or$cond77)) {
   label = 31;
   break;
  }
  $3 = HEAP8[$frm_nxt$1>>0]|0;
  $conv14 = $3&255;
  $cmp15 = ($conv14>>>0)>($Maxcode>>>0);
  if ($cmp15) {
   label = 31;
   break;
  }
  $cmp19 = ($3<<24>>24)>(-1);
  $incdec$ptr = ((($frm_nxt$1)) + 1|0);
  do {
   if ($cmp19) {
    $frm_nxt$5 = $incdec$ptr;$nchar16_t$2 = $nchar16_t$0;
   } else {
    $cmp22 = ($3&255)<(194);
    if ($cmp22) {
     label = 31;
     break L5;
    }
    $cmp26 = ($3&255)<(224);
    $add$ptr48 = ((($frm_nxt$1)) + 2|0);
    $sub$ptr$rhs$cast29 = $frm_nxt$1;
    $sub$ptr$sub30 = (($sub$ptr$lhs$cast) - ($sub$ptr$rhs$cast29))|0;
    if ($cmp26) {
     $cmp31 = ($sub$ptr$sub30|0)<(2);
     if ($cmp31) {
      label = 31;
      break L5;
     }
     $4 = HEAP8[$incdec$ptr>>0]|0;
     $conv33 = $4&255;
     $and34 = $conv33 & 192;
     $cmp35 = ($and34|0)==(128);
     if (!($cmp35)) {
      label = 31;
      break L5;
     }
     $and39 = $conv14 << 6;
     $shl = $and39 & 1984;
     $and42 = $conv33 & 63;
     $or = $and42 | $shl;
     $cmp45 = ($or>>>0)>($Maxcode>>>0);
     if ($cmp45) {
      label = 31;
      break L5;
     } else {
      $frm_nxt$5 = $add$ptr48;$nchar16_t$2 = $nchar16_t$0;
      break;
     }
    }
    $cmp51 = ($3&255)<(240);
    $add$ptr105 = ((($frm_nxt$1)) + 3|0);
    if ($cmp51) {
     $cmp56 = ($sub$ptr$sub30|0)<(3);
     if ($cmp56) {
      label = 31;
      break L5;
     }
     $5 = HEAP8[$incdec$ptr>>0]|0;
     $6 = HEAP8[$add$ptr48>>0]|0;
     $conv79 = $5&255;
     $and63 = $conv79 & 224;
     switch ($3<<24>>24) {
     case -32:  {
      $cmp64 = ($and63|0)==(160);
      if (!($cmp64)) {
       $sub$ptr$rhs$cast29$lcssa$sink = $sub$ptr$rhs$cast29;
       break L5;
      }
      break;
     }
     case -19:  {
      $cmp73 = ($and63|0)==(128);
      if (!($cmp73)) {
       $sub$ptr$rhs$cast29$lcssa$sink = $sub$ptr$rhs$cast29;
       break L5;
      }
      break;
     }
     default: {
      $and80 = $conv79 & 192;
      $cmp81 = ($and80|0)==(128);
      if (!($cmp81)) {
       $sub$ptr$rhs$cast29$lcssa$sink = $sub$ptr$rhs$cast29;
       break L5;
      }
     }
     }
     $conv87 = $6&255;
     $and88 = $conv87 & 192;
     $cmp89 = ($and88|0)==(128);
     if (!($cmp89)) {
      label = 31;
      break L5;
     }
     $and93 = $conv14 << 12;
     $shl94 = $and93 & 61440;
     $and96 = $conv79 << 6;
     $shl97 = $and96 & 4032;
     $or98 = $shl97 | $shl94;
     $and100 = $conv87 & 63;
     $or101 = $or98 | $and100;
     $cmp102 = ($or101>>>0)>($Maxcode>>>0);
     if ($cmp102) {
      label = 31;
      break L5;
     } else {
      $frm_nxt$5 = $add$ptr105;$nchar16_t$2 = $nchar16_t$0;
      break;
     }
    }
    $cmp112 = ($3&255)<(245);
    if (!($cmp112)) {
     label = 31;
     break L5;
    }
    $cmp117 = ($sub$ptr$sub30|0)<(4);
    $sub = (($mx) - ($nchar16_t$0))|0;
    $cmp119 = ($sub>>>0)<(2);
    $or$cond79 = $cmp119 | $cmp117;
    if ($or$cond79) {
     label = 31;
     break L5;
    }
    $7 = HEAP8[$incdec$ptr>>0]|0;
    $8 = HEAP8[$add$ptr48>>0]|0;
    $9 = HEAP8[$add$ptr105>>0]|0;
    $conv149 = $7&255;
    switch ($3<<24>>24) {
    case -16:  {
     $$off = (($7) + 112)<<24>>24;
     $10 = ($$off&255)<(48);
     if (!($10)) {
      $sub$ptr$rhs$cast29$lcssa$sink = $sub$ptr$rhs$cast29;
      break L5;
     }
     break;
    }
    case -12:  {
     $and141 = $conv149 & 240;
     $cmp142 = ($and141|0)==(128);
     if (!($cmp142)) {
      $sub$ptr$rhs$cast29$lcssa$sink = $sub$ptr$rhs$cast29;
      break L5;
     }
     break;
    }
    default: {
     $and150 = $conv149 & 192;
     $cmp151 = ($and150|0)==(128);
     if (!($cmp151)) {
      $sub$ptr$rhs$cast29$lcssa$sink = $sub$ptr$rhs$cast29;
      break L5;
     }
    }
    }
    $conv158 = $8&255;
    $and159 = $conv158 & 192;
    $cmp160 = ($and159|0)==(128);
    if (!($cmp160)) {
     label = 31;
     break L5;
    }
    $conv162 = $9&255;
    $and163 = $conv162 & 192;
    $cmp164 = ($and163|0)==(128);
    if (!($cmp164)) {
     label = 31;
     break L5;
    }
    $and168 = $conv14 << 18;
    $shl169 = $and168 & 1835008;
    $and171 = $conv149 << 12;
    $shl172 = $and171 & 258048;
    $add = $shl172 | $shl169;
    $and174 = $conv158 << 6;
    $shl175 = $and174 & 4032;
    $add176 = $add | $shl175;
    $and178 = $conv162 & 63;
    $add179 = $add176 | $and178;
    $cmp180 = ($add179>>>0)>($Maxcode>>>0);
    $inc = (($nchar16_t$0) + 1)|0;
    $add$ptr183 = ((($frm_nxt$1)) + 4|0);
    if ($cmp180) {
     label = 31;
     break L5;
    } else {
     $frm_nxt$5 = $add$ptr183;$nchar16_t$2 = $inc;
    }
   }
  } while(0);
  $inc198 = (($nchar16_t$2) + 1)|0;
  $frm_nxt$1 = $frm_nxt$5;$nchar16_t$0 = $inc198;
 }
 if ((label|0) == 31) {
  $sub$ptr$lhs$cast20184 = $frm_nxt$1;
  $sub$ptr$rhs$cast29$lcssa$sink = $sub$ptr$lhs$cast20184;
 }
 $sub$ptr$sub85$le = (($sub$ptr$rhs$cast29$lcssa$sink) - ($sub$ptr$rhs$cast))|0;
 return ($sub$ptr$sub85$le|0);
}
function __ZNSt3__2L13utf8_to_utf16EPKhS1_RS1_PtS3_RS3_mNS_12codecvt_modeE($frm,$frm_end,$frm_nxt,$to,$to_end,$to_nxt,$Maxcode,$mode) {
 $frm = $frm|0;
 $frm_end = $frm_end|0;
 $frm_nxt = $frm_nxt|0;
 $to = $to|0;
 $to_end = $to_end|0;
 $to_nxt = $to_nxt|0;
 $Maxcode = $Maxcode|0;
 $mode = $mode|0;
 var $$off = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $add = 0, $add$ptr = 0, $add$ptr103 = 0;
 var $add$ptr202 = 0, $add$ptr202$sink = 0, $add$ptr50 = 0, $add169 = 0, $add172 = 0, $and = 0, $and135 = 0, $and141 = 0, $and147 = 0, $and150 = 0, $and161 = 0, $and164 = 0, $and167 = 0, $and171 = 0, $and180 = 0, $and185 = 0, $and189 = 0, $and37 = 0, $and42 = 0, $and44 = 0;
 var $and67 = 0, $and78 = 0, $and83 = 0, $and89 = 0, $and92 = 0, $and96 = 0, $arrayidx3 = 0, $arrayidx7 = 0, $cmp = 0, $cmp1 = 0, $cmp100 = 0, $cmp111 = 0, $cmp116 = 0, $cmp12 = 0, $cmp13 = 0, $cmp136 = 0, $cmp142 = 0, $cmp148 = 0, $cmp15 = 0, $cmp151 = 0;
 var $cmp157 = 0, $cmp173 = 0, $cmp19 = 0, $cmp23 = 0, $cmp27 = 0, $cmp32 = 0, $cmp38 = 0, $cmp47 = 0, $cmp5 = 0, $cmp54 = 0, $cmp59 = 0, $cmp68 = 0, $cmp74 = 0, $cmp79 = 0, $cmp84 = 0, $cmp9 = 0, $cond = 0, $conv14 = 0, $conv140 = 0, $conv146 = 0;
 var $conv149 = 0, $conv192 = 0, $conv200 = 0, $conv21 = 0, $conv36 = 0, $conv45 = 0, $conv77 = 0, $conv82 = 0, $conv98 = 0, $conv99 = 0, $incdec$ptr = 0, $incdec$ptr201 = 0, $incdec$ptr217 = 0, $or = 0, $or181 = 0, $or183 = 0, $or187 = 0, $or191 = 0, $or196 = 0, $or199 = 0;
 var $or94 = 0, $or97 = 0, $retval$8 = 0, $shl = 0, $shl162 = 0, $shl165 = 0, $shl168 = 0, $shl178 = 0, $shl182 = 0, $shl186 = 0, $shl195 = 0, $shl93 = 0, $shr19077 = 0, $shr76 = 0, $sub = 0, $sub$ptr$lhs$cast = 0, $sub$ptr$lhs$cast154 = 0, $sub$ptr$rhs$cast = 0, $sub$ptr$rhs$cast155 = 0, $sub$ptr$rhs$cast30 = 0;
 var $sub$ptr$sub = 0, $sub$ptr$sub156 = 0, $sub$ptr$sub31 = 0, $tobool = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$frm_nxt>>2] = $frm;
 HEAP32[$to_nxt>>2] = $to;
 $and = $mode & 4;
 $tobool = ($and|0)==(0);
 $sub$ptr$lhs$cast = $frm_end;
 if (!($tobool)) {
  $0 = HEAP32[$frm_nxt>>2]|0;
  $sub$ptr$rhs$cast = $0;
  $sub$ptr$sub = (($sub$ptr$lhs$cast) - ($sub$ptr$rhs$cast))|0;
  $cmp = ($sub$ptr$sub|0)>(2);
  if ($cmp) {
   $1 = HEAP8[$0>>0]|0;
   $cmp1 = ($1<<24>>24)==(-17);
   if ($cmp1) {
    $arrayidx3 = ((($0)) + 1|0);
    $2 = HEAP8[$arrayidx3>>0]|0;
    $cmp5 = ($2<<24>>24)==(-69);
    if ($cmp5) {
     $arrayidx7 = ((($0)) + 2|0);
     $3 = HEAP8[$arrayidx7>>0]|0;
     $cmp9 = ($3<<24>>24)==(-65);
     if ($cmp9) {
      $add$ptr = ((($0)) + 3|0);
      HEAP32[$frm_nxt>>2] = $add$ptr;
     }
    }
   }
  }
 }
 $sub$ptr$lhs$cast154 = $to_end;
 L8: while(1) {
  $4 = HEAP32[$frm_nxt>>2]|0;
  $cmp12 = ($4>>>0)<($frm_end>>>0);
  if (!($cmp12)) {
   label = 40;
   break;
  }
  $5 = HEAP32[$to_nxt>>2]|0;
  $cmp13 = ($5>>>0)<($to_end>>>0);
  if (!($cmp13)) {
   label = 40;
   break;
  }
  $6 = HEAP8[$4>>0]|0;
  $conv14 = $6&255;
  $cmp15 = ($conv14>>>0)>($Maxcode>>>0);
  if ($cmp15) {
   $retval$8 = 2;
   break;
  }
  $cmp19 = ($6<<24>>24)>(-1);
  $incdec$ptr = ((($4)) + 1|0);
  do {
   if ($cmp19) {
    $conv21 = $6&255;
    HEAP16[$5>>1] = $conv21;
    $add$ptr202$sink = $incdec$ptr;
   } else {
    $cmp23 = ($6&255)<(194);
    if ($cmp23) {
     $retval$8 = 2;
     break L8;
    }
    $cmp27 = ($6&255)<(224);
    $sub$ptr$rhs$cast30 = $4;
    $sub$ptr$sub31 = (($sub$ptr$lhs$cast) - ($sub$ptr$rhs$cast30))|0;
    $add$ptr50 = ((($4)) + 2|0);
    if ($cmp27) {
     $cmp32 = ($sub$ptr$sub31|0)<(2);
     if ($cmp32) {
      $retval$8 = 1;
      break L8;
     }
     $7 = HEAP8[$incdec$ptr>>0]|0;
     $conv36 = $7&255;
     $and37 = $conv36 & 192;
     $cmp38 = ($and37|0)==(128);
     if (!($cmp38)) {
      $retval$8 = 2;
      break L8;
     }
     $and42 = $conv14 << 6;
     $shl = $and42 & 1984;
     $and44 = $conv36 & 63;
     $or = $and44 | $shl;
     $cmp47 = ($or>>>0)>($Maxcode>>>0);
     if ($cmp47) {
      $retval$8 = 2;
      break L8;
     }
     $conv45 = $or&65535;
     HEAP16[$5>>1] = $conv45;
     $add$ptr202$sink = $add$ptr50;
     break;
    }
    $cmp54 = ($6&255)<(240);
    $add$ptr103 = ((($4)) + 3|0);
    if ($cmp54) {
     $cmp59 = ($sub$ptr$sub31|0)<(3);
     if ($cmp59) {
      $retval$8 = 1;
      break L8;
     }
     $8 = HEAP8[$incdec$ptr>>0]|0;
     $9 = HEAP8[$add$ptr50>>0]|0;
     $conv77 = $8&255;
     $and67 = $conv77 & 224;
     switch ($6<<24>>24) {
     case -32:  {
      $cmp68 = ($and67|0)==(160);
      if (!($cmp68)) {
       $retval$8 = 2;
       break L8;
      }
      break;
     }
     case -19:  {
      $cmp74 = ($and67|0)==(128);
      if (!($cmp74)) {
       $retval$8 = 2;
       break L8;
      }
      break;
     }
     default: {
      $and78 = $conv77 & 192;
      $cmp79 = ($and78|0)==(128);
      if (!($cmp79)) {
       $retval$8 = 2;
       break L8;
      }
     }
     }
     $conv82 = $9&255;
     $and83 = $conv82 & 192;
     $cmp84 = ($and83|0)==(128);
     if (!($cmp84)) {
      $retval$8 = 2;
      break L8;
     }
     $and89 = $conv14 << 12;
     $and92 = $conv77 << 6;
     $shl93 = $and92 & 4032;
     $or94 = $shl93 | $and89;
     $and96 = $conv82 & 63;
     $or97 = $or94 | $and96;
     $conv99 = $or97 & 65535;
     $cmp100 = ($conv99>>>0)>($Maxcode>>>0);
     if ($cmp100) {
      $retval$8 = 2;
      break L8;
     }
     $conv98 = $or97&65535;
     HEAP16[$5>>1] = $conv98;
     $add$ptr202$sink = $add$ptr103;
     break;
    }
    $cmp111 = ($6&255)<(245);
    if (!($cmp111)) {
     $retval$8 = 2;
     break L8;
    }
    $cmp116 = ($sub$ptr$sub31|0)<(4);
    if ($cmp116) {
     $retval$8 = 1;
     break L8;
    }
    $10 = HEAP8[$incdec$ptr>>0]|0;
    $11 = HEAP8[$add$ptr50>>0]|0;
    $12 = HEAP8[$add$ptr103>>0]|0;
    $conv140 = $10&255;
    switch ($6<<24>>24) {
    case -16:  {
     $$off = (($10) + 112)<<24>>24;
     $13 = ($$off&255)<(48);
     if (!($13)) {
      $retval$8 = 2;
      break L8;
     }
     break;
    }
    case -12:  {
     $and135 = $conv140 & 240;
     $cmp136 = ($and135|0)==(128);
     if (!($cmp136)) {
      $retval$8 = 2;
      break L8;
     }
     break;
    }
    default: {
     $and141 = $conv140 & 192;
     $cmp142 = ($and141|0)==(128);
     if (!($cmp142)) {
      $retval$8 = 2;
      break L8;
     }
    }
    }
    $conv146 = $11&255;
    $and147 = $conv146 & 192;
    $cmp148 = ($and147|0)==(128);
    if (!($cmp148)) {
     $retval$8 = 2;
     break L8;
    }
    $conv149 = $12&255;
    $and150 = $conv149 & 192;
    $cmp151 = ($and150|0)==(128);
    if (!($cmp151)) {
     $retval$8 = 2;
     break L8;
    }
    $sub$ptr$rhs$cast155 = $5;
    $sub$ptr$sub156 = (($sub$ptr$lhs$cast154) - ($sub$ptr$rhs$cast155))|0;
    $cmp157 = ($sub$ptr$sub156|0)<(4);
    if ($cmp157) {
     $retval$8 = 1;
     break L8;
    }
    $and161 = $conv14 & 7;
    $shl162 = $and161 << 18;
    $and164 = $conv140 << 12;
    $shl165 = $and164 & 258048;
    $add = $shl165 | $shl162;
    $and167 = $conv146 << 6;
    $shl168 = $and167 & 4032;
    $add169 = $add | $shl168;
    $and171 = $conv149 & 63;
    $add172 = $add169 | $and171;
    $cmp173 = ($add172>>>0)>($Maxcode>>>0);
    if ($cmp173) {
     $retval$8 = 2;
     break L8;
    }
    $shl178 = $and161 << 2;
    $and180 = $conv140 >>> 4;
    $shr76 = $and180 & 3;
    $or181 = $shr76 | $shl178;
    $sub = $or181 << 6;
    $shl182 = (($sub) + 16320)|0;
    $and185 = $conv140 << 2;
    $shl186 = $and185 & 60;
    $and189 = $conv146 >>> 4;
    $shr19077 = $and189 & 3;
    $or183 = $shl186 | $shr19077;
    $or187 = $or183 | $shl182;
    $or191 = $or187 | 55296;
    $conv192 = $or191&65535;
    HEAP16[$5>>1] = $conv192;
    $shl195 = $and167 & 960;
    $or196 = $and171 | $shl195;
    $or199 = $or196 | 56320;
    $conv200 = $or199&65535;
    $incdec$ptr201 = ((($5)) + 2|0);
    HEAP32[$to_nxt>>2] = $incdec$ptr201;
    HEAP16[$incdec$ptr201>>1] = $conv200;
    $14 = HEAP32[$frm_nxt>>2]|0;
    $add$ptr202 = ((($14)) + 4|0);
    $add$ptr202$sink = $add$ptr202;
   }
  } while(0);
  HEAP32[$frm_nxt>>2] = $add$ptr202$sink;
  $15 = HEAP32[$to_nxt>>2]|0;
  $incdec$ptr217 = ((($15)) + 2|0);
  HEAP32[$to_nxt>>2] = $incdec$ptr217;
 }
 if ((label|0) == 40) {
  $cond = $cmp12&1;
  $retval$8 = $cond;
 }
 return ($retval$8|0);
}
function __ZNSt3__2L13utf16_to_utf8EPKtS1_RS1_PhS3_RS3_mNS_12codecvt_modeE($frm,$frm_end,$frm_nxt,$to,$to_end,$to_nxt,$Maxcode,$mode) {
 $frm = $frm|0;
 $frm_end = $frm_end|0;
 $frm_nxt = $frm_nxt|0;
 $to = $to|0;
 $to_end = $to_end|0;
 $to_nxt = $to_nxt|0;
 $Maxcode = $Maxcode|0;
 $mode = $mode|0;
 var $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $add = 0, $add101 = 0, $add90 = 0, $add93 = 0, $and = 0, $and109 = 0, $and113 = 0, $and119 = 0, $and123 = 0, $and129 = 0, $and33 = 0, $and53 = 0, $and74 = 0, $and85 = 0, $and92 = 0, $arrayidx = 0, $cmp = 0, $cmp10 = 0, $cmp135 = 0;
 var $cmp141 = 0, $cmp15 = 0, $cmp21 = 0, $cmp26 = 0, $cmp39 = 0, $cmp44 = 0, $cmp5 = 0, $cmp6 = 0, $cmp65 = 0, $cmp70 = 0, $cmp75 = 0, $cmp81 = 0, $cmp94 = 0, $conv = 0, $conv106 = 0, $conv116 = 0, $conv126 = 0, $conv131 = 0, $conv18 = 0, $conv30 = 0;
 var $conv35 = 0, $conv50 = 0, $conv56 = 0, $conv73 = 0, $incdec$ptr = 0, $incdec$ptr107 = 0, $incdec$ptr117 = 0, $incdec$ptr127 = 0, $incdec$ptr132 = 0, $incdec$ptr148 = 0, $incdec$ptr154 = 0, $incdec$ptr159 = 0, $incdec$ptr168 = 0, $incdec$ptr19 = 0, $incdec$ptr2 = 0, $incdec$ptr3 = 0, $incdec$ptr31 = 0, $incdec$ptr36 = 0, $incdec$ptr51 = 0, $incdec$ptr57 = 0;
 var $incdec$ptr62 = 0, $or = 0, $or105 = 0, $or111 = 0, $or115 = 0, $or121 = 0, $or125 = 0, $or130 = 0, $or34 = 0, $or49 = 0, $or55 = 0, $retval$4 = 0, $shl = 0, $shl110 = 0, $shl120 = 0, $shl89 = 0, $shr10064 = 0, $shr10465 = 0, $shr11466 = 0, $shr12467 = 0;
 var $shr4862 = 0, $shr5463 = 0, $shr68 = 0, $sub$ptr$lhs$cast = 0, $sub$ptr$lhs$cast67 = 0, $sub$ptr$rhs$cast = 0, $sub$ptr$rhs$cast13 = 0, $sub$ptr$rhs$cast139 = 0, $sub$ptr$rhs$cast24 = 0, $sub$ptr$rhs$cast42 = 0, $sub$ptr$rhs$cast68 = 0, $sub$ptr$sub = 0, $sub$ptr$sub14 = 0, $sub$ptr$sub140 = 0, $sub$ptr$sub25 = 0, $sub$ptr$sub43 = 0, $sub$ptr$sub69 = 0, $sub$ptr$sub80 = 0, $tobool = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 HEAP32[$frm_nxt>>2] = $frm;
 HEAP32[$to_nxt>>2] = $to;
 $and = $mode & 2;
 $tobool = ($and|0)==(0);
 $sub$ptr$lhs$cast = $to_end;
 if ($tobool) {
  label = 4;
 } else {
  $sub$ptr$rhs$cast = $to;
  $sub$ptr$sub = (($sub$ptr$lhs$cast) - ($sub$ptr$rhs$cast))|0;
  $cmp = ($sub$ptr$sub|0)<(3);
  if ($cmp) {
   $retval$4 = 1;
  } else {
   $incdec$ptr = ((($to)) + 1|0);
   HEAP32[$to_nxt>>2] = $incdec$ptr;
   HEAP8[$to>>0] = -17;
   $0 = HEAP32[$to_nxt>>2]|0;
   $incdec$ptr2 = ((($0)) + 1|0);
   HEAP32[$to_nxt>>2] = $incdec$ptr2;
   HEAP8[$0>>0] = -69;
   $1 = HEAP32[$to_nxt>>2]|0;
   $incdec$ptr3 = ((($1)) + 1|0);
   HEAP32[$to_nxt>>2] = $incdec$ptr3;
   HEAP8[$1>>0] = -65;
   label = 4;
  }
 }
 L4: do {
  if ((label|0) == 4) {
   $sub$ptr$lhs$cast67 = $frm_end;
   $$pre = HEAP32[$frm_nxt>>2]|0;
   $2 = $$pre;
   while(1) {
    $cmp5 = ($2>>>0)<($frm_end>>>0);
    if (!($cmp5)) {
     $retval$4 = 0;
     break L4;
    }
    $3 = HEAP16[$2>>1]|0;
    $conv = $3&65535;
    $cmp6 = ($conv>>>0)>($Maxcode>>>0);
    if ($cmp6) {
     $retval$4 = 2;
     break L4;
    }
    $cmp10 = ($3&65535)<(128);
    do {
     if ($cmp10) {
      $4 = HEAP32[$to_nxt>>2]|0;
      $sub$ptr$rhs$cast13 = $4;
      $sub$ptr$sub14 = (($sub$ptr$lhs$cast) - ($sub$ptr$rhs$cast13))|0;
      $cmp15 = ($sub$ptr$sub14|0)<(1);
      if ($cmp15) {
       $retval$4 = 1;
       break L4;
      }
      $conv18 = $3&255;
      $incdec$ptr19 = ((($4)) + 1|0);
      HEAP32[$to_nxt>>2] = $incdec$ptr19;
      HEAP8[$4>>0] = $conv18;
     } else {
      $cmp21 = ($3&65535)<(2048);
      $and33 = $conv & 63;
      $or34 = $and33 | 128;
      $conv35 = $or34&255;
      if ($cmp21) {
       $5 = HEAP32[$to_nxt>>2]|0;
       $sub$ptr$rhs$cast24 = $5;
       $sub$ptr$sub25 = (($sub$ptr$lhs$cast) - ($sub$ptr$rhs$cast24))|0;
       $cmp26 = ($sub$ptr$sub25|0)<(2);
       if ($cmp26) {
        $retval$4 = 1;
        break L4;
       }
       $shr68 = $conv >>> 6;
       $or = $shr68 | 192;
       $conv30 = $or&255;
       $incdec$ptr31 = ((($5)) + 1|0);
       HEAP32[$to_nxt>>2] = $incdec$ptr31;
       HEAP8[$5>>0] = $conv30;
       $6 = HEAP32[$to_nxt>>2]|0;
       $incdec$ptr36 = ((($6)) + 1|0);
       HEAP32[$to_nxt>>2] = $incdec$ptr36;
       HEAP8[$6>>0] = $conv35;
       break;
      }
      $cmp39 = ($3&65535)<(55296);
      $shr4862 = $conv >>> 12;
      $or49 = $shr4862 | 224;
      $conv50 = $or49&255;
      $and53 = $conv >>> 6;
      $shr5463 = $and53 & 63;
      $or55 = $shr5463 | 128;
      $conv56 = $or55&255;
      if ($cmp39) {
       $7 = HEAP32[$to_nxt>>2]|0;
       $sub$ptr$rhs$cast42 = $7;
       $sub$ptr$sub43 = (($sub$ptr$lhs$cast) - ($sub$ptr$rhs$cast42))|0;
       $cmp44 = ($sub$ptr$sub43|0)<(3);
       if ($cmp44) {
        $retval$4 = 1;
        break L4;
       }
       $incdec$ptr51 = ((($7)) + 1|0);
       HEAP32[$to_nxt>>2] = $incdec$ptr51;
       HEAP8[$7>>0] = $conv50;
       $8 = HEAP32[$to_nxt>>2]|0;
       $incdec$ptr57 = ((($8)) + 1|0);
       HEAP32[$to_nxt>>2] = $incdec$ptr57;
       HEAP8[$8>>0] = $conv56;
       $9 = HEAP32[$to_nxt>>2]|0;
       $incdec$ptr62 = ((($9)) + 1|0);
       HEAP32[$to_nxt>>2] = $incdec$ptr62;
       HEAP8[$9>>0] = $conv35;
       break;
      }
      $cmp65 = ($3&65535)<(56320);
      if (!($cmp65)) {
       $cmp135 = ($3&65535)<(57344);
       if ($cmp135) {
        $retval$4 = 2;
        break L4;
       }
       $16 = HEAP32[$to_nxt>>2]|0;
       $sub$ptr$rhs$cast139 = $16;
       $sub$ptr$sub140 = (($sub$ptr$lhs$cast) - ($sub$ptr$rhs$cast139))|0;
       $cmp141 = ($sub$ptr$sub140|0)<(3);
       if ($cmp141) {
        $retval$4 = 1;
        break L4;
       }
       $incdec$ptr148 = ((($16)) + 1|0);
       HEAP32[$to_nxt>>2] = $incdec$ptr148;
       HEAP8[$16>>0] = $conv50;
       $17 = HEAP32[$to_nxt>>2]|0;
       $incdec$ptr154 = ((($17)) + 1|0);
       HEAP32[$to_nxt>>2] = $incdec$ptr154;
       HEAP8[$17>>0] = $conv56;
       $18 = HEAP32[$to_nxt>>2]|0;
       $incdec$ptr159 = ((($18)) + 1|0);
       HEAP32[$to_nxt>>2] = $incdec$ptr159;
       HEAP8[$18>>0] = $conv35;
       break;
      }
      $sub$ptr$rhs$cast68 = $2;
      $sub$ptr$sub69 = (($sub$ptr$lhs$cast67) - ($sub$ptr$rhs$cast68))|0;
      $cmp70 = ($sub$ptr$sub69|0)<(4);
      if ($cmp70) {
       $retval$4 = 1;
       break L4;
      }
      $arrayidx = ((($2)) + 2|0);
      $10 = HEAP16[$arrayidx>>1]|0;
      $conv73 = $10&65535;
      $and74 = $conv73 & 64512;
      $cmp75 = ($and74|0)==(56320);
      if (!($cmp75)) {
       $retval$4 = 2;
       break L4;
      }
      $11 = HEAP32[$to_nxt>>2]|0;
      $sub$ptr$sub80 = (($sub$ptr$lhs$cast) - ($11))|0;
      $cmp81 = ($sub$ptr$sub80|0)<(4);
      if ($cmp81) {
       $retval$4 = 1;
       break L4;
      }
      $and85 = $conv & 960;
      $add = $and85 << 10;
      $shl = (($add) + 65536)|0;
      $shl89 = $and33 << 10;
      $add90 = $shl | $shl89;
      $and92 = $conv73 & 1023;
      $add93 = $add90 | $and92;
      $cmp94 = ($add93>>>0)>($Maxcode>>>0);
      if ($cmp94) {
       $retval$4 = 2;
       break L4;
      }
      HEAP32[$frm_nxt>>2] = $arrayidx;
      $shr10064 = $and85 >>> 6;
      $add101 = (($shr10064) + 1)|0;
      $shr10465 = $add101 >>> 2;
      $or105 = $shr10465 | 240;
      $conv106 = $or105&255;
      $12 = HEAP32[$to_nxt>>2]|0;
      $incdec$ptr107 = ((($12)) + 1|0);
      HEAP32[$to_nxt>>2] = $incdec$ptr107;
      HEAP8[$12>>0] = $conv106;
      $and109 = $add101 << 4;
      $shl110 = $and109 & 48;
      $and113 = $conv >>> 2;
      $shr11466 = $and113 & 15;
      $or111 = $shr11466 | $shl110;
      $or115 = $or111 | 128;
      $conv116 = $or115&255;
      $13 = HEAP32[$to_nxt>>2]|0;
      $incdec$ptr117 = ((($13)) + 1|0);
      HEAP32[$to_nxt>>2] = $incdec$ptr117;
      HEAP8[$13>>0] = $conv116;
      $and119 = $conv << 4;
      $shl120 = $and119 & 48;
      $and123 = $conv73 >>> 6;
      $shr12467 = $and123 & 15;
      $or121 = $shl120 | $shr12467;
      $or125 = $or121 | 128;
      $conv126 = $or125&255;
      $14 = HEAP32[$to_nxt>>2]|0;
      $incdec$ptr127 = ((($14)) + 1|0);
      HEAP32[$to_nxt>>2] = $incdec$ptr127;
      HEAP8[$14>>0] = $conv126;
      $and129 = $conv73 & 63;
      $or130 = $and129 | 128;
      $conv131 = $or130&255;
      $15 = HEAP32[$to_nxt>>2]|0;
      $incdec$ptr132 = ((($15)) + 1|0);
      HEAP32[$to_nxt>>2] = $incdec$ptr132;
      HEAP8[$15>>0] = $conv131;
     }
    } while(0);
    $19 = HEAP32[$frm_nxt>>2]|0;
    $incdec$ptr168 = ((($19)) + 2|0);
    HEAP32[$frm_nxt>>2] = $incdec$ptr168;
    $2 = $incdec$ptr168;
   }
  }
 } while(0);
 return ($retval$4|0);
}
function __ZNSt3__26locale5__impD2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $__end_$i = 0, $arrayidx$i6 = 0, $cmp = 0, $facets_ = 0, $i$0 = 0, $inc = 0, $name_ = 0, $sub$ptr$div$i = 0, $sub$ptr$sub$i = 0, $tobool = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = (9020);
 $facets_ = ((($this)) + 8|0);
 $__end_$i = ((($this)) + 12|0);
 $i$0 = 0;
 while(1) {
  $0 = HEAP32[$__end_$i>>2]|0;
  $1 = HEAP32[$facets_>>2]|0;
  $sub$ptr$sub$i = (($0) - ($1))|0;
  $sub$ptr$div$i = $sub$ptr$sub$i >> 2;
  $cmp = ($i$0>>>0)<($sub$ptr$div$i>>>0);
  if (!($cmp)) {
   break;
  }
  $2 = $1;
  $arrayidx$i6 = (($2) + ($i$0<<2)|0);
  $3 = HEAP32[$arrayidx$i6>>2]|0;
  $tobool = ($3|0)==(0|0);
  if (!($tobool)) {
   (__ZNSt3__214__shared_count16__release_sharedEv($3)|0);
  }
  $inc = (($i$0) + 1)|0;
  $i$0 = $inc;
 }
 $name_ = ((($this)) + 144|0);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($name_);
 __ZNSt3__213__vector_baseIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEED2Ev($facets_);
 __ZNSt3__26locale5facetD2Ev($this);
 return;
}
function __ZNSt3__26locale5__impD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__26locale5__impD2Ev($this);
 __ZdlPv($this);
 return;
}
function __ZNSt3__213__vector_baseIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEED2Ev($this) {
 $this = $this|0;
 var $$pre$i$i = 0, $0 = 0, $1 = 0, $__allocated_$i$i = 0, $__end_$i$i = 0, $__second_$i$i$i = 0, $cmp = 0, $cmp$i$i = 0, $cmp$i$i1 = 0, $incdec$ptr$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$this>>2]|0;
 $cmp = ($0|0)==(0|0);
 do {
  if (!($cmp)) {
   $__end_$i$i = ((($this)) + 4|0);
   $$pre$i$i = HEAP32[$__end_$i$i>>2]|0;
   $1 = $$pre$i$i;
   while(1) {
    $cmp$i$i = ($1|0)==($0|0);
    if ($cmp$i$i) {
     break;
    }
    $incdec$ptr$i$i = ((($1)) + -4|0);
    HEAP32[$__end_$i$i>>2] = $incdec$ptr$i$i;
    $1 = $incdec$ptr$i$i;
   }
   $__second_$i$i$i = ((($this)) + 16|0);
   $cmp$i$i1 = ($__second_$i$i$i|0)==($0|0);
   if ($cmp$i$i1) {
    $__allocated_$i$i = ((($this)) + 128|0);
    HEAP8[$__allocated_$i$i>>0] = 0;
    break;
   } else {
    __ZdlPv($0);
    break;
   }
  }
 } while(0);
 return;
}
function __ZNSt3__25ctypeIcED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $__del_ = 0, $__tab_ = 0, $tobool = 0, $tobool2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = (9040);
 $__tab_ = ((($this)) + 8|0);
 $0 = HEAP32[$__tab_>>2]|0;
 $tobool = ($0|0)==(0|0);
 if (!($tobool)) {
  $__del_ = ((($this)) + 12|0);
  $1 = HEAP8[$__del_>>0]|0;
  $tobool2 = ($1<<24>>24)==(0);
  if (!($tobool2)) {
   __ZdaPv($0);
  }
 }
 __ZNSt3__26locale5facetD2Ev($this);
 return;
}
function __ZNSt3__25ctypeIcED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__25ctypeIcED2Ev($this);
 __ZdlPv($this);
 return;
}
function __ZNKSt3__25ctypeIcE10do_toupperEc($this,$c) {
 $this = $this|0;
 $c = $c|0;
 var $0 = 0, $arrayidx = 0, $call = 0, $cmp3 = 0, $cond = 0, $conv3 = 0, $idxprom = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $cmp3 = ($c<<24>>24)>(-1);
 if ($cmp3) {
  $idxprom = $c&255;
  $call = (__ZNSt3__25ctypeIcE21__classic_upper_tableEv()|0);
  $arrayidx = (($call) + ($idxprom<<2)|0);
  $0 = HEAP32[$arrayidx>>2]|0;
  $conv3 = $0&255;
  $cond = $conv3;
 } else {
  $cond = $c;
 }
 return ($cond|0);
}
function __ZNKSt3__25ctypeIcE10do_toupperEPcPKc($this,$low,$high) {
 $this = $this|0;
 $low = $low|0;
 $high = $high|0;
 var $0 = 0, $1 = 0, $2 = 0, $arrayidx = 0, $call = 0, $cmp = 0, $cmp26 = 0, $cond = 0, $conv4 = 0, $conv5 = 0, $incdec$ptr = 0, $low$addr$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $low$addr$0 = $low;
 while(1) {
  $cmp = ($low$addr$0|0)==($high|0);
  if ($cmp) {
   break;
  }
  $0 = HEAP8[$low$addr$0>>0]|0;
  $cmp26 = ($0<<24>>24)>(-1);
  if ($cmp26) {
   $call = (__ZNSt3__25ctypeIcE21__classic_upper_tableEv()|0);
   $1 = HEAP8[$low$addr$0>>0]|0;
   $conv4 = $1 << 24 >> 24;
   $arrayidx = (($call) + ($conv4<<2)|0);
   $2 = HEAP32[$arrayidx>>2]|0;
   $conv5 = $2&255;
   $cond = $conv5;
  } else {
   $cond = $0;
  }
  HEAP8[$low$addr$0>>0] = $cond;
  $incdec$ptr = ((($low$addr$0)) + 1|0);
  $low$addr$0 = $incdec$ptr;
 }
 return ($high|0);
}
function __ZNKSt3__25ctypeIcE10do_tolowerEc($this,$c) {
 $this = $this|0;
 $c = $c|0;
 var $0 = 0, $arrayidx = 0, $call = 0, $cmp3 = 0, $cond = 0, $conv = 0, $conv4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $cmp3 = ($c<<24>>24)>(-1);
 if ($cmp3) {
  $conv = $c << 24 >> 24;
  $call = (__ZNSt3__25ctypeIcE21__classic_lower_tableEv()|0);
  $arrayidx = (($call) + ($conv<<2)|0);
  $0 = HEAP32[$arrayidx>>2]|0;
  $conv4 = $0&255;
  $cond = $conv4;
 } else {
  $cond = $c;
 }
 return ($cond|0);
}
function __ZNKSt3__25ctypeIcE10do_tolowerEPcPKc($this,$low,$high) {
 $this = $this|0;
 $low = $low|0;
 $high = $high|0;
 var $0 = 0, $1 = 0, $2 = 0, $arrayidx = 0, $call = 0, $cmp = 0, $cmp26 = 0, $cond = 0, $conv4 = 0, $conv5 = 0, $incdec$ptr = 0, $low$addr$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $low$addr$0 = $low;
 while(1) {
  $cmp = ($low$addr$0|0)==($high|0);
  if ($cmp) {
   break;
  }
  $0 = HEAP8[$low$addr$0>>0]|0;
  $cmp26 = ($0<<24>>24)>(-1);
  if ($cmp26) {
   $call = (__ZNSt3__25ctypeIcE21__classic_lower_tableEv()|0);
   $1 = HEAP8[$low$addr$0>>0]|0;
   $conv4 = $1 << 24 >> 24;
   $arrayidx = (($call) + ($conv4<<2)|0);
   $2 = HEAP32[$arrayidx>>2]|0;
   $conv5 = $2&255;
   $cond = $conv5;
  } else {
   $cond = $0;
  }
  HEAP8[$low$addr$0>>0] = $cond;
  $incdec$ptr = ((($low$addr$0)) + 1|0);
  $low$addr$0 = $incdec$ptr;
 }
 return ($high|0);
}
function __ZNKSt3__25ctypeIcE8do_widenEc($this,$c) {
 $this = $this|0;
 $c = $c|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return ($c|0);
}
function __ZNKSt3__25ctypeIcE8do_widenEPKcS3_Pc($this,$low,$high,$dest) {
 $this = $this|0;
 $low = $low|0;
 $high = $high|0;
 $dest = $dest|0;
 var $0 = 0, $cmp = 0, $dest$addr$0 = 0, $incdec$ptr = 0, $incdec$ptr2 = 0, $low$addr$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $dest$addr$0 = $dest;$low$addr$0 = $low;
 while(1) {
  $cmp = ($low$addr$0|0)==($high|0);
  if ($cmp) {
   break;
  }
  $0 = HEAP8[$low$addr$0>>0]|0;
  HEAP8[$dest$addr$0>>0] = $0;
  $incdec$ptr = ((($low$addr$0)) + 1|0);
  $incdec$ptr2 = ((($dest$addr$0)) + 1|0);
  $dest$addr$0 = $incdec$ptr2;$low$addr$0 = $incdec$ptr;
 }
 return ($high|0);
}
function __ZNKSt3__25ctypeIcE9do_narrowEcc($this,$c,$dfault) {
 $this = $this|0;
 $c = $c|0;
 $dfault = $dfault|0;
 var $c$dfault = 0, $cmp2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $cmp2 = ($c<<24>>24)>(-1);
 $c$dfault = $cmp2 ? $c : $dfault;
 return ($c$dfault|0);
}
function __ZNKSt3__25ctypeIcE9do_narrowEPKcS3_cPc($this,$low,$high,$dfault,$dest) {
 $this = $this|0;
 $low = $low|0;
 $high = $high|0;
 $dfault = $dfault|0;
 $dest = $dest|0;
 var $$dfault = 0, $0 = 0, $cmp = 0, $cmp26 = 0, $dest$addr$0 = 0, $incdec$ptr = 0, $incdec$ptr4 = 0, $low$addr$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $dest$addr$0 = $dest;$low$addr$0 = $low;
 while(1) {
  $cmp = ($low$addr$0|0)==($high|0);
  if ($cmp) {
   break;
  }
  $0 = HEAP8[$low$addr$0>>0]|0;
  $cmp26 = ($0<<24>>24)>(-1);
  $$dfault = $cmp26 ? $0 : $dfault;
  HEAP8[$dest$addr$0>>0] = $$dfault;
  $incdec$ptr = ((($low$addr$0)) + 1|0);
  $incdec$ptr4 = ((($dest$addr$0)) + 1|0);
  $dest$addr$0 = $incdec$ptr4;$low$addr$0 = $incdec$ptr;
 }
 return ($high|0);
}
function __ZNSt3__25ctypeIcE21__classic_lower_tableEv() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __THREW__ = 0;
 $call = (invoke_i(467)|0);
 $0 = __THREW__; __THREW__ = 0;
 $1 = $0&1;
 if ($1) {
  $3 = ___cxa_find_matching_catch_3(0|0)|0;
  $4 = tempRet0;
  ___clang_call_terminate($3);
  // unreachable;
 } else {
  $2 = HEAP32[$call>>2]|0;
  return ($2|0);
 }
 return (0)|0;
}
function __ZNSt3__25ctypeIcE21__classic_upper_tableEv() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __THREW__ = 0;
 $call = (invoke_i(468)|0);
 $0 = __THREW__; __THREW__ = 0;
 $1 = $0&1;
 if ($1) {
  $3 = ___cxa_find_matching_catch_3(0|0)|0;
  $4 = tempRet0;
  ___clang_call_terminate($3);
  // unreachable;
 } else {
  $2 = HEAP32[$call>>2]|0;
  return ($2|0);
 }
 return (0)|0;
}
function __ZNSt3__25ctypeIcE13classic_tableEv() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __THREW__ = 0;
 $call = (invoke_i(469)|0);
 $0 = __THREW__; __THREW__ = 0;
 $1 = $0&1;
 if ($1) {
  $3 = ___cxa_find_matching_catch_3(0|0)|0;
  $4 = tempRet0;
  ___clang_call_terminate($3);
  // unreachable;
 } else {
  $2 = HEAP32[$call>>2]|0;
  return ($2|0);
 }
 return (0)|0;
}
function __ZNSt3__28numpunctIcED2Ev($this) {
 $this = $this|0;
 var $__grouping_ = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = (9092);
 $__grouping_ = ((($this)) + 12|0);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grouping_);
 __ZNSt3__26locale5facetD2Ev($this);
 return;
}
function __ZNSt3__28numpunctIcED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__28numpunctIcED2Ev($this);
 __ZdlPv($this);
 return;
}
function __ZNKSt3__28numpunctIcE16do_decimal_pointEv($this) {
 $this = $this|0;
 var $0 = 0, $__decimal_point_ = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $__decimal_point_ = ((($this)) + 8|0);
 $0 = HEAP8[$__decimal_point_>>0]|0;
 return ($0|0);
}
function __ZNKSt3__28numpunctIcE16do_thousands_sepEv($this) {
 $this = $this|0;
 var $0 = 0, $__thousands_sep_ = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $__thousands_sep_ = ((($this)) + 9|0);
 $0 = HEAP8[$__thousands_sep_>>0]|0;
 return ($0|0);
}
function __ZNKSt3__28numpunctIcE11do_groupingEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var $__grouping_ = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $__grouping_ = ((($this)) + 12|0);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2ERKS5_($agg$result,$__grouping_);
 return;
}
function __ZNKSt3__28numpunctIcE11do_truenameEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var $call$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 ;HEAP32[$agg$result>>2]=0|0;HEAP32[$agg$result+4>>2]=0|0;HEAP32[$agg$result+8>>2]=0|0;
 $call$i = (__ZNSt3__211char_traitsIcE6lengthEPKc(17824)|0);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($agg$result,17824,$call$i);
 return;
}
function __ZNKSt3__28numpunctIcE12do_falsenameEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var $call$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 ;HEAP32[$agg$result>>2]=0|0;HEAP32[$agg$result+4>>2]=0|0;HEAP32[$agg$result+8>>2]=0|0;
 $call$i = (__ZNSt3__211char_traitsIcE6lengthEPKc(17818)|0);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($agg$result,17818,$call$i);
 return;
}
function __ZNSt3__28numpunctIwED2Ev($this) {
 $this = $this|0;
 var $__grouping_ = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = (9132);
 $__grouping_ = ((($this)) + 16|0);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grouping_);
 __ZNSt3__26locale5facetD2Ev($this);
 return;
}
function __ZNSt3__28numpunctIwED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__28numpunctIwED2Ev($this);
 __ZdlPv($this);
 return;
}
function __ZNKSt3__28numpunctIwE16do_decimal_pointEv($this) {
 $this = $this|0;
 var $0 = 0, $__decimal_point_ = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $__decimal_point_ = ((($this)) + 8|0);
 $0 = HEAP32[$__decimal_point_>>2]|0;
 return ($0|0);
}
function __ZNKSt3__28numpunctIwE16do_thousands_sepEv($this) {
 $this = $this|0;
 var $0 = 0, $__thousands_sep_ = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $__thousands_sep_ = ((($this)) + 12|0);
 $0 = HEAP32[$__thousands_sep_>>2]|0;
 return ($0|0);
}
function __ZNKSt3__28numpunctIwE11do_groupingEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var $__grouping_ = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $__grouping_ = ((($this)) + 16|0);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2ERKS5_($agg$result,$__grouping_);
 return;
}
function __ZNKSt3__28numpunctIwE11do_truenameEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var $call$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 ;HEAP32[$agg$result>>2]=0|0;HEAP32[$agg$result+4>>2]=0|0;HEAP32[$agg$result+8>>2]=0|0;
 $call$i = (__ZNSt3__211char_traitsIwE6lengthEPKw(9188)|0);
 __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initEPKwj($agg$result,9188,$call$i);
 return;
}
function __ZNKSt3__28numpunctIwE12do_falsenameEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var $call$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 ;HEAP32[$agg$result>>2]=0|0;HEAP32[$agg$result+4>>2]=0|0;HEAP32[$agg$result+8>>2]=0|0;
 $call$i = (__ZNSt3__211char_traitsIwE6lengthEPKw(9164)|0);
 __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initEPKwj($agg$result,9164,$call$i);
 return;
}
function __ZNSt3__26locale5facetD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__26locale5facetD2Ev($this);
 __ZdlPv($this);
 return;
}
function __ZNSt3__25ctypeIwED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__26locale5facetD2Ev($this);
 __ZdlPv($this);
 return;
}
function __ZNKSt3__25ctypeIwE5do_isEtw($this,$m,$c) {
 $this = $this|0;
 $m = $m|0;
 $c = $c|0;
 var $0 = 0, $and2 = 0, $arrayidx = 0, $call = 0, $cmp = 0, $cmp3 = 0, $cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $cmp = ($c>>>0)<(128);
 if ($cmp) {
  $call = (__ZNSt3__25ctypeIcE13classic_tableEv()|0);
  $arrayidx = (($call) + ($c<<1)|0);
  $0 = HEAP16[$arrayidx>>1]|0;
  $and2 = $0 & $m;
  $cmp3 = ($and2<<16>>16)!=(0);
  $cond = $cmp3;
 } else {
  $cond = 0;
 }
 return ($cond|0);
}
function __ZNKSt3__25ctypeIwE5do_isEPKwS3_Pt($this,$low,$high,$vec) {
 $this = $this|0;
 $low = $low|0;
 $high = $high|0;
 $vec = $vec|0;
 var $0 = 0, $1 = 0, $2 = 0, $arrayidx = 0, $call = 0, $cmp = 0, $cmp2 = 0, $cond = 0, $conv = 0, $conv3 = 0, $incdec$ptr = 0, $incdec$ptr4 = 0, $low$addr$0 = 0, $vec$addr$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $low$addr$0 = $low;$vec$addr$0 = $vec;
 while(1) {
  $cmp = ($low$addr$0|0)==($high|0);
  if ($cmp) {
   break;
  }
  $0 = HEAP32[$low$addr$0>>2]|0;
  $cmp2 = ($0>>>0)<(128);
  if ($cmp2) {
   $call = (__ZNSt3__25ctypeIcE13classic_tableEv()|0);
   $1 = HEAP32[$low$addr$0>>2]|0;
   $arrayidx = (($call) + ($1<<1)|0);
   $2 = HEAP16[$arrayidx>>1]|0;
   $conv = $2&65535;
   $cond = $conv;
  } else {
   $cond = 0;
  }
  $conv3 = $cond&65535;
  HEAP16[$vec$addr$0>>1] = $conv3;
  $incdec$ptr = ((($low$addr$0)) + 4|0);
  $incdec$ptr4 = ((($vec$addr$0)) + 2|0);
  $low$addr$0 = $incdec$ptr;$vec$addr$0 = $incdec$ptr4;
 }
 return ($high|0);
}
function __ZNKSt3__25ctypeIwE10do_scan_isEtPKwS3_($this,$m,$low,$high) {
 $this = $this|0;
 $m = $m|0;
 $low = $low|0;
 $high = $high|0;
 var $0 = 0, $1 = 0, $2 = 0, $and5 = 0, $arrayidx = 0, $call = 0, $cmp = 0, $cmp2 = 0, $incdec$ptr = 0, $low$addr$0 = 0, $low$addr$0$lcssa = 0, $tobool = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $low$addr$0 = $low;
 while(1) {
  $cmp = ($low$addr$0|0)==($high|0);
  if ($cmp) {
   $low$addr$0$lcssa = $high;
   break;
  }
  $0 = HEAP32[$low$addr$0>>2]|0;
  $cmp2 = ($0>>>0)<(128);
  if ($cmp2) {
   $call = (__ZNSt3__25ctypeIcE13classic_tableEv()|0);
   $1 = HEAP32[$low$addr$0>>2]|0;
   $arrayidx = (($call) + ($1<<1)|0);
   $2 = HEAP16[$arrayidx>>1]|0;
   $and5 = $2 & $m;
   $tobool = ($and5<<16>>16)==(0);
   if (!($tobool)) {
    $low$addr$0$lcssa = $low$addr$0;
    break;
   }
  }
  $incdec$ptr = ((($low$addr$0)) + 4|0);
  $low$addr$0 = $incdec$ptr;
 }
 return ($low$addr$0$lcssa|0);
}
function __ZNKSt3__25ctypeIwE11do_scan_notEtPKwS3_($this,$m,$low,$high) {
 $this = $this|0;
 $m = $m|0;
 $low = $low|0;
 $high = $high|0;
 var $0 = 0, $1 = 0, $2 = 0, $and5 = 0, $arrayidx = 0, $call = 0, $cmp = 0, $cmp2 = 0, $incdec$ptr = 0, $low$addr$0 = 0, $low$addr$0$lcssa = 0, $tobool = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $low$addr$0 = $low;
 while(1) {
  $cmp = ($low$addr$0|0)==($high|0);
  if ($cmp) {
   $low$addr$0$lcssa = $high;
   break;
  }
  $0 = HEAP32[$low$addr$0>>2]|0;
  $cmp2 = ($0>>>0)<(128);
  if (!($cmp2)) {
   $low$addr$0$lcssa = $low$addr$0;
   break;
  }
  $call = (__ZNSt3__25ctypeIcE13classic_tableEv()|0);
  $1 = HEAP32[$low$addr$0>>2]|0;
  $arrayidx = (($call) + ($1<<1)|0);
  $2 = HEAP16[$arrayidx>>1]|0;
  $and5 = $2 & $m;
  $tobool = ($and5<<16>>16)==(0);
  if ($tobool) {
   $low$addr$0$lcssa = $low$addr$0;
   break;
  }
  $incdec$ptr = ((($low$addr$0)) + 4|0);
  $low$addr$0 = $incdec$ptr;
 }
 return ($low$addr$0$lcssa|0);
}
function __ZNKSt3__25ctypeIwE10do_toupperEw($this,$c) {
 $this = $this|0;
 $c = $c|0;
 var $0 = 0, $arrayidx = 0, $call = 0, $cmp = 0, $cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $cmp = ($c>>>0)<(128);
 if ($cmp) {
  $call = (__ZNSt3__25ctypeIcE21__classic_upper_tableEv()|0);
  $arrayidx = (($call) + ($c<<2)|0);
  $0 = HEAP32[$arrayidx>>2]|0;
  $cond = $0;
 } else {
  $cond = $c;
 }
 return ($cond|0);
}
function __ZNKSt3__25ctypeIwE10do_toupperEPwPKw($this,$low,$high) {
 $this = $this|0;
 $low = $low|0;
 $high = $high|0;
 var $$pre = 0, $0 = 0, $1 = 0, $2 = 0, $arrayidx = 0, $call = 0, $cmp = 0, $cmp2 = 0, $incdec$ptr = 0, $low$addr$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $low$addr$0 = $low;
 while(1) {
  $cmp = ($low$addr$0|0)==($high|0);
  if ($cmp) {
   break;
  }
  $0 = HEAP32[$low$addr$0>>2]|0;
  $cmp2 = ($0>>>0)<(128);
  if ($cmp2) {
   $call = (__ZNSt3__25ctypeIcE21__classic_upper_tableEv()|0);
   $1 = HEAP32[$low$addr$0>>2]|0;
   $arrayidx = (($call) + ($1<<2)|0);
   $$pre = HEAP32[$arrayidx>>2]|0;
   $2 = $$pre;
  } else {
   $2 = $0;
  }
  HEAP32[$low$addr$0>>2] = $2;
  $incdec$ptr = ((($low$addr$0)) + 4|0);
  $low$addr$0 = $incdec$ptr;
 }
 return ($high|0);
}
function __ZNKSt3__25ctypeIwE10do_tolowerEw($this,$c) {
 $this = $this|0;
 $c = $c|0;
 var $0 = 0, $arrayidx = 0, $call = 0, $cmp = 0, $cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $cmp = ($c>>>0)<(128);
 if ($cmp) {
  $call = (__ZNSt3__25ctypeIcE21__classic_lower_tableEv()|0);
  $arrayidx = (($call) + ($c<<2)|0);
  $0 = HEAP32[$arrayidx>>2]|0;
  $cond = $0;
 } else {
  $cond = $c;
 }
 return ($cond|0);
}
function __ZNKSt3__25ctypeIwE10do_tolowerEPwPKw($this,$low,$high) {
 $this = $this|0;
 $low = $low|0;
 $high = $high|0;
 var $$pre = 0, $0 = 0, $1 = 0, $2 = 0, $arrayidx = 0, $call = 0, $cmp = 0, $cmp2 = 0, $incdec$ptr = 0, $low$addr$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $low$addr$0 = $low;
 while(1) {
  $cmp = ($low$addr$0|0)==($high|0);
  if ($cmp) {
   break;
  }
  $0 = HEAP32[$low$addr$0>>2]|0;
  $cmp2 = ($0>>>0)<(128);
  if ($cmp2) {
   $call = (__ZNSt3__25ctypeIcE21__classic_lower_tableEv()|0);
   $1 = HEAP32[$low$addr$0>>2]|0;
   $arrayidx = (($call) + ($1<<2)|0);
   $$pre = HEAP32[$arrayidx>>2]|0;
   $2 = $$pre;
  } else {
   $2 = $0;
  }
  HEAP32[$low$addr$0>>2] = $2;
  $incdec$ptr = ((($low$addr$0)) + 4|0);
  $low$addr$0 = $incdec$ptr;
 }
 return ($high|0);
}
function __ZNKSt3__25ctypeIwE8do_widenEc($this,$c) {
 $this = $this|0;
 $c = $c|0;
 var $conv = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $conv = $c << 24 >> 24;
 return ($conv|0);
}
function __ZNKSt3__25ctypeIwE8do_widenEPKcS3_Pw($this,$low,$high,$dest) {
 $this = $this|0;
 $low = $low|0;
 $high = $high|0;
 $dest = $dest|0;
 var $0 = 0, $cmp = 0, $conv = 0, $dest$addr$0 = 0, $incdec$ptr = 0, $incdec$ptr2 = 0, $low$addr$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $dest$addr$0 = $dest;$low$addr$0 = $low;
 while(1) {
  $cmp = ($low$addr$0|0)==($high|0);
  if ($cmp) {
   break;
  }
  $0 = HEAP8[$low$addr$0>>0]|0;
  $conv = $0 << 24 >> 24;
  HEAP32[$dest$addr$0>>2] = $conv;
  $incdec$ptr = ((($low$addr$0)) + 1|0);
  $incdec$ptr2 = ((($dest$addr$0)) + 4|0);
  $dest$addr$0 = $incdec$ptr2;$low$addr$0 = $incdec$ptr;
 }
 return ($high|0);
}
function __ZNKSt3__25ctypeIwE9do_narrowEwc($this,$c,$dfault) {
 $this = $this|0;
 $c = $c|0;
 $dfault = $dfault|0;
 var $cmp = 0, $conv = 0, $retval$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $cmp = ($c>>>0)<(128);
 $conv = $c&255;
 $retval$0 = $cmp ? $conv : $dfault;
 return ($retval$0|0);
}
function __ZNKSt3__25ctypeIwE9do_narrowEPKwS3_cPc($this,$low,$high,$dfault,$dest) {
 $this = $this|0;
 $low = $low|0;
 $high = $high|0;
 $dfault = $dfault|0;
 $dest = $dest|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $cmp = 0, $cmp2 = 0, $conv = 0, $dest$addr$0 = 0, $incdec$ptr = 0, $incdec$ptr3 = 0, $low$addr$0 = 0, $low7 = 0, $scevgep = 0, $storemerge = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $low7 = $low;
 $0 = $high;
 $1 = (($0) - ($low7))|0;
 $2 = $1 >>> 2;
 $dest$addr$0 = $dest;$low$addr$0 = $low;
 while(1) {
  $cmp = ($low$addr$0|0)==($high|0);
  if ($cmp) {
   break;
  }
  $3 = HEAP32[$low$addr$0>>2]|0;
  $cmp2 = ($3>>>0)<(128);
  $conv = $3&255;
  $storemerge = $cmp2 ? $conv : $dfault;
  HEAP8[$dest$addr$0>>0] = $storemerge;
  $incdec$ptr = ((($low$addr$0)) + 4|0);
  $incdec$ptr3 = ((($dest$addr$0)) + 1|0);
  $dest$addr$0 = $incdec$ptr3;$low$addr$0 = $incdec$ptr;
 }
 $scevgep = (($low) + ($2<<2)|0);
 return ($scevgep|0);
}
function __ZNSt3__27codecvtIcc11__mbstate_tED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__26locale5facetD2Ev($this);
 __ZdlPv($this);
 return;
}
function __ZNSt3__27codecvtIDsc11__mbstate_tED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__26locale5facetD2Ev($this);
 __ZdlPv($this);
 return;
}
function __ZNSt3__27codecvtIDic11__mbstate_tED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__26locale5facetD2Ev($this);
 __ZdlPv($this);
 return;
}
function __ZNSt3__220__time_get_c_storageIcEC2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = (9448);
 return;
}
function __ZNSt3__220__time_get_c_storageIwEC2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = (9484);
 return;
}
function __ZNSt3__25ctypeIcEC2EPKtbj($this,$tab,$del,$refs) {
 $this = $this|0;
 $tab = $tab|0;
 $del = $del|0;
 $refs = $refs|0;
 var $__del_ = 0, $__shared_owners_$i$i = 0, $__tab_ = 0, $call = 0, $cmp = 0, $frombool = 0, $sub$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $frombool = $del&1;
 $sub$i = (($refs) + -1)|0;
 $__shared_owners_$i$i = ((($this)) + 4|0);
 HEAP32[$__shared_owners_$i$i>>2] = $sub$i;
 HEAP32[$this>>2] = (9040);
 $__tab_ = ((($this)) + 8|0);
 HEAP32[$__tab_>>2] = $tab;
 $__del_ = ((($this)) + 12|0);
 HEAP8[$__del_>>0] = $frombool;
 $cmp = ($tab|0)==(0|0);
 if ($cmp) {
  $call = (__ZNSt3__25ctypeIcE13classic_tableEv()|0);
  HEAP32[$__tab_>>2] = $call;
 }
 return;
}
function __ZNKSt3__220__vector_base_commonILb1EE20__throw_length_errorEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $exception = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $exception = (___cxa_allocate_exception(8)|0);
 __THREW__ = 0;
 invoke_vii(470,($exception|0),(17871|0));
 $0 = __THREW__; __THREW__ = 0;
 $1 = $0&1;
 if ($1) {
  $2 = ___cxa_find_matching_catch_2()|0;
  $3 = tempRet0;
  ___cxa_free_exception(($exception|0));
  ___resumeException($2|0);
  // unreachable;
 } else {
  HEAP32[$exception>>2] = (9688);
  ___cxa_throw(($exception|0),(1936|0),(321|0));
  // unreachable;
 }
}
function __ZNSt3__26locale5__impC2Ej($this,$refs) {
 $this = $this|0;
 $refs = $refs|0;
 var $$cast$i = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0;
 var $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
 var $97 = 0, $98 = 0, $99 = 0, $__end_$i$i = 0, $__shared_owners_$i$i = 0, $call$i1 = 0, $cmp$i$i$i = 0, $ehselector$slot$0 = 0, $ehselector$slot$1 = 0, $exn$slot$0 = 0, $exn$slot$1 = 0, $facets_ = 0, $incdec$ptr$i$i$i = 0, $name_ = 0, $sub$i = 0, $sub$ptr$div$i$i = 0, $sub$ptr$sub$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $sub$i = (($refs) + -1)|0;
 $__shared_owners_$i$i = ((($this)) + 4|0);
 HEAP32[$__shared_owners_$i$i>>2] = $sub$i;
 HEAP32[$this>>2] = (9020);
 $facets_ = ((($this)) + 8|0);
 __THREW__ = 0;
 invoke_vii(471,($facets_|0),28);
 $0 = __THREW__; __THREW__ = 0;
 $1 = $0&1;
 if ($1) {
  $116 = ___cxa_find_matching_catch_2()|0;
  $117 = tempRet0;
  $ehselector$slot$1 = $117;$exn$slot$1 = $116;
 } else {
  $name_ = ((($this)) + 144|0);
  ;HEAP32[$name_>>2]=0|0;HEAP32[$name_+4>>2]=0|0;HEAP32[$name_+8>>2]=0|0;
  __THREW__ = 0;
  $call$i1 = (invoke_ii(338,(15726|0))|0);
  $2 = __THREW__; __THREW__ = 0;
  $3 = $2&1;
  if ($3) {
   label = 62;
  } else {
   __THREW__ = 0;
   invoke_viii(339,($name_|0),(15726|0),($call$i1|0));
   $4 = __THREW__; __THREW__ = 0;
   $5 = $4&1;
   if ($5) {
    label = 62;
   } else {
    $__end_$i$i = ((($this)) + 12|0);
    $6 = HEAP32[$__end_$i$i>>2]|0;
    $7 = HEAP32[$facets_>>2]|0;
    $$cast$i = $7;
    $8 = $6;
    $9 = $8;
    while(1) {
     $cmp$i$i$i = ($9|0)==($$cast$i|0);
     if ($cmp$i$i$i) {
      break;
     }
     $incdec$ptr$i$i$i = ((($9)) + -4|0);
     HEAP32[$__end_$i$i>>2] = $incdec$ptr$i$i$i;
     $9 = $incdec$ptr$i$i$i;
    }
    $sub$ptr$sub$i$i = (($6) - ($7))|0;
    $sub$ptr$div$i$i = $sub$ptr$sub$i$i >> 2;
    __ZNKSt3__26vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEE17__annotate_shrinkEj($facets_,$sub$ptr$div$i$i);
    __THREW__ = 0;
    invoke_v(472);
    $10 = __THREW__; __THREW__ = 0;
    $11 = $10&1;
    do {
     if (!($11)) {
      __THREW__ = 0;
      invoke_vii(473,($this|0),(18976|0));
      $12 = __THREW__; __THREW__ = 0;
      $13 = $12&1;
      if (!($13)) {
       __THREW__ = 0;
       invoke_v(474);
       $14 = __THREW__; __THREW__ = 0;
       $15 = $14&1;
       if (!($15)) {
        __THREW__ = 0;
        invoke_vii(475,($this|0),(18984|0));
        $16 = __THREW__; __THREW__ = 0;
        $17 = $16&1;
        if (!($17)) {
         __ZNSt3__212_GLOBAL__N_14makeINS_5ctypeIcEEDnbjEERT_T0_T1_T2_();
         __THREW__ = 0;
         invoke_vii(476,($this|0),(18992|0));
         $18 = __THREW__; __THREW__ = 0;
         $19 = $18&1;
         if (!($19)) {
          __THREW__ = 0;
          invoke_v(477);
          $20 = __THREW__; __THREW__ = 0;
          $21 = $20&1;
          if (!($21)) {
           __THREW__ = 0;
           invoke_vii(478,($this|0),(19008|0));
           $22 = __THREW__; __THREW__ = 0;
           $23 = $22&1;
           if (!($23)) {
            __THREW__ = 0;
            invoke_v(479);
            $24 = __THREW__; __THREW__ = 0;
            $25 = $24&1;
            if (!($25)) {
             __THREW__ = 0;
             invoke_vii(480,($this|0),(19016|0));
             $26 = __THREW__; __THREW__ = 0;
             $27 = $26&1;
             if (!($27)) {
              __THREW__ = 0;
              invoke_v(481);
              $28 = __THREW__; __THREW__ = 0;
              $29 = $28&1;
              if (!($29)) {
               __THREW__ = 0;
               invoke_vii(482,($this|0),(19024|0));
               $30 = __THREW__; __THREW__ = 0;
               $31 = $30&1;
               if (!($31)) {
                __THREW__ = 0;
                invoke_v(483);
                $32 = __THREW__; __THREW__ = 0;
                $33 = $32&1;
                if (!($33)) {
                 __THREW__ = 0;
                 invoke_vii(484,($this|0),(19040|0));
                 $34 = __THREW__; __THREW__ = 0;
                 $35 = $34&1;
                 if (!($35)) {
                  __THREW__ = 0;
                  invoke_v(485);
                  $36 = __THREW__; __THREW__ = 0;
                  $37 = $36&1;
                  if (!($37)) {
                   __THREW__ = 0;
                   invoke_vii(486,($this|0),(19048|0));
                   $38 = __THREW__; __THREW__ = 0;
                   $39 = $38&1;
                   if ($39) {
                    break;
                   }
                   __ZNSt3__212_GLOBAL__N_14makeINS_8numpunctIcEEjEERT_T0_();
                   __THREW__ = 0;
                   invoke_vii(487,($this|0),(19056|0));
                   $40 = __THREW__; __THREW__ = 0;
                   $41 = $40&1;
                   if ($41) {
                    break;
                   }
                   __ZNSt3__212_GLOBAL__N_14makeINS_8numpunctIwEEjEERT_T0_();
                   __THREW__ = 0;
                   invoke_vii(488,($this|0),(19080|0));
                   $42 = __THREW__; __THREW__ = 0;
                   $43 = $42&1;
                   if ($43) {
                    break;
                   }
                   __THREW__ = 0;
                   invoke_v(489);
                   $44 = __THREW__; __THREW__ = 0;
                   $45 = $44&1;
                   if ($45) {
                    break;
                   }
                   __THREW__ = 0;
                   invoke_vii(490,($this|0),(19112|0));
                   $46 = __THREW__; __THREW__ = 0;
                   $47 = $46&1;
                   if ($47) {
                    break;
                   }
                   __THREW__ = 0;
                   invoke_v(491);
                   $48 = __THREW__; __THREW__ = 0;
                   $49 = $48&1;
                   if ($49) {
                    break;
                   }
                   __THREW__ = 0;
                   invoke_vii(492,($this|0),(19120|0));
                   $50 = __THREW__; __THREW__ = 0;
                   $51 = $50&1;
                   if ($51) {
                    break;
                   }
                   __THREW__ = 0;
                   invoke_v(493);
                   $52 = __THREW__; __THREW__ = 0;
                   $53 = $52&1;
                   if ($53) {
                    break;
                   }
                   __THREW__ = 0;
                   invoke_vii(494,($this|0),(19128|0));
                   $54 = __THREW__; __THREW__ = 0;
                   $55 = $54&1;
                   if ($55) {
                    break;
                   }
                   __THREW__ = 0;
                   invoke_v(495);
                   $56 = __THREW__; __THREW__ = 0;
                   $57 = $56&1;
                   if ($57) {
                    break;
                   }
                   __THREW__ = 0;
                   invoke_vii(496,($this|0),(19136|0));
                   $58 = __THREW__; __THREW__ = 0;
                   $59 = $58&1;
                   if ($59) {
                    break;
                   }
                   __THREW__ = 0;
                   invoke_v(497);
                   $60 = __THREW__; __THREW__ = 0;
                   $61 = $60&1;
                   if ($61) {
                    break;
                   }
                   __THREW__ = 0;
                   invoke_vii(498,($this|0),(19144|0));
                   $62 = __THREW__; __THREW__ = 0;
                   $63 = $62&1;
                   if ($63) {
                    break;
                   }
                   __THREW__ = 0;
                   invoke_v(499);
                   $64 = __THREW__; __THREW__ = 0;
                   $65 = $64&1;
                   if ($65) {
                    break;
                   }
                   __THREW__ = 0;
                   invoke_vii(500,($this|0),(19152|0));
                   $66 = __THREW__; __THREW__ = 0;
                   $67 = $66&1;
                   if ($67) {
                    break;
                   }
                   __THREW__ = 0;
                   invoke_v(501);
                   $68 = __THREW__; __THREW__ = 0;
                   $69 = $68&1;
                   if ($69) {
                    break;
                   }
                   __THREW__ = 0;
                   invoke_vii(502,($this|0),(19160|0));
                   $70 = __THREW__; __THREW__ = 0;
                   $71 = $70&1;
                   if ($71) {
                    break;
                   }
                   __THREW__ = 0;
                   invoke_v(503);
                   $72 = __THREW__; __THREW__ = 0;
                   $73 = $72&1;
                   if ($73) {
                    break;
                   }
                   __THREW__ = 0;
                   invoke_vii(504,($this|0),(19168|0));
                   $74 = __THREW__; __THREW__ = 0;
                   $75 = $74&1;
                   if ($75) {
                    break;
                   }
                   __THREW__ = 0;
                   invoke_v(505);
                   $76 = __THREW__; __THREW__ = 0;
                   $77 = $76&1;
                   if ($77) {
                    break;
                   }
                   __THREW__ = 0;
                   invoke_vii(506,($this|0),(19176|0));
                   $78 = __THREW__; __THREW__ = 0;
                   $79 = $78&1;
                   if ($79) {
                    break;
                   }
                   __THREW__ = 0;
                   invoke_v(507);
                   $80 = __THREW__; __THREW__ = 0;
                   $81 = $80&1;
                   if ($81) {
                    break;
                   }
                   __THREW__ = 0;
                   invoke_vii(508,($this|0),(19184|0));
                   $82 = __THREW__; __THREW__ = 0;
                   $83 = $82&1;
                   if ($83) {
                    break;
                   }
                   __THREW__ = 0;
                   invoke_v(509);
                   $84 = __THREW__; __THREW__ = 0;
                   $85 = $84&1;
                   if ($85) {
                    break;
                   }
                   __THREW__ = 0;
                   invoke_vii(510,($this|0),(19192|0));
                   $86 = __THREW__; __THREW__ = 0;
                   $87 = $86&1;
                   if ($87) {
                    break;
                   }
                   __THREW__ = 0;
                   invoke_v(511);
                   $88 = __THREW__; __THREW__ = 0;
                   $89 = $88&1;
                   if ($89) {
                    break;
                   }
                   __THREW__ = 0;
                   invoke_vii(512,($this|0),(19200|0));
                   $90 = __THREW__; __THREW__ = 0;
                   $91 = $90&1;
                   if ($91) {
                    break;
                   }
                   __THREW__ = 0;
                   invoke_v(513);
                   $92 = __THREW__; __THREW__ = 0;
                   $93 = $92&1;
                   if ($93) {
                    break;
                   }
                   __THREW__ = 0;
                   invoke_vii(514,($this|0),(19208|0));
                   $94 = __THREW__; __THREW__ = 0;
                   $95 = $94&1;
                   if ($95) {
                    break;
                   }
                   __THREW__ = 0;
                   invoke_v(515);
                   $96 = __THREW__; __THREW__ = 0;
                   $97 = $96&1;
                   if ($97) {
                    break;
                   }
                   __THREW__ = 0;
                   invoke_vii(516,($this|0),(19224|0));
                   $98 = __THREW__; __THREW__ = 0;
                   $99 = $98&1;
                   if ($99) {
                    break;
                   }
                   __THREW__ = 0;
                   invoke_v(517);
                   $100 = __THREW__; __THREW__ = 0;
                   $101 = $100&1;
                   if ($101) {
                    break;
                   }
                   __THREW__ = 0;
                   invoke_vii(518,($this|0),(19240|0));
                   $102 = __THREW__; __THREW__ = 0;
                   $103 = $102&1;
                   if ($103) {
                    break;
                   }
                   __THREW__ = 0;
                   invoke_v(519);
                   $104 = __THREW__; __THREW__ = 0;
                   $105 = $104&1;
                   if ($105) {
                    break;
                   }
                   __THREW__ = 0;
                   invoke_vii(520,($this|0),(19256|0));
                   $106 = __THREW__; __THREW__ = 0;
                   $107 = $106&1;
                   if ($107) {
                    break;
                   }
                   __THREW__ = 0;
                   invoke_v(521);
                   $108 = __THREW__; __THREW__ = 0;
                   $109 = $108&1;
                   if ($109) {
                    break;
                   }
                   __THREW__ = 0;
                   invoke_vii(522,($this|0),(19272|0));
                   $110 = __THREW__; __THREW__ = 0;
                   $111 = $110&1;
                   if ($111) {
                    break;
                   }
                   __THREW__ = 0;
                   invoke_v(523);
                   $112 = __THREW__; __THREW__ = 0;
                   $113 = $112&1;
                   if ($113) {
                    break;
                   }
                   __THREW__ = 0;
                   invoke_vii(524,($this|0),(19280|0));
                   $114 = __THREW__; __THREW__ = 0;
                   $115 = $114&1;
                   if ($115) {
                    break;
                   }
                   return;
                  }
                 }
                }
               }
              }
             }
            }
           }
          }
         }
        }
       }
      }
     }
    } while(0);
    $120 = ___cxa_find_matching_catch_2()|0;
    $121 = tempRet0;
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($name_);
    $ehselector$slot$0 = $121;$exn$slot$0 = $120;
   }
  }
  if ((label|0) == 62) {
   $118 = ___cxa_find_matching_catch_2()|0;
   $119 = tempRet0;
   $ehselector$slot$0 = $119;$exn$slot$0 = $118;
  }
  __ZNSt3__213__vector_baseIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEED2Ev($facets_);
  $ehselector$slot$1 = $ehselector$slot$0;$exn$slot$1 = $exn$slot$0;
 }
 __ZNSt3__26locale5facetD2Ev($this);
 ___resumeException($exn$slot$1|0);
 // unreachable;
}
function __ZNSt3__26vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEEC2Ej($this,$__n) {
 $this = $this|0;
 $__n = $__n|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $__allocated_$i$i$i$i = 0, $__end_$i = 0, $__end_cap_$i = 0, $cmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = 0;
 $__end_$i = ((($this)) + 4|0);
 HEAP32[$__end_$i>>2] = 0;
 $__end_cap_$i = ((($this)) + 8|0);
 HEAP32[$__end_cap_$i>>2] = 0;
 $__allocated_$i$i$i$i = ((($this)) + 128|0);
 HEAP8[$__allocated_$i$i$i$i>>0] = 0;
 $cmp = ($__n|0)==(0);
 do {
  if (!($cmp)) {
   __THREW__ = 0;
   invoke_vii(525,($this|0),($__n|0));
   $0 = __THREW__; __THREW__ = 0;
   $1 = $0&1;
   if (!($1)) {
    __THREW__ = 0;
    invoke_vii(526,($this|0),($__n|0));
    $2 = __THREW__; __THREW__ = 0;
    $3 = $2&1;
    if (!($3)) {
     break;
    }
   }
   $4 = ___cxa_find_matching_catch_2()|0;
   $5 = tempRet0;
   __ZNSt3__213__vector_baseIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEED2Ev($this);
   ___resumeException($4|0);
   // unreachable;
  }
 } while(0);
 return;
}
function __ZNKSt3__26vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEE17__annotate_shrinkEj($this,$__old_size) {
 $this = $this|0;
 $__old_size = $__old_size|0;
 var $$cast = 0, $0 = 0, $1 = 0, $2 = 0, $__end_$i = 0, $__first_$i$i$i$i$i = 0, $add$ptr = 0, $add$ptr5 = 0, $add$ptr8 = 0, $sub$ptr$div$i = 0, $sub$ptr$div$i$i = 0, $sub$ptr$sub$i = 0, $sub$ptr$sub$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$this>>2]|0;
 $__first_$i$i$i$i$i = ((($this)) + 8|0);
 $1 = HEAP32[$__first_$i$i$i$i$i>>2]|0;
 $$cast = $0;
 $sub$ptr$sub$i$i = (($1) - ($$cast))|0;
 $sub$ptr$div$i$i = $sub$ptr$sub$i$i >> 2;
 $add$ptr = (($0) + ($sub$ptr$div$i$i<<2)|0);
 $add$ptr5 = (($0) + ($__old_size<<2)|0);
 $__end_$i = ((($this)) + 4|0);
 $2 = HEAP32[$__end_$i>>2]|0;
 $sub$ptr$sub$i = (($2) - ($$cast))|0;
 $sub$ptr$div$i = $sub$ptr$sub$i >> 2;
 $add$ptr8 = (($0) + ($sub$ptr$div$i<<2)|0);
 __ZNKSt3__26vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEE31__annotate_contiguous_containerEPKvS8_S8_S8_($this,$0,$add$ptr,$add$ptr5,$add$ptr8);
 return;
}
function __ZNSt3__212_GLOBAL__N_14makeINS_7collateIcEEjEERT_T0_() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[(18980)>>2] = 0;
 HEAP32[4744] = (6684);
 return;
}
function __ZNSt3__26locale5__imp7installINS_7collateIcEEEEvPT_($this,$f) {
 $this = $this|0;
 $f = $f|0;
 var $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = (__ZNSt3__26locale2id5__getEv(20080)|0);
 __ZNSt3__26locale5__imp7installEPNS0_5facetEl($this,$f,$call);
 return;
}
function __ZNSt3__212_GLOBAL__N_14makeINS_7collateIwEEjEERT_T0_() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[(18988)>>2] = 0;
 HEAP32[4746] = (6716);
 return;
}
function __ZNSt3__26locale5__imp7installINS_7collateIwEEEEvPT_($this,$f) {
 $this = $this|0;
 $f = $f|0;
 var $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = (__ZNSt3__26locale2id5__getEv(20088)|0);
 __ZNSt3__26locale5__imp7installEPNS0_5facetEl($this,$f,$call);
 return;
}
function __ZNSt3__212_GLOBAL__N_14makeINS_5ctypeIcEEDnbjEERT_T0_T1_T2_() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__25ctypeIcEC2EPKtbj(18992,0,0,1);
 return;
}
function __ZNSt3__26locale5__imp7installINS_5ctypeIcEEEEvPT_($this,$f) {
 $this = $this|0;
 $f = $f|0;
 var $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = (__ZNSt3__26locale2id5__getEv(20096)|0);
 __ZNSt3__26locale5__imp7installEPNS0_5facetEl($this,$f,$call);
 return;
}
function __ZNSt3__212_GLOBAL__N_14makeINS_5ctypeIwEEjEERT_T0_() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[(19012)>>2] = 0;
 HEAP32[4752] = (9236);
 return;
}
function __ZNSt3__26locale5__imp7installINS_5ctypeIwEEEEvPT_($this,$f) {
 $this = $this|0;
 $f = $f|0;
 var $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = (__ZNSt3__26locale2id5__getEv(20128)|0);
 __ZNSt3__26locale5__imp7installEPNS0_5facetEl($this,$f,$call);
 return;
}
function __ZNSt3__212_GLOBAL__N_14makeINS_7codecvtIcc11__mbstate_tEEjEERT_T0_() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[(19020)>>2] = 0;
 HEAP32[4754] = (9304);
 return;
}
function __ZNSt3__26locale5__imp7installINS_7codecvtIcc11__mbstate_tEEEEvPT_($this,$f) {
 $this = $this|0;
 $f = $f|0;
 var $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = (__ZNSt3__26locale2id5__getEv(21888)|0);
 __ZNSt3__26locale5__imp7installEPNS0_5facetEl($this,$f,$call);
 return;
}
function __ZNSt3__212_GLOBAL__N_14makeINS_7codecvtIwc11__mbstate_tEEjEERT_T0_() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__27codecvtIwc11__mbstate_tEC2Ej(19024,1);
 return;
}
function __ZNSt3__26locale5__imp7installINS_7codecvtIwc11__mbstate_tEEEEvPT_($this,$f) {
 $this = $this|0;
 $f = $f|0;
 var $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = (__ZNSt3__26locale2id5__getEv(21896)|0);
 __ZNSt3__26locale5__imp7installEPNS0_5facetEl($this,$f,$call);
 return;
}
function __ZNSt3__212_GLOBAL__N_14makeINS_7codecvtIDsc11__mbstate_tEEjEERT_T0_() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[(19044)>>2] = 0;
 HEAP32[4760] = (9352);
 return;
}
function __ZNSt3__26locale5__imp7installINS_7codecvtIDsc11__mbstate_tEEEEvPT_($this,$f) {
 $this = $this|0;
 $f = $f|0;
 var $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = (__ZNSt3__26locale2id5__getEv(21904)|0);
 __ZNSt3__26locale5__imp7installEPNS0_5facetEl($this,$f,$call);
 return;
}
function __ZNSt3__212_GLOBAL__N_14makeINS_7codecvtIDic11__mbstate_tEEjEERT_T0_() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[(19052)>>2] = 0;
 HEAP32[4762] = (9400);
 return;
}
function __ZNSt3__26locale5__imp7installINS_7codecvtIDic11__mbstate_tEEEEvPT_($this,$f) {
 $this = $this|0;
 $f = $f|0;
 var $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = (__ZNSt3__26locale2id5__getEv(21912)|0);
 __ZNSt3__26locale5__imp7installEPNS0_5facetEl($this,$f,$call);
 return;
}
function __ZNSt3__212_GLOBAL__N_14makeINS_8numpunctIcEEjEERT_T0_() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__28numpunctIcEC2Ej(19056,1);
 return;
}
function __ZNSt3__26locale5__imp7installINS_8numpunctIcEEEEvPT_($this,$f) {
 $this = $this|0;
 $f = $f|0;
 var $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = (__ZNSt3__26locale2id5__getEv(20112)|0);
 __ZNSt3__26locale5__imp7installEPNS0_5facetEl($this,$f,$call);
 return;
}
function __ZNSt3__212_GLOBAL__N_14makeINS_8numpunctIwEEjEERT_T0_() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__28numpunctIwEC2Ej(19080,1);
 return;
}
function __ZNSt3__26locale5__imp7installINS_8numpunctIwEEEEvPT_($this,$f) {
 $this = $this|0;
 $f = $f|0;
 var $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = (__ZNSt3__26locale2id5__getEv(20136)|0);
 __ZNSt3__26locale5__imp7installEPNS0_5facetEl($this,$f,$call);
 return;
}
function __ZNSt3__212_GLOBAL__N_14makeINS_7num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEjEERT_T0_() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[(19116)>>2] = 0;
 HEAP32[4778] = (6748);
 return;
}
function __ZNSt3__26locale5__imp7installINS_7num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_($this,$f) {
 $this = $this|0;
 $f = $f|0;
 var $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = (__ZNSt3__26locale2id5__getEv(20120)|0);
 __ZNSt3__26locale5__imp7installEPNS0_5facetEl($this,$f,$call);
 return;
}
function __ZNSt3__212_GLOBAL__N_14makeINS_7num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEjEERT_T0_() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[(19124)>>2] = 0;
 HEAP32[4780] = (6812);
 return;
}
function __ZNSt3__26locale5__imp7installINS_7num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_($this,$f) {
 $this = $this|0;
 $f = $f|0;
 var $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = (__ZNSt3__26locale2id5__getEv(20144)|0);
 __ZNSt3__26locale5__imp7installEPNS0_5facetEl($this,$f,$call);
 return;
}
function __ZNSt3__212_GLOBAL__N_14makeINS_7num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEEEjEERT_T0_() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[(19132)>>2] = 0;
 HEAP32[4782] = (6876);
 return;
}
function __ZNSt3__26locale5__imp7installINS_7num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_($this,$f) {
 $this = $this|0;
 $f = $f|0;
 var $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = (__ZNSt3__26locale2id5__getEv(20152)|0);
 __ZNSt3__26locale5__imp7installEPNS0_5facetEl($this,$f,$call);
 return;
}
function __ZNSt3__212_GLOBAL__N_14makeINS_7num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEEEjEERT_T0_() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[(19140)>>2] = 0;
 HEAP32[4784] = (6928);
 return;
}
function __ZNSt3__26locale5__imp7installINS_7num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_($this,$f) {
 $this = $this|0;
 $f = $f|0;
 var $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = (__ZNSt3__26locale2id5__getEv(20160)|0);
 __ZNSt3__26locale5__imp7installEPNS0_5facetEl($this,$f,$call);
 return;
}
function __ZNSt3__212_GLOBAL__N_14makeINS_10moneypunctIcLb0EEEjEERT_T0_() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[(19148)>>2] = 0;
 HEAP32[4786] = (8476);
 return;
}
function __ZNSt3__26locale5__imp7installINS_10moneypunctIcLb0EEEEEvPT_($this,$f) {
 $this = $this|0;
 $f = $f|0;
 var $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = (__ZNSt3__26locale2id5__getEv(21808)|0);
 __ZNSt3__26locale5__imp7installEPNS0_5facetEl($this,$f,$call);
 return;
}
function __ZNSt3__212_GLOBAL__N_14makeINS_10moneypunctIcLb1EEEjEERT_T0_() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[(19156)>>2] = 0;
 HEAP32[4788] = (8532);
 return;
}
function __ZNSt3__26locale5__imp7installINS_10moneypunctIcLb1EEEEEvPT_($this,$f) {
 $this = $this|0;
 $f = $f|0;
 var $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = (__ZNSt3__26locale2id5__getEv(21816)|0);
 __ZNSt3__26locale5__imp7installEPNS0_5facetEl($this,$f,$call);
 return;
}
function __ZNSt3__212_GLOBAL__N_14makeINS_10moneypunctIwLb0EEEjEERT_T0_() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[(19164)>>2] = 0;
 HEAP32[4790] = (8588);
 return;
}
function __ZNSt3__26locale5__imp7installINS_10moneypunctIwLb0EEEEEvPT_($this,$f) {
 $this = $this|0;
 $f = $f|0;
 var $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = (__ZNSt3__26locale2id5__getEv(21824)|0);
 __ZNSt3__26locale5__imp7installEPNS0_5facetEl($this,$f,$call);
 return;
}
function __ZNSt3__212_GLOBAL__N_14makeINS_10moneypunctIwLb1EEEjEERT_T0_() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[(19172)>>2] = 0;
 HEAP32[4792] = (8644);
 return;
}
function __ZNSt3__26locale5__imp7installINS_10moneypunctIwLb1EEEEEvPT_($this,$f) {
 $this = $this|0;
 $f = $f|0;
 var $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = (__ZNSt3__26locale2id5__getEv(21832)|0);
 __ZNSt3__26locale5__imp7installEPNS0_5facetEl($this,$f,$call);
 return;
}
function __ZNSt3__212_GLOBAL__N_14makeINS_9money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEjEERT_T0_() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[(19180)>>2] = 0;
 HEAP32[4794] = (8700);
 return;
}
function __ZNSt3__26locale5__imp7installINS_9money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_($this,$f) {
 $this = $this|0;
 $f = $f|0;
 var $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = (__ZNSt3__26locale2id5__getEv(21840)|0);
 __ZNSt3__26locale5__imp7installEPNS0_5facetEl($this,$f,$call);
 return;
}
function __ZNSt3__212_GLOBAL__N_14makeINS_9money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEjEERT_T0_() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[(19188)>>2] = 0;
 HEAP32[4796] = (8728);
 return;
}
function __ZNSt3__26locale5__imp7installINS_9money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_($this,$f) {
 $this = $this|0;
 $f = $f|0;
 var $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = (__ZNSt3__26locale2id5__getEv(21848)|0);
 __ZNSt3__26locale5__imp7installEPNS0_5facetEl($this,$f,$call);
 return;
}
function __ZNSt3__212_GLOBAL__N_14makeINS_9money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEEEjEERT_T0_() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[(19196)>>2] = 0;
 HEAP32[4798] = (8756);
 return;
}
function __ZNSt3__26locale5__imp7installINS_9money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_($this,$f) {
 $this = $this|0;
 $f = $f|0;
 var $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = (__ZNSt3__26locale2id5__getEv(21856)|0);
 __ZNSt3__26locale5__imp7installEPNS0_5facetEl($this,$f,$call);
 return;
}
function __ZNSt3__212_GLOBAL__N_14makeINS_9money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEEEjEERT_T0_() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[(19204)>>2] = 0;
 HEAP32[4800] = (8784);
 return;
}
function __ZNSt3__26locale5__imp7installINS_9money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_($this,$f) {
 $this = $this|0;
 $f = $f|0;
 var $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = (__ZNSt3__26locale2id5__getEv(21864)|0);
 __ZNSt3__26locale5__imp7installEPNS0_5facetEl($this,$f,$call);
 return;
}
function __ZNSt3__212_GLOBAL__N_14makeINS_8time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEjEERT_T0_() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[(19212)>>2] = 0;
 HEAP32[4802] = (9216);
 __ZNSt3__220__time_get_c_storageIcEC2Ev((19216));
 HEAP32[4802] = (6980);
 HEAP32[(19216)>>2] = (7028);
 return;
}
function __ZNSt3__26locale5__imp7installINS_8time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_($this,$f) {
 $this = $this|0;
 $f = $f|0;
 var $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = (__ZNSt3__26locale2id5__getEv(20972)|0);
 __ZNSt3__26locale5__imp7installEPNS0_5facetEl($this,$f,$call);
 return;
}
function __ZNSt3__212_GLOBAL__N_14makeINS_8time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEjEERT_T0_() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[(19228)>>2] = 0;
 HEAP32[4806] = (9216);
 __ZNSt3__220__time_get_c_storageIwEC2Ev((19232));
 HEAP32[4806] = (7064);
 HEAP32[(19232)>>2] = (7112);
 return;
}
function __ZNSt3__26locale5__imp7installINS_8time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_($this,$f) {
 $this = $this|0;
 $f = $f|0;
 var $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = (__ZNSt3__26locale2id5__getEv(21784)|0);
 __ZNSt3__26locale5__imp7installEPNS0_5facetEl($this,$f,$call);
 return;
}
function __ZNSt3__212_GLOBAL__N_14makeINS_8time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEEEjEERT_T0_() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $call$i1$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[(19244)>>2] = 0;
 HEAP32[4810] = (9216);
 __THREW__ = 0;
 $call$i1$i = (invoke_i(392)|0);
 $0 = __THREW__; __THREW__ = 0;
 $1 = $0&1;
 if ($1) {
  $2 = ___cxa_find_matching_catch_2()|0;
  $3 = tempRet0;
  __ZNSt3__26locale5facetD2Ev(19240);
  ___resumeException($2|0);
  // unreachable;
 } else {
  HEAP32[(19248)>>2] = $call$i1$i;
  HEAP32[4810] = (8428);
  return;
 }
}
function __ZNSt3__26locale5__imp7installINS_8time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_($this,$f) {
 $this = $this|0;
 $f = $f|0;
 var $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = (__ZNSt3__26locale2id5__getEv(21792)|0);
 __ZNSt3__26locale5__imp7installEPNS0_5facetEl($this,$f,$call);
 return;
}
function __ZNSt3__212_GLOBAL__N_14makeINS_8time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEEEjEERT_T0_() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $call$i1$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[(19260)>>2] = 0;
 HEAP32[4814] = (9216);
 __THREW__ = 0;
 $call$i1$i = (invoke_i(392)|0);
 $0 = __THREW__; __THREW__ = 0;
 $1 = $0&1;
 if ($1) {
  $2 = ___cxa_find_matching_catch_2()|0;
  $3 = tempRet0;
  __ZNSt3__26locale5facetD2Ev(19256);
  ___resumeException($2|0);
  // unreachable;
 } else {
  HEAP32[(19264)>>2] = $call$i1$i;
  HEAP32[4814] = (8452);
  return;
 }
}
function __ZNSt3__26locale5__imp7installINS_8time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_($this,$f) {
 $this = $this|0;
 $f = $f|0;
 var $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = (__ZNSt3__26locale2id5__getEv(21800)|0);
 __ZNSt3__26locale5__imp7installEPNS0_5facetEl($this,$f,$call);
 return;
}
function __ZNSt3__212_GLOBAL__N_14makeINS_8messagesIcEEjEERT_T0_() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[(19276)>>2] = 0;
 HEAP32[4818] = (8812);
 return;
}
function __ZNSt3__26locale5__imp7installINS_8messagesIcEEEEvPT_($this,$f) {
 $this = $this|0;
 $f = $f|0;
 var $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = (__ZNSt3__26locale2id5__getEv(21872)|0);
 __ZNSt3__26locale5__imp7installEPNS0_5facetEl($this,$f,$call);
 return;
}
function __ZNSt3__212_GLOBAL__N_14makeINS_8messagesIwEEjEERT_T0_() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[(19284)>>2] = 0;
 HEAP32[4820] = (8844);
 return;
}
function __ZNSt3__26locale5__imp7installINS_8messagesIwEEEEvPT_($this,$f) {
 $this = $this|0;
 $f = $f|0;
 var $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = (__ZNSt3__26locale2id5__getEv(21880)|0);
 __ZNSt3__26locale5__imp7installEPNS0_5facetEl($this,$f,$call);
 return;
}
function __ZNSt3__26locale5__imp7installEPNS0_5facetEl($this,$f,$id) {
 $this = $this|0;
 $f = $f|0;
 $id = $id|0;
 var $$pre = 0, $$pre18 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__begin_$i8$pre$phiZZ2D = 0, $__end_$i = 0, $add = 0, $arrayidx$i = 0, $arrayidx$i9 = 0, $cmp = 0, $facets_ = 0, $sub$ptr$div$i = 0;
 var $sub$ptr$sub$i = 0, $tobool = 0, $tobool$i$i11 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__214__shared_count12__add_sharedEv($f);
 $facets_ = ((($this)) + 8|0);
 $__end_$i = ((($this)) + 12|0);
 $0 = HEAP32[$__end_$i>>2]|0;
 $1 = HEAP32[$facets_>>2]|0;
 $sub$ptr$sub$i = (($0) - ($1))|0;
 $sub$ptr$div$i = $sub$ptr$sub$i >> 2;
 $cmp = ($sub$ptr$div$i>>>0)>($id>>>0);
 do {
  if ($cmp) {
   $2 = $1;
   $7 = $2;$__begin_$i8$pre$phiZZ2D = $facets_;
  } else {
   $add = (($id) + 1)|0;
   __THREW__ = 0;
   invoke_vii(527,($facets_|0),($add|0));
   $3 = __THREW__; __THREW__ = 0;
   $4 = $3&1;
   if (!($4)) {
    $$pre = HEAP32[$facets_>>2]|0;
    $7 = $$pre;$__begin_$i8$pre$phiZZ2D = $facets_;
    break;
   }
   $5 = ___cxa_find_matching_catch_2()|0;
   $6 = tempRet0;
   $tobool$i$i11 = ($f|0)==(0|0);
   if (!($tobool$i$i11)) {
    __ZNSt3__212_GLOBAL__N_17releaseclEPNS_6locale5facetE($f);
   }
   ___resumeException($5|0);
   // unreachable;
  }
 } while(0);
 $arrayidx$i9 = (($7) + ($id<<2)|0);
 $8 = HEAP32[$arrayidx$i9>>2]|0;
 $tobool = ($8|0)==(0|0);
 if ($tobool) {
  $9 = $7;
 } else {
  (__ZNSt3__214__shared_count16__release_sharedEv($8)|0);
  $$pre18 = HEAP32[$__begin_$i8$pre$phiZZ2D>>2]|0;
  $9 = $$pre18;
 }
 $arrayidx$i = (($9) + ($id<<2)|0);
 HEAP32[$arrayidx$i>>2] = $f;
 return;
}
function __ZNSt3__26vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEE6resizeEj($this,$__sz) {
 $this = $this|0;
 $__sz = $__sz|0;
 var $$pre$i$cast$i = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $__end_$i = 0, $add$ptr = 0, $cmp = 0, $cmp$i$i = 0, $cmp2 = 0, $incdec$ptr$i$i = 0, $sub = 0, $sub$ptr$div$i = 0, $sub$ptr$sub$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $__end_$i = ((($this)) + 4|0);
 $0 = HEAP32[$__end_$i>>2]|0;
 $1 = HEAP32[$this>>2]|0;
 $sub$ptr$sub$i = (($0) - ($1))|0;
 $sub$ptr$div$i = $sub$ptr$sub$i >> 2;
 $cmp = ($sub$ptr$div$i>>>0)<($__sz>>>0);
 $2 = $1;
 if ($cmp) {
  $sub = (($__sz) - ($sub$ptr$div$i))|0;
  __ZNSt3__26vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEE8__appendEj($this,$sub);
 } else {
  $cmp2 = ($sub$ptr$div$i>>>0)>($__sz>>>0);
  if ($cmp2) {
   $add$ptr = (($2) + ($__sz<<2)|0);
   $$pre$i$cast$i = $0;
   $3 = $$pre$i$cast$i;
   while(1) {
    $cmp$i$i = ($3|0)==($add$ptr|0);
    if ($cmp$i$i) {
     break;
    }
    $incdec$ptr$i$i = ((($3)) + -4|0);
    HEAP32[$__end_$i>>2] = $incdec$ptr$i$i;
    $3 = $incdec$ptr$i$i;
   }
   __ZNKSt3__26vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEE17__annotate_shrinkEj($this,$sub$ptr$div$i);
  }
 }
 return;
}
function __ZNSt3__212_GLOBAL__N_17releaseclEPNS_6locale5facetE($p) {
 $p = $p|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 (__ZNSt3__214__shared_count16__release_sharedEv($p)|0);
 return;
}
function __ZNSt3__26vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEE8__appendEj($this,$__n) {
 $this = $this|0;
 $__n = $__n|0;
 var $$sroa$speculated$call$i = 0, $$sroa$speculated$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__end_ = 0, $__first_$i$i$i = 0, $__second_$i$i$i = 0, $__v = 0, $add = 0, $call$i = 0;
 var $cmp = 0, $cmp$i = 0, $cmp$i$i$i$i = 0, $cmp3$i = 0, $div$i = 0, $mul$i = 0, $sub$ptr$div = 0, $sub$ptr$div$i = 0, $sub$ptr$div$i$i$i = 0, $sub$ptr$div$i8 = 0, $sub$ptr$sub = 0, $sub$ptr$sub$i = 0, $sub$ptr$sub$i$i$i = 0, $sub$ptr$sub$i7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $__v = sp;
 $__first_$i$i$i = ((($this)) + 8|0);
 $0 = HEAP32[$__first_$i$i$i>>2]|0;
 $__end_ = ((($this)) + 4|0);
 $1 = HEAP32[$__end_>>2]|0;
 $sub$ptr$sub = (($0) - ($1))|0;
 $sub$ptr$div = $sub$ptr$sub >> 2;
 $cmp = ($sub$ptr$div>>>0)<($__n>>>0);
 do {
  if ($cmp) {
   $__second_$i$i$i = ((($this)) + 16|0);
   $2 = HEAP32[$this>>2]|0;
   $sub$ptr$sub$i = (($1) - ($2))|0;
   $sub$ptr$div$i = $sub$ptr$sub$i >> 2;
   $add = (($sub$ptr$div$i) + ($__n))|0;
   $call$i = (__ZNKSt3__26vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEE8max_sizeEv($this)|0);
   $cmp$i = ($call$i>>>0)<($add>>>0);
   if ($cmp$i) {
    __ZNKSt3__220__vector_base_commonILb1EE20__throw_length_errorEv($this);
   }
   $3 = HEAP32[$__first_$i$i$i>>2]|0;
   $4 = HEAP32[$this>>2]|0;
   $sub$ptr$sub$i$i$i = (($3) - ($4))|0;
   $sub$ptr$div$i$i$i = $sub$ptr$sub$i$i$i >> 2;
   $div$i = $call$i >>> 1;
   $cmp3$i = ($sub$ptr$div$i$i$i>>>0)<($div$i>>>0);
   $mul$i = $sub$ptr$sub$i$i$i >> 1;
   $cmp$i$i$i$i = ($mul$i>>>0)<($add>>>0);
   $$sroa$speculated$i = $cmp$i$i$i$i ? $add : $mul$i;
   $$sroa$speculated$call$i = $cmp3$i ? $$sroa$speculated$i : $call$i;
   $5 = HEAP32[$__end_>>2]|0;
   $sub$ptr$sub$i7 = (($5) - ($4))|0;
   $sub$ptr$div$i8 = $sub$ptr$sub$i7 >> 2;
   __ZNSt3__214__split_bufferIPNS_6locale5facetERNS_15__sso_allocatorIS3_Lj28EEEEC2EjjS6_($__v,$$sroa$speculated$call$i,$sub$ptr$div$i8,$__second_$i$i$i);
   __THREW__ = 0;
   invoke_vii(528,($__v|0),($__n|0));
   $6 = __THREW__; __THREW__ = 0;
   $7 = $6&1;
   if (!($7)) {
    __THREW__ = 0;
    invoke_vii(529,($this|0),($__v|0));
    $8 = __THREW__; __THREW__ = 0;
    $9 = $8&1;
    if (!($9)) {
     __ZNSt3__214__split_bufferIPNS_6locale5facetERNS_15__sso_allocatorIS3_Lj28EEEED2Ev($__v);
     break;
    }
   }
   $10 = ___cxa_find_matching_catch_2()|0;
   $11 = tempRet0;
   __ZNSt3__214__split_bufferIPNS_6locale5facetERNS_15__sso_allocatorIS3_Lj28EEEED2Ev($__v);
   ___resumeException($10|0);
   // unreachable;
  } else {
   __ZNSt3__26vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEE18__construct_at_endEj($this,$__n);
  }
 } while(0);
 STACKTOP = sp;return;
}
function __ZNSt3__26vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEE18__construct_at_endEj($this,$__n) {
 $this = $this|0;
 $__n = $__n|0;
 var $0 = 0, $1 = 0, $__annotator = 0, $__end_ = 0, $__n$addr$0 = 0, $cmp = 0, $dec = 0, $incdec$ptr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $__annotator = sp;
 $__end_ = ((($this)) + 4|0);
 $__n$addr$0 = $__n;
 while(1) {
  __ZNSt3__26vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEE24__RAII_IncreaseAnnotatorC2ERKS6_j($__annotator,$this,1);
  $0 = HEAP32[$__end_>>2]|0;
  HEAP32[$0>>2] = 0;
  $1 = HEAP32[$__end_>>2]|0;
  $incdec$ptr = ((($1)) + 4|0);
  HEAP32[$__end_>>2] = $incdec$ptr;
  $dec = (($__n$addr$0) + -1)|0;
  __ZNSt3__26vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEE24__RAII_IncreaseAnnotator6__doneEv($__annotator);
  $cmp = ($dec|0)==(0);
  if ($cmp) {
   break;
  } else {
   $__n$addr$0 = $dec;
  }
 }
 STACKTOP = sp;return;
}
function __ZNKSt3__26vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEE8max_sizeEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 1073741823;
}
function __ZNSt3__214__split_bufferIPNS_6locale5facetERNS_15__sso_allocatorIS3_Lj28EEEEC2EjjS6_($this,$__cap,$__start,$__a) {
 $this = $this|0;
 $__cap = $__cap|0;
 $__start = $__start|0;
 $__a = $__a|0;
 var $0 = 0, $__allocated_$i$i = 0, $__begin_ = 0, $__end_ = 0, $__end_cap_ = 0, $__first_$i$i$i = 0, $__second_$i$i = 0, $add$ptr = 0, $add$ptr5 = 0, $call$i$i$i = 0, $cmp = 0, $cmp$i$i = 0, $cond = 0, $mul$i$i = 0, $or$cond$i$i = 0, $tobool$not$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $__end_cap_ = ((($this)) + 12|0);
 HEAP32[$__end_cap_>>2] = 0;
 $__second_$i$i = ((($this)) + 16|0);
 HEAP32[$__second_$i$i>>2] = $__a;
 $cmp = ($__cap|0)==(0);
 do {
  if ($cmp) {
   $cond = 0;
  } else {
   $__allocated_$i$i = ((($__a)) + 112|0);
   $0 = HEAP8[$__allocated_$i$i>>0]|0;
   $tobool$not$i$i = ($0<<24>>24)==(0);
   $cmp$i$i = ($__cap>>>0)<(29);
   $or$cond$i$i = $cmp$i$i & $tobool$not$i$i;
   if ($or$cond$i$i) {
    HEAP8[$__allocated_$i$i>>0] = 1;
    $cond = $__a;
    break;
   } else {
    $mul$i$i = $__cap << 2;
    $call$i$i$i = (__Znwj($mul$i$i)|0);
    $cond = $call$i$i$i;
    break;
   }
  }
 } while(0);
 HEAP32[$this>>2] = $cond;
 $add$ptr = (($cond) + ($__start<<2)|0);
 $__end_ = ((($this)) + 8|0);
 HEAP32[$__end_>>2] = $add$ptr;
 $__begin_ = ((($this)) + 4|0);
 HEAP32[$__begin_>>2] = $add$ptr;
 $add$ptr5 = (($cond) + ($__cap<<2)|0);
 $__first_$i$i$i = ((($this)) + 12|0);
 HEAP32[$__first_$i$i$i>>2] = $add$ptr5;
 return;
}
function __ZNSt3__214__split_bufferIPNS_6locale5facetERNS_15__sso_allocatorIS3_Lj28EEEE18__construct_at_endEj($this,$__n) {
 $this = $this|0;
 $__n = $__n|0;
 var $$pre = 0, $0 = 0, $1 = 0, $__end_ = 0, $__n$addr$0 = 0, $cmp = 0, $dec = 0, $incdec$ptr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $__end_ = ((($this)) + 8|0);
 $$pre = HEAP32[$__end_>>2]|0;
 $0 = $$pre;$__n$addr$0 = $__n;
 while(1) {
  HEAP32[$0>>2] = 0;
  $1 = HEAP32[$__end_>>2]|0;
  $incdec$ptr = ((($1)) + 4|0);
  HEAP32[$__end_>>2] = $incdec$ptr;
  $dec = (($__n$addr$0) + -1)|0;
  $cmp = ($dec|0)==(0);
  if ($cmp) {
   break;
  } else {
   $0 = $incdec$ptr;$__n$addr$0 = $dec;
  }
 }
 return;
}
function __ZNSt3__26vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($this,$__v) {
 $this = $this|0;
 $__v = $__v|0;
 var $$pre = 0, $$pre$phiZ2D = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__begin_2 = 0, $__end_ = 0, $__end_6 = 0, $__first_$i$i$i = 0, $__first_$i$i$i8 = 0;
 var $add$ptr$i = 0, $cmp$i = 0, $idx$neg$i = 0, $sub$ptr$div$i = 0, $sub$ptr$div$i7 = 0, $sub$ptr$rhs$cast$i = 0, $sub$ptr$sub$i = 0, $sub$ptr$sub$i6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZNKSt3__26vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEE17__annotate_deleteEv($this);
 $0 = HEAP32[$this>>2]|0;
 $__end_ = ((($this)) + 4|0);
 $1 = HEAP32[$__end_>>2]|0;
 $__begin_2 = ((($__v)) + 4|0);
 $sub$ptr$rhs$cast$i = $0;
 $sub$ptr$sub$i = (($1) - ($sub$ptr$rhs$cast$i))|0;
 $sub$ptr$div$i = $sub$ptr$sub$i >> 2;
 $2 = HEAP32[$__begin_2>>2]|0;
 $idx$neg$i = (0 - ($sub$ptr$div$i))|0;
 $add$ptr$i = (($2) + ($idx$neg$i<<2)|0);
 HEAP32[$__begin_2>>2] = $add$ptr$i;
 $cmp$i = ($sub$ptr$sub$i|0)>(0);
 if ($cmp$i) {
  _memcpy(($add$ptr$i|0),($0|0),($sub$ptr$sub$i|0))|0;
  $$pre = HEAP32[$__begin_2>>2]|0;
  $$pre$phiZ2D = $__begin_2;$5 = $$pre;
 } else {
  $3 = $add$ptr$i;
  $$pre$phiZ2D = $__begin_2;$5 = $3;
 }
 $4 = HEAP32[$this>>2]|0;
 HEAP32[$this>>2] = $5;
 HEAP32[$$pre$phiZ2D>>2] = $4;
 $__end_6 = ((($__v)) + 8|0);
 $6 = HEAP32[$__end_>>2]|0;
 $7 = HEAP32[$__end_6>>2]|0;
 HEAP32[$__end_>>2] = $7;
 HEAP32[$__end_6>>2] = $6;
 $__first_$i$i$i8 = ((($this)) + 8|0);
 $__first_$i$i$i = ((($__v)) + 12|0);
 $8 = HEAP32[$__first_$i$i$i8>>2]|0;
 $9 = HEAP32[$__first_$i$i$i>>2]|0;
 HEAP32[$__first_$i$i$i8>>2] = $9;
 HEAP32[$__first_$i$i$i>>2] = $8;
 $10 = HEAP32[$$pre$phiZ2D>>2]|0;
 HEAP32[$__v>>2] = $10;
 $11 = HEAP32[$__end_>>2]|0;
 $12 = HEAP32[$this>>2]|0;
 $sub$ptr$sub$i6 = (($11) - ($12))|0;
 $sub$ptr$div$i7 = $sub$ptr$sub$i6 >> 2;
 __ZNKSt3__26vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEE14__annotate_newEj($this,$sub$ptr$div$i7);
 return;
}
function __ZNSt3__214__split_bufferIPNS_6locale5facetERNS_15__sso_allocatorIS3_Lj28EEEED2Ev($this) {
 $this = $this|0;
 var $$pre$i$i$i = 0, $0 = 0, $1 = 0, $2 = 0, $__allocated_$i$i = 0, $__begin_$i = 0, $__end_$i$i$i = 0, $__second_$i$i$i = 0, $cmp$i$i = 0, $cmp$i$i$i = 0, $incdec$ptr$i$i$i = 0, $ref$i$i$i = 0, $tobool = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $__begin_$i = ((($this)) + 4|0);
 $0 = HEAP32[$__begin_$i>>2]|0;
 $__end_$i$i$i = ((($this)) + 8|0);
 $$pre$i$i$i = HEAP32[$__end_$i$i$i>>2]|0;
 $1 = $$pre$i$i$i;
 while(1) {
  $cmp$i$i$i = ($1|0)==($0|0);
  if ($cmp$i$i$i) {
   break;
  }
  $incdec$ptr$i$i$i = ((($1)) + -4|0);
  HEAP32[$__end_$i$i$i>>2] = $incdec$ptr$i$i$i;
  $1 = $incdec$ptr$i$i$i;
 }
 $2 = HEAP32[$this>>2]|0;
 $tobool = ($2|0)==(0|0);
 do {
  if (!($tobool)) {
   $__second_$i$i$i = ((($this)) + 16|0);
   $ref$i$i$i = HEAP32[$__second_$i$i$i>>2]|0;
   $cmp$i$i = ($ref$i$i$i|0)==($2|0);
   if ($cmp$i$i) {
    $__allocated_$i$i = ((($ref$i$i$i)) + 112|0);
    HEAP8[$__allocated_$i$i>>0] = 0;
    break;
   } else {
    __ZdlPv($2);
    break;
   }
  }
 } while(0);
 return;
}
function __ZNKSt3__26vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEE17__annotate_deleteEv($this) {
 $this = $this|0;
 var $$cast = 0, $0 = 0, $1 = 0, $2 = 0, $__end_$i = 0, $__first_$i$i$i$i$i4 = 0, $add$ptr = 0, $add$ptr6 = 0, $sub$ptr$div$i = 0, $sub$ptr$div$i$i6 = 0, $sub$ptr$sub$i = 0, $sub$ptr$sub$i$i5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$this>>2]|0;
 $__first_$i$i$i$i$i4 = ((($this)) + 8|0);
 $1 = HEAP32[$__first_$i$i$i$i$i4>>2]|0;
 $$cast = $0;
 $sub$ptr$sub$i$i5 = (($1) - ($$cast))|0;
 $sub$ptr$div$i$i6 = $sub$ptr$sub$i$i5 >> 2;
 $add$ptr = (($0) + ($sub$ptr$div$i$i6<<2)|0);
 $__end_$i = ((($this)) + 4|0);
 $2 = HEAP32[$__end_$i>>2]|0;
 $sub$ptr$sub$i = (($2) - ($$cast))|0;
 $sub$ptr$div$i = $sub$ptr$sub$i >> 2;
 $add$ptr6 = (($0) + ($sub$ptr$div$i<<2)|0);
 __ZNKSt3__26vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEE31__annotate_contiguous_containerEPKvS8_S8_S8_($this,$0,$add$ptr,$add$ptr6,$add$ptr);
 return;
}
function __ZNKSt3__26vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEE14__annotate_newEj($this,$__current_size) {
 $this = $this|0;
 $__current_size = $__current_size|0;
 var $$cast = 0, $0 = 0, $1 = 0, $__first_$i$i$i$i$i4 = 0, $add$ptr = 0, $add$ptr8 = 0, $sub$ptr$div$i$i6 = 0, $sub$ptr$sub$i$i5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$this>>2]|0;
 $__first_$i$i$i$i$i4 = ((($this)) + 8|0);
 $1 = HEAP32[$__first_$i$i$i$i$i4>>2]|0;
 $$cast = $0;
 $sub$ptr$sub$i$i5 = (($1) - ($$cast))|0;
 $sub$ptr$div$i$i6 = $sub$ptr$sub$i$i5 >> 2;
 $add$ptr = (($0) + ($sub$ptr$div$i$i6<<2)|0);
 $add$ptr8 = (($0) + ($__current_size<<2)|0);
 __ZNKSt3__26vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEE31__annotate_contiguous_containerEPKvS8_S8_S8_($this,$0,$add$ptr,$add$ptr,$add$ptr8);
 return;
}
function __ZNKSt3__26vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEE31__annotate_contiguous_containerEPKvS8_S8_S8_($this,$__beg,$__end,$__old_mid,$__new_mid) {
 $this = $this|0;
 $__beg = $__beg|0;
 $__end = $__end|0;
 $__old_mid = $__old_mid|0;
 $__new_mid = $__new_mid|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNSt3__26vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEE24__RAII_IncreaseAnnotatorC2ERKS6_j($this,$0,$__n) {
 $this = $this|0;
 $0 = $0|0;
 $__n = $__n|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNSt3__26vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEE24__RAII_IncreaseAnnotator6__doneEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNSt3__28numpunctIwEC2Ej($this,$refs) {
 $this = $this|0;
 $refs = $refs|0;
 var $__decimal_point_ = 0, $__grouping_ = 0, $__i$0$i$i = 0, $__shared_owners_$i$i = 0, $__thousands_sep_ = 0, $arrayidx$i$i = 0, $exitcond$i$i = 0, $inc$i$i = 0, $sub$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $sub$i = (($refs) + -1)|0;
 $__shared_owners_$i$i = ((($this)) + 4|0);
 HEAP32[$__shared_owners_$i$i>>2] = $sub$i;
 HEAP32[$this>>2] = (9132);
 $__decimal_point_ = ((($this)) + 8|0);
 HEAP32[$__decimal_point_>>2] = 46;
 $__thousands_sep_ = ((($this)) + 12|0);
 HEAP32[$__thousands_sep_>>2] = 44;
 $__grouping_ = ((($this)) + 16|0);
 ;HEAP32[$__grouping_>>2]=0|0;HEAP32[$__grouping_+4>>2]=0|0;HEAP32[$__grouping_+8>>2]=0|0;
 $__i$0$i$i = 0;
 while(1) {
  $exitcond$i$i = ($__i$0$i$i|0)==(3);
  if ($exitcond$i$i) {
   break;
  }
  $arrayidx$i$i = (($__grouping_) + ($__i$0$i$i<<2)|0);
  HEAP32[$arrayidx$i$i>>2] = 0;
  $inc$i$i = (($__i$0$i$i) + 1)|0;
  $__i$0$i$i = $inc$i$i;
 }
 return;
}
function __ZNSt3__28numpunctIcEC2Ej($this,$refs) {
 $this = $this|0;
 $refs = $refs|0;
 var $__decimal_point_ = 0, $__grouping_ = 0, $__i$0$i$i = 0, $__shared_owners_$i$i = 0, $__thousands_sep_ = 0, $arrayidx$i$i = 0, $exitcond$i$i = 0, $inc$i$i = 0, $sub$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $sub$i = (($refs) + -1)|0;
 $__shared_owners_$i$i = ((($this)) + 4|0);
 HEAP32[$__shared_owners_$i$i>>2] = $sub$i;
 HEAP32[$this>>2] = (9092);
 $__decimal_point_ = ((($this)) + 8|0);
 HEAP8[$__decimal_point_>>0] = 46;
 $__thousands_sep_ = ((($this)) + 9|0);
 HEAP8[$__thousands_sep_>>0] = 44;
 $__grouping_ = ((($this)) + 12|0);
 ;HEAP32[$__grouping_>>2]=0|0;HEAP32[$__grouping_+4>>2]=0|0;HEAP32[$__grouping_+8>>2]=0|0;
 $__i$0$i$i = 0;
 while(1) {
  $exitcond$i$i = ($__i$0$i$i|0)==(3);
  if ($exitcond$i$i) {
   break;
  }
  $arrayidx$i$i = (($__grouping_) + ($__i$0$i$i<<2)|0);
  HEAP32[$arrayidx$i$i>>2] = 0;
  $inc$i$i = (($__i$0$i$i) + 1)|0;
  $__i$0$i$i = $inc$i$i;
 }
 return;
}
function __ZNSt3__27codecvtIwc11__mbstate_tEC2Ej($this,$refs) {
 $this = $this|0;
 $refs = $refs|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $__l = 0, $__shared_owners_$i$i = 0, $call = 0, $sub$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $sub$i = (($refs) + -1)|0;
 $__shared_owners_$i$i = ((($this)) + 4|0);
 HEAP32[$__shared_owners_$i$i>>2] = $sub$i;
 HEAP32[$this>>2] = (8972);
 __THREW__ = 0;
 $call = (invoke_i(392)|0);
 $0 = __THREW__; __THREW__ = 0;
 $1 = $0&1;
 if ($1) {
  $2 = ___cxa_find_matching_catch_2()|0;
  $3 = tempRet0;
  __ZNSt3__26locale5facetD2Ev($this);
  ___resumeException($2|0);
  // unreachable;
 } else {
  $__l = ((($this)) + 8|0);
  HEAP32[$__l>>2] = $call;
  return;
 }
}
function __ZNSt3__26vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEE8allocateEj($this,$__n) {
 $this = $this|0;
 $__n = $__n|0;
 var $0 = 0, $__allocated_$i$i = 0, $__end_ = 0, $__first_$i$i$i = 0, $__second_$i$i$i = 0, $add$ptr = 0, $call = 0, $call$i$i$i = 0, $cmp = 0, $cmp$i$i = 0, $mul$i$i = 0, $or$cond$i$i = 0, $retval$0$i$i = 0, $tobool$not$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = (__ZNKSt3__26vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEE8max_sizeEv($this)|0);
 $cmp = ($call>>>0)<($__n>>>0);
 if ($cmp) {
  __ZNKSt3__220__vector_base_commonILb1EE20__throw_length_errorEv($this);
 }
 $__allocated_$i$i = ((($this)) + 128|0);
 $0 = HEAP8[$__allocated_$i$i>>0]|0;
 $tobool$not$i$i = ($0<<24>>24)==(0);
 $cmp$i$i = ($__n>>>0)<(29);
 $or$cond$i$i = $cmp$i$i & $tobool$not$i$i;
 if ($or$cond$i$i) {
  $__second_$i$i$i = ((($this)) + 16|0);
  HEAP8[$__allocated_$i$i>>0] = 1;
  $retval$0$i$i = $__second_$i$i$i;
 } else {
  $mul$i$i = $__n << 2;
  $call$i$i$i = (__Znwj($mul$i$i)|0);
  $retval$0$i$i = $call$i$i$i;
 }
 $__end_ = ((($this)) + 4|0);
 HEAP32[$__end_>>2] = $retval$0$i$i;
 HEAP32[$this>>2] = $retval$0$i$i;
 $add$ptr = (($retval$0$i$i) + ($__n<<2)|0);
 $__first_$i$i$i = ((($this)) + 8|0);
 HEAP32[$__first_$i$i$i>>2] = $add$ptr;
 __ZNKSt3__26vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEE14__annotate_newEj($this,0);
 return;
}
function __ZNSt3__26locale7classicEv() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $guard$uninitialized = 0, $tobool = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[19288]|0;
 $guard$uninitialized = ($0<<24>>24)==(0);
 do {
  if ($guard$uninitialized) {
   $1 = (___cxa_guard_acquire(19288)|0);
   $tobool = ($1|0)==(0);
   if (!($tobool)) {
    __THREW__ = 0;
    (invoke_i(530)|0);
    $2 = __THREW__; __THREW__ = 0;
    $3 = $2&1;
    if ($3) {
     $5 = ___cxa_find_matching_catch_2()|0;
     $6 = tempRet0;
     ___resumeException($5|0);
     // unreachable;
    } else {
     HEAP32[5481] = 21920;
     break;
    }
   }
  }
 } while(0);
 $4 = HEAP32[5481]|0;
 return ($4|0);
}
function __ZNSt3__26locale5__imp12make_classicEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__212_GLOBAL__N_14makeINS_6locale5__impEjEERT_T0_();
 HEAP32[5480] = 19296;
 return (21920|0);
}
function __ZNSt3__212_GLOBAL__N_14makeINS_6locale5__impEjEERT_T0_() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__26locale5__impC2Ej(19296,1);
 return;
}
function __ZNSt3__26locale5__imp11make_globalEv() {
 var $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = (__ZNSt3__26locale7classicEv()|0);
 __ZNSt3__26localeC2ERKS0_(21928,$call);
 return (21928|0);
}
function __ZNSt3__26localeC2ERKS0_($this,$l) {
 $this = $this|0;
 $l = $l|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$l>>2]|0;
 HEAP32[$this>>2] = $0;
 __ZNSt3__214__shared_count12__add_sharedEv($0);
 return;
}
function __ZNSt3__26locale8__globalEv() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $guard$uninitialized = 0, $tobool = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[19456]|0;
 $guard$uninitialized = ($0<<24>>24)==(0);
 do {
  if ($guard$uninitialized) {
   $1 = (___cxa_guard_acquire(19456)|0);
   $tobool = ($1|0)==(0);
   if (!($tobool)) {
    __THREW__ = 0;
    (invoke_i(531)|0);
    $2 = __THREW__; __THREW__ = 0;
    $3 = $2&1;
    if ($3) {
     $5 = ___cxa_find_matching_catch_2()|0;
     $6 = tempRet0;
     ___resumeException($5|0);
     // unreachable;
    } else {
     HEAP32[5483] = 21928;
     break;
    }
   }
  }
 } while(0);
 $4 = HEAP32[5483]|0;
 return ($4|0);
}
function __ZNSt3__26localeC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __THREW__ = 0;
 $call = (invoke_i(532)|0);
 $0 = __THREW__; __THREW__ = 0;
 $1 = $0&1;
 if ($1) {
  $3 = ___cxa_find_matching_catch_3(0|0)|0;
  $4 = tempRet0;
  ___clang_call_terminate($3);
  // unreachable;
 } else {
  $2 = HEAP32[$call>>2]|0;
  HEAP32[$this>>2] = $2;
  __ZNSt3__214__shared_count12__add_sharedEv($2);
  return;
 }
}
function __ZNSt3__214__shared_countD2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNSt3__214__shared_count12__add_sharedEv($this) {
 $this = $this|0;
 var $__shared_owners_ = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $__shared_owners_ = ((($this)) + 4|0);
 __ZNSt3__212_GLOBAL__N_19incrementIlEET_RS2_($__shared_owners_);
 return;
}
function __ZNSt3__212_GLOBAL__N_19incrementIlEET_RS2_($t) {
 $t = $t|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$t>>2]|0;HEAP32[$t>>2] = (($0+1)|0);
 return;
}
function __ZNSt3__214__shared_count16__release_sharedEv($this) {
 $this = $this|0;
 var $0 = 0, $__shared_owners_ = 0, $call = 0, $cmp = 0, $retval$0 = 0, $vfn = 0, $vtable = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $__shared_owners_ = ((($this)) + 4|0);
 $call = (__ZNSt3__212_GLOBAL__N_19decrementIlEET_RS2_($__shared_owners_)|0);
 $cmp = ($call|0)==(-1);
 if ($cmp) {
  $vtable = HEAP32[$this>>2]|0;
  $vfn = ((($vtable)) + 8|0);
  $0 = HEAP32[$vfn>>2]|0;
  FUNCTION_TABLE_vi[$0 & 1023]($this);
  $retval$0 = 1;
 } else {
  $retval$0 = 0;
 }
 return ($retval$0|0);
}
function __ZNSt3__212_GLOBAL__N_19decrementIlEET_RS2_($t) {
 $t = $t|0;
 var $0 = 0, $atomic$temp$0$i2D = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$t>>2]|0;HEAP32[$t>>2] = (($0+-1)|0);
 $atomic$temp$0$i2D = (($0) + -1)|0;
 return ($atomic$temp$0$i2D|0);
}
function __ZNSt3__211__call_onceERVmPvPFvS2_E($flag,$arg,$func) {
 $flag = $flag|0;
 $arg = $arg|0;
 $func = $func|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $cmp = 0, $cmp2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 (_pthread_mutex_lock((21936|0))|0);
 while(1) {
  $0 = HEAP32[$flag>>2]|0;
  $cmp = ($0|0)==(1);
  if (!($cmp)) {
   break;
  }
  (_pthread_cond_wait((21964|0),(21936|0))|0);
 }
 $1 = HEAP32[$flag>>2]|0;
 $cmp2 = ($1|0)==(0);
 do {
  if ($cmp2) {
   HEAP32[$flag>>2] = 1;
   __THREW__ = 0;
   (invoke_ii(533,(21936|0))|0);
   $2 = __THREW__; __THREW__ = 0;
   $3 = $2&1;
   if (!($3)) {
    __THREW__ = 0;
    invoke_vi($func|0,($arg|0));
    $4 = __THREW__; __THREW__ = 0;
    $5 = $4&1;
    if (!($5)) {
     __THREW__ = 0;
     (invoke_ii(534,(21936|0))|0);
     $6 = __THREW__; __THREW__ = 0;
     $7 = $6&1;
     if (!($7)) {
      HEAP32[$flag>>2] = -1;
      __THREW__ = 0;
      (invoke_ii(533,(21936|0))|0);
      $8 = __THREW__; __THREW__ = 0;
      $9 = $8&1;
      if (!($9)) {
       __THREW__ = 0;
       (invoke_ii(535,(21964|0))|0);
       $10 = __THREW__; __THREW__ = 0;
       $11 = $10&1;
       if (!($11)) {
        break;
       }
      }
     }
    }
   }
   $12 = ___cxa_find_matching_catch_3(0|0)|0;
   $13 = tempRet0;
   (___cxa_begin_catch(($12|0))|0);
   __THREW__ = 0;
   (invoke_ii(534,(21936|0))|0);
   $14 = __THREW__; __THREW__ = 0;
   $15 = $14&1;
   if (!($15)) {
    HEAP32[$flag>>2] = 0;
    __THREW__ = 0;
    (invoke_ii(533,(21936|0))|0);
    $16 = __THREW__; __THREW__ = 0;
    $17 = $16&1;
    if (!($17)) {
     __THREW__ = 0;
     (invoke_ii(535,(21964|0))|0);
     $18 = __THREW__; __THREW__ = 0;
     $19 = $18&1;
     if (!($19)) {
      __THREW__ = 0;
      invoke_v(536);
      $20 = __THREW__; __THREW__ = 0;
     }
    }
   }
   $21 = ___cxa_find_matching_catch_2()|0;
   $22 = tempRet0;
   __THREW__ = 0;
   invoke_v(375);
   $23 = __THREW__; __THREW__ = 0;
   $24 = $23&1;
   if ($24) {
    $25 = ___cxa_find_matching_catch_3(0|0)|0;
    $26 = tempRet0;
    ___clang_call_terminate($25);
    // unreachable;
   } else {
    ___resumeException($21|0);
    // unreachable;
   }
  } else {
   (_pthread_mutex_unlock((21936|0))|0);
  }
 } while(0);
 return;
}
function __Znwj($size) {
 $size = $size|0;
 var $$size = 0, $call = 0, $call2 = 0, $cmp = 0, $cmp1 = 0, $exception = 0, $tobool = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $cmp = ($size|0)==(0);
 $$size = $cmp ? 1 : $size;
 while(1) {
  $call = (_malloc($$size)|0);
  $cmp1 = ($call|0)==(0|0);
  if (!($cmp1)) {
   label = 6;
   break;
  }
  $call2 = (__ZSt15get_new_handlerv()|0);
  $tobool = ($call2|0)==(0|0);
  if ($tobool) {
   label = 5;
   break;
  }
  FUNCTION_TABLE_v[$call2 & 1023]();
 }
 if ((label|0) == 5) {
  $exception = (___cxa_allocate_exception(4)|0);
  __ZNSt9bad_allocC2Ev($exception);
  ___cxa_throw(($exception|0),(1888|0),(318|0));
  // unreachable;
 }
 else if ((label|0) == 6) {
  return ($call|0);
 }
 return (0)|0;
}
function __ZdlPv($ptr) {
 $ptr = $ptr|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 _free($ptr);
 return;
}
function __ZdaPv($ptr) {
 $ptr = $ptr|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($ptr);
 return;
}
function __ZSt17__throw_bad_allocv() {
 var $exception = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $exception = (___cxa_allocate_exception(4)|0);
 __ZNSt9bad_allocC2Ev($exception);
 ___cxa_throw(($exception|0),(1888|0),(318|0));
 // unreachable;
}
function __ZNSt3__218__libcpp_refstringC2EPKc($this,$msg) {
 $this = $this|0;
 $msg = $msg|0;
 var $add2 = 0, $add6 = 0, $call = 0, $call3 = 0, $call5 = 0, $cap = 0, $count = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = (_strlen($msg)|0);
 $add2 = (($call) + 13)|0;
 $call3 = (__Znwj($add2)|0);
 HEAP32[$call3>>2] = $call;
 $cap = ((($call3)) + 4|0);
 HEAP32[$cap>>2] = $call;
 $count = ((($call3)) + 8|0);
 HEAP32[$count>>2] = 0;
 $call5 = (__ZNSt3__218__libcpp_refstring13data_from_repEPNS0_9_Rep_baseE($call3)|0);
 $add6 = (($call) + 1)|0;
 _memcpy(($call5|0),($msg|0),($add6|0))|0;
 HEAP32[$this>>2] = $call5;
 return;
}
function __ZNSt3__218__libcpp_refstring13data_from_repEPNS0_9_Rep_baseE($rep) {
 $rep = $rep|0;
 var $add$ptr2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $add$ptr2 = ((($rep)) + 12|0);
 return ($add$ptr2|0);
}
function __ZNSt11logic_errorC2EPKc($this,$msg) {
 $this = $this|0;
 $msg = $msg|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $__imp_ = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = (9648);
 $__imp_ = ((($this)) + 4|0);
 __THREW__ = 0;
 invoke_vii(537,($__imp_|0),($msg|0));
 $0 = __THREW__; __THREW__ = 0;
 $1 = $0&1;
 if ($1) {
  $2 = ___cxa_find_matching_catch_2()|0;
  $3 = tempRet0;
  ___resumeException($2|0);
  // unreachable;
 } else {
  return;
 }
}
function __ZNSt13runtime_errorC2ERKNSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE($this,$msg) {
 $this = $this|0;
 $msg = $msg|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $__imp_ = 0, $__size_$i$i$i$i = 0, $cond$i$i$i = 0, $tobool$i$i$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = (9668);
 $__imp_ = ((($this)) + 4|0);
 $__size_$i$i$i$i = ((($msg)) + 11|0);
 $0 = HEAP8[$__size_$i$i$i$i>>0]|0;
 $tobool$i$i$i$i = ($0<<24>>24)<(0);
 $1 = HEAP32[$msg>>2]|0;
 $cond$i$i$i = $tobool$i$i$i$i ? $1 : $msg;
 __THREW__ = 0;
 invoke_vii(537,($__imp_|0),($cond$i$i$i|0));
 $2 = __THREW__; __THREW__ = 0;
 $3 = $2&1;
 if ($3) {
  $4 = ___cxa_find_matching_catch_2()|0;
  $5 = tempRet0;
  ___resumeException($4|0);
  // unreachable;
 } else {
  return;
 }
}
function __ZNSt13runtime_errorC2EPKc($this,$msg) {
 $this = $this|0;
 $msg = $msg|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $__imp_ = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = (9668);
 $__imp_ = ((($this)) + 4|0);
 __THREW__ = 0;
 invoke_vii(537,($__imp_|0),($msg|0));
 $0 = __THREW__; __THREW__ = 0;
 $1 = $0&1;
 if ($1) {
  $2 = ___cxa_find_matching_catch_2()|0;
  $3 = tempRet0;
  ___resumeException($2|0);
  // unreachable;
 } else {
  return;
 }
}
function __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $exception = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $exception = (___cxa_allocate_exception(8)|0);
 __THREW__ = 0;
 invoke_vii(470,($exception|0),(17903|0));
 $0 = __THREW__; __THREW__ = 0;
 $1 = $0&1;
 if ($1) {
  $2 = ___cxa_find_matching_catch_2()|0;
  $3 = tempRet0;
  ___cxa_free_exception(($exception|0));
  ___resumeException($2|0);
  // unreachable;
 } else {
  HEAP32[$exception>>2] = (9688);
  ___cxa_throw(($exception|0),(1936|0),(321|0));
  // unreachable;
 }
}
function __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2ERKS5_($this,$__str) {
 $this = $this|0;
 $__str = $__str|0;
 var $0 = 0, $1 = 0, $2 = 0, $__size_$i = 0, $__size_$i5 = 0, $tobool$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 ;HEAP32[$this>>2]=0|0;HEAP32[$this+4>>2]=0|0;HEAP32[$this+8>>2]=0|0;
 $__size_$i5 = ((($__str)) + 11|0);
 $0 = HEAP8[$__size_$i5>>0]|0;
 $tobool$i = ($0<<24>>24)<(0);
 if ($tobool$i) {
  $1 = HEAP32[$__str>>2]|0;
  $__size_$i = ((($__str)) + 4|0);
  $2 = HEAP32[$__size_$i>>2]|0;
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($this,$1,$2);
 } else {
  ;HEAP32[$this>>2]=HEAP32[$__str>>2]|0;HEAP32[$this+4>>2]=HEAP32[$__str+4>>2]|0;HEAP32[$this+8>>2]=HEAP32[$__str+8>>2]|0;
 }
 return;
}
function __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($this,$__s,$__sz) {
 $this = $this|0;
 $__s = $__s|0;
 $__sz = $__sz|0;
 var $__cap_$i = 0, $__p$0 = 0, $__size_$i = 0, $__size_$i12 = 0, $add$i$i = 0, $and$i$i = 0, $arrayidx = 0, $call$i$i$i = 0, $cmp = 0, $cmp2 = 0, $conv$i = 0, $or$i = 0, $ref$tmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $ref$tmp = sp;
 $cmp = ($__sz>>>0)>(4294967279);
 if ($cmp) {
  __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv($this);
  label = 5;
 } else {
  $cmp2 = ($__sz>>>0)<(11);
  if ($cmp2) {
   $conv$i = $__sz&255;
   $__size_$i = ((($this)) + 11|0);
   HEAP8[$__size_$i>>0] = $conv$i;
   $__p$0 = $this;
  } else {
   label = 5;
  }
 }
 if ((label|0) == 5) {
  $add$i$i = (($__sz) + 16)|0;
  $and$i$i = $add$i$i & -16;
  $call$i$i$i = (__Znwj($and$i$i)|0);
  HEAP32[$this>>2] = $call$i$i$i;
  $or$i = $and$i$i | -2147483648;
  $__cap_$i = ((($this)) + 8|0);
  HEAP32[$__cap_$i>>2] = $or$i;
  $__size_$i12 = ((($this)) + 4|0);
  HEAP32[$__size_$i12>>2] = $__sz;
  $__p$0 = $call$i$i$i;
 }
 (__ZNSt3__211char_traitsIcE4copyEPcPKcj($__p$0,$__s,$__sz)|0);
 $arrayidx = (($__p$0) + ($__sz)|0);
 HEAP8[$ref$tmp>>0] = 0;
 __ZNSt3__211char_traitsIcE6assignERcRKc($arrayidx,$ref$tmp);
 STACKTOP = sp;return;
}
function __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEjc($this,$__n,$__c) {
 $this = $this|0;
 $__n = $__n|0;
 $__c = $__c|0;
 var $__cap_$i = 0, $__p$0 = 0, $__size_$i = 0, $__size_$i12 = 0, $add$i$i = 0, $and$i$i = 0, $arrayidx = 0, $call$i$i$i = 0, $cmp = 0, $cmp2 = 0, $conv$i = 0, $or$i = 0, $ref$tmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $ref$tmp = sp;
 $cmp = ($__n>>>0)>(4294967279);
 if ($cmp) {
  __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv($this);
  label = 5;
 } else {
  $cmp2 = ($__n>>>0)<(11);
  if ($cmp2) {
   $conv$i = $__n&255;
   $__size_$i = ((($this)) + 11|0);
   HEAP8[$__size_$i>>0] = $conv$i;
   $__p$0 = $this;
  } else {
   label = 5;
  }
 }
 if ((label|0) == 5) {
  $add$i$i = (($__n) + 16)|0;
  $and$i$i = $add$i$i & -16;
  $call$i$i$i = (__Znwj($and$i$i)|0);
  HEAP32[$this>>2] = $call$i$i$i;
  $or$i = $and$i$i | -2147483648;
  $__cap_$i = ((($this)) + 8|0);
  HEAP32[$__cap_$i>>2] = $or$i;
  $__size_$i12 = ((($this)) + 4|0);
  HEAP32[$__size_$i12>>2] = $__n;
  $__p$0 = $call$i$i$i;
 }
 (__ZNSt3__211char_traitsIcE6assignEPcjc($__p$0,$__n,$__c)|0);
 $arrayidx = (($__p$0) + ($__n)|0);
 HEAP8[$ref$tmp>>0] = 0;
 __ZNSt3__211char_traitsIcE6assignERcRKc($arrayidx,$ref$tmp);
 STACKTOP = sp;return;
}
function __ZNSt3__211char_traitsIcE6assignEPcjc($__s,$__n,$__a) {
 $__s = $__s|0;
 $__n = $__n|0;
 $__a = $__a|0;
 var $0 = 0, $call = 0, $cmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $cmp = ($__n|0)==(0);
 if (!($cmp)) {
  $call = (__ZNSt3__211char_traitsIcE11to_int_typeEc($__a)|0);
  $0 = $call&255;
  _memset(($__s|0),($0|0),($__n|0))|0;
 }
 return ($__s|0);
}
function __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $__size_$i = 0, $tobool$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $__size_$i = ((($this)) + 11|0);
 $0 = HEAP8[$__size_$i>>0]|0;
 $tobool$i = ($0<<24>>24)<(0);
 if ($tobool$i) {
  $1 = HEAP32[$this>>2]|0;
  __ZdlPv($1);
 }
 return;
}
function __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEaSERKS5_($this,$__str) {
 $this = $this|0;
 $__str = $__str|0;
 var $0 = 0, $1 = 0, $2 = 0, $__size_$i$i$i = 0, $__size_$i3$i = 0, $cmp = 0, $cond$i = 0, $cond$i$i = 0, $conv$i$i = 0, $tobool$i$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $cmp = ($this|0)==($__str|0);
 if (!($cmp)) {
  $__size_$i$i$i = ((($__str)) + 11|0);
  $0 = HEAP8[$__size_$i$i$i>>0]|0;
  $tobool$i$i$i = ($0<<24>>24)<(0);
  $1 = HEAP32[$__str>>2]|0;
  $cond$i$i = $tobool$i$i$i ? $1 : $__str;
  $__size_$i3$i = ((($__str)) + 4|0);
  $2 = HEAP32[$__size_$i3$i>>2]|0;
  $conv$i$i = $0&255;
  $cond$i = $tobool$i$i$i ? $2 : $conv$i$i;
  (__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKcj($this,$cond$i$i,$cond$i)|0);
 }
 return ($this|0);
}
function __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKcj($this,$__s,$__n) {
 $this = $this|0;
 $__s = $__s|0;
 $__n = $__n|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $__cap_$i$i = 0, $__size_$i$i = 0, $__size_$i2$i = 0, $__size_$i3$i = 0, $and$i$i = 0, $arrayidx = 0, $cmp = 0, $cond$i = 0, $cond$i19 = 0, $cond$i25 = 0, $conv$i$i = 0, $conv$i$i29 = 0, $phitmp$i = 0, $ref$tmp = 0, $sub = 0;
 var $tobool$i$i = 0, $tobool$i$i28 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $ref$tmp = sp;
 $__size_$i$i = ((($this)) + 11|0);
 $0 = HEAP8[$__size_$i$i>>0]|0;
 $tobool$i$i = ($0<<24>>24)<(0);
 if ($tobool$i$i) {
  $__cap_$i$i = ((($this)) + 8|0);
  $1 = HEAP32[$__cap_$i$i>>2]|0;
  $and$i$i = $1 & 2147483647;
  $phitmp$i = (($and$i$i) + -1)|0;
  $cond$i = $phitmp$i;
 } else {
  $cond$i = 10;
 }
 $cmp = ($cond$i>>>0)<($__n>>>0);
 do {
  if ($cmp) {
   if ($tobool$i$i) {
    $__size_$i3$i = ((($this)) + 4|0);
    $4 = HEAP32[$__size_$i3$i>>2]|0;
    $cond$i25 = $4;
   } else {
    $conv$i$i = $0&255;
    $cond$i25 = $conv$i$i;
   }
   $sub = (($__n) - ($cond$i))|0;
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE21__grow_by_and_replaceEjjjjjjPKc($this,$cond$i,$sub,$cond$i25,0,$cond$i25,$__n,$__s);
  } else {
   if ($tobool$i$i) {
    $2 = HEAP32[$this>>2]|0;
    $cond$i19 = $2;
   } else {
    $cond$i19 = $this;
   }
   (__ZNSt3__211char_traitsIcE4moveEPcPKcj($cond$i19,$__s,$__n)|0);
   $arrayidx = (($cond$i19) + ($__n)|0);
   HEAP8[$ref$tmp>>0] = 0;
   __ZNSt3__211char_traitsIcE6assignERcRKc($arrayidx,$ref$tmp);
   $3 = HEAP8[$__size_$i$i>>0]|0;
   $tobool$i$i28 = ($3<<24>>24)<(0);
   if ($tobool$i$i28) {
    $__size_$i2$i = ((($this)) + 4|0);
    HEAP32[$__size_$i2$i>>2] = $__n;
    break;
   } else {
    $conv$i$i29 = $__n&255;
    HEAP8[$__size_$i$i>>0] = $conv$i$i29;
    break;
   }
  }
 } while(0);
 STACKTOP = sp;return ($this|0);
}
function __ZNSt3__211char_traitsIcE4moveEPcPKcj($__s1,$__s2,$__n) {
 $__s1 = $__s1|0;
 $__s2 = $__s2|0;
 $__n = $__n|0;
 var $cmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $cmp = ($__n|0)==(0);
 if (!($cmp)) {
  _memmove(($__s1|0),($__s2|0),($__n|0))|0;
 }
 return ($__s1|0);
}
function __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE21__grow_by_and_replaceEjjjjjjPKc($this,$__old_cap,$__delta_cap,$__old_sz,$__n_copy,$__n_del,$__n_add,$__p_new_stuff) {
 $this = $this|0;
 $__old_cap = $__old_cap|0;
 $__delta_cap = $__delta_cap|0;
 $__old_sz = $__old_sz|0;
 $__n_copy = $__n_copy|0;
 $__n_del = $__n_del|0;
 $__n_add = $__n_add|0;
 $__p_new_stuff = $__p_new_stuff|0;
 var $$sroa$speculated = 0, $0 = 0, $1 = 0, $__cap_$i = 0, $__size_$i = 0, $__size_$i$i = 0, $add = 0, $add$i$i = 0, $add$ptr = 0, $add$ptr33 = 0, $add$ptr34 = 0, $add$ptr36 = 0, $add$ptr37 = 0, $add48 = 0, $and$i$i = 0, $arrayidx = 0, $call$i$i$i = 0, $cmp = 0, $cmp$i = 0, $cmp$i$i$i = 0;
 var $cmp17 = 0, $cmp23 = 0, $cmp30 = 0, $cmp41 = 0, $cmp5 = 0, $cond$i = 0, $cond40 = 0, $mul = 0, $or$i = 0, $phitmp = 0, $ref$tmp49 = 0, $sub2 = 0, $sub28 = 0, $sub29 = 0, $tobool$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $ref$tmp49 = sp;
 $sub2 = (-18 - ($__old_cap))|0;
 $cmp = ($sub2>>>0)<($__delta_cap>>>0);
 if ($cmp) {
  __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv($this);
 }
 $__size_$i$i = ((($this)) + 11|0);
 $0 = HEAP8[$__size_$i$i>>0]|0;
 $tobool$i$i = ($0<<24>>24)<(0);
 if ($tobool$i$i) {
  $1 = HEAP32[$this>>2]|0;
  $cond$i = $1;
 } else {
  $cond$i = $this;
 }
 $cmp5 = ($__old_cap>>>0)<(2147483623);
 if ($cmp5) {
  $add = (($__delta_cap) + ($__old_cap))|0;
  $mul = $__old_cap << 1;
  $cmp$i$i$i = ($add>>>0)<($mul>>>0);
  $$sroa$speculated = $cmp$i$i$i ? $mul : $add;
  $cmp$i = ($$sroa$speculated>>>0)<(11);
  $add$i$i = (($$sroa$speculated) + 16)|0;
  $and$i$i = $add$i$i & -16;
  $phitmp = $cmp$i ? 11 : $and$i$i;
  $cond40 = $phitmp;
 } else {
  $cond40 = -17;
 }
 $call$i$i$i = (__Znwj($cond40)|0);
 $cmp17 = ($__n_copy|0)==(0);
 if (!($cmp17)) {
  (__ZNSt3__211char_traitsIcE4copyEPcPKcj($call$i$i$i,$cond$i,$__n_copy)|0);
 }
 $cmp23 = ($__n_add|0)==(0);
 if (!($cmp23)) {
  $add$ptr = (($call$i$i$i) + ($__n_copy)|0);
  (__ZNSt3__211char_traitsIcE4copyEPcPKcj($add$ptr,$__p_new_stuff,$__n_add)|0);
 }
 $sub28 = (($__old_sz) - ($__n_del))|0;
 $sub29 = (($sub28) - ($__n_copy))|0;
 $cmp30 = ($sub29|0)==(0);
 if (!($cmp30)) {
  $add$ptr33 = (($call$i$i$i) + ($__n_copy)|0);
  $add$ptr34 = (($add$ptr33) + ($__n_add)|0);
  $add$ptr36 = (($cond$i) + ($__n_copy)|0);
  $add$ptr37 = (($add$ptr36) + ($__n_del)|0);
  (__ZNSt3__211char_traitsIcE4copyEPcPKcj($add$ptr34,$add$ptr37,$sub29)|0);
 }
 $cmp41 = ($__old_cap|0)==(10);
 if (!($cmp41)) {
  __ZdlPv($cond$i);
 }
 HEAP32[$this>>2] = $call$i$i$i;
 $or$i = $cond40 | -2147483648;
 $__cap_$i = ((($this)) + 8|0);
 HEAP32[$__cap_$i>>2] = $or$i;
 $add48 = (($sub28) + ($__n_add))|0;
 $__size_$i = ((($this)) + 4|0);
 HEAP32[$__size_$i>>2] = $add48;
 $arrayidx = (($call$i$i$i) + ($add48)|0);
 HEAP8[$ref$tmp49>>0] = 0;
 __ZNSt3__211char_traitsIcE6assignERcRKc($arrayidx,$ref$tmp49);
 STACKTOP = sp;return;
}
function __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj($this,$__res_arg) {
 $this = $this|0;
 $__res_arg = $__res_arg|0;
 var $$phitmp$i = 0, $$sroa$speculated = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__cap_$i = 0, $__cap_$i$i = 0, $__new_data$0 = 0, $__new_data$1536271 = 0, $__new_data$154 = 0, $__now_long$0$off050 = 0, $__p$052 = 0, $__size_$i$i = 0;
 var $__size_$i3$i = 0, $__size_$i3$i17 = 0, $__size_$i8 = 0, $add = 0, $add$i$i = 0, $add27 = 0, $add2760 = 0, $add2769 = 0, $add35 = 0, $and$i$i = 0, $and$i$i31 = 0, $call$i$i$i = 0, $call$i$i$i30 = 0, $cmp = 0, $cmp$i = 0, $cmp$i$i$i = 0, $cmp12 = 0, $cmp6 = 0, $cond$i13 = 0, $cond$i45 = 0;
 var $conv$i = 0, $conv$i$i = 0, $conv$i$i19 = 0, $conv$i$i1968 = 0, $or$i = 0, $phitmp$i = 0, $phitmp$i32 = 0, $tobool$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $cmp = ($__res_arg>>>0)>(4294967279);
 if ($cmp) {
  __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv($this);
 }
 $__size_$i$i = ((($this)) + 11|0);
 $0 = HEAP8[$__size_$i$i>>0]|0;
 $tobool$i$i = ($0<<24>>24)<(0);
 if ($tobool$i$i) {
  $__cap_$i$i = ((($this)) + 8|0);
  $1 = HEAP32[$__cap_$i$i>>2]|0;
  $and$i$i = $1 & 2147483647;
  $phitmp$i = (($and$i$i) + -1)|0;
  $__size_$i3$i = ((($this)) + 4|0);
  $2 = HEAP32[$__size_$i3$i>>2]|0;
  $cond$i13 = $2;$cond$i45 = $phitmp$i;
 } else {
  $conv$i$i = $0&255;
  $cond$i13 = $conv$i$i;$cond$i45 = 10;
 }
 $cmp$i$i$i = ($cond$i13>>>0)>($__res_arg>>>0);
 $$sroa$speculated = $cmp$i$i$i ? $cond$i13 : $__res_arg;
 $cmp$i = ($$sroa$speculated>>>0)<(11);
 $add$i$i = (($$sroa$speculated) + 16)|0;
 $and$i$i31 = $add$i$i & -16;
 $phitmp$i32 = (($and$i$i31) + -1)|0;
 $$phitmp$i = $cmp$i ? 10 : $phitmp$i32;
 $cmp6 = ($$phitmp$i|0)==($cond$i45|0);
 L8: do {
  if (!($cmp6)) {
   do {
    if ($cmp$i) {
     $8 = HEAP32[$this>>2]|0;
     if ($tobool$i$i) {
      $__new_data$154 = $this;$__now_long$0$off050 = 0;$__p$052 = $8;
      label = 17;
     } else {
      $conv$i$i1968 = $0&255;
      $add2769 = (($conv$i$i1968) + 1)|0;
      (__ZNSt3__211char_traitsIcE4copyEPcPKcj($this,$8,$add2769)|0);
      __ZdlPv($8);
      label = 19;
     }
    } else {
     $cmp12 = ($$phitmp$i>>>0)>($cond$i45>>>0);
     $add = (($$phitmp$i) + 1)|0;
     if ($cmp12) {
      $call$i$i$i = (__Znwj($add)|0);
      $__new_data$0 = $call$i$i$i;
     } else {
      __THREW__ = 0;
      $call$i$i$i30 = (invoke_ii(538,($add|0))|0);
      $3 = __THREW__; __THREW__ = 0;
      $4 = $3&1;
      if ($4) {
       $5 = ___cxa_find_matching_catch_3(0|0)|0;
       $6 = tempRet0;
       (___cxa_begin_catch(($5|0))|0);
       ___cxa_end_catch();
       break L8;
      } else {
       $__new_data$0 = $call$i$i$i30;
      }
     }
     if ($tobool$i$i) {
      $7 = HEAP32[$this>>2]|0;
      $__new_data$154 = $__new_data$0;$__now_long$0$off050 = 1;$__p$052 = $7;
      label = 17;
      break;
     } else {
      $conv$i$i19 = $0&255;
      $add27 = (($conv$i$i19) + 1)|0;
      (__ZNSt3__211char_traitsIcE4copyEPcPKcj($__new_data$0,$this,$add27)|0);
      $__new_data$1536271 = $__new_data$0;
      label = 18;
      break;
     }
    }
   } while(0);
   if ((label|0) == 17) {
    $__size_$i3$i17 = ((($this)) + 4|0);
    $9 = HEAP32[$__size_$i3$i17>>2]|0;
    $add2760 = (($9) + 1)|0;
    (__ZNSt3__211char_traitsIcE4copyEPcPKcj($__new_data$154,$__p$052,$add2760)|0);
    __ZdlPv($__p$052);
    if ($__now_long$0$off050) {
     $__new_data$1536271 = $__new_data$154;
     label = 18;
    } else {
     label = 19;
    }
   }
   if ((label|0) == 18) {
    $add35 = (($$phitmp$i) + 1)|0;
    $or$i = $add35 | -2147483648;
    $__cap_$i = ((($this)) + 8|0);
    HEAP32[$__cap_$i>>2] = $or$i;
    $__size_$i8 = ((($this)) + 4|0);
    HEAP32[$__size_$i8>>2] = $cond$i13;
    HEAP32[$this>>2] = $__new_data$1536271;
    break;
   }
   else if ((label|0) == 19) {
    $conv$i = $cond$i13&255;
    HEAP8[$__size_$i$i>>0] = $conv$i;
    break;
   }
  }
 } while(0);
 return;
}
function __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc($this,$__s) {
 $this = $this|0;
 $__s = $__s|0;
 var $call = 0, $call2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = (__ZNSt3__211char_traitsIcE6lengthEPKc($__s)|0);
 $call2 = (__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKcj($this,$__s,$call)|0);
 return ($call2|0);
}
function __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($this,$__n,$__c) {
 $this = $this|0;
 $__n = $__n|0;
 $__c = $__c|0;
 var $0 = 0, $1 = 0, $2 = 0, $__size_$i$i = 0, $__size_$i3$i = 0, $__size_$i6$i = 0, $add$ptr$i = 0, $add$ptr4$i = 0, $cmp = 0, $cond$i = 0, $conv$i$i = 0, $conv$i$i7 = 0, $ref$tmp$i = 0, $ref$tmp5$i = 0, $sub = 0, $tobool$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $ref$tmp$i = sp + 1|0;
 $ref$tmp5$i = sp;
 $__size_$i$i = ((($this)) + 11|0);
 $0 = HEAP8[$__size_$i$i>>0]|0;
 $tobool$i$i = ($0<<24>>24)<(0);
 if ($tobool$i$i) {
  $__size_$i3$i = ((($this)) + 4|0);
  $1 = HEAP32[$__size_$i3$i>>2]|0;
  $cond$i = $1;
 } else {
  $conv$i$i = $0&255;
  $cond$i = $conv$i$i;
 }
 $cmp = ($cond$i>>>0)<($__n>>>0);
 do {
  if ($cmp) {
   $sub = (($__n) - ($cond$i))|0;
   (__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEjc($this,$sub,$__c)|0);
  } else {
   if ($tobool$i$i) {
    $2 = HEAP32[$this>>2]|0;
    $add$ptr$i = (($2) + ($__n)|0);
    HEAP8[$ref$tmp$i>>0] = 0;
    __ZNSt3__211char_traitsIcE6assignERcRKc($add$ptr$i,$ref$tmp$i);
    $__size_$i6$i = ((($this)) + 4|0);
    HEAP32[$__size_$i6$i>>2] = $__n;
    break;
   } else {
    $add$ptr4$i = (($this) + ($__n)|0);
    HEAP8[$ref$tmp5$i>>0] = 0;
    __ZNSt3__211char_traitsIcE6assignERcRKc($add$ptr4$i,$ref$tmp5$i);
    $conv$i$i7 = $__n&255;
    HEAP8[$__size_$i$i>>0] = $conv$i$i7;
    break;
   }
  }
 } while(0);
 STACKTOP = sp;return;
}
function __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEjc($this,$__n,$__c) {
 $this = $this|0;
 $__n = $__n|0;
 $__c = $__c|0;
 var $$pre = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $__cap_$i$i = 0, $__size_$i$i = 0, $__size_$i2$i = 0, $__size_$i3$i = 0, $add = 0, $add$ptr = 0, $and$i$i = 0, $arrayidx = 0, $cmp = 0, $cond$i22 = 0, $cond$i32 = 0, $cond$i34 = 0, $conv$i$i = 0;
 var $conv$i$i26 = 0, $phitmp$i = 0, $ref$tmp = 0, $sub = 0, $sub4 = 0, $tobool = 0, $tobool$i$i = 0, $tobool$i$i25 = 0, $tobool$i$i29 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $ref$tmp = sp;
 $tobool = ($__n|0)==(0);
 if (!($tobool)) {
  $__size_$i$i = ((($this)) + 11|0);
  $0 = HEAP8[$__size_$i$i>>0]|0;
  $tobool$i$i = ($0<<24>>24)<(0);
  if ($tobool$i$i) {
   $__cap_$i$i = ((($this)) + 8|0);
   $1 = HEAP32[$__cap_$i$i>>2]|0;
   $and$i$i = $1 & 2147483647;
   $phitmp$i = (($and$i$i) + -1)|0;
   $__size_$i3$i = ((($this)) + 4|0);
   $2 = HEAP32[$__size_$i3$i>>2]|0;
   $cond$i22 = $2;$cond$i34 = $phitmp$i;
  } else {
   $conv$i$i = $0&255;
   $cond$i22 = $conv$i$i;$cond$i34 = 10;
  }
  $sub = (($cond$i34) - ($cond$i22))|0;
  $cmp = ($sub>>>0)<($__n>>>0);
  $add = (($cond$i22) + ($__n))|0;
  if ($cmp) {
   $sub4 = (($add) - ($cond$i34))|0;
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9__grow_byEjjjjjj($this,$cond$i34,$sub4,$cond$i22,$cond$i22,0,0);
   $$pre = HEAP8[$__size_$i$i>>0]|0;
   $3 = $$pre;
  } else {
   $3 = $0;
  }
  $tobool$i$i29 = ($3<<24>>24)<(0);
  if ($tobool$i$i29) {
   $4 = HEAP32[$this>>2]|0;
   $cond$i32 = $4;
  } else {
   $cond$i32 = $this;
  }
  $add$ptr = (($cond$i32) + ($cond$i22)|0);
  (__ZNSt3__211char_traitsIcE6assignEPcjc($add$ptr,$__n,$__c)|0);
  $5 = HEAP8[$__size_$i$i>>0]|0;
  $tobool$i$i25 = ($5<<24>>24)<(0);
  if ($tobool$i$i25) {
   $__size_$i2$i = ((($this)) + 4|0);
   HEAP32[$__size_$i2$i>>2] = $add;
  } else {
   $conv$i$i26 = $add&255;
   HEAP8[$__size_$i$i>>0] = $conv$i$i26;
  }
  $arrayidx = (($cond$i32) + ($add)|0);
  HEAP8[$ref$tmp>>0] = 0;
  __ZNSt3__211char_traitsIcE6assignERcRKc($arrayidx,$ref$tmp);
 }
 STACKTOP = sp;return ($this|0);
}
function __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9__grow_byEjjjjjj($this,$__old_cap,$__delta_cap,$__old_sz,$__n_copy,$__n_del,$__n_add) {
 $this = $this|0;
 $__old_cap = $__old_cap|0;
 $__delta_cap = $__delta_cap|0;
 $__old_sz = $__old_sz|0;
 $__n_copy = $__n_copy|0;
 $__n_del = $__n_del|0;
 $__n_add = $__n_add|0;
 var $$sroa$speculated = 0, $0 = 0, $1 = 0, $__cap_$i = 0, $__size_$i$i = 0, $add = 0, $add$i$i = 0, $add$ptr = 0, $add$ptr27 = 0, $add$ptr29 = 0, $add$ptr30 = 0, $and$i$i = 0, $call$i$i$i = 0, $cmp = 0, $cmp$i = 0, $cmp$i$i$i = 0, $cmp16 = 0, $cmp24 = 0, $cmp34 = 0, $cmp4 = 0;
 var $cond$i = 0, $cond30 = 0, $mul = 0, $or$i = 0, $phitmp = 0, $sub = 0, $sub22 = 0, $sub23 = 0, $tobool$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $sub = (-17 - ($__old_cap))|0;
 $cmp = ($sub>>>0)<($__delta_cap>>>0);
 if ($cmp) {
  __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv($this);
 }
 $__size_$i$i = ((($this)) + 11|0);
 $0 = HEAP8[$__size_$i$i>>0]|0;
 $tobool$i$i = ($0<<24>>24)<(0);
 if ($tobool$i$i) {
  $1 = HEAP32[$this>>2]|0;
  $cond$i = $1;
 } else {
  $cond$i = $this;
 }
 $cmp4 = ($__old_cap>>>0)<(2147483623);
 if ($cmp4) {
  $add = (($__delta_cap) + ($__old_cap))|0;
  $mul = $__old_cap << 1;
  $cmp$i$i$i = ($add>>>0)<($mul>>>0);
  $$sroa$speculated = $cmp$i$i$i ? $mul : $add;
  $cmp$i = ($$sroa$speculated>>>0)<(11);
  $add$i$i = (($$sroa$speculated) + 16)|0;
  $and$i$i = $add$i$i & -16;
  $phitmp = $cmp$i ? 11 : $and$i$i;
  $cond30 = $phitmp;
 } else {
  $cond30 = -17;
 }
 $call$i$i$i = (__Znwj($cond30)|0);
 $cmp16 = ($__n_copy|0)==(0);
 if (!($cmp16)) {
  (__ZNSt3__211char_traitsIcE4copyEPcPKcj($call$i$i$i,$cond$i,$__n_copy)|0);
 }
 $sub22 = (($__old_sz) - ($__n_del))|0;
 $sub23 = (($sub22) - ($__n_copy))|0;
 $cmp24 = ($sub23|0)==(0);
 if (!($cmp24)) {
  $add$ptr = (($call$i$i$i) + ($__n_copy)|0);
  $add$ptr27 = (($add$ptr) + ($__n_add)|0);
  $add$ptr29 = (($cond$i) + ($__n_copy)|0);
  $add$ptr30 = (($add$ptr29) + ($__n_del)|0);
  (__ZNSt3__211char_traitsIcE4copyEPcPKcj($add$ptr27,$add$ptr30,$sub23)|0);
 }
 $cmp34 = ($__old_cap|0)==(10);
 if (!($cmp34)) {
  __ZdlPv($cond$i);
 }
 HEAP32[$this>>2] = $call$i$i$i;
 $or$i = $cond30 | -2147483648;
 $__cap_$i = ((($this)) + 8|0);
 HEAP32[$__cap_$i>>2] = $or$i;
 return;
}
function __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKcj($this,$__s,$__n) {
 $this = $this|0;
 $__s = $__s|0;
 $__n = $__n|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $__cap_$i$i = 0, $__size_$i$i = 0, $__size_$i2$i = 0, $__size_$i3$i = 0, $add = 0, $add$ptr = 0, $and$i$i = 0, $arrayidx = 0, $cmp = 0, $cond$i24 = 0, $cond$i30 = 0, $cond$i36 = 0, $conv$i$i = 0, $conv$i$i34 = 0, $phitmp$i = 0;
 var $ref$tmp = 0, $sub = 0, $sub8 = 0, $tobool = 0, $tobool$i$i = 0, $tobool$i$i33 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $ref$tmp = sp;
 $__size_$i$i = ((($this)) + 11|0);
 $0 = HEAP8[$__size_$i$i>>0]|0;
 $tobool$i$i = ($0<<24>>24)<(0);
 if ($tobool$i$i) {
  $__cap_$i$i = ((($this)) + 8|0);
  $1 = HEAP32[$__cap_$i$i>>2]|0;
  $and$i$i = $1 & 2147483647;
  $phitmp$i = (($and$i$i) + -1)|0;
  $__size_$i3$i = ((($this)) + 4|0);
  $2 = HEAP32[$__size_$i3$i>>2]|0;
  $cond$i24 = $2;$cond$i36 = $phitmp$i;
 } else {
  $conv$i$i = $0&255;
  $cond$i24 = $conv$i$i;$cond$i36 = 10;
 }
 $sub = (($cond$i36) - ($cond$i24))|0;
 $cmp = ($sub>>>0)<($__n>>>0);
 $add = (($cond$i24) + ($__n))|0;
 if ($cmp) {
  $sub8 = (($add) - ($cond$i36))|0;
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE21__grow_by_and_replaceEjjjjjjPKc($this,$cond$i36,$sub8,$cond$i24,$cond$i24,0,$__n,$__s);
 } else {
  $tobool = ($__n|0)==(0);
  if (!($tobool)) {
   if ($tobool$i$i) {
    $3 = HEAP32[$this>>2]|0;
    $cond$i30 = $3;
   } else {
    $cond$i30 = $this;
   }
   $add$ptr = (($cond$i30) + ($cond$i24)|0);
   (__ZNSt3__211char_traitsIcE4copyEPcPKcj($add$ptr,$__s,$__n)|0);
   $4 = HEAP8[$__size_$i$i>>0]|0;
   $tobool$i$i33 = ($4<<24>>24)<(0);
   if ($tobool$i$i33) {
    $__size_$i2$i = ((($this)) + 4|0);
    HEAP32[$__size_$i2$i>>2] = $add;
   } else {
    $conv$i$i34 = $add&255;
    HEAP8[$__size_$i$i>>0] = $conv$i$i34;
   }
   $arrayidx = (($cond$i30) + ($add)|0);
   HEAP8[$ref$tmp>>0] = 0;
   __ZNSt3__211char_traitsIcE6assignERcRKc($arrayidx,$ref$tmp);
  }
 }
 STACKTOP = sp;return ($this|0);
}
function __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKc($this,$__s) {
 $this = $this|0;
 $__s = $__s|0;
 var $call = 0, $call2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = (__ZNSt3__211char_traitsIcE6lengthEPKc($__s)|0);
 $call2 = (__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKcj($this,$__s,$call)|0);
 return ($call2|0);
}
function __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9push_backEc($this,$__c) {
 $this = $this|0;
 $__c = $__c|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $__c$addr = 0, $__cap$0 = 0, $__cap_$i = 0, $__p$0 = 0, $__size_$i = 0, $__size_$i15 = 0, $__size_$i21 = 0, $__sz$0 = 0, $add = 0, $add22 = 0, $add23 = 0, $add24 = 0, $and$i = 0, $call12$pn = 0, $cmp = 0;
 var $conv$i = 0, $conv$i16 = 0, $incdec$ptr = 0, $ref$tmp = 0, $sub = 0, $tobool$i = 0, $tobool$i20 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $__c$addr = sp + 1|0;
 $ref$tmp = sp;
 HEAP8[$__c$addr>>0] = $__c;
 $__size_$i = ((($this)) + 11|0);
 $0 = HEAP8[$__size_$i>>0]|0;
 $tobool$i = ($0<<24>>24)<(0);
 if ($tobool$i) {
  $__cap_$i = ((($this)) + 8|0);
  $1 = HEAP32[$__cap_$i>>2]|0;
  $and$i = $1 & 2147483647;
  $sub = (($and$i) + -1)|0;
  $__size_$i21 = ((($this)) + 4|0);
  $2 = HEAP32[$__size_$i21>>2]|0;
  $__cap$0 = $sub;$__sz$0 = $2;
 } else {
  $conv$i = $0&255;
  $__cap$0 = 10;$__sz$0 = $conv$i;
 }
 $cmp = ($__sz$0|0)==($__cap$0|0);
 if ($cmp) {
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9__grow_byEjjjjjj($this,$__cap$0,1,$__cap$0,$__cap$0,0,0);
  $3 = HEAP8[$__size_$i>>0]|0;
  $tobool$i20 = ($3<<24>>24)<(0);
  $add22 = (($__cap$0) + 1)|0;
  if ($tobool$i20) {
   $add23 = $add22;
   label = 8;
  } else {
   $add24 = $add22;
   label = 7;
  }
 } else {
  $add = (($__sz$0) + 1)|0;
  if ($tobool$i) {
   $add23 = $add;
   label = 8;
  } else {
   $add24 = $add;
   label = 7;
  }
 }
 if ((label|0) == 7) {
  $conv$i16 = $add24&255;
  HEAP8[$__size_$i>>0] = $conv$i16;
  $call12$pn = $this;
 }
 else if ((label|0) == 8) {
  $4 = HEAP32[$this>>2]|0;
  $__size_$i15 = ((($this)) + 4|0);
  HEAP32[$__size_$i15>>2] = $add23;
  $call12$pn = $4;
 }
 $__p$0 = (($call12$pn) + ($__sz$0)|0);
 __ZNSt3__211char_traitsIcE6assignERcRKc($__p$0,$__c$addr);
 $incdec$ptr = ((($__p$0)) + 1|0);
 HEAP8[$ref$tmp>>0] = 0;
 __ZNSt3__211char_traitsIcE6assignERcRKc($incdec$ptr,$ref$tmp);
 STACKTOP = sp;return;
}
function __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initEPKwj($this,$__s,$__sz) {
 $this = $this|0;
 $__s = $__s|0;
 $__sz = $__sz|0;
 var $0 = 0, $__cap_$i = 0, $__p$0 = 0, $__size_$i = 0, $__size_$i12 = 0, $add$i$i = 0, $and$i$i = 0, $arrayidx = 0, $call$i$i$i = 0, $cmp = 0, $cmp$i$i = 0, $cmp2 = 0, $conv$i = 0, $exception$i$i = 0, $mul$i$i = 0, $or$i = 0, $ref$tmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $ref$tmp = sp;
 $cmp = ($__sz>>>0)>(1073741807);
 if ($cmp) {
  __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv($this);
  label = 5;
 } else {
  $cmp2 = ($__sz>>>0)<(2);
  if ($cmp2) {
   $conv$i = $__sz&255;
   $0 = ((($this)) + 8|0);
   $__size_$i = ((($0)) + 3|0);
   HEAP8[$__size_$i>>0] = $conv$i;
   $__p$0 = $this;
  } else {
   label = 5;
  }
 }
 do {
  if ((label|0) == 5) {
   $add$i$i = (($__sz) + 4)|0;
   $and$i$i = $add$i$i & -4;
   $cmp$i$i = ($and$i$i>>>0)>(1073741823);
   if ($cmp$i$i) {
    $exception$i$i = (___cxa_allocate_exception(4)|0);
    __ZNSt9bad_allocC2Ev($exception$i$i);
    ___cxa_throw(($exception$i$i|0),(1888|0),(318|0));
    // unreachable;
   } else {
    $mul$i$i = $and$i$i << 2;
    $call$i$i$i = (__Znwj($mul$i$i)|0);
    HEAP32[$this>>2] = $call$i$i$i;
    $or$i = $and$i$i | -2147483648;
    $__cap_$i = ((($this)) + 8|0);
    HEAP32[$__cap_$i>>2] = $or$i;
    $__size_$i12 = ((($this)) + 4|0);
    HEAP32[$__size_$i12>>2] = $__sz;
    $__p$0 = $call$i$i$i;
    break;
   }
  }
 } while(0);
 (__ZNSt3__211char_traitsIwE4copyEPwPKwj($__p$0,$__s,$__sz)|0);
 $arrayidx = (($__p$0) + ($__sz<<2)|0);
 HEAP32[$ref$tmp>>2] = 0;
 __ZNSt3__211char_traitsIwE6assignERwRKw($arrayidx,$ref$tmp);
 STACKTOP = sp;return;
}
function __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initEjw($this,$__n,$__c) {
 $this = $this|0;
 $__n = $__n|0;
 $__c = $__c|0;
 var $0 = 0, $__cap_$i = 0, $__p$0 = 0, $__size_$i = 0, $__size_$i12 = 0, $add$i$i = 0, $and$i$i = 0, $arrayidx = 0, $call$i$i$i = 0, $cmp = 0, $cmp$i$i = 0, $cmp2 = 0, $conv$i = 0, $exception$i$i = 0, $mul$i$i = 0, $or$i = 0, $ref$tmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $ref$tmp = sp;
 $cmp = ($__n>>>0)>(1073741807);
 if ($cmp) {
  __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv($this);
  label = 5;
 } else {
  $cmp2 = ($__n>>>0)<(2);
  if ($cmp2) {
   $conv$i = $__n&255;
   $0 = ((($this)) + 8|0);
   $__size_$i = ((($0)) + 3|0);
   HEAP8[$__size_$i>>0] = $conv$i;
   $__p$0 = $this;
  } else {
   label = 5;
  }
 }
 do {
  if ((label|0) == 5) {
   $add$i$i = (($__n) + 4)|0;
   $and$i$i = $add$i$i & -4;
   $cmp$i$i = ($and$i$i>>>0)>(1073741823);
   if ($cmp$i$i) {
    $exception$i$i = (___cxa_allocate_exception(4)|0);
    __ZNSt9bad_allocC2Ev($exception$i$i);
    ___cxa_throw(($exception$i$i|0),(1888|0),(318|0));
    // unreachable;
   } else {
    $mul$i$i = $and$i$i << 2;
    $call$i$i$i = (__Znwj($mul$i$i)|0);
    HEAP32[$this>>2] = $call$i$i$i;
    $or$i = $and$i$i | -2147483648;
    $__cap_$i = ((($this)) + 8|0);
    HEAP32[$__cap_$i>>2] = $or$i;
    $__size_$i12 = ((($this)) + 4|0);
    HEAP32[$__size_$i12>>2] = $__n;
    $__p$0 = $call$i$i$i;
    break;
   }
  }
 } while(0);
 (__ZNSt3__211char_traitsIwE6assignEPwjw($__p$0,$__n,$__c)|0);
 $arrayidx = (($__p$0) + ($__n<<2)|0);
 HEAP32[$ref$tmp>>2] = 0;
 __ZNSt3__211char_traitsIwE6assignERwRKw($arrayidx,$ref$tmp);
 STACKTOP = sp;return;
}
function __ZNSt3__211char_traitsIwE6assignEPwjw($__s,$__n,$__a) {
 $__s = $__s|0;
 $__n = $__n|0;
 $__a = $__a|0;
 var $call = 0, $cmp = 0, $cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $cmp = ($__n|0)==(0);
 if ($cmp) {
  $cond = $__s;
 } else {
  $call = (_wmemset($__s,$__a,$__n)|0);
  $cond = $__s;
 }
 return ($cond|0);
}
function __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $__size_$i = 0, $tobool$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + 8|0);
 $__size_$i = ((($0)) + 3|0);
 $1 = HEAP8[$__size_$i>>0]|0;
 $tobool$i = ($1<<24>>24)<(0);
 if ($tobool$i) {
  $2 = HEAP32[$this>>2]|0;
  __ZdlPv($2);
 }
 return;
}
function __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKwj($this,$__s,$__n) {
 $this = $this|0;
 $__s = $__s|0;
 $__n = $__n|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $__size_$i$i = 0, $__size_$i2$i = 0, $__size_$i2$i26 = 0, $and$i$i = 0, $arrayidx = 0, $cmp = 0, $cond$i = 0, $cond$i18 = 0, $cond$i23 = 0, $conv$i$i = 0, $conv$i$i27 = 0, $phitmp$i = 0, $ref$tmp = 0, $sub = 0;
 var $tobool$i$i = 0, $tobool$i$i25 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $ref$tmp = sp;
 $0 = ((($this)) + 8|0);
 $__size_$i$i = ((($0)) + 3|0);
 $1 = HEAP8[$__size_$i$i>>0]|0;
 $tobool$i$i = ($1<<24>>24)<(0);
 if ($tobool$i$i) {
  $2 = HEAP32[$0>>2]|0;
  $and$i$i = $2 & 2147483647;
  $phitmp$i = (($and$i$i) + -1)|0;
  $cond$i = $phitmp$i;
 } else {
  $cond$i = 1;
 }
 $cmp = ($cond$i>>>0)<($__n>>>0);
 do {
  if ($cmp) {
   if ($tobool$i$i) {
    $__size_$i2$i = ((($this)) + 4|0);
    $5 = HEAP32[$__size_$i2$i>>2]|0;
    $cond$i23 = $5;
   } else {
    $conv$i$i = $1&255;
    $cond$i23 = $conv$i$i;
   }
   $sub = (($__n) - ($cond$i))|0;
   __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE21__grow_by_and_replaceEjjjjjjPKw($this,$cond$i,$sub,$cond$i23,0,$cond$i23,$__n,$__s);
  } else {
   if ($tobool$i$i) {
    $3 = HEAP32[$this>>2]|0;
    $cond$i18 = $3;
   } else {
    $cond$i18 = $this;
   }
   (__ZNSt3__211char_traitsIwE4moveEPwPKwj($cond$i18,$__s,$__n)|0);
   $arrayidx = (($cond$i18) + ($__n<<2)|0);
   HEAP32[$ref$tmp>>2] = 0;
   __ZNSt3__211char_traitsIwE6assignERwRKw($arrayidx,$ref$tmp);
   $4 = HEAP8[$__size_$i$i>>0]|0;
   $tobool$i$i25 = ($4<<24>>24)<(0);
   if ($tobool$i$i25) {
    $__size_$i2$i26 = ((($this)) + 4|0);
    HEAP32[$__size_$i2$i26>>2] = $__n;
    break;
   } else {
    $conv$i$i27 = $__n&255;
    HEAP8[$__size_$i$i>>0] = $conv$i$i27;
    break;
   }
  }
 } while(0);
 STACKTOP = sp;return ($this|0);
}
function __ZNSt3__211char_traitsIwE4moveEPwPKwj($__s1,$__s2,$__n) {
 $__s1 = $__s1|0;
 $__s2 = $__s2|0;
 $__n = $__n|0;
 var $call = 0, $cmp = 0, $cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $cmp = ($__n|0)==(0);
 if ($cmp) {
  $cond = $__s1;
 } else {
  $call = (_wmemmove($__s1,$__s2,$__n)|0);
  $cond = $__s1;
 }
 return ($cond|0);
}
function __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE21__grow_by_and_replaceEjjjjjjPKw($this,$__old_cap,$__delta_cap,$__old_sz,$__n_copy,$__n_del,$__n_add,$__p_new_stuff) {
 $this = $this|0;
 $__old_cap = $__old_cap|0;
 $__delta_cap = $__delta_cap|0;
 $__old_sz = $__old_sz|0;
 $__n_copy = $__n_copy|0;
 $__n_del = $__n_del|0;
 $__n_add = $__n_add|0;
 $__p_new_stuff = $__p_new_stuff|0;
 var $$sroa$speculated = 0, $0 = 0, $1 = 0, $2 = 0, $__size_$i = 0, $__size_$i$i = 0, $add = 0, $add$i$i = 0, $add$ptr = 0, $add$ptr33 = 0, $add$ptr34 = 0, $add$ptr36 = 0, $add$ptr37 = 0, $add15 = 0, $add1544 = 0, $add48 = 0, $and$i$i = 0, $arrayidx = 0, $call$i$i$i = 0, $cmp = 0;
 var $cmp$i = 0, $cmp$i$i = 0, $cmp$i$i$i = 0, $cmp17 = 0, $cmp23 = 0, $cmp30 = 0, $cmp41 = 0, $cmp5 = 0, $cond$i = 0, $exception$i$i = 0, $mul = 0, $mul$i$i = 0, $or$i = 0, $ref$tmp49 = 0, $sub2 = 0, $sub28 = 0, $sub29 = 0, $tobool$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $ref$tmp49 = sp;
 $sub2 = (1073741806 - ($__old_cap))|0;
 $cmp = ($sub2>>>0)<($__delta_cap>>>0);
 if ($cmp) {
  __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv($this);
 }
 $0 = ((($this)) + 8|0);
 $__size_$i$i = ((($0)) + 3|0);
 $1 = HEAP8[$__size_$i$i>>0]|0;
 $tobool$i$i = ($1<<24>>24)<(0);
 if ($tobool$i$i) {
  $2 = HEAP32[$this>>2]|0;
  $cond$i = $2;
 } else {
  $cond$i = $this;
 }
 $cmp5 = ($__old_cap>>>0)<(536870887);
 if ($cmp5) {
  $add = (($__delta_cap) + ($__old_cap))|0;
  $mul = $__old_cap << 1;
  $cmp$i$i$i = ($add>>>0)<($mul>>>0);
  $$sroa$speculated = $cmp$i$i$i ? $mul : $add;
  $cmp$i = ($$sroa$speculated>>>0)<(2);
  $add$i$i = (($$sroa$speculated) + 4)|0;
  $and$i$i = $add$i$i & -4;
  $add15 = $cmp$i ? 2 : $and$i$i;
  $cmp$i$i = ($add15>>>0)>(1073741823);
  if ($cmp$i$i) {
   $exception$i$i = (___cxa_allocate_exception(4)|0);
   __ZNSt9bad_allocC2Ev($exception$i$i);
   ___cxa_throw(($exception$i$i|0),(1888|0),(318|0));
   // unreachable;
  } else {
   $add1544 = $add15;
  }
 } else {
  $add1544 = 1073741807;
 }
 $mul$i$i = $add1544 << 2;
 $call$i$i$i = (__Znwj($mul$i$i)|0);
 $cmp17 = ($__n_copy|0)==(0);
 if (!($cmp17)) {
  (__ZNSt3__211char_traitsIwE4copyEPwPKwj($call$i$i$i,$cond$i,$__n_copy)|0);
 }
 $cmp23 = ($__n_add|0)==(0);
 if (!($cmp23)) {
  $add$ptr = (($call$i$i$i) + ($__n_copy<<2)|0);
  (__ZNSt3__211char_traitsIwE4copyEPwPKwj($add$ptr,$__p_new_stuff,$__n_add)|0);
 }
 $sub28 = (($__old_sz) - ($__n_del))|0;
 $sub29 = (($sub28) - ($__n_copy))|0;
 $cmp30 = ($sub29|0)==(0);
 if (!($cmp30)) {
  $add$ptr36 = (($cond$i) + ($__n_copy<<2)|0);
  $add$ptr37 = (($add$ptr36) + ($__n_del<<2)|0);
  $add$ptr33 = (($call$i$i$i) + ($__n_copy<<2)|0);
  $add$ptr34 = (($add$ptr33) + ($__n_add<<2)|0);
  (__ZNSt3__211char_traitsIwE4copyEPwPKwj($add$ptr34,$add$ptr37,$sub29)|0);
 }
 $cmp41 = ($__old_cap|0)==(1);
 if (!($cmp41)) {
  __ZdlPv($cond$i);
 }
 HEAP32[$this>>2] = $call$i$i$i;
 $or$i = $add1544 | -2147483648;
 HEAP32[$0>>2] = $or$i;
 $add48 = (($sub28) + ($__n_add))|0;
 $__size_$i = ((($this)) + 4|0);
 HEAP32[$__size_$i>>2] = $add48;
 $arrayidx = (($call$i$i$i) + ($add48<<2)|0);
 HEAP32[$ref$tmp49>>2] = 0;
 __ZNSt3__211char_traitsIwE6assignERwRKw($arrayidx,$ref$tmp49);
 STACKTOP = sp;return;
}
function __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7reserveEj($this,$__res_arg) {
 $this = $this|0;
 $__res_arg = $__res_arg|0;
 var $$phitmp$i = 0, $$sroa$speculated = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__new_data$1566574 = 0, $__new_data$157 = 0, $__now_long$0$off053 = 0, $__p$055 = 0, $__size_$i$i = 0, $__size_$i2$i = 0;
 var $__size_$i2$i15 = 0, $__size_$i8 = 0, $add = 0, $add$i$i = 0, $add27 = 0, $add2763 = 0, $add2772 = 0, $add35 = 0, $and$i$i = 0, $and$i$i28 = 0, $call$i$i$i = 0, $call$i$i$i27 = 0, $call$i$i$i27$sink = 0, $cmp = 0, $cmp$i = 0, $cmp$i$i$i = 0, $cmp$i$i31 = 0, $cmp12 = 0, $cmp6 = 0, $cond$i12 = 0;
 var $cond$i48 = 0, $conv$i = 0, $conv$i$i = 0, $conv$i$i17 = 0, $conv$i$i1771 = 0, $exception$i$i = 0, $exception$i$i32 = 0, $mul$i$i = 0, $mul$i$i34 = 0, $or$i = 0, $phitmp$i = 0, $phitmp$i29 = 0, $tobool$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $cmp = ($__res_arg>>>0)>(1073741807);
 if ($cmp) {
  __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv($this);
 }
 $0 = ((($this)) + 8|0);
 $__size_$i$i = ((($0)) + 3|0);
 $1 = HEAP8[$__size_$i$i>>0]|0;
 $tobool$i$i = ($1<<24>>24)<(0);
 if ($tobool$i$i) {
  $2 = HEAP32[$0>>2]|0;
  $and$i$i = $2 & 2147483647;
  $phitmp$i = (($and$i$i) + -1)|0;
  $__size_$i2$i = ((($this)) + 4|0);
  $3 = HEAP32[$__size_$i2$i>>2]|0;
  $cond$i12 = $3;$cond$i48 = $phitmp$i;
 } else {
  $conv$i$i = $1&255;
  $cond$i12 = $conv$i$i;$cond$i48 = 1;
 }
 $cmp$i$i$i = ($cond$i12>>>0)>($__res_arg>>>0);
 $$sroa$speculated = $cmp$i$i$i ? $cond$i12 : $__res_arg;
 $cmp$i = ($$sroa$speculated>>>0)<(2);
 $add$i$i = (($$sroa$speculated) + 4)|0;
 $and$i$i28 = $add$i$i & -4;
 $phitmp$i29 = (($and$i$i28) + -1)|0;
 $$phitmp$i = $cmp$i ? 1 : $phitmp$i29;
 $cmp6 = ($$phitmp$i|0)==($cond$i48|0);
 L8: do {
  if (!($cmp6)) {
   do {
    if ($cmp$i) {
     $10 = HEAP32[$this>>2]|0;
     if ($tobool$i$i) {
      $__new_data$157 = $this;$__now_long$0$off053 = 0;$__p$055 = $10;
      label = 21;
     } else {
      $conv$i$i1771 = $1&255;
      $add2772 = (($conv$i$i1771) + 1)|0;
      (__ZNSt3__211char_traitsIwE4copyEPwPKwj($this,$10,$add2772)|0);
      __ZdlPv($10);
      label = 23;
     }
    } else {
     $cmp12 = ($$phitmp$i>>>0)>($cond$i48>>>0);
     $add = (($$phitmp$i) + 1)|0;
     $cmp$i$i31 = ($add>>>0)>(1073741823);
     do {
      if ($cmp12) {
       if ($cmp$i$i31) {
        $exception$i$i32 = (___cxa_allocate_exception(4)|0);
        __ZNSt9bad_allocC2Ev($exception$i$i32);
        ___cxa_throw(($exception$i$i32|0),(1888|0),(318|0));
        // unreachable;
       } else {
        $mul$i$i34 = $add << 2;
        $call$i$i$i = (__Znwj($mul$i$i34)|0);
        $call$i$i$i27$sink = $call$i$i$i;
        break;
       }
      } else {
       if ($cmp$i$i31) {
        $exception$i$i = (___cxa_allocate_exception(4)|0);
        __ZNSt9bad_allocC2Ev($exception$i$i);
        __THREW__ = 0;
        invoke_viii(341,($exception$i$i|0),(1888|0),(318|0));
        $4 = __THREW__; __THREW__ = 0;
       } else {
        $mul$i$i = $add << 2;
        __THREW__ = 0;
        $call$i$i$i27 = (invoke_ii(538,($mul$i$i|0))|0);
        $5 = __THREW__; __THREW__ = 0;
        $6 = $5&1;
        if (!($6)) {
         $call$i$i$i27$sink = $call$i$i$i27;
         break;
        }
       }
       $7 = ___cxa_find_matching_catch_3(0|0)|0;
       $8 = tempRet0;
       (___cxa_begin_catch(($7|0))|0);
       ___cxa_end_catch();
       break L8;
      }
     } while(0);
     if ($tobool$i$i) {
      $9 = HEAP32[$this>>2]|0;
      $__new_data$157 = $call$i$i$i27$sink;$__now_long$0$off053 = 1;$__p$055 = $9;
      label = 21;
      break;
     } else {
      $conv$i$i17 = $1&255;
      $add27 = (($conv$i$i17) + 1)|0;
      (__ZNSt3__211char_traitsIwE4copyEPwPKwj($call$i$i$i27$sink,$this,$add27)|0);
      $__new_data$1566574 = $call$i$i$i27$sink;
      label = 22;
      break;
     }
    }
   } while(0);
   if ((label|0) == 21) {
    $__size_$i2$i15 = ((($this)) + 4|0);
    $11 = HEAP32[$__size_$i2$i15>>2]|0;
    $add2763 = (($11) + 1)|0;
    (__ZNSt3__211char_traitsIwE4copyEPwPKwj($__new_data$157,$__p$055,$add2763)|0);
    __ZdlPv($__p$055);
    if ($__now_long$0$off053) {
     $__new_data$1566574 = $__new_data$157;
     label = 22;
    } else {
     label = 23;
    }
   }
   if ((label|0) == 22) {
    $add35 = (($$phitmp$i) + 1)|0;
    $or$i = $add35 | -2147483648;
    HEAP32[$0>>2] = $or$i;
    $__size_$i8 = ((($this)) + 4|0);
    HEAP32[$__size_$i8>>2] = $cond$i12;
    HEAP32[$this>>2] = $__new_data$1566574;
    break;
   }
   else if ((label|0) == 23) {
    $conv$i = $cond$i12&255;
    HEAP8[$__size_$i$i>>0] = $conv$i;
    break;
   }
  }
 } while(0);
 return;
}
function __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw($this,$__s) {
 $this = $this|0;
 $__s = $__s|0;
 var $call = 0, $call2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = (__ZNSt3__211char_traitsIwE6lengthEPKw($__s)|0);
 $call2 = (__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKwj($this,$__s,$call)|0);
 return ($call2|0);
}
function __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE9__grow_byEjjjjjj($this,$__old_cap,$__delta_cap,$__old_sz,$__n_copy,$__n_del,$__n_add) {
 $this = $this|0;
 $__old_cap = $__old_cap|0;
 $__delta_cap = $__delta_cap|0;
 $__old_sz = $__old_sz|0;
 $__n_copy = $__n_copy|0;
 $__n_del = $__n_del|0;
 $__n_add = $__n_add|0;
 var $$sroa$speculated = 0, $0 = 0, $1 = 0, $2 = 0, $__size_$i$i = 0, $add = 0, $add$i$i = 0, $add$ptr = 0, $add$ptr27 = 0, $add$ptr29 = 0, $add$ptr30 = 0, $add14 = 0, $add1434 = 0, $and$i$i = 0, $call$i$i$i = 0, $cmp = 0, $cmp$i = 0, $cmp$i$i = 0, $cmp$i$i$i = 0, $cmp16 = 0;
 var $cmp24 = 0, $cmp34 = 0, $cmp4 = 0, $cond$i = 0, $exception$i$i = 0, $mul = 0, $mul$i$i = 0, $or$i = 0, $sub = 0, $sub22 = 0, $sub23 = 0, $tobool$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $sub = (1073741807 - ($__old_cap))|0;
 $cmp = ($sub>>>0)<($__delta_cap>>>0);
 if ($cmp) {
  __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv($this);
 }
 $0 = ((($this)) + 8|0);
 $__size_$i$i = ((($0)) + 3|0);
 $1 = HEAP8[$__size_$i$i>>0]|0;
 $tobool$i$i = ($1<<24>>24)<(0);
 if ($tobool$i$i) {
  $2 = HEAP32[$this>>2]|0;
  $cond$i = $2;
 } else {
  $cond$i = $this;
 }
 $cmp4 = ($__old_cap>>>0)<(536870887);
 if ($cmp4) {
  $add = (($__delta_cap) + ($__old_cap))|0;
  $mul = $__old_cap << 1;
  $cmp$i$i$i = ($add>>>0)<($mul>>>0);
  $$sroa$speculated = $cmp$i$i$i ? $mul : $add;
  $cmp$i = ($$sroa$speculated>>>0)<(2);
  $add$i$i = (($$sroa$speculated) + 4)|0;
  $and$i$i = $add$i$i & -4;
  $add14 = $cmp$i ? 2 : $and$i$i;
  $cmp$i$i = ($add14>>>0)>(1073741823);
  if ($cmp$i$i) {
   $exception$i$i = (___cxa_allocate_exception(4)|0);
   __ZNSt9bad_allocC2Ev($exception$i$i);
   ___cxa_throw(($exception$i$i|0),(1888|0),(318|0));
   // unreachable;
  } else {
   $add1434 = $add14;
  }
 } else {
  $add1434 = 1073741807;
 }
 $mul$i$i = $add1434 << 2;
 $call$i$i$i = (__Znwj($mul$i$i)|0);
 $cmp16 = ($__n_copy|0)==(0);
 if (!($cmp16)) {
  (__ZNSt3__211char_traitsIwE4copyEPwPKwj($call$i$i$i,$cond$i,$__n_copy)|0);
 }
 $sub22 = (($__old_sz) - ($__n_del))|0;
 $sub23 = (($sub22) - ($__n_copy))|0;
 $cmp24 = ($sub23|0)==(0);
 if (!($cmp24)) {
  $add$ptr29 = (($cond$i) + ($__n_copy<<2)|0);
  $add$ptr30 = (($add$ptr29) + ($__n_del<<2)|0);
  $add$ptr = (($call$i$i$i) + ($__n_copy<<2)|0);
  $add$ptr27 = (($add$ptr) + ($__n_add<<2)|0);
  (__ZNSt3__211char_traitsIwE4copyEPwPKwj($add$ptr27,$add$ptr30,$sub23)|0);
 }
 $cmp34 = ($__old_cap|0)==(1);
 if (!($cmp34)) {
  __ZdlPv($cond$i);
 }
 HEAP32[$this>>2] = $call$i$i$i;
 $or$i = $add1434 | -2147483648;
 HEAP32[$0>>2] = $or$i;
 return;
}
function __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE9push_backEw($this,$__c) {
 $this = $this|0;
 $__c = $__c|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $__c$addr = 0, $__cap$0 = 0, $__p$0 = 0, $__size_$i = 0, $__size_$i14 = 0, $__size_$i19 = 0, $__sz$0 = 0, $add = 0, $add20 = 0, $add21 = 0, $add22 = 0, $and$i = 0, $call12$pn = 0, $cmp = 0;
 var $conv$i = 0, $conv$i15 = 0, $incdec$ptr = 0, $ref$tmp = 0, $sub = 0, $tobool$i = 0, $tobool$i18 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $__c$addr = sp + 4|0;
 $ref$tmp = sp;
 HEAP32[$__c$addr>>2] = $__c;
 $0 = ((($this)) + 8|0);
 $__size_$i = ((($0)) + 3|0);
 $1 = HEAP8[$__size_$i>>0]|0;
 $tobool$i = ($1<<24>>24)<(0);
 if ($tobool$i) {
  $2 = HEAP32[$0>>2]|0;
  $and$i = $2 & 2147483647;
  $sub = (($and$i) + -1)|0;
  $__size_$i19 = ((($this)) + 4|0);
  $3 = HEAP32[$__size_$i19>>2]|0;
  $__cap$0 = $sub;$__sz$0 = $3;
 } else {
  $conv$i = $1&255;
  $__cap$0 = 1;$__sz$0 = $conv$i;
 }
 $cmp = ($__sz$0|0)==($__cap$0|0);
 if ($cmp) {
  __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE9__grow_byEjjjjjj($this,$__cap$0,1,$__cap$0,$__cap$0,0,0);
  $4 = HEAP8[$__size_$i>>0]|0;
  $tobool$i18 = ($4<<24>>24)<(0);
  $add20 = (($__cap$0) + 1)|0;
  if ($tobool$i18) {
   $add21 = $add20;
   label = 8;
  } else {
   $add22 = $add20;
   label = 7;
  }
 } else {
  $add = (($__sz$0) + 1)|0;
  if ($tobool$i) {
   $add21 = $add;
   label = 8;
  } else {
   $add22 = $add;
   label = 7;
  }
 }
 if ((label|0) == 7) {
  $conv$i15 = $add22&255;
  HEAP8[$__size_$i>>0] = $conv$i15;
  $call12$pn = $this;
 }
 else if ((label|0) == 8) {
  $5 = HEAP32[$this>>2]|0;
  $__size_$i14 = ((($this)) + 4|0);
  HEAP32[$__size_$i14>>2] = $add21;
  $call12$pn = $5;
 }
 $__p$0 = (($call12$pn) + ($__sz$0<<2)|0);
 __ZNSt3__211char_traitsIwE6assignERwRKw($__p$0,$__c$addr);
 $incdec$ptr = ((($__p$0)) + 4|0);
 HEAP32[$ref$tmp>>2] = 0;
 __ZNSt3__211char_traitsIwE6assignERwRKw($incdec$ptr,$ref$tmp);
 STACKTOP = sp;return;
}
function __ZNSt3__214error_categoryD2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNKSt3__214error_category23default_error_conditionEi($agg$result,$this,$ev) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $ev = $ev|0;
 var $__cat_$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$agg$result>>2] = $ev;
 $__cat_$i = ((($agg$result)) + 4|0);
 HEAP32[$__cat_$i>>2] = $this;
 return;
}
function __ZNKSt3__214error_category10equivalentEiRKNS_15error_conditionE($this,$code,$condition) {
 $this = $this|0;
 $code = $code|0;
 $condition = $condition|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $__cat_$i$i = 0, $__cat_$i4$i = 0, $cmp$i = 0, $cmp$i$i = 0, $ref$tmp = 0, $vfn = 0, $vtable = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $ref$tmp = sp;
 $vtable = HEAP32[$this>>2]|0;
 $vfn = ((($vtable)) + 12|0);
 $0 = HEAP32[$vfn>>2]|0;
 FUNCTION_TABLE_viii[$0 & 1023]($ref$tmp,$this,$code);
 $__cat_$i$i = ((($ref$tmp)) + 4|0);
 $1 = HEAP32[$__cat_$i$i>>2]|0;
 $__cat_$i4$i = ((($condition)) + 4|0);
 $2 = HEAP32[$__cat_$i4$i>>2]|0;
 $cmp$i$i = ($1|0)==($2|0);
 if ($cmp$i$i) {
  $3 = HEAP32[$ref$tmp>>2]|0;
  $4 = HEAP32[$condition>>2]|0;
  $cmp$i = ($3|0)==($4|0);
  $5 = $cmp$i;
 } else {
  $5 = 0;
 }
 STACKTOP = sp;return ($5|0);
}
function __ZNKSt3__214error_category10equivalentERKNS_10error_codeEi($this,$code,$condition) {
 $this = $this|0;
 $code = $code|0;
 $condition = $condition|0;
 var $0 = 0, $1 = 0, $2 = 0, $__cat_$i = 0, $cmp = 0, $cmp$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $__cat_$i = ((($code)) + 4|0);
 $0 = HEAP32[$__cat_$i>>2]|0;
 $cmp$i = ($0|0)==($this|0);
 $1 = HEAP32[$code>>2]|0;
 $cmp = ($1|0)==($condition|0);
 $2 = $cmp$i & $cmp;
 return ($2|0);
}
function __ZNSt3__212system_errorD2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt13runtime_errorD2Ev($this);
 return;
}
function __ZNSt3__212system_errorD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__212system_errorD2Ev($this);
 __ZdlPv($this);
 return;
}
function __ZNKSt3__212__do_message7messageEi($agg$result,$this,$ev) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $ev = $ev|0;
 var $call = 0, $call$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = (_strerror($ev)|0);
 ;HEAP32[$agg$result>>2]=0|0;HEAP32[$agg$result+4>>2]=0|0;HEAP32[$agg$result+8>>2]=0|0;
 $call$i = (__ZNSt3__211char_traitsIcE6lengthEPKc($call)|0);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($agg$result,$call,$call$i);
 return;
}
function __ZNKSt3__210error_code7messageEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $__cat_ = 0, $vfn = 0, $vtable = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $__cat_ = ((($this)) + 4|0);
 $0 = HEAP32[$__cat_>>2]|0;
 $vtable = HEAP32[$0>>2]|0;
 $vfn = ((($vtable)) + 24|0);
 $1 = HEAP32[$vfn>>2]|0;
 $2 = HEAP32[$this>>2]|0;
 FUNCTION_TABLE_viii[$1 & 1023]($agg$result,$0,$2);
 return;
}
function __ZNSt3__212system_error6__initERKNS_10error_codeENS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE($agg$result,$ec,$what_arg) {
 $agg$result = $agg$result|0;
 $ec = $ec|0;
 $what_arg = $what_arg|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__i$0$i$i = 0, $__size_$i$i$i = 0, $__size_$i$i$i$i$i = 0, $__size_$i3$i$i = 0, $__size_$i3$i$i$i = 0, $arrayidx$i$i = 0, $cmp$i = 0, $cmp$i3 = 0, $cond$i$i = 0, $cond$i$i$i = 0;
 var $cond$i$i$i$i = 0, $conv$i$i$i = 0, $conv$i$i$i$i = 0, $exitcond$i$i = 0, $inc$i$i = 0, $ref$tmp = 0, $tobool$i$i$i = 0, $tobool$i$i$i$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $ref$tmp = sp;
 $0 = HEAP32[$ec>>2]|0;
 $cmp$i = ($0|0)==(0);
 do {
  if (!($cmp$i)) {
   $__size_$i$i$i = ((($what_arg)) + 11|0);
   $1 = HEAP8[$__size_$i$i$i>>0]|0;
   $tobool$i$i$i = ($1<<24>>24)<(0);
   if ($tobool$i$i$i) {
    $__size_$i3$i$i = ((($what_arg)) + 4|0);
    $2 = HEAP32[$__size_$i3$i$i>>2]|0;
    $cond$i$i = $2;
   } else {
    $conv$i$i$i = $1&255;
    $cond$i$i = $conv$i$i$i;
   }
   $cmp$i3 = ($cond$i$i|0)==(0);
   if (!($cmp$i3)) {
    (__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKc($what_arg,17987)|0);
   }
   __ZNKSt3__210error_code7messageEv($ref$tmp,$ec);
   $__size_$i$i$i$i$i = ((($ref$tmp)) + 11|0);
   $3 = HEAP8[$__size_$i$i$i$i$i>>0]|0;
   $tobool$i$i$i$i$i = ($3<<24>>24)<(0);
   $4 = HEAP32[$ref$tmp>>2]|0;
   $cond$i$i$i$i = $tobool$i$i$i$i$i ? $4 : $ref$tmp;
   $__size_$i3$i$i$i = ((($ref$tmp)) + 4|0);
   $5 = HEAP32[$__size_$i3$i$i$i>>2]|0;
   $conv$i$i$i$i = $3&255;
   $cond$i$i$i = $tobool$i$i$i$i$i ? $5 : $conv$i$i$i$i;
   __THREW__ = 0;
   (invoke_iiii(539,($what_arg|0),($cond$i$i$i$i|0),($cond$i$i$i|0))|0);
   $6 = __THREW__; __THREW__ = 0;
   $7 = $6&1;
   if ($7) {
    $8 = ___cxa_find_matching_catch_2()|0;
    $9 = tempRet0;
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($ref$tmp);
    ___resumeException($8|0);
    // unreachable;
   } else {
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($ref$tmp);
    break;
   }
  }
 } while(0);
 ;HEAP32[$agg$result>>2]=HEAP32[$what_arg>>2]|0;HEAP32[$agg$result+4>>2]=HEAP32[$what_arg+4>>2]|0;HEAP32[$agg$result+8>>2]=HEAP32[$what_arg+8>>2]|0;
 $__i$0$i$i = 0;
 while(1) {
  $exitcond$i$i = ($__i$0$i$i|0)==(3);
  if ($exitcond$i$i) {
   break;
  }
  $arrayidx$i$i = (($what_arg) + ($__i$0$i$i<<2)|0);
  HEAP32[$arrayidx$i$i>>2] = 0;
  $inc$i$i = (($__i$0$i$i) + 1)|0;
  $__i$0$i$i = $inc$i$i;
 }
 STACKTOP = sp;return;
}
function __ZNSt3__212system_errorC2ENS_10error_codeEPKc($this,$ec,$what_arg) {
 $this = $this|0;
 $ec = $ec|0;
 $what_arg = $what_arg|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__ec_ = 0, $agg$tmp = 0;
 var $call$i = 0, $ehselector$slot$0 = 0, $exn$slot$0 = 0, $ref$tmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $ref$tmp = sp + 12|0;
 $agg$tmp = sp;
 ;HEAP32[$agg$tmp>>2]=0|0;HEAP32[$agg$tmp+4>>2]=0|0;HEAP32[$agg$tmp+8>>2]=0|0;
 $call$i = (__ZNSt3__211char_traitsIcE6lengthEPKc($what_arg)|0);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($agg$tmp,$what_arg,$call$i);
 __THREW__ = 0;
 invoke_viii(540,($ref$tmp|0),($ec|0),($agg$tmp|0));
 $0 = __THREW__; __THREW__ = 0;
 $1 = $0&1;
 do {
  if ($1) {
   $14 = ___cxa_find_matching_catch_2()|0;
   $15 = tempRet0;
   $ehselector$slot$0 = $15;$exn$slot$0 = $14;
  } else {
   __THREW__ = 0;
   invoke_vii(541,($this|0),($ref$tmp|0));
   $2 = __THREW__; __THREW__ = 0;
   $3 = $2&1;
   if ($3) {
    $16 = ___cxa_find_matching_catch_2()|0;
    $17 = tempRet0;
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($ref$tmp);
    $ehselector$slot$0 = $17;$exn$slot$0 = $16;
    break;
   } else {
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($ref$tmp);
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($agg$tmp);
    HEAP32[$this>>2] = (9520);
    $__ec_ = ((($this)) + 8|0);
    $4 = $ec;
    $5 = $4;
    $6 = HEAP32[$5>>2]|0;
    $7 = (($4) + 4)|0;
    $8 = $7;
    $9 = HEAP32[$8>>2]|0;
    $10 = $__ec_;
    $11 = $10;
    HEAP32[$11>>2] = $6;
    $12 = (($10) + 4)|0;
    $13 = $12;
    HEAP32[$13>>2] = $9;
    STACKTOP = sp;return;
   }
  }
 } while(0);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($agg$tmp);
 ___resumeException($exn$slot$0|0);
 // unreachable;
}
function __ZL25default_terminate_handlerv() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $__type_name$i = 0, $add$ptr = 0, $call = 0, $call10 = 0, $call14 = 0, $cond = 0, $exception_class = 0, $primaryException = 0, $thrown_object = 0, $tobool = 0, $tobool1 = 0, $vararg_buffer = 0, $vararg_buffer10 = 0, $vararg_buffer3 = 0, $vararg_buffer7 = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr6 = 0;
 var $vfn = 0, $vfn13 = 0, $vtable = 0, $vtable12 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $vararg_buffer10 = sp + 32|0;
 $vararg_buffer7 = sp + 24|0;
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer = sp;
 $thrown_object = sp + 36|0;
 $call = (___cxa_get_globals_fast()|0);
 $tobool = ($call|0)==(0|0);
 if (!($tobool)) {
  $0 = HEAP32[$call>>2]|0;
  $tobool1 = ($0|0)==(0|0);
  if (!($tobool1)) {
   $add$ptr = ((($0)) + 80|0);
   $exception_class = ((($0)) + 48|0);
   $1 = $exception_class;
   $2 = $1;
   $3 = HEAP32[$2>>2]|0;
   $4 = (($1) + 4)|0;
   $5 = $4;
   $6 = HEAP32[$5>>2]|0;
   $7 = $3 & -256;
   $8 = ($7|0)==(1126902528);
   $9 = ($6|0)==(1129074247);
   $10 = $8 & $9;
   if (!($10)) {
    $21 = HEAP32[2384]|0;
    HEAP32[$vararg_buffer7>>2] = $21;
    _abort_message(18076,$vararg_buffer7);
    // unreachable;
   }
   $11 = ($3|0)==(1126902529);
   $12 = ($6|0)==(1129074247);
   $13 = $11 & $12;
   if ($13) {
    $primaryException = ((($0)) + 44|0);
    $14 = HEAP32[$primaryException>>2]|0;
    $cond = $14;
   } else {
    $cond = $add$ptr;
   }
   HEAP32[$thrown_object>>2] = $cond;
   $15 = HEAP32[$0>>2]|0;
   $__type_name$i = ((($15)) + 4|0);
   $16 = HEAP32[$__type_name$i>>2]|0;
   $vtable = HEAP32[456]|0;
   $vfn = ((($vtable)) + 16|0);
   $17 = HEAP32[$vfn>>2]|0;
   $call10 = (FUNCTION_TABLE_iiii[$17 & 1023](1824,$15,$thrown_object)|0);
   $18 = HEAP32[2384]|0;
   if ($call10) {
    $19 = HEAP32[$thrown_object>>2]|0;
    $vtable12 = HEAP32[$19>>2]|0;
    $vfn13 = ((($vtable12)) + 8|0);
    $20 = HEAP32[$vfn13>>2]|0;
    $call14 = (FUNCTION_TABLE_ii[$20 & 1023]($19)|0);
    HEAP32[$vararg_buffer>>2] = $18;
    $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
    HEAP32[$vararg_ptr1>>2] = $16;
    $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
    HEAP32[$vararg_ptr2>>2] = $call14;
    _abort_message(17990,$vararg_buffer);
    // unreachable;
   } else {
    HEAP32[$vararg_buffer3>>2] = $18;
    $vararg_ptr6 = ((($vararg_buffer3)) + 4|0);
    HEAP32[$vararg_ptr6>>2] = $16;
    _abort_message(18035,$vararg_buffer3);
    // unreachable;
   }
  }
 }
 _abort_message(18114,$vararg_buffer10);
 // unreachable;
}
function ___cxa_get_globals_fast() {
 var $0 = 0, $call = 0, $call1 = 0, $cmp = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 $call = (_pthread_once((22012|0),(542|0))|0);
 $cmp = ($call|0)==(0);
 if ($cmp) {
  $0 = HEAP32[5504]|0;
  $call1 = (_pthread_getspecific(($0|0))|0);
  STACKTOP = sp;return ($call1|0);
 } else {
  _abort_message(18265,$vararg_buffer);
  // unreachable;
 }
 return (0)|0;
}
function _abort_message($format,$varargs) {
 $format = $format|0;
 $varargs = $varargs|0;
 var $0 = 0, $list = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $list = sp;
 HEAP32[$list>>2] = $varargs;
 $0 = HEAP32[657]|0;
 (_vfprintf($0,$format,$list)|0);
 (_fputc(10,$0)|0);
 _abort();
 // unreachable;
}
function __ZN10__cxxabiv116__shim_type_infoD2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZN10__cxxabiv117__class_type_infoD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN10__cxxabiv116__shim_type_infoD2Ev($this);
 __ZdlPv($this);
 return;
}
function __ZNK10__cxxabiv116__shim_type_info5noop1Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNK10__cxxabiv116__shim_type_info5noop2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNK10__cxxabiv117__class_type_info9can_catchEPKNS_16__shim_type_infoERPv($this,$thrown_type,$adjustedPtr) {
 $this = $this|0;
 $thrown_type = $thrown_type|0;
 $adjustedPtr = $adjustedPtr|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $call = 0, $cmp = 0, $cmp4 = 0, $dst_ptr_leading_to_static_ptr = 0, $info = 0, $number_of_dst_type = 0, $path_dst_ptr_to_static_ptr = 0, $retval$0 = 0, $retval$2 = 0, $src2dst_offset = 0, $static_type = 0, $vfn = 0, $vtable = 0;
 var dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $info = sp;
 $call = (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($this,$thrown_type,0)|0);
 if ($call) {
  $retval$2 = 1;
 } else {
  $0 = ($thrown_type|0)==(0|0);
  if ($0) {
   $retval$2 = 0;
  } else {
   $1 = (___dynamic_cast($thrown_type,1848,1832,0)|0);
   $cmp = ($1|0)==(0|0);
   if ($cmp) {
    $retval$2 = 0;
   } else {
    $2 = ((($info)) + 4|0);
    dest=$2; stop=dest+52|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
    HEAP32[$info>>2] = $1;
    $static_type = ((($info)) + 8|0);
    HEAP32[$static_type>>2] = $this;
    $src2dst_offset = ((($info)) + 12|0);
    HEAP32[$src2dst_offset>>2] = -1;
    $number_of_dst_type = ((($info)) + 48|0);
    HEAP32[$number_of_dst_type>>2] = 1;
    $vtable = HEAP32[$1>>2]|0;
    $vfn = ((($vtable)) + 28|0);
    $3 = HEAP32[$vfn>>2]|0;
    $4 = HEAP32[$adjustedPtr>>2]|0;
    FUNCTION_TABLE_viiii[$3 & 511]($1,$info,$4,1);
    $path_dst_ptr_to_static_ptr = ((($info)) + 24|0);
    $5 = HEAP32[$path_dst_ptr_to_static_ptr>>2]|0;
    $cmp4 = ($5|0)==(1);
    if ($cmp4) {
     $dst_ptr_leading_to_static_ptr = ((($info)) + 16|0);
     $6 = HEAP32[$dst_ptr_leading_to_static_ptr>>2]|0;
     HEAP32[$adjustedPtr>>2] = $6;
     $retval$0 = 1;
    } else {
     $retval$0 = 0;
    }
    $retval$2 = $retval$0;
   }
  }
 }
 STACKTOP = sp;return ($retval$2|0);
}
function __ZNK10__cxxabiv117__class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($this,$info,$dst_ptr,$current_ptr,$path_below,$use_strcmp) {
 $this = $this|0;
 $info = $info|0;
 $dst_ptr = $dst_ptr|0;
 $current_ptr = $current_ptr|0;
 $path_below = $path_below|0;
 $use_strcmp = $use_strcmp|0;
 var $0 = 0, $call = 0, $static_type = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $static_type = ((($info)) + 8|0);
 $0 = HEAP32[$static_type>>2]|0;
 $call = (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($this,$0,$use_strcmp)|0);
 if ($call) {
  __ZNK10__cxxabiv117__class_type_info29process_static_type_above_dstEPNS_19__dynamic_cast_infoEPKvS4_i(0,$info,$dst_ptr,$current_ptr,$path_below);
 }
 return;
}
function __ZNK10__cxxabiv117__class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($this,$info,$current_ptr,$path_below,$use_strcmp) {
 $this = $this|0;
 $info = $info|0;
 $current_ptr = $current_ptr|0;
 $path_below = $path_below|0;
 $use_strcmp = $use_strcmp|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $add = 0, $call = 0, $call3 = 0, $cmp = 0, $cmp12 = 0, $cmp13 = 0, $cmp5 = 0, $cmp7 = 0, $dst_ptr_leading_to_static_ptr = 0, $dst_ptr_not_leading_to_static_ptr = 0, $is_dst_type_derived_from_static_type = 0, $number_to_dst_ptr = 0, $number_to_static_ptr = 0;
 var $path_dst_ptr_to_static_ptr = 0, $path_dynamic_ptr_to_dst_ptr = 0, $search_done = 0, $static_type = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $static_type = ((($info)) + 8|0);
 $0 = HEAP32[$static_type>>2]|0;
 $call = (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($this,$0,$use_strcmp)|0);
 do {
  if ($call) {
   __ZNK10__cxxabiv117__class_type_info29process_static_type_below_dstEPNS_19__dynamic_cast_infoEPKvi(0,$info,$current_ptr,$path_below);
  } else {
   $1 = HEAP32[$info>>2]|0;
   $call3 = (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($this,$1,$use_strcmp)|0);
   if ($call3) {
    $dst_ptr_leading_to_static_ptr = ((($info)) + 16|0);
    $2 = HEAP32[$dst_ptr_leading_to_static_ptr>>2]|0;
    $cmp = ($2|0)==($current_ptr|0);
    $path_dynamic_ptr_to_dst_ptr = ((($info)) + 32|0);
    if (!($cmp)) {
     $dst_ptr_not_leading_to_static_ptr = ((($info)) + 20|0);
     $3 = HEAP32[$dst_ptr_not_leading_to_static_ptr>>2]|0;
     $cmp5 = ($3|0)==($current_ptr|0);
     if (!($cmp5)) {
      HEAP32[$path_dynamic_ptr_to_dst_ptr>>2] = $path_below;
      HEAP32[$dst_ptr_not_leading_to_static_ptr>>2] = $current_ptr;
      $number_to_dst_ptr = ((($info)) + 40|0);
      $4 = HEAP32[$number_to_dst_ptr>>2]|0;
      $add = (($4) + 1)|0;
      HEAP32[$number_to_dst_ptr>>2] = $add;
      $number_to_static_ptr = ((($info)) + 36|0);
      $5 = HEAP32[$number_to_static_ptr>>2]|0;
      $cmp12 = ($5|0)==(1);
      if ($cmp12) {
       $path_dst_ptr_to_static_ptr = ((($info)) + 24|0);
       $6 = HEAP32[$path_dst_ptr_to_static_ptr>>2]|0;
       $cmp13 = ($6|0)==(2);
       if ($cmp13) {
        $search_done = ((($info)) + 54|0);
        HEAP8[$search_done>>0] = 1;
       }
      }
      $is_dst_type_derived_from_static_type = ((($info)) + 44|0);
      HEAP32[$is_dst_type_derived_from_static_type>>2] = 4;
      break;
     }
    }
    $cmp7 = ($path_below|0)==(1);
    if ($cmp7) {
     HEAP32[$path_dynamic_ptr_to_dst_ptr>>2] = 1;
    }
   }
  }
 } while(0);
 return;
}
function __ZNK10__cxxabiv117__class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($this,$info,$adjustedPtr,$path_below) {
 $this = $this|0;
 $info = $info|0;
 $adjustedPtr = $adjustedPtr|0;
 $path_below = $path_below|0;
 var $0 = 0, $call = 0, $static_type = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $static_type = ((($info)) + 8|0);
 $0 = HEAP32[$static_type>>2]|0;
 $call = (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($this,$0,0)|0);
 if ($call) {
  __ZNK10__cxxabiv117__class_type_info24process_found_base_classEPNS_19__dynamic_cast_infoEPvi(0,$info,$adjustedPtr,$path_below);
 }
 return;
}
function __ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($x,$y,$0) {
 $x = $x|0;
 $y = $y|0;
 $0 = $0|0;
 var $cmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $cmp = ($x|0)==($y|0);
 return ($cmp|0);
}
function __ZNK10__cxxabiv117__class_type_info24process_found_base_classEPNS_19__dynamic_cast_infoEPvi($this,$info,$adjustedPtr,$path_below) {
 $this = $this|0;
 $info = $info|0;
 $adjustedPtr = $adjustedPtr|0;
 $path_below = $path_below|0;
 var $0 = 0, $1 = 0, $2 = 0, $add = 0, $cmp = 0, $cmp4 = 0, $cmp7 = 0, $dst_ptr_leading_to_static_ptr = 0, $number_to_static_ptr = 0, $path_dst_ptr_to_static_ptr = 0, $search_done = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $dst_ptr_leading_to_static_ptr = ((($info)) + 16|0);
 $0 = HEAP32[$dst_ptr_leading_to_static_ptr>>2]|0;
 $cmp = ($0|0)==(0|0);
 $number_to_static_ptr = ((($info)) + 36|0);
 $path_dst_ptr_to_static_ptr = ((($info)) + 24|0);
 do {
  if ($cmp) {
   HEAP32[$dst_ptr_leading_to_static_ptr>>2] = $adjustedPtr;
   HEAP32[$path_dst_ptr_to_static_ptr>>2] = $path_below;
   HEAP32[$number_to_static_ptr>>2] = 1;
  } else {
   $cmp4 = ($0|0)==($adjustedPtr|0);
   if (!($cmp4)) {
    $2 = HEAP32[$number_to_static_ptr>>2]|0;
    $add = (($2) + 1)|0;
    HEAP32[$number_to_static_ptr>>2] = $add;
    HEAP32[$path_dst_ptr_to_static_ptr>>2] = 2;
    $search_done = ((($info)) + 54|0);
    HEAP8[$search_done>>0] = 1;
    break;
   }
   $1 = HEAP32[$path_dst_ptr_to_static_ptr>>2]|0;
   $cmp7 = ($1|0)==(2);
   if ($cmp7) {
    HEAP32[$path_dst_ptr_to_static_ptr>>2] = $path_below;
   }
  }
 } while(0);
 return;
}
function __ZNK10__cxxabiv117__class_type_info29process_static_type_below_dstEPNS_19__dynamic_cast_infoEPKvi($this,$info,$current_ptr,$path_below) {
 $this = $this|0;
 $info = $info|0;
 $current_ptr = $current_ptr|0;
 $path_below = $path_below|0;
 var $0 = 0, $1 = 0, $cmp = 0, $cmp2 = 0, $path_dynamic_ptr_to_static_ptr = 0, $static_ptr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $static_ptr = ((($info)) + 4|0);
 $0 = HEAP32[$static_ptr>>2]|0;
 $cmp = ($0|0)==($current_ptr|0);
 if ($cmp) {
  $path_dynamic_ptr_to_static_ptr = ((($info)) + 28|0);
  $1 = HEAP32[$path_dynamic_ptr_to_static_ptr>>2]|0;
  $cmp2 = ($1|0)==(1);
  if (!($cmp2)) {
   HEAP32[$path_dynamic_ptr_to_static_ptr>>2] = $path_below;
  }
 }
 return;
}
function __ZNK10__cxxabiv117__class_type_info29process_static_type_above_dstEPNS_19__dynamic_cast_infoEPKvS4_i($this,$info,$dst_ptr,$current_ptr,$path_below) {
 $this = $this|0;
 $info = $info|0;
 $dst_ptr = $dst_ptr|0;
 $current_ptr = $current_ptr|0;
 $path_below = $path_below|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $add = 0, $cmp = 0, $cmp10 = 0, $cmp13 = 0, $cmp18 = 0, $cmp2 = 0, $cmp21 = 0, $cmp5 = 0, $cmp7 = 0, $dst_ptr_leading_to_static_ptr = 0, $found_any_static_type = 0, $found_our_static_ptr = 0, $number_of_dst_type = 0;
 var $number_to_static_ptr = 0, $or$cond = 0, $or$cond19 = 0, $path_dst_ptr_to_static_ptr = 0, $search_done = 0, $static_ptr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $found_any_static_type = ((($info)) + 53|0);
 HEAP8[$found_any_static_type>>0] = 1;
 $static_ptr = ((($info)) + 4|0);
 $0 = HEAP32[$static_ptr>>2]|0;
 $cmp = ($0|0)==($current_ptr|0);
 do {
  if ($cmp) {
   $found_our_static_ptr = ((($info)) + 52|0);
   HEAP8[$found_our_static_ptr>>0] = 1;
   $dst_ptr_leading_to_static_ptr = ((($info)) + 16|0);
   $1 = HEAP32[$dst_ptr_leading_to_static_ptr>>2]|0;
   $cmp2 = ($1|0)==(0|0);
   $search_done = ((($info)) + 54|0);
   $number_of_dst_type = ((($info)) + 48|0);
   $path_dst_ptr_to_static_ptr = ((($info)) + 24|0);
   $number_to_static_ptr = ((($info)) + 36|0);
   if ($cmp2) {
    HEAP32[$dst_ptr_leading_to_static_ptr>>2] = $dst_ptr;
    HEAP32[$path_dst_ptr_to_static_ptr>>2] = $path_below;
    HEAP32[$number_to_static_ptr>>2] = 1;
    $2 = HEAP32[$number_of_dst_type>>2]|0;
    $cmp5 = ($2|0)==(1);
    $cmp7 = ($path_below|0)==(1);
    $or$cond = $cmp5 & $cmp7;
    if (!($or$cond)) {
     break;
    }
    HEAP8[$search_done>>0] = 1;
    break;
   }
   $cmp10 = ($1|0)==($dst_ptr|0);
   if (!($cmp10)) {
    $6 = HEAP32[$number_to_static_ptr>>2]|0;
    $add = (($6) + 1)|0;
    HEAP32[$number_to_static_ptr>>2] = $add;
    HEAP8[$search_done>>0] = 1;
    break;
   }
   $3 = HEAP32[$path_dst_ptr_to_static_ptr>>2]|0;
   $cmp13 = ($3|0)==(2);
   if ($cmp13) {
    HEAP32[$path_dst_ptr_to_static_ptr>>2] = $path_below;
    $5 = $path_below;
   } else {
    $5 = $3;
   }
   $4 = HEAP32[$number_of_dst_type>>2]|0;
   $cmp18 = ($4|0)==(1);
   $cmp21 = ($5|0)==(1);
   $or$cond19 = $cmp18 & $cmp21;
   if ($or$cond19) {
    HEAP8[$search_done>>0] = 1;
   }
  }
 } while(0);
 return;
}
function ___dynamic_cast($static_ptr,$static_type,$dst_type,$src2dst_offset) {
 $static_ptr = $static_ptr|0;
 $static_type = $static_type|0;
 $dst_type = $dst_type|0;
 $src2dst_offset = $src2dst_offset|0;
 var $$ = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $add$ptr = 0, $add$ptr$ = 0, $arrayidx = 0;
 var $arrayidx1 = 0, $call = 0, $cmp = 0, $cmp14 = 0, $cmp16 = 0, $cmp19 = 0, $cmp25 = 0, $cmp27 = 0, $cmp30 = 0, $cmp33 = 0, $dst_ptr$0 = 0, $dst_ptr_leading_to_static_ptr = 0, $dst_ptr_not_leading_to_static_ptr = 0, $info = 0, $number_of_dst_type = 0, $number_to_dst_ptr = 0, $number_to_static_ptr = 0, $or$cond = 0, $or$cond15 = 0, $or$cond16 = 0;
 var $or$cond17 = 0, $path_dst_ptr_to_static_ptr = 0, $path_dynamic_ptr_to_dst_ptr = 0, $path_dynamic_ptr_to_static_ptr = 0, $src2dst_offset5 = 0, $static_ptr3 = 0, $static_type4 = 0, $vfn = 0, $vfn11 = 0, $vtable10 = 0, $vtable7 = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $info = sp;
 $0 = HEAP32[$static_ptr>>2]|0;
 $arrayidx = ((($0)) + -8|0);
 $1 = HEAP32[$arrayidx>>2]|0;
 $add$ptr = (($static_ptr) + ($1)|0);
 $arrayidx1 = ((($0)) + -4|0);
 $2 = HEAP32[$arrayidx1>>2]|0;
 HEAP32[$info>>2] = $dst_type;
 $static_ptr3 = ((($info)) + 4|0);
 HEAP32[$static_ptr3>>2] = $static_ptr;
 $static_type4 = ((($info)) + 8|0);
 HEAP32[$static_type4>>2] = $static_type;
 $src2dst_offset5 = ((($info)) + 12|0);
 HEAP32[$src2dst_offset5>>2] = $src2dst_offset;
 $dst_ptr_leading_to_static_ptr = ((($info)) + 16|0);
 $dst_ptr_not_leading_to_static_ptr = ((($info)) + 20|0);
 $path_dst_ptr_to_static_ptr = ((($info)) + 24|0);
 $path_dynamic_ptr_to_static_ptr = ((($info)) + 28|0);
 $path_dynamic_ptr_to_dst_ptr = ((($info)) + 32|0);
 $number_to_dst_ptr = ((($info)) + 40|0);
 dest=$dst_ptr_leading_to_static_ptr; stop=dest+36|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));HEAP16[$dst_ptr_leading_to_static_ptr+36>>1]=0|0;HEAP8[$dst_ptr_leading_to_static_ptr+38>>0]=0|0;
 $call = (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($2,$dst_type,0)|0);
 L1: do {
  if ($call) {
   $number_of_dst_type = ((($info)) + 48|0);
   HEAP32[$number_of_dst_type>>2] = 1;
   $vtable7 = HEAP32[$2>>2]|0;
   $vfn = ((($vtable7)) + 20|0);
   $3 = HEAP32[$vfn>>2]|0;
   FUNCTION_TABLE_viiiiii[$3 & 511]($2,$info,$add$ptr,$add$ptr,1,0);
   $4 = HEAP32[$path_dst_ptr_to_static_ptr>>2]|0;
   $cmp = ($4|0)==(1);
   $add$ptr$ = $cmp ? $add$ptr : 0;
   $dst_ptr$0 = $add$ptr$;
  } else {
   $number_to_static_ptr = ((($info)) + 36|0);
   $vtable10 = HEAP32[$2>>2]|0;
   $vfn11 = ((($vtable10)) + 24|0);
   $5 = HEAP32[$vfn11>>2]|0;
   FUNCTION_TABLE_viiiii[$5 & 511]($2,$info,$add$ptr,1,0);
   $6 = HEAP32[$number_to_static_ptr>>2]|0;
   switch ($6|0) {
   case 0:  {
    $7 = HEAP32[$number_to_dst_ptr>>2]|0;
    $cmp14 = ($7|0)==(1);
    $8 = HEAP32[$path_dynamic_ptr_to_static_ptr>>2]|0;
    $cmp16 = ($8|0)==(1);
    $or$cond = $cmp14 & $cmp16;
    $9 = HEAP32[$path_dynamic_ptr_to_dst_ptr>>2]|0;
    $cmp19 = ($9|0)==(1);
    $or$cond15 = $or$cond & $cmp19;
    $10 = HEAP32[$dst_ptr_not_leading_to_static_ptr>>2]|0;
    $$ = $or$cond15 ? $10 : 0;
    $dst_ptr$0 = $$;
    break L1;
    break;
   }
   case 1:  {
    break;
   }
   default: {
    $dst_ptr$0 = 0;
    break L1;
   }
   }
   $11 = HEAP32[$path_dst_ptr_to_static_ptr>>2]|0;
   $cmp25 = ($11|0)==(1);
   if (!($cmp25)) {
    $12 = HEAP32[$number_to_dst_ptr>>2]|0;
    $cmp27 = ($12|0)==(0);
    $13 = HEAP32[$path_dynamic_ptr_to_static_ptr>>2]|0;
    $cmp30 = ($13|0)==(1);
    $or$cond16 = $cmp27 & $cmp30;
    $14 = HEAP32[$path_dynamic_ptr_to_dst_ptr>>2]|0;
    $cmp33 = ($14|0)==(1);
    $or$cond17 = $or$cond16 & $cmp33;
    if (!($or$cond17)) {
     $dst_ptr$0 = 0;
     break;
    }
   }
   $15 = HEAP32[$dst_ptr_leading_to_static_ptr>>2]|0;
   $dst_ptr$0 = $15;
  }
 } while(0);
 STACKTOP = sp;return ($dst_ptr$0|0);
}
function __ZN10__cxxabiv120__si_class_type_infoD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN10__cxxabiv116__shim_type_infoD2Ev($this);
 __ZdlPv($this);
 return;
}
function __ZNK10__cxxabiv120__si_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($this,$info,$dst_ptr,$current_ptr,$path_below,$use_strcmp) {
 $this = $this|0;
 $info = $info|0;
 $dst_ptr = $dst_ptr|0;
 $current_ptr = $current_ptr|0;
 $path_below = $path_below|0;
 $use_strcmp = $use_strcmp|0;
 var $0 = 0, $1 = 0, $2 = 0, $__base_type = 0, $call = 0, $static_type = 0, $vfn = 0, $vtable = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $static_type = ((($info)) + 8|0);
 $0 = HEAP32[$static_type>>2]|0;
 $call = (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($this,$0,$use_strcmp)|0);
 if ($call) {
  __ZNK10__cxxabiv117__class_type_info29process_static_type_above_dstEPNS_19__dynamic_cast_infoEPKvS4_i(0,$info,$dst_ptr,$current_ptr,$path_below);
 } else {
  $__base_type = ((($this)) + 8|0);
  $1 = HEAP32[$__base_type>>2]|0;
  $vtable = HEAP32[$1>>2]|0;
  $vfn = ((($vtable)) + 20|0);
  $2 = HEAP32[$vfn>>2]|0;
  FUNCTION_TABLE_viiiiii[$2 & 511]($1,$info,$dst_ptr,$current_ptr,$path_below,$use_strcmp);
 }
 return;
}
function __ZNK10__cxxabiv120__si_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($this,$info,$current_ptr,$path_below,$use_strcmp) {
 $this = $this|0;
 $info = $info|0;
 $current_ptr = $current_ptr|0;
 $path_below = $path_below|0;
 $use_strcmp = $use_strcmp|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__base_type = 0, $add = 0, $call = 0, $call3 = 0, $cmp = 0, $cmp11 = 0;
 var $cmp26 = 0, $cmp27 = 0, $cmp5 = 0, $cmp7 = 0, $dst_ptr_leading_to_static_ptr = 0, $dst_ptr_not_leading_to_static_ptr = 0, $found_any_static_type = 0, $found_our_static_ptr = 0, $is_dst_type_derived_from_static_type = 0, $is_dst_type_derived_from_static_type13$0$off032 = 0, $is_dst_type_derived_from_static_type13$0$off033 = 0, $not$tobool19 = 0, $number_to_dst_ptr = 0, $number_to_static_ptr = 0, $path_dst_ptr_to_static_ptr = 0, $path_dynamic_ptr_to_dst_ptr = 0, $search_done = 0, $static_type = 0, $tobool16 = 0, $vfn = 0;
 var $vfn42 = 0, $vtable = 0, $vtable41 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $static_type = ((($info)) + 8|0);
 $0 = HEAP32[$static_type>>2]|0;
 $call = (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($this,$0,$use_strcmp)|0);
 do {
  if ($call) {
   __ZNK10__cxxabiv117__class_type_info29process_static_type_below_dstEPNS_19__dynamic_cast_infoEPKvi(0,$info,$current_ptr,$path_below);
  } else {
   $1 = HEAP32[$info>>2]|0;
   $call3 = (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($this,$1,$use_strcmp)|0);
   $__base_type = ((($this)) + 8|0);
   if (!($call3)) {
    $12 = HEAP32[$__base_type>>2]|0;
    $vtable41 = HEAP32[$12>>2]|0;
    $vfn42 = ((($vtable41)) + 24|0);
    $13 = HEAP32[$vfn42>>2]|0;
    FUNCTION_TABLE_viiiii[$13 & 511]($12,$info,$current_ptr,$path_below,$use_strcmp);
    break;
   }
   $dst_ptr_leading_to_static_ptr = ((($info)) + 16|0);
   $2 = HEAP32[$dst_ptr_leading_to_static_ptr>>2]|0;
   $cmp = ($2|0)==($current_ptr|0);
   $path_dynamic_ptr_to_dst_ptr = ((($info)) + 32|0);
   if (!($cmp)) {
    $dst_ptr_not_leading_to_static_ptr = ((($info)) + 20|0);
    $3 = HEAP32[$dst_ptr_not_leading_to_static_ptr>>2]|0;
    $cmp5 = ($3|0)==($current_ptr|0);
    if (!($cmp5)) {
     HEAP32[$path_dynamic_ptr_to_dst_ptr>>2] = $path_below;
     $is_dst_type_derived_from_static_type = ((($info)) + 44|0);
     $4 = HEAP32[$is_dst_type_derived_from_static_type>>2]|0;
     $cmp11 = ($4|0)==(4);
     if ($cmp11) {
      break;
     }
     $found_our_static_ptr = ((($info)) + 52|0);
     HEAP8[$found_our_static_ptr>>0] = 0;
     $found_any_static_type = ((($info)) + 53|0);
     HEAP8[$found_any_static_type>>0] = 0;
     $5 = HEAP32[$__base_type>>2]|0;
     $vtable = HEAP32[$5>>2]|0;
     $vfn = ((($vtable)) + 20|0);
     $6 = HEAP32[$vfn>>2]|0;
     FUNCTION_TABLE_viiiiii[$6 & 511]($5,$info,$current_ptr,$current_ptr,1,$use_strcmp);
     $7 = HEAP8[$found_any_static_type>>0]|0;
     $tobool16 = ($7<<24>>24)==(0);
     if ($tobool16) {
      $is_dst_type_derived_from_static_type13$0$off032 = 4;
      label = 11;
     } else {
      $8 = HEAP8[$found_our_static_ptr>>0]|0;
      $not$tobool19 = ($8<<24>>24)==(0);
      if ($not$tobool19) {
       $is_dst_type_derived_from_static_type13$0$off032 = 3;
       label = 11;
      } else {
       $is_dst_type_derived_from_static_type13$0$off033 = 3;
      }
     }
     if ((label|0) == 11) {
      HEAP32[$dst_ptr_not_leading_to_static_ptr>>2] = $current_ptr;
      $number_to_dst_ptr = ((($info)) + 40|0);
      $9 = HEAP32[$number_to_dst_ptr>>2]|0;
      $add = (($9) + 1)|0;
      HEAP32[$number_to_dst_ptr>>2] = $add;
      $number_to_static_ptr = ((($info)) + 36|0);
      $10 = HEAP32[$number_to_static_ptr>>2]|0;
      $cmp26 = ($10|0)==(1);
      if ($cmp26) {
       $path_dst_ptr_to_static_ptr = ((($info)) + 24|0);
       $11 = HEAP32[$path_dst_ptr_to_static_ptr>>2]|0;
       $cmp27 = ($11|0)==(2);
       if ($cmp27) {
        $search_done = ((($info)) + 54|0);
        HEAP8[$search_done>>0] = 1;
        $is_dst_type_derived_from_static_type13$0$off033 = $is_dst_type_derived_from_static_type13$0$off032;
       } else {
        $is_dst_type_derived_from_static_type13$0$off033 = $is_dst_type_derived_from_static_type13$0$off032;
       }
      } else {
       $is_dst_type_derived_from_static_type13$0$off033 = $is_dst_type_derived_from_static_type13$0$off032;
      }
     }
     HEAP32[$is_dst_type_derived_from_static_type>>2] = $is_dst_type_derived_from_static_type13$0$off033;
     break;
    }
   }
   $cmp7 = ($path_below|0)==(1);
   if ($cmp7) {
    HEAP32[$path_dynamic_ptr_to_dst_ptr>>2] = 1;
   }
  }
 } while(0);
 return;
}
function __ZNK10__cxxabiv120__si_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($this,$info,$adjustedPtr,$path_below) {
 $this = $this|0;
 $info = $info|0;
 $adjustedPtr = $adjustedPtr|0;
 $path_below = $path_below|0;
 var $0 = 0, $1 = 0, $2 = 0, $__base_type = 0, $call = 0, $static_type = 0, $vfn = 0, $vtable = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $static_type = ((($info)) + 8|0);
 $0 = HEAP32[$static_type>>2]|0;
 $call = (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($this,$0,0)|0);
 if ($call) {
  __ZNK10__cxxabiv117__class_type_info24process_found_base_classEPNS_19__dynamic_cast_infoEPvi(0,$info,$adjustedPtr,$path_below);
 } else {
  $__base_type = ((($this)) + 8|0);
  $1 = HEAP32[$__base_type>>2]|0;
  $vtable = HEAP32[$1>>2]|0;
  $vfn = ((($vtable)) + 28|0);
  $2 = HEAP32[$vfn>>2]|0;
  FUNCTION_TABLE_viiii[$2 & 511]($1,$info,$adjustedPtr,$path_below);
 }
 return;
}
function __ZNSt9type_infoD2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZN10__cxxabiv112_GLOBAL__N_110construct_Ev() {
 var $call = 0, $cmp = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 $call = (_pthread_key_create((22016|0),(543|0))|0);
 $cmp = ($call|0)==(0);
 if ($cmp) {
  STACKTOP = sp;return;
 } else {
  _abort_message(18314,$vararg_buffer);
  // unreachable;
 }
}
function __ZN10__cxxabiv112_GLOBAL__N_19destruct_EPv($p) {
 $p = $p|0;
 var $0 = 0, $call = 0, $cmp = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 _free($p);
 $0 = HEAP32[5504]|0;
 $call = (_pthread_setspecific(($0|0),(0|0))|0);
 $cmp = ($call|0)==(0);
 if ($cmp) {
  STACKTOP = sp;return;
 } else {
  _abort_message(18364,$vararg_buffer);
  // unreachable;
 }
}
function __ZSt9terminatev() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $call = 0, $call8 = 0, $exception_class = 0, $terminateHandler = 0;
 var $tobool = 0, $tobool1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __THREW__ = 0;
 $call = (invoke_i(544)|0);
 $0 = __THREW__; __THREW__ = 0;
 $1 = $0&1;
 if ($1) {
  $14 = ___cxa_find_matching_catch_3(0|0)|0;
  $15 = tempRet0;
  ___clang_call_terminate($14);
  // unreachable;
 }
 $tobool = ($call|0)==(0|0);
 if (!($tobool)) {
  $2 = HEAP32[$call>>2]|0;
  $tobool1 = ($2|0)==(0|0);
  if (!($tobool1)) {
   $exception_class = ((($2)) + 48|0);
   $3 = $exception_class;
   $4 = $3;
   $5 = HEAP32[$4>>2]|0;
   $6 = (($3) + 4)|0;
   $7 = $6;
   $8 = HEAP32[$7>>2]|0;
   $9 = $5 & -256;
   $10 = ($9|0)==(1126902528);
   $11 = ($8|0)==(1129074247);
   $12 = $10 & $11;
   if ($12) {
    $terminateHandler = ((($2)) + 12|0);
    $13 = HEAP32[$terminateHandler>>2]|0;
    __ZSt11__terminatePFvvE($13);
    // unreachable;
   }
  }
 }
 $call8 = (__ZSt13get_terminatev()|0);
 __ZSt11__terminatePFvvE($call8);
 // unreachable;
}
function __ZSt11__terminatePFvvE($func) {
 $func = $func|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 __THREW__ = 0;
 invoke_v($func|0);
 $0 = __THREW__; __THREW__ = 0;
 $1 = $0&1;
 if (!($1)) {
  __THREW__ = 0;
  invoke_vii(545,(18417|0),($vararg_buffer|0));
  $2 = __THREW__; __THREW__ = 0;
 }
 $3 = ___cxa_find_matching_catch_3(0|0)|0;
 $4 = tempRet0;
 (___cxa_begin_catch(($3|0))|0);
 __THREW__ = 0;
 invoke_vii(545,(18457|0),($vararg_buffer1|0));
 $5 = __THREW__; __THREW__ = 0;
 $6 = ___cxa_find_matching_catch_3(0|0)|0;
 $7 = tempRet0;
 __THREW__ = 0;
 invoke_v(375);
 $8 = __THREW__; __THREW__ = 0;
 $9 = $8&1;
 if ($9) {
  $10 = ___cxa_find_matching_catch_3(0|0)|0;
  $11 = tempRet0;
  ___clang_call_terminate($10);
  // unreachable;
 } else {
  ___clang_call_terminate($6);
  // unreachable;
 }
}
function __ZSt13get_terminatev() {
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[2383]|0;HEAP32[2383] = (($0+0)|0);
 $1 = $0;
 return ($1|0);
}
function __ZNSt9bad_allocD2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNSt9bad_allocD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt9bad_allocD2Ev($this);
 __ZdlPv($this);
 return;
}
function __ZNKSt9bad_alloc4whatEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (18507|0);
}
function __ZNSt9exceptionD2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNSt11logic_errorD2Ev($this) {
 $this = $this|0;
 var $__imp_ = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = (9648);
 $__imp_ = ((($this)) + 4|0);
 __ZN12_GLOBAL__N_114__libcpp_nmstrD2Ev($__imp_);
 return;
}
function __ZNSt11logic_errorD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt11logic_errorD2Ev($this);
 __ZdlPv($this);
 return;
}
function __ZNKSt11logic_error4whatEv($this) {
 $this = $this|0;
 var $__imp_ = 0, $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $__imp_ = ((($this)) + 4|0);
 $call = (__ZNK12_GLOBAL__N_114__libcpp_nmstr5c_strEv($__imp_)|0);
 return ($call|0);
}
function __ZNK12_GLOBAL__N_114__libcpp_nmstr5c_strEv($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$this>>2]|0;
 return ($0|0);
}
function __ZN12_GLOBAL__N_114__libcpp_nmstrD2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $add$ptr = 0, $call = 0, $cmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = (__ZNK12_GLOBAL__N_114__libcpp_nmstr5countEv($this)|0);
 $0 = HEAP32[$call>>2]|0;HEAP32[$call>>2] = (($0+-1)|0);
 $1 = (($0) + -1)|0;
 $cmp = ($1|0)<(0);
 if ($cmp) {
  $2 = HEAP32[$this>>2]|0;
  $add$ptr = ((($2)) + -12|0);
  __ZdlPv($add$ptr);
 }
 return;
}
function __ZNK12_GLOBAL__N_114__libcpp_nmstr5countEv($this) {
 $this = $this|0;
 var $0 = 0, $count = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$this>>2]|0;
 $count = ((($0)) + -4|0);
 return ($count|0);
}
function __ZNSt13runtime_errorD2Ev($this) {
 $this = $this|0;
 var $__imp_ = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = (9668);
 $__imp_ = ((($this)) + 4|0);
 __ZN12_GLOBAL__N_114__libcpp_nmstrD2Ev($__imp_);
 return;
}
function __ZNSt13runtime_errorD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt13runtime_errorD2Ev($this);
 __ZdlPv($this);
 return;
}
function __ZNKSt13runtime_error4whatEv($this) {
 $this = $this|0;
 var $__imp_ = 0, $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $__imp_ = ((($this)) + 4|0);
 $call = (__ZNK12_GLOBAL__N_114__libcpp_nmstr5c_strEv($__imp_)|0);
 return ($call|0);
}
function __ZNSt12length_errorD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt11logic_errorD2Ev($this);
 __ZdlPv($this);
 return;
}
function __ZNSt8bad_castD2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNSt8bad_castD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt8bad_castD2Ev($this);
 __ZdlPv($this);
 return;
}
function __ZNKSt8bad_cast4whatEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (18586|0);
}
function __ZN10__cxxabiv123__fundamental_type_infoD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN10__cxxabiv116__shim_type_infoD2Ev($this);
 __ZdlPv($this);
 return;
}
function __ZNK10__cxxabiv123__fundamental_type_info9can_catchEPKNS_16__shim_type_infoERPv($this,$thrown_type,$0) {
 $this = $this|0;
 $thrown_type = $thrown_type|0;
 $0 = $0|0;
 var $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($this,$thrown_type,0)|0);
 return ($call|0);
}
function __ZN10__cxxabiv119__pointer_type_infoD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN10__cxxabiv116__shim_type_infoD2Ev($this);
 __ZdlPv($this);
 return;
}
function __ZNK10__cxxabiv119__pointer_type_info9can_catchEPKNS_16__shim_type_infoERPv($this,$thrown_type,$adjustedPtr) {
 $this = $this|0;
 $thrown_type = $thrown_type|0;
 $adjustedPtr = $adjustedPtr|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $__flags = 0, $__flags4 = 0, $__pointee = 0, $__pointee7 = 0, $and = 0, $call = 0, $call12 = 0, $call8 = 0, $cmp = 0, $cmp19 = 0, $cmp26 = 0, $cmp29 = 0, $dst_ptr_leading_to_static_ptr = 0, $info = 0, $neg = 0, $number_of_dst_type = 0, $path_dst_ptr_to_static_ptr = 0, $retval$0 = 0, $retval$4 = 0, $src2dst_offset = 0;
 var $static_type = 0, $tobool = 0, $vfn = 0, $vtable = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $info = sp;
 $0 = HEAP32[$adjustedPtr>>2]|0;
 $1 = HEAP32[$0>>2]|0;
 HEAP32[$adjustedPtr>>2] = $1;
 $call = (__ZNK10__cxxabiv117__pbase_type_info9can_catchEPKNS_16__shim_type_infoERPv($this,$thrown_type,0)|0);
 if ($call) {
  $retval$4 = 1;
 } else {
  $2 = ($thrown_type|0)==(0|0);
  if ($2) {
   $retval$4 = 0;
  } else {
   $3 = (___dynamic_cast($thrown_type,1848,1984,0)|0);
   $cmp = ($3|0)==(0|0);
   if ($cmp) {
    $retval$4 = 0;
   } else {
    $__flags = ((($3)) + 8|0);
    $4 = HEAP32[$__flags>>2]|0;
    $__flags4 = ((($this)) + 8|0);
    $5 = HEAP32[$__flags4>>2]|0;
    $neg = $5 ^ -1;
    $and = $4 & $neg;
    $tobool = ($and|0)==(0);
    if ($tobool) {
     $__pointee = ((($this)) + 12|0);
     $6 = HEAP32[$__pointee>>2]|0;
     $__pointee7 = ((($3)) + 12|0);
     $7 = HEAP32[$__pointee7>>2]|0;
     $call8 = (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($6,$7,0)|0);
     if ($call8) {
      $retval$4 = 1;
     } else {
      $8 = HEAP32[$__pointee>>2]|0;
      $call12 = (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($8,2016,0)|0);
      if ($call12) {
       $retval$4 = 1;
      } else {
       $9 = HEAP32[$__pointee>>2]|0;
       $10 = ($9|0)==(0|0);
       if ($10) {
        $retval$4 = 0;
       } else {
        $11 = (___dynamic_cast($9,1848,1832,0)|0);
        $cmp19 = ($11|0)==(0|0);
        if ($cmp19) {
         $retval$4 = 0;
        } else {
         $12 = HEAP32[$__pointee7>>2]|0;
         $13 = ($12|0)==(0|0);
         if ($13) {
          $retval$4 = 0;
         } else {
          $14 = (___dynamic_cast($12,1848,1832,0)|0);
          $cmp26 = ($14|0)==(0|0);
          if ($cmp26) {
           $retval$4 = 0;
          } else {
           $15 = ((($info)) + 4|0);
           dest=$15; stop=dest+52|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
           HEAP32[$info>>2] = $14;
           $static_type = ((($info)) + 8|0);
           HEAP32[$static_type>>2] = $11;
           $src2dst_offset = ((($info)) + 12|0);
           HEAP32[$src2dst_offset>>2] = -1;
           $number_of_dst_type = ((($info)) + 48|0);
           HEAP32[$number_of_dst_type>>2] = 1;
           $vtable = HEAP32[$14>>2]|0;
           $vfn = ((($vtable)) + 28|0);
           $16 = HEAP32[$vfn>>2]|0;
           $17 = HEAP32[$adjustedPtr>>2]|0;
           FUNCTION_TABLE_viiii[$16 & 511]($14,$info,$17,1);
           $path_dst_ptr_to_static_ptr = ((($info)) + 24|0);
           $18 = HEAP32[$path_dst_ptr_to_static_ptr>>2]|0;
           $cmp29 = ($18|0)==(1);
           if ($cmp29) {
            $dst_ptr_leading_to_static_ptr = ((($info)) + 16|0);
            $19 = HEAP32[$dst_ptr_leading_to_static_ptr>>2]|0;
            HEAP32[$adjustedPtr>>2] = $19;
            $retval$0 = 1;
           } else {
            $retval$0 = 0;
           }
           $retval$4 = $retval$0;
          }
         }
        }
       }
      }
     }
    } else {
     $retval$4 = 0;
    }
   }
  }
 }
 STACKTOP = sp;return ($retval$4|0);
}
function __ZNK10__cxxabiv117__pbase_type_info9can_catchEPKNS_16__shim_type_infoERPv($this,$thrown_type,$0) {
 $this = $this|0;
 $thrown_type = $thrown_type|0;
 $0 = $0|0;
 var $call = 0, $call2 = 0, $retval$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($this,$thrown_type,0)|0);
 if ($call) {
  $retval$0 = 1;
 } else {
  $call2 = (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($thrown_type,2024,0)|0);
  $retval$0 = $call2;
 }
 return ($retval$0|0);
}
function __ZN10__cxxabiv121__vmi_class_type_infoD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN10__cxxabiv116__shim_type_infoD2Ev($this);
 __ZdlPv($this);
 return;
}
function __ZNK10__cxxabiv121__vmi_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($this,$info,$dst_ptr,$current_ptr,$path_below,$use_strcmp) {
 $this = $this|0;
 $info = $info|0;
 $dst_ptr = $dst_ptr|0;
 $current_ptr = $current_ptr|0;
 $path_below = $path_below|0;
 $use_strcmp = $use_strcmp|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__base_count = 0, $__flags = 0, $add$ptr = 0, $and = 0, $and30 = 0, $arraydecay = 0, $call = 0, $cmp = 0, $cmp19 = 0, $cmp40 = 0;
 var $found_any_static_type5 = 0, $found_our_static_ptr2 = 0, $incdec$ptr = 0, $incdec$ptr39 = 0, $p$0 = 0, $path_dst_ptr_to_static_ptr = 0, $search_done = 0, $static_type = 0, $tobool14 = 0, $tobool17 = 0, $tobool22 = 0, $tobool27 = 0, $tobool31 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $static_type = ((($info)) + 8|0);
 $0 = HEAP32[$static_type>>2]|0;
 $call = (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($this,$0,$use_strcmp)|0);
 if ($call) {
  __ZNK10__cxxabiv117__class_type_info29process_static_type_above_dstEPNS_19__dynamic_cast_infoEPKvS4_i(0,$info,$dst_ptr,$current_ptr,$path_below);
 } else {
  $found_our_static_ptr2 = ((($info)) + 52|0);
  $1 = HEAP8[$found_our_static_ptr2>>0]|0;
  $found_any_static_type5 = ((($info)) + 53|0);
  $2 = HEAP8[$found_any_static_type5>>0]|0;
  $arraydecay = ((($this)) + 16|0);
  $__base_count = ((($this)) + 12|0);
  $3 = HEAP32[$__base_count>>2]|0;
  $add$ptr = (((($this)) + 16|0) + ($3<<3)|0);
  HEAP8[$found_our_static_ptr2>>0] = 0;
  HEAP8[$found_any_static_type5>>0] = 0;
  __ZNK10__cxxabiv122__base_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($arraydecay,$info,$dst_ptr,$current_ptr,$path_below,$use_strcmp);
  $cmp = ($3|0)>(1);
  L4: do {
   if ($cmp) {
    $incdec$ptr = ((($this)) + 24|0);
    $path_dst_ptr_to_static_ptr = ((($info)) + 24|0);
    $search_done = ((($info)) + 54|0);
    $__flags = ((($this)) + 8|0);
    $p$0 = $incdec$ptr;
    while(1) {
     $4 = HEAP8[$search_done>>0]|0;
     $tobool14 = ($4<<24>>24)==(0);
     if (!($tobool14)) {
      break L4;
     }
     $5 = HEAP8[$found_our_static_ptr2>>0]|0;
     $tobool17 = ($5<<24>>24)==(0);
     if ($tobool17) {
      $8 = HEAP8[$found_any_static_type5>>0]|0;
      $tobool27 = ($8<<24>>24)==(0);
      if (!($tobool27)) {
       $9 = HEAP32[$__flags>>2]|0;
       $and30 = $9 & 1;
       $tobool31 = ($and30|0)==(0);
       if ($tobool31) {
        break L4;
       }
      }
     } else {
      $6 = HEAP32[$path_dst_ptr_to_static_ptr>>2]|0;
      $cmp19 = ($6|0)==(1);
      if ($cmp19) {
       break L4;
      }
      $7 = HEAP32[$__flags>>2]|0;
      $and = $7 & 2;
      $tobool22 = ($and|0)==(0);
      if ($tobool22) {
       break L4;
      }
     }
     HEAP8[$found_our_static_ptr2>>0] = 0;
     HEAP8[$found_any_static_type5>>0] = 0;
     __ZNK10__cxxabiv122__base_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($p$0,$info,$dst_ptr,$current_ptr,$path_below,$use_strcmp);
     $incdec$ptr39 = ((($p$0)) + 8|0);
     $cmp40 = ($incdec$ptr39>>>0)<($add$ptr>>>0);
     if ($cmp40) {
      $p$0 = $incdec$ptr39;
     } else {
      break;
     }
    }
   }
  } while(0);
  HEAP8[$found_our_static_ptr2>>0] = $1;
  HEAP8[$found_any_static_type5>>0] = $2;
 }
 return;
}
function __ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($this,$info,$current_ptr,$path_below,$use_strcmp) {
 $this = $this|0;
 $info = $info|0;
 $current_ptr = $current_ptr|0;
 $path_below = $path_below|0;
 $use_strcmp = $use_strcmp|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__base_count = 0, $__flags = 0, $add = 0, $add$ptr = 0, $add$ptr64 = 0, $and = 0, $and35 = 0, $and73 = 0, $and88 = 0, $arraydecay = 0, $call = 0, $call3 = 0, $cmp = 0, $cmp100 = 0, $cmp106 = 0;
 var $cmp11 = 0, $cmp115 = 0, $cmp121 = 0, $cmp16 = 0, $cmp27 = 0, $cmp44 = 0, $cmp46 = 0, $cmp5 = 0, $cmp7 = 0, $cmp70 = 0, $cmp77 = 0, $cmp85 = 0, $cmp97 = 0, $does_dst_type_point_to_our_static_type$0$off0 = 0, $does_dst_type_point_to_our_static_type$1$off0 = 0, $dst_ptr_leading_to_static_ptr = 0, $dst_ptr_not_leading_to_static_ptr = 0, $found_any_static_type = 0, $found_our_static_ptr = 0, $incdec$ptr = 0;
 var $incdec$ptr105 = 0, $incdec$ptr120 = 0, $incdec$ptr69 = 0, $incdec$ptr84 = 0, $is_dst_type_derived_from_static_type = 0, $is_dst_type_derived_from_static_type13$0$off0 = 0, $is_dst_type_derived_from_static_type13$1$off0 = 0, $is_dst_type_derived_from_static_type13$2$off0 = 0, $number_to_dst_ptr = 0, $number_to_static_ptr = 0, $p$0 = 0, $p65$0 = 0, $p65$1 = 0, $p65$2 = 0, $path_dst_ptr_to_static_ptr45 = 0, $path_dynamic_ptr_to_dst_ptr = 0, $search_done48 = 0, $static_type = 0, $tobool111 = 0, $tobool18 = 0;
 var $tobool22 = 0, $tobool25 = 0, $tobool30 = 0, $tobool36 = 0, $tobool74 = 0, $tobool80 = 0, $tobool89 = 0, $tobool93 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $static_type = ((($info)) + 8|0);
 $0 = HEAP32[$static_type>>2]|0;
 $call = (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($this,$0,$use_strcmp)|0);
 L1: do {
  if ($call) {
   __ZNK10__cxxabiv117__class_type_info29process_static_type_below_dstEPNS_19__dynamic_cast_infoEPKvi(0,$info,$current_ptr,$path_below);
  } else {
   $1 = HEAP32[$info>>2]|0;
   $call3 = (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($this,$1,$use_strcmp)|0);
   $__base_count = ((($this)) + 12|0);
   $path_dst_ptr_to_static_ptr45 = ((($info)) + 24|0);
   $number_to_static_ptr = ((($info)) + 36|0);
   $search_done48 = ((($info)) + 54|0);
   $__flags = ((($this)) + 8|0);
   $arraydecay = ((($this)) + 16|0);
   if (!($call3)) {
    $16 = HEAP32[$__base_count>>2]|0;
    $add$ptr64 = (((($this)) + 16|0) + ($16<<3)|0);
    __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($arraydecay,$info,$current_ptr,$path_below,$use_strcmp);
    $incdec$ptr69 = ((($this)) + 24|0);
    $cmp70 = ($16|0)>(1);
    if (!($cmp70)) {
     break;
    }
    $17 = HEAP32[$__flags>>2]|0;
    $and73 = $17 & 2;
    $tobool74 = ($and73|0)==(0);
    if ($tobool74) {
     $18 = HEAP32[$number_to_static_ptr>>2]|0;
     $cmp77 = ($18|0)==(1);
     if ($cmp77) {
      $p65$0 = $incdec$ptr69;
     } else {
      $and88 = $17 & 1;
      $tobool89 = ($and88|0)==(0);
      if ($tobool89) {
       $p65$2 = $incdec$ptr69;
       while(1) {
        $23 = HEAP8[$search_done48>>0]|0;
        $tobool111 = ($23<<24>>24)==(0);
        if (!($tobool111)) {
         break L1;
        }
        $24 = HEAP32[$number_to_static_ptr>>2]|0;
        $cmp115 = ($24|0)==(1);
        if ($cmp115) {
         break L1;
        }
        __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($p65$2,$info,$current_ptr,$path_below,$use_strcmp);
        $incdec$ptr120 = ((($p65$2)) + 8|0);
        $cmp121 = ($incdec$ptr120>>>0)<($add$ptr64>>>0);
        if ($cmp121) {
         $p65$2 = $incdec$ptr120;
        } else {
         break L1;
        }
       }
      } else {
       $p65$1 = $incdec$ptr69;
      }
      while(1) {
       $20 = HEAP8[$search_done48>>0]|0;
       $tobool93 = ($20<<24>>24)==(0);
       if (!($tobool93)) {
        break L1;
       }
       $21 = HEAP32[$number_to_static_ptr>>2]|0;
       $cmp97 = ($21|0)==(1);
       if ($cmp97) {
        $22 = HEAP32[$path_dst_ptr_to_static_ptr45>>2]|0;
        $cmp100 = ($22|0)==(1);
        if ($cmp100) {
         break L1;
        }
       }
       __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($p65$1,$info,$current_ptr,$path_below,$use_strcmp);
       $incdec$ptr105 = ((($p65$1)) + 8|0);
       $cmp106 = ($incdec$ptr105>>>0)<($add$ptr64>>>0);
       if ($cmp106) {
        $p65$1 = $incdec$ptr105;
       } else {
        break L1;
       }
      }
     }
    } else {
     $p65$0 = $incdec$ptr69;
    }
    while(1) {
     $19 = HEAP8[$search_done48>>0]|0;
     $tobool80 = ($19<<24>>24)==(0);
     if (!($tobool80)) {
      break L1;
     }
     __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($p65$0,$info,$current_ptr,$path_below,$use_strcmp);
     $incdec$ptr84 = ((($p65$0)) + 8|0);
     $cmp85 = ($incdec$ptr84>>>0)<($add$ptr64>>>0);
     if ($cmp85) {
      $p65$0 = $incdec$ptr84;
     } else {
      break L1;
     }
    }
   }
   $dst_ptr_leading_to_static_ptr = ((($info)) + 16|0);
   $2 = HEAP32[$dst_ptr_leading_to_static_ptr>>2]|0;
   $cmp = ($2|0)==($current_ptr|0);
   $path_dynamic_ptr_to_dst_ptr = ((($info)) + 32|0);
   if (!($cmp)) {
    $dst_ptr_not_leading_to_static_ptr = ((($info)) + 20|0);
    $3 = HEAP32[$dst_ptr_not_leading_to_static_ptr>>2]|0;
    $cmp5 = ($3|0)==($current_ptr|0);
    if (!($cmp5)) {
     HEAP32[$path_dynamic_ptr_to_dst_ptr>>2] = $path_below;
     $is_dst_type_derived_from_static_type = ((($info)) + 44|0);
     $4 = HEAP32[$is_dst_type_derived_from_static_type>>2]|0;
     $cmp11 = ($4|0)==(4);
     if ($cmp11) {
      break;
     }
     $5 = HEAP32[$__base_count>>2]|0;
     $add$ptr = (((($this)) + 16|0) + ($5<<3)|0);
     $found_our_static_ptr = ((($info)) + 52|0);
     $found_any_static_type = ((($info)) + 53|0);
     $does_dst_type_point_to_our_static_type$0$off0 = 0;$is_dst_type_derived_from_static_type13$0$off0 = 0;$p$0 = $arraydecay;
     L29: while(1) {
      $cmp16 = ($p$0>>>0)<($add$ptr>>>0);
      if (!($cmp16)) {
       $is_dst_type_derived_from_static_type13$2$off0 = $is_dst_type_derived_from_static_type13$0$off0;
       label = 18;
       break;
      }
      HEAP8[$found_our_static_ptr>>0] = 0;
      HEAP8[$found_any_static_type>>0] = 0;
      __ZNK10__cxxabiv122__base_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($p$0,$info,$current_ptr,$current_ptr,1,$use_strcmp);
      $6 = HEAP8[$search_done48>>0]|0;
      $tobool18 = ($6<<24>>24)==(0);
      if (!($tobool18)) {
       $is_dst_type_derived_from_static_type13$2$off0 = $is_dst_type_derived_from_static_type13$0$off0;
       label = 18;
       break;
      }
      $7 = HEAP8[$found_any_static_type>>0]|0;
      $tobool22 = ($7<<24>>24)==(0);
      do {
       if ($tobool22) {
        $does_dst_type_point_to_our_static_type$1$off0 = $does_dst_type_point_to_our_static_type$0$off0;$is_dst_type_derived_from_static_type13$1$off0 = $is_dst_type_derived_from_static_type13$0$off0;
       } else {
        $8 = HEAP8[$found_our_static_ptr>>0]|0;
        $tobool25 = ($8<<24>>24)==(0);
        if ($tobool25) {
         $11 = HEAP32[$__flags>>2]|0;
         $and35 = $11 & 1;
         $tobool36 = ($and35|0)==(0);
         if ($tobool36) {
          $is_dst_type_derived_from_static_type13$2$off0 = 1;
          label = 18;
          break L29;
         } else {
          $does_dst_type_point_to_our_static_type$1$off0 = $does_dst_type_point_to_our_static_type$0$off0;$is_dst_type_derived_from_static_type13$1$off0 = 1;
          break;
         }
        }
        $9 = HEAP32[$path_dst_ptr_to_static_ptr45>>2]|0;
        $cmp27 = ($9|0)==(1);
        if ($cmp27) {
         label = 23;
         break L29;
        }
        $10 = HEAP32[$__flags>>2]|0;
        $and = $10 & 2;
        $tobool30 = ($and|0)==(0);
        if ($tobool30) {
         label = 23;
         break L29;
        } else {
         $does_dst_type_point_to_our_static_type$1$off0 = 1;$is_dst_type_derived_from_static_type13$1$off0 = 1;
        }
       }
      } while(0);
      $incdec$ptr = ((($p$0)) + 8|0);
      $does_dst_type_point_to_our_static_type$0$off0 = $does_dst_type_point_to_our_static_type$1$off0;$is_dst_type_derived_from_static_type13$0$off0 = $is_dst_type_derived_from_static_type13$1$off0;$p$0 = $incdec$ptr;
     }
     do {
      if ((label|0) == 18) {
       if (!($does_dst_type_point_to_our_static_type$0$off0)) {
        HEAP32[$dst_ptr_not_leading_to_static_ptr>>2] = $current_ptr;
        $number_to_dst_ptr = ((($info)) + 40|0);
        $12 = HEAP32[$number_to_dst_ptr>>2]|0;
        $add = (($12) + 1)|0;
        HEAP32[$number_to_dst_ptr>>2] = $add;
        $13 = HEAP32[$number_to_static_ptr>>2]|0;
        $cmp44 = ($13|0)==(1);
        if ($cmp44) {
         $14 = HEAP32[$path_dst_ptr_to_static_ptr45>>2]|0;
         $cmp46 = ($14|0)==(2);
         if ($cmp46) {
          HEAP8[$search_done48>>0] = 1;
          if ($is_dst_type_derived_from_static_type13$2$off0) {
           label = 23;
           break;
          } else {
           $15 = 4;
           break;
          }
         }
        }
       }
       if ($is_dst_type_derived_from_static_type13$2$off0) {
        label = 23;
       } else {
        $15 = 4;
       }
      }
     } while(0);
     if ((label|0) == 23) {
      $15 = 3;
     }
     HEAP32[$is_dst_type_derived_from_static_type>>2] = $15;
     break;
    }
   }
   $cmp7 = ($path_below|0)==(1);
   if ($cmp7) {
    HEAP32[$path_dynamic_ptr_to_dst_ptr>>2] = 1;
   }
  }
 } while(0);
 return;
}
function __ZNK10__cxxabiv121__vmi_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($this,$info,$adjustedPtr,$path_below) {
 $this = $this|0;
 $info = $info|0;
 $adjustedPtr = $adjustedPtr|0;
 $path_below = $path_below|0;
 var $0 = 0, $1 = 0, $2 = 0, $__base_count = 0, $add$ptr = 0, $arraydecay = 0, $call = 0, $cmp = 0, $cmp7 = 0, $incdec$ptr = 0, $incdec$ptr6 = 0, $p$0 = 0, $search_done = 0, $static_type = 0, $tobool = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $static_type = ((($info)) + 8|0);
 $0 = HEAP32[$static_type>>2]|0;
 $call = (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($this,$0,0)|0);
 L1: do {
  if ($call) {
   __ZNK10__cxxabiv117__class_type_info24process_found_base_classEPNS_19__dynamic_cast_infoEPvi(0,$info,$adjustedPtr,$path_below);
  } else {
   $arraydecay = ((($this)) + 16|0);
   $__base_count = ((($this)) + 12|0);
   $1 = HEAP32[$__base_count>>2]|0;
   $add$ptr = (((($this)) + 16|0) + ($1<<3)|0);
   __ZNK10__cxxabiv122__base_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($arraydecay,$info,$adjustedPtr,$path_below);
   $cmp = ($1|0)>(1);
   if ($cmp) {
    $incdec$ptr = ((($this)) + 24|0);
    $search_done = ((($info)) + 54|0);
    $p$0 = $incdec$ptr;
    while(1) {
     __ZNK10__cxxabiv122__base_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($p$0,$info,$adjustedPtr,$path_below);
     $2 = HEAP8[$search_done>>0]|0;
     $tobool = ($2<<24>>24)==(0);
     if (!($tobool)) {
      break L1;
     }
     $incdec$ptr6 = ((($p$0)) + 8|0);
     $cmp7 = ($incdec$ptr6>>>0)<($add$ptr>>>0);
     if ($cmp7) {
      $p$0 = $incdec$ptr6;
     } else {
      break;
     }
    }
   }
  }
 } while(0);
 return;
}
function __ZNK10__cxxabiv122__base_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($this,$info,$adjustedPtr,$path_below) {
 $this = $this|0;
 $info = $info|0;
 $adjustedPtr = $adjustedPtr|0;
 $path_below = $path_below|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $__offset_flags = 0, $add$ptr = 0, $add$ptr4 = 0, $and = 0, $and6 = 0, $cond = 0, $offset_to_base$0 = 0, $shr = 0, $tobool = 0, $tobool7 = 0, $vfn = 0, $vtable3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $__offset_flags = ((($this)) + 4|0);
 $0 = HEAP32[$__offset_flags>>2]|0;
 $shr = $0 >> 8;
 $and = $0 & 1;
 $tobool = ($and|0)==(0);
 if ($tobool) {
  $offset_to_base$0 = $shr;
 } else {
  $1 = HEAP32[$adjustedPtr>>2]|0;
  $add$ptr = (($1) + ($shr)|0);
  $2 = HEAP32[$add$ptr>>2]|0;
  $offset_to_base$0 = $2;
 }
 $3 = HEAP32[$this>>2]|0;
 $vtable3 = HEAP32[$3>>2]|0;
 $vfn = ((($vtable3)) + 28|0);
 $4 = HEAP32[$vfn>>2]|0;
 $add$ptr4 = (($adjustedPtr) + ($offset_to_base$0)|0);
 $and6 = $0 & 2;
 $tobool7 = ($and6|0)!=(0);
 $cond = $tobool7 ? $path_below : 2;
 FUNCTION_TABLE_viiii[$4 & 511]($3,$info,$add$ptr4,$cond);
 return;
}
function __ZNK10__cxxabiv122__base_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($this,$info,$dst_ptr,$current_ptr,$path_below,$use_strcmp) {
 $this = $this|0;
 $info = $info|0;
 $dst_ptr = $dst_ptr|0;
 $current_ptr = $current_ptr|0;
 $path_below = $path_below|0;
 $use_strcmp = $use_strcmp|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $__offset_flags = 0, $add$ptr = 0, $add$ptr4 = 0, $and = 0, $and6 = 0, $cond = 0, $offset_to_base$0 = 0, $shr = 0, $tobool = 0, $tobool7 = 0, $vfn = 0, $vtable3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $__offset_flags = ((($this)) + 4|0);
 $0 = HEAP32[$__offset_flags>>2]|0;
 $shr = $0 >> 8;
 $and = $0 & 1;
 $tobool = ($and|0)==(0);
 if ($tobool) {
  $offset_to_base$0 = $shr;
 } else {
  $1 = HEAP32[$current_ptr>>2]|0;
  $add$ptr = (($1) + ($shr)|0);
  $2 = HEAP32[$add$ptr>>2]|0;
  $offset_to_base$0 = $2;
 }
 $3 = HEAP32[$this>>2]|0;
 $vtable3 = HEAP32[$3>>2]|0;
 $vfn = ((($vtable3)) + 20|0);
 $4 = HEAP32[$vfn>>2]|0;
 $add$ptr4 = (($current_ptr) + ($offset_to_base$0)|0);
 $and6 = $0 & 2;
 $tobool7 = ($and6|0)!=(0);
 $cond = $tobool7 ? $path_below : 2;
 FUNCTION_TABLE_viiiiii[$4 & 511]($3,$info,$dst_ptr,$add$ptr4,$cond,$use_strcmp);
 return;
}
function __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($this,$info,$current_ptr,$path_below,$use_strcmp) {
 $this = $this|0;
 $info = $info|0;
 $current_ptr = $current_ptr|0;
 $path_below = $path_below|0;
 $use_strcmp = $use_strcmp|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $__offset_flags = 0, $add$ptr = 0, $add$ptr4 = 0, $and = 0, $and6 = 0, $cond = 0, $offset_to_base$0 = 0, $shr = 0, $tobool = 0, $tobool7 = 0, $vfn = 0, $vtable3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $__offset_flags = ((($this)) + 4|0);
 $0 = HEAP32[$__offset_flags>>2]|0;
 $shr = $0 >> 8;
 $and = $0 & 1;
 $tobool = ($and|0)==(0);
 if ($tobool) {
  $offset_to_base$0 = $shr;
 } else {
  $1 = HEAP32[$current_ptr>>2]|0;
  $add$ptr = (($1) + ($shr)|0);
  $2 = HEAP32[$add$ptr>>2]|0;
  $offset_to_base$0 = $2;
 }
 $3 = HEAP32[$this>>2]|0;
 $vtable3 = HEAP32[$3>>2]|0;
 $vfn = ((($vtable3)) + 24|0);
 $4 = HEAP32[$vfn>>2]|0;
 $add$ptr4 = (($current_ptr) + ($offset_to_base$0)|0);
 $and6 = $0 & 2;
 $tobool7 = ($and6|0)!=(0);
 $cond = $tobool7 ? $path_below : 2;
 FUNCTION_TABLE_viiiii[$4 & 511]($3,$info,$add$ptr4,$cond,$use_strcmp);
 return;
}
function __ZNSt8bad_castC2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = (9708);
 return;
}
function ___cxa_guard_acquire($p) {
 $p = $p|0;
 var $0 = 0, $cmp = 0, $retval$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[$p>>0]|0;
 $cmp = ($0<<24>>24)==(1);
 if ($cmp) {
  $retval$0 = 0;
 } else {
  HEAP8[$p>>0] = 1;
  $retval$0 = 1;
 }
 return ($retval$0|0);
}
function ___cxa_guard_release($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function ___cxa_guard_abort($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNSt9bad_allocC2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = (9628);
 return;
}
function __ZSt15get_new_handlerv() {
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[5505]|0;HEAP32[5505] = (($0+0)|0);
 $1 = $0;
 return ($1|0);
}
function ___cxa_can_catch($catchType,$excpType,$thrown) {
 $catchType = $catchType|0;
 $excpType = $excpType|0;
 $thrown = $thrown|0;
 var $0 = 0, $1 = 0, $2 = 0, $call = 0, $conv = 0, $temp = 0, $vfn = 0, $vtable = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $temp = sp;
 $0 = HEAP32[$thrown>>2]|0;
 HEAP32[$temp>>2] = $0;
 $vtable = HEAP32[$catchType>>2]|0;
 $vfn = ((($vtable)) + 16|0);
 $1 = HEAP32[$vfn>>2]|0;
 $call = (FUNCTION_TABLE_iiii[$1 & 1023]($catchType,$excpType,$temp)|0);
 $conv = $call&1;
 if ($call) {
  $2 = HEAP32[$temp>>2]|0;
  HEAP32[$thrown>>2] = $2;
 }
 STACKTOP = sp;return ($conv|0);
}
function ___cxa_is_pointer_type($type) {
 $type = $type|0;
 var $0 = 0, $1 = 0, $2 = 0, $conv = 0, $phitmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($type|0)==(0|0);
 if ($0) {
  $2 = 0;
 } else {
  $1 = (___dynamic_cast($type,1848,1984,0)|0);
  $phitmp = ($1|0)!=(0|0);
  $2 = $phitmp;
 }
 $conv = $2&1;
 return ($conv|0);
}
function runPostSets() {
}
function _i64Subtract(a, b, c, d) {
    a = a|0; b = b|0; c = c|0; d = d|0;
    var l = 0, h = 0;
    l = (a - c)>>>0;
    h = (b - d)>>>0;
    h = (b - d - (((c>>>0) > (a>>>0))|0))>>>0; // Borrow one from high word to low word on underflow.
    return ((tempRet0 = h,l|0)|0);
}
function _i64Add(a, b, c, d) {
    /*
      x = a + b*2^32
      y = c + d*2^32
      result = l + h*2^32
    */
    a = a|0; b = b|0; c = c|0; d = d|0;
    var l = 0, h = 0;
    l = (a + c)>>>0;
    h = (b + d + (((l>>>0) < (a>>>0))|0))>>>0; // Add carry from low word to high word on overflow.
    return ((tempRet0 = h,l|0)|0);
}
function _memset(ptr, value, num) {
    ptr = ptr|0; value = value|0; num = num|0;
    var end = 0, aligned_end = 0, block_aligned_end = 0, value4 = 0;
    end = (ptr + num)|0;

    value = value & 0xff;
    if ((num|0) >= 67 /* 64 bytes for an unrolled loop + 3 bytes for unaligned head*/) {
      while ((ptr&3) != 0) {
        HEAP8[((ptr)>>0)]=value;
        ptr = (ptr+1)|0;
      }

      aligned_end = (end & -4)|0;
      block_aligned_end = (aligned_end - 64)|0;
      value4 = value | (value << 8) | (value << 16) | (value << 24);

      while((ptr|0) <= (block_aligned_end|0)) {
        HEAP32[((ptr)>>2)]=value4;
        HEAP32[(((ptr)+(4))>>2)]=value4;
        HEAP32[(((ptr)+(8))>>2)]=value4;
        HEAP32[(((ptr)+(12))>>2)]=value4;
        HEAP32[(((ptr)+(16))>>2)]=value4;
        HEAP32[(((ptr)+(20))>>2)]=value4;
        HEAP32[(((ptr)+(24))>>2)]=value4;
        HEAP32[(((ptr)+(28))>>2)]=value4;
        HEAP32[(((ptr)+(32))>>2)]=value4;
        HEAP32[(((ptr)+(36))>>2)]=value4;
        HEAP32[(((ptr)+(40))>>2)]=value4;
        HEAP32[(((ptr)+(44))>>2)]=value4;
        HEAP32[(((ptr)+(48))>>2)]=value4;
        HEAP32[(((ptr)+(52))>>2)]=value4;
        HEAP32[(((ptr)+(56))>>2)]=value4;
        HEAP32[(((ptr)+(60))>>2)]=value4;
        ptr = (ptr + 64)|0;
      }

      while ((ptr|0) < (aligned_end|0) ) {
        HEAP32[((ptr)>>2)]=value4;
        ptr = (ptr+4)|0;
      }
    }
    // The remaining bytes.
    while ((ptr|0) < (end|0)) {
      HEAP8[((ptr)>>0)]=value;
      ptr = (ptr+1)|0;
    }
    return (end-num)|0;
}
function _pthread_mutex_lock(x) {
    x = x | 0;
    return 0;
}
function _bitshift64Lshr(low, high, bits) {
    low = low|0; high = high|0; bits = bits|0;
    var ander = 0;
    if ((bits|0) < 32) {
      ander = ((1 << bits) - 1)|0;
      tempRet0 = high >>> bits;
      return (low >>> bits) | ((high&ander) << (32 - bits));
    }
    tempRet0 = 0;
    return (high >>> (bits - 32))|0;
}
function _pthread_cond_broadcast(x) {
    x = x | 0;
    return 0;
}
function _memcpy(dest, src, num) {
    dest = dest|0; src = src|0; num = num|0;
    var ret = 0;
    var aligned_dest_end = 0;
    var block_aligned_dest_end = 0;
    var dest_end = 0;
    // Test against a benchmarked cutoff limit for when HEAPU8.set() becomes faster to use.
    if ((num|0) >=
      8192
    ) {
      return _emscripten_memcpy_big(dest|0, src|0, num|0)|0;
    }

    ret = dest|0;
    dest_end = (dest + num)|0;
    if ((dest&3) == (src&3)) {
      // The initial unaligned < 4-byte front.
      while (dest & 3) {
        if ((num|0) == 0) return ret|0;
        HEAP8[((dest)>>0)]=((HEAP8[((src)>>0)])|0);
        dest = (dest+1)|0;
        src = (src+1)|0;
        num = (num-1)|0;
      }
      aligned_dest_end = (dest_end & -4)|0;
      block_aligned_dest_end = (aligned_dest_end - 64)|0;
      while ((dest|0) <= (block_aligned_dest_end|0) ) {
        HEAP32[((dest)>>2)]=((HEAP32[((src)>>2)])|0);
        HEAP32[(((dest)+(4))>>2)]=((HEAP32[(((src)+(4))>>2)])|0);
        HEAP32[(((dest)+(8))>>2)]=((HEAP32[(((src)+(8))>>2)])|0);
        HEAP32[(((dest)+(12))>>2)]=((HEAP32[(((src)+(12))>>2)])|0);
        HEAP32[(((dest)+(16))>>2)]=((HEAP32[(((src)+(16))>>2)])|0);
        HEAP32[(((dest)+(20))>>2)]=((HEAP32[(((src)+(20))>>2)])|0);
        HEAP32[(((dest)+(24))>>2)]=((HEAP32[(((src)+(24))>>2)])|0);
        HEAP32[(((dest)+(28))>>2)]=((HEAP32[(((src)+(28))>>2)])|0);
        HEAP32[(((dest)+(32))>>2)]=((HEAP32[(((src)+(32))>>2)])|0);
        HEAP32[(((dest)+(36))>>2)]=((HEAP32[(((src)+(36))>>2)])|0);
        HEAP32[(((dest)+(40))>>2)]=((HEAP32[(((src)+(40))>>2)])|0);
        HEAP32[(((dest)+(44))>>2)]=((HEAP32[(((src)+(44))>>2)])|0);
        HEAP32[(((dest)+(48))>>2)]=((HEAP32[(((src)+(48))>>2)])|0);
        HEAP32[(((dest)+(52))>>2)]=((HEAP32[(((src)+(52))>>2)])|0);
        HEAP32[(((dest)+(56))>>2)]=((HEAP32[(((src)+(56))>>2)])|0);
        HEAP32[(((dest)+(60))>>2)]=((HEAP32[(((src)+(60))>>2)])|0);
        dest = (dest+64)|0;
        src = (src+64)|0;
      }
      while ((dest|0) < (aligned_dest_end|0) ) {
        HEAP32[((dest)>>2)]=((HEAP32[((src)>>2)])|0);
        dest = (dest+4)|0;
        src = (src+4)|0;
      }
    } else {
      // In the unaligned copy case, unroll a bit as well.
      aligned_dest_end = (dest_end - 4)|0;
      while ((dest|0) < (aligned_dest_end|0) ) {
        HEAP8[((dest)>>0)]=((HEAP8[((src)>>0)])|0);
        HEAP8[(((dest)+(1))>>0)]=((HEAP8[(((src)+(1))>>0)])|0);
        HEAP8[(((dest)+(2))>>0)]=((HEAP8[(((src)+(2))>>0)])|0);
        HEAP8[(((dest)+(3))>>0)]=((HEAP8[(((src)+(3))>>0)])|0);
        dest = (dest+4)|0;
        src = (src+4)|0;
      }
    }
    // The remaining unaligned < 4 byte tail.
    while ((dest|0) < (dest_end|0)) {
      HEAP8[((dest)>>0)]=((HEAP8[((src)>>0)])|0);
      dest = (dest+1)|0;
      src = (src+1)|0;
    }
    return ret|0;
}
function _llvm_cttz_i32(x) {
    x = x|0;
    var ret = 0;
    ret = ((HEAP8[(((cttz_i8)+(x & 0xff))>>0)])|0);
    if ((ret|0) < 8) return ret|0;
    ret = ((HEAP8[(((cttz_i8)+((x >> 8)&0xff))>>0)])|0);
    if ((ret|0) < 8) return (ret + 8)|0;
    ret = ((HEAP8[(((cttz_i8)+((x >> 16)&0xff))>>0)])|0);
    if ((ret|0) < 8) return (ret + 16)|0;
    return (((HEAP8[(((cttz_i8)+(x >>> 24))>>0)])|0) + 24)|0;
}
function ___udivmoddi4($a$0, $a$1, $b$0, $b$1, $rem) {
    $a$0 = $a$0 | 0;
    $a$1 = $a$1 | 0;
    $b$0 = $b$0 | 0;
    $b$1 = $b$1 | 0;
    $rem = $rem | 0;
    var $n_sroa_0_0_extract_trunc = 0, $n_sroa_1_4_extract_shift$0 = 0, $n_sroa_1_4_extract_trunc = 0, $d_sroa_0_0_extract_trunc = 0, $d_sroa_1_4_extract_shift$0 = 0, $d_sroa_1_4_extract_trunc = 0, $4 = 0, $17 = 0, $37 = 0, $49 = 0, $51 = 0, $57 = 0, $58 = 0, $66 = 0, $78 = 0, $86 = 0, $88 = 0, $89 = 0, $91 = 0, $92 = 0, $95 = 0, $105 = 0, $117 = 0, $119 = 0, $125 = 0, $126 = 0, $130 = 0, $q_sroa_1_1_ph = 0, $q_sroa_0_1_ph = 0, $r_sroa_1_1_ph = 0, $r_sroa_0_1_ph = 0, $sr_1_ph = 0, $d_sroa_0_0_insert_insert99$0 = 0, $d_sroa_0_0_insert_insert99$1 = 0, $137$0 = 0, $137$1 = 0, $carry_0203 = 0, $sr_1202 = 0, $r_sroa_0_1201 = 0, $r_sroa_1_1200 = 0, $q_sroa_0_1199 = 0, $q_sroa_1_1198 = 0, $147 = 0, $149 = 0, $r_sroa_0_0_insert_insert42$0 = 0, $r_sroa_0_0_insert_insert42$1 = 0, $150$1 = 0, $151$0 = 0, $152 = 0, $154$0 = 0, $r_sroa_0_0_extract_trunc = 0, $r_sroa_1_4_extract_trunc = 0, $155 = 0, $carry_0_lcssa$0 = 0, $carry_0_lcssa$1 = 0, $r_sroa_0_1_lcssa = 0, $r_sroa_1_1_lcssa = 0, $q_sroa_0_1_lcssa = 0, $q_sroa_1_1_lcssa = 0, $q_sroa_0_0_insert_ext75$0 = 0, $q_sroa_0_0_insert_ext75$1 = 0, $q_sroa_0_0_insert_insert77$1 = 0, $_0$0 = 0, $_0$1 = 0;
    $n_sroa_0_0_extract_trunc = $a$0;
    $n_sroa_1_4_extract_shift$0 = $a$1;
    $n_sroa_1_4_extract_trunc = $n_sroa_1_4_extract_shift$0;
    $d_sroa_0_0_extract_trunc = $b$0;
    $d_sroa_1_4_extract_shift$0 = $b$1;
    $d_sroa_1_4_extract_trunc = $d_sroa_1_4_extract_shift$0;
    if (($n_sroa_1_4_extract_trunc | 0) == 0) {
      $4 = ($rem | 0) != 0;
      if (($d_sroa_1_4_extract_trunc | 0) == 0) {
        if ($4) {
          HEAP32[$rem >> 2] = ($n_sroa_0_0_extract_trunc >>> 0) % ($d_sroa_0_0_extract_trunc >>> 0);
          HEAP32[$rem + 4 >> 2] = 0;
        }
        $_0$1 = 0;
        $_0$0 = ($n_sroa_0_0_extract_trunc >>> 0) / ($d_sroa_0_0_extract_trunc >>> 0) >>> 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      } else {
        if (!$4) {
          $_0$1 = 0;
          $_0$0 = 0;
          return (tempRet0 = $_0$1, $_0$0) | 0;
        }
        HEAP32[$rem >> 2] = $a$0 & -1;
        HEAP32[$rem + 4 >> 2] = $a$1 & 0;
        $_0$1 = 0;
        $_0$0 = 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
    }
    $17 = ($d_sroa_1_4_extract_trunc | 0) == 0;
    do {
      if (($d_sroa_0_0_extract_trunc | 0) == 0) {
        if ($17) {
          if (($rem | 0) != 0) {
            HEAP32[$rem >> 2] = ($n_sroa_1_4_extract_trunc >>> 0) % ($d_sroa_0_0_extract_trunc >>> 0);
            HEAP32[$rem + 4 >> 2] = 0;
          }
          $_0$1 = 0;
          $_0$0 = ($n_sroa_1_4_extract_trunc >>> 0) / ($d_sroa_0_0_extract_trunc >>> 0) >>> 0;
          return (tempRet0 = $_0$1, $_0$0) | 0;
        }
        if (($n_sroa_0_0_extract_trunc | 0) == 0) {
          if (($rem | 0) != 0) {
            HEAP32[$rem >> 2] = 0;
            HEAP32[$rem + 4 >> 2] = ($n_sroa_1_4_extract_trunc >>> 0) % ($d_sroa_1_4_extract_trunc >>> 0);
          }
          $_0$1 = 0;
          $_0$0 = ($n_sroa_1_4_extract_trunc >>> 0) / ($d_sroa_1_4_extract_trunc >>> 0) >>> 0;
          return (tempRet0 = $_0$1, $_0$0) | 0;
        }
        $37 = $d_sroa_1_4_extract_trunc - 1 | 0;
        if (($37 & $d_sroa_1_4_extract_trunc | 0) == 0) {
          if (($rem | 0) != 0) {
            HEAP32[$rem >> 2] = 0 | $a$0 & -1;
            HEAP32[$rem + 4 >> 2] = $37 & $n_sroa_1_4_extract_trunc | $a$1 & 0;
          }
          $_0$1 = 0;
          $_0$0 = $n_sroa_1_4_extract_trunc >>> ((_llvm_cttz_i32($d_sroa_1_4_extract_trunc | 0) | 0) >>> 0);
          return (tempRet0 = $_0$1, $_0$0) | 0;
        }
        $49 = Math_clz32($d_sroa_1_4_extract_trunc | 0) | 0;
        $51 = $49 - (Math_clz32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
        if ($51 >>> 0 <= 30) {
          $57 = $51 + 1 | 0;
          $58 = 31 - $51 | 0;
          $sr_1_ph = $57;
          $r_sroa_0_1_ph = $n_sroa_1_4_extract_trunc << $58 | $n_sroa_0_0_extract_trunc >>> ($57 >>> 0);
          $r_sroa_1_1_ph = $n_sroa_1_4_extract_trunc >>> ($57 >>> 0);
          $q_sroa_0_1_ph = 0;
          $q_sroa_1_1_ph = $n_sroa_0_0_extract_trunc << $58;
          break;
        }
        if (($rem | 0) == 0) {
          $_0$1 = 0;
          $_0$0 = 0;
          return (tempRet0 = $_0$1, $_0$0) | 0;
        }
        HEAP32[$rem >> 2] = 0 | $a$0 & -1;
        HEAP32[$rem + 4 >> 2] = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
        $_0$1 = 0;
        $_0$0 = 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      } else {
        if (!$17) {
          $117 = Math_clz32($d_sroa_1_4_extract_trunc | 0) | 0;
          $119 = $117 - (Math_clz32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
          if ($119 >>> 0 <= 31) {
            $125 = $119 + 1 | 0;
            $126 = 31 - $119 | 0;
            $130 = $119 - 31 >> 31;
            $sr_1_ph = $125;
            $r_sroa_0_1_ph = $n_sroa_0_0_extract_trunc >>> ($125 >>> 0) & $130 | $n_sroa_1_4_extract_trunc << $126;
            $r_sroa_1_1_ph = $n_sroa_1_4_extract_trunc >>> ($125 >>> 0) & $130;
            $q_sroa_0_1_ph = 0;
            $q_sroa_1_1_ph = $n_sroa_0_0_extract_trunc << $126;
            break;
          }
          if (($rem | 0) == 0) {
            $_0$1 = 0;
            $_0$0 = 0;
            return (tempRet0 = $_0$1, $_0$0) | 0;
          }
          HEAP32[$rem >> 2] = 0 | $a$0 & -1;
          HEAP32[$rem + 4 >> 2] = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
          $_0$1 = 0;
          $_0$0 = 0;
          return (tempRet0 = $_0$1, $_0$0) | 0;
        }
        $66 = $d_sroa_0_0_extract_trunc - 1 | 0;
        if (($66 & $d_sroa_0_0_extract_trunc | 0) != 0) {
          $86 = (Math_clz32($d_sroa_0_0_extract_trunc | 0) | 0) + 33 | 0;
          $88 = $86 - (Math_clz32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
          $89 = 64 - $88 | 0;
          $91 = 32 - $88 | 0;
          $92 = $91 >> 31;
          $95 = $88 - 32 | 0;
          $105 = $95 >> 31;
          $sr_1_ph = $88;
          $r_sroa_0_1_ph = $91 - 1 >> 31 & $n_sroa_1_4_extract_trunc >>> ($95 >>> 0) | ($n_sroa_1_4_extract_trunc << $91 | $n_sroa_0_0_extract_trunc >>> ($88 >>> 0)) & $105;
          $r_sroa_1_1_ph = $105 & $n_sroa_1_4_extract_trunc >>> ($88 >>> 0);
          $q_sroa_0_1_ph = $n_sroa_0_0_extract_trunc << $89 & $92;
          $q_sroa_1_1_ph = ($n_sroa_1_4_extract_trunc << $89 | $n_sroa_0_0_extract_trunc >>> ($95 >>> 0)) & $92 | $n_sroa_0_0_extract_trunc << $91 & $88 - 33 >> 31;
          break;
        }
        if (($rem | 0) != 0) {
          HEAP32[$rem >> 2] = $66 & $n_sroa_0_0_extract_trunc;
          HEAP32[$rem + 4 >> 2] = 0;
        }
        if (($d_sroa_0_0_extract_trunc | 0) == 1) {
          $_0$1 = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
          $_0$0 = 0 | $a$0 & -1;
          return (tempRet0 = $_0$1, $_0$0) | 0;
        } else {
          $78 = _llvm_cttz_i32($d_sroa_0_0_extract_trunc | 0) | 0;
          $_0$1 = 0 | $n_sroa_1_4_extract_trunc >>> ($78 >>> 0);
          $_0$0 = $n_sroa_1_4_extract_trunc << 32 - $78 | $n_sroa_0_0_extract_trunc >>> ($78 >>> 0) | 0;
          return (tempRet0 = $_0$1, $_0$0) | 0;
        }
      }
    } while (0);
    if (($sr_1_ph | 0) == 0) {
      $q_sroa_1_1_lcssa = $q_sroa_1_1_ph;
      $q_sroa_0_1_lcssa = $q_sroa_0_1_ph;
      $r_sroa_1_1_lcssa = $r_sroa_1_1_ph;
      $r_sroa_0_1_lcssa = $r_sroa_0_1_ph;
      $carry_0_lcssa$1 = 0;
      $carry_0_lcssa$0 = 0;
    } else {
      $d_sroa_0_0_insert_insert99$0 = 0 | $b$0 & -1;
      $d_sroa_0_0_insert_insert99$1 = $d_sroa_1_4_extract_shift$0 | $b$1 & 0;
      $137$0 = _i64Add($d_sroa_0_0_insert_insert99$0 | 0, $d_sroa_0_0_insert_insert99$1 | 0, -1, -1) | 0;
      $137$1 = tempRet0;
      $q_sroa_1_1198 = $q_sroa_1_1_ph;
      $q_sroa_0_1199 = $q_sroa_0_1_ph;
      $r_sroa_1_1200 = $r_sroa_1_1_ph;
      $r_sroa_0_1201 = $r_sroa_0_1_ph;
      $sr_1202 = $sr_1_ph;
      $carry_0203 = 0;
      while (1) {
        $147 = $q_sroa_0_1199 >>> 31 | $q_sroa_1_1198 << 1;
        $149 = $carry_0203 | $q_sroa_0_1199 << 1;
        $r_sroa_0_0_insert_insert42$0 = 0 | ($r_sroa_0_1201 << 1 | $q_sroa_1_1198 >>> 31);
        $r_sroa_0_0_insert_insert42$1 = $r_sroa_0_1201 >>> 31 | $r_sroa_1_1200 << 1 | 0;
        _i64Subtract($137$0 | 0, $137$1 | 0, $r_sroa_0_0_insert_insert42$0 | 0, $r_sroa_0_0_insert_insert42$1 | 0) | 0;
        $150$1 = tempRet0;
        $151$0 = $150$1 >> 31 | (($150$1 | 0) < 0 ? -1 : 0) << 1;
        $152 = $151$0 & 1;
        $154$0 = _i64Subtract($r_sroa_0_0_insert_insert42$0 | 0, $r_sroa_0_0_insert_insert42$1 | 0, $151$0 & $d_sroa_0_0_insert_insert99$0 | 0, ((($150$1 | 0) < 0 ? -1 : 0) >> 31 | (($150$1 | 0) < 0 ? -1 : 0) << 1) & $d_sroa_0_0_insert_insert99$1 | 0) | 0;
        $r_sroa_0_0_extract_trunc = $154$0;
        $r_sroa_1_4_extract_trunc = tempRet0;
        $155 = $sr_1202 - 1 | 0;
        if (($155 | 0) == 0) {
          break;
        } else {
          $q_sroa_1_1198 = $147;
          $q_sroa_0_1199 = $149;
          $r_sroa_1_1200 = $r_sroa_1_4_extract_trunc;
          $r_sroa_0_1201 = $r_sroa_0_0_extract_trunc;
          $sr_1202 = $155;
          $carry_0203 = $152;
        }
      }
      $q_sroa_1_1_lcssa = $147;
      $q_sroa_0_1_lcssa = $149;
      $r_sroa_1_1_lcssa = $r_sroa_1_4_extract_trunc;
      $r_sroa_0_1_lcssa = $r_sroa_0_0_extract_trunc;
      $carry_0_lcssa$1 = 0;
      $carry_0_lcssa$0 = $152;
    }
    $q_sroa_0_0_insert_ext75$0 = $q_sroa_0_1_lcssa;
    $q_sroa_0_0_insert_ext75$1 = 0;
    $q_sroa_0_0_insert_insert77$1 = $q_sroa_1_1_lcssa | $q_sroa_0_0_insert_ext75$1;
    if (($rem | 0) != 0) {
      HEAP32[$rem >> 2] = 0 | $r_sroa_0_1_lcssa;
      HEAP32[$rem + 4 >> 2] = $r_sroa_1_1_lcssa | 0;
    }
    $_0$1 = (0 | $q_sroa_0_0_insert_ext75$0) >>> 31 | $q_sroa_0_0_insert_insert77$1 << 1 | ($q_sroa_0_0_insert_ext75$1 << 1 | $q_sroa_0_0_insert_ext75$0 >>> 31) & 0 | $carry_0_lcssa$1;
    $_0$0 = ($q_sroa_0_0_insert_ext75$0 << 1 | 0 >>> 31) & -2 | $carry_0_lcssa$0;
    return (tempRet0 = $_0$1, $_0$0) | 0;
}
function ___udivdi3($a$0, $a$1, $b$0, $b$1) {
    $a$0 = $a$0 | 0;
    $a$1 = $a$1 | 0;
    $b$0 = $b$0 | 0;
    $b$1 = $b$1 | 0;
    var $1$0 = 0;
    $1$0 = ___udivmoddi4($a$0, $a$1, $b$0, $b$1, 0) | 0;
    return $1$0 | 0;
}
function ___muldsi3($a, $b) {
    $a = $a | 0;
    $b = $b | 0;
    var $1 = 0, $2 = 0, $3 = 0, $6 = 0, $8 = 0, $11 = 0, $12 = 0;
    $1 = $a & 65535;
    $2 = $b & 65535;
    $3 = Math_imul($2, $1) | 0;
    $6 = $a >>> 16;
    $8 = ($3 >>> 16) + (Math_imul($2, $6) | 0) | 0;
    $11 = $b >>> 16;
    $12 = Math_imul($11, $1) | 0;
    return (tempRet0 = (($8 >>> 16) + (Math_imul($11, $6) | 0) | 0) + ((($8 & 65535) + $12 | 0) >>> 16) | 0, 0 | ($8 + $12 << 16 | $3 & 65535)) | 0;
}
function ___muldi3($a$0, $a$1, $b$0, $b$1) {
    $a$0 = $a$0 | 0;
    $a$1 = $a$1 | 0;
    $b$0 = $b$0 | 0;
    $b$1 = $b$1 | 0;
    var $x_sroa_0_0_extract_trunc = 0, $y_sroa_0_0_extract_trunc = 0, $1$0 = 0, $1$1 = 0, $2 = 0;
    $x_sroa_0_0_extract_trunc = $a$0;
    $y_sroa_0_0_extract_trunc = $b$0;
    $1$0 = ___muldsi3($x_sroa_0_0_extract_trunc, $y_sroa_0_0_extract_trunc) | 0;
    $1$1 = tempRet0;
    $2 = Math_imul($a$1, $y_sroa_0_0_extract_trunc) | 0;
    return (tempRet0 = ((Math_imul($b$1, $x_sroa_0_0_extract_trunc) | 0) + $2 | 0) + $1$1 | $1$1 & 0, 0 | $1$0 & -1) | 0;
}
function _sbrk(increment) {
    increment = increment|0;
    var oldDynamicTop = 0;
    var oldDynamicTopOnChange = 0;
    var newDynamicTop = 0;
    var totalMemory = 0;
    increment = ((increment + 15) & -16)|0;
    oldDynamicTop = HEAP32[DYNAMICTOP_PTR>>2]|0;
    newDynamicTop = oldDynamicTop + increment | 0;

    if (((increment|0) > 0 & (newDynamicTop|0) < (oldDynamicTop|0)) // Detect and fail if we would wrap around signed 32-bit int.
      | (newDynamicTop|0) < 0) { // Also underflow, sbrk() should be able to be used to subtract.
      abortOnCannotGrowMemory()|0;
      ___setErrNo(12);
      return -1;
    }

    HEAP32[DYNAMICTOP_PTR>>2] = newDynamicTop;
    totalMemory = getTotalMemory()|0;
    if ((newDynamicTop|0) > (totalMemory|0)) {
      if ((enlargeMemory()|0) == 0) {
        ___setErrNo(12);
        HEAP32[DYNAMICTOP_PTR>>2] = oldDynamicTop;
        return -1;
      }
    }
    return oldDynamicTop|0;
}
function _bitshift64Shl(low, high, bits) {
    low = low|0; high = high|0; bits = bits|0;
    var ander = 0;
    if ((bits|0) < 32) {
      ander = ((1 << bits) - 1)|0;
      tempRet0 = (high << bits) | ((low&(ander << (32 - bits))) >>> (32 - bits));
      return low << bits;
    }
    tempRet0 = low << (bits - 32);
    return 0;
}
function _memmove(dest, src, num) {
    dest = dest|0; src = src|0; num = num|0;
    var ret = 0;
    if (((src|0) < (dest|0)) & ((dest|0) < ((src + num)|0))) {
      // Unlikely case: Copy backwards in a safe manner
      ret = dest;
      src = (src + num)|0;
      dest = (dest + num)|0;
      while ((num|0) > 0) {
        dest = (dest - 1)|0;
        src = (src - 1)|0;
        num = (num - 1)|0;
        HEAP8[((dest)>>0)]=((HEAP8[((src)>>0)])|0);
      }
      dest = ret;
    } else {
      _memcpy(dest, src, num) | 0;
    }
    return dest | 0;
}
function ___uremdi3($a$0, $a$1, $b$0, $b$1) {
    $a$0 = $a$0 | 0;
    $a$1 = $a$1 | 0;
    $b$0 = $b$0 | 0;
    $b$1 = $b$1 | 0;
    var $rem = 0, __stackBase__ = 0;
    __stackBase__ = STACKTOP;
    STACKTOP = STACKTOP + 16 | 0;
    $rem = __stackBase__ | 0;
    ___udivmoddi4($a$0, $a$1, $b$0, $b$1, $rem) | 0;
    STACKTOP = __stackBase__;
    return (tempRet0 = HEAP32[$rem + 4 >> 2] | 0, HEAP32[$rem >> 2] | 0) | 0;
}
function _pthread_mutex_unlock(x) {
    x = x | 0;
    return 0;
}
function _llvm_bswap_i32(x) {
    x = x|0;
    return (((x&0xff)<<24) | (((x>>8)&0xff)<<16) | (((x>>16)&0xff)<<8) | (x>>>24))|0;
}
function _llvm_bswap_i16(x) {
    x = x|0;
    return (((x&0xff)<<8) | ((x>>8)&0xff))|0;
}

  
function dynCall_iiiiiiii(index,a1,a2,a3,a4,a5,a6,a7) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0; a7=a7|0;
  return FUNCTION_TABLE_iiiiiiii[index&511](a1|0,a2|0,a3|0,a4|0,a5|0,a6|0,a7|0)|0;
}


function dynCall_viiiii(index,a1,a2,a3,a4,a5) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0;
  FUNCTION_TABLE_viiiii[index&511](a1|0,a2|0,a3|0,a4|0,a5|0);
}


function dynCall_iiiiiid(index,a1,a2,a3,a4,a5,a6) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=+a6;
  return FUNCTION_TABLE_iiiiiid[index&255](a1|0,a2|0,a3|0,a4|0,a5|0,+a6)|0;
}


function dynCall_vi(index,a1) {
  index = index|0;
  a1=a1|0;
  FUNCTION_TABLE_vi[index&1023](a1|0);
}


function dynCall_vii(index,a1,a2) {
  index = index|0;
  a1=a1|0; a2=a2|0;
  FUNCTION_TABLE_vii[index&1023](a1|0,a2|0);
}


function dynCall_iiiiiiiiiii(index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0; a7=a7|0; a8=a8|0; a9=a9|0; a10=a10|0;
  return FUNCTION_TABLE_iiiiiiiiiii[index&511](a1|0,a2|0,a3|0,a4|0,a5|0,a6|0,a7|0,a8|0,a9|0,a10|0)|0;
}


function dynCall_ii(index,a1) {
  index = index|0;
  a1=a1|0;
  return FUNCTION_TABLE_ii[index&1023](a1|0)|0;
}


function dynCall_iiiiiiiiiiii(index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0; a7=a7|0; a8=a8|0; a9=a9|0; a10=a10|0; a11=a11|0;
  return FUNCTION_TABLE_iiiiiiiiiiii[index&511](a1|0,a2|0,a3|0,a4|0,a5|0,a6|0,a7|0,a8|0,a9|0,a10|0,a11|0)|0;
}


function dynCall_iiii(index,a1,a2,a3) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0;
  return FUNCTION_TABLE_iiii[index&1023](a1|0,a2|0,a3|0)|0;
}


function dynCall_viiiiiiiiiiiiiii(index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12,a13,a14,a15) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0; a7=a7|0; a8=a8|0; a9=a9|0; a10=a10|0; a11=a11|0; a12=a12|0; a13=a13|0; a14=a14|0; a15=a15|0;
  FUNCTION_TABLE_viiiiiiiiiiiiiii[index&511](a1|0,a2|0,a3|0,a4|0,a5|0,a6|0,a7|0,a8|0,a9|0,a10|0,a11|0,a12|0,a13|0,a14|0,a15|0);
}


function dynCall_viiiiii(index,a1,a2,a3,a4,a5,a6) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0;
  FUNCTION_TABLE_viiiiii[index&511](a1|0,a2|0,a3|0,a4|0,a5|0,a6|0);
}


function dynCall_iiiiiii(index,a1,a2,a3,a4,a5,a6) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0;
  return FUNCTION_TABLE_iiiiiii[index&511](a1|0,a2|0,a3|0,a4|0,a5|0,a6|0)|0;
}


function dynCall_iiiiiiiiiiiii(index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0; a7=a7|0; a8=a8|0; a9=a9|0; a10=a10|0; a11=a11|0; a12=a12|0;
  return FUNCTION_TABLE_iiiiiiiiiiiii[index&511](a1|0,a2|0,a3|0,a4|0,a5|0,a6|0,a7|0,a8|0,a9|0,a10|0,a11|0,a12|0)|0;
}


function dynCall_viiiiiii(index,a1,a2,a3,a4,a5,a6,a7) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0; a7=a7|0;
  FUNCTION_TABLE_viiiiiii[index&511](a1|0,a2|0,a3|0,a4|0,a5|0,a6|0,a7|0);
}


function dynCall_viiiiiiiiii(index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0; a7=a7|0; a8=a8|0; a9=a9|0; a10=a10|0;
  FUNCTION_TABLE_viiiiiiiiii[index&511](a1|0,a2|0,a3|0,a4|0,a5|0,a6|0,a7|0,a8|0,a9|0,a10|0);
}


function dynCall_iii(index,a1,a2) {
  index = index|0;
  a1=a1|0; a2=a2|0;
  return FUNCTION_TABLE_iii[index&511](a1|0,a2|0)|0;
}


function dynCall_iiiiii(index,a1,a2,a3,a4,a5) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0;
  return FUNCTION_TABLE_iiiiii[index&511](a1|0,a2|0,a3|0,a4|0,a5|0)|0;
}


function dynCall_diii(index,a1,a2,a3) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0;
  return +FUNCTION_TABLE_diii[index&511](a1|0,a2|0,a3|0);
}


function dynCall_i(index) {
  index = index|0;
  
  return FUNCTION_TABLE_i[index&1023]()|0;
}


function dynCall_iiiii(index,a1,a2,a3,a4) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0;
  return FUNCTION_TABLE_iiiii[index&511](a1|0,a2|0,a3|0,a4|0)|0;
}


function dynCall_viii(index,a1,a2,a3) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0;
  FUNCTION_TABLE_viii[index&1023](a1|0,a2|0,a3|0);
}


function dynCall_v(index) {
  index = index|0;
  
  FUNCTION_TABLE_v[index&1023]();
}


function dynCall_iiiiiiiii(index,a1,a2,a3,a4,a5,a6,a7,a8) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0; a7=a7|0; a8=a8|0;
  return FUNCTION_TABLE_iiiiiiiii[index&511](a1|0,a2|0,a3|0,a4|0,a5|0,a6|0,a7|0,a8|0)|0;
}


function dynCall_iiiiid(index,a1,a2,a3,a4,a5) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=+a5;
  return FUNCTION_TABLE_iiiiid[index&127](a1|0,a2|0,a3|0,a4|0,+a5)|0;
}


function dynCall_viiii(index,a1,a2,a3,a4) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0;
  FUNCTION_TABLE_viiii[index&511](a1|0,a2|0,a3|0,a4|0);
}

function b0(p0,p1,p2,p3,p4,p5,p6) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0;p6 = p6|0; nullFunc_iiiiiiii(0);return 0;
}
function b1(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(1);
}
function b2(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = +p5; nullFunc_iiiiiid(2);return 0;
}
function b3(p0) {
 p0 = p0|0; nullFunc_vi(3);
}
function b4(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(4);
}
function b5(p0,p1,p2,p3,p4,p5,p6,p7,p8,p9) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0;p6 = p6|0;p7 = p7|0;p8 = p8|0;p9 = p9|0; nullFunc_iiiiiiiiiii(5);return 0;
}
function b6(p0) {
 p0 = p0|0; nullFunc_ii(6);return 0;
}
function _pthread_mutex_unlock__wrapper(p0) {
 p0 = p0|0; return _pthread_mutex_unlock(p0|0)|0;
}
function _pthread_mutex_lock__wrapper(p0) {
 p0 = p0|0; return _pthread_mutex_lock(p0|0)|0;
}
function _pthread_cond_broadcast__wrapper(p0) {
 p0 = p0|0; return _pthread_cond_broadcast(p0|0)|0;
}
function b7(p0,p1,p2,p3,p4,p5,p6,p7,p8,p9,p10) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0;p6 = p6|0;p7 = p7|0;p8 = p8|0;p9 = p9|0;p10 = p10|0; nullFunc_iiiiiiiiiiii(7);return 0;
}
function b8(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(8);return 0;
}
function b9(p0,p1,p2,p3,p4,p5,p6,p7,p8,p9,p10,p11,p12,p13,p14) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0;p6 = p6|0;p7 = p7|0;p8 = p8|0;p9 = p9|0;p10 = p10|0;p11 = p11|0;p12 = p12|0;p13 = p13|0;p14 = p14|0; nullFunc_viiiiiiiiiiiiiii(9);
}
function b10(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(10);
}
function b11(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iiiiiii(11);return 0;
}
function b12(p0,p1,p2,p3,p4,p5,p6,p7,p8,p9,p10,p11) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0;p6 = p6|0;p7 = p7|0;p8 = p8|0;p9 = p9|0;p10 = p10|0;p11 = p11|0; nullFunc_iiiiiiiiiiiii(12);return 0;
}
function b13(p0,p1,p2,p3,p4,p5,p6) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0;p6 = p6|0; nullFunc_viiiiiii(13);
}
function b14(p0,p1,p2,p3,p4,p5,p6,p7,p8,p9) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0;p6 = p6|0;p7 = p7|0;p8 = p8|0;p9 = p9|0; nullFunc_viiiiiiiiii(14);
}
function b15(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_iii(15);return 0;
}
function b16(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_iiiiii(16);return 0;
}
function b17(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_diii(17);return +0;
}
function b18() {
 ; nullFunc_i(18);return 0;
}
function b19(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_iiiii(19);return 0;
}
function b20(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(20);
}
function ___cxa_throw__wrapper(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; ___cxa_throw(p0|0,p1|0,p2|0);
}
function b21() {
 ; nullFunc_v(21);
}
function ___cxa_end_catch__wrapper() {
 ; ___cxa_end_catch();
}
function ___cxa_rethrow__wrapper() {
 ; ___cxa_rethrow();
}
function b22(p0,p1,p2,p3,p4,p5,p6,p7) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0;p6 = p6|0;p7 = p7|0; nullFunc_iiiiiiiii(22);return 0;
}
function b23(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = +p4; nullFunc_iiiiid(23);return 0;
}
function b24(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(24);
}

// EMSCRIPTEN_END_FUNCS
var FUNCTION_TABLE_iiiiiiii = [b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,__ZNKSt3__28time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcPK2tmcc,b0,b0,__ZNKSt3__28time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwPK2tmcc,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,__ZNKSt3__29money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_bRNS_8ios_baseERjRe,__ZNKSt3__29money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_bRNS_8ios_baseERjRNS_12basic_stringIcS3_NS_9allocatorIcEEEE,b0,b0,__ZNKSt3__29money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_bRNS_8ios_baseERjRe,__ZNKSt3__29money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_bRNS_8ios_baseERjRNS_12basic_stringIwS3_NS_9allocatorIwEEEE
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,__ZNSt3__214__scan_keywordINS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEPKNS_12basic_stringIcS3_NS_9allocatorIcEEEENS_5ctypeIcEEEET0_RT_SE_SD_SD_RKT1_Rjb,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,__ZNSt3__214__scan_keywordINS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEPKNS_12basic_stringIwS3_NS_9allocatorIwEEEENS_5ctypeIwEEEET0_RT_SE_SD_SD_RKT1_Rjb,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0];
var FUNCTION_TABLE_viiiii = [b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,__ZNK10__cxxabiv117__class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib,b1,b1,b1,__ZNK10__cxxabiv120__si_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,__ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1];
var FUNCTION_TABLE_iiiiiid = [b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,__ZNKSt3__29money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_bRNS_8ios_baseEce,b2,b2,b2,__ZNKSt3__29money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_bRNS_8ios_baseEwe,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2];
var FUNCTION_TABLE_vi = [b3,b3,__ZNSt3__218basic_stringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev,__ZNSt3__218basic_stringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED0Ev,__ZThn8_NSt3__218basic_stringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev,__ZThn8_NSt3__218basic_stringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED0Ev,__ZTv0_n12_NSt3__218basic_stringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev,__ZTv0_n12_NSt3__218basic_stringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED0Ev,__ZNSt3__214basic_iostreamIcNS_11char_traitsIcEEED1Ev,__ZNSt3__214basic_iostreamIcNS_11char_traitsIcEEED0Ev,__ZThn8_NSt3__214basic_iostreamIcNS_11char_traitsIcEEED1Ev,__ZThn8_NSt3__214basic_iostreamIcNS_11char_traitsIcEEED0Ev,__ZTv0_n12_NSt3__214basic_iostreamIcNS_11char_traitsIcEEED1Ev,__ZTv0_n12_NSt3__214basic_iostreamIcNS_11char_traitsIcEEED0Ev,__ZNSt3__213basic_istreamIcNS_11char_traitsIcEEED1Ev,__ZNSt3__213basic_istreamIcNS_11char_traitsIcEEED0Ev,__ZTv0_n12_NSt3__213basic_istreamIcNS_11char_traitsIcEEED1Ev,__ZTv0_n12_NSt3__213basic_istreamIcNS_11char_traitsIcEEED0Ev,__ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEED1Ev,__ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEED0Ev,__ZTv0_n12_NSt3__213basic_ostreamIcNS_11char_traitsIcEEED1Ev,__ZTv0_n12_NSt3__213basic_ostreamIcNS_11char_traitsIcEEED0Ev,__ZNSt3__215basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev,__ZNSt3__215basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEED0Ev,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,__ZNSt3__29basic_iosIcNS_11char_traitsIcEEED2Ev,__ZNSt3__29basic_iosIcNS_11char_traitsIcEEED0Ev,__ZNSt3__28ios_baseD2Ev,__ZNSt3__28ios_baseD0Ev,__ZNSt3__215basic_streambufIcNS_11char_traitsIcEEED2Ev,__ZNSt3__215basic_streambufIcNS_11char_traitsIcEEED0Ev,b3,b3,b3,b3,b3,__ZNSt3__214error_categoryD2Ev,__ZNSt3__219__iostream_categoryD0Ev,b3,b3,b3,b3,b3
,__ZNSt3__28ios_base7failureD2Ev,__ZNSt3__28ios_base7failureD0Ev,b3,__ZNSt3__27collateIcED2Ev,__ZNSt3__27collateIcED0Ev,__ZNSt3__26locale5facet16__on_zero_sharedEv,b3,b3,b3,__ZNSt3__27collateIwED2Ev,__ZNSt3__27collateIwED0Ev,b3,b3,b3,__ZNSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED2Ev,__ZNSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,__ZNSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED2Ev,__ZNSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,__ZNSt3__27num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED2Ev,__ZNSt3__27num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev,b3,b3,b3,b3,b3,b3,b3,b3,__ZNSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED2Ev,__ZNSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev,b3,b3,b3,b3,b3,b3,b3,b3
,__ZNSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED2Ev,__ZNSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,__ZNSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED2Ev,__ZNSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,__ZNSt3__28time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED2Ev,__ZNSt3__28time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev,b3,__ZNSt3__28time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED2Ev,__ZNSt3__28time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev,b3,__ZNSt3__210moneypunctIcLb0EED2Ev,__ZNSt3__210moneypunctIcLb0EED0Ev,b3,b3,b3,b3,b3,b3,b3,b3,b3,__ZNSt3__210moneypunctIcLb1EED2Ev,__ZNSt3__210moneypunctIcLb1EED0Ev,b3,b3,b3,b3,b3,b3,b3,b3,b3
,__ZNSt3__210moneypunctIwLb0EED2Ev,__ZNSt3__210moneypunctIwLb0EED0Ev,b3,b3,b3,b3,b3,b3,b3,b3,b3,__ZNSt3__210moneypunctIwLb1EED2Ev,__ZNSt3__210moneypunctIwLb1EED0Ev,b3,b3,b3,b3,b3,b3,b3,b3,b3,__ZNSt3__29money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED2Ev,__ZNSt3__29money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev,b3,b3,__ZNSt3__29money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED2Ev,__ZNSt3__29money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev,b3,b3
,__ZNSt3__29money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED2Ev,__ZNSt3__29money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev,b3,b3,__ZNSt3__29money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED2Ev,__ZNSt3__29money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev,b3,b3,__ZNSt3__28messagesIcED2Ev,__ZNSt3__28messagesIcED0Ev,b3,b3,b3,__ZNSt3__28messagesIwED2Ev,__ZNSt3__28messagesIwED0Ev,b3,b3,b3,__ZNSt3__26locale5facetD2Ev,__ZNSt3__216__narrow_to_utf8ILj32EED0Ev,b3,b3,b3,b3,b3,b3,b3,__ZNSt3__217__widen_from_utf8ILj32EED0Ev,__ZNSt3__27codecvtIwc11__mbstate_tED2Ev,__ZNSt3__27codecvtIwc11__mbstate_tED0Ev
,b3,b3,b3,b3,b3,b3,b3,__ZNSt3__26locale5__impD2Ev,__ZNSt3__26locale5__impD0Ev,__ZNSt3__25ctypeIcED2Ev,__ZNSt3__25ctypeIcED0Ev,b3,b3,b3,b3,b3,b3,b3,b3,__ZNSt3__28numpunctIcED2Ev,__ZNSt3__28numpunctIcED0Ev,b3,b3,b3,b3,b3,__ZNSt3__28numpunctIwED2Ev,__ZNSt3__28numpunctIwED0Ev,b3,b3
,b3,b3,b3,__ZNSt3__26locale5facetD0Ev,__ZNSt3__25ctypeIwED0Ev,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,__ZNSt3__27codecvtIcc11__mbstate_tED0Ev,b3,b3,b3,b3,b3,b3,b3,__ZNSt3__27codecvtIDsc11__mbstate_tED0Ev,b3,b3,b3,b3
,b3,b3,b3,__ZNSt3__27codecvtIDic11__mbstate_tED0Ev,__ZNSt3__212system_errorD2Ev,__ZNSt3__212system_errorD0Ev,b3,__ZN10__cxxabiv116__shim_type_infoD2Ev,__ZN10__cxxabiv117__class_type_infoD0Ev,__ZNK10__cxxabiv116__shim_type_info5noop1Ev,__ZNK10__cxxabiv116__shim_type_info5noop2Ev,b3,b3,b3,b3,__ZN10__cxxabiv120__si_class_type_infoD0Ev,b3,b3,b3,__ZNSt9bad_allocD2Ev,__ZNSt9bad_allocD0Ev,b3,__ZNSt11logic_errorD2Ev,__ZNSt11logic_errorD0Ev,b3,__ZNSt13runtime_errorD2Ev,__ZNSt13runtime_errorD0Ev,__ZNSt12length_errorD0Ev,__ZNSt8bad_castD2Ev,__ZNSt8bad_castD0Ev
,b3,__ZN10__cxxabiv123__fundamental_type_infoD0Ev,b3,__ZN10__cxxabiv119__pointer_type_infoD0Ev,b3,__ZN10__cxxabiv121__vmi_class_type_infoD0Ev,b3,b3,b3,b3,b3,b3,b3,__ZN6Socket9ExceptionD2Ev,b3,b3,__ZNSt3__215basic_streambufIcNS_11char_traitsIcEEEC2Ev,b3,b3,b3,b3,b3,b3,b3,b3,b3,_free,b3,__ZN10emscripten8internal14raw_destructorI7MyClassEEvPT_,b3
,b3,__ZN7MyClass10incrementXEv,b3,b3,b3,b3,b3,b3,b3,__ZN7MyClass5fetchEv,b3,__ZN6Socket3UDPC2Ev,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,__ZNSt3__28ios_base33__set_badbit_and_consider_rethrowEv,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,__ZNSt3__26locale2id6__initEv,__ZNSt3__217__call_once_proxyINS_5tupleIJONS_12_GLOBAL__N_111__fake_bindEEEEEEvPv,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev,___cxx_global_array_dtor_117,___cxx_global_array_dtor_69,___cxx_global_array_dtor,b3,b3,b3,b3,b3,__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev,___cxx_global_array_dtor_120,___cxx_global_array_dtor_93,___cxx_global_array_dtor_54,_freelocale,b3,b3,__ZNSt3__212__do_nothingEPv,b3,__ZNSt3__221__throw_runtime_errorEPKc,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,__ZN10__cxxabiv112_GLOBAL__N_19destruct_EPv,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3];
var FUNCTION_TABLE_vii = [b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,__ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE5imbueERKNS_6localeE,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,__ZNKSt3__210moneypunctIcLb0EE11do_groupingEv,__ZNKSt3__210moneypunctIcLb0EE14do_curr_symbolEv,__ZNKSt3__210moneypunctIcLb0EE16do_positive_signEv,__ZNKSt3__210moneypunctIcLb0EE16do_negative_signEv,b4,__ZNKSt3__210moneypunctIcLb0EE13do_pos_formatEv,__ZNKSt3__210moneypunctIcLb0EE13do_neg_formatEv,b4,b4,b4,b4,__ZNKSt3__210moneypunctIcLb1EE11do_groupingEv,__ZNKSt3__210moneypunctIcLb1EE14do_curr_symbolEv,__ZNKSt3__210moneypunctIcLb1EE16do_positive_signEv,__ZNKSt3__210moneypunctIcLb1EE16do_negative_signEv,b4,__ZNKSt3__210moneypunctIcLb1EE13do_pos_formatEv,__ZNKSt3__210moneypunctIcLb1EE13do_neg_formatEv
,b4,b4,b4,b4,__ZNKSt3__210moneypunctIwLb0EE11do_groupingEv,__ZNKSt3__210moneypunctIwLb0EE14do_curr_symbolEv,__ZNKSt3__210moneypunctIwLb0EE16do_positive_signEv,__ZNKSt3__210moneypunctIwLb0EE16do_negative_signEv,b4,__ZNKSt3__210moneypunctIwLb0EE13do_pos_formatEv,__ZNKSt3__210moneypunctIwLb0EE13do_neg_formatEv,b4,b4,b4,b4,__ZNKSt3__210moneypunctIwLb1EE11do_groupingEv,__ZNKSt3__210moneypunctIwLb1EE14do_curr_symbolEv,__ZNKSt3__210moneypunctIwLb1EE16do_positive_signEv,__ZNKSt3__210moneypunctIwLb1EE16do_negative_signEv,b4,__ZNKSt3__210moneypunctIwLb1EE13do_pos_formatEv,__ZNKSt3__210moneypunctIwLb1EE13do_neg_formatEv,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,__ZNKSt3__28messagesIcE8do_closeEi,b4,b4,b4,b4,__ZNKSt3__28messagesIwE8do_closeEi,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,__ZNKSt3__28numpunctIcE11do_groupingEv,__ZNKSt3__28numpunctIcE11do_truenameEv,__ZNKSt3__28numpunctIcE12do_falsenameEv,b4,b4,b4,b4
,__ZNKSt3__28numpunctIwE11do_groupingEv,__ZNKSt3__28numpunctIwE11do_truenameEv,__ZNKSt3__28numpunctIwE12do_falsenameEv,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,__ZN6Socket9ExceptionC2ENSt3__212basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE,b4,b4,b4,__ZNSt3__28ios_base4initEPv,b4,__ZNSt3__215basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEE3strERKNS_12basic_stringIcS2_S4_EE,b4,b4,__ZNKSt3__215basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEE3strEv,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,__ZN10emscripten8internal13MethodInvokerIM7MyClassFvvEvPS2_JEE6invokeERKS4_S5_,b4,__ZN7MyClass4setXEi,b4,b4,__ZN7MyClass21getStringFromInstanceERKS_,b4,b4,b4,b4,__ZN6Socket3UDP4bindEj,b4,__ZN6Socket3UDP7receiveEv,__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2ERKS5_,b4,__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9push_backEc,b4,__ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEE6sentryC2ERS3_,__ZNKSt3__28ios_base6getlocEv,b4,b4,__ZNSt3__28ios_base5clearEj,b4,b4,b4,b4,b4,__ZNSt3__28ios_base16__call_callbacksENS0_5eventE
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,__ZNSt13runtime_errorC2EPKc,b4,b4,b4,b4,b4,b4,b4,__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj
,b4,__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE9push_backEw,b4,b4,b4,__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7reserveEj,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,__ZNSt11logic_errorC2EPKc,__ZNSt3__26vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEEC2Ej,b4,__ZNSt3__26locale5__imp7installINS_7collateIcEEEEvPT_,b4,__ZNSt3__26locale5__imp7installINS_7collateIwEEEEvPT_,__ZNSt3__26locale5__imp7installINS_5ctypeIcEEEEvPT_,b4,__ZNSt3__26locale5__imp7installINS_5ctypeIwEEEEvPT_
,b4,__ZNSt3__26locale5__imp7installINS_7codecvtIcc11__mbstate_tEEEEvPT_,b4,__ZNSt3__26locale5__imp7installINS_7codecvtIwc11__mbstate_tEEEEvPT_,b4,__ZNSt3__26locale5__imp7installINS_7codecvtIDsc11__mbstate_tEEEEvPT_,b4,__ZNSt3__26locale5__imp7installINS_7codecvtIDic11__mbstate_tEEEEvPT_,__ZNSt3__26locale5__imp7installINS_8numpunctIcEEEEvPT_,__ZNSt3__26locale5__imp7installINS_8numpunctIwEEEEvPT_,b4,__ZNSt3__26locale5__imp7installINS_7num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_,b4,__ZNSt3__26locale5__imp7installINS_7num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_,b4,__ZNSt3__26locale5__imp7installINS_7num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_,b4,__ZNSt3__26locale5__imp7installINS_7num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_,b4,__ZNSt3__26locale5__imp7installINS_10moneypunctIcLb0EEEEEvPT_,b4,__ZNSt3__26locale5__imp7installINS_10moneypunctIcLb1EEEEEvPT_,b4,__ZNSt3__26locale5__imp7installINS_10moneypunctIwLb0EEEEEvPT_,b4,__ZNSt3__26locale5__imp7installINS_10moneypunctIwLb1EEEEEvPT_,b4,__ZNSt3__26locale5__imp7installINS_9money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_,b4,__ZNSt3__26locale5__imp7installINS_9money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_
,b4,__ZNSt3__26locale5__imp7installINS_9money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_,b4,__ZNSt3__26locale5__imp7installINS_9money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_,b4,__ZNSt3__26locale5__imp7installINS_8time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_,b4,__ZNSt3__26locale5__imp7installINS_8time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_,b4,__ZNSt3__26locale5__imp7installINS_8time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_,b4,__ZNSt3__26locale5__imp7installINS_8time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_,b4,__ZNSt3__26locale5__imp7installINS_8messagesIcEEEEvPT_,b4,__ZNSt3__26locale5__imp7installINS_8messagesIwEEEEvPT_,__ZNSt3__26vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEE8allocateEj,__ZNSt3__26vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEE18__construct_at_endEj,__ZNSt3__26vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEE6resizeEj,__ZNSt3__214__split_bufferIPNS_6locale5facetERNS_15__sso_allocatorIS3_Lj28EEEE18__construct_at_endEj,__ZNSt3__26vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE,b4,b4,b4,b4,b4,b4,b4,__ZNSt3__218__libcpp_refstringC2EPKc,b4
,b4,b4,__ZNSt13runtime_errorC2ERKNSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE,b4,b4,b4,_abort_message,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4];
var FUNCTION_TABLE_iiiiiiiiiii = [b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,__ZNSt3__29__num_getIcE17__stage2_int_loopEciPcRS2_RjcRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_S2_,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,__ZNSt3__29__num_getIwE17__stage2_int_loopEwiPcRS2_RjwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_Pw,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5];
var FUNCTION_TABLE_ii = [b6,__ZN6Socket9Exception4whatEv,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,__ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE4syncEv
,__ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE9showmanycEv,b6,__ZNSt3__215basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEE9underflowEv,__ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE5uflowEv,b6,b6,b6,___stdio_close,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,__ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE9underflowEv,b6,b6,b6,b6,__ZNKSt3__219__iostream_category4nameEv,b6,b6,b6,b6
,b6,b6,__ZNKSt13runtime_error4whatEv,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,__ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE13do_date_orderEv,b6,b6,b6,b6,b6,b6,__ZNKSt3__220__time_get_c_storageIcE7__weeksEv,__ZNKSt3__220__time_get_c_storageIcE8__monthsEv,__ZNKSt3__220__time_get_c_storageIcE7__am_pmEv,__ZNKSt3__220__time_get_c_storageIcE3__cEv,__ZNKSt3__220__time_get_c_storageIcE3__rEv,__ZNKSt3__220__time_get_c_storageIcE3__xEv,__ZNKSt3__220__time_get_c_storageIcE3__XEv,b6,b6,__ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE13do_date_orderEv,b6,b6,b6,b6,b6,b6,__ZNKSt3__220__time_get_c_storageIwE7__weeksEv,__ZNKSt3__220__time_get_c_storageIwE8__monthsEv,__ZNKSt3__220__time_get_c_storageIwE7__am_pmEv,__ZNKSt3__220__time_get_c_storageIwE3__cEv,__ZNKSt3__220__time_get_c_storageIwE3__rEv
,__ZNKSt3__220__time_get_c_storageIwE3__xEv,__ZNKSt3__220__time_get_c_storageIwE3__XEv,b6,b6,b6,b6,b6,b6,b6,b6,__ZNKSt3__210moneypunctIcLb0EE16do_decimal_pointEv,__ZNKSt3__210moneypunctIcLb0EE16do_thousands_sepEv,b6,b6,b6,b6,__ZNKSt3__210moneypunctIcLb0EE14do_frac_digitsEv,b6,b6,b6,b6,__ZNKSt3__210moneypunctIcLb1EE16do_decimal_pointEv,__ZNKSt3__210moneypunctIcLb1EE16do_thousands_sepEv,b6,b6,b6,b6,__ZNKSt3__210moneypunctIcLb1EE14do_frac_digitsEv,b6,b6
,b6,b6,__ZNKSt3__210moneypunctIwLb0EE16do_decimal_pointEv,__ZNKSt3__210moneypunctIwLb0EE16do_thousands_sepEv,b6,b6,b6,b6,__ZNKSt3__210moneypunctIwLb0EE14do_frac_digitsEv,b6,b6,b6,b6,__ZNKSt3__210moneypunctIwLb1EE16do_decimal_pointEv,__ZNKSt3__210moneypunctIwLb1EE16do_thousands_sepEv,b6,b6,b6,b6,__ZNKSt3__210moneypunctIwLb1EE14do_frac_digitsEv,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,__ZNKSt3__27codecvtIDic11__mbstate_tE11do_encodingEv,__ZNKSt3__27codecvtIDic11__mbstate_tE16do_always_noconvEv,b6,__ZNKSt3__27codecvtIDic11__mbstate_tE13do_max_lengthEv,b6,b6,b6
,b6,b6,b6,__ZNKSt3__27codecvtIwc11__mbstate_tE11do_encodingEv,__ZNKSt3__27codecvtIwc11__mbstate_tE16do_always_noconvEv,b6,__ZNKSt3__27codecvtIwc11__mbstate_tE13do_max_lengthEv,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,__ZNKSt3__28numpunctIcE16do_decimal_pointEv,__ZNKSt3__28numpunctIcE16do_thousands_sepEv,b6,b6,b6,b6,b6,__ZNKSt3__28numpunctIwE16do_decimal_pointEv,__ZNKSt3__28numpunctIwE16do_thousands_sepEv
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,__ZNKSt3__27codecvtIcc11__mbstate_tE11do_encodingEv,__ZNKSt3__27codecvtIcc11__mbstate_tE16do_always_noconvEv,b6,__ZNKSt3__27codecvtIcc11__mbstate_tE13do_max_lengthEv,b6,b6,b6,b6,__ZNKSt3__27codecvtIDsc11__mbstate_tE11do_encodingEv
,__ZNKSt3__27codecvtIDsc11__mbstate_tE16do_always_noconvEv,b6,__ZNKSt3__27codecvtIDsc11__mbstate_tE13do_max_lengthEv,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,__ZNKSt9bad_alloc4whatEv,b6,b6,__ZNKSt11logic_error4whatEv,b6,b6,b6,b6,b6
,__ZNKSt8bad_cast4whatEv,b6,b6,b6,b6,b6,b6,b6,b6,__ZNSt3__211char_traitsIcE6lengthEPKc,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,_inet_ntoa,_ntohs,b6,__ZN10emscripten8internal13getActualTypeI7MyClassEEPKvPT_,b6,b6
,b6,b6,b6,__ZNK7MyClass4getXEv,b6,b6,b6,b6,b6,b6,__ZN10emscripten8internal7InvokerINSt3__212basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEJEE6invokeEPFS8_vE,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,__ZN10emscripten8internal11BindingTypeIP7MyClassE10toWireTypeES3_,__ZN10emscripten8internal11BindingTypeINSt3__212basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEE10toWireTypeERKS8_,b6,b6
,b6,b6,b6,b6,b6,b6,___uselocale,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,__ZNSt3__211char_traitsIwE6lengthEPKw,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,_pthread_mutex_unlock__wrapper,_pthread_mutex_lock__wrapper,_pthread_cond_broadcast__wrapper,b6,b6,__Znwj
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6];
var FUNCTION_TABLE_iiiiiiiiiiii = [b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,__ZNSt3__29money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE8__do_getERS4_S4_bRKNS_6localeEjRjRbRKNS_5ctypeIcEERNS_10unique_ptrIcPFvPvEEERPcSM_,b7,b7,b7,b7,b7,b7
,__ZNSt3__29money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE8__do_getERS4_S4_bRKNS_6localeEjRjRbRKNS_5ctypeIwEERNS_10unique_ptrIwPFvPvEEERPwSM_,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7];
var FUNCTION_TABLE_iiii = [b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,__ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE6setbufEPci,b8,b8,b8
,b8,__ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE6xsgetnEPci,b8,b8,b8,__ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE6xsputnEPKci,b8,b8,___stdio_write,___stdio_seek,___stdout_write,_sn_write,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,__ZNKSt3__214error_category10equivalentEiRKNS_15error_conditionE,__ZNKSt3__214error_category10equivalentERKNS_10error_codeEi,b8
,b8,b8,b8,b8,b8,b8,b8,b8,__ZNKSt3__27collateIcE7do_hashEPKcS3_,b8,b8,b8,b8,__ZNKSt3__27collateIwE7do_hashEPKwS3_,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,__ZNKSt3__28messagesIcE7do_openERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERKNS_6localeE,b8,b8,b8,b8,__ZNKSt3__28messagesIwE7do_openERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERKNS_6localeE,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,__ZNKSt3__25ctypeIcE10do_toupperEPcPKc,b8,__ZNKSt3__25ctypeIcE10do_tolowerEPcPKc,b8,b8,__ZNKSt3__25ctypeIcE9do_narrowEcc,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,__ZNKSt3__25ctypeIwE5do_isEtw,b8,b8,b8,b8,__ZNKSt3__25ctypeIwE10do_toupperEPwPKw,b8,__ZNKSt3__25ctypeIwE10do_tolowerEPwPKw,b8,b8,__ZNKSt3__25ctypeIwE9do_narrowEwc,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,__ZNK10__cxxabiv117__class_type_info9can_catchEPKNS_16__shim_type_infoERPv,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,__ZNK10__cxxabiv123__fundamental_type_info9can_catchEPKNS_16__shim_type_infoERPv,b8,__ZNK10__cxxabiv119__pointer_type_info9can_catchEPKNS_16__shim_type_infoERPv,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,__ZN10emscripten8internal7InvokerIP7MyClassJOiONSt3__212basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEEE6invokeEPFS3_S4_SC_EiPNS0_11BindingTypeISB_EUt_E,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,_do_read,b8
,b8,b8,b8,b8,b8,___newlocale,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,_vasprintf,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendIPcEENS_9enable_ifIXaasr21__is_forward_iteratorIT_EE5valuesr38__libcpp_string_gets_noexcept_iteratorIS9_EE5valueERS5_E4typeES9_S9_,b8,b8,b8,b8
,b8,b8,__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6appendIPwEENS_9enable_ifIXaasr21__is_forward_iteratorIT_EE5valuesr38__libcpp_string_gets_noexcept_iteratorIS9_EE5valueERS5_E4typeES9_S9_,b8,b8,b8,b8,b8,b8,b8,b8,b8,_wcrtomb,b8,b8,_mbtowc,b8,_mbrlen,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKcj,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8];
var FUNCTION_TABLE_viiiiiiiiiiiiiii = [b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,__ZNSt3__211__money_putIcE8__formatEPcRS2_S3_jPKcS5_RKNS_5ctypeIcEEbRKNS_10money_base7patternEccRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEESL_SL_i,b9,__ZNSt3__211__money_putIwE8__formatEPwRS2_S3_jPKwS5_RKNS_5ctypeIwEEbRKNS_10money_base7patternEwwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERKNSE_IwNSF_IwEENSH_IwEEEESQ_i,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9];
var FUNCTION_TABLE_viiiiii = [b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,__ZNSt3__215basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEE7seekoffExNS_8ios_base7seekdirEj,b10,b10
,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,__ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE7seekoffExNS_8ios_base7seekdirEj,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,__ZNKSt3__28messagesIcE6do_getEiiiRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE,b10,b10,b10,b10,__ZNKSt3__28messagesIwE6do_getEiiiRKNS_12basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEE,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,__ZNK10__cxxabiv117__class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib,b10,b10,b10,__ZNK10__cxxabiv120__si_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
,b10,b10,b10,b10,b10,b10,__ZNK10__cxxabiv121__vmi_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
,b10,b10,b10];
var FUNCTION_TABLE_iiiiiii = [b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,__ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRb,__ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRl,__ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRx,__ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRt,__ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjS8_,__ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRm,__ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRy,__ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRf,__ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRd,__ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRe,__ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRPv,b11,b11,__ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRb
,__ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRl,__ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRx,__ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRt,__ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjS8_,__ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRm,__ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRy,__ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRf,__ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRd,__ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRe,__ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRPv,b11,b11,b11,b11,__ZNKSt3__27num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcx,b11,__ZNKSt3__27num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcy,b11,b11,b11,b11,b11,b11,b11,__ZNKSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwx,b11,__ZNKSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwy,b11,b11,b11
,b11,b11,b11,__ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11do_get_timeES4_S4_RNS_8ios_baseERjP2tm,__ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11do_get_dateES4_S4_RNS_8ios_baseERjP2tm,__ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE14do_get_weekdayES4_S4_RNS_8ios_baseERjP2tm,__ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE16do_get_monthnameES4_S4_RNS_8ios_baseERjP2tm,__ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11do_get_yearES4_S4_RNS_8ios_baseERjP2tm,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,__ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11do_get_timeES4_S4_RNS_8ios_baseERjP2tm,__ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11do_get_dateES4_S4_RNS_8ios_baseERjP2tm,__ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE14do_get_weekdayES4_S4_RNS_8ios_baseERjP2tm,__ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE16do_get_monthnameES4_S4_RNS_8ios_baseERjP2tm,__ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11do_get_yearES4_S4_RNS_8ios_baseERjP2tm,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,__ZNKSt3__29money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_bRNS_8ios_baseEcRKNS_12basic_stringIcS3_NS_9allocatorIcEEEE,b11,b11,b11,__ZNKSt3__29money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_bRNS_8ios_baseEwRKNS_12basic_stringIwS3_NS_9allocatorIwEEEE,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,_recvfrom,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,__ZNSt3__216__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,__ZNSt3__216__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11];
var FUNCTION_TABLE_iiiiiiiiiiiii = [b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
,b12,b12,b12,b12,b12,b12,b12,b12,b12,__ZNSt3__29__num_getIcE19__stage2_float_loopEcRbRcPcRS4_ccRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSE_RjS4_,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,__ZNSt3__29__num_getIwE19__stage2_float_loopEwRbRcPcRS4_wwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSE_RjPw,b12,b12,b12,b12,b12,b12
,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
,b12,b12,b12];
var FUNCTION_TABLE_viiiiiii = [b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,__ZNSt3__29__num_putIcE21__widen_and_group_intEPcS2_S2_S2_RS2_S3_RKNS_6localeE,b13,__ZNSt3__29__num_putIcE23__widen_and_group_floatEPcS2_S2_S2_RS2_S3_RKNS_6localeE,b13,b13,b13
,__ZNSt3__29__num_putIwE21__widen_and_group_intEPcS2_S2_PwRS3_S4_RKNS_6localeE,__ZNSt3__29__num_putIwE23__widen_and_group_floatEPcS2_S2_PwRS3_S4_RKNS_6localeE,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
,b13,b13,b13];
var FUNCTION_TABLE_viiiiiiiiii = [b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,__ZNSt3__211__money_getIcE13__gather_infoEbRKNS_6localeERNS_10money_base7patternERcS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEESF_SF_SF_Ri,b14,b14,b14
,b14,b14,b14,__ZNSt3__211__money_getIwE13__gather_infoEbRKNS_6localeERNS_10money_base7patternERwS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERNS9_IwNSA_IwEENSC_IwEEEESJ_SJ_Ri,b14,b14,__ZNSt3__211__money_putIcE13__gather_infoEbbRKNS_6localeERNS_10money_base7patternERcS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEESF_SF_Ri,b14,__ZNSt3__211__money_putIwE13__gather_infoEbbRKNS_6localeERNS_10money_base7patternERwS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERNS9_IwNSA_IwEENSC_IwEEEESJ_Ri,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
,b14,b14,b14];
var FUNCTION_TABLE_iii = [b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
,b15,b15,b15,b15,__ZNSt3__215basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEE9pbackfailEi,b15,__ZNSt3__215basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEE8overflowEi,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,__ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE9pbackfailEi,__ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE8overflowEi,b15,b15,b15,b15,b15,b15,b15
,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,__ZNKSt3__25ctypeIcE10do_toupperEc,b15,__ZNKSt3__25ctypeIcE10do_tolowerEc,b15,__ZNKSt3__25ctypeIcE8do_widenEc,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
,b15,b15,b15,b15,b15,b15,b15,b15,b15,__ZNKSt3__25ctypeIwE10do_toupperEw,b15,__ZNKSt3__25ctypeIwE10do_tolowerEw,b15,__ZNKSt3__25ctypeIwE8do_widenEc,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEaSERKS5_,b15,b15,b15,__ZNSt3__2lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc,__ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEElsEj,b15,__ZNSt3__2lsIcNS_11char_traitsIcEENS_9allocatorIcEEEERNS_13basic_ostreamIT_T0_EES9_RKNS_12basic_stringIS6_S7_T1_EE,b15,__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc,b15,b15,b15,b15,b15,__ZN10emscripten8internal12operator_newI7MyClassJiNSt3__212basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEEEEPT_DpOT0_
,b15,b15,b15,b15,b15,__ZN10emscripten8internal12GetterPolicyIM7MyClassKFivEE3getIS2_EEiRKS4_RKT_,b15,b15,__ZN10emscripten8internal7InvokerINSt3__212basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEJRK7MyClassEE6invokeEPFS8_SB_EPS9_,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,__ZNKSt3__26locale9use_facetERNS0_2idE,b15,b15,b15,b15,b15,b15,b15,b15
,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,_isxdigit_l,_isdigit_l
,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
,b15,b15,b15];
var FUNCTION_TABLE_iiiiii = [b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
,b16,b16,b16,b16,b16,b16,__ZNKSt3__27collateIcE10do_compareEPKcS3_S3_S3_,b16,b16,b16,b16,__ZNKSt3__27collateIwE10do_compareEPKwS3_S3_S3_,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,__ZNKSt3__27num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcb,__ZNKSt3__27num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcl,b16,__ZNKSt3__27num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcm,b16,b16,b16,__ZNKSt3__27num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcPKv,b16,b16,__ZNKSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwb,__ZNKSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwl,b16,__ZNKSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwm,b16,b16,b16,__ZNKSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwPKv
,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,__ZNKSt3__27codecvtIDic11__mbstate_tE10do_unshiftERS1_PcS4_RS4_,b16,b16,__ZNKSt3__27codecvtIDic11__mbstate_tE9do_lengthERS1_PKcS5_j,b16,b16,b16,b16
,b16,b16,__ZNKSt3__27codecvtIwc11__mbstate_tE10do_unshiftERS1_PcS4_RS4_,b16,b16,__ZNKSt3__27codecvtIwc11__mbstate_tE9do_lengthERS1_PKcS5_j,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,__ZNKSt3__25ctypeIcE9do_narrowEPKcS3_cPc,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,__ZNKSt3__25ctypeIwE9do_narrowEPKwS3_cPc,b16,b16,b16,__ZNKSt3__27codecvtIcc11__mbstate_tE10do_unshiftERS1_PcS4_RS4_,b16,b16,__ZNKSt3__27codecvtIcc11__mbstate_tE9do_lengthERS1_PKcS5_j,b16,b16,b16,b16,__ZNKSt3__27codecvtIDsc11__mbstate_tE10do_unshiftERS1_PcS4_RS4_,b16
,b16,__ZNKSt3__27codecvtIDsc11__mbstate_tE9do_lengthERS1_PKcS5_j,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,_wcsnrtombs,b16,_mbsnrtowcs,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
,b16,b16,b16];
var FUNCTION_TABLE_diii = [b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,__ZNSt3__215__num_get_floatIeEET_PKcS3_Rj,b17,__ZNSt3__215__num_get_floatIdEET_PKcS3_Rj,__ZNSt3__215__num_get_floatIfEET_PKcS3_Rj,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
,b17,b17,b17];
var FUNCTION_TABLE_i = [b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
,b18,b18,b18,__ZNSt3__26__clocEv,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,___ctype_get_mb_cur_max,b18,___ctype_tolower_loc,___ctype_toupper_loc,___ctype_b_loc,b18,b18,b18,b18,b18,b18,b18,b18,b18
,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,__ZNSt3__26locale5__imp12make_classicEv,__ZNSt3__26locale5__imp11make_globalEv,__ZNSt3__26locale8__globalEv,b18,b18,b18,b18,b18,b18
,b18,b18,b18,b18,b18,___cxa_get_globals_fast,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
,b18,b18,b18,b18,b18];
var FUNCTION_TABLE_iiiii = [b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,__ZNKSt3__25ctypeIcE8do_widenEPKcS3_Pc,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
,b19,b19,b19,b19,b19,b19,__ZNKSt3__25ctypeIwE5do_isEPKwS3_Pt,__ZNKSt3__25ctypeIwE10do_scan_isEtPKwS3_,__ZNKSt3__25ctypeIwE11do_scan_notEtPKwS3_,b19,b19,b19,b19,b19,__ZNKSt3__25ctypeIwE8do_widenEPKcS3_Pw,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
,b19,b19,b19,b19,__ZNSt3__217__libcpp_sscanf_lEPKcP15__locale_structS1_z,b19,b19,b19,b19,b19,b19,b19,b19,b19,__ZNSt3__227__num_get_unsigned_integralIyEET_PKcS3_Rji,__ZNSt3__227__num_get_unsigned_integralImEET_PKcS3_Rji,__ZNSt3__227__num_get_unsigned_integralIjEET_PKcS3_Rji,__ZNSt3__227__num_get_unsigned_integralItEET_PKcS3_Rji,__ZNSt3__225__num_get_signed_integralIxEET_PKcS3_Rji,__ZNSt3__225__num_get_signed_integralIlEET_PKcS3_Rji,b19,b19,b19,b19,b19,__ZNSt3__219__libcpp_asprintf_lEPPcP15__locale_structPKcz,b19,b19,b19,b19
,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,_mbsrtowcs,b19,b19,b19,b19,b19,b19,b19,b19,b19
,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,_catgets,b19,b19,b19,_mbrtowc,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
,b19,b19,b19];
var FUNCTION_TABLE_viii = [b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,__ZNKSt3__214error_category23default_error_conditionEi,b20,b20,__ZNKSt3__219__iostream_category7messageEi
,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj,b20,___cxa_throw__wrapper,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
,b20,b20,b20,b20,b20,b20,__ZN10emscripten8internal12SetterPolicyIM7MyClassFviEE3setIS2_EEvRKS4_RT_i,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc,b20,b20,b20,b20,b20,b20,__ZN7MyClassC2EiNSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE,b20,b20,b20,b20
,__ZNSt3__28ios_base7failureC2EPKcRKNS_10error_codeE,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initEPKwj,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,__ZNSt3__219__double_or_nothingIcEEvRNS_10unique_ptrIT_PFvPvEEERPS2_S9_,__ZNSt3__219__double_or_nothingIjEEvRNS_10unique_ptrIT_PFvPvEEERPS2_S9_,b20
,b20,b20,b20,b20,__ZNSt3__219__double_or_nothingIwEEvRNS_10unique_ptrIT_PFvPvEEERPS2_S9_,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
,b20,__ZNSt3__212system_error6__initERKNS_10error_codeENS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
,b20,b20,b20,b20,b20];
var FUNCTION_TABLE_v = [b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
,b21,b21,b21,b21,b21,b21,__ZL25default_terminate_handlerv,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,___cxa_end_catch__wrapper,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,__ZSt17__throw_bad_allocv,b21,b21,b21,b21,b21,b21,b21,b21,b21
,b21,b21,b21,__ZNSt3__2L10init_weeksEv,__ZNSt3__2L11init_monthsEv,__ZNSt3__2L10init_am_pmEv,b21,b21,b21,b21,__ZNSt3__2L11init_wweeksEv,__ZNSt3__2L12init_wmonthsEv,__ZNSt3__2L11init_wam_pmEv,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,__ZNSt3__212_GLOBAL__N_14makeINS_7collateIcEEjEERT_T0_,b21,__ZNSt3__212_GLOBAL__N_14makeINS_7collateIwEEjEERT_T0_,b21,b21,__ZNSt3__212_GLOBAL__N_14makeINS_5ctypeIwEEjEERT_T0_,b21
,__ZNSt3__212_GLOBAL__N_14makeINS_7codecvtIcc11__mbstate_tEEjEERT_T0_,b21,__ZNSt3__212_GLOBAL__N_14makeINS_7codecvtIwc11__mbstate_tEEjEERT_T0_,b21,__ZNSt3__212_GLOBAL__N_14makeINS_7codecvtIDsc11__mbstate_tEEjEERT_T0_,b21,__ZNSt3__212_GLOBAL__N_14makeINS_7codecvtIDic11__mbstate_tEEjEERT_T0_,b21,b21,b21,__ZNSt3__212_GLOBAL__N_14makeINS_7num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEjEERT_T0_,b21,__ZNSt3__212_GLOBAL__N_14makeINS_7num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEjEERT_T0_,b21,__ZNSt3__212_GLOBAL__N_14makeINS_7num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEEEjEERT_T0_,b21,__ZNSt3__212_GLOBAL__N_14makeINS_7num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEEEjEERT_T0_,b21,__ZNSt3__212_GLOBAL__N_14makeINS_10moneypunctIcLb0EEEjEERT_T0_,b21,__ZNSt3__212_GLOBAL__N_14makeINS_10moneypunctIcLb1EEEjEERT_T0_,b21,__ZNSt3__212_GLOBAL__N_14makeINS_10moneypunctIwLb0EEEjEERT_T0_,b21,__ZNSt3__212_GLOBAL__N_14makeINS_10moneypunctIwLb1EEEjEERT_T0_,b21,__ZNSt3__212_GLOBAL__N_14makeINS_9money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEjEERT_T0_,b21,__ZNSt3__212_GLOBAL__N_14makeINS_9money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEjEERT_T0_,b21
,__ZNSt3__212_GLOBAL__N_14makeINS_9money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEEEjEERT_T0_,b21,__ZNSt3__212_GLOBAL__N_14makeINS_9money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEEEjEERT_T0_,b21,__ZNSt3__212_GLOBAL__N_14makeINS_8time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEjEERT_T0_,b21,__ZNSt3__212_GLOBAL__N_14makeINS_8time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEjEERT_T0_,b21,__ZNSt3__212_GLOBAL__N_14makeINS_8time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEEEjEERT_T0_,b21,__ZNSt3__212_GLOBAL__N_14makeINS_8time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEEEjEERT_T0_,b21,__ZNSt3__212_GLOBAL__N_14makeINS_8messagesIcEEjEERT_T0_,b21,__ZNSt3__212_GLOBAL__N_14makeINS_8messagesIwEEjEERT_T0_,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,___cxa_rethrow__wrapper,b21,b21
,b21,b21,b21,__ZN10__cxxabiv112_GLOBAL__N_110construct_Ev,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
,b21,b21,b21,b21,b21];
var FUNCTION_TABLE_iiiiiiiii = [b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22
,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22
,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22
,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22
,b22,b22,b22,b22,b22,b22,b22,b22,__ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjP2tmcc,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,__ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjP2tmcc,b22,b22,b22,b22,b22
,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22
,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22
,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,__ZNKSt3__27codecvtIDic11__mbstate_tE6do_outERS1_PKDiS5_RS5_PcS7_RS7_,__ZNKSt3__27codecvtIDic11__mbstate_tE5do_inERS1_PKcS5_RS5_PDiS7_RS7_,b22,b22,b22,b22,b22,b22,b22,b22
,__ZNKSt3__27codecvtIwc11__mbstate_tE6do_outERS1_PKwS5_RS5_PcS7_RS7_,__ZNKSt3__27codecvtIwc11__mbstate_tE5do_inERS1_PKcS5_RS5_PwS7_RS7_,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22
,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,__ZNKSt3__27codecvtIcc11__mbstate_tE6do_outERS1_PKcS5_RS5_PcS7_RS7_,__ZNKSt3__27codecvtIcc11__mbstate_tE5do_inERS1_PKcS5_RS5_PcS7_RS7_,b22,b22,b22,b22,b22,b22,__ZNKSt3__27codecvtIDsc11__mbstate_tE6do_outERS1_PKDsS5_RS5_PcS7_RS7_,__ZNKSt3__27codecvtIDsc11__mbstate_tE5do_inERS1_PKcS5_RS5_PDsS7_RS7_,b22,b22
,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22
,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22
,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22
,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22
,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22
,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22
,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22
,b22,b22,b22];
var FUNCTION_TABLE_iiiiid = [b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23
,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23
,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23
,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,__ZNKSt3__27num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcd,__ZNKSt3__27num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEce,b23,b23,b23,b23,b23,b23,b23,b23,__ZNKSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwd,__ZNKSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwe,b23
,b23,b23,b23,b23,b23,b23,b23,b23,b23];
var FUNCTION_TABLE_viiii = [b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,__ZNSt3__215basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEE7seekposENS_4fposI11__mbstate_tEEj,b24
,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,__ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE7seekposENS_4fposI11__mbstate_tEEj,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24
,b24,b24,b24,b24,b24,b24,b24,__ZNKSt3__27collateIcE12do_transformEPKcS3_,b24,b24,b24,b24,__ZNKSt3__27collateIwE12do_transformEPKwS3_,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24
,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24
,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24
,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24
,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24
,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24
,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24
,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24
,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,__ZNK10__cxxabiv117__class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi,b24,b24,b24,__ZNK10__cxxabiv120__si_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24
,b24,b24,b24,b24,b24,b24,b24,b24,__ZNK10__cxxabiv121__vmi_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24
,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,__ZN6Socket3UDP4sendENSt3__212basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEjS7_,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24
,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,__ZNSt3__216__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24
,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24
,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24
,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24
,b24,b24,b24];

  return { stackSave: stackSave, getTempRet0: getTempRet0, ___udivdi3: ___udivdi3, setThrew: setThrew, _bitshift64Lshr: _bitshift64Lshr, _ntohs: _ntohs, _fflush: _fflush, setTempRet0: setTempRet0, ___cxa_is_pointer_type: ___cxa_is_pointer_type, _llvm_cttz_i32: _llvm_cttz_i32, _sbrk: _sbrk, _memcpy: _memcpy, ___errno_location: ___errno_location, ___muldi3: ___muldi3, _bitshift64Shl: _bitshift64Shl, ___uremdi3: ___uremdi3, stackAlloc: stackAlloc, _i64Subtract: _i64Subtract, __GLOBAL__sub_I_bind_cpp: __GLOBAL__sub_I_bind_cpp, ___udivmoddi4: ___udivmoddi4, _htonl: _htonl, _i64Add: _i64Add, _pthread_mutex_unlock: _pthread_mutex_unlock, _llvm_bswap_i16: _llvm_bswap_i16, _emscripten_get_global_libc: _emscripten_get_global_libc, ___getTypeName: ___getTypeName, _htons: _htons, _pthread_cond_broadcast: _pthread_cond_broadcast, _llvm_bswap_i32: _llvm_bswap_i32, ___muldsi3: ___muldsi3, ___cxa_can_catch: ___cxa_can_catch, _free: _free, runPostSets: runPostSets, establishStackSpace: establishStackSpace, _memmove: _memmove, stackRestore: stackRestore, _malloc: _malloc, _pthread_mutex_lock: _pthread_mutex_lock, __GLOBAL__sub_I_client_cpp: __GLOBAL__sub_I_client_cpp, _memset: _memset, stackAlloc: stackAlloc, stackSave: stackSave, stackRestore: stackRestore, establishStackSpace: establishStackSpace, setThrew: setThrew, setTempRet0: setTempRet0, getTempRet0: getTempRet0, dynCall_iiiiiiii: dynCall_iiiiiiii, dynCall_viiiii: dynCall_viiiii, dynCall_iiiiiid: dynCall_iiiiiid, dynCall_vi: dynCall_vi, dynCall_vii: dynCall_vii, dynCall_iiiiiiiiiii: dynCall_iiiiiiiiiii, dynCall_ii: dynCall_ii, dynCall_iiiiiiiiiiii: dynCall_iiiiiiiiiiii, dynCall_iiii: dynCall_iiii, dynCall_viiiiiiiiiiiiiii: dynCall_viiiiiiiiiiiiiii, dynCall_viiiiii: dynCall_viiiiii, dynCall_iiiiiii: dynCall_iiiiiii, dynCall_iiiiiiiiiiiii: dynCall_iiiiiiiiiiiii, dynCall_viiiiiii: dynCall_viiiiiii, dynCall_viiiiiiiiii: dynCall_viiiiiiiiii, dynCall_iii: dynCall_iii, dynCall_iiiiii: dynCall_iiiiii, dynCall_diii: dynCall_diii, dynCall_i: dynCall_i, dynCall_iiiii: dynCall_iiiii, dynCall_viii: dynCall_viii, dynCall_v: dynCall_v, dynCall_iiiiiiiii: dynCall_iiiiiiiii, dynCall_iiiiid: dynCall_iiiiid, dynCall_viiii: dynCall_viiii };
})
// EMSCRIPTEN_END_ASM
(Module.asmGlobalArg, Module.asmLibraryArg, buffer);

var real_stackSave = asm["stackSave"]; asm["stackSave"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real_stackSave.apply(null, arguments);
};

var real_getTempRet0 = asm["getTempRet0"]; asm["getTempRet0"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real_getTempRet0.apply(null, arguments);
};

var real____udivdi3 = asm["___udivdi3"]; asm["___udivdi3"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real____udivdi3.apply(null, arguments);
};

var real_setThrew = asm["setThrew"]; asm["setThrew"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real_setThrew.apply(null, arguments);
};

var real__bitshift64Lshr = asm["_bitshift64Lshr"]; asm["_bitshift64Lshr"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__bitshift64Lshr.apply(null, arguments);
};

var real__ntohs = asm["_ntohs"]; asm["_ntohs"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__ntohs.apply(null, arguments);
};

var real__fflush = asm["_fflush"]; asm["_fflush"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__fflush.apply(null, arguments);
};

var real_setTempRet0 = asm["setTempRet0"]; asm["setTempRet0"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real_setTempRet0.apply(null, arguments);
};

var real____cxa_is_pointer_type = asm["___cxa_is_pointer_type"]; asm["___cxa_is_pointer_type"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real____cxa_is_pointer_type.apply(null, arguments);
};

var real__llvm_cttz_i32 = asm["_llvm_cttz_i32"]; asm["_llvm_cttz_i32"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__llvm_cttz_i32.apply(null, arguments);
};

var real__sbrk = asm["_sbrk"]; asm["_sbrk"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__sbrk.apply(null, arguments);
};

var real____errno_location = asm["___errno_location"]; asm["___errno_location"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real____errno_location.apply(null, arguments);
};

var real____muldi3 = asm["___muldi3"]; asm["___muldi3"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real____muldi3.apply(null, arguments);
};

var real__bitshift64Shl = asm["_bitshift64Shl"]; asm["_bitshift64Shl"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__bitshift64Shl.apply(null, arguments);
};

var real____uremdi3 = asm["___uremdi3"]; asm["___uremdi3"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real____uremdi3.apply(null, arguments);
};

var real_stackAlloc = asm["stackAlloc"]; asm["stackAlloc"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real_stackAlloc.apply(null, arguments);
};

var real__i64Subtract = asm["_i64Subtract"]; asm["_i64Subtract"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__i64Subtract.apply(null, arguments);
};

var real___GLOBAL__sub_I_bind_cpp = asm["__GLOBAL__sub_I_bind_cpp"]; asm["__GLOBAL__sub_I_bind_cpp"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real___GLOBAL__sub_I_bind_cpp.apply(null, arguments);
};

var real____udivmoddi4 = asm["___udivmoddi4"]; asm["___udivmoddi4"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real____udivmoddi4.apply(null, arguments);
};

var real__htonl = asm["_htonl"]; asm["_htonl"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__htonl.apply(null, arguments);
};

var real__i64Add = asm["_i64Add"]; asm["_i64Add"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__i64Add.apply(null, arguments);
};

var real__pthread_mutex_unlock = asm["_pthread_mutex_unlock"]; asm["_pthread_mutex_unlock"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__pthread_mutex_unlock.apply(null, arguments);
};

var real__llvm_bswap_i16 = asm["_llvm_bswap_i16"]; asm["_llvm_bswap_i16"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__llvm_bswap_i16.apply(null, arguments);
};

var real__emscripten_get_global_libc = asm["_emscripten_get_global_libc"]; asm["_emscripten_get_global_libc"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__emscripten_get_global_libc.apply(null, arguments);
};

var real____getTypeName = asm["___getTypeName"]; asm["___getTypeName"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real____getTypeName.apply(null, arguments);
};

var real__htons = asm["_htons"]; asm["_htons"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__htons.apply(null, arguments);
};

var real__pthread_cond_broadcast = asm["_pthread_cond_broadcast"]; asm["_pthread_cond_broadcast"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__pthread_cond_broadcast.apply(null, arguments);
};

var real__llvm_bswap_i32 = asm["_llvm_bswap_i32"]; asm["_llvm_bswap_i32"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__llvm_bswap_i32.apply(null, arguments);
};

var real____muldsi3 = asm["___muldsi3"]; asm["___muldsi3"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real____muldsi3.apply(null, arguments);
};

var real____cxa_can_catch = asm["___cxa_can_catch"]; asm["___cxa_can_catch"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real____cxa_can_catch.apply(null, arguments);
};

var real__free = asm["_free"]; asm["_free"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__free.apply(null, arguments);
};

var real_establishStackSpace = asm["establishStackSpace"]; asm["establishStackSpace"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real_establishStackSpace.apply(null, arguments);
};

var real__memmove = asm["_memmove"]; asm["_memmove"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__memmove.apply(null, arguments);
};

var real_stackRestore = asm["stackRestore"]; asm["stackRestore"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real_stackRestore.apply(null, arguments);
};

var real__malloc = asm["_malloc"]; asm["_malloc"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__malloc.apply(null, arguments);
};

var real__pthread_mutex_lock = asm["_pthread_mutex_lock"]; asm["_pthread_mutex_lock"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__pthread_mutex_lock.apply(null, arguments);
};

var real___GLOBAL__sub_I_client_cpp = asm["__GLOBAL__sub_I_client_cpp"]; asm["__GLOBAL__sub_I_client_cpp"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real___GLOBAL__sub_I_client_cpp.apply(null, arguments);
};
var stackSave = Module["stackSave"] = asm["stackSave"];
var getTempRet0 = Module["getTempRet0"] = asm["getTempRet0"];
var ___udivdi3 = Module["___udivdi3"] = asm["___udivdi3"];
var setThrew = Module["setThrew"] = asm["setThrew"];
var _bitshift64Lshr = Module["_bitshift64Lshr"] = asm["_bitshift64Lshr"];
var _ntohs = Module["_ntohs"] = asm["_ntohs"];
var _fflush = Module["_fflush"] = asm["_fflush"];
var setTempRet0 = Module["setTempRet0"] = asm["setTempRet0"];
var ___cxa_is_pointer_type = Module["___cxa_is_pointer_type"] = asm["___cxa_is_pointer_type"];
var _llvm_cttz_i32 = Module["_llvm_cttz_i32"] = asm["_llvm_cttz_i32"];
var _sbrk = Module["_sbrk"] = asm["_sbrk"];
var _memcpy = Module["_memcpy"] = asm["_memcpy"];
var ___errno_location = Module["___errno_location"] = asm["___errno_location"];
var ___muldi3 = Module["___muldi3"] = asm["___muldi3"];
var _bitshift64Shl = Module["_bitshift64Shl"] = asm["_bitshift64Shl"];
var ___uremdi3 = Module["___uremdi3"] = asm["___uremdi3"];
var stackAlloc = Module["stackAlloc"] = asm["stackAlloc"];
var _i64Subtract = Module["_i64Subtract"] = asm["_i64Subtract"];
var __GLOBAL__sub_I_bind_cpp = Module["__GLOBAL__sub_I_bind_cpp"] = asm["__GLOBAL__sub_I_bind_cpp"];
var ___udivmoddi4 = Module["___udivmoddi4"] = asm["___udivmoddi4"];
var _htonl = Module["_htonl"] = asm["_htonl"];
var _i64Add = Module["_i64Add"] = asm["_i64Add"];
var _pthread_mutex_unlock = Module["_pthread_mutex_unlock"] = asm["_pthread_mutex_unlock"];
var _llvm_bswap_i16 = Module["_llvm_bswap_i16"] = asm["_llvm_bswap_i16"];
var _emscripten_get_global_libc = Module["_emscripten_get_global_libc"] = asm["_emscripten_get_global_libc"];
var ___getTypeName = Module["___getTypeName"] = asm["___getTypeName"];
var _htons = Module["_htons"] = asm["_htons"];
var _pthread_cond_broadcast = Module["_pthread_cond_broadcast"] = asm["_pthread_cond_broadcast"];
var _llvm_bswap_i32 = Module["_llvm_bswap_i32"] = asm["_llvm_bswap_i32"];
var ___muldsi3 = Module["___muldsi3"] = asm["___muldsi3"];
var ___cxa_can_catch = Module["___cxa_can_catch"] = asm["___cxa_can_catch"];
var _free = Module["_free"] = asm["_free"];
var runPostSets = Module["runPostSets"] = asm["runPostSets"];
var establishStackSpace = Module["establishStackSpace"] = asm["establishStackSpace"];
var _memmove = Module["_memmove"] = asm["_memmove"];
var stackRestore = Module["stackRestore"] = asm["stackRestore"];
var _malloc = Module["_malloc"] = asm["_malloc"];
var _pthread_mutex_lock = Module["_pthread_mutex_lock"] = asm["_pthread_mutex_lock"];
var __GLOBAL__sub_I_client_cpp = Module["__GLOBAL__sub_I_client_cpp"] = asm["__GLOBAL__sub_I_client_cpp"];
var _memset = Module["_memset"] = asm["_memset"];
var dynCall_iiiiiiii = Module["dynCall_iiiiiiii"] = asm["dynCall_iiiiiiii"];
var dynCall_viiiii = Module["dynCall_viiiii"] = asm["dynCall_viiiii"];
var dynCall_iiiiiid = Module["dynCall_iiiiiid"] = asm["dynCall_iiiiiid"];
var dynCall_vi = Module["dynCall_vi"] = asm["dynCall_vi"];
var dynCall_vii = Module["dynCall_vii"] = asm["dynCall_vii"];
var dynCall_iiiiiiiiiii = Module["dynCall_iiiiiiiiiii"] = asm["dynCall_iiiiiiiiiii"];
var dynCall_ii = Module["dynCall_ii"] = asm["dynCall_ii"];
var dynCall_iiiiiiiiiiii = Module["dynCall_iiiiiiiiiiii"] = asm["dynCall_iiiiiiiiiiii"];
var dynCall_iiii = Module["dynCall_iiii"] = asm["dynCall_iiii"];
var dynCall_viiiiiiiiiiiiiii = Module["dynCall_viiiiiiiiiiiiiii"] = asm["dynCall_viiiiiiiiiiiiiii"];
var dynCall_viiiiii = Module["dynCall_viiiiii"] = asm["dynCall_viiiiii"];
var dynCall_iiiiiii = Module["dynCall_iiiiiii"] = asm["dynCall_iiiiiii"];
var dynCall_iiiiiiiiiiiii = Module["dynCall_iiiiiiiiiiiii"] = asm["dynCall_iiiiiiiiiiiii"];
var dynCall_viiiiiii = Module["dynCall_viiiiiii"] = asm["dynCall_viiiiiii"];
var dynCall_viiiiiiiiii = Module["dynCall_viiiiiiiiii"] = asm["dynCall_viiiiiiiiii"];
var dynCall_iii = Module["dynCall_iii"] = asm["dynCall_iii"];
var dynCall_iiiiii = Module["dynCall_iiiiii"] = asm["dynCall_iiiiii"];
var dynCall_diii = Module["dynCall_diii"] = asm["dynCall_diii"];
var dynCall_i = Module["dynCall_i"] = asm["dynCall_i"];
var dynCall_iiiii = Module["dynCall_iiiii"] = asm["dynCall_iiiii"];
var dynCall_viii = Module["dynCall_viii"] = asm["dynCall_viii"];
var dynCall_v = Module["dynCall_v"] = asm["dynCall_v"];
var dynCall_iiiiiiiii = Module["dynCall_iiiiiiiii"] = asm["dynCall_iiiiiiiii"];
var dynCall_iiiiid = Module["dynCall_iiiiid"] = asm["dynCall_iiiiid"];
var dynCall_viiii = Module["dynCall_viiii"] = asm["dynCall_viiii"];
;
Runtime.stackAlloc = Module['stackAlloc'];
Runtime.stackSave = Module['stackSave'];
Runtime.stackRestore = Module['stackRestore'];
Runtime.establishStackSpace = Module['establishStackSpace'];
Runtime.setTempRet0 = Module['setTempRet0'];
Runtime.getTempRet0 = Module['getTempRet0'];


// === Auto-generated postamble setup entry stuff ===

Module['asm'] = asm;






/**
 * @constructor
 * @extends {Error}
 */
function ExitStatus(status) {
  this.name = "ExitStatus";
  this.message = "Program terminated with exit(" + status + ")";
  this.status = status;
};
ExitStatus.prototype = new Error();
ExitStatus.prototype.constructor = ExitStatus;

var initialStackTop;
var preloadStartTime = null;
var calledMain = false;

dependenciesFulfilled = function runCaller() {
  // If run has never been called, and we should call run (INVOKE_RUN is true, and Module.noInitialRun is not false)
  if (!Module['calledRun']) run();
  if (!Module['calledRun']) dependenciesFulfilled = runCaller; // try this again later, after new deps are fulfilled
}

Module['callMain'] = Module.callMain = function callMain(args) {
  assert(runDependencies == 0, 'cannot call main when async dependencies remain! (listen on __ATMAIN__)');
  assert(__ATPRERUN__.length == 0, 'cannot call main when preRun functions remain to be called');

  args = args || [];

  ensureInitRuntime();

  var argc = args.length+1;
  function pad() {
    for (var i = 0; i < 4-1; i++) {
      argv.push(0);
    }
  }
  var argv = [allocate(intArrayFromString(Module['thisProgram']), 'i8', ALLOC_NORMAL) ];
  pad();
  for (var i = 0; i < argc-1; i = i + 1) {
    argv.push(allocate(intArrayFromString(args[i]), 'i8', ALLOC_NORMAL));
    pad();
  }
  argv.push(0);
  argv = allocate(argv, 'i32', ALLOC_NORMAL);


  try {

    var ret = Module['_main'](argc, argv, 0);


    // if we're not running an evented main loop, it's time to exit
    exit(ret, /* implicit = */ true);
  }
  catch(e) {
    if (e instanceof ExitStatus) {
      // exit() throws this once it's done to make sure execution
      // has been stopped completely
      return;
    } else if (e == 'SimulateInfiniteLoop') {
      // running an evented main loop, don't immediately exit
      Module['noExitRuntime'] = true;
      return;
    } else {
      var toLog = e;
      if (e && typeof e === 'object' && e.stack) {
        toLog = [e, e.stack];
      }
      Module.printErr('exception thrown: ' + toLog);
      Module['quit'](1, e);
    }
  } finally {
    calledMain = true;
  }
}




/** @type {function(Array=)} */
function run(args) {
  args = args || Module['arguments'];

  if (preloadStartTime === null) preloadStartTime = Date.now();

  if (runDependencies > 0) {
    return;
  }

  writeStackCookie();

  preRun();

  if (runDependencies > 0) return; // a preRun added a dependency, run will be called later
  if (Module['calledRun']) return; // run may have just been called through dependencies being fulfilled just in this very frame

  function doRun() {
    if (Module['calledRun']) return; // run may have just been called while the async setStatus time below was happening
    Module['calledRun'] = true;

    if (ABORT) return;

    ensureInitRuntime();

    preMain();

    if (ENVIRONMENT_IS_WEB && preloadStartTime !== null) {
      Module.printErr('pre-main prep time: ' + (Date.now() - preloadStartTime) + ' ms');
    }

    if (Module['onRuntimeInitialized']) Module['onRuntimeInitialized']();

    if (Module['_main'] && shouldRunNow) Module['callMain'](args);

    postRun();
  }

  if (Module['setStatus']) {
    Module['setStatus']('Running...');
    setTimeout(function() {
      setTimeout(function() {
        Module['setStatus']('');
      }, 1);
      doRun();
    }, 1);
  } else {
    doRun();
  }
  checkStackCookie();
}
Module['run'] = Module.run = run;

function exit(status, implicit) {
  if (implicit && Module['noExitRuntime']) {
    Module.printErr('exit(' + status + ') implicitly called by end of main(), but noExitRuntime, so not exiting the runtime (you can use emscripten_force_exit, if you want to force a true shutdown)');
    return;
  }

  if (Module['noExitRuntime']) {
    Module.printErr('exit(' + status + ') called, but noExitRuntime, so halting execution but not exiting the runtime or preventing further async execution (you can use emscripten_force_exit, if you want to force a true shutdown)');
  } else {

    ABORT = true;
    EXITSTATUS = status;
    STACKTOP = initialStackTop;

    exitRuntime();

    if (Module['onExit']) Module['onExit'](status);
  }

  if (ENVIRONMENT_IS_NODE) {
    process['exit'](status);
  }
  Module['quit'](status, new ExitStatus(status));
}
Module['exit'] = Module.exit = exit;

var abortDecorators = [];

function abort(what) {
  if (what !== undefined) {
    Module.print(what);
    Module.printErr(what);
    what = JSON.stringify(what)
  } else {
    what = '';
  }

  ABORT = true;
  EXITSTATUS = 1;

  var extra = '';

  var output = 'abort(' + what + ') at ' + stackTrace() + extra;
  if (abortDecorators) {
    abortDecorators.forEach(function(decorator) {
      output = decorator(output, what);
    });
  }
  throw output;
}
Module['abort'] = Module.abort = abort;

// {{PRE_RUN_ADDITIONS}}

if (Module['preInit']) {
  if (typeof Module['preInit'] == 'function') Module['preInit'] = [Module['preInit']];
  while (Module['preInit'].length > 0) {
    Module['preInit'].pop()();
  }
}

// shouldRunNow refers to calling main(), not run().
var shouldRunNow = true;
if (Module['noInitialRun']) {
  shouldRunNow = false;
}


run();

// {{POST_RUN_ADDITIONS}}





// {{MODULE_ADDITIONS}}



